{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CardArityTransformSafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma supp_transform: \"supp (transform a e) \\<subseteq> supp e\"", "lemma transform_alts_Nil[simp]: \"transform_alts [] S = S\"", "lemma Astack_transform_alts[simp]:\n    \"Astack (transform_alts as S) = Astack S\"", "lemma fresh_star_transform_alts[intro]: \"a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S\"", "lemma closed_consistent:\n    assumes \"fv e = ({}::var set)\"\n    shows \"consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])\"", "lemma card_arity_transform_safe:\n    fixes c c'\n    assumes \"c \\<Rightarrow>\\<^sup>* c'\" and \"\\<not> boring_step c'\" and \"heap_upds_ok_conf c\" and \"consistent (ae,ce,a,as,r) c\"\n    shows \"\\<exists>ae' ce' a' as' r'. consistent (ae',ce',a',as',r') c' \\<and> conf_transform (ae,ce,a,as,r) c \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae',ce',a',as',r') c'\""], "translations": [["", "lemma supp_transform: \"supp (transform a e) \\<subseteq> supp e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (ccTransform a e) \\<subseteq> supp e", "by (induction rule: transform.induct)\n       (auto simp add: exp_assn.supp Let_supp dest!: subsetD[OF supp_map_transform] subsetD[OF supp_map_transform_step] )"], ["", "interpretation supp_bounded_transform transform"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_bounded_transform ccTransform", "by standard (auto simp add: fresh_def supp_transform)"], ["", "type_synonym tstate = \"(AEnv \\<times> (var \\<Rightarrow> two) \\<times> Arity \\<times> Arity list \\<times> var list)\""], ["", "fun transform_alts :: \"Arity list \\<Rightarrow> stack \\<Rightarrow> stack\"\n    where \n      \"transform_alts _ [] = []\"\n    | \"transform_alts (a#as) (Alts e1 e2 # S) = (Alts (ccTransform a e1) (ccTransform a e2)) # transform_alts as S\"\n    | \"transform_alts as (x # S) = x # transform_alts as S\""], ["", "lemma transform_alts_Nil[simp]: \"transform_alts [] S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transform_alts [] S = S", "by (induction  S) auto"], ["", "lemma Astack_transform_alts[simp]:\n    \"Astack (transform_alts as S) = Astack S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Astack (transform_alts as S) = Astack S", "by (induction rule: transform_alts.induct) auto"], ["", "lemma fresh_star_transform_alts[intro]: \"a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S", "by (induction as S  rule: transform_alts.induct) (auto simp add: fresh_star_Cons)"], ["", "fun a_transform :: \"astate \\<Rightarrow> conf \\<Rightarrow> conf\"\n  where \"a_transform (ae, a, as) (\\<Gamma>, e, S) =\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>), \n     ccTransform a e,\n     transform_alts as  S)\""], ["", "fun restr_conf :: \"var set \\<Rightarrow> conf \\<Rightarrow> conf\"\n    where \"restr_conf V (\\<Gamma>, e, S) = (restrictA V \\<Gamma>, e, restr_stack V S)\""], ["", "fun add_dummies_conf :: \"var list \\<Rightarrow> conf \\<Rightarrow> conf\"\n    where \"add_dummies_conf l (\\<Gamma>, e, S) = (\\<Gamma>, e, S @ map Dummy (rev l))\""], ["", "fun conf_transform :: \"tstate \\<Rightarrow> conf \\<Rightarrow> conf\"\n  where \"conf_transform (ae, ce, a, as, r) c = add_dummies_conf r ((a_transform (ae, a, as) (restr_conf (- set r) c)))\""], ["", "inductive consistent :: \"tstate \\<Rightarrow> conf \\<Rightarrow> bool\" where\n    consistentI[intro!]: \n    \"a_consistent (ae, a, as) (restr_conf (- set r) (\\<Gamma>, e, S))\n    \\<Longrightarrow> edom ae = edom ce\n    \\<Longrightarrow> prognosis ae as a (\\<Gamma>, e, S) \\<sqsubseteq> ce\n    \\<Longrightarrow> (\\<And> x. x \\<in> thunks \\<Gamma> \\<Longrightarrow> many \\<sqsubseteq> ce x \\<Longrightarrow> ae x = up\\<cdot>0)\n    \\<Longrightarrow> set r \\<subseteq> (domA \\<Gamma> \\<union> upds S) - edom ce\n    \\<Longrightarrow> consistent (ae, ce, a, as, r) (\\<Gamma>, e, S)\""], ["", "inductive_cases consistentE[elim!]: \"consistent (ae, ce, a, as) (\\<Gamma>, e, S)\""], ["", "lemma closed_consistent:\n    assumes \"fv e = ({}::var set)\"\n    shows \"consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])", "from assms"], ["proof (chain)\npicking this:\n  fv e = {}", "have \"edom (prognosis \\<bottom> [] 0 ([], e, [])) = {}\""], ["proof (prove)\nusing this:\n  fv e = {}\n\ngoal (1 subgoal):\n 1. edom (prognosis \\<bottom> [] 0 ([], e, [])) = {}", "by (auto dest!: subsetD[OF edom_prognosis])"], ["proof (state)\nthis:\n  edom (prognosis \\<bottom> [] 0 ([], e, [])) = {}\n\ngoal (1 subgoal):\n 1. consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  edom (prognosis \\<bottom> [] 0 ([], e, [])) = {}\n\ngoal (1 subgoal):\n 1. consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])", "by (auto simp add: edom_empty_iff_bot closed_a_consistent[OF assms])"], ["proof (state)\nthis:\n  consistent (\\<bottom>, \\<bottom>, 0, [], []) ([], e, [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_arity_transform_safe:\n    fixes c c'\n    assumes \"c \\<Rightarrow>\\<^sup>* c'\" and \"\\<not> boring_step c'\" and \"heap_upds_ok_conf c\" and \"consistent (ae,ce,a,as,r) c\"\n    shows \"\\<exists>ae' ce' a' as' r'. consistent (ae',ce',a',as',r') c' \\<and> conf_transform (ae,ce,a,as,r) c \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae',ce',a',as',r') c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') c' \\<and>\n       conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') c'", "using assms(1,2) heap_upds_ok_invariant assms(3-)"], ["proof (prove)\nusing this:\n  c \\<Rightarrow>\\<^sup>* c'\n  \\<not> boring_step c'\n  invariant (\\<Rightarrow>) heap_upds_ok_conf\n  heap_upds_ok_conf c\n  consistent (ae, ce, a, as, r) c\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') c' \\<and>\n       conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') c'", "proof(induction c c' arbitrary: ae ce a as r rule:step_invariant_induction)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "case (app\\<^sub>1 \\<Gamma> e x S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae as (inc\\<cdot>a) (\\<Gamma>, e, Arg x # S) \\<sqsubseteq> prognosis ae as a (\\<Gamma>, App e x, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as (inc\\<cdot>a) (\\<Gamma>, e, Arg x # S) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, App e x, S)", "by (rule prognosis_App)"], ["proof (state)\nthis:\n  prognosis ae as (inc\\<cdot>a) (\\<Gamma>, e, Arg x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, App e x, S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "with app\\<^sub>1"], ["proof (chain)\npicking this:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\n  prognosis ae as (inc\\<cdot>a) (\\<Gamma>, e, Arg x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, App e x, S)", "have \"consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\n  prognosis ae as (inc\\<cdot>a) (\\<Gamma>, e, Arg x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, App e x, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)", "by (auto intro: a_consistent_app\\<^sub>1 elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)", "by simp rule"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, App e x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 10. \\<And>c c' c'' ae ce a as r.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c';\n         \\<And>ae ce a as r.\n            consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n            \\<exists>ae' ce' a' as' r'.\n               consistent (ae', ce', a', as', r') c'' \\<and>\n               conf_transform (ae, ce, a, as, r)\n                c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n               conf_transform (ae', ce', a', as', r') c'';\n         consistent (ae, ce, a, as, r) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                             consistent (ae', ce', a', as', r') c'' \\<and>\n                             conf_transform (ae, ce, a, as, r)\n                              c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                             conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, inc\\<cdot>a, as, r) (\\<Gamma>, e, Arg x # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') (\\<Gamma>, e, Arg x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') (\\<Gamma>, e, Arg x # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') (\\<Gamma>, e, Arg x # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') (\\<Gamma>, e, Arg x # S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (app\\<^sub>2 \\<Gamma> y e x S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq> prognosis ae as a (\\<Gamma>, (Lam [y]. e), Arg x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, Lam [y]. e, Arg x # S)", "by (rule prognosis_subst_Lam)"], ["proof (state)\nthis:\n  prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Lam [y]. e, Arg x # S)", "have \"consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\""], ["proof (prove)\nusing this:\n  prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)", "using app\\<^sub>2"], ["proof (prove)\nusing this:\n  prognosis ae as (pred\\<cdot>a) (\\<Gamma>, e[y::=x], S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Lam [y]. e, Arg x # S)\n  heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)", "by (auto 4 3 intro: a_consistent_app\\<^sub>2 elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, pred \\<cdot> a, as, r) (\\<Gamma>, e[y::=x], S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)", "by (simp add: subst_transform[symmetric]) rule"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 9. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, pred\\<cdot>a, as, r) (\\<Gamma>, e[y::=x], S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') (\\<Gamma>, e[y::=x], S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') (\\<Gamma>, e[y::=x], S)", "by (blast  del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') (\\<Gamma>, e[y::=x], S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') (\\<Gamma>, e[y::=x], S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (thunk \\<Gamma> x e S)"], ["proof (state)\nthis:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"x \\<in> thunks \\<Gamma>\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<in> thunks \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence [simp]: \"x \\<in> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma>", "by (rule subsetD[OF thunks_domA])"], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from thunk"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)", "have \"prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce", "by auto"], ["proof (state)\nthis:\n  prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from below_trans[OF prognosis_called fun_belowD[OF this] ]"], ["proof (chain)\npicking this:\n  once \\<sqsubseteq> ce x", "have [simp]: \"x \\<in> edom ce\""], ["proof (prove)\nusing this:\n  once \\<sqsubseteq> ce x\n\ngoal (1 subgoal):\n 1. x \\<in> edom ce", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  x \\<in> edom ce\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence [simp]: \"x \\<notin> set r\""], ["proof (prove)\nusing this:\n  x \\<in> edom ce\n\ngoal (1 subgoal):\n 1. x \\<notin> set r", "using thunk"], ["proof (prove)\nusing this:\n  x \\<in> edom ce\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<notin> set r", "by auto"], ["proof (state)\nthis:\n  x \\<notin> set r\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from \\<open>heap_upds_ok_conf (\\<Gamma>, Var x, S)\\<close>"], ["proof (chain)\npicking this:\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)", "have \"x \\<notin> upds S\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<notin> upds S", "by (auto dest!:  heap_upds_okE)"], ["proof (state)\nthis:\n  x \\<notin> upds S\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"x \\<in> edom ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "using thunk"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "by auto"], ["proof (state)\nthis:\n  x \\<in> edom ae\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  x \\<in> edom ae", "obtain u where \"ae x = up\\<cdot>u\""], ["proof (prove)\nusing this:\n  x \\<in> edom ae\n\ngoal (1 subgoal):\n 1. (\\<And>u. ae x = up\\<cdot>u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"ae x\") (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ae x = up\\<cdot>u\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 8. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "proof(cases \"ce x\" rule:two_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 3. ce x = none \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "case none"], ["proof (state)\nthis:\n  ce x = none\n\ngoal (3 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 3. ce x = none \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "with \\<open>x \\<in> edom ce\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> edom ce\n  ce x = none", "have False"], ["proof (prove)\nusing this:\n  x \\<in> edom ce\n  ce x = none\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 3. ce x = none \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", ".."], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "case once"], ["proof (state)\nthis:\n  ce x = once\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from \\<open>prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\\<close>"], ["proof (chain)\npicking this:\n  prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce", "have \"prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\""], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once", "using once"], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\n  ce x = once\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once", "by (metis (mono_tags) fun_belowD)"], ["proof (state)\nthis:\n  prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "hence \"x \\<notin> ap S\""], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\n\ngoal (1 subgoal):\n 1. x \\<notin> ap S", "using prognosis_ap[of ae as a \\<Gamma> \"(Var x)\" S]"], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\n  const_on (prognosis ae as a (\\<Gamma>, Var x, S)) (ap S) many\n\ngoal (1 subgoal):\n 1. x \\<notin> ap S", "by auto"], ["proof (state)\nthis:\n  x \\<notin> ap S\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>u\\<close> \\<open>\\<not> isVal e\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  \\<not> isVal e", "have *: \"prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> record_call x \\<cdot> (prognosis ae as a (\\<Gamma>, Var x, S))\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  \\<not> isVal e\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))", "by (rule prognosis_Var_thunk)"], ["proof (state)\nthis:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from \\<open>prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\\<close>"], ["proof (chain)\npicking this:\n  prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once", "have \"(record_call x \\<cdot> (prognosis ae as a (\\<Gamma>, Var x, S))) x = none\""], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, Var x, S) x \\<sqsubseteq> once\n\ngoal (1 subgoal):\n 1. (record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))) x = none", "by (simp add: two_pred_none)"], ["proof (state)\nthis:\n  (record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))) x = none\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "hence **: \"prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x = none\""], ["proof (prove)\nusing this:\n  (record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))) x = none\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x = none", "using fun_belowD[OF *, where x = x]"], ["proof (prove)\nusing this:\n  (record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))) x = none\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x \\<sqsubseteq>\n  (record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))) x\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x = none", "by auto"], ["proof (state)\nthis:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x = none\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have eq: \"prognosis (env_delete x ae) as u (delete x \\<Gamma>, e, Upd x # S) = prognosis ae as u (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis (env_delete x ae) as u (delete x \\<Gamma>, e, Upd x # S) =\n    prognosis ae as u (delete x \\<Gamma>, e, Upd x # S)", "by (rule prognosis_env_cong) simp"], ["proof (state)\nthis:\n  prognosis (env_delete x ae) as u (delete x \\<Gamma>, e, Upd x # S) =\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have [simp]: \"restr_stack (- set r - {x}) S = restr_stack (- set r) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restr_stack (- set r - {x}) S = restr_stack (- set r) S", "using \\<open>x \\<notin> upds S\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> upds S\n\ngoal (1 subgoal):\n 1. restr_stack (- set r - {x}) S = restr_stack (- set r) S", "by (auto intro: restr_stack_cong)"], ["proof (state)\nthis:\n  restr_stack (- set r - {x}) S = restr_stack (- set r) S\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"prognosis (env_delete x ae) as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> env_delete x ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis (env_delete x ae) as u\n     (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    env_delete x ce", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    env_delete x ce", "using ** below_trans[OF below_trans[OF * Cfun.monofun_cfun_arg[OF \\<open>prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\\<close>]] record_call_below_arg]"], ["proof (prove)\nusing this:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) x = none\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    env_delete x ce", "by (rule below_env_deleteI)"], ["proof (state)\nthis:\n  prognosis (env_delete x ae) as u\n   (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  env_delete x ce\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "moreover"], ["proof (state)\nthis:\n  prognosis (env_delete x ae) as u\n   (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  env_delete x ce\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have *: \"a_consistent (env_delete x ae, u, as) (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (env_delete x ae, u, as)\n     (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)", "using thunk \\<open>ae x = up\\<cdot>u\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>u\n\ngoal (1 subgoal):\n 1. a_consistent (env_delete x ae, u, as)\n     (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)", "by (auto intro!: a_consistent_thunk_once simp del: restr_delete)"], ["proof (state)\nthis:\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "ultimately"], ["proof (chain)\npicking this:\n  prognosis (env_delete x ae) as u\n   (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  env_delete x ce\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)", "have \"consistent (env_delete x ae, env_delete x ce, u, as, x # r) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  prognosis (env_delete x ae) as u\n   (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  env_delete x ce\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n     (delete x \\<Gamma>, e, Upd x # S)", "using thunk"], ["proof (prove)\nusing this:\n  prognosis (env_delete x ae) as u\n   (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  env_delete x ce\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n     (delete x \\<Gamma>, e, Upd x # S)", "by (auto simp add: restr_delete_twist Compl_insert elim:below_trans )"], ["proof (state)\nthis:\n  consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "moreover"], ["proof (state)\nthis:\n  consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from *"], ["proof (chain)\npicking this:\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)", "have **: \"Astack (transform_alts as (restr_stack (- set r) S) @ map Dummy (rev r) @ [Dummy x]) \\<sqsubseteq> u\""], ["proof (prove)\nusing this:\n  a_consistent (env_delete x ae, u, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. Astack\n     (transform_alts as (restr_stack (- set r) S) @\n      map Dummy (rev r) @ [Dummy x]) \\<sqsubseteq>\n    u", "by (auto elim: a_consistent_stackD)"], ["proof (state)\nthis:\n  Astack\n   (transform_alts as (restr_stack (- set r) S) @\n    map Dummy (rev r) @ [Dummy x]) \\<sqsubseteq>\n  u\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "{"], ["proof (state)\nthis:\n  Astack\n   (transform_alts as (restr_stack (- set r) S) @\n    map Dummy (rev r) @ [Dummy x]) \\<sqsubseteq>\n  u\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from  \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>u\\<close> once"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  ce x = once", "have \"map_of (map_transform Aeta_expand ae (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))) x = Some (Aeta_expand u (transform u e))\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  ce x = once\n\ngoal (1 subgoal):\n 1. map_of\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n     x =\n    Some (Aeta_expand u (ccTransform u e))", "by (simp add: map_of_map_transform)"], ["proof (state)\nthis:\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "hence \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n             add_dummies_conf r (delete x (map_transform Aeta_expand ae (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))), Aeta_expand u (ccTransform u e), Upd x # transform_alts as (restr_stack (- set r) S))\""], ["proof (prove)\nusing this:\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n    add_dummies_conf r\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      Upd x # transform_alts as (restr_stack (- set r) S))", "by (auto simp add:  map_transform_delete delete_map_transform_env_delete insert_absorb restr_delete_twist simp del: restr_delete)"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n  add_dummies_conf r\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    Upd x # transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "also"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n  add_dummies_conf r\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    Upd x # transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"\\<dots> \\<Rightarrow>\\<^sub>G\\<^sup>* add_dummies_conf (x # r) (delete x (map_transform Aeta_expand ae (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))), Aeta_expand u (ccTransform u e), transform_alts as (restr_stack (- set r) S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf r\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      Upd x #\n      transform_alts as\n       (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    add_dummies_conf (x # r)\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S))", "apply (rule r_into_rtranclp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf r\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      Upd x #\n      transform_alts as (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\n    add_dummies_conf (x # r)\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S))", "apply (simp add: append_assoc[symmetric] del: append_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (delete x\n      (map_transform Aeta_expand ae\n        (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n     Aeta_expand u (ccTransform u e),\n     Upd x #\n     transform_alts as (restr_stack (- set r) S) @\n     map Dummy (rev r)) \\<Rightarrow>\\<^sub>G\n    (delete x\n      (map_transform Aeta_expand ae\n        (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n     Aeta_expand u (ccTransform u e),\n     (transform_alts as (restr_stack (- set r) S) @ map Dummy (rev r)) @\n     [Dummy x])", "apply (rule dropUpd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  add_dummies_conf r\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    Upd x #\n    transform_alts as\n     (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "also"], ["proof (state)\nthis:\n  add_dummies_conf r\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    Upd x #\n    transform_alts as\n     (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"\\<dots> \\<Rightarrow>\\<^sub>G\\<^sup>* add_dummies_conf (x # r) (delete x (map_transform Aeta_expand ae (map_transform ccTransform ae  (restrictA (- set r) \\<Gamma>))), ccTransform u e, transform_alts as (restr_stack (- set r) S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf (x # r)\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as\n       (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    add_dummies_conf (x # r)\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      ccTransform u e, transform_alts as (restr_stack (- set r) S))", "by simp (intro  normal_trans Aeta_expand_safe **)"], ["proof (state)\nthis:\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as\n     (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    ccTransform u e, transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "also(rtranclp_trans)"], ["proof (state)\nthis:\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as\n     (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    ccTransform u e, transform_alts as (restr_stack (- set r) S))\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"\\<dots> = conf_transform (env_delete x ae, env_delete x ce, u, as, x # r) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf (x # r)\n     (delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      ccTransform u e, transform_alts as (restr_stack (- set r) S)) =\n    conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n     (delete x \\<Gamma>, e, Upd x # S)", "by (auto intro!: map_transform_cong simp add:  map_transform_delete[symmetric]  restr_delete_twist Compl_insert)"], ["proof (state)\nthis:\n  add_dummies_conf (x # r)\n   (delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    ccTransform u e, transform_alts as (restr_stack (- set r) S)) =\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "finally(back_subst)"], ["proof (chain)\npicking this:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (env_delete x ae, env_delete x ce, u, as, x # r) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n     (delete x \\<Gamma>, e, Upd x # S)", "."], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "}"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)\n 2. ce x = once \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "ultimately"], ["proof (chain)\npicking this:\n  consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)", "show ?thesis"], ["proof (prove)\nusing this:\n  consistent (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (env_delete x ae, env_delete x ce, u, as, x # r)\n   (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "case many"], ["proof (state)\nthis:\n  ce x = many\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>u\\<close> \\<open>\\<not> isVal e\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  \\<not> isVal e", "have \"prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> record_call x \\<cdot> (prognosis ae as a (\\<Gamma>, Var x, S))\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  \\<not> isVal e\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))", "by (rule prognosis_Var_thunk)"], ["proof (state)\nthis:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "also"], ["proof (state)\nthis:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "note record_call_below_arg"], ["proof (state)\nthis:\n  record_call ?x\\<cdot>?f \\<sqsubseteq> ?f\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)", "have *: \"prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> prognosis ae as a (\\<Gamma>, Var x, S)\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, Var x, S)", "by this simp_all"], ["proof (state)\nthis:\n  prognosis ae as u (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"ae x = up\\<cdot>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0", "using thunk many \\<open>x \\<in> thunks \\<Gamma>\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  ce x = many\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0", "by (auto)"], ["proof (state)\nthis:\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "hence \"u = 0\""], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. u = 0", "using \\<open>ae x = up\\<cdot>u\\<close>"], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n  ae x = up\\<cdot>u\n\ngoal (1 subgoal):\n 1. u = 0", "by simp"], ["proof (state)\nthis:\n  u = 0\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce", "using *[unfolded \\<open>u=0\\<close>] thunk"], ["proof (prove)\nusing this:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce", "by (auto elim: below_trans)"], ["proof (state)\nthis:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "moreover"], ["proof (state)\nthis:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "have \"a_consistent (ae, 0, as) (delete x (restrictA (- set r) \\<Gamma>), e, Upd x # restr_stack (- set r) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, 0, as)\n     (delete x (restrictA (- set r) \\<Gamma>), e,\n      Upd x # restr_stack (- set r) S)", "using thunk \\<open>ae x = up\\<cdot>0\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. a_consistent (ae, 0, as)\n     (delete x (restrictA (- set r) \\<Gamma>), e,\n      Upd x # restr_stack (- set r) S)", "by (auto intro!: a_consistent_thunk_0 simp del: restr_delete)"], ["proof (state)\nthis:\n  a_consistent (ae, 0, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e,\n    Upd x # restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "ultimately"], ["proof (chain)\npicking this:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n  a_consistent (ae, 0, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e,\n    Upd x # restr_stack (- set r) S)", "have \"consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n  a_consistent (ae, 0, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e,\n    Upd x # restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)", "using thunk \\<open>ae x = up\\<cdot>u\\<close> \\<open>u = 0\\<close>"], ["proof (prove)\nusing this:\n  prognosis ae as 0 (delete x \\<Gamma>, e, Upd x # S) \\<sqsubseteq> ce\n  a_consistent (ae, 0, as)\n   (delete x (restrictA (- set r) \\<Gamma>), e,\n    Upd x # restr_stack (- set r) S)\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>u\n  u = 0\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)", "by (auto simp add:  restr_delete_twist)"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "from  \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>0\\<close> many"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>0\n  ce x = many", "have \"map_of (map_transform Aeta_expand ae (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))) x = Some (transform 0 e)\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>0\n  ce x = many\n\ngoal (1 subgoal):\n 1. map_of\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n     x =\n    Some (ccTransform 0 e)", "by (simp add: map_of_map_transform)"], ["proof (state)\nthis:\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (ccTransform 0 e)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "with \\<open>\\<not> isVal e\\<close>"], ["proof (chain)\npicking this:\n  \\<not> isVal e\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (ccTransform 0 e)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  \\<not> isVal e\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (ccTransform 0 e)\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)", "by (auto intro: gc_step.intros simp add: map_transform_delete restr_delete_twist intro!: step.intros  simp del: restr_delete)"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. ce x = many \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)", "show ?thesis"], ["proof (prove)\nusing this:\n  consistent (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (delete x \\<Gamma>, e, Upd x # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (lamvar \\<Gamma> x e S)"], ["proof (state)\nthis:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from lamvar(1)"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e", "have [simp]: \"x \\<in> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma>", "by (metis domI dom_map_of_conv_domA)"], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from lamvar"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)", "have \"prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce", "by auto"], ["proof (state)\nthis:\n  prognosis ae as a (\\<Gamma>, Var x, S) \\<sqsubseteq> ce\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from below_trans[OF prognosis_called fun_belowD[OF this] ]"], ["proof (chain)\npicking this:\n  once \\<sqsubseteq> ce x", "have [simp]: \"x \\<in> edom ce\""], ["proof (prove)\nusing this:\n  once \\<sqsubseteq> ce x\n\ngoal (1 subgoal):\n 1. x \\<in> edom ce", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  x \\<in> edom ce\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  x \\<in> edom ce", "obtain c where \"ce x = up\\<cdot>c\""], ["proof (prove)\nusing this:\n  x \\<in> edom ce\n\ngoal (1 subgoal):\n 1. (\\<And>c. ce x = up\\<cdot>c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"ce x\") (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ce x = up\\<cdot>c\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from lamvar"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)", "have [simp]: \"x \\<notin> set r\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<notin> set r", "by auto"], ["proof (state)\nthis:\n  x \\<notin> set r\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  x \\<notin> set r", "have \"x \\<in> edom ae\""], ["proof (prove)\nusing this:\n  x \\<notin> set r\n\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "using lamvar"], ["proof (prove)\nusing this:\n  x \\<notin> set r\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "by auto"], ["proof (state)\nthis:\n  x \\<in> edom ae\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  x \\<in> edom ae", "obtain  u where \"ae x = up\\<cdot>u\""], ["proof (prove)\nusing this:\n  x \\<in> edom ae\n\ngoal (1 subgoal):\n 1. (\\<And>u. ae x = up\\<cdot>u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"ae x\") (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ae x = up\\<cdot>u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) = prognosis ae as u (\\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) =\n    prognosis ae as u (\\<Gamma>, e, S)", "using \\<open>map_of \\<Gamma> x = Some e\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n\ngoal (1 subgoal):\n 1. prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) =\n    prognosis ae as u (\\<Gamma>, e, S)", "by (auto intro!: prognosis_reorder)"], ["proof (state)\nthis:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) =\n  prognosis ae as u (\\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "also"], ["proof (state)\nthis:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) =\n  prognosis ae as u (\\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"\\<dots> \\<sqsubseteq> record_call x \\<cdot> (prognosis ae as a (\\<Gamma>, Var x, S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as u (\\<Gamma>, e, S) \\<sqsubseteq>\n    record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))", "using \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>u\\<close> \\<open>isVal e\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  isVal e\n\ngoal (1 subgoal):\n 1. prognosis ae as u (\\<Gamma>, e, S) \\<sqsubseteq>\n    record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))", "by (rule prognosis_Var_lam)"], ["proof (state)\nthis:\n  prognosis ae as u (\\<Gamma>, e, S) \\<sqsubseteq>\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "also"], ["proof (state)\nthis:\n  prognosis ae as u (\\<Gamma>, e, S) \\<sqsubseteq>\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"\\<dots> \\<sqsubseteq> prognosis ae as a (\\<Gamma>, Var x, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. record_call x\\<cdot>\n    (prognosis ae as a (\\<Gamma>, Var x, S)) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, Var x, S)", "by (rule record_call_below_arg)"], ["proof (state)\nthis:\n  record_call x\\<cdot>(prognosis ae as a (\\<Gamma>, Var x, S)) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)", "have *: \"prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq> prognosis ae as a (\\<Gamma>, Var x, S)\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, Var x, S)", "by this simp_all"], ["proof (state)\nthis:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"a_consistent (ae, u, as) ((x,e) # delete x (restrictA (- set r) \\<Gamma>), e, restr_stack (- set r) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, u, as)\n     ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n      restr_stack (- set r) S)", "using lamvar \\<open>ae x = up\\<cdot>u\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>u\n\ngoal (1 subgoal):\n 1. a_consistent (ae, u, as)\n     ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n      restr_stack (- set r) S)", "by (auto intro!: a_consistent_lamvar simp del: restr_delete)"], ["proof (state)\nthis:\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)", "have \"consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "using lamvar edom_mono[OF *]"], ["proof (prove)\nusing this:\n  prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, Var x, S)\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\n  edom (prognosis ae as u ((x, e) # delete x \\<Gamma>, e, S))\n  \\<subseteq> edom (prognosis ae as a (\\<Gamma>, Var x, S))\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "by (auto simp add:  thunks_Cons restr_delete_twist elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from \\<open>a_consistent _ _\\<close>"], ["proof (chain)\npicking this:\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)", "have **: \"Astack (transform_alts as (restr_stack (- set r) S) @ map Dummy (rev r)) \\<sqsubseteq> u\""], ["proof (prove)\nusing this:\n  a_consistent (ae, u, as)\n   ((x, e) # delete x (restrictA (- set r) \\<Gamma>), e,\n    restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. Astack\n     (transform_alts as (restr_stack (- set r) S) @\n      map Dummy (rev r)) \\<sqsubseteq>\n    u", "by (auto elim: a_consistent_stackD)"], ["proof (state)\nthis:\n  Astack\n   (transform_alts as (restr_stack (- set r) S) @\n    map Dummy (rev r)) \\<sqsubseteq>\n  u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  Astack\n   (transform_alts as (restr_stack (- set r) S) @\n    map Dummy (rev r)) \\<sqsubseteq>\n  u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from \\<open>isVal e\\<close>"], ["proof (chain)\npicking this:\n  isVal e", "have \"isVal (transform u e)\""], ["proof (prove)\nusing this:\n  isVal e\n\ngoal (1 subgoal):\n 1. isVal (ccTransform u e)", "by simp"], ["proof (state)\nthis:\n  isVal (ccTransform u e)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"isVal (Aeta_expand u (transform u e))\""], ["proof (prove)\nusing this:\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. isVal (Aeta_expand u (ccTransform u e))", "by (rule isVal_Aeta_expand)"], ["proof (state)\nthis:\n  isVal (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  isVal (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from  \\<open>map_of \\<Gamma> x = Some e\\<close>  \\<open>ae x = up \\<cdot> u\\<close> \\<open>ce x = up\\<cdot>c\\<close> \\<open>isVal (transform u e)\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  ce x = up\\<cdot>c\n  isVal (ccTransform u e)", "have \"map_of (map_transform Aeta_expand ae (map_transform transform ae (restrictA (- set r) \\<Gamma>))) x = Some (Aeta_expand u (transform u e))\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  ce x = up\\<cdot>c\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. map_of\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n     x =\n    Some (Aeta_expand u (ccTransform u e))", "by (simp add: map_of_map_transform)"], ["proof (state)\nthis:\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  isVal (Aeta_expand u (ccTransform u e))\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (Aeta_expand u (ccTransform u e))", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n          add_dummies_conf r ((x, Aeta_expand u (transform u e)) # delete x (map_transform Aeta_expand ae (map_transform transform ae (restrictA (- set r) \\<Gamma>))), Aeta_expand u (transform u e), transform_alts as (restr_stack (- set r) S))\""], ["proof (prove)\nusing this:\n  isVal (Aeta_expand u (ccTransform u e))\n  map_of\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>)))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    add_dummies_conf r\n     ((x, Aeta_expand u (ccTransform u e)) #\n      delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S))", "by (auto intro!: normal_trans[OF lambda_var] simp add: map_transform_delete simp del: restr_delete)"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf r\n   ((x, Aeta_expand u (ccTransform u e)) #\n    delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "also"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  add_dummies_conf r\n   ((x, Aeta_expand u (ccTransform u e)) #\n    delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"\\<dots> = add_dummies_conf r ((map_transform Aeta_expand ae (map_transform transform ae ((x,e) # delete x (restrictA (- set r) \\<Gamma>)))), Aeta_expand u  (transform u e), transform_alts as (restr_stack (- set r) S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf r\n     ((x, Aeta_expand u (ccTransform u e)) #\n      delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S)) =\n    add_dummies_conf r\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae\n         ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S))", "using \\<open>ae x = up \\<cdot> u\\<close> \\<open>ce x = up\\<cdot>c\\<close> \\<open>isVal (transform u e)\\<close>"], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>u\n  ce x = up\\<cdot>c\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. add_dummies_conf r\n     ((x, Aeta_expand u (ccTransform u e)) #\n      delete x\n       (map_transform Aeta_expand ae\n         (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S)) =\n    add_dummies_conf r\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae\n         ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as (restr_stack (- set r) S))", "by (simp add: map_transform_Cons map_transform_delete restr_delete_twist del: restr_delete)"], ["proof (state)\nthis:\n  add_dummies_conf r\n   ((x, Aeta_expand u (ccTransform u e)) #\n    delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S)) =\n  add_dummies_conf r\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae\n       ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "also(subst[rotated])"], ["proof (state)\nthis:\n  add_dummies_conf r\n   ((x, Aeta_expand u (ccTransform u e)) #\n    delete x\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S)) =\n  add_dummies_conf r\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae\n       ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as (restr_stack (- set r) S))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"\\<dots> \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_dummies_conf r\n     (map_transform Aeta_expand ae\n       (map_transform ccTransform ae\n         ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n      Aeta_expand u (ccTransform u e),\n      transform_alts as\n       (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "by (simp add: restr_delete_twist) (rule normal_trans[OF Aeta_expand_safe[OF ** ]])"], ["proof (state)\nthis:\n  add_dummies_conf r\n   (map_transform Aeta_expand ae\n     (map_transform ccTransform ae\n       ((x, e) # delete x (restrictA (- set r) \\<Gamma>))),\n    Aeta_expand u (ccTransform u e),\n    transform_alts as\n     (restr_stack (- set r) S)) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "finally(rtranclp_trans)"], ["proof (chain)\npicking this:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n    conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "."], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Var x,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 7. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae, ce, u, as, r) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        ((x, e) # delete x \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 6. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 6. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (var\\<^sub>2 \\<Gamma> x e S)"], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae ce a as r.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, e,\n                              Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 6. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "proof(cases \"x \\<in> set r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "case [simp]: False"], ["proof (state)\nthis:\n  x \\<notin> set r\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "from var\\<^sub>2"], ["proof (chain)\npicking this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)", "have \"a_consistent (ae, a, as) (restrictA (- set r) \\<Gamma>, e, Upd x # restr_stack (-set r) S)\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     (restrictA (- set r) \\<Gamma>, e, Upd x # restr_stack (- set r) S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, e, Upd x # restr_stack (- set r) S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "from a_consistent_UpdD[OF this]"], ["proof (chain)\npicking this:\n  ae x = up\\<cdot>0\n  a = 0", "have \"ae x = up\\<cdot>0\" and \"a = 0\""], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n  a = 0\n\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0 &&& a = 0", "."], ["proof (state)\nthis:\n  ae x = up\\<cdot>0\n  a = 0\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "from \\<open>isVal e\\<close> \\<open>x \\<notin> domA \\<Gamma>\\<close>"], ["proof (chain)\npicking this:\n  isVal e\n  x \\<notin> domA \\<Gamma>", "have *: \"prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq> prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  isVal e\n  x \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n    prognosis ae as 0 (\\<Gamma>, e, Upd x # S)", "by (rule prognosis_Var2)"], ["proof (state)\nthis:\n  prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "moreover"], ["proof (state)\nthis:\n  prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"a_consistent (ae, a, as) ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)", "using var\\<^sub>2"], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)", "by (auto intro!: a_consistent_var\\<^sub>2)"], ["proof (state)\nthis:\n  a_consistent (ae, a, as)\n   ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "ultimately"], ["proof (chain)\npicking this:\n  prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\n  a_consistent (ae, a, as)\n   ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)", "have \"consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\n  a_consistent (ae, a, as)\n   ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)", "using var\\<^sub>2 \\<open>a = 0\\<close>"], ["proof (prove)\nusing this:\n  prognosis ae as 0 ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as 0 (\\<Gamma>, e, Upd x # S)\n  a_consistent (ae, a, as)\n   ((x, e) # restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n  a = 0\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)", "by (auto simp add: thunks_Cons elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)", "using \\<open>ae x = up\\<cdot>0\\<close> \\<open>a = 0\\<close> var\\<^sub>2"], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n  a = 0\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)", "by (auto intro: gc_step.intros simp add: map_transform_Cons)"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (2 subgoals):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n 2. x \\<notin> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)", "show ?thesis"], ["proof (prove)\nusing this:\n  consistent (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "case True"], ["proof (state)\nthis:\n  x \\<in> set r\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "hence \"ce x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<in> set r\n\ngoal (1 subgoal):\n 1. ce x = none", "using var\\<^sub>2"], ["proof (prove)\nusing this:\n  x \\<in> set r\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. ce x = none", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ce x = none\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "hence \"x \\<notin> edom ce\""], ["proof (prove)\nusing this:\n  ce x = none\n\ngoal (1 subgoal):\n 1. x \\<notin> edom ce", "by (simp add: edomIff)"], ["proof (state)\nthis:\n  x \\<notin> edom ce\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "hence \"x \\<notin> edom ae\""], ["proof (prove)\nusing this:\n  x \\<notin> edom ce\n\ngoal (1 subgoal):\n 1. x \\<notin> edom ae", "using var\\<^sub>2"], ["proof (prove)\nusing this:\n  x \\<notin> edom ce\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<notin> edom ae", "by auto"], ["proof (state)\nthis:\n  x \\<notin> edom ae\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "hence [simp]: \"ae x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<notin> edom ae\n\ngoal (1 subgoal):\n 1. ae x = \\<bottom>", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ae x = \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "note  \\<open>x \\<in> set r\\<close>[simp]"], ["proof (state)\nthis:\n  x \\<in> set r\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq> prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n    prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S)", "by (rule prognosis_upd)"], ["proof (state)\nthis:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "also"], ["proof (state)\nthis:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"\\<dots> \\<sqsubseteq> prognosis ae as a (delete x ((x,e) # \\<Gamma>), e, Upd x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    prognosis ae as a (delete x ((x, e) # \\<Gamma>), e, Upd x # S)", "using \\<open>ae x = \\<bottom>\\<close>"], ["proof (prove)\nusing this:\n  ae x = \\<bottom>\n\ngoal (1 subgoal):\n 1. prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n    prognosis ae as a (delete x ((x, e) # \\<Gamma>), e, Upd x # S)", "by (rule prognosis_not_called)"], ["proof (state)\nthis:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (delete x ((x, e) # \\<Gamma>), e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "also"], ["proof (state)\nthis:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, Upd x # S) \\<sqsubseteq>\n  prognosis ae as a (delete x ((x, e) # \\<Gamma>), e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"delete x ((x,e)#\\<Gamma>) = \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete x ((x, e) # \\<Gamma>) = \\<Gamma>", "using \\<open>x \\<notin> domA \\<Gamma>\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. delete x ((x, e) # \\<Gamma>) = \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  delete x ((x, e) # \\<Gamma>) = \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)", "have *: \"prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq> prognosis ae as a (\\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n    prognosis ae as a (\\<Gamma>, e, Upd x # S)", "by this simp"], ["proof (state)\nthis:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "then"], ["proof (chain)\npicking this:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)", "have \"consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)", "using var\\<^sub>2"], ["proof (prove)\nusing this:\n  prognosis ae as a ((x, e) # \\<Gamma>, e, S) \\<sqsubseteq>\n  prognosis ae as a (\\<Gamma>, e, Upd x # S)\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)", "by (auto simp add: thunks_Cons  elim:below_trans a_consistent_var\\<^sub>2)"], ["proof (state)\nthis:\n  consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) = conf_transform (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) =\n    conf_transform (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)", "by (auto simp add: map_transform_restrA[symmetric])"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) =\n  conf_transform (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. x \\<in> set r \\<Longrightarrow>\n    \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) =\n  conf_transform (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)", "show ?thesis"], ["proof (prove)\nusing this:\n  consistent (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r) (\\<Gamma>, e, Upd x # S) =\n  conf_transform (ae, ce, a, as, r) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)", "by (fastforce del: consistentI consistentE simp del:conf_transform.simps)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') ((x, e) # \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (let\\<^sub>1 \\<Delta> \\<Gamma> e S)"], ["proof (state)\nthis:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "let ?ae = \"Aheap \\<Delta> e\\<cdot>a\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "let ?ce = \"cHeap \\<Delta> e\\<cdot>a\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"domA \\<Delta> \\<inter> upds S = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<inter> upds S = {}", "using fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<inter> upds S = {}", "by (auto dest: subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence *: \"\\<And> x. x \\<in> upds S \\<Longrightarrow> x \\<notin> edom ?ae\""], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> upds S \\<Longrightarrow>\n       x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)", "by (auto simp add: edom_cHeap dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  ?x \\<in> upds S \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have restr_stack_simp2: \"restr_stack (edom (?ae \\<squnion> ae)) S = restr_stack (edom ae) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n    restr_stack (edom ae) S", "by (auto intro: restr_stack_cong dest!: *)"], ["proof (state)\nthis:\n  restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n  restr_stack (edom ae) S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"edom ce = edom ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom ce = edom ae", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. edom ce = edom ae", "by auto"], ["proof (state)\nthis:\n  edom ce = edom ae\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "by (auto dest!: a_consistent_edom_subsetD)"], ["proof (state)\nthis:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from subsetD[OF this] fresh_distinct[OF let\\<^sub>1(1)] fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (chain)\npicking this:\n  ?c \\<in> edom ae \\<Longrightarrow> ?c \\<in> domA \\<Gamma> \\<union> upds S\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}", "have \"edom ae \\<inter> domA \\<Delta> = {}\""], ["proof (prove)\nusing this:\n  ?c \\<in> edom ae \\<Longrightarrow> ?c \\<in> domA \\<Gamma> \\<union> upds S\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. edom ae \\<inter> domA \\<Delta> = {}", "by (auto dest: subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from \\<open>edom ae \\<inter> domA \\<Delta> = {}\\<close>"], ["proof (chain)\npicking this:\n  edom ae \\<inter> domA \\<Delta> = {}", "have [simp]: \"edom (Aheap \\<Delta> e\\<cdot>a) \\<inter> edom ae = {}\""], ["proof (prove)\nusing this:\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (1 subgoal):\n 1. edom (Aheap \\<Delta> e\\<cdot>a) \\<inter> edom ae = {}", "by (auto dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  edom (Aheap \\<Delta> e\\<cdot>a) \\<inter> edom ae = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from fresh_distinct[OF let\\<^sub>1(1)]"], ["proof (chain)\npicking this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}", "have [simp]: \"restrictA (edom ae \\<union> edom (Aheap \\<Delta> e\\<cdot>a)) \\<Gamma> = restrictA (edom ae) \\<Gamma>\""], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. restrictA (edom ae \\<union> edom (Aheap \\<Delta> e\\<cdot>a)) \\<Gamma> =\n    restrictA (edom ae) \\<Gamma>", "by (auto intro: restrictA_cong dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  restrictA (edom ae \\<union> edom (Aheap \\<Delta> e\\<cdot>a)) \\<Gamma> =\n  restrictA (edom ae) \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"set r \\<subseteq> domA \\<Gamma> \\<union> upds S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set r \\<subseteq> domA \\<Gamma> \\<union> upds S", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. set r \\<subseteq> domA \\<Gamma> \\<union> upds S", "by auto"], ["proof (state)\nthis:\n  set r \\<subseteq> domA \\<Gamma> \\<union> upds S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have [simp]: \"restrictA (- set r) \\<Delta> = \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrictA (- set r) \\<Delta> = \\<Delta>", "apply (rule restrictA_noop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<subseteq> - set r", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> domA \\<Delta>; x \\<in> set r\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis IntI UnE \\<open>set r \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close> \\<open>domA \\<Delta> \\<inter> domA \\<Gamma> = {}\\<close> \\<open>domA \\<Delta> \\<inter> upds S = {}\\<close> contra_subsetD empty_iff)"], ["proof (state)\nthis:\n  restrictA (- set r) \\<Delta> = \\<Delta>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  restrictA (- set r) \\<Delta> = \\<Delta>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"edom (?ae \\<squnion> ae) = edom (?ce \\<squnion> ce)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n    edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "using let\\<^sub>1(4)"], ["proof (prove)\nusing this:\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n    edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "by (auto simp add: edom_cHeap)"], ["proof (state)\nthis:\n  edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n  edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n  edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n  edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "fix x e'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "assume \"x \\<in> thunks \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"x \\<notin> edom ?ce\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)", "using fresh_distinct[OF let\\<^sub>1(1)]"], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)", "by (auto simp add: edom_cHeap dest: subsetD[OF edom_Aheap]  subsetD[OF thunks_domA])"], ["proof (state)\nthis:\n  x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence [simp]: \"?ce x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. (cHeap \\<Delta> e\\<cdot>a) x = none", "unfolding edomIff"], ["proof (prove)\nusing this:\n  \\<not> (cHeap \\<Delta> e\\<cdot>a) x \\<noteq> none\n\ngoal (1 subgoal):\n 1. (cHeap \\<Delta> e\\<cdot>a) x = none", "by auto"], ["proof (state)\nthis:\n  (cHeap \\<Delta> e\\<cdot>a) x = none\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "assume \"many \\<sqsubseteq> (?ce \\<squnion> ce) x\""], ["proof (state)\nthis:\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "with let\\<^sub>1 \\<open>x \\<in> thunks \\<Gamma>\\<close>"], ["proof (chain)\npicking this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  x \\<in> thunks \\<Gamma>\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x", "have \"(?ae \\<squnion> ae) x = up \\<cdot>0\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  x \\<in> thunks \\<Gamma>\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x\n\ngoal (1 subgoal):\n 1. (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0", "by auto"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Gamma>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Gamma>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Gamma>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "fix x e'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "assume \"x \\<in> thunks \\<Delta>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Delta>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"x \\<notin> domA \\<Gamma>\" and \"x \\<notin> upds S\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Delta>\n\ngoal (1 subgoal):\n 1. x \\<notin> domA \\<Gamma> &&& x \\<notin> upds S", "using fresh_distinct[OF let\\<^sub>1(1)] fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Delta>\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> domA \\<Gamma> &&& x \\<notin> upds S", "by (auto dest!: subsetD[OF thunks_domA] subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  x \\<notin> upds S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"x \\<notin> edom ce\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  x \\<notin> upds S\n\ngoal (1 subgoal):\n 1. x \\<notin> edom ce", "using \\<open>edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close> \\<open>edom ce = edom ae\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  x \\<notin> upds S\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n  edom ce = edom ae\n\ngoal (1 subgoal):\n 1. x \\<notin> edom ce", "by auto"], ["proof (state)\nthis:\n  x \\<notin> edom ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence [simp]: \"ce x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<notin> edom ce\n\ngoal (1 subgoal):\n 1. ce x = none", "by (auto simp add: edomIff)"], ["proof (state)\nthis:\n  ce x = none\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "assume \"many \\<sqsubseteq> (?ce \\<squnion> ce) x\""], ["proof (state)\nthis:\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "with \\<open>x \\<in> thunks \\<Delta>\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> thunks \\<Delta>\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x", "have \"(?ae \\<squnion> ae) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Delta>\n  many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) x\n\ngoal (1 subgoal):\n 1. (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0", "by (auto simp add: Aheap_heap3)"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Delta>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Delta>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> thunks \\<Delta>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from let\\<^sub>1(1,2) \\<open>edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close>"], ["proof (chain)\npicking this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "have \"prognosis (?ae \\<squnion> ae) as a (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq> ?ce \\<squnion> prognosis ae as a (\\<Gamma>, Let \\<Delta> e, S)\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n\ngoal (1 subgoal):\n 1. prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n     (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n    cHeap \\<Delta> e\\<cdot>a \\<squnion>\n    prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S)", "by (rule prognosis_Let)"], ["proof (state)\nthis:\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion>\n  prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "also"], ["proof (state)\nthis:\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion>\n  prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae as a (\\<Gamma>, Let \\<Delta> e, S) \\<sqsubseteq> ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<sqsubseteq> ce", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<sqsubseteq> ce", "by auto"], ["proof (state)\nthis:\n  prognosis ae as a (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<sqsubseteq> ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "finally"], ["proof (chain)\npicking this:\n  cont ((\\<squnion>) (cHeap \\<Delta> e\\<cdot>a)) \\<Longrightarrow>\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce", "have \"prognosis (?ae \\<squnion> ae) as a (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq> ?ce \\<squnion> ce\""], ["proof (prove)\nusing this:\n  cont ((\\<squnion>) (cHeap \\<Delta> e\\<cdot>a)) \\<Longrightarrow>\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n\ngoal (1 subgoal):\n 1. prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n     (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce", "by this simp"], ["proof (state)\nthis:\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"a_consistent (ae, a, as) (restrictA (- set r) \\<Gamma>, Let \\<Delta> e, restr_stack (- set r) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     (restrictA (- set r) \\<Gamma>, Terms.Let \\<Delta> e,\n      restr_stack (- set r) S)", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     (restrictA (- set r) \\<Gamma>, Terms.Let \\<Delta> e,\n      restr_stack (- set r) S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Terms.Let \\<Delta> e,\n    restr_stack (- set r) S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"a_consistent (?ae \\<squnion> ae, a, as) (\\<Delta> @ restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\""], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Terms.Let \\<Delta> e,\n    restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)", "using let\\<^sub>1(1,2) \\<open>edom ae \\<inter> domA \\<Delta> = {}\\<close>"], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Terms.Let \\<Delta> e,\n    restr_stack (- set r) S)\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (1 subgoal):\n 1. a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)", "by (auto intro!:  a_consistent_let simp del: join_comm)"], ["proof (state)\nthis:\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"a_consistent (?ae \\<squnion> ae, a, as) (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)\""], ["proof (prove)\nusing this:\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ restrictA (- set r) \\<Gamma>, e, restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)", "by (simp add: restrictA_append)"], ["proof (state)\nthis:\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have  \"set r \\<subseteq> (domA \\<Gamma> \\<union> upds S) - edom ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set r \\<subseteq> domA \\<Gamma> \\<union> upds S - edom ce", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. set r \\<subseteq> domA \\<Gamma> \\<union> upds S - edom ce", "by auto"], ["proof (state)\nthis:\n  set r \\<subseteq> domA \\<Gamma> \\<union> upds S - edom ce\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence  \"set r \\<subseteq> (domA \\<Gamma> \\<union> upds S) - edom (?ce \\<squnion> ce)\""], ["proof (prove)\nusing this:\n  set r \\<subseteq> domA \\<Gamma> \\<union> upds S - edom ce\n\ngoal (1 subgoal):\n 1. set r\n    \\<subseteq> domA \\<Gamma> \\<union> upds S -\n                edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "apply (rule order_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Gamma> \\<union> upds S - edom ce\n    \\<subseteq> domA \\<Gamma> \\<union> upds S -\n                edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "using \\<open>domA \\<Delta> \\<inter> domA \\<Gamma> = {}\\<close> \\<open>domA \\<Delta> \\<inter> upds S = {}\\<close>"], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (1 subgoal):\n 1. domA \\<Gamma> \\<union> upds S - edom ce\n    \\<subseteq> domA \\<Gamma> \\<union> upds S -\n                edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "apply (auto simp add: edom_cHeap dest!: subsetD[OF edom_Aheap])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set r\n  \\<subseteq> domA \\<Gamma> \\<union> upds S -\n              edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n  edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n  \\<lbrakk>?x2 \\<in> thunks \\<Gamma>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n  \\<lbrakk>?x2 \\<in> thunks \\<Delta>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)\n  set r\n  \\<subseteq> domA \\<Gamma> \\<union> upds S -\n              edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)", "have \"consistent (?ae \\<squnion> ae, ?ce \\<squnion> ce, a, as, r) (\\<Delta> @ \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) =\n  edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n  \\<lbrakk>?x2 \\<in> thunks \\<Gamma>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n  \\<lbrakk>?x2 \\<in> thunks \\<Delta>;\n   many \\<sqsubseteq> (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce) ?x2\\<rbrakk>\n  \\<Longrightarrow> (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 =\n                    up\\<cdot>0\n  prognosis (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) as a\n   (\\<Delta> @ \\<Gamma>, e, S) \\<sqsubseteq>\n  cHeap \\<Delta> e\\<cdot>a \\<squnion> ce\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (restrictA (- set r) (\\<Delta> @ \\<Gamma>), e, restr_stack (- set r) S)\n  set r\n  \\<subseteq> domA \\<Gamma> \\<union> upds S -\n              edom (cHeap \\<Delta> e\\<cdot>a \\<squnion> ce)\n\ngoal (1 subgoal):\n 1. consistent\n     (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n      cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n     (\\<Delta> @ \\<Gamma>, e, S)", "by auto"], ["proof (state)\nthis:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"\\<And> x. x \\<in> domA \\<Gamma> \\<Longrightarrow> x \\<notin> edom ?ae\" \"\\<And> x. x \\<in> domA \\<Gamma> \\<Longrightarrow> x \\<notin> edom ?ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> domA \\<Gamma> \\<Longrightarrow>\n        x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)) &&&\n    (\\<And>x.\n        x \\<in> domA \\<Gamma> \\<Longrightarrow>\n        x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a))", "using fresh_distinct[OF let\\<^sub>1(1)]"], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> domA \\<Gamma> \\<Longrightarrow>\n        x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)) &&&\n    (\\<And>x.\n        x \\<in> domA \\<Gamma> \\<Longrightarrow>\n        x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a))", "by (auto simp add: edom_cHeap dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"map_transform Aeta_expand (?ae \\<squnion> ae) (map_transform transform (?ae \\<squnion> ae) (restrictA (-set r) \\<Gamma>))\n         = map_transform Aeta_expand ae (map_transform transform ae (restrictA (-set r) \\<Gamma>))\""], ["proof (prove)\nusing this:\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (cHeap \\<Delta> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n       (restrictA (- set r) \\<Gamma>)) =\n    map_transform Aeta_expand ae\n     (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))", "by (auto intro!: map_transform_cong restrictA_cong simp add: edomIff)"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Gamma>)) =\n  map_transform Aeta_expand ae\n   (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Gamma>)) =\n  map_transform Aeta_expand ae\n   (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from \\<open>edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close> \\<open>edom ce = edom ae\\<close>"], ["proof (chain)\npicking this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n  edom ce = edom ae", "have \"\\<And> x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ce\" and  \"\\<And> x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae\""], ["proof (prove)\nusing this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n  edom ce = edom ae\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ce) &&&\n    (\\<And>x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae)", "using fresh_distinct[OF let\\<^sub>1(1)] fresh_distinct_ups[OF let\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n  edom ce = edom ae\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ce) &&&\n    (\\<And>x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae)", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ce\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ae\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"map_transform Aeta_expand (?ae \\<squnion> ae) (map_transform transform (?ae \\<squnion> ae) (restrictA (- set r) \\<Delta>))\n         = map_transform Aeta_expand ?ae (map_transform transform ?ae (restrictA (- set r) \\<Delta>))\""], ["proof (prove)\nusing this:\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ce\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ae\n\ngoal (1 subgoal):\n 1. map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n       (restrictA (- set r) \\<Delta>)) =\n    map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n       (restrictA (- set r) \\<Delta>))", "by (auto intro!: map_transform_cong restrictA_cong simp add: edomIff)"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Delta>)) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n     (restrictA (- set r) \\<Delta>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Delta>)) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n     (restrictA (- set r) \\<Delta>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from  \\<open>domA \\<Delta> \\<inter> domA \\<Gamma> = {}\\<close>   \\<open>domA \\<Delta> \\<inter> upds S = {}\\<close>"], ["proof (chain)\npicking this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> upds S = {}", "have \"atom ` domA \\<Delta> \\<sharp>* set r\""], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (1 subgoal):\n 1. atom ` domA \\<Delta> \\<sharp>* set r", "by (auto simp add: fresh_star_def fresh_at_base fresh_finite_set_at_base dest!: subsetD[OF \\<open>set r \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close>])"], ["proof (state)\nthis:\n  atom ` domA \\<Delta> \\<sharp>* set r\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* set r\n\ngoal (1 subgoal):\n 1. atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. atom ` domA \\<Delta> \\<sharp>* set r \\<Longrightarrow>\n    atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)", "apply (rule eqvt_fresh_star_cong1[where f = \"map Dummy\"], perm_simp, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. atom ` domA \\<Delta> \\<sharp>* set r \\<Longrightarrow>\n    atom ` domA \\<Delta> \\<sharp>* rev r", "apply (rule eqvt_fresh_star_cong1[where f = \"rev\"], perm_simp, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. atom ` domA \\<Delta> \\<sharp>* set r \\<Longrightarrow>\n    atom ` domA \\<Delta> \\<sharp>* r", "apply (auto simp add: fresh_star_def fresh_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Gamma>)) =\n  map_transform Aeta_expand ae\n   (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Delta>)) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n     (restrictA (- set r) \\<Delta>))\n  atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G conf_transform (?ae \\<squnion> ae, ?ce \\<squnion> ce, a, as, r) (\\<Delta> @ \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Gamma>)) =\n  map_transform Aeta_expand ae\n   (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Delta>)) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n     (restrictA (- set r) \\<Delta>))\n  atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n    conf_transform\n     (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n      cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n     (\\<Delta> @ \\<Gamma>, e, S)", "using restr_stack_simp2 let\\<^sub>1(1,2)  \\<open>edom ce = edom ae\\<close>"], ["proof (prove)\nusing this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Gamma>)) =\n  map_transform Aeta_expand ae\n   (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (restrictA (- set r) \\<Delta>)) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a)\n     (restrictA (- set r) \\<Delta>))\n  atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r)\n  restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n  restr_stack (edom ae) S\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  edom ce = edom ae\n\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n    conf_transform\n     (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n      cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n     (\\<Delta> @ \\<Gamma>, e, S)", "apply (auto simp add: map_transform_append restrictA_append edom_cHeap restr_stack_simp2[simplified] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n                (restrictA (- set r) \\<Gamma>)) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>));\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S; edom ce = edom ae\\<rbrakk>\n    \\<Longrightarrow> (map_transform Aeta_expand ae\n                        (map_transform ccTransform ae\n                          (restrictA (- set r) \\<Gamma>)),\n                       Terms.Let\n                        (map_transform Aeta_expand\n                          (Aheap \\<Delta> e\\<cdot>a)\n                          (map_transform ccTransform\n                            (Aheap \\<Delta> e\\<cdot>a) \\<Delta>))\n                        (ccTransform a e),\n                       transform_alts as (restr_stack (- set r) S) @\n                       map Dummy (rev r)) \\<Rightarrow>\\<^sub>G\n                      (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                        (map_transform ccTransform\n                          (Aheap \\<Delta> e\\<cdot>a) \\<Delta>) @\n                       map_transform Aeta_expand ae\n                        (map_transform ccTransform ae\n                          (restrictA (- set r) \\<Gamma>)),\n                       ccTransform a e,\n                       transform_alts as (restr_stack (- set r) S) @\n                       map Dummy (rev r))", "apply (rule normal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n                (restrictA (- set r) \\<Gamma>)) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>));\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S; edom ce = edom ae\\<rbrakk>\n    \\<Longrightarrow> (map_transform Aeta_expand ae\n                        (map_transform ccTransform ae\n                          (restrictA (- set r) \\<Gamma>)),\n                       Terms.Let\n                        (map_transform Aeta_expand\n                          (Aheap \\<Delta> e\\<cdot>a)\n                          (map_transform ccTransform\n                            (Aheap \\<Delta> e\\<cdot>a) \\<Delta>))\n                        (ccTransform a e),\n                       transform_alts as (restr_stack (- set r) S) @\n                       map Dummy (rev r)) \\<Rightarrow>\n                      (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                        (map_transform ccTransform\n                          (Aheap \\<Delta> e\\<cdot>a) \\<Delta>) @\n                       map_transform Aeta_expand ae\n                        (map_transform ccTransform ae\n                          (restrictA (- set r) \\<Gamma>)),\n                       ccTransform a e,\n                       transform_alts as (restr_stack (- set r) S) @\n                       map Dummy (rev r))", "apply (rule step.let\\<^sub>1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n                (restrictA (- set r) \\<Gamma>)) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>));\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S; edom ce = edom ae\\<rbrakk>\n    \\<Longrightarrow> atom `\n                      domA\n                       (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                         (map_transform ccTransform\n                           (Aheap \\<Delta> e\\<cdot>a)\n                           \\<Delta>)) \\<sharp>* map_transform Aeta_expand ae\n           (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>))\n 2. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n                (restrictA (- set r) \\<Gamma>)) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae (restrictA (- set r) \\<Gamma>));\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* map Dummy (rev r);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S; edom ce = edom ae\\<rbrakk>\n    \\<Longrightarrow> atom `\n                      domA\n                       (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                         (map_transform ccTransform\n                           (Aheap \\<Delta> e\\<cdot>a)\n                           \\<Delta>)) \\<sharp>* (transform_alts as\n            (restr_stack (- set r) S) @\n           map Dummy (rev r))", "apply (auto intro: normal step.let\\<^sub>1 dest: subsetD[OF edom_Aheap] simp add: fresh_star_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n  conf_transform\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n  conf_transform\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae ce a as r.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 5. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n  conf_transform\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\n  conf_transform\n   (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae,\n    cHeap \\<Delta> e\\<cdot>a \\<squnion> ce, a, as, r)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') (\\<Delta> @ \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (if\\<^sub>1 \\<Gamma> scrut e1 e2 S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, scrut ? e1 : e2, S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae as a (\\<Gamma>, scrut ? e1 : e2, S) \\<sqsubseteq> ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, scrut ? e1 : e2, S) \\<sqsubseteq> ce", "using if\\<^sub>1"], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, scrut ? e1 : e2, S)\n\ngoal (1 subgoal):\n 1. prognosis ae as a (\\<Gamma>, scrut ? e1 : e2, S) \\<sqsubseteq> ce", "by auto"], ["proof (state)\nthis:\n  prognosis ae as a (\\<Gamma>, scrut ? e1 : e2, S) \\<sqsubseteq> ce\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"prognosis ae (a#as) 0 (\\<Gamma>, scrut, Alts e1 e2 # S) \\<sqsubseteq> ce\""], ["proof (prove)\nusing this:\n  prognosis ae as a (\\<Gamma>, scrut ? e1 : e2, S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. prognosis ae (a # as) 0 (\\<Gamma>, scrut, Alts e1 e2 # S) \\<sqsubseteq>\n    ce", "by (rule below_trans[OF prognosis_IfThenElse])"], ["proof (state)\nthis:\n  prognosis ae (a # as) 0 (\\<Gamma>, scrut, Alts e1 e2 # S) \\<sqsubseteq> ce\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"consistent (ae, ce, 0, a#as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\""], ["proof (prove)\nusing this:\n  prognosis ae (a # as) 0 (\\<Gamma>, scrut, Alts e1 e2 # S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)", "using if\\<^sub>1"], ["proof (prove)\nusing this:\n  prognosis ae (a # as) 0 (\\<Gamma>, scrut, Alts e1 e2 # S) \\<sqsubseteq> ce\n  heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, scrut ? e1 : e2, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (auto dest: a_consistent_if\\<^sub>1)"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, 0, a#as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (auto intro: normal step.intros)"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 4. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, 0, a # as, r) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (if\\<^sub>2 \\<Gamma> b e1 e2 S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"a_consistent (ae, a, as) (restrictA (- set r) \\<Gamma>, Bool b, Alts e1 e2 # restr_stack (-set r) S)\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as)\n     (restrictA (- set r) \\<Gamma>, Bool b,\n      Alts e1 e2 # restr_stack (- set r) S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Bool b,\n    Alts e1 e2 # restr_stack (- set r) S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Bool b,\n    Alts e1 e2 # restr_stack (- set r) S)", "obtain a' as' where [simp]: \"as = a' # as'\" \"a = 0\""], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as)\n   (restrictA (- set r) \\<Gamma>, Bool b,\n    Alts e1 e2 # restr_stack (- set r) S)\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; a = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule a_consistent_alts_on_stack)"], ["proof (state)\nthis:\n  as = a' # as'\n  a = 0\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "{"], ["proof (state)\nthis:\n  as = a' # as'\n  a = 0\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"prognosis ae (a'#as') 0 (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<sqsubseteq> ce\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prognosis ae (a' # as') 0\n     (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<sqsubseteq>\n    ce", "using if\\<^sub>2"], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. prognosis ae (a' # as') 0\n     (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<sqsubseteq>\n    ce", "by auto"], ["proof (state)\nthis:\n  prognosis ae (a' # as') 0 (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<sqsubseteq>\n  ce\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "hence \"prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce\""], ["proof (prove)\nusing this:\n  prognosis ae (a' # as') 0 (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<sqsubseteq>\n  ce\n\ngoal (1 subgoal):\n 1. prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce", "by (rule below_trans[OF prognosis_Alts])"], ["proof (state)\nthis:\n  prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "then"], ["proof (chain)\npicking this:\n  prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce", "have \"consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\""], ["proof (prove)\nusing this:\n  prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)", "using if\\<^sub>2"], ["proof (prove)\nusing this:\n  prognosis ae as' a' (\\<Gamma>, if b then e1 else e2, S) \\<sqsubseteq> ce\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, ce, a, as, r) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)", "by (auto dest!: a_consistent_if\\<^sub>2)"], ["proof (state)\nthis:\n  consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "}"], ["proof (state)\nthis:\n  consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "have \"conf_transform (ae, ce, a, as, r) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G conf_transform (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conf_transform (ae, ce, a, as, r)\n     (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\n    conf_transform (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)", "by (auto intro: normal step.if\\<^sub>2[where b = True, simplified] step.if\\<^sub>2[where b = False, simplified])"], ["proof (state)\nthis:\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae ce a as r.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, ce, a, as, r)\n         (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 3. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n  conf_transform (ae, ce, a, as, r)\n   (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\n  conf_transform (ae, ce, a', as', r) (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r')\n        (\\<Gamma>, if b then e1 else e2, S) \\<and>\n       conf_transform (ae, ce, a, as, r)\n        (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r')\n        (\\<Gamma>, if b then e1 else e2, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r')\n      (\\<Gamma>, if b then e1 else e2, S) \\<and>\n     conf_transform (ae, ce, a, as, r)\n      (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r')\n      (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (2 subgoals):\n 1. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 2. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 2. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case refl"], ["proof (state)\nthis:\n  consistent (ae, ce, a, as, r) c_\n\ngoal (2 subgoals):\n 1. \\<And>c ae ce a as r.\n       consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n       \\<exists>ae' ce' a' as' r'.\n          consistent (ae', ce', a', as', r') c \\<and>\n          conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n          conf_transform (ae', ce', a', as', r') c\n 2. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "thus ?case"], ["proof (prove)\nusing this:\n  consistent (ae, ce, a, as, r) c_\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') c_ \\<and>\n       conf_transform (ae, ce, a, as, r) c_ \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') c_", "by force"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c_ \\<and>\n     conf_transform (ae, ce, a, as, r) c_ \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c_\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "case (trans c c' c'')"], ["proof (state)\nthis:\n  c \\<Rightarrow>\\<^sup>* c'\n  c' \\<Rightarrow>\\<^sup>* c''\n  consistent (?ae, ?ce, ?a, ?as, ?r) c \\<Longrightarrow>\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c' \\<and>\n     conf_transform (?ae, ?ce, ?a, ?as, ?r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c'\n  consistent (?ae, ?ce, ?a, ?as, ?r) c' \\<Longrightarrow>\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c'' \\<and>\n     conf_transform (?ae, ?ce, ?a, ?as, ?r) c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c''\n  consistent (ae, ce, a, as, r) c\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from trans(3)[OF trans(5)]"], ["proof (chain)\npicking this:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c' \\<and>\n     conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c'", "obtain ae' ce' a' as' r'\n      where \"consistent (ae', ce', a', as', r') c'\" and *: \"conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae', ce', a', as', r') c'\""], ["proof (prove)\nusing this:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c' \\<and>\n     conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c'\n\ngoal (1 subgoal):\n 1. (\\<And>ae' ce' a' as' r'.\n        \\<lbrakk>consistent (ae', ce', a', as', r') c';\n         conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n         conf_transform (ae', ce', a', as', r') c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  consistent (ae', ce', a', as', r') c'\n  conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae', ce', a', as', r') c'\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from trans(4)[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>ae'a ce'a a'a as'a r'a.\n     consistent (ae'a, ce'a, a'a, as'a, r'a) c'' \\<and>\n     conf_transform (ae', ce', a', as', r') c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae'a, ce'a, a'a, as'a, r'a) c''", "obtain ae'' ce'' a'' as'' r''\n      where \"consistent (ae'', ce'', a'', as'', r'') c''\" and **: \"conf_transform (ae', ce', a', as', r') c' \\<Rightarrow>\\<^sub>G\\<^sup>* conf_transform (ae'', ce'', a'', as'', r'') c''\""], ["proof (prove)\nusing this:\n  \\<exists>ae'a ce'a a'a as'a r'a.\n     consistent (ae'a, ce'a, a'a, as'a, r'a) c'' \\<and>\n     conf_transform (ae', ce', a', as', r') c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae'a, ce'a, a'a, as'a, r'a) c''\n\ngoal (1 subgoal):\n 1. (\\<And>ae'' ce'' a'' as'' r''.\n        \\<lbrakk>consistent (ae'', ce'', a'', as'', r'') c'';\n         conf_transform (ae', ce', a', as', r')\n          c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n         conf_transform (ae'', ce'', a'', as'', r'') c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  consistent (ae'', ce'', a'', as'', r'') c''\n  conf_transform (ae', ce', a', as', r') c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae'', ce'', a'', as'', r'') c''\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae ce a as r.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c';\n        \\<And>ae ce a as r.\n           consistent (ae, ce, a, as, r) c' \\<Longrightarrow>\n           \\<exists>ae' ce' a' as' r'.\n              consistent (ae', ce', a', as', r') c'' \\<and>\n              conf_transform (ae, ce, a, as, r)\n               c' \\<Rightarrow>\\<^sub>G\\<^sup>*\n              conf_transform (ae', ce', a', as', r') c'';\n        consistent (ae, ce, a, as, r) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' ce' a' as' r'.\n                            consistent (ae', ce', a', as', r') c'' \\<and>\n                            conf_transform (ae, ce, a, as, r)\n                             c \\<Rightarrow>\\<^sub>G\\<^sup>*\n                            conf_transform (ae', ce', a', as', r') c''", "from this(1) rtranclp_trans[OF * **]"], ["proof (chain)\npicking this:\n  consistent (ae'', ce'', a'', as'', r'') c''\n  conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae'', ce'', a'', as'', r'') c''", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae'', ce'', a'', as'', r'') c''\n  conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n  conf_transform (ae'', ce'', a'', as'', r'') c''\n\ngoal (1 subgoal):\n 1. \\<exists>ae' ce' a' as' r'.\n       consistent (ae', ce', a', as', r') c'' \\<and>\n       conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n       conf_transform (ae', ce', a', as', r') c''", "by blast"], ["proof (state)\nthis:\n  \\<exists>ae' ce' a' as' r'.\n     consistent (ae', ce', a', as', r') c'' \\<and>\n     conf_transform (ae, ce, a, as, r) c \\<Rightarrow>\\<^sub>G\\<^sup>*\n     conf_transform (ae', ce', a', as', r') c''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}