{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CoCallFix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma Aexp_eq:\n  \"\\<A>\\<^bsub>a\\<^esub> e = fst (cccExp e \\<cdot> a)\"", "lemma fup_Aexp_eq:\n  \"fup\\<cdot>(Aexp e)\\<cdot>a = fst (fup\\<cdot>(cccExp e)\\<cdot>a)\"", "lemma CCexp_eq:\n  \"CCexp e\\<cdot>a = snd (cccExp e \\<cdot> a)\"", "lemma fup_CCexp_eq:\n  \"fup\\<cdot>(CCexp e)\\<cdot>a = snd (fup\\<cdot>(cccExp e)\\<cdot>a)\"", "lemma CCfix_eq:\n  \"CCfix \\<Gamma>\\<cdot>(ae,G) = (\\<mu> G'. ccBindsExtra \\<Gamma>\\<cdot>(ae, G') \\<squnion> G)\"", "lemma CCfix_unroll: \"CCfix \\<Gamma>\\<cdot>(ae,G) = ccBindsExtra \\<Gamma>\\<cdot>(ae, CCfix \\<Gamma>\\<cdot>(ae,G)) \\<squnion> G\"", "lemma fup_ccExp_restr_subst': \n  assumes \"\\<And> a. cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  shows \"cc_restr S (fup\\<cdot>(CCexp e[x::=y])\\<cdot>a) = cc_restr S (fup\\<cdot>(CCexp e)\\<cdot>a)\"", "lemma ccBindsExtra_restr_subst': \n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows  \"cc_restr S (ccBindsExtra  \\<Gamma>[x::h=y]\\<cdot>(ae, G)) \n       = cc_restr S (ccBindsExtra  \\<Gamma>\\<cdot>(ae f|` S , cc_restr S G))\"", "lemma ccBindsExtra_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (ccBindsExtra \\<Gamma>\\<cdot>(ae, G)) = cc_restr S (ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\"", "lemma CCfix_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (CCfix \\<Gamma>\\<cdot>(ae, G)) = cc_restr S (CCfix \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\"", "lemma ccField_CCfix:\n  shows \"ccField (CCfix \\<Gamma>\\<cdot>(ae, G)) \\<subseteq> fv \\<Gamma> \\<union> ccField G\"", "lemma CCfix_restr_subst':\n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (CCfix \\<Gamma>[x::h=y]\\<cdot>(ae, G)) = cc_restr S (CCfix \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\"", "lemma Aexp_eqvt[eqvt]:  \"\\<pi> \\<bullet> (CoCallArityAnalysis.Aexp cccExp e) = CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\"", "lemma CCexp_eqvt[eqvt]:  \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCexp cccExp e) = CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\"", "lemma CCfix_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCfix cccExp \\<Gamma>) = CoCallArityAnalysis.CCfix (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma ccFix_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.CCfix cccexp1 heap1 = CoCallArityAnalysis.CCfix cccexp2 heap2\"", "lemma cccFix_eq:\n  \"cccFix \\<Gamma>\\<cdot>i = (Afix \\<Gamma>\\<cdot>(fst i \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` thunks \\<Gamma>), CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(fst i  \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), snd i))\"", "lemma cccFix_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix cccExp \\<Gamma>) = CoCallArityAnalysis.cccFix  (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma cccFix_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.cccFix cccexp1 heap1 = CoCallArityAnalysis.cccFix cccexp2 heap2\"", "lemma ABind_nonrec_eq:\n  \"ABind_nonrec x e\\<cdot>(ae,G) = (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)\"", "lemma ABind_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (ABind_nonrec x e) = ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma ABind_nonrec_above_arg:\n  \"ae x \\<sqsubseteq> ABind_nonrec x e \\<cdot> (ae, G)\"", "lemma Aheap_nonrec_simp:\n  \"Aheap_nonrec x e\\<cdot>i = esing x\\<cdot>(ABind_nonrec x e\\<cdot>i)\"", "lemma Aheap_nonrec_lookup[simp]:\n  \"(Aheap_nonrec x e\\<cdot>i) x = ABind_nonrec x e\\<cdot>i\"", "lemma Aheap_nonrec_eqvt'[eqvt]:\n  \"\\<pi> \\<bullet> (Aheap_nonrec x e) = Aheap_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma Afix_nonrec_eq[simp]:\n    \"Afix_nonrec x e \\<cdot> i = fup\\<cdot>(Aexp e)\\<cdot>(ABind_nonrec x e \\<cdot> i) \\<squnion> fst i\"", "lemma CCfix_nonrec_eq[simp]:\n    \"CCfix_nonrec x e \\<cdot> i = ccBind x e\\<cdot>(Aheap_nonrec x e\\<cdot>i, snd i)  \\<squnion> ccProd (fv e) (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion> snd i\"", "lemma cccFix_nonrec_eq[simp]:\n    \"cccFix_nonrec x e\\<cdot>i = (Afix_nonrec x e \\<cdot>i , CCfix_nonrec x e \\<cdot>i)\"", "lemma AFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.Afix_nonrec cccExp x e) = CoCallArityAnalysis.Afix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma CCFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCfix_nonrec cccExp x e) = CoCallArityAnalysis.CCfix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma cccFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix_nonrec cccExp x e) = CoCallArityAnalysis.cccFix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma cccFix_choose_simp1[simp]:\n    \"\\<not> nonrec \\<Gamma> \\<Longrightarrow> cccFix_choose \\<Gamma> = cccFix \\<Gamma>\"", "lemma cccFix_choose_simp2[simp]:\n    \"x \\<notin> fv e \\<Longrightarrow> cccFix_choose [(x,e)] = cccFix_nonrec x e\"", "lemma cccFix_choose_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix_choose cccExp \\<Gamma>) = CoCallArityAnalysis.cccFix_choose (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma cccFix_nonrec_cong[fundef_cong]:\n  \"cccexp1 e = cccexp2 e  \\<Longrightarrow> CoCallArityAnalysis.cccFix_nonrec cccexp1 x e = CoCallArityAnalysis.cccFix_nonrec cccexp2 x e\"", "lemma cccFix_choose_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.cccFix_choose cccexp1 heap1 = CoCallArityAnalysis.cccFix_choose cccexp2 heap2\""], "translations": [["", "lemma Aexp_eq:\n  \"\\<A>\\<^bsub>a\\<^esub> e = fst (cccExp e \\<cdot> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A>\\<^bsub>a\\<^esub> e = fst (cccExp e\\<cdot>a)", "unfolding Aexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a. fst (cccExp e\\<cdot>a))\\<cdot>a = fst (cccExp e\\<cdot>a)", "by (rule beta_cfun) (intro cont2cont)"], ["", "lemma fup_Aexp_eq:\n  \"fup\\<cdot>(Aexp e)\\<cdot>a = fst (fup\\<cdot>(cccExp e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A>\\<^sup>\\<bottom>\\<^bsub>a\\<^esub> e =\n    fst (fup\\<cdot>(cccExp e)\\<cdot>a)", "by (cases a)(simp_all add: Aexp_eq)"], ["", "definition CCexp :: \"exp \\<Rightarrow> (Arity \\<rightarrow> CoCalls)\" where \"CCexp \\<Gamma> = (\\<Lambda> a. snd (cccExp \\<Gamma>\\<cdot>a))\""], ["", "lemma CCexp_eq:\n  \"CCexp e\\<cdot>a = snd (cccExp e \\<cdot> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCexp e\\<cdot>a = snd (cccExp e\\<cdot>a)", "unfolding CCexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a. snd (cccExp e\\<cdot>a))\\<cdot>a = snd (cccExp e\\<cdot>a)", "by (rule beta_cfun) (intro cont2cont)"], ["", "lemma fup_CCexp_eq:\n  \"fup\\<cdot>(CCexp e)\\<cdot>a = snd (fup\\<cdot>(cccExp e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fup\\<cdot>(CCexp e)\\<cdot>a = snd (fup\\<cdot>(cccExp e)\\<cdot>a)", "by (cases a)(simp_all add: CCexp_eq)"], ["", "sublocale CoCallAnalysis CCexp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition CCfix :: \"heap \\<Rightarrow> (AEnv \\<times> CoCalls) \\<rightarrow> CoCalls\"\n  where \"CCfix \\<Gamma> = (\\<Lambda> aeG. (\\<mu> G'. ccBindsExtra \\<Gamma>\\<cdot>(fst aeG , G') \\<squnion> snd aeG))\""], ["", "lemma CCfix_eq:\n  \"CCfix \\<Gamma>\\<cdot>(ae,G) = (\\<mu> G'. ccBindsExtra \\<Gamma>\\<cdot>(ae, G') \\<squnion> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>(ae, G) =\n    (\\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G)", "unfolding CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> aeG.\n        \\<mu> x.\n           ccBindsExtra \\<Gamma>\\<cdot>(fst aeG, x) \\<squnion>\n           snd aeG)\\<cdot>\n    (ae, G) =\n    (\\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G)", "by simp"], ["", "lemma CCfix_unroll: \"CCfix \\<Gamma>\\<cdot>(ae,G) = ccBindsExtra \\<Gamma>\\<cdot>(ae, CCfix \\<Gamma>\\<cdot>(ae,G)) \\<squnion> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>(ae, G) =\n    ccBindsExtra \\<Gamma>\\<cdot>\n    (ae, CCfix \\<Gamma>\\<cdot>(ae, G)) \\<squnion>\n    G", "unfolding  CCfix_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G) =\n    ccBindsExtra \\<Gamma>\\<cdot>\n    (ae,\n     \\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G) \\<squnion>\n    G", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G)\\<cdot>\n    (\\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G) =\n    ccBindsExtra \\<Gamma>\\<cdot>\n    (ae,\n     \\<mu> x. ccBindsExtra \\<Gamma>\\<cdot>(ae, x) \\<squnion> G) \\<squnion>\n    G", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fup_ccExp_restr_subst': \n  assumes \"\\<And> a. cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  shows \"cc_restr S (fup\\<cdot>(CCexp e[x::=y])\\<cdot>a) = cc_restr S (fup\\<cdot>(CCexp e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_bot_syn a e[x::=y] G|` S = ccExp_bot_syn a e G|` S", "using assms"], ["proof (prove)\nusing this:\n  ccExp_syn ?a e[x::=y] G|` S = ccExp_syn ?a e G|` S\n\ngoal (1 subgoal):\n 1. ccExp_bot_syn a e[x::=y] G|` S = ccExp_bot_syn a e G|` S", "by (cases a) (auto simp del: cc_restr_cc_restr simp add: cc_restr_cc_restr[symmetric])"], ["", "lemma ccBindsExtra_restr_subst': \n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows  \"cc_restr S (ccBindsExtra  \\<Gamma>[x::h=y]\\<cdot>(ae, G)) \n       = cc_restr S (ccBindsExtra  \\<Gamma>\\<cdot>(ae f|` S , cc_restr S G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, G) G|` S =\n    ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, G G|` S) G|` S", "apply (simp add: ccBindsExtra_simp ccBinds_eq ccBind_eq Int_absorb2[OF assms(4)] fv_subst_int[OF assms(3,2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. G G|` S \\<squnion>\n    ((\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (fv e \\<inter> S) G\\<times>\n         (ccNeighbors x G \\<inter> S)) \\<squnion>\n     (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (if v--v\\<in>G \\<longrightarrow> \\<not> isVal e\n          then ccExp_bot_syn (ae v) e[x::=y] G|` fv e[x::=y]\n          else fv e[x::=y]\\<^sup>2) G|`\n         S)) =\n    G G|` S \\<squnion>\n    ((\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (fv e \\<inter> S) G\\<times>\n         ((if x \\<in> S then ccNeighbors x G \\<inter> S else {}) \\<inter>\n          S)) \\<squnion>\n     (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (if v--v\\<in>G \\<longrightarrow>\n             v \\<in> S \\<longrightarrow> \\<not> isVal e\n          then ccExp_bot_syn ((ae f|` S) v) e G|` fv e\n          else fv e\\<^sup>2) G|`\n         S))", "apply (intro arg_cong2[where f = \"(\\<squnion>)\"] refl  arg_cong[OF mapCollect_cong])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       map_of \\<Gamma> k = Some v \\<Longrightarrow>\n       (fv v \\<inter> S) G\\<times> (ccNeighbors k G \\<inter> S) =\n       (fv v \\<inter> S) G\\<times>\n       ((if k \\<in> S then ccNeighbors k G \\<inter> S else {}) \\<inter> S)\n 2. \\<And>k v.\n       map_of \\<Gamma> k = Some v \\<Longrightarrow>\n       (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn (ae k) v[x::=y] G|` fv v[x::=y]\n        else fv v[x::=y]\\<^sup>2) G|`\n       S =\n       (if k--k\\<in>G \\<longrightarrow>\n           k \\<in> S \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn ((ae f|` S) k) v G|` fv v else fv v\\<^sup>2) G|`\n       S", "apply (subgoal_tac \"k \\<in> S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (fv v \\<inter> S) G\\<times>\n                         (ccNeighbors k G \\<inter> S) =\n                         (fv v \\<inter> S) G\\<times>\n                         ((if k \\<in> S then ccNeighbors k G \\<inter> S\n                           else {}) \\<inter>\n                          S)\n 2. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S\n 3. \\<And>k v.\n       map_of \\<Gamma> k = Some v \\<Longrightarrow>\n       (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn (ae k) v[x::=y] G|` fv v[x::=y]\n        else fv v[x::=y]\\<^sup>2) G|`\n       S =\n       (if k--k\\<in>G \\<longrightarrow>\n           k \\<in> S \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn ((ae f|` S) k) v G|` fv v else fv v\\<^sup>2) G|`\n       S", "apply (auto intro: fup_ccExp_restr_subst'[OF assms(1)[OF map_of_SomeD]] simp add: fv_subst_int[OF assms(3,2)]   fv_subst_int2[OF assms(3,2)] ccSquare_def)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S\n 2. \\<And>k v.\n       map_of \\<Gamma> k = Some v \\<Longrightarrow>\n       (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn (ae k) v[x::=y] G|` fv v[x::=y]\n        else fv v[x::=y]\\<^sup>2) G|`\n       S =\n       (if k--k\\<in>G \\<longrightarrow>\n           k \\<in> S \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn ((ae f|` S) k) v G|` fv v else fv v\\<^sup>2) G|`\n       S", "apply (metis assms(4) contra_subsetD domI dom_map_of_conv_domA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       map_of \\<Gamma> k = Some v \\<Longrightarrow>\n       (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn (ae k) v[x::=y] G|` fv v[x::=y]\n        else fv v[x::=y]\\<^sup>2) G|`\n       S =\n       (if k--k\\<in>G \\<longrightarrow>\n           k \\<in> S \\<longrightarrow> \\<not> isVal v\n        then ccExp_bot_syn ((ae f|` S) k) v G|` fv v else fv v\\<^sup>2) G|`\n       S", "apply (subgoal_tac \"k \\<in> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v[x::=y] G|` fv v[x::=y]\n                          else fv v[x::=y]\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S\n 2. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (auto intro: fup_ccExp_restr_subst'[OF assms(1)[OF map_of_SomeD]]\n              simp add: fv_subst_int[OF assms(3,2)]   fv_subst_int2[OF assms(3,2)] ccSquare_def cc_restr_twist[where S = S] simp del: cc_restr_cc_restr)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        k--k\\<notin>G\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v[x::=y] G|` S G|`\n                         fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 2. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        \\<not> isVal v\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v[x::=y] G|` S G|`\n                         fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 3. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (subst fup_ccExp_restr_subst'[OF assms(1)[OF map_of_SomeD]], assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        k--k\\<notin>G\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v G|` S G|` fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 2. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        \\<not> isVal v\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v[x::=y] G|` S G|`\n                         fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 3. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (simp add: fv_subst_int[OF assms(3,2)]   fv_subst_int2[OF assms(3,2)] )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        \\<not> isVal v\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v[x::=y] G|` S G|`\n                         fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 2. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (subst fup_ccExp_restr_subst'[OF assms(1)[OF map_of_SomeD]], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>map_of \\<Gamma> k = Some v; k \\<in> S;\n        \\<not> isVal v\\<rbrakk>\n       \\<Longrightarrow> ccExp_bot_syn (ae k) v G|` S G|` fv v[x::=y] =\n                         ccExp_bot_syn (ae k) v G|` S G|` fv v\n 2. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (simp add: fv_subst_int[OF assms(3,2)]   fv_subst_int2[OF assms(3,2)] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k v. map_of \\<Gamma> k = Some v \\<Longrightarrow> k \\<in> S", "apply (metis assms(4) contra_subsetD domI dom_map_of_conv_domA)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ccBindsExtra_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (ccBindsExtra \\<Gamma>\\<cdot>(ae, G)) = cc_restr S (ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>\\<cdot>(ae, G) G|` S =\n    ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, G G|` S) G|` S", "using assms"], ["proof (prove)\nusing this:\n  domA \\<Gamma> \\<subseteq> S\n\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>\\<cdot>(ae, G) G|` S =\n    ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, G G|` S) G|` S", "apply (simp add: ccBindsExtra_simp ccBinds_eq ccBind_eq Int_absorb2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Gamma> \\<subseteq> S \\<Longrightarrow>\n    G G|` S \\<squnion>\n    ((\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (fv e \\<inter> S) G\\<times>\n         (ccNeighbors x G \\<inter> S)) \\<squnion>\n     (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (if v--v\\<in>G \\<longrightarrow> \\<not> isVal e\n          then ccExp_bot_syn (ae v) e G|` fv e else fv e\\<^sup>2) G|`\n         S)) =\n    G G|` S \\<squnion>\n    ((\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (fv e \\<inter> S) G\\<times>\n         (if x \\<in> S then ccNeighbors x G \\<inter> S else {})) \\<squnion>\n     (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n         (if v--v\\<in>G \\<longrightarrow>\n             v \\<in> S \\<longrightarrow> \\<not> isVal e\n          then ccExp_bot_syn ((ae f|` S) v) e G|` fv e\n          else fv e\\<^sup>2) G|`\n         S))", "apply (intro arg_cong2[where f = \"(\\<squnion>)\"] refl arg_cong[OF mapCollect_cong])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> (fv v \\<inter> S) G\\<times>\n                         (ccNeighbors k G \\<inter> S) =\n                         (fv v \\<inter> S) G\\<times>\n                         (if k \\<in> S then ccNeighbors k G \\<inter> S\n                          else {})\n 2. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S", "apply (subgoal_tac \"k \\<in> S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S; map_of \\<Gamma> k = Some v;\n        k \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (fv v \\<inter> S) G\\<times>\n                         (ccNeighbors k G \\<inter> S) =\n                         (fv v \\<inter> S) G\\<times>\n                         (if k \\<in> S then ccNeighbors k G \\<inter> S\n                          else {})\n 2. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> k \\<in> S\n 3. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> k \\<in> S\n 2. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S", "apply (metis contra_subsetD domI dom_map_of_conv_domA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S", "apply (subgoal_tac \"k \\<in> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S; map_of \\<Gamma> k = Some v;\n        k \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (if k--k\\<in>G \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn (ae k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S =\n                         (if k--k\\<in>G \\<longrightarrow>\n                             k \\<in> S \\<longrightarrow> \\<not> isVal v\n                          then ccExp_bot_syn ((ae f|` S) k) v G|` fv v\n                          else fv v\\<^sup>2) G|`\n                         S\n 2. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> k \\<in> S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       \\<lbrakk>domA \\<Gamma> \\<subseteq> S;\n        map_of \\<Gamma> k = Some v\\<rbrakk>\n       \\<Longrightarrow> k \\<in> S", "apply (metis contra_subsetD domI dom_map_of_conv_domA)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CCfix_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (CCfix \\<Gamma>\\<cdot>(ae, G)) = cc_restr S (CCfix \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>(ae, G) G|` S =\n    CCfix \\<Gamma>\\<cdot>(ae f|` S, G G|` S) G|` S", "unfolding CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> aeG.\n        \\<mu> x.\n           ccBindsExtra \\<Gamma>\\<cdot>(fst aeG, x) \\<squnion>\n           snd aeG)\\<cdot>\n    (ae, G) G|`\n    S =\n    (\\<Lambda> aeG.\n        \\<mu> x.\n           ccBindsExtra \\<Gamma>\\<cdot>(fst aeG, x) \\<squnion>\n           snd aeG)\\<cdot>\n    (ae f|` S, G G|` S) G|`\n    S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> x. G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x)) G|` S =\n    (\\<mu> x.\n        G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x)) G|`\n    S", "apply (rule parallel_fix_ind[where P = \"\\<lambda> x y . cc_restr S x = cc_restr S y\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. adm (\\<lambda>x. fst x G|` S = snd x G|` S)\n 2. \\<bottom> G|` S = \\<bottom> G|` S\n 3. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       (\\<Lambda> x.\n           G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x))\\<cdot>\n       x G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       y G|`\n       S", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<bottom> G|` S = \\<bottom> G|` S\n 2. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       (\\<Lambda> x.\n           G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x))\\<cdot>\n       x G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       y G|`\n       S", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       (\\<Lambda> x.\n           G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x))\\<cdot>\n       x G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       y G|`\n       S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x) G|` S =\n       G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, y) G|` S", "apply (subst (1 2) ccBindsExtra_restr[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x G|` S) G|` S =\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S f|` S, y G|` S) G|` S", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ccField_CCfix:\n  shows \"ccField (CCfix \\<Gamma>\\<cdot>(ae, G)) \\<subseteq> fv \\<Gamma> \\<union> ccField G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (CCfix \\<Gamma>\\<cdot>(ae, G))\n    \\<subseteq> fv \\<Gamma> \\<union> ccField G", "unfolding CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField\n     ((\\<Lambda> aeG.\n          \\<mu> x.\n             ccBindsExtra \\<Gamma>\\<cdot>(fst aeG, x) \\<squnion>\n             snd aeG)\\<cdot>\n      (ae, G))\n    \\<subseteq> fv \\<Gamma> \\<union> ccField G", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (\\<mu> x. G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x))\n    \\<subseteq> fv \\<Gamma> \\<union> ccField G", "apply (rule fix_ind[where P = \"\\<lambda> x . ccField x \\<subseteq> fv \\<Gamma> \\<union> ccField G\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. adm (\\<lambda>x. ccField x \\<subseteq> fv \\<Gamma> \\<union> ccField G)\n 2. ccField \\<bottom> \\<subseteq> fv \\<Gamma> \\<union> ccField G\n 3. \\<And>x.\n       ccField x\n       \\<subseteq> fv \\<Gamma> \\<union> ccField G \\<Longrightarrow>\n       ccField\n        ((\\<Lambda> x.\n             G \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae, x))\\<cdot>\n         x)\n       \\<subseteq> fv \\<Gamma> \\<union> ccField G", "apply (auto dest!: subsetD[OF ccField_ccBindsExtra])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CCfix_restr_subst':\n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> cc_restr S (CCexp e[x::=y]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"cc_restr S (CCfix \\<Gamma>[x::h=y]\\<cdot>(ae, G)) = cc_restr S (CCfix \\<Gamma>\\<cdot>(ae f|` S, cc_restr S G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>[x::h=y]\\<cdot>(ae, G) G|` S =\n    CCfix \\<Gamma>\\<cdot>(ae f|` S, G G|` S) G|` S", "unfolding CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> aeG.\n        \\<mu> xa.\n           ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(fst aeG, xa) \\<squnion>\n           snd aeG)\\<cdot>\n    (ae, G) G|`\n    S =\n    (\\<Lambda> aeG.\n        \\<mu> x.\n           ccBindsExtra \\<Gamma>\\<cdot>(fst aeG, x) \\<squnion>\n           snd aeG)\\<cdot>\n    (ae f|` S, G G|` S) G|`\n    S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> xa.\n        G \\<squnion> ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, xa)) G|`\n    S =\n    (\\<mu> x.\n        G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x)) G|`\n    S", "apply (rule parallel_fix_ind[where P = \"\\<lambda> x y . cc_restr S x = cc_restr S y\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. adm (\\<lambda>x. fst x G|` S = snd x G|` S)\n 2. \\<bottom> G|` S = \\<bottom> G|` S\n 3. \\<And>xa ya.\n       xa G|` S = ya G|` S \\<Longrightarrow>\n       (\\<Lambda> xa.\n           G \\<squnion> ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, xa))\\<cdot>\n       xa G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       ya G|`\n       S", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<bottom> G|` S = \\<bottom> G|` S\n 2. \\<And>xa ya.\n       xa G|` S = ya G|` S \\<Longrightarrow>\n       (\\<Lambda> xa.\n           G \\<squnion> ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, xa))\\<cdot>\n       xa G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       ya G|`\n       S", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya.\n       xa G|` S = ya G|` S \\<Longrightarrow>\n       (\\<Lambda> xa.\n           G \\<squnion> ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, xa))\\<cdot>\n       xa G|`\n       S =\n       (\\<Lambda> x.\n           G G|` S \\<squnion>\n           ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x))\\<cdot>\n       ya G|`\n       S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya.\n       xa G|` S = ya G|` S \\<Longrightarrow>\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>[x::h=y]\\<cdot>(ae, xa) G|` S =\n       G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, ya) G|` S", "apply (subst  ccBindsExtra_restr_subst'[OF assms], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x G|` S) G|` S =\n       G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, y) G|` S", "apply (subst ccBindsExtra_restr[OF assms(4)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S f|` S, x G|` S G|` S) G|` S =\n       G G|` S \\<squnion> ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, y) G|` S", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x G|` S = y G|` S \\<Longrightarrow>\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S, x G|` S) G|` S =\n       G G|` S \\<squnion>\n       ccBindsExtra \\<Gamma>\\<cdot>(ae f|` S f|` S, y G|` S) G|` S", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma Aexp_eqvt[eqvt]:  \"\\<pi> \\<bullet> (CoCallArityAnalysis.Aexp cccExp e) = CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.Aexp cccExp e =\n    CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> CoCallArityAnalysis.Aexp cccExp e\\<cdot>x =\n       CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x)", "unfolding CoCallArityAnalysis.Aexp_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> fst (cccExp e\\<cdot>x) =\n       fst ((\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\\<cdot>\n            (\\<pi> \\<bullet> x))", "by perm_simp rule"], ["", "lemma CCexp_eqvt[eqvt]:  \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCexp cccExp e) = CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.CCexp cccExp e =\n    CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> CoCallArityAnalysis.CCexp cccExp e\\<cdot>x =\n       CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x)", "unfolding CoCallArityAnalysis.CCexp_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> snd (cccExp e\\<cdot>x) =\n       snd ((\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e)\\<cdot>\n            (\\<pi> \\<bullet> x))", "by perm_simp rule"], ["", "lemma CCfix_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCfix cccExp \\<Gamma>) = CoCallArityAnalysis.CCfix (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.CCfix cccExp \\<Gamma> =\n    CoCallArityAnalysis.CCfix (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> \\<Gamma>)", "unfolding CoCallArityAnalysis.CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (\\<Lambda> aeG.\n                        \\<mu> x.\n                           CoCallAnalysis.ccBindsExtra\n                            (CoCallArityAnalysis.CCexp cccExp)\n                            \\<Gamma>\\<cdot>\n                           (fst aeG, x) \\<squnion>\n                           snd aeG) =\n    (\\<Lambda> aeG.\n        \\<mu> x.\n           CoCallAnalysis.ccBindsExtra\n            (CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp))\n            (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n           (fst aeG, x) \\<squnion>\n           snd aeG)", "by perm_simp (simp_all add: Abs_cfun_eqvt)"], ["", "lemma ccFix_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.CCfix cccexp1 heap1 = CoCallArityAnalysis.CCfix cccexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallArityAnalysis.CCfix cccexp1 heap1 =\n                      CoCallArityAnalysis.CCfix cccexp2 heap2", "unfolding CoCallArityAnalysis.CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> aeG.\n                          \\<mu> x.\n                             CoCallAnalysis.ccBindsExtra\n                              (CoCallArityAnalysis.CCexp cccexp1)\n                              heap1\\<cdot>\n                             (fst aeG, x) \\<squnion>\n                             snd aeG) =\n                      (\\<Lambda> aeG.\n                          \\<mu> x.\n                             CoCallAnalysis.ccBindsExtra\n                              (CoCallArityAnalysis.CCexp cccexp2)\n                              heap2\\<cdot>\n                             (fst aeG, x) \\<squnion>\n                             snd aeG)", "apply (rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> aeG.\n                          \\<mu> x.\n                             CoCallAnalysis.ccBindsExtra\n                              (CoCallArityAnalysis.CCexp cccexp1)\n                              heap1\\<cdot>\n                             (fst aeG, x) \\<squnion>\n                             snd aeG) =\n                      (\\<Lambda> aeG.\n                          \\<mu> x.\n                             CoCallAnalysis.ccBindsExtra\n                              (CoCallArityAnalysis.CCexp cccexp2)\n                              heap2\\<cdot>\n                             (fst aeG, x) \\<squnion>\n                             snd aeG)", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallAnalysis.ccBindsExtra\n                       (CoCallArityAnalysis.CCexp cccexp1) heap1 =\n                      CoCallAnalysis.ccBindsExtra\n                       (CoCallArityAnalysis.CCexp cccexp2) heap2", "apply (rule ccBindsExtra_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; e \\<in> snd ` set heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.CCexp cccexp1 e =\n                         CoCallArityAnalysis.CCexp cccexp2 e\n 2. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> heap1 = heap2", "apply (auto simp add: CoCallArityAnalysis.CCexp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context CoCallArityAnalysis\nbegin"], ["", "definition cccFix ::  \"heap \\<Rightarrow> ((AEnv \\<times> CoCalls) \\<rightarrow> (AEnv \\<times> CoCalls))\"\n  where \"cccFix \\<Gamma> = (\\<Lambda> i. (Afix \\<Gamma>\\<cdot>(fst i \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` thunks \\<Gamma>), CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(fst i  \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), snd i)))\""], ["", "lemma cccFix_eq:\n  \"cccFix \\<Gamma>\\<cdot>i = (Afix \\<Gamma>\\<cdot>(fst i \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` thunks \\<Gamma>), CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(fst i  \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), snd i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cccFix \\<Gamma>\\<cdot>i =\n    (Afix \\<Gamma>\\<cdot>\n     (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     CCfix \\<Gamma>\\<cdot>\n     (Afix \\<Gamma>\\<cdot>\n      (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n      snd i))", "unfolding cccFix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        (Afix \\<Gamma>\\<cdot>\n         (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n         CCfix \\<Gamma>\\<cdot>\n         (Afix \\<Gamma>\\<cdot>\n          (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n          snd i)))\\<cdot>\n    i =\n    (Afix \\<Gamma>\\<cdot>\n     (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     CCfix \\<Gamma>\\<cdot>\n     (Afix \\<Gamma>\\<cdot>\n      (fst i \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n      snd i))", "by (rule beta_cfun)(intro cont2cont)"], ["", "end"], ["", "lemma cccFix_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix cccExp \\<Gamma>) = CoCallArityAnalysis.cccFix  (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.cccFix cccExp \\<Gamma> =\n    CoCallArityAnalysis.cccFix (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> \\<Gamma>)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> CoCallArityAnalysis.cccFix cccExp \\<Gamma>\\<cdot>x =\n       CoCallArityAnalysis.cccFix (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n       (\\<pi> \\<bullet> x)", "unfolding CoCallArityAnalysis.cccFix_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> (ArityAnalysis.Afix (CoCallArityAnalysis.Aexp cccExp)\n                         \\<Gamma>\\<cdot>\n                        (fst x \\<squnion>\n                         (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n                        CoCallArityAnalysis.CCfix cccExp \\<Gamma>\\<cdot>\n                        (ArityAnalysis.Afix\n                          (CoCallArityAnalysis.Aexp cccExp) \\<Gamma>\\<cdot>\n                         (fst x \\<squnion>\n                          (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n                         snd x)) =\n       (ArityAnalysis.Afix\n         (CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp))\n         (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n        (fst (\\<pi> \\<bullet> x) \\<squnion>\n         (\\<lambda>_. up\\<cdot>0) f|` thunks (\\<pi> \\<bullet> \\<Gamma>)),\n        CoCallArityAnalysis.CCfix (\\<pi> \\<bullet> cccExp)\n         (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n        (ArityAnalysis.Afix\n          (CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp))\n          (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n         (fst (\\<pi> \\<bullet> x) \\<squnion>\n          (\\<lambda>_. up\\<cdot>0) f|` thunks (\\<pi> \\<bullet> \\<Gamma>)),\n         snd (\\<pi> \\<bullet> x)))", "by perm_simp rule"], ["", "lemma cccFix_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.cccFix cccexp1 heap1 = CoCallArityAnalysis.cccFix cccexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallArityAnalysis.cccFix cccexp1 heap1 =\n                      CoCallArityAnalysis.cccFix cccexp2 heap2", "unfolding CoCallArityAnalysis.cccFix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> i.\n                          (ArityAnalysis.Afix\n                            (CoCallArityAnalysis.Aexp cccexp1) heap1\\<cdot>\n                           (fst i \\<squnion>\n                            (\\<lambda>_. up\\<cdot>0) f|` thunks heap1),\n                           CoCallArityAnalysis.CCfix cccexp1 heap1\\<cdot>\n                           (ArityAnalysis.Afix\n                             (CoCallArityAnalysis.Aexp cccexp1) heap1\\<cdot>\n                            (fst i \\<squnion>\n                             (\\<lambda>_. up\\<cdot>0) f|` thunks heap1),\n                            snd i))) =\n                      (\\<Lambda> i.\n                          (ArityAnalysis.Afix\n                            (CoCallArityAnalysis.Aexp cccexp2) heap2\\<cdot>\n                           (fst i \\<squnion>\n                            (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                           CoCallArityAnalysis.CCfix cccexp2 heap2\\<cdot>\n                           (ArityAnalysis.Afix\n                             (CoCallArityAnalysis.Aexp cccexp2) heap2\\<cdot>\n                            (fst i \\<squnion>\n                             (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                            snd i)))", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> i.\n                             (ArityAnalysis.Afix\n                               (CoCallArityAnalysis.Aexp cccexp1)\n                               heap1\\<cdot>\n                              (fst i \\<squnion>\n                               (\\<lambda>_. up\\<cdot>0) f|` thunks heap1),\n                              CoCallArityAnalysis.CCfix cccexp1 heap1\\<cdot>\n                              (ArityAnalysis.Afix\n                                (CoCallArityAnalysis.Aexp cccexp1)\n                                heap1\\<cdot>\n                               (fst i \\<squnion>\n                                (\\<lambda>_. up\\<cdot>0) f|` thunks heap1),\n                               snd i)))\\<cdot>\n                         x =\n                         (\\<Lambda> i.\n                             (ArityAnalysis.Afix\n                               (CoCallArityAnalysis.Aexp cccexp2)\n                               heap2\\<cdot>\n                              (fst i \\<squnion>\n                               (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                              CoCallArityAnalysis.CCfix cccexp2 heap2\\<cdot>\n                              (ArityAnalysis.Afix\n                                (CoCallArityAnalysis.Aexp cccexp2)\n                                heap2\\<cdot>\n                               (fst i \\<squnion>\n                                (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                               snd i)))\\<cdot>\n                         x", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.Afix\n                          (CoCallArityAnalysis.Aexp cccexp1) heap2\\<cdot>\n                         (a \\<squnion>\n                          (\\<lambda>_. up\\<cdot>0) f|` thunks heap2) =\n                         ArityAnalysis.Afix\n                          (CoCallArityAnalysis.Aexp cccexp2) heap2\\<cdot>\n                         (a \\<squnion>\n                          (\\<lambda>_. up\\<cdot>0) f|` thunks heap2)\n 2. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.CCfix cccexp1 heap2\\<cdot>\n                         (ArityAnalysis.Afix\n                           (CoCallArityAnalysis.Aexp cccexp1) heap2\\<cdot>\n                          (a \\<squnion>\n                           (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                          b) =\n                         CoCallArityAnalysis.CCfix cccexp2 heap2\\<cdot>\n                         (ArityAnalysis.Afix\n                           (CoCallArityAnalysis.Aexp cccexp2) heap2\\<cdot>\n                          (a \\<squnion>\n                           (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                          b)", "apply (rule arg_cong[OF Afix_cong], auto simp add: CoCallArityAnalysis.Aexp_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.CCfix cccexp1 heap2\\<cdot>\n                         (ArityAnalysis.Afix\n                           (CoCallArityAnalysis.Aexp cccexp1) heap2\\<cdot>\n                          (a \\<squnion>\n                           (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                          b) =\n                         CoCallArityAnalysis.CCfix cccexp2 heap2\\<cdot>\n                         (ArityAnalysis.Afix\n                           (CoCallArityAnalysis.Aexp cccexp2) heap2\\<cdot>\n                          (a \\<squnion>\n                           (\\<lambda>_. up\\<cdot>0) f|` thunks heap2),\n                          b)", "apply (rule arg_cong2[OF ccFix_cong Afix_cong ])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b e.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; e \\<in> snd ` set heap2\\<rbrakk>\n       \\<Longrightarrow> cccexp1 e = cccexp2 e\n 2. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> heap2 = heap2\n 3. \\<And>a b e.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; e \\<in> snd ` set heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.Aexp cccexp1 e =\n                         CoCallArityAnalysis.Aexp cccexp2 e\n 4. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> heap2 = heap2", "apply (auto simp add: CoCallArityAnalysis.Aexp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>The non-recursive case\\<close>"], ["", "definition ABind_nonrec :: \"var \\<Rightarrow> exp \\<Rightarrow> AEnv \\<times> CoCalls \\<rightarrow> Arity\\<^sub>\\<bottom>\"\nwhere\n  \"ABind_nonrec x e = (\\<Lambda> i. (if isVal e \\<or> x--x\\<notin>(snd i) then fst i x else up\\<cdot>0))\""], ["", "lemma ABind_nonrec_eq:\n  \"ABind_nonrec x e\\<cdot>(ae,G) = (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABind_nonrec x e\\<cdot>(ae, G) =\n    (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)", "unfolding ABind_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        if isVal e \\<or> x--x\\<notin>snd i then fst i x\n        else up\\<cdot>0)\\<cdot>\n    (ae, G) =\n    (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)", "apply (subst beta_cfun)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cont\n     (\\<lambda>i.\n         if isVal e \\<or> x--x\\<notin>snd i then fst i x else up\\<cdot>0)\n 2. (if isVal e \\<or> x--x\\<notin>snd (ae, G) then fst (ae, G) x\n     else up\\<cdot>0) =\n    (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (6 subgoals):\n 1. cont (\\<lambda>xa. fst xa x)\n 2. cont (\\<lambda>x. up\\<cdot>0)\n 3. \\<And>i. fst i x \\<sqsubseteq> up\\<cdot>0\n 4. \\<And>i y.\n       \\<lbrakk>i \\<sqsubseteq> y; isVal e \\<or> x--x\\<notin>snd y\\<rbrakk>\n       \\<Longrightarrow> isVal e \\<or> x--x\\<notin>snd i\n 5. adm (\\<lambda>xa. isVal e \\<or> x--x\\<notin>snd xa)\n 6. (if isVal e \\<or> x--x\\<notin>snd (ae, G) then fst (ae, G) x\n     else up\\<cdot>0) =\n    (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<not> isVal e; x--x\\<in>b; x--x\\<notin>ba;\n        a \\<sqsubseteq> aa; b \\<sqsubseteq> ba\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis in_join join_self_below(4))"], ["", "lemma ABind_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (ABind_nonrec x e) = ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> ABind_nonrec x e =\n    ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> ABind_nonrec x e\\<cdot>xa =\n       ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> xa)", "apply (case_tac xa, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa a b.\n       xa = (a, b) \\<Longrightarrow>\n       \\<pi> \\<bullet> ABind_nonrec x e\\<cdot>(a, b) =\n       ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> a, \\<pi> \\<bullet> b)", "unfolding ABind_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa a b.\n       xa = (a, b) \\<Longrightarrow>\n       \\<pi> \\<bullet> (if isVal e \\<or> x--x\\<notin>b then a x\n                        else up\\<cdot>0) =\n       (if isVal (\\<pi> \\<bullet> e) \\<or>\n           (\\<pi> \\<bullet> x)--(\\<pi> \\<bullet> x)\\<notin>(\\<pi> \\<bullet> b)\n        then (\\<pi> \\<bullet> a) (\\<pi> \\<bullet> x) else up\\<cdot>0)", "by perm_simp rule"], ["", "lemma ABind_nonrec_above_arg:\n  \"ae x \\<sqsubseteq> ABind_nonrec x e \\<cdot> (ae, G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae x \\<sqsubseteq> ABind_nonrec x e\\<cdot>(ae, G)", "unfolding ABind_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. ae x \\<sqsubseteq>\n    (if isVal e \\<or> x--x\\<notin>G then ae x else up\\<cdot>0)", "by auto"], ["", "definition Aheap_nonrec where\n  \"Aheap_nonrec x e = (\\<Lambda> i. esing x\\<cdot>(ABind_nonrec x e\\<cdot>i))\""], ["", "lemma Aheap_nonrec_simp:\n  \"Aheap_nonrec x e\\<cdot>i = esing x\\<cdot>(ABind_nonrec x e\\<cdot>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap_nonrec x e\\<cdot>i = esing x\\<cdot>(ABind_nonrec x e\\<cdot>i)", "unfolding Aheap_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i. esing x\\<cdot>(ABind_nonrec x e\\<cdot>i))\\<cdot>i =\n    esing x\\<cdot>(ABind_nonrec x e\\<cdot>i)", "by simp"], ["", "lemma Aheap_nonrec_lookup[simp]:\n  \"(Aheap_nonrec x e\\<cdot>i) x = ABind_nonrec x e\\<cdot>i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Aheap_nonrec x e\\<cdot>i) x = ABind_nonrec x e\\<cdot>i", "unfolding Aheap_nonrec_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (esing x\\<cdot>(ABind_nonrec x e\\<cdot>i)) x = ABind_nonrec x e\\<cdot>i", "by simp"], ["", "lemma Aheap_nonrec_eqvt'[eqvt]:\n  \"\\<pi> \\<bullet> (Aheap_nonrec x e) = Aheap_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> Aheap_nonrec x e =\n    Aheap_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> Aheap_nonrec x e\\<cdot>xa =\n       Aheap_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> xa)", "unfolding Aheap_nonrec_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> esing x\\<cdot>(ABind_nonrec x e\\<cdot>xa) =\n       esing (\\<pi> \\<bullet> x)\\<cdot>\n       (ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n        (\\<pi> \\<bullet> xa))", "by (perm_simp, rule)"], ["", "context CoCallArityAnalysis\nbegin"], ["", "definition Afix_nonrec\n   where \"Afix_nonrec x e = (\\<Lambda> i. fup\\<cdot>(Aexp e)\\<cdot>(ABind_nonrec x e \\<cdot> i) \\<squnion> fst i)\""], ["", "lemma Afix_nonrec_eq[simp]:\n    \"Afix_nonrec x e \\<cdot> i = fup\\<cdot>(Aexp e)\\<cdot>(ABind_nonrec x e \\<cdot> i) \\<squnion> fst i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix_nonrec x e\\<cdot>i =\n    \\<A>\\<^sup>\\<bottom>\\<^bsub>ABind_nonrec x e\\<cdot>i\\<^esub>\n     e \\<squnion>\n    fst i", "unfolding Afix_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        \\<A>\\<^sup>\\<bottom>\\<^bsub>ABind_nonrec x e\\<cdot>i\\<^esub>\n         e \\<squnion>\n        fst i)\\<cdot>\n    i =\n    \\<A>\\<^sup>\\<bottom>\\<^bsub>ABind_nonrec x e\\<cdot>i\\<^esub>\n     e \\<squnion>\n    fst i", "by (rule beta_cfun) simp"], ["", "definition CCfix_nonrec\n   where \"CCfix_nonrec x e = (\\<Lambda> i. ccBind x e \\<cdot> (Aheap_nonrec x e\\<cdot>i, snd i)  \\<squnion> ccProd (fv e) (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion> snd i)\""], ["", "lemma CCfix_nonrec_eq[simp]:\n    \"CCfix_nonrec x e \\<cdot> i = ccBind x e\\<cdot>(Aheap_nonrec x e\\<cdot>i, snd i)  \\<squnion> ccProd (fv e) (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion> snd i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix_nonrec x e\\<cdot>i =\n    ccBind x e\\<cdot>(Aheap_nonrec x e\\<cdot>i, snd i) \\<squnion>\n    fv e G\\<times>\n    (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion>\n    snd i", "unfolding CCfix_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        ccBind x e\\<cdot>(Aheap_nonrec x e\\<cdot>i, snd i) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion>\n        snd i)\\<cdot>\n    i =\n    ccBind x e\\<cdot>(Aheap_nonrec x e\\<cdot>i, snd i) \\<squnion>\n    fv e G\\<times>\n    (ccNeighbors x (snd i) - (if isVal e then {} else {x})) \\<squnion>\n    snd i", "by (rule beta_cfun) (intro cont2cont)"], ["", "definition cccFix_nonrec ::  \"var \\<Rightarrow> exp \\<Rightarrow> ((AEnv \\<times> CoCalls) \\<rightarrow> (AEnv \\<times> CoCalls))\"\n    where \"cccFix_nonrec x e = (\\<Lambda> i. (Afix_nonrec x e \\<cdot>i , CCfix_nonrec x e \\<cdot>i))\""], ["", "lemma cccFix_nonrec_eq[simp]:\n    \"cccFix_nonrec x e\\<cdot>i = (Afix_nonrec x e \\<cdot>i , CCfix_nonrec x e \\<cdot>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cccFix_nonrec x e\\<cdot>i =\n    (Afix_nonrec x e\\<cdot>i, CCfix_nonrec x e\\<cdot>i)", "unfolding cccFix_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        (Afix_nonrec x e\\<cdot>i, CCfix_nonrec x e\\<cdot>i))\\<cdot>\n    i =\n    (Afix_nonrec x e\\<cdot>i, CCfix_nonrec x e\\<cdot>i)", "by (rule beta_cfun) (intro cont2cont)"], ["", "end"], ["", "lemma AFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.Afix_nonrec cccExp x e) = CoCallArityAnalysis.Afix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.Afix_nonrec cccExp x e =\n    CoCallArityAnalysis.Afix_nonrec (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> CoCallArityAnalysis.Afix_nonrec cccExp x e\\<cdot>xa =\n       CoCallArityAnalysis.Afix_nonrec (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> xa)", "unfolding CoCallArityAnalysis.Afix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> fup\\<cdot>(CoCallArityAnalysis.Aexp cccExp e)\\<cdot>\n                       (ABind_nonrec x e\\<cdot>xa) \\<squnion>\n                       fst xa =\n       fup\\<cdot>\n       (CoCallArityAnalysis.Aexp (\\<pi> \\<bullet> cccExp)\n         (\\<pi> \\<bullet> e))\\<cdot>\n       (ABind_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n        (\\<pi> \\<bullet> xa)) \\<squnion>\n       fst (\\<pi> \\<bullet> xa)", "by perm_simp rule"], ["", "lemma CCFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.CCfix_nonrec cccExp x e) = CoCallArityAnalysis.CCfix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.CCfix_nonrec cccExp x e =\n    CoCallArityAnalysis.CCfix_nonrec (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> CoCallArityAnalysis.CCfix_nonrec cccExp x e\\<cdot>\n                       xa =\n       CoCallArityAnalysis.CCfix_nonrec (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> xa)", "unfolding CoCallArityAnalysis.CCfix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> CoCallAnalysis.ccBind\n                        (CoCallArityAnalysis.CCexp cccExp) x e\\<cdot>\n                       (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n                       fv e G\\<times>\n                       (ccNeighbors x (snd xa) -\n                        (if isVal e then {} else {x})) \\<squnion>\n                       snd xa =\n       CoCallAnalysis.ccBind\n        (CoCallArityAnalysis.CCexp (\\<pi> \\<bullet> cccExp))\n        (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (Aheap_nonrec (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n        (\\<pi> \\<bullet> xa),\n        snd (\\<pi> \\<bullet> xa)) \\<squnion>\n       fv (\\<pi> \\<bullet> e) G\\<times>\n       (ccNeighbors (\\<pi> \\<bullet> x) (snd (\\<pi> \\<bullet> xa)) -\n        (if isVal (\\<pi> \\<bullet> e) then {}\n         else {\\<pi> \\<bullet> x})) \\<squnion>\n       snd (\\<pi> \\<bullet> xa)", "by perm_simp rule"], ["", "lemma cccFix_nonrec_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix_nonrec cccExp x e) = CoCallArityAnalysis.cccFix_nonrec (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.cccFix_nonrec cccExp x e =\n    CoCallArityAnalysis.cccFix_nonrec (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> CoCallArityAnalysis.cccFix_nonrec cccExp x e\\<cdot>\n                       xa =\n       CoCallArityAnalysis.cccFix_nonrec (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> xa)", "unfolding CoCallArityAnalysis.cccFix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<pi> \\<bullet> (CoCallArityAnalysis.Afix_nonrec cccExp x e\\<cdot>xa,\n                        CoCallArityAnalysis.CCfix_nonrec cccExp x e\\<cdot>\n                        xa) =\n       (CoCallArityAnalysis.Afix_nonrec (\\<pi> \\<bullet> cccExp)\n         (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n        (\\<pi> \\<bullet> xa),\n        CoCallArityAnalysis.CCfix_nonrec (\\<pi> \\<bullet> cccExp)\n         (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\\<cdot>\n        (\\<pi> \\<bullet> xa))", "by perm_simp rule"], ["", "subsubsection \\<open>Combining the cases\\<close>"], ["", "context CoCallArityAnalysis\nbegin"], ["", "definition cccFix_choose ::  \"heap \\<Rightarrow> ((AEnv \\<times> CoCalls) \\<rightarrow> (AEnv \\<times> CoCalls))\"\n    where \"cccFix_choose \\<Gamma> = (if nonrec \\<Gamma> then case_prod cccFix_nonrec (hd \\<Gamma>) else cccFix \\<Gamma>)\""], ["", "lemma cccFix_choose_simp1[simp]:\n    \"\\<not> nonrec \\<Gamma> \\<Longrightarrow> cccFix_choose \\<Gamma> = cccFix \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    cccFix_choose \\<Gamma> = cccFix \\<Gamma>", "unfolding cccFix_choose_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    (if nonrec \\<Gamma>\n     then case hd \\<Gamma> of (x, xa) \\<Rightarrow> cccFix_nonrec x xa\n     else cccFix \\<Gamma>) =\n    cccFix \\<Gamma>", "by simp"], ["", "lemma cccFix_choose_simp2[simp]:\n    \"x \\<notin> fv e \\<Longrightarrow> cccFix_choose [(x,e)] = cccFix_nonrec x e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> fv e \\<Longrightarrow>\n    cccFix_choose [(x, e)] = cccFix_nonrec x e", "unfolding cccFix_choose_def nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> fv e \\<Longrightarrow>\n    (if \\<exists>xa ea. [(x, e)] = [(xa, ea)] \\<and> xa \\<notin> fv ea\n     then case hd [(x, e)] of (x, xa) \\<Rightarrow> cccFix_nonrec x xa\n     else cccFix [(x, e)]) =\n    cccFix_nonrec x e", "by auto"], ["", "end"], ["", "lemma cccFix_choose_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallArityAnalysis.cccFix_choose cccExp \\<Gamma>) = CoCallArityAnalysis.cccFix_choose (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallArityAnalysis.cccFix_choose cccExp \\<Gamma> =\n    CoCallArityAnalysis.cccFix_choose (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> \\<Gamma>)", "unfolding CoCallArityAnalysis.cccFix_choose_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (if nonrec \\<Gamma>\n                     then case hd \\<Gamma> of\n                          (x, xa) \\<Rightarrow>\n                            CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n                     else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n    (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n     then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n          (x, xa) \\<Rightarrow>\n            CoCallArityAnalysis.cccFix_nonrec (\\<pi> \\<bullet> cccExp) x xa\n     else CoCallArityAnalysis.cccFix (\\<pi> \\<bullet> cccExp)\n           (\\<pi> \\<bullet> \\<Gamma>))", "apply (cases nonrec \\<pi>  rule: eqvt_cases[where x = \\<Gamma>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. \\<pi> \\<bullet> nonrec x = nonrec (\\<pi> \\<bullet> x)\n 2. \\<lbrakk>nonrec \\<Gamma>; nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))\n 3. \\<lbrakk>\\<not> nonrec \\<Gamma>;\n     \\<not> nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))", "apply (perm_simp, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nonrec \\<Gamma>; nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))\n 2. \\<lbrakk>\\<not> nonrec \\<Gamma>;\n     \\<not> nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nonrec \\<Gamma>; nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (case hd \\<Gamma> of\n (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa) =\n                      (case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                       (x, xa) \\<Rightarrow>\n                         CoCallArityAnalysis.cccFix_nonrec\n                          (\\<pi> \\<bullet> cccExp) x xa)\n 2. \\<lbrakk>\\<not> nonrec \\<Gamma>;\n     \\<not> nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))", "apply (erule nonrecE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x e.\n       \\<lbrakk>nonrec (\\<pi> \\<bullet> \\<Gamma>); \\<Gamma> = [(x, e)];\n        x \\<notin> fv e\\<rbrakk>\n       \\<Longrightarrow> \\<pi> \\<bullet> (case hd \\<Gamma> of\n    (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa) =\n                         (case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                          (x, xa) \\<Rightarrow>\n                            CoCallArityAnalysis.cccFix_nonrec\n                             (\\<pi> \\<bullet> cccExp) x xa)\n 2. \\<lbrakk>\\<not> nonrec \\<Gamma>;\n     \\<not> nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))", "apply (simp )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> nonrec \\<Gamma>;\n     \\<not> nonrec (\\<pi> \\<bullet> \\<Gamma>)\\<rbrakk>\n    \\<Longrightarrow> \\<pi> \\<bullet> (if nonrec \\<Gamma>\n then case hd \\<Gamma> of\n      (x, xa) \\<Rightarrow> CoCallArityAnalysis.cccFix_nonrec cccExp x xa\n else CoCallArityAnalysis.cccFix cccExp \\<Gamma>) =\n                      (if nonrec (\\<pi> \\<bullet> \\<Gamma>)\n                       then case hd (\\<pi> \\<bullet> \\<Gamma>) of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec\n                               (\\<pi> \\<bullet> cccExp) x xa\n                       else CoCallArityAnalysis.cccFix\n                             (\\<pi> \\<bullet> cccExp)\n                             (\\<pi> \\<bullet> \\<Gamma>))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cccFix_nonrec_cong[fundef_cong]:\n  \"cccexp1 e = cccexp2 e  \\<Longrightarrow> CoCallArityAnalysis.cccFix_nonrec cccexp1 x e = CoCallArityAnalysis.cccFix_nonrec cccexp2 x e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cccexp1 e = cccexp2 e \\<Longrightarrow>\n    CoCallArityAnalysis.cccFix_nonrec cccexp1 x e =\n    CoCallArityAnalysis.cccFix_nonrec cccexp2 x e", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       CoCallArityAnalysis.cccFix_nonrec cccexp1 x e\\<cdot>xa =\n       CoCallArityAnalysis.cccFix_nonrec cccexp2 x e\\<cdot>xa", "unfolding CoCallArityAnalysis.cccFix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       (CoCallArityAnalysis.Afix_nonrec cccexp1 x e\\<cdot>xa,\n        CoCallArityAnalysis.CCfix_nonrec cccexp1 x e\\<cdot>xa) =\n       (CoCallArityAnalysis.Afix_nonrec cccexp2 x e\\<cdot>xa,\n        CoCallArityAnalysis.CCfix_nonrec cccexp2 x e\\<cdot>xa)", "unfolding CoCallArityAnalysis.Afix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       (fup\\<cdot>(CoCallArityAnalysis.Aexp cccexp1 e)\\<cdot>\n        (ABind_nonrec x e\\<cdot>xa) \\<squnion>\n        fst xa,\n        CoCallArityAnalysis.CCfix_nonrec cccexp1 x e\\<cdot>xa) =\n       (fup\\<cdot>(CoCallArityAnalysis.Aexp cccexp2 e)\\<cdot>\n        (ABind_nonrec x e\\<cdot>xa) \\<squnion>\n        fst xa,\n        CoCallArityAnalysis.CCfix_nonrec cccexp2 x e\\<cdot>xa)", "unfolding CoCallArityAnalysis.CCfix_nonrec_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       (fup\\<cdot>(CoCallArityAnalysis.Aexp cccexp1 e)\\<cdot>\n        (ABind_nonrec x e\\<cdot>xa) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp1) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa) =\n       (fup\\<cdot>(CoCallArityAnalysis.Aexp cccexp2 e)\\<cdot>\n        (ABind_nonrec x e\\<cdot>xa) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp2) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa)", "unfolding CoCallArityAnalysis.fup_Aexp_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       (fst (fup\\<cdot>(cccexp1 e)\\<cdot>\n             (ABind_nonrec x e\\<cdot>xa)) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp1) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa) =\n       (fst (fup\\<cdot>(cccexp2 e)\\<cdot>\n             (ABind_nonrec x e\\<cdot>xa)) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp2) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa)", "apply (simp only: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       (fst (fup\\<cdot>(cccexp2 e)\\<cdot>\n             (ABind_nonrec x e\\<cdot>xa)) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp1) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa) =\n       (fst (fup\\<cdot>(cccexp2 e)\\<cdot>\n             (ABind_nonrec x e\\<cdot>xa)) \\<squnion>\n        fst xa,\n        CoCallAnalysis.ccBind (CoCallArityAnalysis.CCexp cccexp2) x e\\<cdot>\n        (Aheap_nonrec x e\\<cdot>xa, snd xa) \\<squnion>\n        fv e G\\<times>\n        (ccNeighbors x (snd xa) - (if isVal e then {} else {x})) \\<squnion>\n        snd xa)", "apply (rule arg_cong[OF ccBind_cong])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       CoCallArityAnalysis.CCexp cccexp1 e =\n       CoCallArityAnalysis.CCexp cccexp2 e", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. cccexp1 e = cccexp2 e \\<Longrightarrow>\n    CoCallArityAnalysis.CCexp cccexp1 e =\n    CoCallArityAnalysis.CCexp cccexp2 e", "unfolding CoCallArityAnalysis.CCexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cccexp1 e = cccexp2 e \\<Longrightarrow>\n    (\\<Lambda> a. snd (cccexp1 e\\<cdot>a)) =\n    (\\<Lambda> a. snd (cccexp2 e\\<cdot>a))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cccFix_choose_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallArityAnalysis.cccFix_choose cccexp1 heap1 = CoCallArityAnalysis.cccFix_choose cccexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallArityAnalysis.cccFix_choose cccexp1 heap1 =\n                      CoCallArityAnalysis.cccFix_choose cccexp2 heap2", "unfolding CoCallArityAnalysis.cccFix_choose_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> (if nonrec heap1\n                       then case hd heap1 of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec cccexp1 x xa\n                       else CoCallArityAnalysis.cccFix cccexp1 heap1) =\n                      (if nonrec heap2\n                       then case hd heap2 of\n                            (x, xa) \\<Rightarrow>\n                              CoCallArityAnalysis.cccFix_nonrec cccexp2 x xa\n                       else CoCallArityAnalysis.cccFix cccexp2 heap2)", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> (if nonrec heap1\n                          then case hd heap1 of\n                               (x, xa) \\<Rightarrow>\n                                 CoCallArityAnalysis.cccFix_nonrec cccexp1 x\n                                  xa\n                          else CoCallArityAnalysis.cccFix cccexp1\n                                heap1)\\<cdot>\n                         x =\n                         (if nonrec heap2\n                          then case hd heap2 of\n                               (x, xa) \\<Rightarrow>\n                                 CoCallArityAnalysis.cccFix_nonrec cccexp2 x\n                                  xa\n                          else CoCallArityAnalysis.cccFix cccexp2\n                                heap2)\\<cdot>\n                         x", "apply (auto elim!: nonrecE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b x e.\n       \\<lbrakk>cccexp1 e = cccexp2 e; heap1 = [(x, e)]; x \\<notin> fv e;\n        heap2 = [(x, e)]\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.cccFix_nonrec cccexp1 x\n                          e\\<cdot>\n                         (a, b) =\n                         CoCallArityAnalysis.cccFix_nonrec cccexp2 x\n                          e\\<cdot>\n                         (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; \\<not> nonrec heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.cccFix cccexp1 heap2\\<cdot>\n                         (a, b) =\n                         CoCallArityAnalysis.cccFix cccexp2 heap2\\<cdot>\n                         (a, b)", "apply (rule arg_cong[OF cccFix_nonrec_cong], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; \\<not> nonrec heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallArityAnalysis.cccFix cccexp1 heap2\\<cdot>\n                         (a, b) =\n                         CoCallArityAnalysis.cccFix cccexp2 heap2\\<cdot>\n                         (a, b)", "apply (rule arg_cong[OF cccFix_cong], auto)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}