{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Kuratowski.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma complete_digraph_pair_def: \"K\\<^bsub>n\\<^esub> (with_proj G)\n  \\<longleftrightarrow> finite (pverts G) \\<and> card (pverts G) = n \\<and> parcs G = {(u,v). (u,v) \\<in> (pverts G \\<times> pverts G) \\<and> u \\<noteq> v}\" (is \"_ = ?R\")", "lemma complete_bipartite_digraph_pair_def: \"K\\<^bsub>m,n\\<^esub> (with_proj G) \\<longleftrightarrow> finite (pverts G)\n    \\<and> (\\<exists>U V. pverts G = U \\<union> V \\<and> U \\<inter> V = {} \\<and> card U = m \\<and> card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\" (is \"_ = ?R\")", "lemma pair_graphI_complete:\n  assumes \"K\\<^bsub>n\\<^esub> (with_proj G)\"\n  shows \"pair_graph G\"", "lemma pair_graphI_complete_bipartite:\n  assumes \"K\\<^bsub>m,n\\<^esub> (with_proj G)\"\n  shows \"pair_graph G\"", "lemma inner_verts_Nil[simp]: \"inner_verts [] = []\"", "lemma inner_verts_singleton[simp]: \"inner_verts [x] = []\"", "lemma (in wf_digraph) inner_verts_Cons:\n  assumes \"awalk u (e # es) v\"\n  shows \"inner_verts (e # es) = (if es \\<noteq> [] then head G e # inner_verts es else [])\"", "lemma (in - ) inner_verts_with_proj_def:\n  \"pre_digraph.inner_verts (with_proj G) p = tl (map fst p)\"", "lemma inner_verts_conv: \"inner_verts p = butlast (tl (awalk_verts u p))\"", "lemma (in pre_digraph) inner_verts_empty[simp]:\n  assumes \"length p < 2\" shows \"inner_verts p = []\"", "lemma (in wf_digraph) set_inner_verts:\n  assumes \"apath u p v\"\n  shows \"set (inner_verts p) = set (awalk_verts u p) - {u,v}\"", "lemma in_set_inner_verts_appendI_l:\n  assumes \"u \\<in> set (inner_verts p)\"\n  shows \"u \\<in> set (inner_verts (p @ q))\"", "lemma in_set_inner_verts_appendI_r:\n  assumes \"u \\<in> set (inner_verts q)\"\n  shows \"u \\<in> set (inner_verts (p @ q))\"", "lemma progressing_Nil: \"progressing []\"", "lemma progressing_single: \"progressing [e]\"", "lemma progressing_ConsD:\n  assumes \"progressing (e # es)\" shows \"progressing es\"", "lemma progressing_Cons:\n  \"progressing (x # xs) \\<longleftrightarrow> (xs = [] \\<or> (xs \\<noteq> [] \\<and> \\<not>(fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and> progressing xs))\" (is \"?L = ?R\")", "lemma progressing_Cons_Cons:\n  \"progressing ((u,v) # (v,w) # es) \\<longleftrightarrow> u \\<noteq> w \\<and> progressing ((v,w) # es)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma progressing_appendD1:\n  assumes \"progressing (p @ q)\" shows \"progressing p\"", "lemma progressing_appendD2:\n  assumes \"progressing (p @ q)\" shows \"progressing q\"", "lemma progressing_rev_path:\n  \"progressing (rev_path p) = progressing p\" (is \"?L = ?R\")", "lemma progressing_append_iff:\n  shows \"progressing (xs @ ys) \\<longleftrightarrow> progressing xs \\<and> progressing ys\n      \\<and> (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow> (fst (last xs) \\<noteq> snd (hd ys) \\<or> snd (last xs) \\<noteq> fst (hd ys)))\"", "lemma (in pair_sym_digraph) verts3_subdivide:\n  assumes \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows\"verts3 (subdivide G e w) = verts3 G\"", "lemma sd_path_Nil_iff:\n  \"sd_path e w p = [] \\<longleftrightarrow> p = []\"", "lemma (in pair_sym_digraph) gen_iapath_sd_path:\n  fixes e :: \"'a \\<times> 'a\" and w :: 'a\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  assumes path: \"gen_iapath V u p v\"\n  shows \"pre_digraph.gen_iapath (subdivide G e w) V u (sd_path e w p) v\"", "lemma (in pair_sym_digraph)\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  assumes path: \"pre_digraph.gen_iapath (subdivide G e w) V u p v\"\n  shows gen_iapath_co_path: \"gen_iapath V u (co_path e w p) v\" (is ?thesis_path)\n    and set_awalk_verts_co_path': \"set (awalk_verts u (co_path e w p)) = set (awalk_verts u p) - {w}\" (is ?thesis_set)", "lemma gen_iapath_rev_path:\n  \"gen_iapath V v (rev_path p) u = gen_iapath V u p v\" (is \"?L = ?R\")", "lemma inner_verts_rev_path:\n  assumes \"awalk u p v\"\n  shows \"inner_verts (rev_path p) = rev (inner_verts p)\"", "lemma apath_imp_progressing:\n  assumes \"apath u p v\" shows \"progressing p\"", "lemma awalk_Cons_deg2_unique:\n  assumes \"awalk u p v\" \"p \\<noteq> []\"\n  assumes \"in_degree G u \\<le> 2\"\n  assumes \"awalk u1 (e1 # p) v\" \"awalk u2 (e2 # p) v\"\n  assumes \"progressing (e1 # p)\" \"progressing (e2 # p)\"\n  shows \"e1 = e2\"", "lemma same_awalk_by_same_end:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n    and walk: \"awalk u p v\" \"awalk u q w\" \"hd p = hd q\" \"p \\<noteq> []\" \"q \\<noteq> []\"\n    and progress: \"progressing p\" \"progressing q\"\n    and tail: \"v \\<in> V\" \"w \\<in> V\"\n    and inner_verts: \"set (inner_verts p) \\<inter> V = {}\"\n      \"set (inner_verts q) \\<inter> V = {}\"\n  shows \"p = q\"", "lemma same_awalk_by_common_arc:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n  assumes walk: \"awalk u p v\" \"awalk w q x\"\n  assumes progress: \"progressing p\" \"progressing q\"\n  assumes iv_not_in_V: \"set (inner_verts p) \\<inter> V = {}\" \"set (inner_verts q) \\<inter> V = {}\"\n  assumes ends_in_V: \"{u,v,w,x} \\<subseteq> V\"\n  assumes arcs: \"e \\<in> set p\" \"e \\<in> set q\"\n  shows \"p = q\"", "lemma same_gen_iapath_by_common_arc:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n  assumes path: \"gen_iapath V u p v\" \"gen_iapath V w q x\"\n  assumes arcs: \"e \\<in> set p\" \"e \\<in> set q\"\n  shows \"p = q\"", "lemma (in wf_digraph) iapath_dist_ends: \"\\<And>u p v. iapath u p v \\<Longrightarrow> u \\<noteq> v\"", "lemma choose_iapath:\n  assumes \"\\<exists>p. iapath u p v\"\n  shows \"iapath u (choose_iapath u v) v\"", "lemma slim_simps: \"pverts slim = slim_verts\" \"parcs slim = slim_arcs\"", "lemma slim_paths_in_G_E:\n  assumes \"(u,p,v) \\<in> slim_paths\" obtains \"iapath u p v\" \"u \\<noteq> v\"", "lemma verts_slim_in_G: \"pverts slim \\<subseteq> pverts G\"", "lemma verts3_in_slim_G[simp]:\n  assumes \"x \\<in> verts3 G\" shows \"x \\<in> pverts slim\"", "lemma arcs_slim_in_G: \"parcs slim \\<subseteq> parcs G\"", "lemma slim_paths_in_slimG:\n  assumes \"(u,p,v) \\<in> slim_paths\"\n  shows \"pre_digraph.gen_iapath slim (verts3 G) u p v \\<and> p \\<noteq> []\"", "lemma direct_arc_swapped:\n  \"direct_arc (u,v) = direct_arc (v,u)\"", "lemma direct_arc_chooses:\n  fixes u v :: 'a shows \"direct_arc (u,v) = (u,v) \\<or> direct_arc (u,v) = (v,u)\"", "lemma rev_path_choose_iapath:\n  assumes \"u \\<noteq> v\"\n  shows \"rev_path (choose_iapath u v) = choose_iapath v u\"", "lemma no_loops_in_iapath: \"gen_iapath V u p v \\<Longrightarrow> a \\<in> set p \\<Longrightarrow> fst a \\<noteq> snd a\"", "lemma pair_bidirected_digraph_slim: \"pair_bidirected_digraph slim\"", "lemma (in pair_pseudo_graph) pair_graph_slim: \"pair_graph slim\"", "lemma subgraph_slim: \"subgraph slim G\"", "lemma giapath_if_slim_giapath:\n  assumes \"pre_digraph.gen_iapath slim (verts3 G) u p v\"\n  shows \"gen_iapath (verts3 G) u p v\"", "lemma slim_giapath_if_giapath:\nassumes \"gen_iapath (verts3 G) u p v\"\n  shows \"\\<exists>p. pre_digraph.gen_iapath slim (verts3 G) u p v\" (is \"\\<exists>p. ?P p\")", "lemma contr_graph_slim_eq:\n   \"gen_contr_graph slim (verts3 G) = contr_graph G\"", "lemma verts3_slim_in_verts3:\n  assumes \"v \\<in> verts3 slim\" shows \"v \\<in> verts3 G\"", "lemma slim_is_slim:\n  \"pair_pre_digraph.is_slim slim (verts3 G)\"", "lemma\n  assumes p: \"gen_iapath (pverts G) u p v\"\n  shows gen_iapath_triv_path: \"p = [(u,v)]\"\n    and gen_iapath_triv_arc: \"(u,v) \\<in> parcs G\"", "lemma gen_contr_triv:\n  assumes \"is_slim V\" \"pverts G = V\" shows \"gen_contr_graph G V = G\"", "lemma is_slim_no_loops:\n  assumes \"is_slim V\" \"a \\<in> arcs G\" shows \"fst a \\<noteq> snd a\"", "lemma (in pair_pseudo_graph) in_degree_contr:\n  assumes \"v \\<in> V\" and V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> verts G\"\n  shows \"in_degree (gen_contr_graph G V) v \\<le> in_degree G v\"", "lemma (in pair_graph) contracted_no_degree2_simp:\n  assumes subd: \"subdivision_pair G H\"\n  assumes two_less_deg2: \"verts3 G = pverts G\"\n  shows \"contr_graph H = G\"", "lemma verts3_K33:\n  assumes \"K\\<^bsub>3,3\\<^esub> (with_proj G)\"\n  shows \"verts3 G = verts G\"", "lemma verts3_K5:\n  assumes \"K\\<^bsub>5\\<^esub> (with_proj G)\"\n  shows \"verts3 G = verts G\"", "lemma K33_contractedI:\n  assumes subd: \"subdivision_pair G H\"\n  assumes k33: \"K\\<^bsub>3,3\\<^esub> G\"\n  shows \"K\\<^bsub>3,3\\<^esub> (contr_graph H)\"", "lemma K5_contractedI:\n  assumes subd: \"subdivision_pair G H\"\n  assumes k5: \"K\\<^bsub>5\\<^esub> G\"\n  shows \"K\\<^bsub>5\\<^esub> (contr_graph H)\"", "lemma gcg_subdivide_eq:\n  assumes mem: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  shows \"gen_contr_graph (subdivide G e w) V = gen_contr_graph G V\"", "lemma co_path_append:\n  assumes \"[last p1, hd p2] \\<notin> {[(fst e,w),(w,snd e)], [(snd e,w),(w,fst e)]}\"\n  shows \"co_path e w (p1 @ p2) = co_path e w p1 @ co_path e w p2\"", "lemma exists_co_path_decomp1:\n  assumes mem: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes p: \"pre_digraph.apath (subdivide G e w) u p v\" \"(fst e, w) \\<in> set p\" \"w \\<noteq> v\"\n  shows \"\\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2\"", "lemma is_slim_if_subdivide:\n  assumes \"pair_pre_digraph.is_slim (subdivide G e w) V\"\n  assumes mem1: \"e \\<in> parcs G\" \"w \\<notin> pverts G\" and mem2: \"w \\<notin> V\"\n  shows \"is_slim V\"", "lemma subdivision_gen_contr:\n  assumes \"is_slim V\"\n  shows \"subdivision_pair (gen_contr_graph G V) G\"", "lemma  contr_is_subgraph_subdivision:\n  shows \"\\<exists>H. subgraph (with_proj H) G \\<and> subdivision_pair (contr_graph G) H\"", "theorem kuratowski_contr:\n  fixes K :: \"'a pair_pre_digraph\"\n  assumes subgraph_K: \"subgraph K G\"\n  assumes spd_K: \"pair_pseudo_graph K\"\n  assumes kuratowski: \"K\\<^bsub>3,3\\<^esub> (contr_graph K) \\<or> K\\<^bsub>5\\<^esub> (contr_graph K)\"\n  shows \"\\<not>kuratowski_planar G\"", "theorem certificate_characterization:\n  defines \"kuratowski \\<equiv> \\<lambda>G :: 'a pair_pre_digraph. K\\<^bsub>3,3\\<^esub> G \\<or> K\\<^bsub>5\\<^esub> G\"\n  shows \"kuratowski (contr_graph G)\n    \\<longleftrightarrow> (\\<exists>H. kuratowski H \\<and> subdivision_pair H slim \\<and> verts3 G = verts3 slim)\" (is \"?L \\<longleftrightarrow> ?R\")", "theorem certify_complete:\n  assumes \"pair_pseudo_graph cert\"\n  assumes \"subgraph cert G\"\n  assumes \"\\<exists>H. subdivision_pair H cert \\<and> (K\\<^bsub>3,3\\<^esub> H \\<or> K\\<^bsub>5\\<^esub> H)\"\n  shows \"certify cert\"", "theorem certify_sound:\n  assumes \"pair_pseudo_graph cert\"\n  assumes \"certify cert\"\n  shows\" \\<not>kuratowski_planar G\"", "theorem certify_characterization:\n  assumes \"pair_pseudo_graph cert\"\n  shows \"certify cert \\<longleftrightarrow> subgraph cert G \\<and> verts3 cert = verts3 (pair_pre_digraph.slim cert)\n      \\<and>(\\<exists>H. (K\\<^bsub>3,3\\<^esub> (with_proj H) \\<or> K\\<^bsub>5\\<^esub> H) \\<and> subdivision_pair H (pair_pre_digraph.slim cert))\"\n      (is \"?L \\<longleftrightarrow> ?R\")"], "translations": [["", "lemma complete_digraph_pair_def: \"K\\<^bsub>n\\<^esub> (with_proj G)\n  \\<longleftrightarrow> finite (pverts G) \\<and> card (pverts G) = n \\<and> parcs G = {(u,v). (u,v) \\<in> (pverts G \\<times> pverts G) \\<and> u \\<noteq> v}\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (with_proj G) =\n    (finite (pverts G) \\<and>\n     card (pverts G) = n \\<and>\n     parcs G =\n     {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n 2. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "assume A: \"K\\<^bsub>n\\<^esub> G\""], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> (with_proj G)\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n 2. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "then"], ["proof (chain)\npicking this:\n  K\\<^bsub>n\\<^esub> (with_proj G)", "interpret graph \"with_proj G\""], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by (simp add: complete_digraph_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n 2. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}", "using A finite_verts"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> (with_proj G)\n  finite (verts (with_proj G))\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "assume A: ?R"], ["proof (state)\nthis:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "moreover"], ["proof (state)\nthis:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "then"], ["proof (chain)\npicking this:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}", "have \"finite (pverts G \\<times> pverts G)\" \"parcs G \\<subseteq> pverts G \\<times> pverts G\""], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. finite (pverts G \\<times> pverts G) &&&\n    parcs G \\<subseteq> pverts G \\<times> pverts G", "by auto"], ["proof (state)\nthis:\n  finite (pverts G \\<times> pverts G)\n  parcs G \\<subseteq> pverts G \\<times> pverts G\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "then"], ["proof (chain)\npicking this:\n  finite (pverts G \\<times> pverts G)\n  parcs G \\<subseteq> pverts G \\<times> pverts G", "have \"finite (parcs G)\""], ["proof (prove)\nusing this:\n  finite (pverts G \\<times> pverts G)\n  parcs G \\<subseteq> pverts G \\<times> pverts G\n\ngoal (1 subgoal):\n 1. finite (parcs G)", "by (rule rev_finite_subset)"], ["proof (state)\nthis:\n  finite (parcs G)\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "ultimately"], ["proof (chain)\npicking this:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n  finite (parcs G)", "interpret pair_graph G"], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n  finite (parcs G)\n\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales (auto simp:  symmetric_def split: prod.splits intro: symI)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    card (pverts G) = n \\<and>\n    parcs G =\n    {(u, v).\n     (u, v) \\<in> pverts G \\<times> pverts G \\<and>\n     u \\<noteq> v} \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (with_proj G)", "show \"K\\<^bsub>n\\<^esub> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (with_proj G)", "using A finite_verts"], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  card (pverts G) = n \\<and>\n  parcs G =\n  {(u, v). (u, v) \\<in> pverts G \\<times> pverts G \\<and> u \\<noteq> v}\n  finite (pverts G)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (with_proj G)", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_bipartite_digraph_pair_def: \"K\\<^bsub>m,n\\<^esub> (with_proj G) \\<longleftrightarrow> finite (pverts G)\n    \\<and> (\\<exists>U V. pverts G = U \\<union> V \\<and> U \\<inter> V = {} \\<and> card U = m \\<and> card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G) =\n    (finite (pverts G) \\<and>\n     (\\<exists>U V.\n         pverts G = U \\<union> V \\<and>\n         U \\<inter> V = {} \\<and>\n         card U = m \\<and>\n         card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n 2. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "assume A: \"K\\<^bsub>m,n\\<^esub> G\""], ["proof (state)\nthis:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)\n\ngoal (2 subgoals):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n 2. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "then"], ["proof (chain)\npicking this:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)", "interpret graph G"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by (simp add: complete_bipartite_digraph_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G) \\<Longrightarrow>\n    finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n 2. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)", "using A finite_verts"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)\n  finite (verts (with_proj G))\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = m \\<and>\n      card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "assume A: ?R"], ["proof (state)\nthis:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = m \\<and>\n      card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "then"], ["proof (chain)\npicking this:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = m \\<and>\n      card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)", "interpret pair_graph G"], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = m \\<and>\n      card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales (fastforce simp: complete_bipartite_digraph_def symmetric_def split: prod.splits intro: symI)+"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (pverts G) \\<and>\n    (\\<exists>U V.\n        pverts G = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = m \\<and>\n        card V = n \\<and>\n        parcs G = U \\<times> V \\<union> V \\<times> U) \\<Longrightarrow>\n    K\\<^bsub>m,n\\<^esub> (with_proj G)", "show \"K\\<^bsub>m,n\\<^esub> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G)", "using A"], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = m \\<and>\n      card V = n \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>m,n\\<^esub> (with_proj G)", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pair_graphI_complete:\n  assumes \"K\\<^bsub>n\\<^esub> (with_proj G)\"\n  shows \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>n\\<^esub> (with_proj G)", "interpret graph \"with_proj G\""], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by (simp add: complete_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "show \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using finite_arcs finite_verts sym_arcs wellformed no_loops"], ["proof (prove)\nusing this:\n  finite (arcs (with_proj G))\n  finite (verts (with_proj G))\n  symmetric (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<noteq> head (with_proj G) ?e\n\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales simp_all"], ["proof (state)\nthis:\n  pair_graph G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pair_graphI_complete_bipartite:\n  assumes \"K\\<^bsub>m,n\\<^esub> (with_proj G)\"\n  shows \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)", "interpret graph \"with_proj G\""], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by (simp add: complete_bipartite_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "show \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using finite_arcs finite_verts sym_arcs wellformed no_loops"], ["proof (prove)\nusing this:\n  finite (arcs (with_proj G))\n  finite (verts (with_proj G))\n  symmetric (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<noteq> head (with_proj G) ?e\n\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales simp_all"], ["proof (state)\nthis:\n  pair_graph G\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Inner vertices of a walk\\<close>"], ["", "context pre_digraph begin"], ["", "definition (in pre_digraph) inner_verts :: \"'b awalk \\<Rightarrow> 'a list\" where\n  \"inner_verts p \\<equiv> tl (map (tail G) p)\""], ["", "lemma inner_verts_Nil[simp]: \"inner_verts [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts [] = []", "by (auto simp: inner_verts_def)"], ["", "lemma inner_verts_singleton[simp]: \"inner_verts [x] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts [x] = []", "by (auto simp: inner_verts_def)"], ["", "lemma (in wf_digraph) inner_verts_Cons:\n  assumes \"awalk u (e # es) v\"\n  shows \"inner_verts (e # es) = (if es \\<noteq> [] then head G e # inner_verts es else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts (e # es) =\n    (if es \\<noteq> [] then head G e # inner_verts es else [])", "using assms"], ["proof (prove)\nusing this:\n  awalk u (e # es) v\n\ngoal (1 subgoal):\n 1. inner_verts (e # es) =\n    (if es \\<noteq> [] then head G e # inner_verts es else [])", "by (induct es) (auto simp: inner_verts_def)"], ["", "lemma (in - ) inner_verts_with_proj_def:\n  \"pre_digraph.inner_verts (with_proj G) p = tl (map fst p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.inner_verts (with_proj G) p = tl (map fst p)", "unfolding pre_digraph.inner_verts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (map (tail (with_proj G)) p) = tl (map fst p)", "by simp"], ["", "lemma inner_verts_conv: \"inner_verts p = butlast (tl (awalk_verts u p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts p = butlast (tl (awalk_verts u p))", "unfolding inner_verts_def awalk_verts_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (map (tail G) p) =\n    butlast\n     (tl (if p = [] then [u] else map (tail G) p @ [head G (last p)]))", "by simp"], ["", "lemma (in pre_digraph) inner_verts_empty[simp]:\n  assumes \"length p < 2\" shows \"inner_verts p = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts p = []", "using assms"], ["proof (prove)\nusing this:\n  length p < 2\n\ngoal (1 subgoal):\n 1. inner_verts p = []", "by (cases p) (auto simp: inner_verts_def)"], ["", "lemma (in wf_digraph) set_inner_verts:\n  assumes \"apath u p v\"\n  shows \"set (inner_verts p) = set (awalk_verts u p) - {u,v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (awalk_verts u p) - {u, v}", "proof (cases \"length p < 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}\n 2. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "case True"], ["proof (state)\nthis:\n  length p < 2\n\ngoal (2 subgoals):\n 1. length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}\n 2. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "with assms"], ["proof (chain)\npicking this:\n  apath u p v\n  length p < 2", "show ?thesis"], ["proof (prove)\nusing this:\n  apath u p v\n  length p < 2\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (awalk_verts u p) - {u, v}", "by (cases p) (auto simp: inner_verts_conv[of _ u] apath_def)"], ["proof (state)\nthis:\n  set (inner_verts p) = set (awalk_verts u p) - {u, v}\n\ngoal (1 subgoal):\n 1. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "case False"], ["proof (state)\nthis:\n  \\<not> length p < 2\n\ngoal (1 subgoal):\n 1. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "have \"awalk_verts u p = u # inner_verts p @ [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. awalk_verts u p = u # inner_verts p @ [v]", "using assms False length_awalk_verts[of u p] inner_verts_conv[of p u]"], ["proof (prove)\nusing this:\n  apath u p v\n  \\<not> length p < 2\n  length (awalk_verts u p) = Suc (length p)\n  inner_verts p = butlast (tl (awalk_verts u p))\n\ngoal (1 subgoal):\n 1. awalk_verts u p = u # inner_verts p @ [v]", "by (cases \"awalk_verts u p\") (auto simp: apath_def awalk_conv)"], ["proof (state)\nthis:\n  awalk_verts u p = u # inner_verts p @ [v]\n\ngoal (1 subgoal):\n 1. \\<not> length p < 2 \\<Longrightarrow>\n    set (inner_verts p) = set (awalk_verts u p) - {u, v}", "then"], ["proof (chain)\npicking this:\n  awalk_verts u p = u # inner_verts p @ [v]", "show ?thesis"], ["proof (prove)\nusing this:\n  awalk_verts u p = u # inner_verts p @ [v]\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (awalk_verts u p) - {u, v}", "using assms"], ["proof (prove)\nusing this:\n  awalk_verts u p = u # inner_verts p @ [v]\n  apath u p v\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (awalk_verts u p) - {u, v}", "by (auto simp: apath_def)"], ["proof (state)\nthis:\n  set (inner_verts p) = set (awalk_verts u p) - {u, v}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_set_inner_verts_appendI_l:\n  assumes \"u \\<in> set (inner_verts p)\"\n  shows \"u \\<in> set (inner_verts (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> set (inner_verts (p @ q))", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> set (inner_verts p)\n\ngoal (1 subgoal):\n 1. u \\<in> set (inner_verts (p @ q))", "by (induct p) (auto simp: inner_verts_def)"], ["", "lemma in_set_inner_verts_appendI_r:\n  assumes \"u \\<in> set (inner_verts q)\"\n  shows \"u \\<in> set (inner_verts (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> set (inner_verts (p @ q))", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> set (inner_verts q)\n\ngoal (1 subgoal):\n 1. u \\<in> set (inner_verts (p @ q))", "by (induct p) (auto simp: inner_verts_def dest: list_set_tl)"], ["", "end"], ["", "subsection \\<open>Progressing Walks\\<close>"], ["", "text \\<open>\n  We call a walk \\emph{progressing} if it does not contain the sequence\n  @{term \"[(x,y), (y,x)]\"}. This concept is relevant in particular\n  for @{term iapath}s: If all of the inner vertices have degree at\n  most 2 this implies that such a walk is a trail and even a path.\n\\<close>"], ["", "definition progressing :: \"('a \\<times> 'a) awalk \\<Rightarrow> bool\" where\n  \"progressing p \\<equiv> \\<forall>xs x y ys. p \\<noteq> xs @ (x,y) # (y,x) # ys\""], ["", "lemma progressing_Nil: \"progressing []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing []", "by (auto simp: progressing_def)"], ["", "lemma progressing_single: \"progressing [e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing [e]", "by (auto simp: progressing_def)"], ["", "lemma progressing_ConsD:\n  assumes \"progressing (e # es)\" shows \"progressing es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing es", "using assms"], ["proof (prove)\nusing this:\n  progressing (e # es)\n\ngoal (1 subgoal):\n 1. progressing es", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  \\<forall>xs x y ys. e # es \\<noteq> xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<forall>xs x y ys. es \\<noteq> xs @ (x, y) # (y, x) # ys", "by (metis (no_types) append_eq_Cons_conv)"], ["", "lemma progressing_Cons:\n  \"progressing (x # xs) \\<longleftrightarrow> (xs = [] \\<or> (xs \\<noteq> [] \\<and> \\<not>(fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and> progressing xs))\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (x # xs) =\n    (xs = [] \\<or>\n     xs \\<noteq> [] \\<and>\n     \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n     progressing xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. progressing (x # xs) \\<Longrightarrow>\n    xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs\n 2. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs \\<Longrightarrow>\n    progressing (x # xs)", "assume ?L"], ["proof (state)\nthis:\n  progressing (x # xs)\n\ngoal (2 subgoals):\n 1. progressing (x # xs) \\<Longrightarrow>\n    xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs\n 2. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs \\<Longrightarrow>\n    progressing (x # xs)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs", "proof (cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs", "by auto"], ["proof (state)\nthis:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "case (Cons x' xs')"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "then"], ["proof (chain)\npicking this:\n  xs = x' # xs'", "have \"\\<And>u v. (x # x' # xs') \\<noteq> [] @ (u,v) # (v,u) # xs'\""], ["proof (prove)\nusing this:\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. \\<And>u v. x # x' # xs' \\<noteq> [] @ (u, v) # (v, u) # xs'", "using \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  progressing (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>u v. x # x' # xs' \\<noteq> [] @ (u, v) # (v, u) # xs'", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  \\<forall>xsa xa y ys. x # xs \\<noteq> xsa @ (xa, y) # (y, xa) # ys\n\ngoal (1 subgoal):\n 1. \\<And>u v. x # x' # xs' \\<noteq> [] @ (u, v) # (v, u) # xs'", "by metis"], ["proof (state)\nthis:\n  x # x' # xs' \\<noteq> [] @ (?u, ?v) # (?v, ?u) # xs'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "then"], ["proof (chain)\npicking this:\n  x # x' # xs' \\<noteq> [] @ (?u, ?v) # (?v, ?u) # xs'", "have \"\\<not>(fst x = snd x' \\<and> snd x = fst x')\""], ["proof (prove)\nusing this:\n  x # x' # xs' \\<noteq> [] @ (?u, ?v) # (?v, ?u) # xs'\n\ngoal (1 subgoal):\n 1. \\<not> (fst x = snd x' \\<and> snd x = fst x')", "by (cases x) (cases x', auto)"], ["proof (state)\nthis:\n  \\<not> (fst x = snd x' \\<and> snd x = fst x')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       xs = [] \\<or>\n       xs \\<noteq> [] \\<and>\n       \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n       progressing xs", "with Cons"], ["proof (chain)\npicking this:\n  xs = x' # xs'\n  \\<not> (fst x = snd x' \\<and> snd x = fst x')", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  \\<not> (fst x = snd x' \\<and> snd x = fst x')\n\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs", "using \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  \\<not> (fst x = snd x' \\<and> snd x = fst x')\n  progressing (x # xs)\n\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs", "by (auto dest: progressing_ConsD)"], ["proof (state)\nthis:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs\n\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs \\<Longrightarrow>\n    progressing (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs \\<Longrightarrow>\n    progressing (x # xs)", "assume ?R"], ["proof (state)\nthis:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs\n\ngoal (1 subgoal):\n 1. xs = [] \\<or>\n    xs \\<noteq> [] \\<and>\n    \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n    progressing xs \\<Longrightarrow>\n    progressing (x # xs)", "then"], ["proof (chain)\npicking this:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs", "show ?L"], ["proof (prove)\nusing this:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  progressing xs\n\ngoal (1 subgoal):\n 1. progressing (x # xs)", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  xs = [] \\<or>\n  xs \\<noteq> [] \\<and>\n  \\<not> (fst x = snd (hd xs) \\<and> snd x = fst (hd xs)) \\<and>\n  (\\<forall>xsa x y ys. xs \\<noteq> xsa @ (x, y) # (y, x) # ys)\n\ngoal (1 subgoal):\n 1. \\<forall>xsa xa y ys. x # xs \\<noteq> xsa @ (xa, y) # (y, xa) # ys", "by (auto simp add: Cons_eq_append_conv)"], ["proof (state)\nthis:\n  progressing (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma progressing_Cons_Cons:\n  \"progressing ((u,v) # (v,w) # es) \\<longleftrightarrow> u \\<noteq> w \\<and> progressing ((v,w) # es)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing ((u, v) # (v, w) # es) =\n    (u \\<noteq> w \\<and> progressing ((v, w) # es))", "by (auto simp: progressing_Cons)"], ["", "lemma progressing_appendD1:\n  assumes \"progressing (p @ q)\" shows \"progressing p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing p", "using assms"], ["proof (prove)\nusing this:\n  progressing (p @ q)\n\ngoal (1 subgoal):\n 1. progressing p", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  \\<forall>xs x y ys. p @ q \\<noteq> xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<forall>xs x y ys. p \\<noteq> xs @ (x, y) # (y, x) # ys", "by (metis append_Cons append_assoc)"], ["", "lemma progressing_appendD2:\n  assumes \"progressing (p @ q)\" shows \"progressing q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing q", "using assms"], ["proof (prove)\nusing this:\n  progressing (p @ q)\n\ngoal (1 subgoal):\n 1. progressing q", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  \\<forall>xs x y ys. p @ q \\<noteq> xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<forall>xs x y ys. q \\<noteq> xs @ (x, y) # (y, x) # ys", "by (metis append_assoc)"], ["", "lemma progressing_rev_path:\n  \"progressing (rev_path p) = progressing p\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (rev_path p) = progressing p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. progressing (rev_path p) \\<Longrightarrow> progressing p\n 2. progressing p \\<Longrightarrow> progressing (rev_path p)", "assume ?L"], ["proof (state)\nthis:\n  progressing (rev_path p)\n\ngoal (2 subgoals):\n 1. progressing (rev_path p) \\<Longrightarrow> progressing p\n 2. progressing p \\<Longrightarrow> progressing (rev_path p)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing p", "unfolding progressing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs x y ys. p \\<noteq> xs @ (x, y) # (y, x) # ys", "proof (intro allI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y ys. p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "fix xs x y ys l1 l2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y ys. p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "assume \"p = xs @ (x,y) # (y,x) # ys\""], ["proof (state)\nthis:\n  p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<And>xs x y ys. p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p = xs @ (x, y) # (y, x) # ys", "have \"rev_path p = rev_path ys @ (x,y) # (y,x) # rev_path xs\""], ["proof (prove)\nusing this:\n  p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs", "by simp"], ["proof (state)\nthis:\n  rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x y ys. p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs", "show False"], ["proof (prove)\nusing this:\n  rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs\n\ngoal (1 subgoal):\n 1. False", "using \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs\n  progressing (rev_path p)\n\ngoal (1 subgoal):\n 1. False", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  rev_path p = rev_path ys @ (x, y) # (y, x) # rev_path xs\n  \\<forall>xs x y ys. rev_path p \\<noteq> xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  progressing p\n\ngoal (1 subgoal):\n 1. progressing p \\<Longrightarrow> progressing (rev_path p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. progressing p \\<Longrightarrow> progressing (rev_path p)", "assume ?R"], ["proof (state)\nthis:\n  progressing p\n\ngoal (1 subgoal):\n 1. progressing p \\<Longrightarrow> progressing (rev_path p)", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (rev_path p)", "unfolding progressing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs x y ys. rev_path p \\<noteq> xs @ (x, y) # (y, x) # ys", "proof (intro allI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y ys.\n       rev_path p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "fix xs x y ys l1 l2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y ys.\n       rev_path p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "assume \"rev_path p = xs @ (x,y) # (y,x) # ys\""], ["proof (state)\nthis:\n  rev_path p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<And>xs x y ys.\n       rev_path p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  rev_path p = xs @ (x, y) # (y, x) # ys", "have \"rev_path (rev_path p) = rev_path ys @ (x,y) # (y,x) # rev_path xs\""], ["proof (prove)\nusing this:\n  rev_path p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs", "by simp"], ["proof (state)\nthis:\n  rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs\n\ngoal (1 subgoal):\n 1. \\<And>xs x y ys.\n       rev_path p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs", "show False"], ["proof (prove)\nusing this:\n  rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs\n\ngoal (1 subgoal):\n 1. False", "using \\<open>?R\\<close>"], ["proof (prove)\nusing this:\n  rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs\n  progressing p\n\ngoal (1 subgoal):\n 1. False", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  rev_path (rev_path p) = rev_path ys @ (x, y) # (y, x) # rev_path xs\n  \\<forall>xs x y ys. p \\<noteq> xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  progressing (rev_path p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma progressing_append_iff:\n  shows \"progressing (xs @ ys) \\<longleftrightarrow> progressing xs \\<and> progressing ys\n      \\<and> (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow> (fst (last xs) \\<noteq> snd (hd ys) \\<or> snd (last xs) \\<noteq> fst (hd ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (xs @ ys) =\n    (progressing xs \\<and>\n     progressing ys \\<and>\n     (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n      fst (last xs) \\<noteq> snd (hd ys) \\<or>\n      snd (last xs) \\<noteq> fst (hd ys)))", "proof (induct ys arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       progressing (xs @ []) =\n       (progressing xs \\<and>\n        progressing [] \\<and>\n        (xs \\<noteq> [] \\<and> [] \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd []) \\<or>\n         snd (last xs) \\<noteq> fst (hd [])))\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       progressing (xs @ []) =\n       (progressing xs \\<and>\n        progressing [] \\<and>\n        (xs \\<noteq> [] \\<and> [] \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd []) \\<or>\n         snd (last xs) \\<noteq> fst (hd [])))\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (xs @ []) =\n    (progressing xs \\<and>\n     progressing [] \\<and>\n     (xs \\<noteq> [] \\<and> [] \\<noteq> [] \\<longrightarrow>\n      fst (last xs) \\<noteq> snd (hd []) \\<or>\n      snd (last xs) \\<noteq> fst (hd [])))", "by (auto simp: progressing_Nil)"], ["proof (state)\nthis:\n  progressing (xs @ []) =\n  (progressing xs \\<and>\n   progressing [] \\<and>\n   (xs \\<noteq> [] \\<and> [] \\<noteq> [] \\<longrightarrow>\n    fst (last xs) \\<noteq> snd (hd []) \\<or>\n    snd (last xs) \\<noteq> fst (hd [])))\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "case (Cons y' ys')"], ["proof (state)\nthis:\n  progressing (?xs @ ys') =\n  (progressing ?xs \\<and>\n   progressing ys' \\<and>\n   (?xs \\<noteq> [] \\<and> ys' \\<noteq> [] \\<longrightarrow>\n    fst (last ?xs) \\<noteq> snd (hd ys') \\<or>\n    snd (last ?xs) \\<noteq> fst (hd ys')))\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "let \"_ = ?R\" = ?case"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "have *: \"xs \\<noteq> [] \\<Longrightarrow> hd (rev_path xs) = prod.swap (last xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow> hd (rev_path xs) = prod.swap (last xs)", "by (induct xs) auto"], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<Longrightarrow> hd (rev_path xs) = prod.swap (last xs)\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "have \"progressing (xs @ y' # ys') \\<longleftrightarrow> progressing ((xs @ [y']) @ ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing (xs @ y' # ys') = progressing ((xs @ [y']) @ ys')", "by simp"], ["proof (state)\nthis:\n  progressing (xs @ y' # ys') = progressing ((xs @ [y']) @ ys')\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "also"], ["proof (state)\nthis:\n  progressing (xs @ y' # ys') = progressing ((xs @ [y']) @ ys')\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "have \"\\<dots> \\<longleftrightarrow> progressing (xs @ [y']) \\<and> progressing ys' \\<and> (ys' \\<noteq> [] \\<longrightarrow> (fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing ((xs @ [y']) @ ys') =\n    (progressing (xs @ [y']) \\<and>\n     progressing ys' \\<and>\n     (ys' \\<noteq> [] \\<longrightarrow>\n      fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys')))", "by (subst Cons) simp"], ["proof (state)\nthis:\n  progressing ((xs @ [y']) @ ys') =\n  (progressing (xs @ [y']) \\<and>\n   progressing ys' \\<and>\n   (ys' \\<noteq> [] \\<longrightarrow>\n    fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys')))\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "also"], ["proof (state)\nthis:\n  progressing ((xs @ [y']) @ ys') =\n  (progressing (xs @ [y']) \\<and>\n   progressing ys' \\<and>\n   (ys' \\<noteq> [] \\<longrightarrow>\n    fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys')))\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "have \"\\<dots> \\<longleftrightarrow> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (progressing (xs @ [y']) \\<and>\n     progressing ys' \\<and>\n     (ys' \\<noteq> [] \\<longrightarrow>\n      fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys'))) =\n    (progressing xs \\<and>\n     progressing (y' # ys') \\<and>\n     (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n      fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n      snd (last xs) \\<noteq> fst (hd (y' # ys'))))", "by (auto simp: progressing_Cons progressing_Nil progressing_rev_path[where p=\"xs @ _\",symmetric] * progressing_rev_path prod.swap_def)"], ["proof (state)\nthis:\n  (progressing (xs @ [y']) \\<and>\n   progressing ys' \\<and>\n   (ys' \\<noteq> [] \\<longrightarrow>\n    fst y' \\<noteq> snd (hd ys') \\<or> snd y' \\<noteq> fst (hd ys'))) =\n  (progressing xs \\<and>\n   progressing (y' # ys') \\<and>\n   (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n    fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n    snd (last xs) \\<noteq> fst (hd (y' # ys'))))\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           progressing (xs @ ys) =\n           (progressing xs \\<and>\n            progressing ys \\<and>\n            (xs \\<noteq> [] \\<and> ys \\<noteq> [] \\<longrightarrow>\n             fst (last xs) \\<noteq> snd (hd ys) \\<or>\n             snd (last xs) \\<noteq> fst (hd ys)))) \\<Longrightarrow>\n       progressing (xs @ a # ys) =\n       (progressing xs \\<and>\n        progressing (a # ys) \\<and>\n        (xs \\<noteq> [] \\<and> a # ys \\<noteq> [] \\<longrightarrow>\n         fst (last xs) \\<noteq> snd (hd (a # ys)) \\<or>\n         snd (last xs) \\<noteq> fst (hd (a # ys))))", "finally"], ["proof (chain)\npicking this:\n  progressing (xs @ y' # ys') =\n  (progressing xs \\<and>\n   progressing (y' # ys') \\<and>\n   (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n    fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n    snd (last xs) \\<noteq> fst (hd (y' # ys'))))", "show ?case"], ["proof (prove)\nusing this:\n  progressing (xs @ y' # ys') =\n  (progressing xs \\<and>\n   progressing (y' # ys') \\<and>\n   (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n    fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n    snd (last xs) \\<noteq> fst (hd (y' # ys'))))\n\ngoal (1 subgoal):\n 1. progressing (xs @ y' # ys') =\n    (progressing xs \\<and>\n     progressing (y' # ys') \\<and>\n     (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n      fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n      snd (last xs) \\<noteq> fst (hd (y' # ys'))))", "."], ["proof (state)\nthis:\n  progressing (xs @ y' # ys') =\n  (progressing xs \\<and>\n   progressing (y' # ys') \\<and>\n   (xs \\<noteq> [] \\<and> y' # ys' \\<noteq> [] \\<longrightarrow>\n    fst (last xs) \\<noteq> snd (hd (y' # ys')) \\<or>\n    snd (last xs) \\<noteq> fst (hd (y' # ys'))))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Walks with Restricted Vertices\\<close>"], ["", "definition verts3 :: \"('a, 'b) pre_digraph \\<Rightarrow> 'a set\" where\n  \"verts3 G \\<equiv> {v \\<in> verts G. 2 < in_degree G v}\""], ["", "text \\<open>A path were only the end nodes may be in @{term V}\\<close>"], ["", "definition (in pre_digraph) gen_iapath :: \"'a set \\<Rightarrow> 'a \\<Rightarrow> 'b awalk \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"gen_iapath V u p v \\<equiv> u \\<in> V \\<and> v \\<in> V \\<and> apath u p v \\<and> set (inner_verts p) \\<inter> V = {} \\<and> p \\<noteq> []\""], ["", "abbreviation (in pre_digraph) (input) iapath :: \"'a \\<Rightarrow> 'b awalk \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"iapath u p v \\<equiv> gen_iapath (verts3 G) u p v\""], ["", "definition gen_contr_graph :: \"('a,'b) pre_digraph \\<Rightarrow> 'a set \\<Rightarrow> 'a pair_pre_digraph\" where\n  \"gen_contr_graph G V \\<equiv> \\<lparr>\n     pverts = V,\n     parcs = {(u,v). \\<exists>p. pre_digraph.gen_iapath G V u p v}\n     \\<rparr>\""], ["", "abbreviation (input) contr_graph :: \"'a pair_pre_digraph \\<Rightarrow> 'a pair_pre_digraph\" where\n  \"contr_graph G \\<equiv> gen_contr_graph G (verts3 G)\""], ["", "subsection \\<open>Properties of subdivisions\\<close>"], ["", "lemma (in pair_sym_digraph) verts3_subdivide:\n  assumes \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows\"verts3 (subdivide G e w) = verts3 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "let ?sG = \"subdivide G e w\""], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "obtain u v where e_conv[simp]: \"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "from \\<open>w \\<notin> pverts G\\<close>"], ["proof (chain)\npicking this:\n  w \\<notin> pverts G", "have w_arcs: \"(u,w) \\<notin> parcs G\" \"(v,w) \\<notin> parcs G\" \"(w,u) \\<notin> parcs G\" \"(w,v) \\<notin> parcs G\""], ["proof (prove)\nusing this:\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. ((u, w) \\<notin> parcs G &&& (v, w) \\<notin> parcs G) &&&\n    (w, u) \\<notin> parcs G &&& (w, v) \\<notin> parcs G", "by (auto dest: wellformed)"], ["proof (state)\nthis:\n  (u, w) \\<notin> parcs G\n  (v, w) \\<notin> parcs G\n  (w, u) \\<notin> parcs G\n  (w, v) \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "have G_arcs: \"(u,v) \\<in> parcs G\" \"(v,u) \\<in> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G &&& (v, u) \\<in> parcs G", "using \\<open>e \\<in> parcs G\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G &&& (v, u) \\<in> parcs G", "by (auto simp: arcs_symmetric)"], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G\n  (v, u) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "have \"{v \\<in> pverts G. 2 < in_degree G v} = {v \\<in> pverts G. 2 < in_degree ?sG v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "assume \"x \\<in> pverts G\""], ["proof (state)\nthis:\n  x \\<in> pverts G\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "define card_eq where \"card_eq x \\<longleftrightarrow> in_degree ?sG x = in_degree G x\" for x"], ["proof (state)\nthis:\n  card_eq ?x =\n  (in_degree (with_proj (subdivide G e w)) ?x = in_degree (with_proj G) ?x)\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "have \"in_arcs ?sG u = (in_arcs G u - {(v,u)}) \\<union> {(w,u)}\"\n           \"in_arcs ?sG v = (in_arcs G v - {(u,v)}) \\<union> {(w,v)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) u =\n    in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)} &&&\n    in_arcs (with_proj (subdivide G e w)) v =\n    in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}", "using w_arcs G_arcs"], ["proof (prove)\nusing this:\n  (u, w) \\<notin> parcs G\n  (v, w) \\<notin> parcs G\n  (w, u) \\<notin> parcs G\n  (w, v) \\<notin> parcs G\n  (u, v) \\<in> parcs G\n  (v, u) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) u =\n    in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)} &&&\n    in_arcs (with_proj (subdivide G e w)) v =\n    in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}", "by auto"], ["proof (state)\nthis:\n  in_arcs (with_proj (subdivide G e w)) u =\n  in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)}\n  in_arcs (with_proj (subdivide G e w)) v =\n  in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj (subdivide G e w)) u =\n  in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)}\n  in_arcs (with_proj (subdivide G e w)) v =\n  in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}", "have \"card_eq u\" \"card_eq v\""], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) u =\n  in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)}\n  in_arcs (with_proj (subdivide G e w)) v =\n  in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}\n\ngoal (1 subgoal):\n 1. card_eq u &&& card_eq v", "unfolding card_eq_def in_degree_def"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) u =\n  in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)}\n  in_arcs (with_proj (subdivide G e w)) v =\n  in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}\n\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj (subdivide G e w)) u) =\n    card (in_arcs (with_proj G) u) &&&\n    card (in_arcs (with_proj (subdivide G e w)) v) =\n    card (in_arcs (with_proj G) v)", "using w_arcs G_arcs"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) u =\n  in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)}\n  in_arcs (with_proj (subdivide G e w)) v =\n  in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)}\n  (u, w) \\<notin> parcs G\n  (v, w) \\<notin> parcs G\n  (w, u) \\<notin> parcs G\n  (w, v) \\<notin> parcs G\n  (u, v) \\<in> parcs G\n  (v, u) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj (subdivide G e w)) u) =\n    card (in_arcs (with_proj G) u) &&&\n    card (in_arcs (with_proj (subdivide G e w)) v) =\n    card (in_arcs (with_proj G) v)", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>in_arcs (with_proj (subdivide G e w)) u =\n             in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)};\n     in_arcs (with_proj (subdivide G e w)) v =\n     in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)};\n     (u, w) \\<notin> parcs G; (v, w) \\<notin> parcs G;\n     (w, u) \\<notin> parcs G; (w, v) \\<notin> parcs G; (u, v) \\<in> parcs G;\n     (v, u) \\<in> parcs G\\<rbrakk>\n    \\<Longrightarrow> card (in_arcs (with_proj (subdivide G e w)) u) =\n                      card (in_arcs (with_proj G) u)\n 2. \\<lbrakk>in_arcs (with_proj (subdivide G e w)) u =\n             in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)};\n     in_arcs (with_proj (subdivide G e w)) v =\n     in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)};\n     (u, w) \\<notin> parcs G; (v, w) \\<notin> parcs G;\n     (w, u) \\<notin> parcs G; (w, v) \\<notin> parcs G; (u, v) \\<in> parcs G;\n     (v, u) \\<in> parcs G\\<rbrakk>\n    \\<Longrightarrow> card (in_arcs (with_proj (subdivide G e w)) v) =\n                      card (in_arcs (with_proj G) v)", "apply (cases \"finite (in_arcs G u)\"; simp add: card_Suc_Diff1 del: card_Diff_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>in_arcs (with_proj (subdivide G e w)) u =\n             in_arcs (with_proj G) u - {(v, u)} \\<union> {(w, u)};\n     in_arcs (with_proj (subdivide G e w)) v =\n     in_arcs (with_proj G) v - {(u, v)} \\<union> {(w, v)};\n     (u, w) \\<notin> parcs G; (v, w) \\<notin> parcs G;\n     (w, u) \\<notin> parcs G; (w, v) \\<notin> parcs G; (u, v) \\<in> parcs G;\n     (v, u) \\<in> parcs G\\<rbrakk>\n    \\<Longrightarrow> card (in_arcs (with_proj (subdivide G e w)) v) =\n                      card (in_arcs (with_proj G) v)", "apply (cases \"finite (in_arcs G v)\"; simp add: card_Suc_Diff1 del: card_Diff_insert)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  card_eq u\n  card_eq v\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "moreover"], ["proof (state)\nthis:\n  card_eq u\n  card_eq v\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "have \"x \\<notin> {u,v} \\<Longrightarrow> in_arcs ?sG x = in_arcs G x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> {u, v} \\<Longrightarrow>\n    in_arcs (with_proj (subdivide G e w)) x = in_arcs (with_proj G) x", "using \\<open>x \\<in> pverts G\\<close> \\<open>w \\<notin> pverts G\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> pverts G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. x \\<notin> {u, v} \\<Longrightarrow>\n    in_arcs (with_proj (subdivide G e w)) x = in_arcs (with_proj G) x", "by (auto simp: )"], ["proof (state)\nthis:\n  x \\<notin> {u, v} \\<Longrightarrow>\n  in_arcs (with_proj (subdivide G e w)) x = in_arcs (with_proj G) x\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "then"], ["proof (chain)\npicking this:\n  x \\<notin> {u, v} \\<Longrightarrow>\n  in_arcs (with_proj (subdivide G e w)) x = in_arcs (with_proj G) x", "have \"x \\<notin> {u,v} \\<Longrightarrow> card_eq x\""], ["proof (prove)\nusing this:\n  x \\<notin> {u, v} \\<Longrightarrow>\n  in_arcs (with_proj (subdivide G e w)) x = in_arcs (with_proj G) x\n\ngoal (1 subgoal):\n 1. x \\<notin> {u, v} \\<Longrightarrow> card_eq x", "by (simp add: in_degree_def card_eq_def)"], ["proof (state)\nthis:\n  x \\<notin> {u, v} \\<Longrightarrow> card_eq x\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "ultimately"], ["proof (chain)\npicking this:\n  card_eq u\n  card_eq v\n  x \\<notin> {u, v} \\<Longrightarrow> card_eq x", "have \"card_eq x\""], ["proof (prove)\nusing this:\n  card_eq u\n  card_eq v\n  x \\<notin> {u, v} \\<Longrightarrow> card_eq x\n\ngoal (1 subgoal):\n 1. card_eq x", "by fast"], ["proof (state)\nthis:\n  card_eq x\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "then"], ["proof (chain)\npicking this:\n  card_eq x", "have \"in_degree G x = in_degree ?sG x\""], ["proof (prove)\nusing this:\n  card_eq x\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) x = in_degree (with_proj (subdivide G e w)) x", "unfolding card_eq_def"], ["proof (prove)\nusing this:\n  in_degree (with_proj (subdivide G e w)) x = in_degree (with_proj G) x\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) x = in_degree (with_proj (subdivide G e w)) x", "by simp"], ["proof (state)\nthis:\n  in_degree (with_proj G) x = in_degree (with_proj (subdivide G e w)) x\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj G) ?x2 = in_degree (with_proj (subdivide G e w)) ?x2\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj G) ?x2 = in_degree (with_proj (subdivide G e w)) ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj G) ?x2 = in_degree (with_proj (subdivide G e w)) ?x2\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n    {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}", "by auto"], ["proof (state)\nthis:\n  {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n  {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n  {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "also"], ["proof (state)\nthis:\n  {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n  {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "have \"\\<dots> = {v\\<in>pverts ?sG. 2 < in_degree ?sG v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n    {v \\<in> pverts (subdivide G e w).\n     2 < in_degree (with_proj (subdivide G e w)) v}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n    {v \\<in> pverts (subdivide G e w).\n     2 < in_degree (with_proj (subdivide G e w)) v}", "have \"in_degree ?sG w \\<le> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) w \\<le> 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) w \\<le> 2", "have \"in_arcs ?sG w = {(u,w), (v,w)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}", "using \\<open>w \\<notin> pverts G\\<close> G_arcs(1)"], ["proof (prove)\nusing this:\n  w \\<notin> pverts G\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}", "by (auto simp: wellformed')"], ["proof (state)\nthis:\n  in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) w \\<le> 2", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}", "show ?thesis"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) w \\<le> 2", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj (subdivide G e w)) w) \\<le> 2", "by (auto simp: card_insert_if)"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) w \\<le> 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) w \\<le> 2\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n    {v \\<in> pverts (subdivide G e w).\n     2 < in_degree (with_proj (subdivide G e w)) v}", "then"], ["proof (chain)\npicking this:\n  in_degree (with_proj (subdivide G e w)) w \\<le> 2", "show ?thesis"], ["proof (prove)\nusing this:\n  in_degree (with_proj (subdivide G e w)) w \\<le> 2\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n    {v \\<in> pverts (subdivide G e w).\n     2 < in_degree (with_proj (subdivide G e w)) v}", "using G_arcs assms"], ["proof (prove)\nusing this:\n  in_degree (with_proj (subdivide G e w)) w \\<le> 2\n  (u, v) \\<in> parcs G\n  (v, u) \\<in> parcs G\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n    {v \\<in> pverts (subdivide G e w).\n     2 < in_degree (with_proj (subdivide G e w)) v}", "by auto"], ["proof (state)\nthis:\n  {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n  {v \\<in> pverts (subdivide G e w).\n   2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {v \\<in> pverts G. 2 < in_degree (with_proj (subdivide G e w)) v} =\n  {v \\<in> pverts (subdivide G e w).\n   2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "finally"], ["proof (chain)\npicking this:\n  {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n  {v \\<in> pverts (subdivide G e w).\n   2 < in_degree (with_proj (subdivide G e w)) v}", "show ?thesis"], ["proof (prove)\nusing this:\n  {v \\<in> pverts G. 2 < in_degree (with_proj G) v} =\n  {v \\<in> pverts (subdivide G e w).\n   2 < in_degree (with_proj (subdivide G e w)) v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)", "by (simp add: verts3_def)"], ["proof (state)\nthis:\n  verts3 (with_proj (subdivide G e w)) = verts3 (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sd_path_Nil_iff:\n  \"sd_path e w p = [] \\<longleftrightarrow> p = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sd_path e w p = []) = (p = [])", "by (cases \"(e,w,p)\" rule: sd_path.cases) auto"], ["", "lemma (in pair_sym_digraph) gen_iapath_sd_path:\n  fixes e :: \"'a \\<times> 'a\" and w :: 'a\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  assumes path: \"gen_iapath V u p v\"\n  shows \"pre_digraph.gen_iapath (subdivide G e w) V u (sd_path e w p) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj (subdivide G e w)) V u (sd_path e w p)\n     v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj (subdivide G e w)) V u (sd_path e w p)\n     v", "obtain x y where e_conv: \"e = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. e = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (x, y)\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj (subdivide G e w)) V u (sd_path e w p)\n     v", "interpret S: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using elems"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (auto intro: pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "from path"], ["proof (chain)\npicking this:\n  gen_iapath V u p v", "have \"apath u p v\""], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. apath u p v", "by (auto simp: gen_iapath_def)"], ["proof (state)\nthis:\n  apath u p v\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "then"], ["proof (chain)\npicking this:\n  apath u p v", "have apath_sd: \"S.apath u (sd_path e w p) v\" and\n    set_ev_sd: \"set (S.awalk_verts u (sd_path e w p)) \\<subseteq> set (awalk_verts u p) \\<union> {w}\""], ["proof (prove)\nusing this:\n  apath u p v\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path e w p) v &&&\n    set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "using elems"], ["proof (prove)\nusing this:\n  apath u p v\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path e w p) v &&&\n    set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "by (rule apath_sd_path set_awalk_verts_sd_path)+"], ["proof (state)\nthis:\n  S.apath u (sd_path e w p) v\n  set (pawalk_verts u (sd_path e w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "have \"w \\<notin> {u,v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> {u, v}", "using elems \\<open>apath u p v\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  apath u p v\n\ngoal (1 subgoal):\n 1. w \\<notin> {u, v}", "by (auto simp: apath_def awalk_hd_in_verts awalk_last_in_verts)"], ["proof (state)\nthis:\n  w \\<notin> {u, v}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "have \"set (S.inner_verts (sd_path e w p)) = set (S.awalk_verts u (sd_path e w p)) - {u,v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (S.inner_verts (sd_path e w p)) =\n    set (pawalk_verts u (sd_path e w p)) - {u, v}", "using apath_sd"], ["proof (prove)\nusing this:\n  S.apath u (sd_path e w p) v\n\ngoal (1 subgoal):\n 1. set (S.inner_verts (sd_path e w p)) =\n    set (pawalk_verts u (sd_path e w p)) - {u, v}", "by (rule S.set_inner_verts)"], ["proof (state)\nthis:\n  set (S.inner_verts (sd_path e w p)) =\n  set (pawalk_verts u (sd_path e w p)) - {u, v}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "also"], ["proof (state)\nthis:\n  set (S.inner_verts (sd_path e w p)) =\n  set (pawalk_verts u (sd_path e w p)) - {u, v}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "have \"\\<dots> \\<subseteq> set (awalk_verts u p) \\<union> {w} - {u,v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path e w p)) - {u, v}\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w} - {u, v}", "using set_ev_sd"], ["proof (prove)\nusing this:\n  set (pawalk_verts u (sd_path e w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path e w p)) - {u, v}\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w} - {u, v}", "by auto"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path e w p)) - {u, v}\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w} - {u, v}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "also"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path e w p)) - {u, v}\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w} - {u, v}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "have \"\\<dots> = set (inner_verts p) \\<union> {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) \\<union> {w} - {u, v} =\n    set (inner_verts p) \\<union> {w}", "using set_inner_verts[OF \\<open>apath u p v\\<close>] \\<open>w \\<notin> {u,v}\\<close>"], ["proof (prove)\nusing this:\n  set (inner_verts p) = set (pawalk_verts u p) - {u, v}\n  w \\<notin> {u, v}\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) \\<union> {w} - {u, v} =\n    set (inner_verts p) \\<union> {w}", "by blast"], ["proof (state)\nthis:\n  set (pawalk_verts u p) \\<union> {w} - {u, v} =\n  set (inner_verts p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "finally"], ["proof (chain)\npicking this:\n  set (S.inner_verts (sd_path e w p))\n  \\<subseteq> set (inner_verts p) \\<union> {w}", "have \"set (S.inner_verts (sd_path e w p)) \\<inter> V \\<subseteq> (set (inner_verts p) \\<union> {w}) \\<inter> V\""], ["proof (prove)\nusing this:\n  set (S.inner_verts (sd_path e w p))\n  \\<subseteq> set (inner_verts p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. set (S.inner_verts (sd_path e w p)) \\<inter> V\n    \\<subseteq> (set (inner_verts p) \\<union> {w}) \\<inter> V", "using V"], ["proof (prove)\nusing this:\n  set (S.inner_verts (sd_path e w p))\n  \\<subseteq> set (inner_verts p) \\<union> {w}\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. set (S.inner_verts (sd_path e w p)) \\<inter> V\n    \\<subseteq> (set (inner_verts p) \\<union> {w}) \\<inter> V", "by blast"], ["proof (state)\nthis:\n  set (S.inner_verts (sd_path e w p)) \\<inter> V\n  \\<subseteq> (set (inner_verts p) \\<union> {w}) \\<inter> V\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "also"], ["proof (state)\nthis:\n  set (S.inner_verts (sd_path e w p)) \\<inter> V\n  \\<subseteq> (set (inner_verts p) \\<union> {w}) \\<inter> V\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "have \"\\<dots> \\<subseteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set (inner_verts p) \\<union> {w}) \\<inter> V \\<subseteq> {}", "using path elems V"], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. (set (inner_verts p) \\<union> {w}) \\<inter> V \\<subseteq> {}", "unfolding gen_iapath_def"], ["proof (prove)\nusing this:\n  u \\<in> V \\<and>\n  v \\<in> V \\<and>\n  apath u p v \\<and>\n  set (inner_verts p) \\<inter> V = {} \\<and> p \\<noteq> []\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. (set (inner_verts p) \\<union> {w}) \\<inter> V \\<subseteq> {}", "by auto"], ["proof (state)\nthis:\n  (set (inner_verts p) \\<union> {w}) \\<inter> V \\<subseteq> {}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "finally"], ["proof (chain)\npicking this:\n  set (S.inner_verts (sd_path e w p)) \\<inter> V \\<subseteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (S.inner_verts (sd_path e w p)) \\<inter> V \\<subseteq> {}\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "using apath_sd elems path"], ["proof (prove)\nusing this:\n  set (S.inner_verts (sd_path e w p)) \\<inter> V \\<subseteq> {}\n  S.apath u (sd_path e w p) v\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. S.gen_iapath V u (sd_path e w p) v", "by (auto simp: gen_iapath_def S.gen_iapath_def sd_path_Nil_iff)"], ["proof (state)\nthis:\n  S.gen_iapath V u (sd_path e w p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_sym_digraph)\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  assumes path: \"pre_digraph.gen_iapath (subdivide G e w) V u p v\"\n  shows gen_iapath_co_path: \"gen_iapath V u (co_path e w p) v\" (is ?thesis_path)\n    and set_awalk_verts_co_path': \"set (awalk_verts u (co_path e w p)) = set (awalk_verts u p) - {w}\" (is ?thesis_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v &&&\n    set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. gen_iapath V u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "interpret S: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using elems"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (2 subgoals):\n 1. gen_iapath V u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "have uv: \"u \\<in> pverts G\" \"v \\<in> pverts G\" \"S.apath u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> pverts G &&& v \\<in> pverts G &&& S.apath u p v", "using V path"], ["proof (prove)\nusing this:\n  V \\<subseteq> pverts G\n  S.gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. u \\<in> pverts G &&& v \\<in> pverts G &&& S.apath u p v", "by (auto simp: S.gen_iapath_def)"], ["proof (state)\nthis:\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u p v\n\ngoal (2 subgoals):\n 1. gen_iapath V u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "note co = apath_co_path[OF elems uv] set_awalk_verts_co_path[OF elems uv]"], ["proof (state)\nthis:\n  apath u (co_path e w p) v\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n\ngoal (2 subgoals):\n 1. gen_iapath V u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "show ?thesis_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "by (fact co)"], ["proof (state)\nthis:\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v", "show ?thesis_path"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v", "using co path"], ["proof (prove)\nusing this:\n  apath u (co_path e w p) v\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n  S.gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v", "unfolding gen_iapath_def S.gen_iapath_def"], ["proof (prove)\nusing this:\n  apath u (co_path e w p) v\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n  u \\<in> V \\<and>\n  v \\<in> V \\<and>\n  S.apath u p v \\<and>\n  set (S.inner_verts p) \\<inter> V = {} \\<and> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. u \\<in> V \\<and>\n    v \\<in> V \\<and>\n    apath u (co_path e w p) v \\<and>\n    set (inner_verts (co_path e w p)) \\<inter> V = {} \\<and>\n    co_path e w p \\<noteq> []", "using elems"], ["proof (prove)\nusing this:\n  apath u (co_path e w p) v\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n  u \\<in> V \\<and>\n  v \\<in> V \\<and>\n  S.apath u p v \\<and>\n  set (S.inner_verts p) \\<inter> V = {} \\<and> p \\<noteq> []\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. u \\<in> V \\<and>\n    v \\<in> V \\<and>\n    apath u (co_path e w p) v \\<and>\n    set (inner_verts (co_path e w p)) \\<inter> V = {} \\<and>\n    co_path e w p \\<noteq> []", "by (clarsimp simp add: set_inner_verts[of u] S.set_inner_verts[of u]) blast"], ["proof (state)\nthis:\n  gen_iapath V u (co_path e w p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Pair Graphs\\<close>"], ["", "context pair_sym_digraph begin"], ["", "lemma gen_iapath_rev_path:\n  \"gen_iapath V v (rev_path p) u = gen_iapath V u p v\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "fix u p v"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "assume \"gen_iapath V u p v\""], ["proof (state)\nthis:\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "then"], ["proof (chain)\npicking this:\n  gen_iapath V u p v", "have \"butlast (tl (awalk_verts v (rev_path p))) = rev (butlast (tl (awalk_verts u p)))\""], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. butlast (tl (pawalk_verts v (rev_path p))) =\n    rev (butlast (tl (pawalk_verts u p)))", "by (auto simp: tl_rev butlast_rev butlast_tl awalk_verts_rev_path gen_iapath_def apath_def)"], ["proof (state)\nthis:\n  butlast (tl (pawalk_verts v (rev_path p))) =\n  rev (butlast (tl (pawalk_verts u p)))\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "with \\<open>gen_iapath V u p v\\<close>"], ["proof (chain)\npicking this:\n  gen_iapath V u p v\n  butlast (tl (pawalk_verts v (rev_path p))) =\n  rev (butlast (tl (pawalk_verts u p)))", "have \"gen_iapath V v (rev_path p) u\""], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n  butlast (tl (pawalk_verts v (rev_path p))) =\n  rev (butlast (tl (pawalk_verts u p)))\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u", "by (auto simp: gen_iapath_def apath_def inner_verts_conv[symmetric] awalk_verts_rev_path)"], ["proof (state)\nthis:\n  gen_iapath V v (rev_path p) u\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "}"], ["proof (state)\nthis:\n  gen_iapath V ?ua2 ?pa2 ?va2 \\<Longrightarrow>\n  gen_iapath V ?va2 (rev_path ?pa2) ?ua2\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "note RL = this"], ["proof (state)\nthis:\n  gen_iapath V ?ua2 ?pa2 ?va2 \\<Longrightarrow>\n  gen_iapath V ?va2 (rev_path ?pa2) ?ua2\n\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath V v (rev_path p) u = gen_iapath V u p v", "by (auto dest: RL intro: RL)"], ["proof (state)\nthis:\n  gen_iapath V v (rev_path p) u = gen_iapath V u p v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_verts_rev_path:\n  assumes \"awalk u p v\"\n  shows \"inner_verts (rev_path p) = rev (inner_verts p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inner_verts (rev_path p) = rev (inner_verts p)", "by (metis assms butlast_rev butlast_tl awalk_verts_rev_path inner_verts_conv tl_rev)"], ["", "end"], ["", "context pair_pseudo_graph begin"], ["", "lemma apath_imp_progressing:\n  assumes \"apath u p v\" shows \"progressing p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> progressing p \\<Longrightarrow> False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  \\<not> progressing p\n\ngoal (1 subgoal):\n 1. \\<not> progressing p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> progressing p", "obtain xs x y ys where *: \"p = xs @ (x,y) # (y,x) # ys\""], ["proof (prove)\nusing this:\n  \\<not> progressing p\n\ngoal (1 subgoal):\n 1. (\\<And>xs x y ys.\n        p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding progressing_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>xs x y ys. p \\<noteq> xs @ (x, y) # (y, x) # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>xs x y ys.\n        p = xs @ (x, y) # (y, x) # ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<not> progressing p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p = xs @ (x, y) # (y, x) # ys", "have \"\\<not>apath u p v\""], ["proof (prove)\nusing this:\n  p = xs @ (x, y) # (y, x) # ys\n\ngoal (1 subgoal):\n 1. \\<not> apath u p v", "by (simp add: apath_append_iff apath_simps hd_in_awalk_verts)"], ["proof (state)\nthis:\n  \\<not> apath u p v\n\ngoal (1 subgoal):\n 1. \\<not> progressing p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> apath u p v", "show False"], ["proof (prove)\nusing this:\n  \\<not> apath u p v\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<not> apath u p v\n  apath u p v\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_Cons_deg2_unique:\n  assumes \"awalk u p v\" \"p \\<noteq> []\"\n  assumes \"in_degree G u \\<le> 2\"\n  assumes \"awalk u1 (e1 # p) v\" \"awalk u2 (e2 # p) v\"\n  assumes \"progressing (e1 # p)\" \"progressing (e2 # p)\"\n  shows \"e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof (cases p)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> e1 = e2\n 2. \\<And>a list. p = a # list \\<Longrightarrow> e1 = e2", "case (Cons e es)"], ["proof (state)\nthis:\n  p = e # es\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> e1 = e2\n 2. \\<And>a list. p = a # list \\<Longrightarrow> e1 = e2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "assume \"e1 \\<noteq> e2\""], ["proof (state)\nthis:\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "define x where \"x = snd e\""], ["proof (state)\nthis:\n  x = snd e\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x = snd e", "have e_unf:\"e = (u,x)\""], ["proof (prove)\nusing this:\n  x = snd e\n\ngoal (1 subgoal):\n 1. e = (u, x)", "using \\<open>awalk u p v\\<close> Cons"], ["proof (prove)\nusing this:\n  x = snd e\n  awalk u p v\n  p = e # es\n\ngoal (1 subgoal):\n 1. e = (u, x)", "by (auto simp: awalk_simps)"], ["proof (state)\nthis:\n  e = (u, x)\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e = (u, x)", "have ei_unf: \"e1 = (u1, u)\" \"e2 = (u2, u)\""], ["proof (prove)\nusing this:\n  e = (u, x)\n\ngoal (1 subgoal):\n 1. e1 = (u1, u) &&& e2 = (u2, u)", "using Cons assms"], ["proof (prove)\nusing this:\n  e = (u, x)\n  p = e # es\n  awalk u p v\n  p \\<noteq> []\n  in_degree (with_proj G) u \\<le> 2\n  awalk u1 (e1 # p) v\n  awalk u2 (e2 # p) v\n  progressing (e1 # p)\n  progressing (e2 # p)\n\ngoal (1 subgoal):\n 1. e1 = (u1, u) &&& e2 = (u2, u)", "by (auto simp: apath_simps prod_eqI)"], ["proof (state)\nthis:\n  e1 = (u1, u)\n  e2 = (u2, u)\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "with Cons assms \\<open>e = (u,x)\\<close> \\<open>e1 \\<noteq> e2\\<close>"], ["proof (chain)\npicking this:\n  p = e # es\n  awalk u p v\n  p \\<noteq> []\n  in_degree (with_proj G) u \\<le> 2\n  awalk u1 (e1 # p) v\n  awalk u2 (e2 # p) v\n  progressing (e1 # p)\n  progressing (e2 # p)\n  e = (u, x)\n  e1 \\<noteq> e2\n  e1 = (u1, u)\n  e2 = (u2, u)", "have \"u1 \\<noteq> u2\" \"x \\<noteq> u1\" \"x \\<noteq> u2\""], ["proof (prove)\nusing this:\n  p = e # es\n  awalk u p v\n  p \\<noteq> []\n  in_degree (with_proj G) u \\<le> 2\n  awalk u1 (e1 # p) v\n  awalk u2 (e2 # p) v\n  progressing (e1 # p)\n  progressing (e2 # p)\n  e = (u, x)\n  e1 \\<noteq> e2\n  e1 = (u1, u)\n  e2 = (u2, u)\n\ngoal (1 subgoal):\n 1. u1 \\<noteq> u2 &&& x \\<noteq> u1 &&& x \\<noteq> u2", "by (auto simp: progressing_Cons_Cons)"], ["proof (state)\nthis:\n  u1 \\<noteq> u2\n  x \\<noteq> u1\n  x \\<noteq> u2\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  u1 \\<noteq> u2\n  x \\<noteq> u1\n  x \\<noteq> u2\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "have \"{(u1, u), (u2, u), (x,u)} \\<subseteq> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u1, u), (u2, u), (x, u)} \\<subseteq> parcs G", "using e_unf ei_unf Cons assms"], ["proof (prove)\nusing this:\n  e = (u, x)\n  e1 = (u1, u)\n  e2 = (u2, u)\n  p = e # es\n  awalk u p v\n  p \\<noteq> []\n  in_degree (with_proj G) u \\<le> 2\n  awalk u1 (e1 # p) v\n  awalk u2 (e2 # p) v\n  progressing (e1 # p)\n  progressing (e2 # p)\n\ngoal (1 subgoal):\n 1. {(u1, u), (u2, u), (x, u)} \\<subseteq> parcs G", "by (auto simp: awalk_simps intro: arcs_symmetric)"], ["proof (state)\nthis:\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> parcs G\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> parcs G", "have \"finite (in_arcs G u)\"\n      and \"{(u1, u), (u2, u), (x,u)} \\<subseteq> in_arcs G u\""], ["proof (prove)\nusing this:\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> parcs G\n\ngoal (1 subgoal):\n 1. finite (in_arcs (with_proj G) u) &&&\n    {(u1, u), (u2, u), (x, u)} \\<subseteq> in_arcs (with_proj G) u", "by auto"], ["proof (state)\nthis:\n  finite (in_arcs (with_proj G) u)\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> in_arcs (with_proj G) u\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  finite (in_arcs (with_proj G) u)\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> in_arcs (with_proj G) u", "have \"card ({(u1, u), (u2, u), (x,u)}) \\<le> in_degree G u\""], ["proof (prove)\nusing this:\n  finite (in_arcs (with_proj G) u)\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> in_arcs (with_proj G) u\n\ngoal (1 subgoal):\n 1. card {(u1, u), (u2, u), (x, u)} \\<le> in_degree (with_proj G) u", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  finite (in_arcs (with_proj G) u)\n  {(u1, u), (u2, u), (x, u)} \\<subseteq> in_arcs (with_proj G) u\n\ngoal (1 subgoal):\n 1. card {(u1, u), (u2, u), (x, u)} \\<le> card (in_arcs (with_proj G) u)", "by (rule card_mono)"], ["proof (state)\nthis:\n  card {(u1, u), (u2, u), (x, u)} \\<le> in_degree (with_proj G) u\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  u1 \\<noteq> u2\n  x \\<noteq> u1\n  x \\<noteq> u2\n  card {(u1, u), (u2, u), (x, u)} \\<le> in_degree (with_proj G) u", "show \"False\""], ["proof (prove)\nusing this:\n  u1 \\<noteq> u2\n  x \\<noteq> u1\n  x \\<noteq> u2\n  card {(u1, u), (u2, u), (x, u)} \\<le> in_degree (with_proj G) u\n\ngoal (1 subgoal):\n 1. False", "using \\<open>in_degree G u \\<le> 2\\<close>"], ["proof (prove)\nusing this:\n  u1 \\<noteq> u2\n  x \\<noteq> u1\n  x \\<noteq> u2\n  card {(u1, u), (u2, u), (x, u)} \\<le> in_degree (with_proj G) u\n  in_degree (with_proj G) u \\<le> 2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow> e1 = e2", "qed (simp add: \\<open>p \\<noteq> []\\<close>)"], ["", "lemma same_awalk_by_same_end:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n    and walk: \"awalk u p v\" \"awalk u q w\" \"hd p = hd q\" \"p \\<noteq> []\" \"q \\<noteq> []\"\n    and progress: \"progressing p\" \"progressing q\"\n    and tail: \"v \\<in> V\" \"w \\<in> V\"\n    and inner_verts: \"set (inner_verts p) \\<inter> V = {}\"\n      \"set (inner_verts q) \\<inter> V = {}\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "using walk progress inner_verts"], ["proof (prove)\nusing this:\n  awalk u p v\n  awalk u q w\n  hd p = hd q\n  p \\<noteq> []\n  q \\<noteq> []\n  progressing p\n  progressing q\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p = q", "proof (induct p q arbitrary: u rule: list_induct2'[case_names Nil_Nil Cons_Nil Nil_Cons Cons_Cons])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "case (Cons_Cons a as b bs)"], ["proof (state)\nthis:\n  \\<lbrakk>awalk ?u as v; awalk ?u bs w; hd as = hd bs; as \\<noteq> [];\n   bs \\<noteq> []; progressing as; progressing bs;\n   set (inner_verts as) \\<inter> V = {};\n   set (inner_verts bs) \\<inter> V = {}\\<rbrakk>\n  \\<Longrightarrow> as = bs\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  hd (a # as) = hd (b # bs)\n  a # as \\<noteq> []\n  b # bs \\<noteq> []\n  progressing (a # as)\n  progressing (b # bs)\n  set (inner_verts (a # as)) \\<inter> V = {}\n  set (inner_verts (b # bs)) \\<inter> V = {}\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "from \\<open>hd (a # _) = hd _\\<close>"], ["proof (chain)\npicking this:\n  hd (a # as) = hd (b # bs)", "have \"a = b\""], ["proof (prove)\nusing this:\n  hd (a # as) = hd (b # bs)\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "{"], ["proof (state)\nthis:\n  a = b\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "fix a as v b bs w"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "assume A: \"awalk u (a # as) v\" \"awalk u (b # bs) w\"\n        \"set (inner_verts (b # bs)) \\<inter> V = {}\" \"v \\<in> V\" \"a = b\" \"as = []\""], ["proof (state)\nthis:\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  v \\<in> V\n  a = b\n  as = []\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "then"], ["proof (chain)\npicking this:\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  v \\<in> V\n  a = b\n  as = []", "have \"bs = []\""], ["proof (prove)\nusing this:\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  v \\<in> V\n  a = b\n  as = []\n\ngoal (1 subgoal):\n 1. bs = []", "by - (rule ccontr, auto simp: inner_verts_Cons awalk_simps)"], ["proof (state)\nthis:\n  bs = []\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "}"], ["proof (state)\nthis:\n  \\<lbrakk>awalk u (?aa2 # ?asa2) ?va2; awalk u (?ba2 # ?bsa2) ?wa2;\n   set (inner_verts (?ba2 # ?bsa2)) \\<inter> V = {}; ?va2 \\<in> V;\n   ?aa2 = ?ba2; ?asa2 = []\\<rbrakk>\n  \\<Longrightarrow> ?bsa2 = []\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "note Nil_imp_Nil = this"], ["proof (state)\nthis:\n  \\<lbrakk>awalk u (?aa2 # ?asa2) ?va2; awalk u (?ba2 # ?bsa2) ?wa2;\n   set (inner_verts (?ba2 # ?bsa2)) \\<inter> V = {}; ?va2 \\<in> V;\n   ?aa2 = ?ba2; ?asa2 = []\\<rbrakk>\n  \\<Longrightarrow> ?bsa2 = []\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys\n 4. \\<And>x xs y ys u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>awalk u xs v; awalk u ys w; hd xs = hd ys;\n                    xs \\<noteq> []; ys \\<noteq> []; progressing xs;\n                    progressing ys; set (inner_verts xs) \\<inter> V = {};\n                    set (inner_verts ys) \\<inter> V = {}\\<rbrakk>\n                   \\<Longrightarrow> xs = ys;\n        awalk u (x # xs) v; awalk u (y # ys) w; hd (x # xs) = hd (y # ys);\n        x # xs \\<noteq> []; y # ys \\<noteq> []; progressing (x # xs);\n        progressing (y # ys); set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = y # ys", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a # as = b # bs", "proof (cases \"as = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> a # as = b # bs\n 2. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "case True"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> a # as = b # bs\n 2. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "then"], ["proof (chain)\npicking this:\n  as = []", "have \"bs = []\""], ["proof (prove)\nusing this:\n  as = []\n\ngoal (1 subgoal):\n 1. bs = []", "using Cons_Cons.prems \\<open>a = b\\<close> tail"], ["proof (prove)\nusing this:\n  as = []\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  hd (a # as) = hd (b # bs)\n  a # as \\<noteq> []\n  b # bs \\<noteq> []\n  progressing (a # as)\n  progressing (b # bs)\n  set (inner_verts (a # as)) \\<inter> V = {}\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  a = b\n  v \\<in> V\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. bs = []", "by (metis Nil_imp_Nil)"], ["proof (state)\nthis:\n  bs = []\n\ngoal (2 subgoals):\n 1. as = [] \\<Longrightarrow> a # as = b # bs\n 2. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "then"], ["proof (chain)\npicking this:\n  bs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  bs = []\n\ngoal (1 subgoal):\n 1. a # as = b # bs", "using True \\<open>a = b\\<close>"], ["proof (prove)\nusing this:\n  bs = []\n  as = []\n  a = b\n\ngoal (1 subgoal):\n 1. a # as = b # bs", "by simp"], ["proof (state)\nthis:\n  a # as = b # bs\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "case False"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "then"], ["proof (chain)\npicking this:\n  as \\<noteq> []", "have \"bs \\<noteq> []\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. bs \\<noteq> []", "using Cons_Cons.prems \\<open>a = b\\<close> tail"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  hd (a # as) = hd (b # bs)\n  a # as \\<noteq> []\n  b # bs \\<noteq> []\n  progressing (a # as)\n  progressing (b # bs)\n  set (inner_verts (a # as)) \\<inter> V = {}\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  a = b\n  v \\<in> V\n  w \\<in> V\n\ngoal (1 subgoal):\n 1. bs \\<noteq> []", "by (metis Nil_imp_Nil)"], ["proof (state)\nthis:\n  bs \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "obtain a' as' where \"as = a' # as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a' as'. as = a' # as' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>as \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'. as = a' # as' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases as) simp"], ["proof (state)\nthis:\n  as = a' # as'\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "obtain b' bs' where \"bs = b' # bs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b' bs'. bs = b' # bs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>bs \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  bs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>b' bs'. bs = b' # bs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases bs) simp"], ["proof (state)\nthis:\n  bs = b' # bs'\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "let ?arcs = \"{(fst a, snd a), (snd a', snd a), (snd b', snd a)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "have \"card {fst a, snd a', snd b'} = card (fst ` ?arcs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {fst a, snd a', snd b'} =\n    card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)})", "by auto"], ["proof (state)\nthis:\n  card {fst a, snd a', snd b'} =\n  card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)})\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "also"], ["proof (state)\nthis:\n  card {fst a, snd a', snd b'} =\n  card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)})\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "have \"\\<dots> = card ?arcs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)}) =\n    card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}", "by (rule card_image) (cases a, auto)"], ["proof (state)\nthis:\n  card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)}) =\n  card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "also"], ["proof (state)\nthis:\n  card (fst ` {(fst a, snd a), (snd a', snd a), (snd b', snd a)}) =\n  card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "have \"\\<dots> \\<le> in_degree G (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<le> in_degree (with_proj G) (snd a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<le> in_degree (with_proj G) (snd a)", "have \"?arcs \\<subseteq> in_arcs G (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<subseteq> in_arcs (with_proj G) (snd a)", "using \\<open>progressing (a # as)\\<close> \\<open>progressing (b # bs)\\<close> \\<open>awalk _ (a # as) _\\<close> \\<open>awalk _ (b # bs) _\\<close>"], ["proof (prove)\nusing this:\n  progressing (a # as)\n  progressing (b # bs)\n  awalk u (a # as) v\n  awalk u (b # bs) w\n\ngoal (1 subgoal):\n 1. {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<subseteq> in_arcs (with_proj G) (snd a)", "unfolding \\<open>a = b\\<close> \\<open>as = _\\<close> \\<open>bs = _\\<close>"], ["proof (prove)\nusing this:\n  progressing (b # a' # as')\n  progressing (b # b' # bs')\n  awalk u (b # a' # as') v\n  awalk u (b # b' # bs') w\n\ngoal (1 subgoal):\n 1. {(fst b, snd b), (snd a', snd b), (snd b', snd b)}\n    \\<subseteq> in_arcs (with_proj G) (snd b)", "by (cases b; cases a') (auto simp: progressing_Cons_Cons awalk_simps intro: arcs_symmetric)"], ["proof (state)\nthis:\n  {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<subseteq> in_arcs (with_proj G) (snd a)\n\ngoal (1 subgoal):\n 1. card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<le> in_degree (with_proj G) (snd a)", "with _"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<subseteq> in_arcs (with_proj G) (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<subseteq> in_arcs (with_proj G) (snd a)\n\ngoal (1 subgoal):\n 1. card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<le> in_degree (with_proj G) (snd a)", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<subseteq> in_arcs (with_proj G) (snd a)\n\ngoal (1 subgoal):\n 1. card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n    \\<le> card (in_arcs (with_proj G) (snd a))", "by (rule card_mono) auto"], ["proof (state)\nthis:\n  card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<le> in_degree (with_proj G) (snd a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<le> in_degree (with_proj G) (snd a)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "also"], ["proof (state)\nthis:\n  card {(fst a, snd a), (snd a', snd a), (snd b', snd a)}\n  \\<le> in_degree (with_proj G) (snd a)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "have \"\\<dots> \\<le> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj G) (snd a) \\<le> 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj G) (snd a) \\<le> 2", "have \"snd a \\<notin> V\" \"snd a \\<in> pverts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd a \\<notin> V &&& snd a \\<in> pverts G", "using Cons_Cons.prems \\<open>as \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  hd (a # as) = hd (b # bs)\n  a # as \\<noteq> []\n  b # bs \\<noteq> []\n  progressing (a # as)\n  progressing (b # bs)\n  set (inner_verts (a # as)) \\<inter> V = {}\n  set (inner_verts (b # bs)) \\<inter> V = {}\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. snd a \\<notin> V &&& snd a \\<in> pverts G", "by (auto simp: inner_verts_Cons)"], ["proof (state)\nthis:\n  snd a \\<notin> V\n  snd a \\<in> pverts G\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) (snd a) \\<le> 2", "then"], ["proof (chain)\npicking this:\n  snd a \\<notin> V\n  snd a \\<in> pverts G", "show ?thesis"], ["proof (prove)\nusing this:\n  snd a \\<notin> V\n  snd a \\<in> pverts G\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) (snd a) \\<le> 2", "using V"], ["proof (prove)\nusing this:\n  snd a \\<notin> V\n  snd a \\<in> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) (snd a) \\<le> 2", "by (auto simp: verts3_def)"], ["proof (state)\nthis:\n  in_degree (with_proj G) (snd a) \\<le> 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_degree (with_proj G) (snd a) \\<le> 2\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "finally"], ["proof (chain)\npicking this:\n  card {fst a, snd a', snd b'} \\<le> 2", "have \"fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'\""], ["proof (prove)\nusing this:\n  card {fst a, snd a', snd b'} \\<le> 2\n\ngoal (1 subgoal):\n 1. fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'", "by (auto simp: card_insert_if split: if_splits)"], ["proof (state)\nthis:\n  fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "then"], ["proof (chain)\npicking this:\n  fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'", "have \"hd as = hd bs\""], ["proof (prove)\nusing this:\n  fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'\n\ngoal (1 subgoal):\n 1. hd as = hd bs", "using \\<open>progressing (a # as)\\<close> \\<open>progressing (b # bs)\\<close> \\<open>awalk _ (a # as) _\\<close> \\<open>awalk _ (b # bs) _\\<close>"], ["proof (prove)\nusing this:\n  fst a = snd a' \\<or> fst a = snd b' \\<or> snd a' = snd b'\n  progressing (a # as)\n  progressing (b # bs)\n  awalk u (a # as) v\n  awalk u (b # bs) w\n\ngoal (1 subgoal):\n 1. hd as = hd bs", "unfolding \\<open>a = b\\<close> \\<open>as = _\\<close> \\<open>bs = _\\<close>"], ["proof (prove)\nusing this:\n  fst b = snd a' \\<or> fst b = snd b' \\<or> snd a' = snd b'\n  progressing (b # a' # as')\n  progressing (b # b' # bs')\n  awalk u (b # a' # as') v\n  awalk u (b # b' # bs') w\n\ngoal (1 subgoal):\n 1. hd (a' # as') = hd (b' # bs')", "by (cases b, cases a', cases b') (auto simp: progressing_Cons_Cons awalk_simps)"], ["proof (state)\nthis:\n  hd as = hd bs\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> a # as = b # bs", "then"], ["proof (chain)\npicking this:\n  hd as = hd bs", "show ?thesis"], ["proof (prove)\nusing this:\n  hd as = hd bs\n\ngoal (1 subgoal):\n 1. a # as = b # bs", "using \\<open>as \\<noteq> []\\<close> \\<open>bs \\<noteq> []\\<close> Cons_Cons.prems"], ["proof (prove)\nusing this:\n  hd as = hd bs\n  as \\<noteq> []\n  bs \\<noteq> []\n  awalk u (a # as) v\n  awalk u (b # bs) w\n  hd (a # as) = hd (b # bs)\n  a # as \\<noteq> []\n  b # bs \\<noteq> []\n  progressing (a # as)\n  progressing (b # bs)\n  set (inner_verts (a # as)) \\<inter> V = {}\n  set (inner_verts (b # bs)) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. a # as = b # bs", "by (auto dest: progressing_ConsD simp: awalk_simps inner_verts_Cons intro!: Cons_Cons)"], ["proof (state)\nthis:\n  a # as = b # bs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a # as = b # bs\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>awalk u [] v; awalk u [] w; hd [] = hd []; [] \\<noteq> [];\n        [] \\<noteq> []; progressing []; progressing [];\n        set (inner_verts []) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 2. \\<And>x xs u.\n       \\<lbrakk>awalk u (x # xs) v; awalk u [] w; hd (x # xs) = hd [];\n        x # xs \\<noteq> []; [] \\<noteq> []; progressing (x # xs);\n        progressing []; set (inner_verts (x # xs)) \\<inter> V = {};\n        set (inner_verts []) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs = []\n 3. \\<And>y ys u.\n       \\<lbrakk>awalk u [] v; awalk u (y # ys) w; hd [] = hd (y # ys);\n        [] \\<noteq> []; y # ys \\<noteq> []; progressing [];\n        progressing (y # ys); set (inner_verts []) \\<inter> V = {};\n        set (inner_verts (y # ys)) \\<inter> V = {}\\<rbrakk>\n       \\<Longrightarrow> [] = y # ys", "qed simp_all"], ["", "lemma same_awalk_by_common_arc:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n  assumes walk: \"awalk u p v\" \"awalk w q x\"\n  assumes progress: \"progressing p\" \"progressing q\"\n  assumes iv_not_in_V: \"set (inner_verts p) \\<inter> V = {}\" \"set (inner_verts q) \\<inter> V = {}\"\n  assumes ends_in_V: \"{u,v,w,x} \\<subseteq> V\"\n  assumes arcs: \"e \\<in> set p\" \"e \\<in> set q\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q", "from arcs"], ["proof (chain)\npicking this:\n  e \\<in> set p\n  e \\<in> set q", "obtain p1 p2 where p_decomp: \"p = p1 @ e # p2\""], ["proof (prove)\nusing this:\n  e \\<in> set p\n  e \\<in> set q\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        p = p1 @ e # p2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_decomp_first)"], ["proof (state)\nthis:\n  p = p1 @ e # p2\n\ngoal (1 subgoal):\n 1. p = q", "from arcs"], ["proof (chain)\npicking this:\n  e \\<in> set p\n  e \\<in> set q", "obtain q1 q2 where q_decomp: \"q = q1 @ e # q2\""], ["proof (prove)\nusing this:\n  e \\<in> set p\n  e \\<in> set q\n\ngoal (1 subgoal):\n 1. (\\<And>q1 q2.\n        q = q1 @ e # q2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_decomp_first)"], ["proof (state)\nthis:\n  q = q1 @ e # q2\n\ngoal (1 subgoal):\n 1. p = q", "{"], ["proof (state)\nthis:\n  q = q1 @ e # q2\n\ngoal (1 subgoal):\n 1. p = q", "define p1' q1' where \"p1' = rev_path (p1 @ [e])\" and \"q1' = rev_path (q1 @ [e])\""], ["proof (state)\nthis:\n  p1' = rev_path (p1 @ [e])\n  q1' = rev_path (q1 @ [e])\n\ngoal (1 subgoal):\n 1. p = q", "then"], ["proof (chain)\npicking this:\n  p1' = rev_path (p1 @ [e])\n  q1' = rev_path (q1 @ [e])", "have decomp: \"p = rev_path p1' @ p2\" \"q = rev_path q1' @ q2\"\n      and \"awlast u (rev_path p1') = snd e\" \"awlast w (rev_path q1') = snd e\""], ["proof (prove)\nusing this:\n  p1' = rev_path (p1 @ [e])\n  q1' = rev_path (q1 @ [e])\n\ngoal (1 subgoal):\n 1. (p = rev_path p1' @ p2 &&& q = rev_path q1' @ q2) &&&\n    awlast u (rev_path p1') = snd e &&& awlast w (rev_path q1') = snd e", "using p_decomp q_decomp walk"], ["proof (prove)\nusing this:\n  p1' = rev_path (p1 @ [e])\n  q1' = rev_path (q1 @ [e])\n  p = p1 @ e # p2\n  q = q1 @ e # q2\n  awalk u p v\n  awalk w q x\n\ngoal (1 subgoal):\n 1. (p = rev_path p1' @ p2 &&& q = rev_path q1' @ q2) &&&\n    awlast u (rev_path p1') = snd e &&& awlast w (rev_path q1') = snd e", "by (auto simp: awlast_append awalk_verts_rev_path)"], ["proof (state)\nthis:\n  p = rev_path p1' @ p2\n  q = rev_path q1' @ q2\n  awlast u (rev_path p1') = snd e\n  awlast w (rev_path q1') = snd e\n\ngoal (1 subgoal):\n 1. p = q", "then"], ["proof (chain)\npicking this:\n  p = rev_path p1' @ p2\n  q = rev_path q1' @ q2\n  awlast u (rev_path p1') = snd e\n  awlast w (rev_path q1') = snd e", "have walk': \"awalk (snd e) p1' u\" \"awalk (snd e) q1' w\""], ["proof (prove)\nusing this:\n  p = rev_path p1' @ p2\n  q = rev_path q1' @ q2\n  awlast u (rev_path p1') = snd e\n  awlast w (rev_path q1') = snd e\n\ngoal (1 subgoal):\n 1. awalk (snd e) p1' u &&& awalk (snd e) q1' w", "using walk"], ["proof (prove)\nusing this:\n  p = rev_path p1' @ p2\n  q = rev_path q1' @ q2\n  awlast u (rev_path p1') = snd e\n  awlast w (rev_path q1') = snd e\n  awalk u p v\n  awalk w q x\n\ngoal (1 subgoal):\n 1. awalk (snd e) p1' u &&& awalk (snd e) q1' w", "by auto"], ["proof (state)\nthis:\n  awalk (snd e) p1' u\n  awalk (snd e) q1' w\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  awalk (snd e) p1' u\n  awalk (snd e) q1' w\n\ngoal (1 subgoal):\n 1. p = q", "have \"hd p1' = hd q1'\" \"p1' \\<noteq> []\" \"q1' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd p1' = hd q1' &&& p1' \\<noteq> [] &&& q1' \\<noteq> []", "by (auto simp: p1'_def q1'_def)"], ["proof (state)\nthis:\n  hd p1' = hd q1'\n  p1' \\<noteq> []\n  q1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  hd p1' = hd q1'\n  p1' \\<noteq> []\n  q1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = q", "have \"progressing p1'\" \"progressing q1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing p1' &&& progressing q1'", "using progress"], ["proof (prove)\nusing this:\n  progressing p\n  progressing q\n\ngoal (1 subgoal):\n 1. progressing p1' &&& progressing q1'", "unfolding decomp"], ["proof (prove)\nusing this:\n  progressing (rev_path p1' @ p2)\n  progressing (rev_path q1' @ q2)\n\ngoal (1 subgoal):\n 1. progressing p1' &&& progressing q1'", "by (auto dest: progressing_appendD1 simp: progressing_rev_path)"], ["proof (state)\nthis:\n  progressing p1'\n  progressing q1'\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  progressing p1'\n  progressing q1'\n\ngoal (1 subgoal):\n 1. p = q", "have \"set (inner_verts (rev_path p1')) \\<inter> V = {}\" \"set (inner_verts (rev_path q1')) \\<inter> V = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inner_verts (rev_path p1')) \\<inter> V = {} &&&\n    set (inner_verts (rev_path q1')) \\<inter> V = {}", "using iv_not_in_V"], ["proof (prove)\nusing this:\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. set (inner_verts (rev_path p1')) \\<inter> V = {} &&&\n    set (inner_verts (rev_path q1')) \\<inter> V = {}", "unfolding decomp"], ["proof (prove)\nusing this:\n  set (inner_verts (rev_path p1' @ p2)) \\<inter> V = {}\n  set (inner_verts (rev_path q1' @ q2)) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. set (inner_verts (rev_path p1')) \\<inter> V = {} &&&\n    set (inner_verts (rev_path q1')) \\<inter> V = {}", "by (auto intro: in_set_inner_verts_appendI_l in_set_inner_verts_appendI_r)"], ["proof (state)\nthis:\n  set (inner_verts (rev_path p1')) \\<inter> V = {}\n  set (inner_verts (rev_path q1')) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p = q", "then"], ["proof (chain)\npicking this:\n  set (inner_verts (rev_path p1')) \\<inter> V = {}\n  set (inner_verts (rev_path q1')) \\<inter> V = {}", "have \"u \\<in> V\" \"w \\<in> V\" \"set (inner_verts p1') \\<inter> V = {}\" \"set (inner_verts q1') \\<inter> V = {}\""], ["proof (prove)\nusing this:\n  set (inner_verts (rev_path p1')) \\<inter> V = {}\n  set (inner_verts (rev_path q1')) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. (u \\<in> V &&& w \\<in> V) &&&\n    set (inner_verts p1') \\<inter> V = {} &&&\n    set (inner_verts q1') \\<inter> V = {}", "using ends_in_V iv_not_in_V walk"], ["proof (prove)\nusing this:\n  set (inner_verts (rev_path p1')) \\<inter> V = {}\n  set (inner_verts (rev_path q1')) \\<inter> V = {}\n  {u, v, w, x} \\<subseteq> V\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n  awalk u p v\n  awalk w q x\n\ngoal (1 subgoal):\n 1. (u \\<in> V &&& w \\<in> V) &&&\n    set (inner_verts p1') \\<inter> V = {} &&&\n    set (inner_verts q1') \\<inter> V = {}", "unfolding decomp"], ["proof (prove)\nusing this:\n  set (inner_verts (rev_path p1')) \\<inter> V = {}\n  set (inner_verts (rev_path q1')) \\<inter> V = {}\n  {u, v, w, x} \\<subseteq> V\n  set (inner_verts (rev_path p1' @ p2)) \\<inter> V = {}\n  set (inner_verts (rev_path q1' @ q2)) \\<inter> V = {}\n  awalk u (rev_path p1' @ p2) v\n  awalk w (rev_path q1' @ q2) x\n\ngoal (1 subgoal):\n 1. (u \\<in> V &&& w \\<in> V) &&&\n    set (inner_verts p1') \\<inter> V = {} &&&\n    set (inner_verts q1') \\<inter> V = {}", "by (auto simp: inner_verts_rev_path)"], ["proof (state)\nthis:\n  u \\<in> V\n  w \\<in> V\n  set (inner_verts p1') \\<inter> V = {}\n  set (inner_verts q1') \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  awalk (snd e) p1' u\n  awalk (snd e) q1' w\n  hd p1' = hd q1'\n  p1' \\<noteq> []\n  q1' \\<noteq> []\n  progressing p1'\n  progressing q1'\n  u \\<in> V\n  w \\<in> V\n  set (inner_verts p1') \\<inter> V = {}\n  set (inner_verts q1') \\<inter> V = {}", "have \"p1' = q1'\""], ["proof (prove)\nusing this:\n  awalk (snd e) p1' u\n  awalk (snd e) q1' w\n  hd p1' = hd q1'\n  p1' \\<noteq> []\n  q1' \\<noteq> []\n  progressing p1'\n  progressing q1'\n  u \\<in> V\n  w \\<in> V\n  set (inner_verts p1') \\<inter> V = {}\n  set (inner_verts q1') \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p1' = q1'", "by (rule same_awalk_by_same_end[OF V])"], ["proof (state)\nthis:\n  p1' = q1'\n\ngoal (1 subgoal):\n 1. p = q", "}"], ["proof (state)\nthis:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n\ngoal (1 subgoal):\n 1. p = q", "{"], ["proof (state)\nthis:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n\ngoal (1 subgoal):\n 1. p = q", "define p2' q2' where \"p2' = e # p2\" and \"q2' = e # q2\""], ["proof (state)\nthis:\n  p2' = e # p2\n  q2' = e # q2\n\ngoal (1 subgoal):\n 1. p = q", "then"], ["proof (chain)\npicking this:\n  p2' = e # p2\n  q2' = e # q2", "have decomp: \"p = p1 @ p2'\" \"q = q1 @ q2'\""], ["proof (prove)\nusing this:\n  p2' = e # p2\n  q2' = e # q2\n\ngoal (1 subgoal):\n 1. p = p1 @ p2' &&& q = q1 @ q2'", "using p_decomp q_decomp"], ["proof (prove)\nusing this:\n  p2' = e # p2\n  q2' = e # q2\n  p = p1 @ e # p2\n  q = q1 @ e # q2\n\ngoal (1 subgoal):\n 1. p = p1 @ p2' &&& q = q1 @ q2'", "by (auto simp: awlast_append)"], ["proof (state)\nthis:\n  p = p1 @ p2'\n  q = q1 @ q2'\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  p = p1 @ p2'\n  q = q1 @ q2'\n\ngoal (1 subgoal):\n 1. p = q", "have \"awlast u p1 = fst e\" \"awlast w q1 = fst e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. awlast u p1 = fst e &&& awlast w q1 = fst e", "using p_decomp q_decomp walk"], ["proof (prove)\nusing this:\n  p = p1 @ e # p2\n  q = q1 @ e # q2\n  awalk u p v\n  awalk w q x\n\ngoal (1 subgoal):\n 1. awlast u p1 = fst e &&& awlast w q1 = fst e", "by auto"], ["proof (state)\nthis:\n  awlast u p1 = fst e\n  awlast w q1 = fst e\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  p = p1 @ p2'\n  q = q1 @ q2'\n  awlast u p1 = fst e\n  awlast w q1 = fst e", "have *: \"awalk (fst e) p2' v\" \"awalk (fst e) q2' x\""], ["proof (prove)\nusing this:\n  p = p1 @ p2'\n  q = q1 @ q2'\n  awlast u p1 = fst e\n  awlast w q1 = fst e\n\ngoal (1 subgoal):\n 1. awalk (fst e) p2' v &&& awalk (fst e) q2' x", "using walk"], ["proof (prove)\nusing this:\n  p = p1 @ p2'\n  q = q1 @ q2'\n  awlast u p1 = fst e\n  awlast w q1 = fst e\n  awalk u p v\n  awalk w q x\n\ngoal (1 subgoal):\n 1. awalk (fst e) p2' v &&& awalk (fst e) q2' x", "by auto"], ["proof (state)\nthis:\n  awalk (fst e) p2' v\n  awalk (fst e) q2' x\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  awalk (fst e) p2' v\n  awalk (fst e) q2' x\n\ngoal (1 subgoal):\n 1. p = q", "have \"hd p2' = hd q2'\" \"p2' \\<noteq> []\" \"q2' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd p2' = hd q2' &&& p2' \\<noteq> [] &&& q2' \\<noteq> []", "by (auto simp: p2'_def q2'_def)"], ["proof (state)\nthis:\n  hd p2' = hd q2'\n  p2' \\<noteq> []\n  q2' \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  hd p2' = hd q2'\n  p2' \\<noteq> []\n  q2' \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = q", "have \"progressing p2'\" \"progressing q2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. progressing p2' &&& progressing q2'", "using progress"], ["proof (prove)\nusing this:\n  progressing p\n  progressing q\n\ngoal (1 subgoal):\n 1. progressing p2' &&& progressing q2'", "unfolding decomp"], ["proof (prove)\nusing this:\n  progressing (p1 @ p2')\n  progressing (q1 @ q2')\n\ngoal (1 subgoal):\n 1. progressing p2' &&& progressing q2'", "by (auto dest: progressing_appendD2)"], ["proof (state)\nthis:\n  progressing p2'\n  progressing q2'\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  progressing p2'\n  progressing q2'\n\ngoal (1 subgoal):\n 1. p = q", "have \"v \\<in> V\" \"x \\<in> V\" \"set (inner_verts p2') \\<inter> V = {}\" \"set (inner_verts q2') \\<inter> V = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> V &&& x \\<in> V) &&&\n    set (inner_verts p2') \\<inter> V = {} &&&\n    set (inner_verts q2') \\<inter> V = {}", "using ends_in_V iv_not_in_V"], ["proof (prove)\nusing this:\n  {u, v, w, x} \\<subseteq> V\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. (v \\<in> V &&& x \\<in> V) &&&\n    set (inner_verts p2') \\<inter> V = {} &&&\n    set (inner_verts q2') \\<inter> V = {}", "unfolding decomp"], ["proof (prove)\nusing this:\n  {u, v, w, x} \\<subseteq> V\n  set (inner_verts (p1 @ p2')) \\<inter> V = {}\n  set (inner_verts (q1 @ q2')) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. (v \\<in> V &&& x \\<in> V) &&&\n    set (inner_verts p2') \\<inter> V = {} &&&\n    set (inner_verts q2') \\<inter> V = {}", "by (auto intro: in_set_inner_verts_appendI_l in_set_inner_verts_appendI_r)"], ["proof (state)\nthis:\n  v \\<in> V\n  x \\<in> V\n  set (inner_verts p2') \\<inter> V = {}\n  set (inner_verts q2') \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  awalk (fst e) p2' v\n  awalk (fst e) q2' x\n  hd p2' = hd q2'\n  p2' \\<noteq> []\n  q2' \\<noteq> []\n  progressing p2'\n  progressing q2'\n  v \\<in> V\n  x \\<in> V\n  set (inner_verts p2') \\<inter> V = {}\n  set (inner_verts q2') \\<inter> V = {}", "have \"p2' = q2'\""], ["proof (prove)\nusing this:\n  awalk (fst e) p2' v\n  awalk (fst e) q2' x\n  hd p2' = hd q2'\n  p2' \\<noteq> []\n  q2' \\<noteq> []\n  progressing p2'\n  progressing q2'\n  v \\<in> V\n  x \\<in> V\n  set (inner_verts p2') \\<inter> V = {}\n  set (inner_verts q2') \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. p2' = q2'", "by (rule same_awalk_by_same_end[OF V])"], ["proof (state)\nthis:\n  p2' = q2'\n\ngoal (1 subgoal):\n 1. p = q", "}"], ["proof (state)\nthis:\n  e # p2 = e # q2\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n  e # p2 = e # q2", "show \"p = q\""], ["proof (prove)\nusing this:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n  e # p2 = e # q2\n\ngoal (1 subgoal):\n 1. p = q", "using p_decomp q_decomp"], ["proof (prove)\nusing this:\n  rev_path (p1 @ [e]) = rev_path (q1 @ [e])\n  e # p2 = e # q2\n  p = p1 @ e # p2\n  q = q1 @ e # q2\n\ngoal (1 subgoal):\n 1. p = q", "by (auto simp: rev_path_eq)"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_gen_iapath_by_common_arc:\n  assumes V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> pverts G\"\n  assumes path: \"gen_iapath V u p v\" \"gen_iapath V w q x\"\n  assumes arcs: \"e \\<in> set p\" \"e \\<in> set q\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q", "from path"], ["proof (chain)\npicking this:\n  gen_iapath V u p v\n  gen_iapath V w q x", "have awalk: \"awalk u p v\" \"awalk w q x\" \"progressing p\" \"progressing q\"\n      and in_V: \"set (inner_verts p) \\<inter> V = {}\" \"set (inner_verts q) \\<inter> V = {}\" \"{u,v,w,x} \\<subseteq> V\""], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n  gen_iapath V w q x\n\ngoal (1 subgoal):\n 1. ((awalk u p v &&& awalk w q x) &&& progressing p &&& progressing q) &&&\n    set (inner_verts p) \\<inter> V = {} &&&\n    set (inner_verts q) \\<inter> V = {} &&& {u, v, w, x} \\<subseteq> V", "by (auto simp: gen_iapath_def apath_imp_progressing apath_def)"], ["proof (state)\nthis:\n  awalk u p v\n  awalk w q x\n  progressing p\n  progressing q\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n  {u, v, w, x} \\<subseteq> V\n\ngoal (1 subgoal):\n 1. p = q", "from V awalk in_V arcs"], ["proof (chain)\npicking this:\n  verts3 (with_proj G) \\<subseteq> V\n  V \\<subseteq> pverts G\n  awalk u p v\n  awalk w q x\n  progressing p\n  progressing q\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n  {u, v, w, x} \\<subseteq> V\n  e \\<in> set p\n  e \\<in> set q", "show ?thesis"], ["proof (prove)\nusing this:\n  verts3 (with_proj G) \\<subseteq> V\n  V \\<subseteq> pverts G\n  awalk u p v\n  awalk w q x\n  progressing p\n  progressing q\n  set (inner_verts p) \\<inter> V = {}\n  set (inner_verts q) \\<inter> V = {}\n  {u, v, w, x} \\<subseteq> V\n  e \\<in> set p\n  e \\<in> set q\n\ngoal (1 subgoal):\n 1. p = q", "by (rule same_awalk_by_common_arc)"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Slim graphs\\<close>"], ["", "text \\<open>\n  We define the notion of a slim graph. The idea is that for a slim graph @{term G}, @{term G}\n  is a subdivision of @{term \"contr_graph G\"}.\n\\<close>"], ["", "context pair_pre_digraph begin"], ["", "definition (in pair_pre_digraph) is_slim :: \"'a set \\<Rightarrow> bool\" where\n  \"is_slim V \\<equiv>\n    (\\<forall>v \\<in> pverts G. v \\<in> V \\<or>\n      in_degree G v \\<le> 2 \\<and> (\\<exists>x p y. gen_iapath V x p y \\<and> v \\<in> set (awalk_verts x p))) \\<and>\n    (\\<forall>e \\<in> parcs G. fst e \\<noteq> snd e \\<and> (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)) \\<and>\n    (\\<forall>u v p q. (gen_iapath V u p v \\<and> gen_iapath V u q v) \\<longrightarrow> p = q) \\<and>\n    V \\<subseteq> pverts G\""], ["", "definition direct_arc :: \"'a \\<times> 'a \\<Rightarrow> 'a \\<times> 'a\" where\n  \"direct_arc uv \\<equiv> SOME e. {fst uv , snd uv} = {fst e, snd e}\""], ["", "definition choose_iapath :: \"'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<times> 'a) awalk\" where\n  \"choose_iapath u v \\<equiv> (let\n      chosen_path = (\\<lambda>u v. SOME p. iapath u p v)\n    in if direct_arc (u,v) = (u,v) then chosen_path u v else rev_path (chosen_path v u))\""], ["", "(* XXX: Replace \"parcs (contr_graph G)\" by its definition *)"], ["", "definition slim_paths :: \"('a \\<times> ('a \\<times> 'a) awalk \\<times> 'a) set\" where\n  \"slim_paths \\<equiv> (\\<lambda>e. (fst e, choose_iapath (fst e) (snd e), snd e)) ` parcs (contr_graph G)\""], ["", "definition slim_verts :: \"'a set\" where\n  \"slim_verts \\<equiv> verts3 G \\<union> (\\<Union>(u,p,_) \\<in> slim_paths. set (awalk_verts u p))\""], ["", "definition slim_arcs :: \"'a rel\" where\n  \"slim_arcs \\<equiv> \\<Union>(_,p,_) \\<in> slim_paths. set p\""], ["", "text \\<open>Computes a slim subgraph for an arbitrary @{term pair_digraph}\\<close>"], ["", "definition slim :: \"'a pair_pre_digraph\" where\n  \"slim \\<equiv> \\<lparr> pverts = slim_verts, parcs = slim_arcs \\<rparr>\""], ["", "end"], ["", "lemma (in wf_digraph) iapath_dist_ends: \"\\<And>u p v. iapath u p v \\<Longrightarrow> u \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u p v. gen_iapath (verts3 G) u p v \\<Longrightarrow> u \\<noteq> v", "unfolding pre_digraph.gen_iapath_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u p v.\n       u \\<in> verts3 G \\<and>\n       v \\<in> verts3 G \\<and>\n       apath u p v \\<and>\n       set (inner_verts p) \\<inter> verts3 G = {} \\<and>\n       p \\<noteq> [] \\<Longrightarrow>\n       u \\<noteq> v", "by (metis apath_ends)"], ["", "context pair_sym_digraph begin"], ["", "lemma choose_iapath:\n  assumes \"\\<exists>p. iapath u p v\"\n  shows \"iapath u (choose_iapath u v) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "proof (cases \"direct_arc (u,v) = (u,v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. direct_arc (u, v) = (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n 2. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "define chosen where \"chosen u v = (SOME p. iapath u p v)\" for u v"], ["proof (state)\nthis:\n  chosen ?u ?v = (SOME p. gen_iapath (verts3 (with_proj G)) ?u p ?v)\n\ngoal (2 subgoals):\n 1. direct_arc (u, v) = (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n 2. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "{"], ["proof (state)\nthis:\n  chosen ?u ?v = (SOME p. gen_iapath (verts3 (with_proj G)) ?u p ?v)\n\ngoal (2 subgoals):\n 1. direct_arc (u, v) = (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n 2. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "case True"], ["proof (state)\nthis:\n  direct_arc (u, v) = (u, v)\n\ngoal (2 subgoals):\n 1. direct_arc (u, v) = (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n 2. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "have \"iapath u (chosen u v) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (chosen u v) v", "unfolding chosen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u\n     (SOME p. gen_iapath (verts3 (with_proj G)) u p v) v", "by (rule someI_ex) (rule assms)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u (chosen u v) v\n\ngoal (2 subgoals):\n 1. direct_arc (u, v) = (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n 2. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u (chosen u v) v", "show ?thesis"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u (chosen u v) v\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "using True"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u (chosen u v) v\n  direct_arc (u, v) = (u, v)\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "by (simp add: choose_iapath_def chosen_def)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "}"], ["proof (state)\nthis:\n  direct_arc (u, v) = (u, v) \\<Longrightarrow>\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "{"], ["proof (state)\nthis:\n  direct_arc (u, v) = (u, v) \\<Longrightarrow>\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "case False"], ["proof (state)\nthis:\n  direct_arc (u, v) \\<noteq> (u, v)\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>p. gen_iapath (verts3 (with_proj G)) u p v", "obtain p where \"iapath u p v\""], ["proof (prove)\nusing this:\n  \\<exists>p. gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        gen_iapath (verts3 (with_proj G)) u p v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u p v", "have \"iapath v (rev_path p) u\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) v (rev_path p) u", "by (simp add: gen_iapath_rev_path)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u", "have \"iapath v (chosen v u) u\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) v (chosen v u) u", "unfolding chosen_def"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) v\n     (SOME p. gen_iapath (verts3 (with_proj G)) v p u) u", "by (rule someI)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) v (chosen v u) u\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n    gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) v (chosen v u) u", "show ?thesis"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) v (chosen v u) u\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "using False"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) v (chosen v u) u\n  direct_arc (u, v) \\<noteq> (u, v)\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "by (simp add: choose_iapath_def chosen_def gen_iapath_rev_path)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  direct_arc (u, v) \\<noteq> (u, v) \\<Longrightarrow>\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slim_simps: \"pverts slim = slim_verts\" \"parcs slim = slim_arcs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts slim = slim_verts &&& parcs slim = slim_arcs", "by (auto simp: slim_def)"], ["", "lemma slim_paths_in_G_E:\n  assumes \"(u,p,v) \\<in> slim_paths\" obtains \"iapath u p v\" \"u \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>gen_iapath (verts3 (with_proj G)) u p v; u \\<noteq> v\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms choose_iapath"], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  \\<exists>p. gen_iapath (verts3 (with_proj G)) ?u p ?v \\<Longrightarrow>\n  gen_iapath (verts3 (with_proj G)) ?u (choose_iapath ?u ?v) ?v\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>gen_iapath (verts3 (with_proj G)) u p v; u \\<noteq> v\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: gen_contr_graph_def slim_paths_def dest: iapath_dist_ends)"], ["", "lemma verts_slim_in_G: \"pverts slim \\<subseteq> pverts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts slim \\<subseteq> pverts G", "by (auto simp: slim_simps slim_verts_def verts3_def gen_iapath_def apath_def\n    elim!: slim_paths_in_G_E elim!: awalkE)"], ["", "lemma verts3_in_slim_G[simp]:\n  assumes \"x \\<in> verts3 G\" shows \"x \\<in> pverts slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> pverts slim", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. x \\<in> pverts slim", "by (auto simp: slim_simps slim_verts_def)"], ["", "lemma arcs_slim_in_G: \"parcs slim \\<subseteq> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parcs slim \\<subseteq> parcs G", "by (auto simp: slim_simps slim_arcs_def gen_iapath_def apath_def\n      elim!: slim_paths_in_G_E elim!: awalkE)"], ["", "lemma slim_paths_in_slimG:\n  assumes \"(u,p,v) \\<in> slim_paths\"\n  shows \"pre_digraph.gen_iapath slim (verts3 G) u p v \\<and> p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "from assms"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths", "have arcs: \"\\<And>e. e \\<in> set p \\<Longrightarrow> e \\<in> parcs slim\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. \\<And>e. e \\<in> set p \\<Longrightarrow> e \\<in> parcs slim", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  ?e \\<in> set p \\<Longrightarrow> ?e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  ?e \\<in> set p \\<Longrightarrow> ?e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "from assms"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths", "have \"gen_iapath (verts3 G) u p v\" and \"p \\<noteq> []\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u p v &&& p \\<noteq> []", "by (auto simp: gen_iapath_def elim!: slim_paths_in_G_E)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  ?e \\<in> set p \\<Longrightarrow> ?e \\<in> parcs slim\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  ?e \\<in> set p \\<Longrightarrow> ?e \\<in> parcs slim\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n     v \\<and>\n    p \\<noteq> []", "by (auto simp: pre_digraph.gen_iapath_def pre_digraph.apath_def pre_digraph.awalk_def\n      inner_verts_with_proj_def)"], ["proof (state)\nthis:\n  pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p\n   v \\<and>\n  p \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_arc_swapped:\n  \"direct_arc (u,v) = direct_arc (v,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_arc (u, v) = direct_arc (v, u)", "by (simp add: direct_arc_def insert_commute)"], ["", "lemma direct_arc_chooses:\n  fixes u v :: 'a shows \"direct_arc (u,v) = (u,v) \\<or> direct_arc (u,v) = (v,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "define f :: \"'a set \\<Rightarrow> 'a \\<times> 'a\"\n    where \"f X = (SOME e. X = {fst e,snd e})\" for X"], ["proof (state)\nthis:\n  f ?X = (SOME e. ?X = {fst e, snd e})\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "have \"\\<exists>p::'a \\<times> 'a. {u,v} = {fst p, snd p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. {u, v} = {fst p, snd p}", "by (rule exI[where x=\"(u,v)\"]) auto"], ["proof (state)\nthis:\n  \\<exists>p. {u, v} = {fst p, snd p}\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. {u, v} = {fst p, snd p}", "have \"{u,v} = {fst (f {u,v}), snd (f {u,v})}\""], ["proof (prove)\nusing this:\n  \\<exists>p. {u, v} = {fst p, snd p}\n\ngoal (1 subgoal):\n 1. {u, v} = {fst (f {u, v}), snd (f {u, v})}", "unfolding f_def"], ["proof (prove)\nusing this:\n  \\<exists>p. {u, v} = {fst p, snd p}\n\ngoal (1 subgoal):\n 1. {u, v} =\n    {fst (SOME e. {u, v} = {fst e, snd e}),\n     snd (SOME e. {u, v} = {fst e, snd e})}", "by (rule someI_ex)"], ["proof (state)\nthis:\n  {u, v} = {fst (f {u, v}), snd (f {u, v})}\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "then"], ["proof (chain)\npicking this:\n  {u, v} = {fst (f {u, v}), snd (f {u, v})}", "have \"f {u,v} = (u,v) \\<or> f {u,v} = (v,u)\""], ["proof (prove)\nusing this:\n  {u, v} = {fst (f {u, v}), snd (f {u, v})}\n\ngoal (1 subgoal):\n 1. f {u, v} = (u, v) \\<or> f {u, v} = (v, u)", "by (auto simp: doubleton_eq_iff prod_eq_iff)"], ["proof (state)\nthis:\n  f {u, v} = (u, v) \\<or> f {u, v} = (v, u)\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "then"], ["proof (chain)\npicking this:\n  f {u, v} = (u, v) \\<or> f {u, v} = (v, u)", "show ?thesis"], ["proof (prove)\nusing this:\n  f {u, v} = (u, v) \\<or> f {u, v} = (v, u)\n\ngoal (1 subgoal):\n 1. direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)", "by (auto simp: direct_arc_def f_def)"], ["proof (state)\nthis:\n  direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_path_choose_iapath:\n  assumes \"u \\<noteq> v\"\n  shows \"rev_path (choose_iapath u v) = choose_iapath v u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_path (choose_iapath u v) = choose_iapath v u", "using assms direct_arc_chooses[of u v]"], ["proof (prove)\nusing this:\n  u \\<noteq> v\n  direct_arc (u, v) = (u, v) \\<or> direct_arc (u, v) = (v, u)\n\ngoal (1 subgoal):\n 1. rev_path (choose_iapath u v) = choose_iapath v u", "by (auto simp: choose_iapath_def direct_arc_swapped)"], ["", "lemma no_loops_in_iapath: \"gen_iapath V u p v \\<Longrightarrow> a \\<in> set p \\<Longrightarrow> fst a \\<noteq> snd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gen_iapath V u p v; a \\<in> set p\\<rbrakk>\n    \\<Longrightarrow> fst a \\<noteq> snd a", "by (auto simp: gen_iapath_def no_loops_in_apath)"], ["", "lemma pair_bidirected_digraph_slim: \"pair_bidirected_digraph slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph slim", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "fix e"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "assume A: \"e \\<in> parcs slim\""], ["proof (state)\nthis:\n  e \\<in> parcs slim\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "then"], ["proof (chain)\npicking this:\n  e \\<in> parcs slim", "obtain u p v where \"(u,p,v) \\<in> slim_paths\" \"e \\<in> set p\""], ["proof (prove)\nusing this:\n  e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. (\\<And>u p v.\n        \\<lbrakk>(u, p, v) \\<in> slim_paths; e \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "with A"], ["proof (chain)\npicking this:\n  e \\<in> parcs slim\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p", "have \"iapath u p v\""], ["proof (prove)\nusing this:\n  e \\<in> parcs slim\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u p v", "by (auto elim: slim_paths_in_G_E)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "with \\<open>e \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  e \\<in> set p\n  gen_iapath (verts3 (with_proj G)) u p v", "have \"fst e \\<in> set (awalk_verts u p)\" \"snd e \\<in> set (awalk_verts u p)\""], ["proof (prove)\nusing this:\n  e \\<in> set p\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. fst e \\<in> set (pawalk_verts u p) &&&\n    snd e \\<in> set (pawalk_verts u p)", "by (auto simp: set_awalk_verts gen_iapath_def apath_def)"], ["proof (state)\nthis:\n  fst e \\<in> set (pawalk_verts u p)\n  snd e \\<in> set (pawalk_verts u p)\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "moreover"], ["proof (state)\nthis:\n  fst e \\<in> set (pawalk_verts u p)\n  snd e \\<in> set (pawalk_verts u p)\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "from \\<open>_ \\<in> slim_paths\\<close>"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths", "have \"set (awalk_verts u p) \\<subseteq> pverts slim\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) \\<subseteq> pverts slim", "by (auto simp: slim_simps slim_verts_def)"], ["proof (state)\nthis:\n  set (pawalk_verts u p) \\<subseteq> pverts slim\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<in> pverts slim\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> snd e \\<in> pverts slim\n 3. symmetric (with_proj slim)\n 4. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "ultimately"], ["proof (chain)\npicking this:\n  fst e \\<in> set (pawalk_verts u p)\n  snd e \\<in> set (pawalk_verts u p)\n  set (pawalk_verts u p) \\<subseteq> pverts slim", "show \"fst e \\<in> pverts slim\" \"snd e \\<in> pverts slim\""], ["proof (prove)\nusing this:\n  fst e \\<in> set (pawalk_verts u p)\n  snd e \\<in> set (pawalk_verts u p)\n  set (pawalk_verts u p) \\<subseteq> pverts slim\n\ngoal (1 subgoal):\n 1. fst e \\<in> pverts slim &&& snd e \\<in> pverts slim", "by auto"], ["proof (state)\nthis:\n  fst e \\<in> pverts slim\n  snd e \\<in> pverts slim\n\ngoal (2 subgoals):\n 1. symmetric (with_proj slim)\n 2. \\<And>e. e \\<in> parcs slim \\<Longrightarrow> fst e \\<noteq> snd e", "show \"fst e \\<noteq> snd e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e \\<noteq> snd e", "using \\<open>iapath u p v\\<close> \\<open>e \\<in> set p \\<close>"], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. fst e \\<noteq> snd e", "by (auto dest: no_loops_in_iapath)"], ["proof (state)\nthis:\n  fst e \\<noteq> snd e\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "assume \"e \\<in> parcs slim\""], ["proof (state)\nthis:\n  e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  e \\<in> parcs slim", "obtain u p v where \"(u,p,v) \\<in> slim_paths\" and \"e \\<in> set p\""], ["proof (prove)\nusing this:\n  e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. (\\<And>u p v.\n        \\<lbrakk>(u, p, v) \\<in> slim_paths; e \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "moreover"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p", "have \"iapath u p v\" and \"p \\<noteq> []\" and \"u \\<noteq> v\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u p v &&&\n    p \\<noteq> [] &&& u \\<noteq> v", "by (auto elim: slim_paths_in_G_E)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []\n  u \\<noteq> v", "have \"iapath v (rev_path p) u\" and \"rev_path p \\<noteq> []\" and \"v \\<noteq> u\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n  p \\<noteq> []\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) v (rev_path p) u &&&\n    rev_path p \\<noteq> [] &&& v \\<noteq> u", "by (auto simp: gen_iapath_rev_path)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n  rev_path p \\<noteq> []\n  v \\<noteq> u\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n  rev_path p \\<noteq> []\n  v \\<noteq> u", "have \"(v,u) \\<in> parcs (contr_graph G)\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) v (rev_path p) u\n  rev_path p \\<noteq> []\n  v \\<noteq> u\n\ngoal (1 subgoal):\n 1. (v, u)\n    \\<in> parcs (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  (v, u) \\<in> parcs (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "moreover"], ["proof (state)\nthis:\n  (v, u) \\<in> parcs (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "from \\<open>iapath u p v\\<close>"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u p v", "have \"u \\<noteq> v\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. u \\<noteq> v", "by (auto simp: gen_iapath_def dest: apath_nonempty_ends)"], ["proof (state)\nthis:\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "ultimately"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n  (v, u) \\<in> parcs (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n  u \\<noteq> v", "have \"(v, rev_path p, u) \\<in> slim_paths\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  e \\<in> set p\n  (v, u) \\<in> parcs (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. (v, rev_path p, u) \\<in> slim_paths", "by (auto simp: slim_paths_def rev_path_choose_iapath intro: rev_image_eqI)"], ["proof (state)\nthis:\n  (v, rev_path p, u) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "moreover"], ["proof (state)\nthis:\n  (v, rev_path p, u) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "from \\<open>e \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  e \\<in> set p", "have \"(snd e, fst e) \\<in> set (rev_path p)\""], ["proof (prove)\nusing this:\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. (snd e, fst e) \\<in> set (rev_path p)", "by (induct p) auto"], ["proof (state)\nthis:\n  (snd e, fst e) \\<in> set (rev_path p)\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "ultimately"], ["proof (chain)\npicking this:\n  (v, rev_path p, u) \\<in> slim_paths\n  (snd e, fst e) \\<in> set (rev_path p)", "have \"(snd e, fst e) \\<in> parcs slim\""], ["proof (prove)\nusing this:\n  (v, rev_path p, u) \\<in> slim_paths\n  (snd e, fst e) \\<in> set (rev_path p)\n\ngoal (1 subgoal):\n 1. (snd e, fst e) \\<in> parcs slim", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  (snd e, fst e) \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "}"], ["proof (state)\nthis:\n  ?e2 \\<in> parcs slim \\<Longrightarrow> (snd ?e2, fst ?e2) \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  ?e2 \\<in> parcs slim \\<Longrightarrow> (snd ?e2, fst ?e2) \\<in> parcs slim", "show \"symmetric slim\""], ["proof (prove)\nusing this:\n  ?e2 \\<in> parcs slim \\<Longrightarrow> (snd ?e2, fst ?e2) \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. symmetric (with_proj slim)", "unfolding symmetric_conv"], ["proof (prove)\nusing this:\n  ?e2 \\<in> parcs slim \\<Longrightarrow> (snd ?e2, fst ?e2) \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. \\<forall>e1\\<in>arcs (with_proj slim).\n       \\<exists>e2\\<in>arcs (with_proj slim).\n          tail (with_proj slim) e1 = head (with_proj slim) e2 \\<and>\n          head (with_proj slim) e1 = tail (with_proj slim) e2", "by simp (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  symmetric (with_proj slim)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_pseudo_graph) pair_graph_slim: \"pair_graph slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph slim", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph slim", "interpret slim: pair_bidirected_digraph slim"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph slim", "by (rule pair_bidirected_digraph_slim)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph slim", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph slim", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (pverts slim)\n 2. finite (parcs slim)", "show \"finite (pverts slim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pverts slim)", "using verts_slim_in_G finite_verts"], ["proof (prove)\nusing this:\n  pverts slim \\<subseteq> pverts G\n  finite (pverts G)\n\ngoal (1 subgoal):\n 1. finite (pverts slim)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (pverts slim)\n\ngoal (1 subgoal):\n 1. finite (parcs slim)", "show \"finite (parcs slim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (parcs slim)", "using arcs_slim_in_G finite_arcs"], ["proof (prove)\nusing this:\n  parcs slim \\<subseteq> parcs G\n  finite (parcs G)\n\ngoal (1 subgoal):\n 1. finite (parcs slim)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (parcs slim)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pair_graph slim\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraph_slim: \"subgraph slim G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (with_proj slim) (with_proj G)", "proof (rule subgraphI)"], ["proof (state)\ngoal (5 subgoals):\n 1. verts (with_proj slim) \\<subseteq> verts (with_proj G)\n 2. arcs (with_proj slim) \\<subseteq> arcs (with_proj G)\n 3. compatible (with_proj G) (with_proj slim)\n 4. wf_digraph (with_proj slim)\n 5. wf_digraph (with_proj G)", "interpret H: pair_bidirected_digraph \"slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph slim", "by (rule pair_bidirected_digraph_slim) intro_locales"], ["proof (state)\ngoal (5 subgoals):\n 1. verts (with_proj slim) \\<subseteq> verts (with_proj G)\n 2. arcs (with_proj slim) \\<subseteq> arcs (with_proj G)\n 3. compatible (with_proj G) (with_proj slim)\n 4. wf_digraph (with_proj slim)\n 5. wf_digraph (with_proj G)", "show \"verts slim \\<subseteq> verts G\" \"arcs slim \\<subseteq> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts (with_proj slim) \\<subseteq> verts (with_proj G) &&&\n    arcs (with_proj slim) \\<subseteq> arcs (with_proj G)", "by (auto simp: verts_slim_in_G arcs_slim_in_G)"], ["proof (state)\nthis:\n  verts (with_proj slim) \\<subseteq> verts (with_proj G)\n  arcs (with_proj slim) \\<subseteq> arcs (with_proj G)\n\ngoal (3 subgoals):\n 1. compatible (with_proj G) (with_proj slim)\n 2. wf_digraph (with_proj slim)\n 3. wf_digraph (with_proj G)", "show \"compatible G slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible (with_proj G) (with_proj slim)", ".."], ["proof (state)\nthis:\n  compatible (with_proj G) (with_proj slim)\n\ngoal (2 subgoals):\n 1. wf_digraph (with_proj slim)\n 2. wf_digraph (with_proj G)", "show \"wf_digraph slim\" \"wf_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (with_proj slim) &&& wf_digraph (with_proj G)", "by unfold_locales"], ["proof (state)\nthis:\n  wf_digraph (with_proj slim)\n  wf_digraph (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma giapath_if_slim_giapath:\n  assumes \"pre_digraph.gen_iapath slim (verts3 G) u p v\"\n  shows \"gen_iapath (verts3 G) u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u p v", "using assms verts_slim_in_G arcs_slim_in_G"], ["proof (prove)\nusing this:\n  pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p v\n  pverts slim \\<subseteq> pverts G\n  parcs slim \\<subseteq> parcs G\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u p v", "by (auto simp: pre_digraph.gen_iapath_def pre_digraph.apath_def pre_digraph.awalk_def\n  inner_verts_with_proj_def)"], ["", "lemma slim_giapath_if_giapath:\nassumes \"gen_iapath (verts3 G) u p v\"\n  shows \"\\<exists>p. pre_digraph.gen_iapath slim (verts3 G) u p v\" (is \"\\<exists>p. ?P p\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u p v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u ?p v", "from assms"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u p v", "have choose_arcs: \"\\<And>e. e \\<in> set (choose_iapath u v) \\<Longrightarrow> e \\<in> parcs slim\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set (choose_iapath u v) \\<Longrightarrow> e \\<in> parcs slim", "by (fastforce simp: slim_simps slim_arcs_def slim_paths_def gen_contr_graph_def)"], ["proof (state)\nthis:\n  ?e \\<in> set (choose_iapath u v) \\<Longrightarrow> ?e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u ?p v", "moreover"], ["proof (state)\nthis:\n  ?e \\<in> set (choose_iapath u v) \\<Longrightarrow> ?e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u ?p v", "from assms"], ["proof (chain)\npicking this:\n  gen_iapath (verts3 (with_proj G)) u p v", "have choose: \"iapath u (choose_iapath u v) v\""], ["proof (prove)\nusing this:\n  gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "by (intro choose_iapath) (auto simp: gen_iapath_def)"], ["proof (state)\nthis:\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u ?p v", "ultimately"], ["proof (chain)\npicking this:\n  ?e \\<in> set (choose_iapath u v) \\<Longrightarrow> ?e \\<in> parcs slim\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v", "show \"?P (choose_iapath u v)\""], ["proof (prove)\nusing this:\n  ?e \\<in> set (choose_iapath u v) \\<Longrightarrow> ?e \\<in> parcs slim\n  gen_iapath (verts3 (with_proj G)) u (choose_iapath u v) v\n\ngoal (1 subgoal):\n 1. pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u\n     (choose_iapath u v) v", "by (auto simp: pre_digraph.gen_iapath_def pre_digraph.apath_def pre_digraph.awalk_def\n      inner_verts_with_proj_def)"], ["proof (state)\nthis:\n  pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u\n   (choose_iapath u v) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma contr_graph_slim_eq:\n   \"gen_contr_graph slim (verts3 G) = contr_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj slim) (verts3 (with_proj G)) =\n    gen_contr_graph (with_proj G) (verts3 (with_proj G))", "using giapath_if_slim_giapath slim_giapath_if_giapath"], ["proof (prove)\nusing this:\n  pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) ?u ?p\n   ?v \\<Longrightarrow>\n  gen_iapath (verts3 (with_proj G)) ?u ?p ?v\n  gen_iapath (verts3 (with_proj G)) ?u ?p ?v \\<Longrightarrow>\n  \\<exists>p.\n     pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) ?u p ?v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj slim) (verts3 (with_proj G)) =\n    gen_contr_graph (with_proj G) (verts3 (with_proj G))", "by (fastforce simp: gen_contr_graph_def)"], ["", "end"], ["", "context pair_pseudo_graph begin"], ["", "lemma verts3_slim_in_verts3:\n  assumes \"v \\<in> verts3 slim\" shows \"v \\<in> verts3 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> verts3 (with_proj slim)", "have \"2 < in_degree slim v\""], ["proof (prove)\nusing this:\n  v \\<in> verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj slim) v", "by (auto simp: verts3_def)"], ["proof (state)\nthis:\n  2 < in_degree (with_proj slim) v\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "also"], ["proof (state)\nthis:\n  2 < in_degree (with_proj slim) v\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "have \"\\<dots> \\<le> in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj slim) v \\<le> in_degree (with_proj G) v", "using subgraph_slim"], ["proof (prove)\nusing this:\n  subgraph (with_proj slim) (with_proj G)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj slim) v \\<le> in_degree (with_proj G) v", "by (rule subgraph_in_degree)"], ["proof (state)\nthis:\n  in_degree (with_proj slim) v \\<le> in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "finally"], ["proof (chain)\npicking this:\n  2 < in_degree (with_proj G) v", "show ?thesis"], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "using assms subgraph_slim"], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj G) v\n  v \\<in> verts3 (with_proj slim)\n  subgraph (with_proj slim) (with_proj G)\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "by (fastforce simp: verts3_def)"], ["proof (state)\nthis:\n  v \\<in> verts3 (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slim_is_slim:\n  \"pair_pre_digraph.is_slim slim (verts3 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pre_digraph.is_slim slim (verts3 (with_proj G))", "proof (unfold pair_pre_digraph.is_slim_def, safe)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            pre_digraph.gen_iapath (with_proj slim)\n                             (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) x p\n           y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>pre_digraph.gen_iapath (with_proj slim)\n                 (verts3 (with_proj G)) u p v;\n        pre_digraph.gen_iapath (with_proj slim) (verts3 (with_proj G)) u q\n         v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "interpret S: pair_graph slim"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph slim", "by (rule pair_graph_slim)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "{"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix v"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"v \\<in> pverts slim\" \"v \\<notin> verts3 G\""], ["proof (state)\nthis:\n  v \\<in> pverts slim\n  v \\<notin> verts3 (with_proj G)\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  v \\<in> pverts slim\n  v \\<notin> verts3 (with_proj G)", "have \"in_degree G v \\<le> 2\""], ["proof (prove)\nusing this:\n  v \\<in> pverts slim\n  v \\<notin> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) v \\<le> 2", "using verts_slim_in_G"], ["proof (prove)\nusing this:\n  v \\<in> pverts slim\n  v \\<notin> verts3 (with_proj G)\n  pverts slim \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) v \\<le> 2", "by (auto simp: verts3_def)"], ["proof (state)\nthis:\n  in_degree (with_proj G) v \\<le> 2\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> in_degree (with_proj slim) v \\<le> 2\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 5. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 6. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  in_degree (with_proj G) v \\<le> 2", "show \"in_degree slim v \\<le> 2\""], ["proof (prove)\nusing this:\n  in_degree (with_proj G) v \\<le> 2\n\ngoal (1 subgoal):\n 1. in_degree (with_proj slim) v \\<le> 2", "using subgraph_in_degree[OF subgraph_slim, of v]"], ["proof (prove)\nusing this:\n  in_degree (with_proj G) v \\<le> 2\n  in_degree (with_proj slim) v \\<le> in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. in_degree (with_proj slim) v \\<le> 2", "by fastforce"], ["proof (state)\nthis:\n  in_degree (with_proj slim) v \\<le> 2\n\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix w"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"w \\<in> pverts slim\" \"w \\<notin> verts3 G\""], ["proof (state)\nthis:\n  w \\<in> pverts slim\n  w \\<notin> verts3 (with_proj G)\n\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  w \\<in> pverts slim\n  w \\<notin> verts3 (with_proj G)", "obtain u p v where upv: \"(u, p, v) \\<in> slim_paths\" \"w \\<in> set (awalk_verts u p)\""], ["proof (prove)\nusing this:\n  w \\<in> pverts slim\n  w \\<notin> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. (\\<And>u p v.\n        \\<lbrakk>(u, p, v) \\<in> slim_paths;\n         w \\<in> set (pawalk_verts u p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: slim_simps slim_verts_def)"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "moreover"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)", "have \"S.gen_iapath (verts3 G) u p v\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n\ngoal (1 subgoal):\n 1. S.gen_iapath (verts3 (with_proj G)) u p v", "using slim_paths_in_slimG"], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n  (?u, ?p, ?v) \\<in> slim_paths \\<Longrightarrow>\n  S.gen_iapath (verts3 (with_proj G)) ?u ?p ?v \\<and> ?p \\<noteq> []\n\ngoal (1 subgoal):\n 1. S.gen_iapath (verts3 (with_proj G)) u p v", "by auto"], ["proof (state)\nthis:\n  S.gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (5 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> pverts slim;\n        v \\<notin> verts3 (with_proj G)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x p y.\n                            S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n                            v \\<in> set (pawalk_verts x p)\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 4. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 5. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "ultimately"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n  S.gen_iapath (verts3 (with_proj G)) u p v", "show \"\\<exists>x q y. S.gen_iapath (verts3 G) x q y\n      \\<and> w \\<in> set (awalk_verts x q)\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  w \\<in> set (pawalk_verts u p)\n  S.gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. \\<exists>x q y.\n       S.gen_iapath (verts3 (with_proj G)) x q y \\<and>\n       w \\<in> set (pawalk_verts x q)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x q y.\n     S.gen_iapath (verts3 (with_proj G)) x q y \\<and>\n     w \\<in> set (pawalk_verts x q)\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix u v"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"(u,v) \\<in> parcs slim\""], ["proof (state)\nthis:\n  (u, v) \\<in> parcs slim\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> parcs slim", "obtain x p y where \"(x, p, y) \\<in> slim_paths\" \"(u,v) \\<in> set p\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>(x, p, y) \\<in> slim_paths; (u, v) \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  (x, p, y) \\<in> slim_paths\n  (u, v) \\<in> set p\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (x, p, y) \\<in> slim_paths\n  (u, v) \\<in> set p", "have \"S.gen_iapath (verts3 G) x p y \\<and> (u,v) \\<in> set p\""], ["proof (prove)\nusing this:\n  (x, p, y) \\<in> slim_paths\n  (u, v) \\<in> set p\n\ngoal (1 subgoal):\n 1. S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p", "using slim_paths_in_slimG"], ["proof (prove)\nusing this:\n  (x, p, y) \\<in> slim_paths\n  (u, v) \\<in> set p\n  (?u, ?p, ?v) \\<in> slim_paths \\<Longrightarrow>\n  S.gen_iapath (verts3 (with_proj G)) ?u ?p ?v \\<and> ?p \\<noteq> []\n\ngoal (1 subgoal):\n 1. S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p", "by auto"], ["proof (state)\nthis:\n  S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       (a, b) \\<in> parcs slim \\<Longrightarrow>\n       \\<exists>x p y.\n          S.gen_iapath (verts3 (with_proj G)) x p y \\<and>\n          (a, b) \\<in> set p\n 3. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 4. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p", "show \"\\<exists>x p y. S.gen_iapath (verts3 G) x p y \\<and> (u,v) \\<in> set p\""], ["proof (prove)\nusing this:\n  S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p\n\ngoal (1 subgoal):\n 1. \\<exists>x p y.\n       S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p", "by blast"], ["proof (state)\nthis:\n  \\<exists>x p y.\n     S.gen_iapath (verts3 (with_proj G)) x p y \\<and> (u, v) \\<in> set p\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 3. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 3. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix u v"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 3. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"(u,v) \\<in> parcs slim\" \"fst (u,v) = snd (u,v)\""], ["proof (state)\nthis:\n  (u, v) \\<in> parcs slim\n  fst (u, v) = snd (u, v)\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> parcs slim; fst (a, b) = snd (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 3. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> parcs slim\n  fst (u, v) = snd (u, v)", "show False"], ["proof (prove)\nusing this:\n  (u, v) \\<in> parcs slim\n  fst (u, v) = snd (u, v)\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: S.no_loops')"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix u v p q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume paths: \"S.gen_iapath (verts3 G) u p v\"\n          \"S.gen_iapath (verts3 G) u q v\""], ["proof (state)\nthis:\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) u q v\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "have V: \"verts3 slim \\<subseteq> verts3 G\" \"verts3 G \\<subseteq> pverts slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj slim) \\<subseteq> verts3 (with_proj G) &&&\n    verts3 (with_proj G) \\<subseteq> pverts slim", "by (auto simp: verts3_slim_in_verts3)"], ["proof (state)\nthis:\n  verts3 (with_proj slim) \\<subseteq> verts3 (with_proj G)\n  verts3 (with_proj G) \\<subseteq> pverts slim\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "have \"p = [] \\<or> q = [] \\<Longrightarrow> p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<or> q = [] \\<Longrightarrow> p = q", "using paths"], ["proof (prove)\nusing this:\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) u q v\n\ngoal (1 subgoal):\n 1. p = [] \\<or> q = [] \\<Longrightarrow> p = q", "by (auto simp: S.gen_iapath_def dest: S.apath_ends)"], ["proof (state)\nthis:\n  p = [] \\<or> q = [] \\<Longrightarrow> p = q\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "moreover"], ["proof (state)\nthis:\n  p = [] \\<or> q = [] \\<Longrightarrow> p = q\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "{"], ["proof (state)\nthis:\n  p = [] \\<or> q = [] \\<Longrightarrow> p = q\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"p \\<noteq> []\" \"q \\<noteq> []\""], ["proof (state)\nthis:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "{"], ["proof (state)\nthis:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "fix u p v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "assume \"p \\<noteq> []\" and path: \"S.gen_iapath (verts3 G) u p v\""], ["proof (state)\nthis:\n  p \\<noteq> []\n  S.gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  S.gen_iapath (verts3 (with_proj G)) u p v", "obtain e where \"e \\<in> set p\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  S.gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. (\\<And>e. e \\<in> set p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis last_in_set)"], ["proof (state)\nthis:\n  e \\<in> set p\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  e \\<in> set p", "have \"e \\<in> parcs slim\""], ["proof (prove)\nusing this:\n  e \\<in> set p\n\ngoal (1 subgoal):\n 1. e \\<in> parcs slim", "using path"], ["proof (prove)\nusing this:\n  e \\<in> set p\n  S.gen_iapath (verts3 (with_proj G)) u p v\n\ngoal (1 subgoal):\n 1. e \\<in> parcs slim", "by (auto simp: S.gen_iapath_def S.apath_def)"], ["proof (state)\nthis:\n  e \\<in> parcs slim\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  e \\<in> parcs slim", "obtain x r y where \"(x,r,y) \\<in> slim_paths\" \"e \\<in> set r\""], ["proof (prove)\nusing this:\n  e \\<in> parcs slim\n\ngoal (1 subgoal):\n 1. (\\<And>x r y.\n        \\<lbrakk>(x, r, y) \\<in> slim_paths; e \\<in> set r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: slim_simps slim_arcs_def)"], ["proof (state)\nthis:\n  (x, r, y) \\<in> slim_paths\n  e \\<in> set r\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (x, r, y) \\<in> slim_paths\n  e \\<in> set r", "have \"S.gen_iapath (verts3 G) x r y\""], ["proof (prove)\nusing this:\n  (x, r, y) \\<in> slim_paths\n  e \\<in> set r\n\ngoal (1 subgoal):\n 1. S.gen_iapath (verts3 (with_proj G)) x r y", "by (metis slim_paths_in_slimG)"], ["proof (state)\nthis:\n  S.gen_iapath (verts3 (with_proj G)) x r y\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "with \\<open>e \\<in> set r\\<close> \\<open>e \\<in> set p\\<close> path"], ["proof (chain)\npicking this:\n  e \\<in> set r\n  e \\<in> set p\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) x r y", "have \"p = r\""], ["proof (prove)\nusing this:\n  e \\<in> set r\n  e \\<in> set p\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) x r y\n\ngoal (1 subgoal):\n 1. p = r", "by (auto intro: S.same_gen_iapath_by_common_arc[OF V])"], ["proof (state)\nthis:\n  p = r\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  p = r", "have \"x = u\" \"y = v\""], ["proof (prove)\nusing this:\n  p = r\n\ngoal (1 subgoal):\n 1. x = u &&& y = v", "using path \\<open>S.gen_iapath (verts3 G) x r y\\<close> \\<open>p = r\\<close> \\<open>p \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  p = r\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) x r y\n  p = r\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. x = u &&& y = v", "by (auto simp: S.gen_iapath_def S.apath_def dest: S.awalk_ends)"], ["proof (state)\nthis:\n  x = u\n  y = v\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  x = u\n  y = v", "have \"(u,p,v) \\<in> slim_paths\""], ["proof (prove)\nusing this:\n  x = u\n  y = v\n\ngoal (1 subgoal):\n 1. (u, p, v) \\<in> slim_paths", "using \\<open>p = r\\<close> \\<open>(x,r,y) \\<in> slim_paths\\<close>"], ["proof (prove)\nusing this:\n  x = u\n  y = v\n  p = r\n  (x, r, y) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. (u, p, v) \\<in> slim_paths", "by simp"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?pa2 \\<noteq> [];\n   S.gen_iapath (verts3 (with_proj G)) ?ua2 ?pa2 ?va2\\<rbrakk>\n  \\<Longrightarrow> (?ua2, ?pa2, ?va2) \\<in> slim_paths\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "note obt = this"], ["proof (state)\nthis:\n  \\<lbrakk>?pa2 \\<noteq> [];\n   S.gen_iapath (verts3 (with_proj G)) ?ua2 ?pa2 ?va2\\<rbrakk>\n  \\<Longrightarrow> (?ua2, ?pa2, ?va2) \\<in> slim_paths\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "from \\<open>p \\<noteq> []\\<close> \\<open>q \\<noteq> []\\<close> paths"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  q \\<noteq> []\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) u q v", "have \"(u,p,v) \\<in> slim_paths\" \"(u,q,v) \\<in> slim_paths\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n  S.gen_iapath (verts3 (with_proj G)) u p v\n  S.gen_iapath (verts3 (with_proj G)) u q v\n\ngoal (1 subgoal):\n 1. (u, p, v) \\<in> slim_paths &&& (u, q, v) \\<in> slim_paths", "by (auto intro: obt)"], ["proof (state)\nthis:\n  (u, p, v) \\<in> slim_paths\n  (u, q, v) \\<in> slim_paths\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "then"], ["proof (chain)\npicking this:\n  (u, p, v) \\<in> slim_paths\n  (u, q, v) \\<in> slim_paths", "have \"p = q\""], ["proof (prove)\nusing this:\n  (u, p, v) \\<in> slim_paths\n  (u, q, v) \\<in> slim_paths\n\ngoal (1 subgoal):\n 1. p = q", "by (auto simp: slim_paths_def)"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "}"], ["proof (state)\nthis:\n  \\<lbrakk>p \\<noteq> []; q \\<noteq> []\\<rbrakk> \\<Longrightarrow> p = q\n\ngoal (2 subgoals):\n 1. \\<And>u v p q.\n       \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) u p v;\n        S.gen_iapath (verts3 (with_proj G)) u q v\\<rbrakk>\n       \\<Longrightarrow> p = q\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "ultimately"], ["proof (chain)\npicking this:\n  p = [] \\<or> q = [] \\<Longrightarrow> p = q\n  \\<lbrakk>p \\<noteq> []; q \\<noteq> []\\<rbrakk> \\<Longrightarrow> p = q", "show \"p = q\""], ["proof (prove)\nusing this:\n  p = [] \\<or> q = [] \\<Longrightarrow> p = q\n  \\<lbrakk>p \\<noteq> []; q \\<noteq> []\\<rbrakk> \\<Longrightarrow> p = q\n\ngoal (1 subgoal):\n 1. p = q", "by metis"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "}"], ["proof (state)\nthis:\n  \\<lbrakk>S.gen_iapath (verts3 (with_proj G)) ?u2 ?p2 ?v2;\n   S.gen_iapath (verts3 (with_proj G)) ?u2 ?q2 ?v2\\<rbrakk>\n  \\<Longrightarrow> ?p2 = ?q2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow> x \\<in> pverts slim", "qed auto"], ["", "end"], ["", "context pair_sym_digraph begin"], ["", "lemma\n  assumes p: \"gen_iapath (pverts G) u p v\"\n  shows gen_iapath_triv_path: \"p = [(u,v)]\"\n    and gen_iapath_triv_arc: \"(u,v) \\<in> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [(u, v)] &&& (u, v) \\<in> parcs G", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [(u, v)]\n 2. (u, v) \\<in> parcs G", "have \"set (inner_verts p) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "have *: \"\\<And>A B :: 'a set. \\<lbrakk>A \\<subseteq> B; A \\<inter> B = {}\\<rbrakk> \\<Longrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>A \\<subseteq> B; A \\<inter> B = {}\\<rbrakk>\n       \\<Longrightarrow> A = {}", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<subseteq> ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> ?A = {}\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "have \"set (inner_verts p) = set (awalk_verts u p) - {u, v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (pawalk_verts u p) - {u, v}", "using p"], ["proof (prove)\nusing this:\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = set (pawalk_verts u p) - {u, v}", "by (simp add: set_inner_verts gen_iapath_def)"], ["proof (state)\nthis:\n  set (inner_verts p) = set (pawalk_verts u p) - {u, v}\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "also"], ["proof (state)\nthis:\n  set (inner_verts p) = set (pawalk_verts u p) - {u, v}\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "have \"\\<dots> \\<subseteq> pverts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) - {u, v} \\<subseteq> pverts G", "using p"], ["proof (prove)\nusing this:\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) - {u, v} \\<subseteq> pverts G", "unfolding gen_iapath_def apath_def awalk_conv"], ["proof (prove)\nusing this:\n  u \\<in> pverts G \\<and>\n  v \\<in> pverts G \\<and>\n  ((set (pawalk_verts u p) \\<subseteq> pverts G \\<and>\n    set p \\<subseteq> parcs G \\<and>\n    hd (pawalk_verts u p) = u \\<and>\n    last (pawalk_verts u p) = v \\<and> pcas u p v) \\<and>\n   distinct (pawalk_verts u p)) \\<and>\n  set (inner_verts p) \\<inter> pverts G = {} \\<and> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u p) - {u, v} \\<subseteq> pverts G", "by auto"], ["proof (state)\nthis:\n  set (pawalk_verts u p) - {u, v} \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "finally"], ["proof (chain)\npicking this:\n  set (inner_verts p) \\<subseteq> pverts G", "show ?thesis"], ["proof (prove)\nusing this:\n  set (inner_verts p) \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "using p"], ["proof (prove)\nusing this:\n  set (inner_verts p) \\<subseteq> pverts G\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. set (inner_verts p) = {}", "by (rule_tac *) (auto simp: gen_iapath_def)"], ["proof (state)\nthis:\n  set (inner_verts p) = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (inner_verts p) = {}\n\ngoal (2 subgoals):\n 1. p = [(u, v)]\n 2. (u, v) \\<in> parcs G", "then"], ["proof (chain)\npicking this:\n  set (inner_verts p) = {}", "have \"inner_verts p = []\""], ["proof (prove)\nusing this:\n  set (inner_verts p) = {}\n\ngoal (1 subgoal):\n 1. inner_verts p = []", "by simp"], ["proof (state)\nthis:\n  inner_verts p = []\n\ngoal (2 subgoals):\n 1. p = [(u, v)]\n 2. (u, v) \\<in> parcs G", "then"], ["proof (chain)\npicking this:\n  inner_verts p = []", "show \"p = [(u,v)]\""], ["proof (prove)\nusing this:\n  inner_verts p = []\n\ngoal (1 subgoal):\n 1. p = [(u, v)]", "using p"], ["proof (prove)\nusing this:\n  inner_verts p = []\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. p = [(u, v)]", "by (cases p) (auto simp: gen_iapath_def apath_def inner_verts_def split: if_split_asm)"], ["proof (state)\nthis:\n  p = [(u, v)]\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G", "then"], ["proof (chain)\npicking this:\n  p = [(u, v)]", "show \"(u,v) \\<in> parcs G\""], ["proof (prove)\nusing this:\n  p = [(u, v)]\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G", "using p"], ["proof (prove)\nusing this:\n  p = [(u, v)]\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G", "by (auto simp: gen_iapath_def apath_def)"], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gen_contr_triv:\n  assumes \"is_slim V\" \"pverts G = V\" shows \"gen_contr_graph G V = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "let ?gcg = \"gen_contr_graph G V\""], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "from assms"], ["proof (chain)\npicking this:\n  is_slim V\n  pverts G = V", "have \"pverts ?gcg = pverts G\""], ["proof (prove)\nusing this:\n  is_slim V\n  pverts G = V\n\ngoal (1 subgoal):\n 1. pverts (gen_contr_graph (with_proj G) V) = pverts G", "by (auto simp: gen_contr_graph_def is_slim_def)"], ["proof (state)\nthis:\n  pverts (gen_contr_graph (with_proj G) V) = pverts G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "moreover"], ["proof (state)\nthis:\n  pverts (gen_contr_graph (with_proj G) V) = pverts G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "have \"parcs ?gcg = parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parcs (gen_contr_graph (with_proj G) V) = parcs G", "proof (rule set_eqI, safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> parcs (gen_contr_graph (with_proj G) V) \\<Longrightarrow>\n       (a, b) \\<in> parcs G\n 2. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "fix u v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> parcs (gen_contr_graph (with_proj G) V) \\<Longrightarrow>\n       (a, b) \\<in> parcs G\n 2. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "assume \"(u,v) \\<in> parcs ?gcg\""], ["proof (state)\nthis:\n  (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> parcs (gen_contr_graph (with_proj G) V) \\<Longrightarrow>\n       (a, b) \\<in> parcs G\n 2. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)", "obtain p where \"gen_iapath V u p v\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)\n\ngoal (1 subgoal):\n 1. (\\<And>p. gen_iapath V u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  gen_iapath V u p v\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> parcs (gen_contr_graph (with_proj G) V) \\<Longrightarrow>\n       (a, b) \\<in> parcs G\n 2. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "then"], ["proof (chain)\npicking this:\n  gen_iapath V u p v", "show \"(u,v) \\<in> parcs G\""], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G", "using gen_iapath_triv_arc \\<open>pverts G = V\\<close>"], ["proof (prove)\nusing this:\n  gen_iapath V u p v\n  gen_iapath (pverts G) ?u ?p ?v \\<Longrightarrow> (?u, ?v) \\<in> parcs G\n  pverts G = V\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "assume \"(u,v) \\<in> parcs G\""], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "with assms"], ["proof (chain)\npicking this:\n  is_slim V\n  pverts G = V\n  (u, v) \\<in> parcs G", "obtain x p y where path: \"gen_iapath V x p y\" \"(u,v) \\<in> set p\" \"u \\<noteq> v\""], ["proof (prove)\nusing this:\n  is_slim V\n  pverts G = V\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>gen_iapath V x p y; (u, v) \\<in> set p;\n         u \\<noteq> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: is_slim_def)"], ["proof (state)\nthis:\n  gen_iapath V x p y\n  (u, v) \\<in> set p\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "with \\<open>pverts G = V\\<close>"], ["proof (chain)\npicking this:\n  pverts G = V\n  gen_iapath V x p y\n  (u, v) \\<in> set p\n  u \\<noteq> v", "have \"p = [(x,y)]\""], ["proof (prove)\nusing this:\n  pverts G = V\n  gen_iapath V x p y\n  (u, v) \\<in> set p\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. p = [(x, y)]", "by (intro gen_iapath_triv_path) auto"], ["proof (state)\nthis:\n  p = [(x, y)]\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs G \\<Longrightarrow>\n       (a, b) \\<in> parcs (gen_contr_graph (with_proj G) V)", "then"], ["proof (chain)\npicking this:\n  p = [(x, y)]", "show \"(u,v) \\<in> parcs ?gcg\""], ["proof (prove)\nusing this:\n  p = [(x, y)]\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)", "using path"], ["proof (prove)\nusing this:\n  p = [(x, y)]\n  gen_iapath V x p y\n  (u, v) \\<in> set p\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  (u, v) \\<in> parcs (gen_contr_graph (with_proj G) V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  parcs (gen_contr_graph (with_proj G) V) = parcs G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "ultimately"], ["proof (chain)\npicking this:\n  pverts (gen_contr_graph (with_proj G) V) = pverts G\n  parcs (gen_contr_graph (with_proj G) V) = parcs G", "show \"?gcg = G\""], ["proof (prove)\nusing this:\n  pverts (gen_contr_graph (with_proj G) V) = pverts G\n  parcs (gen_contr_graph (with_proj G) V) = parcs G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) V = G", "by auto"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj G) V = G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_slim_no_loops:\n  assumes \"is_slim V\" \"a \\<in> arcs G\" shows \"fst a \\<noteq> snd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst a \\<noteq> snd a", "using assms"], ["proof (prove)\nusing this:\n  is_slim V\n  a \\<in> arcs (with_proj G)\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> snd a", "by (auto simp: is_slim_def)"], ["", "end"], ["", "subsection \\<open>Contraction Preserves Kuratowski-Subgraph-Property\\<close>"], ["", "lemma (in pair_pseudo_graph) in_degree_contr:\n  assumes \"v \\<in> V\" and V: \"verts3 G \\<subseteq> V\" \"V \\<subseteq> verts G\"\n  shows \"in_degree (gen_contr_graph G V) v \\<le> in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have fin: \"finite {(u, p). gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(u, p). gen_iapath V u p v}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {(u, p). gen_iapath V u p v}", "have \"{(u, p). gen_iapath V u p v} \\<subseteq> (\\<lambda>(u,p,_). (u,p)) ` {(u,p,v). apath u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, p). gen_iapath V u p v}\n    \\<subseteq> (\\<lambda>(u, p, uu_). (u, p)) ` {(u, p, v). apath u p v}", "by (force simp: gen_iapath_def)"], ["proof (state)\nthis:\n  {(u, p). gen_iapath V u p v}\n  \\<subseteq> (\\<lambda>(u, p, uu_). (u, p)) ` {(u, p, v). apath u p v}\n\ngoal (1 subgoal):\n 1. finite {(u, p). gen_iapath V u p v}", "with apaths_finite_triple"], ["proof (chain)\npicking this:\n  finite {(u, p, v). apath u p v}\n  {(u, p). gen_iapath V u p v}\n  \\<subseteq> (\\<lambda>(u, p, uu_). (u, p)) ` {(u, p, v). apath u p v}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {(u, p, v). apath u p v}\n  {(u, p). gen_iapath V u p v}\n  \\<subseteq> (\\<lambda>(u, p, uu_). (u, p)) ` {(u, p, v). apath u p v}\n\ngoal (1 subgoal):\n 1. finite {(u, p). gen_iapath V u p v}", "by (rule finite_surj)"], ["proof (state)\nthis:\n  finite {(u, p). gen_iapath V u p v}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have io_snd: \"inj_on snd {(u,p). gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on snd {(u, p). gen_iapath V u p v}", "by (rule inj_onI) (auto simp: gen_iapath_def apath_def dest: awalk_ends)"], ["proof (state)\nthis:\n  inj_on snd {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have io_last: \"inj_on last {p. \\<exists>u. gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on last {p. \\<exists>u. gen_iapath V u p v}", "proof (rule inj_onI, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y u ua.\n       \\<lbrakk>last x = last y; gen_iapath V u x v;\n        gen_iapath V ua y v\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix u1 u2 p1 p2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y u ua.\n       \\<lbrakk>last x = last y; gen_iapath V u x v;\n        gen_iapath V ua y v\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume A: \"last p1 = last p2\" and B: \"gen_iapath V u1 p1 v\" \"gen_iapath V u2 p2 v\""], ["proof (state)\nthis:\n  last p1 = last p2\n  gen_iapath V u1 p1 v\n  gen_iapath V u2 p2 v\n\ngoal (1 subgoal):\n 1. \\<And>x y u ua.\n       \\<lbrakk>last x = last y; gen_iapath V u x v;\n        gen_iapath V ua y v\\<rbrakk>\n       \\<Longrightarrow> x = y", "from B"], ["proof (chain)\npicking this:\n  gen_iapath V u1 p1 v\n  gen_iapath V u2 p2 v", "have \"last p1 \\<in> set p1\" \"last p2 \\<in> set p2\""], ["proof (prove)\nusing this:\n  gen_iapath V u1 p1 v\n  gen_iapath V u2 p2 v\n\ngoal (1 subgoal):\n 1. last p1 \\<in> set p1 &&& last p2 \\<in> set p2", "by (auto simp: gen_iapath_def)"], ["proof (state)\nthis:\n  last p1 \\<in> set p1\n  last p2 \\<in> set p2\n\ngoal (1 subgoal):\n 1. \\<And>x y u ua.\n       \\<lbrakk>last x = last y; gen_iapath V u x v;\n        gen_iapath V ua y v\\<rbrakk>\n       \\<Longrightarrow> x = y", "with A"], ["proof (chain)\npicking this:\n  last p1 = last p2\n  last p1 \\<in> set p1\n  last p2 \\<in> set p2", "have \"last p1 \\<in> set p1\" \"last p1 \\<in> set p2\""], ["proof (prove)\nusing this:\n  last p1 = last p2\n  last p1 \\<in> set p1\n  last p2 \\<in> set p2\n\ngoal (1 subgoal):\n 1. last p1 \\<in> set p1 &&& last p1 \\<in> set p2", "by simp_all"], ["proof (state)\nthis:\n  last p1 \\<in> set p1\n  last p1 \\<in> set p2\n\ngoal (1 subgoal):\n 1. \\<And>x y u ua.\n       \\<lbrakk>last x = last y; gen_iapath V u x v;\n        gen_iapath V ua y v\\<rbrakk>\n       \\<Longrightarrow> x = y", "with V[simplified] B"], ["proof (chain)\npicking this:\n  verts3 (with_proj G) \\<subseteq> V\n  V \\<subseteq> pverts G\n  gen_iapath V u1 p1 v\n  gen_iapath V u2 p2 v\n  last p1 \\<in> set p1\n  last p1 \\<in> set p2", "show \"p1 = p2\""], ["proof (prove)\nusing this:\n  verts3 (with_proj G) \\<subseteq> V\n  V \\<subseteq> pverts G\n  gen_iapath V u1 p1 v\n  gen_iapath V u2 p2 v\n  last p1 \\<in> set p1\n  last p1 \\<in> set p2\n\ngoal (1 subgoal):\n 1. p1 = p2", "by (rule same_gen_iapath_by_common_arc)"], ["proof (state)\nthis:\n  p1 = p2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on last {p. \\<exists>u. gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"in_degree (gen_contr_graph G V) v = card ((\\<lambda>(u,_). (u,v)) ` {(u,p). gen_iapath V u p v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n    card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n    card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})", "have \"in_arcs (gen_contr_graph G V) v = (\\<lambda>(u,_). (u,v)) ` {(u,p). gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v =\n    (\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v}", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v =\n  (\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n    card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v =\n  (\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v}", "show ?thesis"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v =\n  (\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n    card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v =\n  (\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj (gen_contr_graph (with_proj G) V)) v) =\n    card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})", "by simp"], ["proof (state)\nthis:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n  card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n  card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "also"], ["proof (state)\nthis:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v =\n  card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"\\<dots> \\<le> card {(u,p). gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n    \\<le> card {(u, p). gen_iapath V u p v}", "using fin"], ["proof (prove)\nusing this:\n  finite {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n    \\<le> card {(u, p). gen_iapath V u p v}", "by (rule card_image_le)"], ["proof (state)\nthis:\n  card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n  \\<le> card {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "also"], ["proof (state)\nthis:\n  card ((\\<lambda>(u, uu_). (u, v)) ` {(u, p). gen_iapath V u p v})\n  \\<le> card {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"\\<dots> = card (snd ` {(u,p). gen_iapath V u p v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {(u, p). gen_iapath V u p v} =\n    card (snd ` {(u, p). gen_iapath V u p v})", "using io_snd"], ["proof (prove)\nusing this:\n  inj_on snd {(u, p). gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. card {(u, p). gen_iapath V u p v} =\n    card (snd ` {(u, p). gen_iapath V u p v})", "by (rule card_image[symmetric])"], ["proof (state)\nthis:\n  card {(u, p). gen_iapath V u p v} =\n  card (snd ` {(u, p). gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "also"], ["proof (state)\nthis:\n  card {(u, p). gen_iapath V u p v} =\n  card (snd ` {(u, p). gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"snd ` {(u,p). gen_iapath V u p v} = {p. \\<exists>u. gen_iapath V u p v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` {(u, p). gen_iapath V u p v} = {p. \\<exists>u. gen_iapath V u p v}", "by (auto intro: rev_image_eqI)"], ["proof (state)\nthis:\n  snd ` {(u, p). gen_iapath V u p v} = {p. \\<exists>u. gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "also"], ["proof (state)\nthis:\n  snd ` {(u, p). gen_iapath V u p v} = {p. \\<exists>u. gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"card \\<dots> = card (last ` ...)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. \\<exists>u. gen_iapath V u p v} =\n    card (last ` {p. \\<exists>u. gen_iapath V u p v})", "using io_last"], ["proof (prove)\nusing this:\n  inj_on last {p. \\<exists>u. gen_iapath V u p v}\n\ngoal (1 subgoal):\n 1. card {p. \\<exists>u. gen_iapath V u p v} =\n    card (last ` {p. \\<exists>u. gen_iapath V u p v})", "by (rule card_image[symmetric])"], ["proof (state)\nthis:\n  card {p. \\<exists>u. gen_iapath V u p v} =\n  card (last ` {p. \\<exists>u. gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "also"], ["proof (state)\nthis:\n  card {p. \\<exists>u. gen_iapath V u p v} =\n  card (last ` {p. \\<exists>u. gen_iapath V u p v})\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "have \"\\<dots> \\<le> in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (last ` {p. \\<exists>u. gen_iapath V u p v})\n    \\<le> in_degree (with_proj G) v", "unfolding in_degree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (last ` {p. \\<exists>u. gen_iapath V u p v})\n    \\<le> card (in_arcs (with_proj G) v)", "proof (rule card_mono)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (in_arcs (with_proj G) v)\n 2. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "show \"last ` {p. \\<exists>u. gen_iapath V u p v} \\<subseteq> in_arcs G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "have \"\\<And>u p. awalk u p v \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> last p \\<in> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u p.\n       \\<lbrakk>awalk u p v; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> last p \\<in> parcs G", "by (auto simp: awalk_def)"], ["proof (state)\nthis:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "{"], ["proof (state)\nthis:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "fix u p"], ["proof (state)\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "assume \"awalk u p v\" \"p \\<noteq> []\""], ["proof (state)\nthis:\n  awalk u p v\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "then"], ["proof (chain)\npicking this:\n  awalk u p v\n  p \\<noteq> []", "have \"snd (last p) = v\""], ["proof (prove)\nusing this:\n  awalk u p v\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. snd (last p) = v", "by (induct p arbitrary: u) (auto simp: awalk_simps)"], ["proof (state)\nthis:\n  snd (last p) = v\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "}"], ["proof (state)\nthis:\n  \\<lbrakk>awalk ?u2 ?p2 v; ?p2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> snd (last ?p2) = v\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n  \\<lbrakk>awalk ?u2 ?p2 v; ?p2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> snd (last ?p2) = v", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n  \\<lbrakk>awalk ?u2 ?p2 v; ?p2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> snd (last ?p2) = v\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> in_arcs (with_proj G) v", "unfolding in_arcs_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>awalk ?u ?p v; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> last ?p \\<in> parcs G\n  \\<lbrakk>awalk ?u2 ?p2 v; ?p2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> snd (last ?p2) = v\n\ngoal (1 subgoal):\n 1. last ` {p. \\<exists>u. gen_iapath V u p v}\n    \\<subseteq> {e \\<in> arcs (with_proj G). head (with_proj G) e = v}", "by (auto simp: gen_iapath_def apath_def)"], ["proof (state)\nthis:\n  last ` {p. \\<exists>u. gen_iapath V u p v}\n  \\<subseteq> in_arcs (with_proj G) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  last ` {p. \\<exists>u. gen_iapath V u p v}\n  \\<subseteq> in_arcs (with_proj G) v\n\ngoal (1 subgoal):\n 1. finite (in_arcs (with_proj G) v)", "qed auto"], ["proof (state)\nthis:\n  card (last ` {p. \\<exists>u. gen_iapath V u p v})\n  \\<le> in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "finally"], ["proof (chain)\npicking this:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n  \\<le> in_degree (with_proj G) v", "show ?thesis"], ["proof (prove)\nusing this:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n  \\<le> in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n    \\<le> in_degree (with_proj G) v", "."], ["proof (state)\nthis:\n  in_degree (with_proj (gen_contr_graph (with_proj G) V)) v\n  \\<le> in_degree (with_proj G) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_graph) contracted_no_degree2_simp:\n  assumes subd: \"subdivision_pair G H\"\n  assumes two_less_deg2: \"verts3 G = pverts G\"\n  shows \"contr_graph H = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G", "using subd"], ["proof (prove)\nusing this:\n  subdivision_pair G H\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G", "proof (induct rule: subdivision_pair_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "case base"], ["proof (state)\nthis:\n  pair_bidirected_digraph G\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "{"], ["proof (state)\nthis:\n  pair_bidirected_digraph G\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "fix e"], ["proof (state)\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "assume \"e \\<in> parcs G\""], ["proof (state)\nthis:\n  e \\<in> parcs G\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "then"], ["proof (chain)\npicking this:\n  e \\<in> parcs G", "have \"gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e)\" \"e \\<in> set [(fst e, snd e)]\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n\ngoal (1 subgoal):\n 1. gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e) &&&\n    e \\<in> set [(fst e, snd e)]", "using no_loops[of \"(fst e, snd e)\"]"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  (fst e, snd e) \\<in> parcs G \\<Longrightarrow>\n  fst (fst e, snd e) \\<noteq> snd (fst e, snd e)\n\ngoal (1 subgoal):\n 1. gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e) &&&\n    e \\<in> set [(fst e, snd e)]", "by (auto simp: gen_iapath_def apath_simps )"], ["proof (state)\nthis:\n  gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e)\n  e \\<in> set [(fst e, snd e)]\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "then"], ["proof (chain)\npicking this:\n  gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e)\n  e \\<in> set [(fst e, snd e)]", "have \"\\<exists>u p v. gen_iapath (pverts G) u p v \\<and> e \\<in> set p\""], ["proof (prove)\nusing this:\n  gen_iapath (pverts G) (fst e) [(fst e, snd e)] (snd e)\n  e \\<in> set [(fst e, snd e)]\n\ngoal (1 subgoal):\n 1. \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> e \\<in> set p", "by blast"], ["proof (state)\nthis:\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> e \\<in> set p\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "}"], ["proof (state)\nthis:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "moreover"], ["proof (state)\nthis:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "{"], ["proof (state)\nthis:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "fix u p v"], ["proof (state)\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "assume \"gen_iapath (pverts G) u p v\""], ["proof (state)\nthis:\n  gen_iapath (pverts G) u p v\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "from \\<open>gen_iapath _ u p v\\<close>"], ["proof (chain)\npicking this:\n  gen_iapath (pverts G) u p v", "have \"p = [(u,v)]\""], ["proof (prove)\nusing this:\n  gen_iapath (pverts G) u p v\n\ngoal (1 subgoal):\n 1. p = [(u, v)]", "unfolding gen_iapath_def apath_def"], ["proof (prove)\nusing this:\n  u \\<in> pverts G \\<and>\n  v \\<in> pverts G \\<and>\n  (awalk u p v \\<and> distinct (pawalk_verts u p)) \\<and>\n  set (inner_verts p) \\<inter> pverts G = {} \\<and> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. p = [(u, v)]", "by safe (cases p, case_tac [2] list, auto simp: awalk_simps inner_verts_def)"], ["proof (state)\nthis:\n  p = [(u, v)]\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "}"], ["proof (state)\nthis:\n  gen_iapath (pverts G) ?u2 ?p2 ?v2 \\<Longrightarrow> ?p2 = [(?u2, ?v2)]\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "ultimately"], ["proof (chain)\npicking this:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n  gen_iapath (pverts G) ?u2 ?p2 ?v2 \\<Longrightarrow> ?p2 = [(?u2, ?v2)]", "have \"is_slim (verts3 G)\""], ["proof (prove)\nusing this:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n  gen_iapath (pverts G) ?u2 ?p2 ?v2 \\<Longrightarrow> ?p2 = [(?u2, ?v2)]\n\ngoal (1 subgoal):\n 1. is_slim (verts3 (with_proj G))", "unfolding is_slim_def two_less_deg2"], ["proof (prove)\nusing this:\n  ?e2 \\<in> parcs G \\<Longrightarrow>\n  \\<exists>u p v. gen_iapath (pverts G) u p v \\<and> ?e2 \\<in> set p\n  gen_iapath (pverts G) ?u2 ?p2 ?v2 \\<Longrightarrow> ?p2 = [(?u2, ?v2)]\n\ngoal (1 subgoal):\n 1. (\\<forall>v\\<in>pverts G.\n        v \\<in> pverts G \\<or>\n        in_degree (with_proj G) v \\<le> 2 \\<and>\n        (\\<exists>x p y.\n            gen_iapath (pverts G) x p y \\<and>\n            v \\<in> set (pawalk_verts x p))) \\<and>\n    (\\<forall>e\\<in>parcs G.\n        fst e \\<noteq> snd e \\<and>\n        (\\<exists>x p y.\n            gen_iapath (pverts G) x p y \\<and> e \\<in> set p)) \\<and>\n    (\\<forall>u v p q.\n        gen_iapath (pverts G) u p v \\<and>\n        gen_iapath (pverts G) u q v \\<longrightarrow>\n        p = q) \\<and>\n    pverts G \\<subseteq> pverts G", "by (blast dest: no_loops_in_iapath)"], ["proof (state)\nthis:\n  is_slim (verts3 (with_proj G))\n\ngoal (2 subgoals):\n 1. pair_bidirected_digraph G \\<Longrightarrow>\n    gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n 2. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "then"], ["proof (chain)\npicking this:\n  is_slim (verts3 (with_proj G))", "show ?case"], ["proof (prove)\nusing this:\n  is_slim (verts3 (with_proj G))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G", "by (simp add: gen_contr_triv two_less_deg2)"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj G) (verts3 (with_proj G)) = G\n\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "case (divide e w H)"], ["proof (state)\nthis:\n  e \\<in> parcs H\n  w \\<notin> pverts H\n  subdivision_pair G H\n  gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\n\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "let ?sH = \"subdivide H e w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "from \\<open>subdivision_pair G H\\<close>"], ["proof (chain)\npicking this:\n  subdivision_pair G H", "interpret H: pair_bidirected_digraph H"], ["proof (prove)\nusing this:\n  subdivision_pair G H\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph H", "by (rule bidirected_digraphI_subdivision)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "from divide(1,2)"], ["proof (chain)\npicking this:\n  e \\<in> parcs H\n  w \\<notin> pverts H", "interpret S: pair_sym_digraph ?sH"], ["proof (prove)\nusing this:\n  e \\<in> parcs H\n  w \\<notin> pverts H\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide H e w)", "by (rule H.pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "obtain u v where e_conv:\"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "have \"contr_graph ?sH = contr_graph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "have V_cond: \"verts3 H \\<subseteq> pverts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj H) \\<subseteq> pverts H", "by (auto simp: verts3_def)"], ["proof (state)\nthis:\n  verts3 (with_proj H) \\<subseteq> pverts H\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "have \"verts3 H = verts3 ?sH\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj H) = verts3 (with_proj (subdivide H e w))", "using divide"], ["proof (prove)\nusing this:\n  e \\<in> parcs H\n  w \\<notin> pverts H\n  subdivision_pair G H\n  gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\n\ngoal (1 subgoal):\n 1. verts3 (with_proj H) = verts3 (with_proj (subdivide H e w))", "by (simp add: H.verts3_subdivide)"], ["proof (state)\nthis:\n  verts3 (with_proj H) = verts3 (with_proj (subdivide H e w))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "then"], ["proof (chain)\npicking this:\n  verts3 (with_proj H) = verts3 (with_proj (subdivide H e w))", "have v: \"pverts (contr_graph ?sH) = pverts (contr_graph H)\""], ["proof (prove)\nusing this:\n  verts3 (with_proj H) = verts3 (with_proj (subdivide H e w))\n\ngoal (1 subgoal):\n 1. pverts\n     (gen_contr_graph (with_proj (subdivide H e w))\n       (verts3 (with_proj (subdivide H e w)))) =\n    pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "moreover"], ["proof (state)\nthis:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "then"], ["proof (chain)\npicking this:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))", "have \"parcs (contr_graph ?sH) = parcs (contr_graph H)\""], ["proof (prove)\nusing this:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n\ngoal (1 subgoal):\n 1. parcs\n     (gen_contr_graph (with_proj (subdivide H e w))\n       (verts3 (with_proj (subdivide H e w)))) =\n    parcs (gen_contr_graph (with_proj H) (verts3 (with_proj H)))", "unfolding gen_contr_graph_def"], ["proof (prove)\nusing this:\n  pverts\n   \\<lparr>pverts = verts3 (with_proj (subdivide H e w)),\n      parcs =\n        {(u, v).\n         \\<exists>p.\n            S.gen_iapath (verts3 (with_proj (subdivide H e w))) u p\n             v}\\<rparr> =\n  pverts\n   \\<lparr>pverts = verts3 (with_proj H),\n      parcs =\n        {(u, v).\n         \\<exists>p. H.gen_iapath (verts3 (with_proj H)) u p v}\\<rparr>\n\ngoal (1 subgoal):\n 1. parcs\n     \\<lparr>pverts = verts3 (with_proj (subdivide H e w)),\n        parcs =\n          {(u, v).\n           \\<exists>p.\n              S.gen_iapath (verts3 (with_proj (subdivide H e w))) u p\n               v}\\<rparr> =\n    parcs\n     \\<lparr>pverts = verts3 (with_proj H),\n        parcs =\n          {(u, v).\n           \\<exists>p. H.gen_iapath (verts3 (with_proj H)) u p v}\\<rparr>", "by (auto dest: H.gen_iapath_co_path[OF divide(1,2) V_cond]\n          H.gen_iapath_sd_path[OF divide(1,2) V_cond])"], ["proof (state)\nthis:\n  parcs\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  parcs (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "ultimately"], ["proof (chain)\npicking this:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n  parcs\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  parcs (gen_contr_graph (with_proj H) (verts3 (with_proj H)))", "show ?thesis"], ["proof (prove)\nusing this:\n  pverts\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  pverts (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n  parcs\n   (gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w)))) =\n  parcs (gen_contr_graph (with_proj H) (verts3 (with_proj H)))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    gen_contr_graph (with_proj H) (verts3 (with_proj H))", "by auto"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  gen_contr_graph (with_proj H) (verts3 (with_proj H))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  gen_contr_graph (with_proj H) (verts3 (with_proj H))\n\ngoal (1 subgoal):\n 1. \\<And>e w H.\n       \\<lbrakk>e \\<in> parcs H; w \\<notin> pverts H; subdivision_pair G H;\n        gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\\<rbrakk>\n       \\<Longrightarrow> gen_contr_graph (with_proj (subdivide H e w))\n                          (verts3 (with_proj (subdivide H e w))) =\n                         G", "then"], ["proof (chain)\npicking this:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  gen_contr_graph (with_proj H) (verts3 (with_proj H))", "show ?case"], ["proof (prove)\nusing this:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  gen_contr_graph (with_proj H) (verts3 (with_proj H))\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    G", "using divide"], ["proof (prove)\nusing this:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  gen_contr_graph (with_proj H) (verts3 (with_proj H))\n  e \\<in> parcs H\n  w \\<notin> pverts H\n  subdivision_pair G H\n  gen_contr_graph (with_proj H) (verts3 (with_proj H)) = G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide H e w))\n     (verts3 (with_proj (subdivide H e w))) =\n    G", "by simp"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide H e w))\n   (verts3 (with_proj (subdivide H e w))) =\n  G\n\ngoal:\nNo subgoals!", "qed"], ["", "(* could be generalized *)"], ["", "lemma verts3_K33:\n  assumes \"K\\<^bsub>3,3\\<^esub> (with_proj G)\"\n  shows \"verts3 G = verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "assume \"v \\<in> pverts G\""], ["proof (state)\nthis:\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>3,3\\<^esub> (with_proj G)", "obtain U V where cards: \"card U = 3\" \"card V=3\"\n      and UV: \"U \\<inter> V = {}\" \"pverts G = U \\<union> V\" \"parcs G = U \\<times> V \\<union> V \\<times> U\""], ["proof (prove)\nusing this:\n  K\\<^bsub>3,3\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. (\\<And>U V.\n        \\<lbrakk>card U = 3; card V = 3; U \\<inter> V = {};\n         pverts G = U \\<union> V;\n         parcs G = U \\<times> V \\<union> V \\<times> U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding complete_bipartite_digraph_pair_def"], ["proof (prove)\nusing this:\n  finite (pverts G) \\<and>\n  (\\<exists>U V.\n      pverts G = U \\<union> V \\<and>\n      U \\<inter> V = {} \\<and>\n      card U = 3 \\<and>\n      card V = 3 \\<and> parcs G = U \\<times> V \\<union> V \\<times> U)\n\ngoal (1 subgoal):\n 1. (\\<And>U V.\n        \\<lbrakk>card U = 3; card V = 3; U \\<inter> V = {};\n         pverts G = U \\<union> V;\n         parcs G = U \\<times> V \\<union> V \\<times> U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  card U = 3\n  card V = 3\n  U \\<inter> V = {}\n  pverts G = U \\<union> V\n  parcs G = U \\<times> V \\<union> V \\<times> U\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"2 < in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "proof (cases \"v \\<in> U\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> U \\<Longrightarrow> 2 < in_degree (with_proj G) v\n 2. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "case True"], ["proof (state)\nthis:\n  v \\<in> U\n\ngoal (2 subgoals):\n 1. v \\<in> U \\<Longrightarrow> 2 < in_degree (with_proj G) v\n 2. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> U", "have \"in_arcs G v = V \\<times> {v}\""], ["proof (prove)\nusing this:\n  v \\<in> U\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) v = V \\<times> {v}", "using UV"], ["proof (prove)\nusing this:\n  v \\<in> U\n  U \\<inter> V = {}\n  pverts G = U \\<union> V\n  parcs G = U \\<times> V \\<union> V \\<times> U\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) v = V \\<times> {v}", "by fastforce"], ["proof (state)\nthis:\n  in_arcs (with_proj G) v = V \\<times> {v}\n\ngoal (2 subgoals):\n 1. v \\<in> U \\<Longrightarrow> 2 < in_degree (with_proj G) v\n 2. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj G) v = V \\<times> {v}", "show ?thesis"], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) v = V \\<times> {v}\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "using cards"], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) v = V \\<times> {v}\n  card U = 3\n  card V = 3\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "by (auto simp: card_cartesian_product in_degree_def)"], ["proof (state)\nthis:\n  2 < in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> U\n\ngoal (1 subgoal):\n 1. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> U", "have \"in_arcs G v = U \\<times> {v}\""], ["proof (prove)\nusing this:\n  v \\<notin> U\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) v = U \\<times> {v}", "using \\<open>v \\<in> _\\<close> UV"], ["proof (prove)\nusing this:\n  v \\<notin> U\n  v \\<in> pverts G\n  U \\<inter> V = {}\n  pverts G = U \\<union> V\n  parcs G = U \\<times> V \\<union> V \\<times> U\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) v = U \\<times> {v}", "by fastforce"], ["proof (state)\nthis:\n  in_arcs (with_proj G) v = U \\<times> {v}\n\ngoal (1 subgoal):\n 1. v \\<notin> U \\<Longrightarrow> 2 < in_degree (with_proj G) v", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj G) v = U \\<times> {v}", "show ?thesis"], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) v = U \\<times> {v}\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "using cards"], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) v = U \\<times> {v}\n  card U = 3\n  card V = 3\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "by (auto simp: card_cartesian_product in_degree_def)"], ["proof (state)\nthis:\n  2 < in_degree (with_proj G) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 < in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "}"], ["proof (state)\nthis:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "then"], ["proof (chain)\npicking this:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "by (auto simp: verts3_def)"], ["proof (state)\nthis:\n  verts3 (with_proj G) = verts (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* could be generalized *)"], ["", "lemma verts3_K5:\n  assumes \"K\\<^bsub>5\\<^esub> (with_proj G)\"\n  shows \"verts3 G = verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "interpret pgG: pair_graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. pair_graph G", "by (rule pair_graphI_complete)"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "assume \"v \\<in> pverts G\""], ["proof (state)\nthis:\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"2 < (4 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 < 4", "by simp"], ["proof (state)\nthis:\n  2 < 4\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "also"], ["proof (state)\nthis:\n  2 < 4\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"4 = card (pverts G - {v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 = card (pverts G - {v})", "using assms \\<open>v \\<in> pverts G\\<close>"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> (with_proj G)\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. 4 = card (pverts G - {v})", "unfolding complete_digraph_def"], ["proof (prove)\nusing this:\n  graph (with_proj G) \\<and>\n  card (verts (with_proj G)) = 5 \\<and>\n  arcs_ends (with_proj G) =\n  {(u, v).\n   (u, v) \\<in> verts (with_proj G) \\<times> verts (with_proj G) \\<and>\n   u \\<noteq> v}\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. 4 = card (pverts G - {v})", "by auto"], ["proof (state)\nthis:\n  4 = card (pverts G - {v})\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "also"], ["proof (state)\nthis:\n  4 = card (pverts G - {v})\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"pverts G - {v} = {u \\<in> pverts G. u \\<noteq> v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts G - {v} = {u \\<in> pverts G. u \\<noteq> v}", "by auto"], ["proof (state)\nthis:\n  pverts G - {v} = {u \\<in> pverts G. u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "also"], ["proof (state)\nthis:\n  pverts G - {v} = {u \\<in> pverts G. u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"card \\<dots> = card ({u \\<in> pverts G. u \\<noteq> v} \\<times> {v})\" (is \"_ = card ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {u \\<in> pverts G. u \\<noteq> v} =\n    card ({u \\<in> pverts G. u \\<noteq> v} \\<times> {v})", "by auto"], ["proof (state)\nthis:\n  card {u \\<in> pverts G. u \\<noteq> v} =\n  card ({u \\<in> pverts G. u \\<noteq> v} \\<times> {v})\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "also"], ["proof (state)\nthis:\n  card {u \\<in> pverts G. u \\<noteq> v} =\n  card ({u \\<in> pverts G. u \\<noteq> v} \\<times> {v})\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"?A = in_arcs G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {u \\<in> pverts G. u \\<noteq> v} \\<times> {v} = in_arcs (with_proj G) v", "using assms \\<open>v \\<in> pverts G\\<close>"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> (with_proj G)\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. {u \\<in> pverts G. u \\<noteq> v} \\<times> {v} = in_arcs (with_proj G) v", "unfolding complete_digraph_def"], ["proof (prove)\nusing this:\n  graph (with_proj G) \\<and>\n  card (verts (with_proj G)) = 5 \\<and>\n  arcs_ends (with_proj G) =\n  {(u, v).\n   (u, v) \\<in> verts (with_proj G) \\<times> verts (with_proj G) \\<and>\n   u \\<noteq> v}\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. {u \\<in> pverts G. u \\<noteq> v} \\<times> {v} = in_arcs (with_proj G) v", "by safe auto"], ["proof (state)\nthis:\n  {u \\<in> pverts G. u \\<noteq> v} \\<times> {v} = in_arcs (with_proj G) v\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "also"], ["proof (state)\nthis:\n  {u \\<in> pverts G. u \\<noteq> v} \\<times> {v} = in_arcs (with_proj G) v\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "have \"card \\<dots> = in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj G) v) = in_degree (with_proj G) v", "unfolding in_degree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs (with_proj G) v) = card (in_arcs (with_proj G) v)", ".."], ["proof (state)\nthis:\n  card (in_arcs (with_proj G) v) = in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "finally"], ["proof (chain)\npicking this:\n  2 < in_degree (with_proj G) v", "have \"2 < in_degree G v\""], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. 2 < in_degree (with_proj G) v", "."], ["proof (state)\nthis:\n  2 < in_degree (with_proj G) v\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "}"], ["proof (state)\nthis:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "then"], ["proof (chain)\npicking this:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2\n\ngoal (1 subgoal):\n 1. verts3 (with_proj G) = verts (with_proj G)", "unfolding verts3_def"], ["proof (prove)\nusing this:\n  ?v2 \\<in> pverts G \\<Longrightarrow> 2 < in_degree (with_proj G) ?v2\n\ngoal (1 subgoal):\n 1. {v \\<in> verts (with_proj G). 2 < in_degree (with_proj G) v} =\n    verts (with_proj G)", "by auto"], ["proof (state)\nthis:\n  verts3 (with_proj G) = verts (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma K33_contractedI:\n  assumes subd: \"subdivision_pair G H\"\n  assumes k33: \"K\\<^bsub>3,3\\<^esub> G\"\n  shows \"K\\<^bsub>3,3\\<^esub> (contr_graph H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "interpret pgG: pair_graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using k33"], ["proof (prove)\nusing this:\n  K\\<^bsub>3,3\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. pair_graph G", "by (rule pair_graphI_complete_bipartite)"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "using assms"], ["proof (prove)\nusing this:\n  subdivision_pair G H\n  K\\<^bsub>3,3\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "by (auto simp: pgG.contracted_no_degree2_simp verts3_K33)"], ["proof (state)\nthis:\n  K\\<^bsub>3,3\\<^esub>\n   (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma K5_contractedI:\n  assumes subd: \"subdivision_pair G H\"\n  assumes k5: \"K\\<^bsub>5\\<^esub> G\"\n  shows \"K\\<^bsub>5\\<^esub> (contr_graph H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "interpret pgG: pair_graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using k5"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. pair_graph G", "by (rule pair_graphI_complete)"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "using assms"], ["proof (prove)\nusing this:\n  subdivision_pair G H\n  K\\<^bsub>5\\<^esub> (with_proj G)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))", "by (auto simp add: pgG.contracted_no_degree2_simp verts3_K5)"], ["proof (state)\nthis:\n  K\\<^bsub>5\\<^esub>\n   (with_proj (gen_contr_graph (with_proj H) (verts3 (with_proj H))))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Final proof\\<close>"], ["", "context pair_sym_digraph begin"], ["", "lemma gcg_subdivide_eq:\n  assumes mem: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes V: \"V \\<subseteq> pverts G\"\n  shows \"gen_contr_graph (subdivide G e w) V = gen_contr_graph G V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "interpret sdG: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using mem"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "fix u p v"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "assume \"sdG.gen_iapath V u p v\""], ["proof (state)\nthis:\n  sdG.gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "have \"gen_iapath V u (co_path e w p) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v", "using mem V \\<open>sdG.gen_iapath V u p v\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  sdG.gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_iapath V u (co_path e w p) v", "by (rule gen_iapath_co_path)"], ["proof (state)\nthis:\n  gen_iapath V u (co_path e w p) v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "then"], ["proof (chain)\npicking this:\n  gen_iapath V u (co_path e w p) v", "have \"\\<exists>p. gen_iapath V u p v\""], ["proof (prove)\nusing this:\n  gen_iapath V u (co_path e w p) v\n\ngoal (1 subgoal):\n 1. \\<exists>p. gen_iapath V u p v", ".."], ["proof (state)\nthis:\n  \\<exists>p. gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "}"], ["proof (state)\nthis:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "note A = this"], ["proof (state)\nthis:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "moreover"], ["proof (state)\nthis:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "{"], ["proof (state)\nthis:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "fix u p v"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "assume \"gen_iapath V u p v\""], ["proof (state)\nthis:\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "have \"sdG.gen_iapath V u (sd_path e w p) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sdG.gen_iapath V u (sd_path e w p) v", "using mem V \\<open>gen_iapath V u p v\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. sdG.gen_iapath V u (sd_path e w p) v", "by (rule gen_iapath_sd_path)"], ["proof (state)\nthis:\n  sdG.gen_iapath V u (sd_path e w p) v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "then"], ["proof (chain)\npicking this:\n  sdG.gen_iapath V u (sd_path e w p) v", "have \"\\<exists>p. sdG.gen_iapath V u p v\""], ["proof (prove)\nusing this:\n  sdG.gen_iapath V u (sd_path e w p) v\n\ngoal (1 subgoal):\n 1. \\<exists>p. sdG.gen_iapath V u p v", ".."], ["proof (state)\nthis:\n  \\<exists>p. sdG.gen_iapath V u p v\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "}"], ["proof (state)\nthis:\n  gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. sdG.gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "note B = this"], ["proof (state)\nthis:\n  gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. sdG.gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "ultimately"], ["proof (chain)\npicking this:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n  gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. sdG.gen_iapath V ?u2 p ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n  gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. sdG.gen_iapath V ?u2 p ?v2\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "using assms"], ["proof (prove)\nusing this:\n  sdG.gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. gen_iapath V ?u2 p ?v2\n  gen_iapath V ?u2 ?p2 ?v2 \\<Longrightarrow>\n  \\<exists>p. sdG.gen_iapath V ?u2 p ?v2\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G e w)) V =\n    gen_contr_graph (with_proj G) V", "by (auto simp: gen_contr_graph_def)"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide G e w)) V =\n  gen_contr_graph (with_proj G) V\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma co_path_append:\n  assumes \"[last p1, hd p2] \\<notin> {[(fst e,w),(w,snd e)], [(snd e,w),(w,fst e)]}\"\n  shows \"co_path e w (p1 @ p2) = co_path e w p1 @ co_path e w p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. co_path e w (p1 @ p2) = co_path e w p1 @ co_path e w p2", "using assms"], ["proof (prove)\nusing this:\n  [last p1, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (1 subgoal):\n 1. co_path e w (p1 @ p2) = co_path e w p1 @ co_path e w p2", "proof (induct p1 rule: co_path_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e'.\n       [last [e'], hd p2]\n       \\<notin> {[(fst e, w), (w, snd e)],\n                 [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n       co_path e w ([e'] @ p2) = co_path e w [e'] @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 4. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 5. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "case single"], ["proof (state)\nthis:\n  [last [e'_], hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (5 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e'.\n       [last [e'], hd p2]\n       \\<notin> {[(fst e, w), (w, snd e)],\n                 [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n       co_path e w ([e'] @ p2) = co_path e w [e'] @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 4. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 5. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "then"], ["proof (chain)\npicking this:\n  [last [e'_], hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}", "show ?case"], ["proof (prove)\nusing this:\n  [last [e'_], hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (1 subgoal):\n 1. co_path e w ([e'_] @ p2) = co_path e w [e'_] @ co_path e w p2", "by (cases p2) auto"], ["proof (state)\nthis:\n  co_path e w ([e'_] @ p2) = co_path e w [e'_] @ co_path e w p2\n\ngoal (4 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 4. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 4. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "case (co e1 e2 es)"], ["proof (state)\nthis:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (4 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 4. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "then"], ["proof (chain)\npicking this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}", "show ?case"], ["proof (prove)\nusing this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (1 subgoal):\n 1. co_path e w ((e1 # e2 # es) @ p2) =\n    co_path e w (e1 # e2 # es) @ co_path e w p2", "by (cases es) auto"], ["proof (state)\nthis:\n  co_path e w ((e1 # e2 # es) @ p2) =\n  co_path e w (e1 # e2 # es) @ co_path e w p2\n\ngoal (3 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "case (corev e1 e2 es)"], ["proof (state)\nthis:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (3 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        [last es, hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w (es @ p2) = co_path e w es @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2\n 3. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "then"], ["proof (chain)\npicking this:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  [last es, hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)],\n            [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n  co_path e w (es @ p2) = co_path e w es @ co_path e w p2\n  [last (e1 # e2 # es), hd p2]\n  \\<notin> {[(fst e, w), (w, snd e)], [(snd e, w), (w, fst e)]}\n\ngoal (1 subgoal):\n 1. co_path e w ((e1 # e2 # es) @ p2) =\n    co_path e w (e1 # e2 # es) @ co_path e w p2", "by (cases es) auto"], ["proof (state)\nthis:\n  co_path e w ((e1 # e2 # es) @ p2) =\n  co_path e w (e1 # e2 # es) @ co_path e w p2\n\ngoal (2 subgoals):\n 1. [last [], hd p2]\n    \\<notin> {[(fst e, w), (w, snd e)],\n              [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n    co_path e w ([] @ p2) = co_path e w [] @ co_path e w p2\n 2. \\<And>e1 e2 es.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        [last (e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]} \\<Longrightarrow>\n        co_path e w ((e2 # es) @ p2) =\n        co_path e w (e2 # es) @ co_path e w p2;\n        [last (e1 # e2 # es), hd p2]\n        \\<notin> {[(fst e, w), (w, snd e)],\n                  [(snd e, w), (w, fst e)]}\\<rbrakk>\n       \\<Longrightarrow> co_path e w ((e1 # e2 # es) @ p2) =\n                         co_path e w (e1 # e2 # es) @ co_path e w p2", "qed auto"], ["", "lemma exists_co_path_decomp1:\n  assumes mem: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  assumes p: \"pre_digraph.apath (subdivide G e w) u p v\" \"(fst e, w) \\<in> set p\" \"w \\<noteq> v\"\n  shows \"\\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "let ?sdG = \"subdivide G e w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "interpret sdG: pair_sym_digraph ?sdG"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using mem"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "obtain p1 p2 z where p_decomp: \"p = p1 @ (fst e, w) # (w, z) # p2\" \"fst e \\<noteq> z\" \"w \\<noteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 z p2.\n        \\<lbrakk>p = p1 @ (fst e, w) # (w, z) # p2; fst e \\<noteq> z;\n         w \\<noteq> z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule sdG.apath_succ_decomp[OF p])"], ["proof (state)\nthis:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z\n\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "then"], ["proof (chain)\npicking this:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z", "have \"(fst e,w) \\<in> parcs ?sdG\" \"(w, z) \\<in> parcs ?sdG\""], ["proof (prove)\nusing this:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z\n\ngoal (1 subgoal):\n 1. (fst e, w) \\<in> parcs (subdivide G e w) &&&\n    (w, z) \\<in> parcs (subdivide G e w)", "using p"], ["proof (prove)\nusing this:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z\n  sdG.apath u p v\n  (fst e, w) \\<in> set p\n  w \\<noteq> v\n\ngoal (1 subgoal):\n 1. (fst e, w) \\<in> parcs (subdivide G e w) &&&\n    (w, z) \\<in> parcs (subdivide G e w)", "by (auto simp: sdG.apath_def)"], ["proof (state)\nthis:\n  (fst e, w) \\<in> parcs (subdivide G e w)\n  (w, z) \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "with \\<open>fst e \\<noteq> z\\<close>"], ["proof (chain)\npicking this:\n  fst e \\<noteq> z\n  (fst e, w) \\<in> parcs (subdivide G e w)\n  (w, z) \\<in> parcs (subdivide G e w)", "have \"z = snd e\""], ["proof (prove)\nusing this:\n  fst e \\<noteq> z\n  (fst e, w) \\<in> parcs (subdivide G e w)\n  (w, z) \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. z = snd e", "using mem"], ["proof (prove)\nusing this:\n  fst e \\<noteq> z\n  (fst e, w) \\<in> parcs (subdivide G e w)\n  (w, z) \\<in> parcs (subdivide G e w)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. z = snd e", "by (cases e) (auto simp: wellformed')"], ["proof (state)\nthis:\n  z = snd e\n\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "with p_decomp"], ["proof (chain)\npicking this:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z\n  z = snd e", "show ?thesis"], ["proof (prove)\nusing this:\n  p = p1 @ (fst e, w) # (w, z) # p2\n  fst e \\<noteq> z\n  w \\<noteq> z\n  z = snd e\n\ngoal (1 subgoal):\n 1. \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2", "by fast"], ["proof (state)\nthis:\n  \\<exists>p1 p2. p = p1 @ (fst e, w) # (w, snd e) # p2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_slim_if_subdivide:\n  assumes \"pair_pre_digraph.is_slim (subdivide G e w) V\"\n  assumes mem1: \"e \\<in> parcs G\" \"w \\<notin> pverts G\" and mem2: \"w \\<notin> V\"\n  shows \"is_slim V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_slim V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_slim V", "let ?sdG = \"subdivide G e w\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_slim V", "interpret sdG: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using mem1"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_slim V", "obtain u v where \"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. is_slim V", "with mem1"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  e = (u, v)", "have \"u \\<in> pverts G\" \"v \\<in> pverts G\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. u \\<in> pverts G &&& v \\<in> pverts G", "by (auto simp: wellformed')"], ["proof (state)\nthis:\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. is_slim V", "with mem1"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G", "have \"u \\<noteq> w\" \"v \\<noteq> w\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. u \\<noteq> w &&& v \\<noteq> w", "by auto"], ["proof (state)\nthis:\n  u \\<noteq> w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. is_slim V", "let ?w_parcs = \"{(u,w), (v,w), (w,u), (w, v)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_slim V", "have sdg_new_parcs: \"?w_parcs \\<subseteq> parcs ?sdG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)", "using \\<open>e = (u,v)\\<close>"], ["proof (prove)\nusing this:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)", "by auto"], ["proof (state)\nthis:\n  {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. is_slim V", "have sdg_no_parcs: \"(u,v) \\<notin> parcs ?sdG\" \"(v,u) \\<notin> parcs ?sdG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<notin> parcs (subdivide G e w) &&&\n    (v, u) \\<notin> parcs (subdivide G e w)", "using \\<open>e = (u,v)\\<close> \\<open>u \\<noteq> w\\<close> \\<open>v \\<noteq> w\\<close>"], ["proof (prove)\nusing this:\n  e = (u, v)\n  u \\<noteq> w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. (u, v) \\<notin> parcs (subdivide G e w) &&&\n    (v, u) \\<notin> parcs (subdivide G e w)", "by auto"], ["proof (state)\nthis:\n  (u, v) \\<notin> parcs (subdivide G e w)\n  (v, u) \\<notin> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. is_slim V", "{"], ["proof (state)\nthis:\n  (u, v) \\<notin> parcs (subdivide G e w)\n  (v, u) \\<notin> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. is_slim V", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. is_slim V", "assume A: \"z \\<in> pverts G\""], ["proof (state)\nthis:\n  z \\<in> pverts G\n\ngoal (1 subgoal):\n 1. is_slim V", "have \"in_degree ?sdG z = in_degree G z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "assume \"z \\<noteq> u\" \"z \\<noteq> v\""], ["proof (state)\nthis:\n  z \\<noteq> u\n  z \\<noteq> v\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "then"], ["proof (chain)\npicking this:\n  z \\<noteq> u\n  z \\<noteq> v", "have \"in_arcs ?sdG z = in_arcs G z\""], ["proof (prove)\nusing this:\n  z \\<noteq> u\n  z \\<noteq> v\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) z = in_arcs (with_proj G) z", "using \\<open>e = (u,v)\\<close> mem1 A"], ["proof (prove)\nusing this:\n  z \\<noteq> u\n  z \\<noteq> v\n  e = (u, v)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  z \\<in> pverts G\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj (subdivide G e w)) z = in_arcs (with_proj G) z", "by auto"], ["proof (state)\nthis:\n  in_arcs (with_proj (subdivide G e w)) z = in_arcs (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "then"], ["proof (chain)\npicking this:\n  in_arcs (with_proj (subdivide G e w)) z = in_arcs (with_proj G) z", "have \"in_degree ?sdG z = in_degree G z\""], ["proof (prove)\nusing this:\n  in_arcs (with_proj (subdivide G e w)) z = in_arcs (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "by (simp add: in_degree_def)"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<noteq> u; z \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj (subdivide G e w)) z =\n                    in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<noteq> u; z \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj (subdivide G e w)) z =\n                    in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "{"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<noteq> u; z \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj (subdivide G e w)) z =\n                    in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "assume \"z = u\""], ["proof (state)\nthis:\n  z = u\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "then"], ["proof (chain)\npicking this:\n  z = u", "have \"in_arcs G z = in_arcs ?sdG z \\<union> {(v,u)} - {(w,u)}\""], ["proof (prove)\nusing this:\n  z = u\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) z =\n    in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}", "using \\<open>e = (u,v)\\<close> mem1"], ["proof (prove)\nusing this:\n  z = u\n  e = (u, v)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) z =\n    in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}", "by (auto simp: intro: arcs_symmetric wellformed')"], ["proof (state)\nthis:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "moreover"], ["proof (state)\nthis:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "have \"card (in_arcs ?sdG z \\<union> {(v,u)} - {(w,u)}) = card (in_arcs ?sdG z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     (in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} -\n      {(w, u)}) =\n    card (in_arcs (with_proj (subdivide G e w)) z)", "using sdg_new_parcs sdg_no_parcs \\<open>z = u\\<close>"], ["proof (prove)\nusing this:\n  {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)\n  (u, v) \\<notin> parcs (subdivide G e w)\n  (v, u) \\<notin> parcs (subdivide G e w)\n  z = u\n\ngoal (1 subgoal):\n 1. card\n     (in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} -\n      {(w, u)}) =\n    card (in_arcs (with_proj (subdivide G e w)) z)", "by (cases \"finite (in_arcs ?sdG z)\") (auto simp: in_arcs_def)"], ["proof (state)\nthis:\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "ultimately"], ["proof (chain)\npicking this:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)", "have \"in_degree ?sdG z= in_degree G z\""], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(v, u)} - {(w, u)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "by (simp add: in_degree_def)"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "}"], ["proof (state)\nthis:\n  z = u \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "moreover"], ["proof (state)\nthis:\n  z = u \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "{"], ["proof (state)\nthis:\n  z = u \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "assume \"z = v\""], ["proof (state)\nthis:\n  z = v\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "then"], ["proof (chain)\npicking this:\n  z = v", "have \"in_arcs G z = in_arcs ?sdG z \\<union> {(u,v)} - {(w,v)}\""], ["proof (prove)\nusing this:\n  z = v\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) z =\n    in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}", "using \\<open>e = (u,v)\\<close> mem1 A"], ["proof (prove)\nusing this:\n  z = v\n  e = (u, v)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  z \\<in> pverts G\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) z =\n    in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}", "by (auto simp: wellformed')"], ["proof (state)\nthis:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "moreover"], ["proof (state)\nthis:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "have \"card (in_arcs ?sdG z \\<union> {(u,v)} - {(w,v)}) = card (in_arcs ?sdG z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     (in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} -\n      {(w, v)}) =\n    card (in_arcs (with_proj (subdivide G e w)) z)", "using sdg_new_parcs sdg_no_parcs \\<open>z = v\\<close>"], ["proof (prove)\nusing this:\n  {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)\n  (u, v) \\<notin> parcs (subdivide G e w)\n  (v, u) \\<notin> parcs (subdivide G e w)\n  z = v\n\ngoal (1 subgoal):\n 1. card\n     (in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} -\n      {(w, v)}) =\n    card (in_arcs (with_proj (subdivide G e w)) z)", "by (cases \"finite (in_arcs ?sdG z)\") (auto simp: in_arcs_def)"], ["proof (state)\nthis:\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "ultimately"], ["proof (chain)\npicking this:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)", "have \"in_degree ?sdG z= in_degree G z\""], ["proof (prove)\nusing this:\n  in_arcs (with_proj G) z =\n  in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}\n  card\n   (in_arcs (with_proj (subdivide G e w)) z \\<union> {(u, v)} - {(w, v)}) =\n  card (in_arcs (with_proj (subdivide G e w)) z)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "by (simp add: in_degree_def)"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "}"], ["proof (state)\nthis:\n  z = v \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>z \\<noteq> u; z \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj (subdivide G e w)) z =\n                    in_degree (with_proj G) z\n  z = u \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n  z = v \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<noteq> u; z \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj (subdivide G e w)) z =\n                    in_degree (with_proj G) z\n  z = u \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n  z = v \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z", "by metis"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n\ngoal (1 subgoal):\n 1. is_slim V", "}"], ["proof (state)\nthis:\n  ?z2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) ?z2 = in_degree (with_proj G) ?z2\n\ngoal (1 subgoal):\n 1. is_slim V", "note in_degree_same = this"], ["proof (state)\nthis:\n  ?z2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) ?z2 = in_degree (with_proj G) ?z2\n\ngoal (1 subgoal):\n 1. is_slim V", "have V_G: \"V \\<subseteq> pverts G\" \"verts3 G \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G &&& verts3 (with_proj G) \\<subseteq> V", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. V \\<subseteq> pverts G\n 2. verts3 (with_proj G) \\<subseteq> V", "have \"V \\<subseteq> pverts ?sdG\" \"pverts ?sdG = pverts G \\<union> {w}\" \"verts3 ?sdG \\<subseteq> V\" \"verts3 G \\<subseteq> verts3 ?sdG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (V \\<subseteq> pverts (subdivide G e w) &&&\n     pverts (subdivide G e w) = pverts G \\<union> {w}) &&&\n    verts3 (with_proj (subdivide G e w)) \\<subseteq> V &&&\n    verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))", "using \\<open>sdG.is_slim V\\<close> \\<open>e = (u,v)\\<close> in_degree_same mem1"], ["proof (prove)\nusing this:\n  sdG.is_slim V\n  e = (u, v)\n  ?z2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) ?z2 = in_degree (with_proj G) ?z2\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. (V \\<subseteq> pverts (subdivide G e w) &&&\n     pverts (subdivide G e w) = pverts G \\<union> {w}) &&&\n    verts3 (with_proj (subdivide G e w)) \\<subseteq> V &&&\n    verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))", "unfolding sdG.is_slim_def verts3_def"], ["proof (prove)\nusing this:\n  (\\<forall>v\\<in>pverts (subdivide G e w).\n      v \\<in> V \\<or>\n      in_degree (with_proj (subdivide G e w)) v \\<le> 2 \\<and>\n      (\\<exists>x p y.\n          sdG.gen_iapath V x p y \\<and>\n          v \\<in> set (pawalk_verts x p))) \\<and>\n  (\\<forall>e\\<in>parcs (subdivide G e w).\n      fst e \\<noteq> snd e \\<and>\n      (\\<exists>x p y. sdG.gen_iapath V x p y \\<and> e \\<in> set p)) \\<and>\n  (\\<forall>u v p q.\n      sdG.gen_iapath V u p v \\<and> sdG.gen_iapath V u q v \\<longrightarrow>\n      p = q) \\<and>\n  V \\<subseteq> pverts (subdivide G e w)\n  e = (u, v)\n  ?z2 \\<in> pverts G \\<Longrightarrow>\n  in_degree (with_proj (subdivide G e w)) ?z2 = in_degree (with_proj G) ?z2\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. (V \\<subseteq> pverts (subdivide G e w) &&&\n     pverts (subdivide G e w) = pverts G \\<union> {w}) &&&\n    {v \\<in> verts (with_proj (subdivide G e w)).\n     2 < in_degree (with_proj (subdivide G e w)) v}\n    \\<subseteq> V &&&\n    {v \\<in> verts (with_proj G). 2 < in_degree (with_proj G) v}\n    \\<subseteq> {v \\<in> verts (with_proj (subdivide G e w)).\n                 2 < in_degree (with_proj (subdivide G e w)) v}", "by (fast, simp, fastforce, force)"], ["proof (state)\nthis:\n  V \\<subseteq> pverts (subdivide G e w)\n  pverts (subdivide G e w) = pverts G \\<union> {w}\n  verts3 (with_proj (subdivide G e w)) \\<subseteq> V\n  verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))\n\ngoal (2 subgoals):\n 1. V \\<subseteq> pverts G\n 2. verts3 (with_proj G) \\<subseteq> V", "then"], ["proof (chain)\npicking this:\n  V \\<subseteq> pverts (subdivide G e w)\n  pverts (subdivide G e w) = pverts G \\<union> {w}\n  verts3 (with_proj (subdivide G e w)) \\<subseteq> V\n  verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))", "show \"V \\<subseteq> pverts G\" \"verts3 G \\<subseteq> V\""], ["proof (prove)\nusing this:\n  V \\<subseteq> pverts (subdivide G e w)\n  pverts (subdivide G e w) = pverts G \\<union> {w}\n  verts3 (with_proj (subdivide G e w)) \\<subseteq> V\n  verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))\n\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G &&& verts3 (with_proj G) \\<subseteq> V", "using \\<open>w \\<notin> V\\<close>"], ["proof (prove)\nusing this:\n  V \\<subseteq> pverts (subdivide G e w)\n  pverts (subdivide G e w) = pverts G \\<union> {w}\n  verts3 (with_proj (subdivide G e w)) \\<subseteq> V\n  verts3 (with_proj G) \\<subseteq> verts3 (with_proj (subdivide G e w))\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G &&& verts3 (with_proj G) \\<subseteq> V", "by auto"], ["proof (state)\nthis:\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. is_slim V", "have pverts: \"\\<forall>v\\<in>pverts G. v \\<in> V \\<or> in_degree G v \\<le> 2 \\<and> (\\<exists>x p y. gen_iapath V x p y \\<and> v \\<in> set (awalk_verts x p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "assume A: \"z \\<in> pverts G\" \"z \\<notin> V\""], ["proof (state)\nthis:\n  z \\<in> pverts G\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "have \"z \\<in> pverts ?sdG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> pverts (subdivide G e w)", "using \\<open>e = (u,v)\\<close> A mem1"], ["proof (prove)\nusing this:\n  e = (u, v)\n  z \\<in> pverts G\n  z \\<notin> V\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. z \\<in> pverts (subdivide G e w)", "by auto"], ["proof (state)\nthis:\n  z \\<in> pverts (subdivide G e w)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "then"], ["proof (chain)\npicking this:\n  z \\<in> pverts (subdivide G e w)", "have \"in_degree ?sdG z \\<le> 2\""], ["proof (prove)\nusing this:\n  z \\<in> pverts (subdivide G e w)\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z \\<le> 2", "using \\<open>sdG.is_slim V\\<close> A"], ["proof (prove)\nusing this:\n  z \\<in> pverts (subdivide G e w)\n  sdG.is_slim V\n  z \\<in> pverts G\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. in_degree (with_proj (subdivide G e w)) z \\<le> 2", "by (auto simp: sdG.is_slim_def)"], ["proof (state)\nthis:\n  in_degree (with_proj (subdivide G e w)) z \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "with in_degree_same[OF \\<open>z \\<in> pverts G\\<close>]"], ["proof (chain)\npicking this:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n  in_degree (with_proj (subdivide G e w)) z \\<le> 2", "have idg: \"in_degree G z \\<le> 2\""], ["proof (prove)\nusing this:\n  in_degree (with_proj (subdivide G e w)) z = in_degree (with_proj G) z\n  in_degree (with_proj (subdivide G e w)) z \\<le> 2\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) z \\<le> 2", "by auto"], ["proof (state)\nthis:\n  in_degree (with_proj G) z \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "from A"], ["proof (chain)\npicking this:\n  z \\<in> pverts G\n  z \\<notin> V", "have \"z \\<in> pverts ?sdG\" \"z \\<notin> V\""], ["proof (prove)\nusing this:\n  z \\<in> pverts G\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. z \\<in> pverts (subdivide G e w) &&& z \\<notin> V", "using \\<open>e = (u,v)\\<close> mem1"], ["proof (prove)\nusing this:\n  z \\<in> pverts G\n  z \\<notin> V\n  e = (u, v)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. z \\<in> pverts (subdivide G e w) &&& z \\<notin> V", "by auto"], ["proof (state)\nthis:\n  z \\<in> pverts (subdivide G e w)\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "then"], ["proof (chain)\npicking this:\n  z \\<in> pverts (subdivide G e w)\n  z \\<notin> V", "obtain x' q y' where \"sdG.gen_iapath V x' q y'\" \"z \\<in> set (sdG.awalk_verts x' q)\""], ["proof (prove)\nusing this:\n  z \\<in> pverts (subdivide G e w)\n  z \\<notin> V\n\ngoal (1 subgoal):\n 1. (\\<And>x' q y'.\n        \\<lbrakk>sdG.gen_iapath V x' q y';\n         z \\<in> set (pawalk_verts x' q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>sdG.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> pverts (subdivide G e w)\n  z \\<notin> V\n  sdG.is_slim V\n\ngoal (1 subgoal):\n 1. (\\<And>x' q y'.\n        \\<lbrakk>sdG.gen_iapath V x' q y';\n         z \\<in> set (pawalk_verts x' q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sdG.is_slim_def"], ["proof (prove)\nusing this:\n  z \\<in> pverts (subdivide G e w)\n  z \\<notin> V\n  (\\<forall>v\\<in>pverts (subdivide G e w).\n      v \\<in> V \\<or>\n      in_degree (with_proj (subdivide G e w)) v \\<le> 2 \\<and>\n      (\\<exists>x p y.\n          sdG.gen_iapath V x p y \\<and>\n          v \\<in> set (pawalk_verts x p))) \\<and>\n  (\\<forall>e\\<in>parcs (subdivide G e w).\n      fst e \\<noteq> snd e \\<and>\n      (\\<exists>x p y. sdG.gen_iapath V x p y \\<and> e \\<in> set p)) \\<and>\n  (\\<forall>u v p q.\n      sdG.gen_iapath V u p v \\<and> sdG.gen_iapath V u q v \\<longrightarrow>\n      p = q) \\<and>\n  V \\<subseteq> pverts (subdivide G e w)\n\ngoal (1 subgoal):\n 1. (\\<And>x' q y'.\n        \\<lbrakk>sdG.gen_iapath V x' q y';\n         z \\<in> set (pawalk_verts x' q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  sdG.gen_iapath V x' q y'\n  z \\<in> set (pawalk_verts x' q)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "then"], ["proof (chain)\npicking this:\n  sdG.gen_iapath V x' q y'\n  z \\<in> set (pawalk_verts x' q)", "have \"gen_iapath V x' (co_path e w q) y'\" \"z \\<in> set (awalk_verts x' (co_path e w q))\""], ["proof (prove)\nusing this:\n  sdG.gen_iapath V x' q y'\n  z \\<in> set (pawalk_verts x' q)\n\ngoal (1 subgoal):\n 1. gen_iapath V x' (co_path e w q) y' &&&\n    z \\<in> set (pawalk_verts x' (co_path e w q))", "using A mem1 V_G"], ["proof (prove)\nusing this:\n  sdG.gen_iapath V x' q y'\n  z \\<in> set (pawalk_verts x' q)\n  z \\<in> pverts G\n  z \\<notin> V\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. gen_iapath V x' (co_path e w q) y' &&&\n    z \\<in> set (pawalk_verts x' (co_path e w q))", "by (auto simp: set_awalk_verts_co_path' intro: gen_iapath_co_path)"], ["proof (state)\nthis:\n  gen_iapath V x' (co_path e w q) y'\n  z \\<in> set (pawalk_verts x' (co_path e w q))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "with idg"], ["proof (chain)\npicking this:\n  in_degree (with_proj G) z \\<le> 2\n  gen_iapath V x' (co_path e w q) y'\n  z \\<in> set (pawalk_verts x' (co_path e w q))", "have \"in_degree G z \\<le> 2 \\<and> (\\<exists>x p y. gen_iapath V x p y \\<and> z \\<in> set (awalk_verts x p))\""], ["proof (prove)\nusing this:\n  in_degree (with_proj G) z \\<le> 2\n  gen_iapath V x' (co_path e w q) y'\n  z \\<in> set (pawalk_verts x' (co_path e w q))\n\ngoal (1 subgoal):\n 1. in_degree (with_proj G) z \\<le> 2 \\<and>\n    (\\<exists>x p y.\n        gen_iapath V x p y \\<and> z \\<in> set (pawalk_verts x p))", "by metis"], ["proof (state)\nthis:\n  in_degree (with_proj G) z \\<le> 2 \\<and>\n  (\\<exists>x p y. gen_iapath V x p y \\<and> z \\<in> set (pawalk_verts x p))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?z2 \\<in> pverts G; ?z2 \\<notin> V\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj G) ?z2 \\<le> 2 \\<and>\n                    (\\<exists>x p y.\n                        gen_iapath V x p y \\<and>\n                        ?z2 \\<in> set (pawalk_verts x p))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?z2 \\<in> pverts G; ?z2 \\<notin> V\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj G) ?z2 \\<le> 2 \\<and>\n                    (\\<exists>x p y.\n                        gen_iapath V x p y \\<and>\n                        ?z2 \\<in> set (pawalk_verts x p))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?z2 \\<in> pverts G; ?z2 \\<notin> V\\<rbrakk>\n  \\<Longrightarrow> in_degree (with_proj G) ?z2 \\<le> 2 \\<and>\n                    (\\<exists>x p y.\n                        gen_iapath V x p y \\<and>\n                        ?z2 \\<in> set (pawalk_verts x p))\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>pverts G.\n       v \\<in> V \\<or>\n       in_degree (with_proj G) v \\<le> 2 \\<and>\n       (\\<exists>x p y.\n           gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>pverts G.\n     v \\<in> V \\<or>\n     in_degree (with_proj G) v \\<le> 2 \\<and>\n     (\\<exists>x p y.\n         gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>pverts G.\n     v \\<in> V \\<or>\n     in_degree (with_proj G) v \\<le> 2 \\<and>\n     (\\<exists>x p y.\n         gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))\n\ngoal (1 subgoal):\n 1. is_slim V", "have parcs: \"\\<forall>e\\<in>parcs G. fst e \\<noteq> snd e \\<and> (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>parcs G.\n       fst e \\<noteq> snd e \\<and>\n       (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)", "proof (intro ballI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> parcs G \\<Longrightarrow> fst e \\<noteq> snd e\n 2. \\<And>e.\n       e \\<in> parcs G \\<Longrightarrow>\n       \\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p", "fix e'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> parcs G \\<Longrightarrow> fst e \\<noteq> snd e\n 2. \\<And>e.\n       e \\<in> parcs G \\<Longrightarrow>\n       \\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p", "assume \"e' \\<in> parcs G\""], ["proof (state)\nthis:\n  e' \\<in> parcs G\n\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> parcs G \\<Longrightarrow> fst e \\<noteq> snd e\n 2. \\<And>e.\n       e \\<in> parcs G \\<Longrightarrow>\n       \\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p", "show \"(\\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "proof (cases \"e' \\<in> parcs ?sdG\")"], ["proof (state)\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "case True"], ["proof (state)\nthis:\n  e' \\<in> parcs (subdivide G e w)\n\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  e' \\<in> parcs (subdivide G e w)", "obtain x p y where \"sdG.gen_iapath V x p y\" \"e' \\<in> set p\""], ["proof (prove)\nusing this:\n  e' \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>sdG.gen_iapath V x p y; e' \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>sdG.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  e' \\<in> parcs (subdivide G e w)\n  sdG.is_slim V\n\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>sdG.gen_iapath V x p y; e' \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sdG.is_slim_def)"], ["proof (state)\nthis:\n  sdG.gen_iapath V x p y\n  e' \\<in> set p\n\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "with \\<open>e \\<in> parcs G\\<close> \\<open>w \\<notin> pverts G\\<close> V_G"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  sdG.gen_iapath V x p y\n  e' \\<in> set p", "have \"gen_iapath V x (co_path e w p) y\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  sdG.gen_iapath V x p y\n  e' \\<in> set p\n\ngoal (1 subgoal):\n 1. gen_iapath V x (co_path e w p) y", "by (auto intro: gen_iapath_co_path)"], ["proof (state)\nthis:\n  gen_iapath V x (co_path e w p) y\n\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "from \\<open>e' \\<in> parcs G\\<close>"], ["proof (chain)\npicking this:\n  e' \\<in> parcs G", "have \"e' \\<notin> ?w_parcs\""], ["proof (prove)\nusing this:\n  e' \\<in> parcs G\n\ngoal (1 subgoal):\n 1. e' \\<notin> {(u, w), (v, w), (w, u), (w, v)}", "using mem1"], ["proof (prove)\nusing this:\n  e' \\<in> parcs G\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. e' \\<notin> {(u, w), (v, w), (w, u), (w, v)}", "by (auto simp: wellformed')"], ["proof (state)\nthis:\n  e' \\<notin> {(u, w), (v, w), (w, u), (w, v)}\n\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "with \\<open>e' \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  e' \\<in> set p\n  e' \\<notin> {(u, w), (v, w), (w, u), (w, v)}", "have \"e' \\<in> set (co_path e w p)\""], ["proof (prove)\nusing this:\n  e' \\<in> set p\n  e' \\<notin> {(u, w), (v, w), (w, u), (w, v)}\n\ngoal (1 subgoal):\n 1. e' \\<in> set (co_path e w p)", "by (induct p rule: co_path_induct) (force simp: \\<open>e = (u,v)\\<close>)+"], ["proof (state)\nthis:\n  e' \\<in> set (co_path e w p)\n\ngoal (2 subgoals):\n 1. e' \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n 2. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  e' \\<in> set (co_path e w p)", "show \"\\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p \""], ["proof (prove)\nusing this:\n  e' \\<in> set (co_path e w p)\n\ngoal (1 subgoal):\n 1. \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "using \\<open>gen_iapath V x (co_path e w p) y\\<close>"], ["proof (prove)\nusing this:\n  e' \\<in> set (co_path e w p)\n  gen_iapath V x (co_path e w p) y\n\ngoal (1 subgoal):\n 1. \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "by fast"], ["proof (state)\nthis:\n  \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "assume \"e' \\<notin> parcs ?sdG\""], ["proof (state)\nthis:\n  e' \\<notin> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "define a b where \"a = fst e'\" and \"b = snd e'\""], ["proof (state)\nthis:\n  a = fst e'\n  b = snd e'\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  a = fst e'\n  b = snd e'", "have \"e' = (a,b)\" and ab: \"(a,b) = (u,v) \\<or> (a,b) = (v,u)\""], ["proof (prove)\nusing this:\n  a = fst e'\n  b = snd e'\n\ngoal (1 subgoal):\n 1. e' = (a, b) &&& (a, b) = (u, v) \\<or> (a, b) = (v, u)", "using \\<open>e' \\<in> parcs G\\<close> \\<open>e' \\<notin> parcs ?sdG\\<close> \\<open>e = (u,v)\\<close> mem1"], ["proof (prove)\nusing this:\n  a = fst e'\n  b = snd e'\n  e' \\<in> parcs G\n  e' \\<notin> parcs (subdivide G e w)\n  e = (u, v)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. e' = (a, b) &&& (a, b) = (u, v) \\<or> (a, b) = (v, u)", "by auto"], ["proof (state)\nthis:\n  e' = (a, b)\n  (a, b) = (u, v) \\<or> (a, b) = (v, u)\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "obtain x p y where \"sdG.gen_iapath V x p y\" \"(a,w) \\<in> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>sdG.gen_iapath V x p y; (a, w) \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>sdG.is_slim V\\<close> sdg_new_parcs ab"], ["proof (prove)\nusing this:\n  sdG.is_slim V\n  {(u, w), (v, w), (w, u), (w, v)} \\<subseteq> parcs (subdivide G e w)\n  (a, b) = (u, v) \\<or> (a, b) = (v, u)\n\ngoal (1 subgoal):\n 1. (\\<And>x p y.\n        \\<lbrakk>sdG.gen_iapath V x p y; (a, w) \\<in> set p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sdG.is_slim_def)"], ["proof (state)\nthis:\n  sdG.gen_iapath V x p y\n  (a, w) \\<in> set p\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "with \\<open>e \\<in> parcs G\\<close> \\<open>w \\<notin> pverts G\\<close> V_G"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  sdG.gen_iapath V x p y\n  (a, w) \\<in> set p", "have \"gen_iapath V x (co_path e w p) y\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  sdG.gen_iapath V x p y\n  (a, w) \\<in> set p\n\ngoal (1 subgoal):\n 1. gen_iapath V x (co_path e w p) y", "by (auto intro: gen_iapath_co_path)"], ["proof (state)\nthis:\n  gen_iapath V x (co_path e w p) y\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "have \"(a,b) \\<in> parcs G\" \"subdivide G (a,b) w = subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> parcs G &&& subdivide G (a, b) w = subdivide G e w", "using mem1 \\<open>e = (u,v)\\<close> \\<open>e' = (a,b)\\<close> ab"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  e = (u, v)\n  e' = (a, b)\n  (a, b) = (u, v) \\<or> (a, b) = (v, u)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> parcs G &&& subdivide G (a, b) w = subdivide G e w", "by (auto intro: arcs_symmetric simp: subdivide.simps)"], ["proof (state)\nthis:\n  (a, b) \\<in> parcs G\n  subdivide G (a, b) w = subdivide G e w\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  (a, b) \\<in> parcs G\n  subdivide G (a, b) w = subdivide G e w", "have \"pre_digraph.apath (subdivide G (a,b) w) x p y\" \"w \\<noteq> y\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> parcs G\n  subdivide G (a, b) w = subdivide G e w\n\ngoal (1 subgoal):\n 1. pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y &&&\n    w \\<noteq> y", "using mem2 \\<open>sdG.gen_iapath V x p y\\<close>"], ["proof (prove)\nusing this:\n  (a, b) \\<in> parcs G\n  subdivide G (a, b) w = subdivide G e w\n  w \\<notin> V\n  sdG.gen_iapath V x p y\n\ngoal (1 subgoal):\n 1. pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y &&&\n    w \\<noteq> y", "by (auto simp: sdG.gen_iapath_def)"], ["proof (state)\nthis:\n  pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y\n  w \\<noteq> y\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y\n  w \\<noteq> y", "obtain p1 p2 where p: \"p = p1 @ (a,w) # (w,b) # p2\""], ["proof (prove)\nusing this:\n  pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y\n  w \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        p = p1 @ (a, w) # (w, b) # p2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using exists_co_path_decomp1 \\<open>(a,b) \\<in> parcs G\\<close> \\<open>w \\<notin> pverts G\\<close> \\<open>(a,w) \\<in> set p\\<close> \\<open>w \\<noteq> y\\<close>"], ["proof (prove)\nusing this:\n  pre_digraph.apath (with_proj (subdivide G (a, b) w)) x p y\n  w \\<noteq> y\n  \\<lbrakk>?e \\<in> parcs G; ?w \\<notin> pverts G;\n   pre_digraph.apath (with_proj (subdivide G ?e ?w)) ?u ?p ?v;\n   (fst ?e, ?w) \\<in> set ?p; ?w \\<noteq> ?v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p1 p2.\n                       ?p = p1 @ (fst ?e, ?w) # (?w, snd ?e) # p2\n  (a, b) \\<in> parcs G\n  w \\<notin> pverts G\n  (a, w) \\<in> set p\n  w \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        p = p1 @ (a, w) # (w, b) # p2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim auto"], ["proof (state)\nthis:\n  p = p1 @ (a, w) # (w, b) # p2\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "moreover"], ["proof (state)\nthis:\n  p = p1 @ (a, w) # (w, b) # p2\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "from p"], ["proof (chain)\npicking this:\n  p = p1 @ (a, w) # (w, b) # p2", "have \"co_path e w ((a,w) # (w,b) # p2) = (a,b) # co_path e w p2\""], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n\ngoal (1 subgoal):\n 1. co_path e w ((a, w) # (w, b) # p2) = (a, b) # co_path e w p2", "unfolding \\<open>e = (u,v)\\<close>"], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n\ngoal (1 subgoal):\n 1. co_path (u, v) w ((a, w) # (w, b) # p2) = (a, b) # co_path (u, v) w p2", "using ab"], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n  (a, b) = (u, v) \\<or> (a, b) = (v, u)\n\ngoal (1 subgoal):\n 1. co_path (u, v) w ((a, w) # (w, b) # p2) = (a, b) # co_path (u, v) w p2", "by auto"], ["proof (state)\nthis:\n  co_path e w ((a, w) # (w, b) # p2) = (a, b) # co_path e w p2\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "ultimately"], ["proof (chain)\npicking this:\n  p = p1 @ (a, w) # (w, b) # p2\n  co_path e w ((a, w) # (w, b) # p2) = (a, b) # co_path e w p2", "have \"(a,b) \\<in> set (co_path e w p)\""], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n  co_path e w ((a, w) # (w, b) # p2) = (a, b) # co_path e w p2\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> set (co_path e w p)", "unfolding \\<open>e = (u,v)\\<close>"], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n  co_path (u, v) w ((a, w) # (w, b) # p2) = (a, b) # co_path (u, v) w p2\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> set (co_path (u, v) w p)", "using ab \\<open>u \\<noteq> w\\<close> \\<open>v \\<noteq> w\\<close>"], ["proof (prove)\nusing this:\n  p = p1 @ (a, w) # (w, b) # p2\n  co_path (u, v) w ((a, w) # (w, b) # p2) = (a, b) # co_path (u, v) w p2\n  (a, b) = (u, v) \\<or> (a, b) = (v, u)\n  u \\<noteq> w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> set (co_path (u, v) w p)", "by (induct p rule: co_path_induct) (auto simp: co_path_append)"], ["proof (state)\nthis:\n  (a, b) \\<in> set (co_path e w p)\n\ngoal (1 subgoal):\n 1. e' \\<notin> parcs (subdivide G e w) \\<Longrightarrow>\n    \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "then"], ["proof (chain)\npicking this:\n  (a, b) \\<in> set (co_path e w p)", "show ?thesis"], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (co_path e w p)\n\ngoal (1 subgoal):\n 1. \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "using \\<open>gen_iapath V x (co_path e w p) y\\<close> \\<open>e' = (a,b)\\<close>"], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (co_path e w p)\n  gen_iapath V x (co_path e w p) y\n  e' = (a, b)\n\ngoal (1 subgoal):\n 1. \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "by fast"], ["proof (state)\nthis:\n  \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n\ngoal (1 subgoal):\n 1. \\<And>e. e \\<in> parcs G \\<Longrightarrow> fst e \\<noteq> snd e", "then"], ["proof (chain)\npicking this:\n  \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p", "show \"fst e' \\<noteq> snd e'\""], ["proof (prove)\nusing this:\n  \\<exists>x p y. gen_iapath V x p y \\<and> e' \\<in> set p\n\ngoal (1 subgoal):\n 1. fst e' \\<noteq> snd e'", "by (blast dest: no_loops_in_iapath)"], ["proof (state)\nthis:\n  fst e' \\<noteq> snd e'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>e\\<in>parcs G.\n     fst e \\<noteq> snd e \\<and>\n     (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)\n\ngoal (1 subgoal):\n 1. is_slim V", "have unique: \"\\<forall>u v p q. (gen_iapath V u p v \\<and> gen_iapath V u q v) \\<longrightarrow> p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u v p q.\n       gen_iapath V u p v \\<and> gen_iapath V u q v \\<longrightarrow> p = q", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "fix x y p q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "assume A: \"gen_iapath V x p y\" \"gen_iapath V x q y\""], ["proof (state)\nthis:\n  gen_iapath V x p y\n  gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  gen_iapath V x p y\n  gen_iapath V x q y", "have \"set p \\<subseteq> parcs G\" \"set q \\<subseteq> parcs G\""], ["proof (prove)\nusing this:\n  gen_iapath V x p y\n  gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> parcs G &&& set q \\<subseteq> parcs G", "by (auto simp: gen_iapath_def apath_def)"], ["proof (state)\nthis:\n  set p \\<subseteq> parcs G\n  set q \\<subseteq> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  set p \\<subseteq> parcs G\n  set q \\<subseteq> parcs G", "have w_p: \"(u,w) \\<notin> set p\" \"(v,w) \\<notin> set p\" and w_q: \"(u,w) \\<notin> set q\" \"(v,w) \\<notin> set q\""], ["proof (prove)\nusing this:\n  set p \\<subseteq> parcs G\n  set q \\<subseteq> parcs G\n\ngoal (1 subgoal):\n 1. ((u, w) \\<notin> set p &&& (v, w) \\<notin> set p) &&&\n    (u, w) \\<notin> set q &&& (v, w) \\<notin> set q", "using mem1"], ["proof (prove)\nusing this:\n  set p \\<subseteq> parcs G\n  set q \\<subseteq> parcs G\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. ((u, w) \\<notin> set p &&& (v, w) \\<notin> set p) &&&\n    (u, w) \\<notin> set q &&& (v, w) \\<notin> set q", "by (auto simp: wellformed')"], ["proof (state)\nthis:\n  (u, w) \\<notin> set p\n  (v, w) \\<notin> set p\n  (u, w) \\<notin> set q\n  (v, w) \\<notin> set q\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "from A"], ["proof (chain)\npicking this:\n  gen_iapath V x p y\n  gen_iapath V x q y", "have \"sdG.gen_iapath V x (sd_path e w p) y\" \"sdG.gen_iapath V x (sd_path e w q) y\""], ["proof (prove)\nusing this:\n  gen_iapath V x p y\n  gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. sdG.gen_iapath V x (sd_path e w p) y &&&\n    sdG.gen_iapath V x (sd_path e w q) y", "using mem1 V_G"], ["proof (prove)\nusing this:\n  gen_iapath V x p y\n  gen_iapath V x q y\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. sdG.gen_iapath V x (sd_path e w p) y &&&\n    sdG.gen_iapath V x (sd_path e w q) y", "by (auto intro: gen_iapath_sd_path)"], ["proof (state)\nthis:\n  sdG.gen_iapath V x (sd_path e w p) y\n  sdG.gen_iapath V x (sd_path e w q) y\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  sdG.gen_iapath V x (sd_path e w p) y\n  sdG.gen_iapath V x (sd_path e w q) y", "have \"sd_path e w p = sd_path e w q\""], ["proof (prove)\nusing this:\n  sdG.gen_iapath V x (sd_path e w p) y\n  sdG.gen_iapath V x (sd_path e w q) y\n\ngoal (1 subgoal):\n 1. sd_path e w p = sd_path e w q", "using \\<open>sdG.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  sdG.gen_iapath V x (sd_path e w p) y\n  sdG.gen_iapath V x (sd_path e w q) y\n  sdG.is_slim V\n\ngoal (1 subgoal):\n 1. sd_path e w p = sd_path e w q", "unfolding sdG.is_slim_def"], ["proof (prove)\nusing this:\n  sdG.gen_iapath V x (sd_path e w p) y\n  sdG.gen_iapath V x (sd_path e w q) y\n  (\\<forall>v\\<in>pverts (subdivide G e w).\n      v \\<in> V \\<or>\n      in_degree (with_proj (subdivide G e w)) v \\<le> 2 \\<and>\n      (\\<exists>x p y.\n          sdG.gen_iapath V x p y \\<and>\n          v \\<in> set (pawalk_verts x p))) \\<and>\n  (\\<forall>e\\<in>parcs (subdivide G e w).\n      fst e \\<noteq> snd e \\<and>\n      (\\<exists>x p y. sdG.gen_iapath V x p y \\<and> e \\<in> set p)) \\<and>\n  (\\<forall>u v p q.\n      sdG.gen_iapath V u p v \\<and> sdG.gen_iapath V u q v \\<longrightarrow>\n      p = q) \\<and>\n  V \\<subseteq> pverts (subdivide G e w)\n\ngoal (1 subgoal):\n 1. sd_path e w p = sd_path e w q", "by metis"], ["proof (state)\nthis:\n  sd_path e w p = sd_path e w q\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  sd_path e w p = sd_path e w q", "have \"co_path e w (sd_path e w p) = co_path e w (sd_path e w q)\""], ["proof (prove)\nusing this:\n  sd_path e w p = sd_path e w q\n\ngoal (1 subgoal):\n 1. co_path e w (sd_path e w p) = co_path e w (sd_path e w q)", "by simp"], ["proof (state)\nthis:\n  co_path e w (sd_path e w p) = co_path e w (sd_path e w q)\n\ngoal (1 subgoal):\n 1. \\<And>u v p q.\n       \\<lbrakk>gen_iapath V u p v; gen_iapath V u q v\\<rbrakk>\n       \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  co_path e w (sd_path e w p) = co_path e w (sd_path e w q)", "show \"p = q\""], ["proof (prove)\nusing this:\n  co_path e w (sd_path e w p) = co_path e w (sd_path e w q)\n\ngoal (1 subgoal):\n 1. p = q", "using w_p w_q \\<open>e = (u,v)\\<close>"], ["proof (prove)\nusing this:\n  co_path e w (sd_path e w p) = co_path e w (sd_path e w q)\n  (u, w) \\<notin> set p\n  (v, w) \\<notin> set p\n  (u, w) \\<notin> set q\n  (v, w) \\<notin> set q\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. p = q", "by (simp add: co_sd_id)"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u v p q.\n     gen_iapath V u p v \\<and> gen_iapath V u q v \\<longrightarrow> p = q\n\ngoal (1 subgoal):\n 1. is_slim V", "from pverts parcs V_G unique"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>pverts G.\n     v \\<in> V \\<or>\n     in_degree (with_proj G) v \\<le> 2 \\<and>\n     (\\<exists>x p y.\n         gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))\n  \\<forall>e\\<in>parcs G.\n     fst e \\<noteq> snd e \\<and>\n     (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  \\<forall>u v p q.\n     gen_iapath V u p v \\<and> gen_iapath V u q v \\<longrightarrow> p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>pverts G.\n     v \\<in> V \\<or>\n     in_degree (with_proj G) v \\<le> 2 \\<and>\n     (\\<exists>x p y.\n         gen_iapath V x p y \\<and> v \\<in> set (pawalk_verts x p))\n  \\<forall>e\\<in>parcs G.\n     fst e \\<noteq> snd e \\<and>\n     (\\<exists>x p y. gen_iapath V x p y \\<and> e \\<in> set p)\n  V \\<subseteq> pverts G\n  verts3 (with_proj G) \\<subseteq> V\n  \\<forall>u v p q.\n     gen_iapath V u p v \\<and> gen_iapath V u q v \\<longrightarrow> p = q\n\ngoal (1 subgoal):\n 1. is_slim V", "by (auto simp: is_slim_def)"], ["proof (state)\nthis:\n  is_slim V\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context pair_pseudo_graph begin"], ["", "lemma subdivision_gen_contr:\n  assumes \"is_slim V\"\n  shows \"subdivision_pair (gen_contr_graph G V) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) V) G", "using assms"], ["proof (prove)\nusing this:\n  is_slim V\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) V) G", "using pair_pseudo_graph"], ["proof (prove)\nusing this:\n  is_slim V\n  pair_pseudo_graph G\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) V) G", "proof (induct \"card (pverts G - V)\" arbitrary: G)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>0 = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G\n 2. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "case 0"], ["proof (state)\nthis:\n  0 = card (pverts G - V)\n  pair_pre_digraph.is_slim G V\n  pair_pseudo_graph G\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>0 = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G\n 2. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "interpret G: pair_pseudo_graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph G", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>0 = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G\n 2. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have \"pair_bidirected_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "using G.pair_sym_arcs 0"], ["proof (prove)\nusing this:\n  symmetric (with_proj G)\n  0 = card (pverts G - V)\n  G.is_slim V\n  pair_pseudo_graph G\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "by unfold_locales (auto simp: G.is_slim_def)"], ["proof (state)\nthis:\n  pair_bidirected_digraph G\n\ngoal (2 subgoals):\n 1. \\<And>G.\n       \\<lbrakk>0 = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G\n 2. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "with 0"], ["proof (chain)\npicking this:\n  0 = card (pverts G - V)\n  G.is_slim V\n  pair_pseudo_graph G\n  pair_bidirected_digraph G", "show ?case"], ["proof (prove)\nusing this:\n  0 = card (pverts G - V)\n  G.is_slim V\n  pair_pseudo_graph G\n  pair_bidirected_digraph G\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) V) G", "by (auto intro: subdivision_pair_intros simp: G.gen_contr_triv G.is_slim_def)"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G) V) G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>n = card (pverts ?G - V); pair_pre_digraph.is_slim ?G V;\n   pair_pseudo_graph ?G\\<rbrakk>\n  \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj ?G) V) ?G\n  Suc n = card (pverts G - V)\n  pair_pre_digraph.is_slim G V\n  pair_pseudo_graph G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "interpret G: pair_pseudo_graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph G", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "from \\<open>Suc n = card (pverts G - V)\\<close>"], ["proof (chain)\npicking this:\n  Suc n = card (pverts G - V)", "have \"pverts G - V \\<noteq> {}\""], ["proof (prove)\nusing this:\n  Suc n = card (pverts G - V)\n\ngoal (1 subgoal):\n 1. pverts G - V \\<noteq> {}", "by (metis Nat.diff_le_self Suc_n_not_le_n card_Diff_subset_Int diff_Suc_Suc empty_Diff finite.emptyI inf_bot_left)"], ["proof (state)\nthis:\n  pverts G - V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  pverts G - V \\<noteq> {}", "obtain w where \"w \\<in> pverts G - V\""], ["proof (prove)\nusing this:\n  pverts G - V \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        w \\<in> pverts G - V \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w \\<in> pverts G - V\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  w \\<in> pverts G - V", "obtain x q y where q: \"G.gen_iapath V x q y\" \"w \\<in> set (G.awalk_verts x q)\" \"in_degree G w \\<le> 2\""], ["proof (prove)\nusing this:\n  w \\<in> pverts G - V\n\ngoal (1 subgoal):\n 1. (\\<And>x q y.\n        \\<lbrakk>G.gen_iapath V x q y; w \\<in> set (pawalk_verts x q);\n         in_degree (with_proj G) w \\<le> 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>G.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  w \\<in> pverts G - V\n  G.is_slim V\n\ngoal (1 subgoal):\n 1. (\\<And>x q y.\n        \\<lbrakk>G.gen_iapath V x q y; w \\<in> set (pawalk_verts x q);\n         in_degree (with_proj G) w \\<le> 2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.is_slim_def)"], ["proof (state)\nthis:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2", "have \"w \\<noteq> x\" \"w \\<noteq> y\" \"w \\<notin> V\""], ["proof (prove)\nusing this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. w \\<noteq> x &&& w \\<noteq> y &&& w \\<notin> V", "using \\<open>w \\<in> pverts G - V\\<close>"], ["proof (prove)\nusing this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  w \\<in> pverts G - V\n\ngoal (1 subgoal):\n 1. w \\<noteq> x &&& w \\<noteq> y &&& w \\<notin> V", "by (auto simp: G.gen_iapath_def)"], ["proof (state)\nthis:\n  w \\<noteq> x\n  w \\<noteq> y\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  w \\<noteq> x\n  w \\<noteq> y\n  w \\<notin> V", "obtain e where \"e \\<in> set q\" \"snd e = w\""], ["proof (prove)\nusing this:\n  w \\<noteq> x\n  w \\<noteq> y\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> set q; snd e = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>w \\<in> pverts G - V\\<close> q"], ["proof (prove)\nusing this:\n  w \\<noteq> x\n  w \\<noteq> y\n  w \\<notin> V\n  w \\<in> pverts G - V\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> set q; snd e = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G.gen_iapath_def G.apath_def G.awalk_conv"], ["proof (prove)\nusing this:\n  w \\<noteq> x\n  w \\<noteq> y\n  w \\<notin> V\n  w \\<in> pverts G - V\n  x \\<in> V \\<and>\n  y \\<in> V \\<and>\n  ((set (pawalk_verts x q) \\<subseteq> pverts G \\<and>\n    set q \\<subseteq> parcs G \\<and>\n    hd (pawalk_verts x q) = x \\<and>\n    last (pawalk_verts x q) = y \\<and> pcas x q y) \\<and>\n   distinct (pawalk_verts x q)) \\<and>\n  set (G.inner_verts q) \\<inter> V = {} \\<and> q \\<noteq> []\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> set q; snd e = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.awalk_verts_conv')"], ["proof (state)\nthis:\n  e \\<in> set q\n  snd e = w\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "moreover"], ["proof (state)\nthis:\n  e \\<in> set q\n  snd e = w\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "define u where \"u = fst e\""], ["proof (state)\nthis:\n  u = fst e\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "ultimately"], ["proof (chain)\npicking this:\n  e \\<in> set q\n  snd e = w\n  u = fst e", "obtain q1 q2 v where q_decomp: \"q = q1 @ (u, w) # (w, v) # q2\" \"u \\<noteq> v\" \"w \\<noteq> v\""], ["proof (prove)\nusing this:\n  e \\<in> set q\n  snd e = w\n  u = fst e\n\ngoal (1 subgoal):\n 1. (\\<And>q1 v q2.\n        \\<lbrakk>q = q1 @ (u, w) # (w, v) # q2; u \\<noteq> v;\n         w \\<noteq> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using q \\<open>w \\<noteq> y\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> set q\n  snd e = w\n  u = fst e\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  w \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>q1 v q2.\n        \\<lbrakk>q = q1 @ (u, w) # (w, v) # q2; u \\<noteq> v;\n         w \\<noteq> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G.gen_iapath_def"], ["proof (prove)\nusing this:\n  e \\<in> set q\n  snd e = w\n  u = fst e\n  x \\<in> V \\<and>\n  y \\<in> V \\<and>\n  G.apath x q y \\<and>\n  set (G.inner_verts q) \\<inter> V = {} \\<and> q \\<noteq> []\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  w \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>q1 v q2.\n        \\<lbrakk>q = q1 @ (u, w) # (w, v) # q2; u \\<noteq> v;\n         w \\<noteq> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule G.apath_succ_decomp, auto)"], ["proof (state)\nthis:\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "with q"], ["proof (chain)\npicking this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v", "have qi_walks: \"G.awalk x q1 u\" \"G.awalk v q2 y\""], ["proof (prove)\nusing this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v\n\ngoal (1 subgoal):\n 1. G.awalk x q1 u &&& G.awalk v q2 y", "by (auto simp: G.gen_iapath_def G.apath_def G.awalk_Cons_iff)"], ["proof (state)\nthis:\n  G.awalk x q1 u\n  G.awalk v q2 y\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "from q q_decomp"], ["proof (chain)\npicking this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v", "have uvw_arcs1: \"(u,w) \\<in> parcs G\" \"(w,v) \\<in> parcs G\""], ["proof (prove)\nusing this:\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v\n\ngoal (1 subgoal):\n 1. (u, w) \\<in> parcs G &&& (w, v) \\<in> parcs G", "by (auto simp: G.gen_iapath_def G.apath_def)"], ["proof (state)\nthis:\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G", "have uvw_arcs2: \"(w,u) \\<in> parcs G\" \"(v,w) \\<in> parcs G\""], ["proof (prove)\nusing this:\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. (w, u) \\<in> parcs G &&& (v, w) \\<in> parcs G", "by (blast intro: G.arcs_symmetric)+"], ["proof (state)\nthis:\n  (w, u) \\<in> parcs G\n  (v, w) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have \"u \\<noteq> w\" \"v \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<noteq> w &&& v \\<noteq> w", "using q_decomp q"], ["proof (prove)\nusing this:\n  q = q1 @ (u, w) # (w, v) # q2\n  u \\<noteq> v\n  w \\<noteq> v\n  G.gen_iapath V x q y\n  w \\<in> set (pawalk_verts x q)\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. u \\<noteq> w &&& v \\<noteq> w", "by (auto simp: G.gen_iapath_def G.apath_append_iff G.apath_simps)"], ["proof (state)\nthis:\n  u \\<noteq> w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have in_arcs: \"in_arcs G w = {(u,w), (v,w)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "have \"{(u,w), (v,w)} \\<subseteq> in_arcs G w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w", "using uvw_arcs1 uvw_arcs2"], ["proof (prove)\nusing this:\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n  (w, u) \\<in> parcs G\n  (v, w) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w", "by (auto simp: )"], ["proof (state)\nthis:\n  {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "moreover"], ["proof (state)\nthis:\n  {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "note \\<open>in_degree G w \\<le> 2\\<close>"], ["proof (state)\nthis:\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "moreover"], ["proof (state)\nthis:\n  in_degree (with_proj G) w \\<le> 2\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "have \"card {(u,w), (v,w)} = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {(u, w), (v, w)} = 2", "using \\<open>u \\<noteq> v\\<close>"], ["proof (prove)\nusing this:\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. card {(u, w), (v, w)} = 2", "by auto"], ["proof (state)\nthis:\n  card {(u, w), (v, w)} = 2\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "ultimately"], ["proof (chain)\npicking this:\n  {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w\n  in_degree (with_proj G) w \\<le> 2\n  card {(u, w), (v, w)} = 2", "show ?thesis"], ["proof (prove)\nusing this:\n  {(u, w), (v, w)} \\<subseteq> in_arcs (with_proj G) w\n  in_degree (with_proj G) w \\<le> 2\n  card {(u, w), (v, w)} = 2\n\ngoal (1 subgoal):\n 1. in_arcs (with_proj G) w = {(u, w), (v, w)}", "by - (rule card_seteq[symmetric], auto simp: in_degree_def)"], ["proof (state)\nthis:\n  in_arcs (with_proj G) w = {(u, w), (v, w)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  in_arcs (with_proj G) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have out_arcs: \"out_arcs G w \\<subseteq> {(w,u), (w,v)}\" (is \"?L \\<subseteq> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (with_proj G) w \\<subseteq> {(w, u), (w, v)}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> out_arcs (with_proj G) w \\<Longrightarrow>\n       x \\<in> {(w, u), (w, v)}", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> out_arcs (with_proj G) w \\<Longrightarrow>\n       x \\<in> {(w, u), (w, v)}", "assume \"e \\<in> out_arcs G w\""], ["proof (state)\nthis:\n  e \\<in> out_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> out_arcs (with_proj G) w \\<Longrightarrow>\n       x \\<in> {(w, u), (w, v)}", "then"], ["proof (chain)\npicking this:\n  e \\<in> out_arcs (with_proj G) w", "have \"(snd e, fst e) \\<in> in_arcs G w\""], ["proof (prove)\nusing this:\n  e \\<in> out_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. (snd e, fst e) \\<in> in_arcs (with_proj G) w", "by (auto intro: G.arcs_symmetric)"], ["proof (state)\nthis:\n  (snd e, fst e) \\<in> in_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> out_arcs (with_proj G) w \\<Longrightarrow>\n       x \\<in> {(w, u), (w, v)}", "then"], ["proof (chain)\npicking this:\n  (snd e, fst e) \\<in> in_arcs (with_proj G) w", "show \"e \\<in> {(w, u), (w, v)}\""], ["proof (prove)\nusing this:\n  (snd e, fst e) \\<in> in_arcs (with_proj G) w\n\ngoal (1 subgoal):\n 1. e \\<in> {(w, u), (w, v)}", "using in_arcs"], ["proof (prove)\nusing this:\n  (snd e, fst e) \\<in> in_arcs (with_proj G) w\n  in_arcs (with_proj G) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. e \\<in> {(w, u), (w, v)}", "by auto"], ["proof (state)\nthis:\n  e \\<in> {(w, u), (w, v)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  out_arcs (with_proj G) w \\<subseteq> {(w, u), (w, v)}\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have \"(u,v) \\<notin> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<notin> parcs G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G \\<Longrightarrow> False", "assume \"(u,v) \\<in> parcs G\""], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G \\<Longrightarrow> False", "have \"G.gen_iapath V x (q1 @ (u,v) # q2) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "have awalk': \"G.awalk x (q1 @ (u,v) # q2) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.awalk x (q1 @ (u, v) # q2) y", "using qi_walks \\<open>(u,v) \\<in> parcs G\\<close>"], ["proof (prove)\nusing this:\n  G.awalk x q1 u\n  G.awalk v q2 y\n  (u, v) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. G.awalk x (q1 @ (u, v) # q2) y", "by (auto simp: G.awalk_simps)"], ["proof (state)\nthis:\n  G.awalk x (q1 @ (u, v) # q2) y\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "have \"G.awalk x q y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.awalk x q y", "using \\<open>G.gen_iapath V x q y\\<close>"], ["proof (prove)\nusing this:\n  G.gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. G.awalk x q y", "by (auto simp: G.gen_iapath_def G.apath_def)"], ["proof (state)\nthis:\n  G.awalk x q y\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "have \"distinct (G.awalk_verts x (q1 @ (u,v) # q2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (pawalk_verts x (q1 @ (u, v) # q2))", "using awalk' \\<open>G.gen_iapath V x q y\\<close>"], ["proof (prove)\nusing this:\n  G.awalk x (q1 @ (u, v) # q2) y\n  G.gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. distinct (pawalk_verts x (q1 @ (u, v) # q2))", "unfolding q_decomp"], ["proof (prove)\nusing this:\n  G.awalk x (q1 @ (u, v) # q2) y\n  G.gen_iapath V x (q1 @ (u, w) # (w, v) # q2) y\n\ngoal (1 subgoal):\n 1. distinct (pawalk_verts x (q1 @ (u, v) # q2))", "by (auto simp: G.gen_iapath_def G.apath_def G.awalk_verts_append)"], ["proof (state)\nthis:\n  distinct (pawalk_verts x (q1 @ (u, v) # q2))\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "moreover"], ["proof (state)\nthis:\n  distinct (pawalk_verts x (q1 @ (u, v) # q2))\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "have \"set (G.inner_verts (q1 @ (u,v) # q2)) \\<subseteq> set (G.inner_verts q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)", "using awalk' \\<open>G.awalk x q y\\<close>"], ["proof (prove)\nusing this:\n  G.awalk x (q1 @ (u, v) # q2) y\n  G.awalk x q y\n\ngoal (1 subgoal):\n 1. set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)", "unfolding q_decomp"], ["proof (prove)\nusing this:\n  G.awalk x (q1 @ (u, v) # q2) y\n  G.awalk x (q1 @ (u, w) # (w, v) # q2) y\n\ngoal (1 subgoal):\n 1. set (G.inner_verts (q1 @ (u, v) # q2))\n    \\<subseteq> set (G.inner_verts (q1 @ (u, w) # (w, v) # q2))", "by (auto simp: butlast_append G.inner_verts_conv[of _ x] G.awalk_verts_append\n          intro: in_set_butlast_appendI)"], ["proof (state)\nthis:\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "then"], ["proof (chain)\npicking this:\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)", "have \"set (G.inner_verts (q1 @ (u,v) # q2)) \\<inter> V = {}\""], ["proof (prove)\nusing this:\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)\n\ngoal (1 subgoal):\n 1. set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}", "using \\<open>G.gen_iapath V x q y\\<close>"], ["proof (prove)\nusing this:\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<subseteq> set (G.inner_verts q)\n  G.gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}", "by (auto simp: G.gen_iapath_def)"], ["proof (state)\nthis:\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "ultimately"], ["proof (chain)\npicking this:\n  distinct (pawalk_verts x (q1 @ (u, v) # q2))\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct (pawalk_verts x (q1 @ (u, v) # q2))\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "using awalk' \\<open>G.gen_iapath V x q y\\<close>"], ["proof (prove)\nusing this:\n  distinct (pawalk_verts x (q1 @ (u, v) # q2))\n  set (G.inner_verts (q1 @ (u, v) # q2)) \\<inter> V = {}\n  G.awalk x (q1 @ (u, v) # q2) y\n  G.gen_iapath V x q y\n\ngoal (1 subgoal):\n 1. G.gen_iapath V x (q1 @ (u, v) # q2) y", "by (simp add: G.gen_iapath_def G.apath_def)"], ["proof (state)\nthis:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y", "have \"(q1 @ (u,v) # q2) = q\""], ["proof (prove)\nusing this:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y\n\ngoal (1 subgoal):\n 1. q1 @ (u, v) # q2 = q", "using \\<open>G.gen_iapath V x q y\\<close> \\<open>G.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y\n  G.gen_iapath V x q y\n  G.is_slim V\n\ngoal (1 subgoal):\n 1. q1 @ (u, v) # q2 = q", "unfolding G.is_slim_def"], ["proof (prove)\nusing this:\n  G.gen_iapath V x (q1 @ (u, v) # q2) y\n  G.gen_iapath V x q y\n  (\\<forall>v\\<in>pverts G.\n      v \\<in> V \\<or>\n      in_degree (with_proj G) v \\<le> 2 \\<and>\n      (\\<exists>x p y.\n          G.gen_iapath V x p y \\<and>\n          v \\<in> set (pawalk_verts x p))) \\<and>\n  (\\<forall>e\\<in>parcs G.\n      fst e \\<noteq> snd e \\<and>\n      (\\<exists>x p y. G.gen_iapath V x p y \\<and> e \\<in> set p)) \\<and>\n  (\\<forall>u v p q.\n      G.gen_iapath V u p v \\<and> G.gen_iapath V u q v \\<longrightarrow>\n      p = q) \\<and>\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. q1 @ (u, v) # q2 = q", "by metis"], ["proof (state)\nthis:\n  q1 @ (u, v) # q2 = q\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  q1 @ (u, v) # q2 = q", "show False"], ["proof (prove)\nusing this:\n  q1 @ (u, v) # q2 = q\n\ngoal (1 subgoal):\n 1. False", "unfolding q_decomp"], ["proof (prove)\nusing this:\n  q1 @ (u, v) # q2 = q1 @ (u, w) # (w, v) # q2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u, v) \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<notin> parcs G", "have \"(v,u) \\<notin> parcs G\""], ["proof (prove)\nusing this:\n  (u, v) \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. (v, u) \\<notin> parcs G", "by (auto intro: G.arcs_symmetric)"], ["proof (state)\nthis:\n  (v, u) \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "define G' where \"G' = \\<lparr>pverts = pverts G - {w},\n      parcs = {(u,v), (v,u)} \\<union> (parcs G - {(u,w), (w,u), (v,w), (w,v)})\\<rparr>\""], ["proof (state)\nthis:\n  G' =\n  \\<lparr>pverts = pverts G - {w},\n     parcs =\n       {(u, v), (v, u)} \\<union>\n       (parcs G - {(u, w), (w, u), (v, w), (w, v)})\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have mem_G': \"(u,v) \\<in> parcs G'\" \"w \\<notin> pverts G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G' &&& w \\<notin> pverts G'", "by (auto simp: G'_def)"], ["proof (state)\nthis:\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "interpret pd_G': pair_fin_digraph G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_fin_digraph G'", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> fst e \\<in> pverts G'\n 2. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> snd e \\<in> pverts G'\n 3. finite (pverts G')\n 4. finite (parcs G')", "fix e"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> fst e \\<in> pverts G'\n 2. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> snd e \\<in> pverts G'\n 3. finite (pverts G')\n 4. finite (parcs G')", "assume A: \"e \\<in> parcs G'\""], ["proof (state)\nthis:\n  e \\<in> parcs G'\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> fst e \\<in> pverts G'\n 2. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> snd e \\<in> pverts G'\n 3. finite (pverts G')\n 4. finite (parcs G')", "have \"e \\<in> parcs G \\<and> e \\<noteq> (u, w) \\<and> e \\<noteq> (w, u) \\<and> e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow> fst e \\<noteq> w\"\n      \"e \\<in> parcs G \\<and> e \\<noteq> (u, w) \\<and> e \\<noteq> (w, u) \\<and> e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow> snd e \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<in> parcs G \\<and>\n     e \\<noteq> (u, w) \\<and>\n     e \\<noteq> (w, u) \\<and>\n     e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n     fst e \\<noteq> w) &&&\n    (e \\<in> parcs G \\<and>\n     e \\<noteq> (u, w) \\<and>\n     e \\<noteq> (w, u) \\<and>\n     e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n     snd e \\<noteq> w)", "using out_arcs in_arcs"], ["proof (prove)\nusing this:\n  out_arcs (with_proj G) w \\<subseteq> {(w, u), (w, v)}\n  in_arcs (with_proj G) w = {(u, w), (v, w)}\n\ngoal (1 subgoal):\n 1. (e \\<in> parcs G \\<and>\n     e \\<noteq> (u, w) \\<and>\n     e \\<noteq> (w, u) \\<and>\n     e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n     fst e \\<noteq> w) &&&\n    (e \\<in> parcs G \\<and>\n     e \\<noteq> (u, w) \\<and>\n     e \\<noteq> (w, u) \\<and>\n     e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n     snd e \\<noteq> w)", "by auto"], ["proof (state)\nthis:\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  fst e \\<noteq> w\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  snd e \\<noteq> w\n\ngoal (4 subgoals):\n 1. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> fst e \\<in> pverts G'\n 2. \\<And>e. e \\<in> parcs G' \\<Longrightarrow> snd e \\<in> pverts G'\n 3. finite (pverts G')\n 4. finite (parcs G')", "with A uvw_arcs1"], ["proof (chain)\npicking this:\n  e \\<in> parcs G'\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  fst e \\<noteq> w\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  snd e \\<noteq> w", "show \"fst e \\<in> pverts G'\" \"snd e \\<in> pverts G'\""], ["proof (prove)\nusing this:\n  e \\<in> parcs G'\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  fst e \\<noteq> w\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  snd e \\<noteq> w\n\ngoal (1 subgoal):\n 1. fst e \\<in> pverts G' &&& snd e \\<in> pverts G'", "using \\<open>u \\<noteq> w\\<close> \\<open>v \\<noteq> w\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> parcs G'\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  fst e \\<noteq> w\n  e \\<in> parcs G \\<and>\n  e \\<noteq> (u, w) \\<and>\n  e \\<noteq> (w, u) \\<and>\n  e \\<noteq> (v, w) \\<and> e \\<noteq> (w, v) \\<Longrightarrow>\n  snd e \\<noteq> w\n  u \\<noteq> w\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. fst e \\<in> pverts G' &&& snd e \\<in> pverts G'", "by (auto simp: G'_def G.wellformed')"], ["proof (state)\nthis:\n  fst e \\<in> pverts G'\n  snd e \\<in> pverts G'\n\ngoal (2 subgoals):\n 1. finite (pverts G')\n 2. finite (parcs G')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (pverts G')\n 2. finite (parcs G')", "qed (auto simp: G'_def arc_to_ends_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "interpret spd_G': pair_pseudo_graph G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph G'", "proof (unfold_locales, simp add: symmetric_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. sym (parcs G')", "have \"sym {(u,v), (v,u)}\" \"sym (parcs G)\" \"sym {(u, w), (w, u), (v, w), (w, v)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym {(u, v), (v, u)} &&&\n    sym (parcs G) &&& sym {(u, w), (w, u), (v, w), (w, v)}", "using G.sym_arcs"], ["proof (prove)\nusing this:\n  symmetric (with_proj G)\n\ngoal (1 subgoal):\n 1. sym {(u, v), (v, u)} &&&\n    sym (parcs G) &&& sym {(u, w), (w, u), (v, w), (w, v)}", "by (auto simp: symmetric_def sym_def)"], ["proof (state)\nthis:\n  sym {(u, v), (v, u)}\n  sym (parcs G)\n  sym {(u, w), (w, u), (v, w), (w, v)}\n\ngoal (1 subgoal):\n 1. sym (parcs G')", "then"], ["proof (chain)\npicking this:\n  sym {(u, v), (v, u)}\n  sym (parcs G)\n  sym {(u, w), (w, u), (v, w), (w, v)}", "have \"sym ({(u,v), (v,u)} \\<union> (parcs G - {(u,w), (w,u), (v,w), (w,v)}))\""], ["proof (prove)\nusing this:\n  sym {(u, v), (v, u)}\n  sym (parcs G)\n  sym {(u, w), (w, u), (v, w), (w, v)}\n\ngoal (1 subgoal):\n 1. sym ({(u, v), (v, u)} \\<union>\n         (parcs G - {(u, w), (w, u), (v, w), (w, v)}))", "by (intro sym_Un) (auto simp: sym_diff)"], ["proof (state)\nthis:\n  sym ({(u, v), (v, u)} \\<union>\n       (parcs G - {(u, w), (w, u), (v, w), (w, v)}))\n\ngoal (1 subgoal):\n 1. sym (parcs G')", "then"], ["proof (chain)\npicking this:\n  sym ({(u, v), (v, u)} \\<union>\n       (parcs G - {(u, w), (w, u), (v, w), (w, v)}))", "show \"sym (parcs G')\""], ["proof (prove)\nusing this:\n  sym ({(u, v), (v, u)} \\<union>\n       (parcs G - {(u, w), (w, u), (v, w), (w, v)}))\n\ngoal (1 subgoal):\n 1. sym (parcs G')", "unfolding G'_def"], ["proof (prove)\nusing this:\n  sym ({(u, v), (v, u)} \\<union>\n       (parcs G - {(u, w), (w, u), (v, w), (w, v)}))\n\ngoal (1 subgoal):\n 1. sym (parcs\n          \\<lparr>pverts = pverts G - {w},\n             parcs =\n               {(u, v), (v, u)} \\<union>\n               (parcs G - {(u, w), (w, u), (v, w), (w, v)})\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  sym (parcs G')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have card_G': \"n = card (pverts G' - V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = card (pverts G' - V)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = card (pverts G' - V)", "have \"pverts G - V = insert w (pverts G' - V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts G - V = insert w (pverts G' - V)", "using \\<open>w \\<in> pverts G - V\\<close>"], ["proof (prove)\nusing this:\n  w \\<in> pverts G - V\n\ngoal (1 subgoal):\n 1. pverts G - V = insert w (pverts G' - V)", "by (auto simp: G'_def)"], ["proof (state)\nthis:\n  pverts G - V = insert w (pverts G' - V)\n\ngoal (1 subgoal):\n 1. n = card (pverts G' - V)", "then"], ["proof (chain)\npicking this:\n  pverts G - V = insert w (pverts G' - V)", "show ?thesis"], ["proof (prove)\nusing this:\n  pverts G - V = insert w (pverts G' - V)\n\ngoal (1 subgoal):\n 1. n = card (pverts G' - V)", "using \\<open>Suc n = card (pverts G - V)\\<close> mem_G'"], ["proof (prove)\nusing this:\n  pverts G - V = insert w (pverts G' - V)\n  Suc n = card (pverts G - V)\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n\ngoal (1 subgoal):\n 1. n = card (pverts G' - V)", "by simp"], ["proof (state)\nthis:\n  n = card (pverts G' - V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = card (pverts G' - V)\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have G_is_sd: \"G = subdivide G' (u,v) w\" (is \"_ = ?sdG'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. G = subdivide G' (u, v) w", "using \\<open>w \\<in> pverts G - V\\<close> \\<open>(u,v) \\<notin> parcs G\\<close> \\<open>(v,u) \\<notin> parcs G\\<close>  uvw_arcs1 uvw_arcs2"], ["proof (prove)\nusing this:\n  w \\<in> pverts G - V\n  (u, v) \\<notin> parcs G\n  (v, u) \\<notin> parcs G\n  (u, w) \\<in> parcs G\n  (w, v) \\<in> parcs G\n  (w, u) \\<in> parcs G\n  (v, w) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. G = subdivide G' (u, v) w", "by (intro pair_pre_digraph.equality) (auto simp: G'_def)"], ["proof (state)\nthis:\n  G = subdivide G' (u, v) w\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have gcg_sd: \"gen_contr_graph (subdivide G' (u,v) w) V = gen_contr_graph G' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "have \"V \\<subseteq> pverts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G", "using \\<open>G.is_slim V\\<close>"], ["proof (prove)\nusing this:\n  G.is_slim V\n\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G", "by (auto simp: G.is_slim_def verts3_def)"], ["proof (state)\nthis:\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "moreover"], ["proof (state)\nthis:\n  V \\<subseteq> pverts G\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "have \"verts3 G' = verts3 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj G') = verts3 (with_proj G)", "by (simp only: G_is_sd spd_G'.verts3_subdivide[OF \\<open>(u,v) \\<in> parcs G'\\<close> \\<open>w \\<notin> pverts G'\\<close>])"], ["proof (state)\nthis:\n  verts3 (with_proj G') = verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "ultimately"], ["proof (chain)\npicking this:\n  V \\<subseteq> pverts G\n  verts3 (with_proj G') = verts3 (with_proj G)", "have V: \"V \\<subseteq> pverts G'\""], ["proof (prove)\nusing this:\n  V \\<subseteq> pverts G\n  verts3 (with_proj G') = verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G'", "using \\<open>w \\<in> pverts G - V\\<close>"], ["proof (prove)\nusing this:\n  V \\<subseteq> pverts G\n  verts3 (with_proj G') = verts3 (with_proj G)\n  w \\<in> pverts G - V\n\ngoal (1 subgoal):\n 1. V \\<subseteq> pverts G'", "by (auto simp: G'_def)"], ["proof (state)\nthis:\n  V \\<subseteq> pverts G'\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "with mem_G'"], ["proof (chain)\npicking this:\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  V \\<subseteq> pverts G'", "show ?thesis"], ["proof (prove)\nusing this:\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  V \\<subseteq> pverts G'\n\ngoal (1 subgoal):\n 1. gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n    gen_contr_graph (with_proj G') V", "by (rule spd_G'.gcg_subdivide_eq)"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n  gen_contr_graph (with_proj G') V\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gen_contr_graph (with_proj (subdivide G' (u, v) w)) V =\n  gen_contr_graph (with_proj G') V\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "have is_slim_G': \"pd_G'.is_slim V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pd_G'.is_slim V", "using \\<open>G.is_slim V\\<close> mem_G' \\<open>w \\<notin> V\\<close>"], ["proof (prove)\nusing this:\n  G.is_slim V\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. pd_G'.is_slim V", "unfolding G_is_sd"], ["proof (prove)\nusing this:\n  pair_pre_digraph.is_slim (subdivide G' (u, v) w) V\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  w \\<notin> V\n\ngoal (1 subgoal):\n 1. pd_G'.is_slim V", "by (rule spd_G'.is_slim_if_subdivide)"], ["proof (state)\nthis:\n  pd_G'.is_slim V\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "with mem_G'"], ["proof (chain)\npicking this:\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  pd_G'.is_slim V", "have \"subdivision_pair (gen_contr_graph G' V) (subdivide G' (u, v) w)\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> parcs G'\n  w \\<notin> pverts G'\n  pd_G'.is_slim V\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G') V)\n     (subdivide G' (u, v) w)", "by (intro Suc card_G' subdivision_pair_intros) auto"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G') V)\n   (subdivide G' (u, v) w)\n\ngoal (1 subgoal):\n 1. \\<And>x G.\n       \\<lbrakk>\\<And>G.\n                   \\<lbrakk>x = card (pverts G - V);\n                    pair_pre_digraph.is_slim G V;\n                    pair_pseudo_graph G\\<rbrakk>\n                   \\<Longrightarrow> subdivision_pair\n(gen_contr_graph (with_proj G) V) G;\n        Suc x = card (pverts G - V); pair_pre_digraph.is_slim G V;\n        pair_pseudo_graph G\\<rbrakk>\n       \\<Longrightarrow> subdivision_pair (gen_contr_graph (with_proj G) V)\n                          G", "then"], ["proof (chain)\npicking this:\n  subdivision_pair (gen_contr_graph (with_proj G') V)\n   (subdivide G' (u, v) w)", "show ?case"], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj G') V)\n   (subdivide G' (u, v) w)\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) V) G", "by (simp add: gcg_sd G_is_sd)"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G) V) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  contr_is_subgraph_subdivision:\n  shows \"\\<exists>H. subgraph (with_proj H) G \\<and> subdivision_pair (contr_graph G) H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "interpret sG: pair_graph slim"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph slim", "by (rule pair_graph_slim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "have \"subdivision_pair (gen_contr_graph slim (verts3 G)) slim \""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivision_pair\n     (gen_contr_graph (with_proj slim) (verts3 (with_proj G))) slim", "by (rule sG.subdivision_gen_contr) (rule slim_is_slim)"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n   slim\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "then"], ["proof (chain)\npicking this:\n  subdivision_pair (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n   slim", "show ?thesis"], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n   slim\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "unfolding contr_graph_slim_eq"], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       subgraph (with_proj H) (with_proj G) \\<and>\n       subdivision_pair\n        (gen_contr_graph (with_proj G) (verts3 (with_proj G))) H", "by (blast intro: subgraph_slim)"], ["proof (state)\nthis:\n  \\<exists>H.\n     subgraph (with_proj H) (with_proj G) \\<and>\n     subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n      H\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem kuratowski_contr:\n  fixes K :: \"'a pair_pre_digraph\"\n  assumes subgraph_K: \"subgraph K G\"\n  assumes spd_K: \"pair_pseudo_graph K\"\n  assumes kuratowski: \"K\\<^bsub>3,3\\<^esub> (contr_graph K) \\<or> K\\<^bsub>5\\<^esub> (contr_graph K)\"\n  shows \"\\<not>kuratowski_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "interpret spd_K: pair_pseudo_graph K"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph K", "by (fact spd_K)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "obtain H where subgraph_H: \"subgraph (with_proj H) K\"\n      and subdiv_H:\"subdivision_pair (contr_graph K) H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>H.\n        \\<lbrakk>subgraph (with_proj H) (with_proj K);\n         subdivision_pair\n          (gen_contr_graph (with_proj K) (verts3 (with_proj K))) H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule spd_K.contr_is_subgraph_subdivision)"], ["proof (state)\nthis:\n  subgraph (with_proj H) (with_proj K)\n  subdivision_pair (gen_contr_graph (with_proj K) (verts3 (with_proj K))) H\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "have grI: \"\\<And>K. (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K) \\<Longrightarrow> graph K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>K.\n       K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K \\<Longrightarrow>\n       graph K", "by (auto simp: complete_digraph_def complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  K\\<^bsub>3,3\\<^esub> ?K \\<or> K\\<^bsub>5\\<^esub> ?K \\<Longrightarrow>\n  graph ?K\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "from subdiv_H and kuratowski"], ["proof (chain)\npicking this:\n  subdivision_pair (gen_contr_graph (with_proj K) (verts3 (with_proj K))) H\n  K\\<^bsub>3,3\\<^esub>\n   (with_proj (gen_contr_graph (with_proj K) (verts3 (with_proj K)))) \\<or>\n  K\\<^bsub>5\\<^esub>\n   (with_proj (gen_contr_graph (with_proj K) (verts3 (with_proj K))))", "have \"\\<exists>K. subdivision_pair K H \\<and> (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\""], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj K) (verts3 (with_proj K))) H\n  K\\<^bsub>3,3\\<^esub>\n   (with_proj (gen_contr_graph (with_proj K) (verts3 (with_proj K)))) \\<or>\n  K\\<^bsub>5\\<^esub>\n   (with_proj (gen_contr_graph (with_proj K) (verts3 (with_proj K))))\n\ngoal (1 subgoal):\n 1. \\<exists>K.\n       subdivision_pair K H \\<and>\n       (K\\<^bsub>3,3\\<^esub> (with_proj K) \\<or>\n        K\\<^bsub>5\\<^esub> (with_proj K))", "by blast"], ["proof (state)\nthis:\n  \\<exists>K.\n     subdivision_pair K H \\<and>\n     (K\\<^bsub>3,3\\<^esub> (with_proj K) \\<or>\n      K\\<^bsub>5\\<^esub> (with_proj K))\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "then"], ["proof (chain)\npicking this:\n  \\<exists>K.\n     subdivision_pair K H \\<and>\n     (K\\<^bsub>3,3\\<^esub> (with_proj K) \\<or>\n      K\\<^bsub>5\\<^esub> (with_proj K))", "have \"\\<exists>K rev_K rev_H. subdivision (K, rev_K) (H, rev_H) \\<and> (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\""], ["proof (prove)\nusing this:\n  \\<exists>K.\n     subdivision_pair K H \\<and>\n     (K\\<^bsub>3,3\\<^esub> (with_proj K) \\<or>\n      K\\<^bsub>5\\<^esub> (with_proj K))\n\ngoal (1 subgoal):\n 1. \\<exists>K rev_K rev_H.\n       subdivision (K, rev_K)\n        (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n       (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)", "by (auto intro: grI pair_graphI_graph)"], ["proof (state)\nthis:\n  \\<exists>K rev_K rev_H.\n     subdivision (K, rev_K)\n      (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n     (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "then"], ["proof (chain)\npicking this:\n  \\<exists>K rev_K rev_H.\n     subdivision (K, rev_K)\n      (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n     (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>K rev_K rev_H.\n     subdivision (K, rev_K)\n      (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n     (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "using subgraph_H subgraph_K"], ["proof (prove)\nusing this:\n  \\<exists>K rev_K rev_H.\n     subdivision (K, rev_K)\n      (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n     (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\n  subgraph (with_proj H) (with_proj K)\n  subgraph (with_proj K) (with_proj G)\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "unfolding kuratowski_planar_def"], ["proof (prove)\nusing this:\n  \\<exists>K rev_K rev_H.\n     subdivision (K, rev_K)\n      (case (H, rev_H) of (x, y) \\<Rightarrow> (with_proj x, y)) \\<and>\n     (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)\n  subgraph (with_proj H) (with_proj K)\n  subgraph (with_proj K) (with_proj G)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>H.\n               subgraph H (with_proj G) \\<and>\n               (\\<exists>K rev_K rev_H.\n                   subdivision (K, rev_K) (H, rev_H) \\<and>\n                   (K\\<^bsub>3,3\\<^esub> K \\<or> K\\<^bsub>5\\<^esub> K)))", "by (auto intro: subgraph_trans)"], ["proof (state)\nthis:\n  \\<not> kuratowski_planar (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem certificate_characterization:\n  defines \"kuratowski \\<equiv> \\<lambda>G :: 'a pair_pre_digraph. K\\<^bsub>3,3\\<^esub> G \\<or> K\\<^bsub>5\\<^esub> G\"\n  shows \"kuratowski (contr_graph G)\n    \\<longleftrightarrow> (\\<exists>H. kuratowski H \\<and> subdivision_pair H slim \\<and> verts3 G = verts3 slim)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G))) =\n    (\\<exists>H.\n        kuratowski H \\<and>\n        subdivision_pair H slim \\<and>\n        verts3 (with_proj G) = verts3 (with_proj slim))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "assume ?L"], ["proof (state)\nthis:\n  kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "interpret S: pair_graph slim"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph slim", "by (rule pair_graph_slim)"], ["proof (state)\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "have \"subdivision_pair (contr_graph G) slim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n     slim", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n     slim", "have *: \"S.is_slim (verts3 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.is_slim (verts3 (with_proj G))", "by (rule slim_is_slim)"], ["proof (state)\nthis:\n  S.is_slim (verts3 (with_proj G))\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n     slim", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n     slim", "using contr_graph_slim_eq S.subdivision_gen_contr[OF *]"], ["proof (prove)\nusing this:\n  gen_contr_graph (with_proj slim) (verts3 (with_proj G)) =\n  gen_contr_graph (with_proj G) (verts3 (with_proj G))\n  subdivision_pair (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n   slim\n\ngoal (1 subgoal):\n 1. subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n     slim", "by auto"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "moreover"], ["proof (state)\nthis:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "have \"verts3 slim = verts3 G\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. verts3 (with_proj slim) = verts3 (with_proj G)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj slim) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj G)\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj slim) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj G)\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "assume \"v \\<in> ?l\""], ["proof (state)\nthis:\n  v \\<in> verts3 (with_proj slim)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj slim) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj G)\n 2. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts3 (with_proj slim)", "show \"v \\<in> ?r\""], ["proof (prove)\nusing this:\n  v \\<in> verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "using verts_slim_in_G verts3_slim_in_verts3"], ["proof (prove)\nusing this:\n  v \\<in> verts3 (with_proj slim)\n  pverts slim \\<subseteq> pverts G\n  ?v \\<in> verts3 (with_proj slim) \\<Longrightarrow>\n  ?v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj G)", "by auto"], ["proof (state)\nthis:\n  v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "assume \"v \\<in> ?r\""], ["proof (state)\nthis:\n  v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "have \"v \\<in> verts3 (contr_graph G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "have \"v \\<in> verts (contr_graph G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> verts\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "using \\<open>v \\<in> ?r\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. v \\<in> verts\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "by (auto simp: verts3_def gen_contr_graph_def)"], ["proof (state)\nthis:\n  v \\<in> verts\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> verts\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "using \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> verts\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n  kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "unfolding kuratowski_def"], ["proof (prove)\nusing this:\n  v \\<in> verts\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n  K\\<^bsub>3,3\\<^esub>\n   (with_proj (gen_contr_graph (with_proj G) (verts3 (with_proj G)))) \\<or>\n  K\\<^bsub>5\\<^esub>\n   (with_proj (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "by (auto simp: verts3_K33 verts3_K5)"], ["proof (state)\nthis:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "have \"v \\<in> verts3 (gen_contr_graph slim (verts3 G))\""], ["proof (prove)\nusing this:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))", "unfolding contr_graph_slim_eq"], ["proof (prove)\nusing this:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj G) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. v \\<in> verts3\n             (with_proj\n               (gen_contr_graph (with_proj G) (verts3 (with_proj G))))", "."], ["proof (state)\nthis:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))", "have \"2 < in_degree (gen_contr_graph slim (verts3 G)) v\""], ["proof (prove)\nusing this:\n  v \\<in> verts3\n           (with_proj\n             (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))\n\ngoal (1 subgoal):\n 1. 2 < in_degree\n         (with_proj\n           (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))\n         v", "unfolding verts3_def"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> verts\n                    (with_proj\n                      (gen_contr_graph (with_proj slim)\n                        {v \\<in> verts (with_proj G).\n                         2 < in_degree (with_proj G) v})).\n           2 < in_degree\n                (with_proj\n                  (gen_contr_graph (with_proj slim)\n                    {v \\<in> verts (with_proj G).\n                     2 < in_degree (with_proj G) v}))\n                v}\n\ngoal (1 subgoal):\n 1. 2 < in_degree\n         (with_proj\n           (gen_contr_graph (with_proj slim)\n             {v \\<in> verts (with_proj G). 2 < in_degree (with_proj G) v}))\n         v", "by auto"], ["proof (state)\nthis:\n  2 < in_degree\n       (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))\n       v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "also"], ["proof (state)\nthis:\n  2 < in_degree\n       (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))\n       v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "have \"\\<dots> \\<le> in_degree slim v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree\n     (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))) v\n    \\<le> in_degree (with_proj slim) v", "using \\<open>v \\<in> ?r\\<close> verts3_slim_in_verts3"], ["proof (prove)\nusing this:\n  v \\<in> verts3 (with_proj G)\n  ?v \\<in> verts3 (with_proj slim) \\<Longrightarrow>\n  ?v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. in_degree\n     (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))) v\n    \\<le> in_degree (with_proj slim) v", "by (auto intro: S.in_degree_contr)"], ["proof (state)\nthis:\n  in_degree\n   (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))) v\n  \\<le> in_degree (with_proj slim) v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> verts3 (with_proj G) \\<Longrightarrow>\n       x \\<in> verts3 (with_proj slim)", "finally"], ["proof (chain)\npicking this:\n  2 < in_degree (with_proj slim) v", "show \"v \\<in> verts3 slim\""], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj slim) v\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj slim)", "using verts3_in_slim_G \\<open>v \\<in> ?r\\<close>"], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj slim) v\n  ?x \\<in> verts3 (with_proj G) \\<Longrightarrow> ?x \\<in> pverts slim\n  v \\<in> verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. v \\<in> verts3 (with_proj slim)", "unfolding verts3_def"], ["proof (prove)\nusing this:\n  2 < in_degree (with_proj slim) v\n  ?x \\<in> {v \\<in> verts (with_proj G).\n            2 < in_degree (with_proj G) v} \\<Longrightarrow>\n  ?x \\<in> pverts slim\n  v \\<in> {v \\<in> verts (with_proj G). 2 < in_degree (with_proj G) v}\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> verts (with_proj slim).\n             2 < in_degree (with_proj slim) v}", "by auto"], ["proof (state)\nthis:\n  v \\<in> verts3 (with_proj slim)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  verts3 (with_proj slim) = verts3 (with_proj G)\n\ngoal (2 subgoals):\n 1. kuratowski\n     (gen_contr_graph (with_proj G)\n       (verts3 (with_proj G))) \\<Longrightarrow>\n    \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)\n 2. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "ultimately"], ["proof (chain)\npicking this:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n  verts3 (with_proj slim) = verts3 (with_proj G)", "show ?R"], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n  verts3 (with_proj slim) = verts3 (with_proj G)\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)", "using \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  subdivision_pair (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n   slim\n  verts3 (with_proj slim) = verts3 (with_proj G)\n  kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim)", "by auto"], ["proof (state)\nthis:\n  \\<exists>H.\n     kuratowski H \\<and>\n     subdivision_pair H slim \\<and>\n     verts3 (with_proj G) = verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "assume ?R"], ["proof (state)\nthis:\n  \\<exists>H.\n     kuratowski H \\<and>\n     subdivision_pair H slim \\<and>\n     verts3 (with_proj G) = verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>H.\n     kuratowski H \\<and>\n     subdivision_pair H slim \\<and>\n     verts3 (with_proj G) = verts3 (with_proj slim)", "have \"kuratowski (gen_contr_graph slim (verts3 G))\""], ["proof (prove)\nusing this:\n  \\<exists>H.\n     kuratowski H \\<and>\n     subdivision_pair H slim \\<and>\n     verts3 (with_proj G) = verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. kuratowski (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))", "unfolding kuratowski_def"], ["proof (prove)\nusing this:\n  \\<exists>H.\n     (K\\<^bsub>3,3\\<^esub> (with_proj H) \\<or>\n      K\\<^bsub>5\\<^esub> (with_proj H)) \\<and>\n     subdivision_pair H slim \\<and>\n     verts3 (with_proj G) = verts3 (with_proj slim)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub>\n     (with_proj\n       (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))) \\<or>\n    K\\<^bsub>5\\<^esub>\n     (with_proj (gen_contr_graph (with_proj slim) (verts3 (with_proj G))))", "by (auto intro: K33_contractedI K5_contractedI)"], ["proof (state)\nthis:\n  kuratowski (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. \\<exists>H.\n       kuratowski H \\<and>\n       subdivision_pair H slim \\<and>\n       verts3 (with_proj G) = verts3 (with_proj slim) \\<Longrightarrow>\n    kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "then"], ["proof (chain)\npicking this:\n  kuratowski (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))", "show ?L"], ["proof (prove)\nusing this:\n  kuratowski (gen_contr_graph (with_proj slim) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "unfolding contr_graph_slim_eq"], ["proof (prove)\nusing this:\n  kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal (1 subgoal):\n 1. kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))", "."], ["proof (state)\nthis:\n  kuratowski (gen_contr_graph (with_proj G) (verts3 (with_proj G)))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in pair_pre_digraph) certify :: \"'a pair_pre_digraph \\<Rightarrow> bool\" where\n  \"certify cert \\<equiv> let C = contr_graph cert in subgraph cert G \\<and> (K\\<^bsub>3,3\\<^esub> C \\<or> K\\<^bsub>5\\<^esub>C)\""], ["", "theorem certify_complete:\n  assumes \"pair_pseudo_graph cert\"\n  assumes \"subgraph cert G\"\n  assumes \"\\<exists>H. subdivision_pair H cert \\<and> (K\\<^bsub>3,3\\<^esub> H \\<or> K\\<^bsub>5\\<^esub> H)\"\n  shows \"certify cert\""], ["proof (prove)\ngoal (1 subgoal):\n 1. certify cert", "unfolding certify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. let x = gen_contr_graph (with_proj cert) (verts3 (with_proj cert))\n    in subgraph (with_proj cert) (with_proj G) \\<and>\n       (K\\<^bsub>3,3\\<^esub> (with_proj x) \\<or>\n        K\\<^bsub>5\\<^esub> (with_proj x))", "using assms"], ["proof (prove)\nusing this:\n  pair_pseudo_graph cert\n  subgraph (with_proj cert) (with_proj G)\n  \\<exists>H.\n     subdivision_pair H cert \\<and>\n     (K\\<^bsub>3,3\\<^esub> (with_proj H) \\<or>\n      K\\<^bsub>5\\<^esub> (with_proj H))\n\ngoal (1 subgoal):\n 1. let x = gen_contr_graph (with_proj cert) (verts3 (with_proj cert))\n    in subgraph (with_proj cert) (with_proj G) \\<and>\n       (K\\<^bsub>3,3\\<^esub> (with_proj x) \\<or>\n        K\\<^bsub>5\\<^esub> (with_proj x))", "by (auto simp: Let_def intro: K33_contractedI K5_contractedI)"], ["", "theorem certify_sound:\n  assumes \"pair_pseudo_graph cert\"\n  assumes \"certify cert\"\n  shows\" \\<not>kuratowski_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "using assms"], ["proof (prove)\nusing this:\n  pair_pseudo_graph cert\n  certify cert\n\ngoal (1 subgoal):\n 1. \\<not> kuratowski_planar (with_proj G)", "by (intro kuratowski_contr) (auto simp: certify_def Let_def)"], ["", "theorem certify_characterization:\n  assumes \"pair_pseudo_graph cert\"\n  shows \"certify cert \\<longleftrightarrow> subgraph cert G \\<and> verts3 cert = verts3 (pair_pre_digraph.slim cert)\n      \\<and>(\\<exists>H. (K\\<^bsub>3,3\\<^esub> (with_proj H) \\<or> K\\<^bsub>5\\<^esub> H) \\<and> subdivision_pair H (pair_pre_digraph.slim cert))\"\n      (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. certify cert =\n    (subgraph (with_proj cert) (with_proj G) \\<and>\n     verts3 (with_proj cert) =\n     verts3 (with_proj (pair_pre_digraph.slim cert)) \\<and>\n     (\\<exists>H.\n         (K\\<^bsub>3,3\\<^esub> (with_proj H) \\<or>\n          K\\<^bsub>5\\<^esub> (with_proj H)) \\<and>\n         subdivision_pair H (pair_pre_digraph.slim cert)))", "by (auto simp only: simp_thms certify_def Let_def pair_pseudo_graph.certificate_characterization[OF assms])"], ["", "end"], ["", "end"]]}