{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Pair_Digraph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma with_proj_simps[simp]:\n  \"verts (with_proj G) = pverts G\"\n  \"arcs (with_proj G) = parcs G\"\n  \"arcs_ends (with_proj G) = parcs G\"\n  \"tail (with_proj G) = fst\"\n  \"head (with_proj G) = snd\"", "lemma cas_with_proj_eq: \"pre_digraph.cas (with_proj G) = pcas\"", "lemma awalk_verts_with_proj_eq: \"pre_digraph.awalk_verts (with_proj G) = pawalk_verts\"", "lemmas [simp] = cas_with_proj_eq awalk_verts_with_proj_eq", "lemma in_arcsD1: \"(u,v) \\<in> parcs G \\<Longrightarrow> u \\<in> pverts G\"\n  and in_arcsD2: \"(u,v) \\<in> parcs G \\<Longrightarrow> v \\<in> pverts G\"", "lemmas wellformed' = in_arcsD1 in_arcsD2", "lemma wf_digraph_wp_iff: \"wf_digraph (with_proj G) = pair_wf_digraph G\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in pair_fin_digraph) pair_fin_digraph[intro!]: \"pair_fin_digraph G\"", "lemma pair_wf_digraph[intro!]: \"pair_wf_digraph G\"", "lemma pair_digraph[intro!]: \"pair_digraph G\"", "lemma (in pair_loopfree_digraph) no_loops':\n  \"(u,v) \\<in> parcs G \\<Longrightarrow> u \\<noteq> v\"", "lemma (in pair_wf_digraph) apath_succ_decomp:\n  assumes \"apath u p v\"\n  assumes \"(x,y) \\<in> set p\"\n  assumes \"y \\<noteq> v\"\n  shows \"\\<exists>p1 z p2. p = p1 @ (x,y) # (y,z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z\"", "lemma (in pair_sym_digraph) arcs_symmetric:\n  \"(a,b) \\<in> parcs G \\<Longrightarrow> (b,a) \\<in> parcs G\"", "lemma (in pair_pseudo_graph) pair_pseudo_graph[intro]: \"pair_pseudo_graph G\"", "lemma (in pair_graph) pair_graph[intro]: \"pair_graph G\"", "lemma (in pair_graph) pair_graphD_graph: \"graph G\"", "lemma pair_graphI_graph:\n  assumes \"graph (with_proj G)\" shows \"pair_graph G\"", "lemma pair_loopfreeI_loopfree:\n  assumes \"loopfree_digraph (with_proj G)\" shows \"pair_loopfree_digraph G\"", "lemma rev_path_append[simp]: \"rev_path (p @ q) = rev_path q @ rev_path p\"", "lemma rev_path_rev_path[simp]:\n  \"rev_path (rev_path p) = p\"", "lemma rev_path_empty[simp]:\n  \"rev_path p = [] \\<longleftrightarrow> p = []\"", "lemma rev_path_eq: \"rev_path p = rev_path q \\<longleftrightarrow> p = q\"", "lemma (in pair_sym_digraph)\n  assumes \"awalk u p v\"\n  shows awalk_verts_rev_path: \"awalk_verts v (rev_path p) = rev (awalk_verts u p)\"\n    and awalk_rev_path': \"awalk v (rev_path p) u\"", "lemma (in pair_sym_digraph) awalk_rev_path[simp]:\n  \"awalk v (rev_path p) u = awalk u p v\" (is \"?L = ?R\")", "lemma (in pair_sym_digraph) apath_rev_path[simp]:\n  \"apath v (rev_path p) u = apath u p v\"", "lemma co_path_simps[simp]:\n  \"\\<lbrakk>e1 \\<noteq> (fst e, w); e1 \\<noteq> (snd e,w)\\<rbrakk> \\<Longrightarrow> co_path e w (e1 # es) = e1 # co_path e w es\" \n  \"\\<lbrakk>e1 = (fst e, w); e2 = (w, snd e)\\<rbrakk> \\<Longrightarrow> co_path e w (e1 # e2 # es) = e # co_path e w es\"\n  \"\\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = (snd e, fst e) # co_path e w es\"\n  \"\\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e); e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = e1 # co_path e w (e2 # es)\"", "lemma co_path_nonempty[simp]: \"co_path e w p = [] \\<longleftrightarrow> p = []\"", "lemma verts_subdivide[simp]: \"pverts (subdivide G e w) = pverts G \\<union> {w}\"", "lemma arcs_subdivide[simp]:\n  shows \"parcs (subdivide G (u,v) w) = (parcs G - {(u,v),(v,u)}) \\<union> {(u,w), (w,u), (w, v), (v, w)}\"", "lemmas subdivide_simps = verts_subdivide arcs_subdivide", "lemma sd_path_induct[case_names empty pass sd sdrev]:\n  assumes A: \"P e []\"\n    and B: \"\\<And>e' es. e' \\<noteq> e \\<Longrightarrow> e' \\<noteq> (snd e , fst e) \\<Longrightarrow> P e es \\<Longrightarrow> P e (e' # es)\"\n      \"\\<And>es. P e es \\<Longrightarrow> P e (e # es)\"\n      \"\\<And>es. fst e \\<noteq> snd e \\<Longrightarrow> P e es \\<Longrightarrow> P e ((snd e, fst e) # es)\"\n  shows \"P e es\"", "lemma co_path_induct[case_names empty single co corev pass]:\n  fixes e :: \"'a \\<times> 'a\"\n    and w :: \"'a\"\n    and p :: \"('a \\<times> 'a) awalk\"\n  assumes Nil: \"P e w []\"\n    and ConsNil:\"\\<And>e'. P e w [e']\"\n    and ConsCons1: \"\\<And>e1 e2 es. e1 = (fst e, w) \\<and> e2 = (w, snd e) \\<Longrightarrow> P e w es \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n    and ConsCons2: \"\\<And>e1 e2 es. \\<not>(e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n            e1 = (snd e, w) \\<and> e2 = (w, fst e) \\<Longrightarrow> P e w es \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n    and ConsCons3: \"\\<And>e1 e2 es.\n            \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<Longrightarrow>\n             \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e)) \\<Longrightarrow> P e w (e2 # es) \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n  shows \"P e w p\"", "lemma co_sd_id:\n  assumes \"(u,w) \\<notin> set p\" \"(v,w) \\<notin> set p\"\n  shows \"co_path (u,v) w (sd_path (u,v) w p) = p\"", "lemma sd_path_id:\n  assumes \"(x,y) \\<notin> set p\" \"(y,x) \\<notin> set p\"\n  shows \"sd_path (x,y) w p = p\"", "lemma (in pair_wf_digraph) pair_wf_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_wf_digraph (subdivide G e w)\" (is \"pair_wf_digraph ?sG\")", "lemma (in pair_sym_digraph) pair_sym_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_sym_digraph (subdivide G e w)\" (is \"pair_sym_digraph ?sG\")", "lemma (in pair_loopfree_digraph) pair_loopfree_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_loopfree_digraph (subdivide G e w)\" (is \"pair_loopfree_digraph ?sG\")", "lemma (in pair_bidirected_digraph) pair_bidirected_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_bidirected_digraph (subdivide G e w)\" (is \"pair_bidirected_digraph ?sG\")", "lemma (in pair_pseudo_graph) pair_pseudo_graph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_pseudo_graph (subdivide G e w)\" (is \"pair_pseudo_graph ?sG\")", "lemma (in pair_graph) pair_graph_subdivide:\n  assumes \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_graph (subdivide G e w)\" (is \"pair_graph ?sG\")", "lemma arcs_subdivideD:\n  assumes \"x \\<in> parcs (subdivide G e w)\" \"fst x \\<noteq> w\" \"snd x \\<noteq> w\"\n  shows \"x \\<in> parcs G\"", "lemma\n  assumes path: \"apath u p v\"\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows apath_sd_path: \"pre_digraph.apath (subdivide G e w) u (sd_path e w p) v\" (is ?A)\n    and set_awalk_verts_sd_path: \"set (awalk_verts u (sd_path e w p))\n      \\<subseteq> set (awalk_verts u p) \\<union> {w}\" (is ?B)", "lemma\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\" \"u \\<in> pverts G\" \"v \\<in> pverts G\"\n  assumes path: \"pre_digraph.apath (subdivide G e w) u p v\"\n  shows apath_co_path: \"apath u (co_path e w p) v\" (is ?thesis_path)\n    and set_awalk_verts_co_path: \"set (awalk_verts u (co_path e w p)) = set (awalk_verts u p) - {w}\" (is ?thesis_set)", "lemma bidirected_digraph_rev_conv_pair:\n  assumes \"bidirected_digraph (with_proj G) rev_G\"\n  shows \"rev_G = swap_in (parcs G)\"", "lemma (in pair_bidirected_digraph) bidirected_digraph:\n  \"bidirected_digraph (with_proj G) (swap_in (parcs G))\"", "lemma pair_bidirected_digraphI_bidirected_digraph:\n  assumes \"bidirected_digraph (with_proj G) (swap_in (parcs G))\"\n  shows \"pair_bidirected_digraph G\""], "translations": [["", "lemma with_proj_simps[simp]:\n  \"verts (with_proj G) = pverts G\"\n  \"arcs (with_proj G) = parcs G\"\n  \"arcs_ends (with_proj G) = parcs G\"\n  \"tail (with_proj G) = fst\"\n  \"head (with_proj G) = snd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (with_proj G) = pverts G &&& arcs (with_proj G) = parcs G) &&&\n    arcs_ends (with_proj G) = parcs G &&&\n    tail (with_proj G) = fst &&& head (with_proj G) = snd", "by (auto simp: with_proj_def arcs_ends_conv)"], ["", "lemma cas_with_proj_eq: \"pre_digraph.cas (with_proj G) = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas (with_proj G) = pcas", "proof (unfold fun_eq_iff, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. pre_digraph.cas (with_proj G) x xa xb = pcas x xa xb", "fix u es v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. pre_digraph.cas (with_proj G) x xa xb = pcas x xa xb", "show \"pre_digraph.cas (with_proj G) u es v = pcas u es v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas (with_proj G) u es v = pcas u es v", "by (induct es arbitrary: u) (auto simp:  pre_digraph.cas.simps)"], ["proof (state)\nthis:\n  pre_digraph.cas (with_proj G) u es v = pcas u es v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_verts_with_proj_eq: \"pre_digraph.awalk_verts (with_proj G) = pawalk_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (with_proj G) = pawalk_verts", "proof (unfold fun_eq_iff, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts (with_proj G) x xa = pawalk_verts x xa", "fix u es"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts (with_proj G) x xa = pawalk_verts x xa", "show \"pre_digraph.awalk_verts (with_proj G) u es = pawalk_verts u es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (with_proj G) u es = pawalk_verts u es", "by (induct es arbitrary: u) (auto simp: pre_digraph.awalk_verts.simps)"], ["proof (state)\nthis:\n  pre_digraph.awalk_verts (with_proj G) u es = pawalk_verts u es\n\ngoal:\nNo subgoals!", "qed"], ["", "locale pair_pre_digraph = fixes G :: \"'a pair_pre_digraph\"\nbegin"], ["", "lemmas [simp] = cas_with_proj_eq awalk_verts_with_proj_eq"], ["", "end"], ["", "locale pair_wf_digraph = pair_pre_digraph +\n  assumes arc_fst_in_verts: \"\\<And>e. e \\<in> parcs G \\<Longrightarrow> fst e \\<in> pverts G\"\n  assumes arc_snd_in_verts: \"\\<And>e. e \\<in> parcs G \\<Longrightarrow> snd e \\<in> pverts G\"\nbegin"], ["", "lemma in_arcsD1: \"(u,v) \\<in> parcs G \\<Longrightarrow> u \\<in> pverts G\"\n  and in_arcsD2: \"(u,v) \\<in> parcs G \\<Longrightarrow> v \\<in> pverts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v) \\<in> parcs G \\<Longrightarrow> u \\<in> pverts G) &&&\n    ((u, v) \\<in> parcs G \\<Longrightarrow> v \\<in> pverts G)", "by (auto dest: arc_fst_in_verts arc_snd_in_verts)"], ["", "lemmas wellformed' = in_arcsD1 in_arcsD2"], ["", "end"], ["", "locale pair_fin_digraph = pair_wf_digraph +\n  assumes pair_finite_verts: \"finite (pverts G)\"\n    and pair_finite_arcs: \"finite (parcs G)\""], ["", "locale pair_sym_digraph = pair_wf_digraph +\n  assumes pair_sym_arcs: \"symmetric G\""], ["", "locale pair_loopfree_digraph = pair_wf_digraph  +\n  assumes pair_no_loops: \"e \\<in> parcs G \\<Longrightarrow> fst e \\<noteq> snd e\""], ["", "locale pair_bidirected_digraph = pair_sym_digraph + pair_loopfree_digraph"], ["", "locale pair_pseudo_graph = pair_fin_digraph + pair_sym_digraph"], ["", "locale pair_digraph = pair_fin_digraph  + pair_loopfree_digraph"], ["", "locale pair_graph = pair_digraph + pair_pseudo_graph"], ["", "sublocale pair_pre_digraph \\<subseteq> pre_digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (with_proj G) = pverts G &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_wf_digraph \\<subseteq> wf_digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((wf_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales (auto simp: arc_fst_in_verts arc_snd_in_verts)"], ["", "sublocale pair_fin_digraph \\<subseteq> fin_digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fin_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "using pair_finite_verts pair_finite_arcs"], ["proof (prove)\nusing this:\n  finite (pverts G)\n  finite (parcs G)\n\ngoal (1 subgoal):\n 1. ((fin_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_sym_digraph \\<subseteq> sym_digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((sym_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "using pair_sym_arcs"], ["proof (prove)\nusing this:\n  symmetric (with_proj G)\n\ngoal (1 subgoal):\n 1. ((sym_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_pseudo_graph \\<subseteq> pseudo_graph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((pseudo_graph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_loopfree_digraph \\<subseteq> loopfree_digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((loopfree_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "using pair_no_loops"], ["proof (prove)\nusing this:\n  ?e \\<in> parcs G \\<Longrightarrow> fst ?e \\<noteq> snd ?e\n\ngoal (1 subgoal):\n 1. ((loopfree_digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_digraph \\<subseteq> digraph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((digraph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales (auto simp: arc_to_ends_def)"], ["", "sublocale pair_graph \\<subseteq> graph \"with_proj G\"\n  rewrites \"verts G = pverts G\" and \"arcs G = parcs G\" and \"tail G = fst\" and \"head G = snd\"\n    and \"arcs_ends G = parcs G\"\n    and \"pre_digraph.awalk_verts G = pawalk_verts\"\n    and \"pre_digraph.cas G = pcas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((graph (with_proj G) &&& verts (with_proj G) = pverts G) &&&\n     arcs (with_proj G) = parcs G &&& tail (with_proj G) = fst) &&&\n    (head (with_proj G) = snd &&& arcs_ends (with_proj G) = parcs G) &&&\n    pre_digraph.awalk_verts (with_proj G) = pawalk_verts &&&\n    pre_digraph.cas (with_proj G) = pcas", "by unfold_locales auto"], ["", "sublocale pair_graph \\<subseteq> pair_bidirected_digraph"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "by unfold_locales"], ["", "lemma wf_digraph_wp_iff: \"wf_digraph (with_proj G) = pair_wf_digraph G\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (with_proj G) = pair_wf_digraph G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (with_proj G) \\<Longrightarrow> pair_wf_digraph G\n 2. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "assume ?L"], ["proof (state)\nthis:\n  wf_digraph (with_proj G)\n\ngoal (2 subgoals):\n 1. wf_digraph (with_proj G) \\<Longrightarrow> pair_wf_digraph G\n 2. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "then"], ["proof (chain)\npicking this:\n  wf_digraph (with_proj G)", "interpret wf_digraph \"with_proj G\""], ["proof (prove)\nusing this:\n  wf_digraph (with_proj G)\n\ngoal (1 subgoal):\n 1. wf_digraph (with_proj G)", "."], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (with_proj G) \\<Longrightarrow> pair_wf_digraph G\n 2. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph G", "using wellformed"], ["proof (prove)\nusing this:\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n\ngoal (1 subgoal):\n 1. pair_wf_digraph G", "by unfold_locales auto"], ["proof (state)\nthis:\n  pair_wf_digraph G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "assume ?R"], ["proof (state)\nthis:\n  pair_wf_digraph G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "then"], ["proof (chain)\npicking this:\n  pair_wf_digraph G", "interpret pair_wf_digraph G"], ["proof (prove)\nusing this:\n  pair_wf_digraph G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph G", "."], ["proof (state)\ngoal (1 subgoal):\n 1. pair_wf_digraph G \\<Longrightarrow> wf_digraph (with_proj G)", "show ?L"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (with_proj G)", "by unfold_locales"], ["proof (state)\nthis:\n  wf_digraph (with_proj G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_fin_digraph) pair_fin_digraph[intro!]: \"pair_fin_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_fin_digraph G", ".."], ["", "context pair_digraph begin"], ["", "lemma pair_wf_digraph[intro!]: \"pair_wf_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph G", "by intro_locales"], ["", "lemma pair_digraph[intro!]: \"pair_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_digraph G", ".."], ["", "lemma (in pair_loopfree_digraph) no_loops':\n  \"(u,v) \\<in> parcs G \\<Longrightarrow> u \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> parcs G \\<Longrightarrow> u \\<noteq> v", "by (auto dest: no_loops)"], ["", "end"], ["", "lemma (in pair_wf_digraph) apath_succ_decomp:\n  assumes \"apath u p v\"\n  assumes \"(x,y) \\<in> set p\"\n  assumes \"y \\<noteq> v\"\n  shows \"\\<exists>p1 z p2. p = p1 @ (x,y) # (y,z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "from \\<open>(x,y) \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  (x, y) \\<in> set p", "obtain p1 p2 where p_decomp: \"p = p1 @ (x,y) # p2\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> set p\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        p = p1 @ (x, y) # p2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types) in_set_conv_decomp_first)"], ["proof (state)\nthis:\n  p = p1 @ (x, y) # p2\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "from p_decomp \\<open>apath u p v\\<close> \\<open>y \\<noteq> v\\<close>"], ["proof (chain)\npicking this:\n  p = p1 @ (x, y) # p2\n  apath u p v\n  y \\<noteq> v", "have \"p2 \\<noteq> []\" \"awalk y p2 v\""], ["proof (prove)\nusing this:\n  p = p1 @ (x, y) # p2\n  apath u p v\n  y \\<noteq> v\n\ngoal (1 subgoal):\n 1. p2 \\<noteq> [] &&& awalk y p2 v", "by (auto simp: apath_def awalk_Cons_iff)"], ["proof (state)\nthis:\n  p2 \\<noteq> []\n  awalk y p2 v\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "then"], ["proof (chain)\npicking this:\n  p2 \\<noteq> []\n  awalk y p2 v", "obtain z p2' where p2_decomp: \"p2 = (y,z) # p2'\""], ["proof (prove)\nusing this:\n  p2 \\<noteq> []\n  awalk y p2 v\n\ngoal (1 subgoal):\n 1. (\\<And>z p2'.\n        p2 = (y, z) # p2' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (cases p2, auto simp: awalk_Cons_iff)"], ["proof (state)\nthis:\n  p2 = (y, z) # p2'\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "then"], ["proof (chain)\npicking this:\n  p2 = (y, z) # p2'", "have \"x \\<noteq> z \\<and> y \\<noteq> z\""], ["proof (prove)\nusing this:\n  p2 = (y, z) # p2'\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> y \\<noteq> z", "using p_decomp p2_decomp \\<open>apath u p v\\<close>"], ["proof (prove)\nusing this:\n  p2 = (y, z) # p2'\n  p = p1 @ (x, y) # p2\n  p2 = (y, z) # p2'\n  apath u p v\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> y \\<noteq> z", "by (auto simp: apath_append_iff apath_simps hd_in_awalk_verts)"], ["proof (state)\nthis:\n  x \\<noteq> z \\<and> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "with p_decomp p2_decomp"], ["proof (chain)\npicking this:\n  p = p1 @ (x, y) # p2\n  p2 = (y, z) # p2'\n  x \\<noteq> z \\<and> y \\<noteq> z", "have \"p = p1 @ (x,y) # (y,z) # p2' \\<and> x \\<noteq> z \\<and> y \\<noteq> z\""], ["proof (prove)\nusing this:\n  p = p1 @ (x, y) # p2\n  p2 = (y, z) # p2'\n  x \\<noteq> z \\<and> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. p = p1 @ (x, y) # (y, z) # p2' \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "by auto"], ["proof (state)\nthis:\n  p = p1 @ (x, y) # (y, z) # p2' \\<and> x \\<noteq> z \\<and> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "then"], ["proof (chain)\npicking this:\n  p = p1 @ (x, y) # (y, z) # p2' \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "show ?thesis"], ["proof (prove)\nusing this:\n  p = p1 @ (x, y) # (y, z) # p2' \\<and> x \\<noteq> z \\<and> y \\<noteq> z\n\ngoal (1 subgoal):\n 1. \\<exists>p1 z p2.\n       p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z", "by blast"], ["proof (state)\nthis:\n  \\<exists>p1 z p2.\n     p = p1 @ (x, y) # (y, z) # p2 \\<and> x \\<noteq> z \\<and> y \\<noteq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_sym_digraph) arcs_symmetric:\n  \"(a,b) \\<in> parcs G \\<Longrightarrow> (b,a) \\<in> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> parcs G \\<Longrightarrow> (b, a) \\<in> parcs G", "using sym_arcs"], ["proof (prove)\nusing this:\n  symmetric (with_proj G)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> parcs G \\<Longrightarrow> (b, a) \\<in> parcs G", "by (auto simp: symmetric_def elim: symE)"], ["", "lemma (in pair_pseudo_graph) pair_pseudo_graph[intro]: \"pair_pseudo_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph G", ".."], ["", "lemma (in pair_graph) pair_graph[intro]: \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales"], ["", "lemma (in pair_graph) pair_graphD_graph: \"graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by unfold_locales"], ["", "lemma pair_graphI_graph:\n  assumes \"graph (with_proj G)\" shows \"pair_graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "interpret G: graph \"with_proj G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (with_proj G)", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph G", "using G.wellformed G.finite_arcs G.finite_verts G.no_loops"], ["proof (prove)\nusing this:\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n  finite (arcs (with_proj G))\n  finite (verts (with_proj G))\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<noteq> head (with_proj G) ?e\n\ngoal (1 subgoal):\n 1. pair_graph G", "by unfold_locales auto"], ["proof (state)\nthis:\n  pair_graph G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pair_loopfreeI_loopfree:\n  assumes \"loopfree_digraph (with_proj G)\" shows \"pair_loopfree_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph G", "interpret loopfree_digraph \"with_proj G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loopfree_digraph (with_proj G)", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph G", "using wellformed no_loops"], ["proof (prove)\nusing this:\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<noteq> head (with_proj G) ?e\n\ngoal (1 subgoal):\n 1. pair_loopfree_digraph G", "by unfold_locales auto"], ["proof (state)\nthis:\n  pair_loopfree_digraph G\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Path reversal for Pair Digraphs\\<close>"], ["", "text \\<open>This definition is only meaningful in @{term Pair_Digraph}\\<close>"], ["", "primrec rev_path :: \"('a \\<times> 'a) awalk \\<Rightarrow> ('a \\<times> 'a) awalk\" where\n  \"rev_path [] = []\" |\n  \"rev_path (e # es) = rev_path es @ [(snd e, fst e)]\""], ["", "lemma rev_path_append[simp]: \"rev_path (p @ q) = rev_path q @ rev_path p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_path (p @ q) = rev_path q @ rev_path p", "by (induct p) auto"], ["", "lemma rev_path_rev_path[simp]:\n  \"rev_path (rev_path p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_path (rev_path p) = p", "by (induct p) auto"], ["", "lemma rev_path_empty[simp]:\n  \"rev_path p = [] \\<longleftrightarrow> p = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev_path p = []) = (p = [])", "by (induct p) auto"], ["", "lemma rev_path_eq: \"rev_path p = rev_path q \\<longleftrightarrow> p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev_path p = rev_path q) = (p = q)", "by (metis rev_path_rev_path)"], ["", "lemma (in pair_sym_digraph)\n  assumes \"awalk u p v\"\n  shows awalk_verts_rev_path: \"awalk_verts v (rev_path p) = rev (awalk_verts u p)\"\n    and awalk_rev_path': \"awalk v (rev_path p) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pawalk_verts v (rev_path p) = rev (pawalk_verts u p) &&&\n    awalk v (rev_path p) u", "using assms"], ["proof (prove)\nusing this:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. pawalk_verts v (rev_path p) = rev (pawalk_verts u p) &&&\n    awalk v (rev_path p) u", "proof (induct p arbitrary: u)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>u.\n       awalk u [] v \\<Longrightarrow>\n       pawalk_verts v (rev_path []) = rev (pawalk_verts u [])\n 2. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 4. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>u.\n       awalk u [] v \\<Longrightarrow>\n       pawalk_verts v (rev_path []) = rev (pawalk_verts u [])\n 2. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 4. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case 1"], ["proof (state)\nthis:\n  awalk u [] v\n\ngoal (4 subgoals):\n 1. \\<And>u.\n       awalk u [] v \\<Longrightarrow>\n       pawalk_verts v (rev_path []) = rev (pawalk_verts u [])\n 2. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 4. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "then"], ["proof (chain)\npicking this:\n  awalk u [] v", "show ?case"], ["proof (prove)\nusing this:\n  awalk u [] v\n\ngoal (1 subgoal):\n 1. pawalk_verts v (rev_path []) = rev (pawalk_verts u [])", "by auto"], ["proof (state)\nthis:\n  pawalk_verts v (rev_path []) = rev (pawalk_verts u [])\n\ngoal (3 subgoals):\n 1. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case 2"], ["proof (state)\nthis:\n  awalk u [] v\n\ngoal (3 subgoals):\n 1. \\<And>u. awalk u [] v \\<Longrightarrow> awalk v (rev_path []) u\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 3. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "then"], ["proof (chain)\npicking this:\n  awalk u [] v", "show ?case"], ["proof (prove)\nusing this:\n  awalk u [] v\n\ngoal (1 subgoal):\n 1. awalk v (rev_path []) u", "by (auto simp: awalk_Nil_iff)"], ["proof (state)\nthis:\n  awalk v (rev_path []) u\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case (Cons e es)"], ["proof (state)\nthis:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case 1"], ["proof (state)\nthis:\n  awalk u (e # es) v\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "with Cons"], ["proof (chain)\npicking this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v", "have walks: \"awalk v (rev_path es) (snd e)\"\n        \"awalk (snd e) [(snd e, fst e)] u\"\n      and verts: \"awalk_verts v (rev_path es) = rev (awalk_verts (snd e) es)\""], ["proof (prove)\nusing this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v\n\ngoal (1 subgoal):\n 1. (awalk v (rev_path es) (snd e) &&& awalk (snd e) [(snd e, fst e)] u) &&&\n    pawalk_verts v (rev_path es) = rev (pawalk_verts (snd e) es)", "by (auto simp: awalk_simps intro: arcs_symmetric)"], ["proof (state)\nthis:\n  awalk v (rev_path es) (snd e)\n  awalk (snd e) [(snd e, fst e)] u\n  pawalk_verts v (rev_path es) = rev (pawalk_verts (snd e) es)\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "from walks"], ["proof (chain)\npicking this:\n  awalk v (rev_path es) (snd e)\n  awalk (snd e) [(snd e, fst e)] u", "have \"awalk v (rev_path es @ [(snd e, fst e)]) u\""], ["proof (prove)\nusing this:\n  awalk v (rev_path es) (snd e)\n  awalk (snd e) [(snd e, fst e)] u\n\ngoal (1 subgoal):\n 1. awalk v (rev_path es @ [(snd e, fst e)]) u", "by simp"], ["proof (state)\nthis:\n  awalk v (rev_path es @ [(snd e, fst e)]) u\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "moreover"], ["proof (state)\nthis:\n  awalk v (rev_path es @ [(snd e, fst e)]) u\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "have \"tl (awalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (pawalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]", "by auto"], ["proof (state)\nthis:\n  tl (pawalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]\n\ngoal (2 subgoals):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> pawalk_verts v (rev_path (a # p)) =\n                         rev (pawalk_verts u (a # p))\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "ultimately"], ["proof (chain)\npicking this:\n  awalk v (rev_path es @ [(snd e, fst e)]) u\n  tl (pawalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]", "show ?case"], ["proof (prove)\nusing this:\n  awalk v (rev_path es @ [(snd e, fst e)]) u\n  tl (pawalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]\n\ngoal (1 subgoal):\n 1. pawalk_verts v (rev_path (e # es)) = rev (pawalk_verts u (e # es))", "using 1 verts"], ["proof (prove)\nusing this:\n  awalk v (rev_path es @ [(snd e, fst e)]) u\n  tl (pawalk_verts (awlast v (rev_path es)) [(snd e, fst e)]) = [fst e]\n  awalk u (e # es) v\n  pawalk_verts v (rev_path es) = rev (pawalk_verts (snd e) es)\n\ngoal (1 subgoal):\n 1. pawalk_verts v (rev_path (e # es)) = rev (pawalk_verts u (e # es))", "by (auto simp: awalk_verts_append)"], ["proof (state)\nthis:\n  pawalk_verts v (rev_path (e # es)) = rev (pawalk_verts u (e # es))\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case (Cons e es)"], ["proof (state)\nthis:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "case 2"], ["proof (state)\nthis:\n  awalk u (e # es) v\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "with Cons"], ["proof (chain)\npicking this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v", "have \"awalk v (rev_path es) (snd e)\""], ["proof (prove)\nusing this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v\n\ngoal (1 subgoal):\n 1. awalk v (rev_path es) (snd e)", "by (auto simp: awalk_Cons_iff)"], ["proof (state)\nthis:\n  awalk v (rev_path es) (snd e)\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "moreover"], ["proof (state)\nthis:\n  awalk v (rev_path es) (snd e)\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "have \"rev_path (e # es) = rev_path es @ [(snd e, fst e)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_path (e # es) = rev_path es @ [(snd e, fst e)]", "by auto"], ["proof (state)\nthis:\n  rev_path (e # es) = rev_path es @ [(snd e, fst e)]\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "moreover"], ["proof (state)\nthis:\n  rev_path (e # es) = rev_path es @ [(snd e, fst e)]\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "from Cons 2"], ["proof (chain)\npicking this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v", "have \"awalk (snd e) [(snd e, fst e)] u\""], ["proof (prove)\nusing this:\n  awalk ?u es v \\<Longrightarrow>\n  pawalk_verts v (rev_path es) = rev (pawalk_verts ?u es)\n  awalk ?u es v \\<Longrightarrow> awalk v (rev_path es) ?u\n  awalk u (e # es) v\n\ngoal (1 subgoal):\n 1. awalk (snd e) [(snd e, fst e)] u", "by (auto simp: awalk_simps intro: arcs_symmetric)"], ["proof (state)\nthis:\n  awalk (snd e) [(snd e, fst e)] u\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   awalk u p v \\<Longrightarrow>\n                   pawalk_verts v (rev_path p) = rev (pawalk_verts u p);\n        \\<And>u. awalk u p v \\<Longrightarrow> awalk v (rev_path p) u;\n        awalk u (a # p) v\\<rbrakk>\n       \\<Longrightarrow> awalk v (rev_path (a # p)) u", "ultimately"], ["proof (chain)\npicking this:\n  awalk v (rev_path es) (snd e)\n  rev_path (e # es) = rev_path es @ [(snd e, fst e)]\n  awalk (snd e) [(snd e, fst e)] u", "show \"awalk v (rev_path (e # es)) u\""], ["proof (prove)\nusing this:\n  awalk v (rev_path es) (snd e)\n  rev_path (e # es) = rev_path es @ [(snd e, fst e)]\n  awalk (snd e) [(snd e, fst e)] u\n\ngoal (1 subgoal):\n 1. awalk v (rev_path (e # es)) u", "by simp"], ["proof (state)\nthis:\n  awalk v (rev_path (e # es)) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_sym_digraph) awalk_rev_path[simp]:\n  \"awalk v (rev_path p) u = awalk u p v\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. awalk v (rev_path p) u = awalk u p v", "by (metis awalk_rev_path' rev_path_rev_path)"], ["", "lemma (in pair_sym_digraph) apath_rev_path[simp]:\n  \"apath v (rev_path p) u = apath u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apath v (rev_path p) u = apath u p v", "by (auto simp: awalk_verts_rev_path apath_def)"], ["", "subsection \\<open>Subdividing Edges\\<close>"], ["", "text \\<open>subdivide an edge (=two associated arcs) in graph\\<close>"], ["", "fun subdivide :: \"'a pair_pre_digraph \\<Rightarrow> 'a \\<times> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a pair_pre_digraph\" where\n  \"subdivide G (u,v) w = \\<lparr>\n    pverts = pverts G \\<union> {w},\n    parcs = (parcs G - {(u,v),(v,u)}) \\<union> {(u,w), (w,u), (w, v), (v, w)}\\<rparr>\""], ["", "declare subdivide.simps[simp del]"], ["", "text \\<open>subdivide an arc in a path\\<close>"], ["", "fun sd_path :: \"'a \\<times> 'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<times> 'a) awalk \\<Rightarrow> ('a \\<times> 'a) awalk\" where\n    \"sd_path _ _ [] = []\"\n  | \"sd_path (u,v) w (e # es) = (if e = (u,v)\n                                 then [(u,w),(w,v)]\n                                 else if e = (v,u)\n                                 then [(v,w),(w,u)]\n                                 else [e]) @ sd_path (u,v) w es\""], ["", "text \\<open>contract an arc in a path\\<close>"], ["", "fun co_path :: \"'a \\<times> 'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<times> 'a) awalk \\<Rightarrow> ('a \\<times> 'a) awalk\" where\n    \"co_path _ _ [] = []\"\n  | \"co_path _ _ [e] = [e]\"\n  | \"co_path (u,v) w (e1 # e2 # es) = (if e1 = (u,w) \\<and> e2 = (w,v)\n      then (u,v) # co_path (u,v) w es\n      else if e1 = (v,w) \\<and> e2 = (w,u)\n      then (v,u) # co_path (u,v) w es\n      else e1 # co_path (u,v) w (e2 # es))\""], ["", "lemma co_path_simps[simp]:\n  \"\\<lbrakk>e1 \\<noteq> (fst e, w); e1 \\<noteq> (snd e,w)\\<rbrakk> \\<Longrightarrow> co_path e w (e1 # es) = e1 # co_path e w es\" \n  \"\\<lbrakk>e1 = (fst e, w); e2 = (w, snd e)\\<rbrakk> \\<Longrightarrow> co_path e w (e1 # e2 # es) = e # co_path e w es\"\n  \"\\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = (snd e, fst e) # co_path e w es\"\n  \"\\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e); e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = e1 # co_path e w (e2 # es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>e1 \\<noteq> (fst e, w); e1 \\<noteq> (snd e, w)\\<rbrakk>\n      \\<Longrightarrow> co_path e w (e1 # es) = e1 # co_path e w es) &&&\n     (\\<lbrakk>e1 = (fst e, w); e2 = (w, snd e)\\<rbrakk>\n      \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                        e # co_path e w es)) &&&\n    (\\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n     \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                       (snd e, fst e) # co_path e w es) &&&\n    (\\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e);\n      e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n     \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                       e1 # co_path e w (e2 # es))", "apply (cases es; auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b list.\n       \\<lbrakk>e1 \\<noteq> (fst e, w); e1 \\<noteq> (snd e, w);\n        es = (a, b) # list\\<rbrakk>\n       \\<Longrightarrow> co_path e w (e1 # (a, b) # list) =\n                         e1 # co_path e w ((a, b) # list)\n 2. \\<lbrakk>e1 = (fst e, w); e2 = (w, snd e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = e # co_path e w es\n 3. \\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      (snd e, fst e) # co_path e w es\n 4. \\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e);\n     e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      e1 # co_path e w (e2 # es)", "apply (cases e; auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>e1 = (fst e, w); e2 = (w, snd e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) = e # co_path e w es\n 2. \\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      (snd e, fst e) # co_path e w es\n 3. \\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e);\n     e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      e1 # co_path e w (e2 # es)", "apply (cases e; auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e1 = (snd e, w); e2 = (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      (snd e, fst e) # co_path e w es\n 2. \\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e);\n     e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      e1 # co_path e w (e2 # es)", "apply (cases e; cases \"fst e = snd e\"; auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e1 \\<noteq> (fst e, w) \\<or> e2 \\<noteq> (w, snd e);\n     e1 \\<noteq> (snd e, w) \\<or> e2 \\<noteq> (w, fst e)\\<rbrakk>\n    \\<Longrightarrow> co_path e w (e1 # e2 # es) =\n                      e1 # co_path e w (e2 # es)", "apply (cases e; cases \"fst e = snd e\"; auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma co_path_nonempty[simp]: \"co_path e w p = [] \\<longleftrightarrow> p = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (co_path e w p = []) = (p = [])", "by (cases e) (cases p rule: list_exhaust_NSC, auto)"], ["", "declare co_path.simps(3)[simp del]"], ["", "lemma verts_subdivide[simp]: \"pverts (subdivide G e w) = pverts G \\<union> {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts (subdivide G e w) = pverts G \\<union> {w}", "by (cases e) (auto simp: subdivide.simps)"], ["", "lemma arcs_subdivide[simp]:\n  shows \"parcs (subdivide G (u,v) w) = (parcs G - {(u,v),(v,u)}) \\<union> {(u,w), (w,u), (w, v), (v, w)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parcs (subdivide G (u, v) w) =\n    parcs G - {(u, v), (v, u)} \\<union> {(u, w), (w, u), (w, v), (v, w)}", "by (auto simp: subdivide.simps)"], ["", "lemmas subdivide_simps = verts_subdivide arcs_subdivide"], ["", "lemma sd_path_induct[case_names empty pass sd sdrev]:\n  assumes A: \"P e []\"\n    and B: \"\\<And>e' es. e' \\<noteq> e \\<Longrightarrow> e' \\<noteq> (snd e , fst e) \\<Longrightarrow> P e es \\<Longrightarrow> P e (e' # es)\"\n      \"\\<And>es. P e es \\<Longrightarrow> P e (e # es)\"\n      \"\\<And>es. fst e \\<noteq> snd e \\<Longrightarrow> P e es \\<Longrightarrow> P e ((snd e, fst e) # es)\"\n  shows \"P e es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P e es", "by (induct es) (rule A, metis B prod.collapse)"], ["", "lemma co_path_induct[case_names empty single co corev pass]:\n  fixes e :: \"'a \\<times> 'a\"\n    and w :: \"'a\"\n    and p :: \"('a \\<times> 'a) awalk\"\n  assumes Nil: \"P e w []\"\n    and ConsNil:\"\\<And>e'. P e w [e']\"\n    and ConsCons1: \"\\<And>e1 e2 es. e1 = (fst e, w) \\<and> e2 = (w, snd e) \\<Longrightarrow> P e w es \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n    and ConsCons2: \"\\<And>e1 e2 es. \\<not>(e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n            e1 = (snd e, w) \\<and> e2 = (w, fst e) \\<Longrightarrow> P e w es \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n    and ConsCons3: \"\\<And>e1 e2 es.\n            \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<Longrightarrow>\n             \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e)) \\<Longrightarrow> P e w (e2 # es) \\<Longrightarrow>\n            P e w (e1 # e2 # es)\"\n  shows \"P e w p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P e w p", "proof (induct p rule: length_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow> P e w ys \\<Longrightarrow>\n       P e w xs", "case (1 p)"], ["proof (state)\nthis:\n  \\<forall>ys. length ys < length p \\<longrightarrow> P e w ys\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow> P e w ys \\<Longrightarrow>\n       P e w xs", "then"], ["proof (chain)\npicking this:\n  \\<forall>ys. length ys < length p \\<longrightarrow> P e w ys", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>ys. length ys < length p \\<longrightarrow> P e w ys\n\ngoal (1 subgoal):\n 1. P e w p", "proof (cases p rule: list_exhaust_NSC)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>ys. length ys < length p \\<longrightarrow> P e w ys;\n     p = []\\<rbrakk>\n    \\<Longrightarrow> P e w p\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = [x]\\<rbrakk>\n       \\<Longrightarrow> P e w p\n 3. \\<And>x y ys.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = x # y # ys\\<rbrakk>\n       \\<Longrightarrow> P e w p", "case (Cons_Cons e1 e2 es)"], ["proof (state)\nthis:\n  p = e1 # e2 # es\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>ys. length ys < length p \\<longrightarrow> P e w ys;\n     p = []\\<rbrakk>\n    \\<Longrightarrow> P e w p\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = [x]\\<rbrakk>\n       \\<Longrightarrow> P e w p\n 3. \\<And>x y ys.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = x # y # ys\\<rbrakk>\n       \\<Longrightarrow> P e w p", "then"], ["proof (chain)\npicking this:\n  p = e1 # e2 # es", "have \"P e w es\" \"P e w (e2 # es)\""], ["proof (prove)\nusing this:\n  p = e1 # e2 # es\n\ngoal (1 subgoal):\n 1. P e w es &&& P e w (e2 # es)", "using 1"], ["proof (prove)\nusing this:\n  p = e1 # e2 # es\n  \\<forall>ys. length ys < length p \\<longrightarrow> P e w ys\n\ngoal (1 subgoal):\n 1. P e w es &&& P e w (e2 # es)", "by auto"], ["proof (state)\nthis:\n  P e w es\n  P e w (e2 # es)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>ys. length ys < length p \\<longrightarrow> P e w ys;\n     p = []\\<rbrakk>\n    \\<Longrightarrow> P e w p\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = [x]\\<rbrakk>\n       \\<Longrightarrow> P e w p\n 3. \\<And>x y ys.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = x # y # ys\\<rbrakk>\n       \\<Longrightarrow> P e w p", "then"], ["proof (chain)\npicking this:\n  P e w es\n  P e w (e2 # es)", "show ?thesis"], ["proof (prove)\nusing this:\n  P e w es\n  P e w (e2 # es)\n\ngoal (1 subgoal):\n 1. P e w p", "unfolding Cons_Cons"], ["proof (prove)\nusing this:\n  P e w es\n  P e w (e2 # es)\n\ngoal (1 subgoal):\n 1. P e w (e1 # e2 # es)", "by (blast intro: ConsCons1 ConsCons2 ConsCons3)"], ["proof (state)\nthis:\n  P e w p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>ys. length ys < length p \\<longrightarrow> P e w ys;\n     p = []\\<rbrakk>\n    \\<Longrightarrow> P e w p\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length p \\<longrightarrow> P e w ys;\n        p = [x]\\<rbrakk>\n       \\<Longrightarrow> P e w p", "qed (auto intro: Nil ConsNil)"], ["proof (state)\nthis:\n  P e w p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma co_sd_id:\n  assumes \"(u,w) \\<notin> set p\" \"(v,w) \\<notin> set p\"\n  shows \"co_path (u,v) w (sd_path (u,v) w p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. co_path (u, v) w (sd_path (u, v) w p) = p", "using assms"], ["proof (prove)\nusing this:\n  (u, w) \\<notin> set p\n  (v, w) \\<notin> set p\n\ngoal (1 subgoal):\n 1. co_path (u, v) w (sd_path (u, v) w p) = p", "by (induct p) auto"], ["", "lemma sd_path_id:\n  assumes \"(x,y) \\<notin> set p\" \"(y,x) \\<notin> set p\"\n  shows \"sd_path (x,y) w p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_path (x, y) w p = p", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<notin> set p\n  (y, x) \\<notin> set p\n\ngoal (1 subgoal):\n 1. sd_path (x, y) w p = p", "by (induct p) auto"], ["", "lemma (in pair_wf_digraph) pair_wf_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_wf_digraph (subdivide G e w)\" (is \"pair_wf_digraph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (subdivide G e w)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       fst ea \\<in> pverts (subdivide G e w)\n 2. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       snd ea \\<in> pverts (subdivide G e w)", "obtain u v where [simp]: \"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (2 subgoals):\n 1. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       fst ea \\<in> pverts (subdivide G e w)\n 2. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       snd ea \\<in> pverts (subdivide G e w)", "fix e'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       fst ea \\<in> pverts (subdivide G e w)\n 2. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       snd ea \\<in> pverts (subdivide G e w)", "assume \"e' \\<in> parcs ?sG\""], ["proof (state)\nthis:\n  e' \\<in> parcs (subdivide G e w)\n\ngoal (2 subgoals):\n 1. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       fst ea \\<in> pverts (subdivide G e w)\n 2. \\<And>ea.\n       ea \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       snd ea \\<in> pverts (subdivide G e w)", "then"], ["proof (chain)\npicking this:\n  e' \\<in> parcs (subdivide G e w)", "show \"fst e' \\<in> pverts ?sG\" \"snd e' \\<in> pverts ?sG\""], ["proof (prove)\nusing this:\n  e' \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. fst e' \\<in> pverts (subdivide G e w) &&&\n    snd e' \\<in> pverts (subdivide G e w)", "using props"], ["proof (prove)\nusing this:\n  e' \\<in> parcs (subdivide G e w)\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. fst e' \\<in> pverts (subdivide G e w) &&&\n    snd e' \\<in> pverts (subdivide G e w)", "by (auto dest: wellformed)"], ["proof (state)\nthis:\n  fst e' \\<in> pverts (subdivide G e w)\n  snd e' \\<in> pverts (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_sym_digraph) pair_sym_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_sym_digraph (subdivide G e w)\" (is \"pair_sym_digraph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "interpret sdG: pair_wf_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph (subdivide G e w)", "by (rule pair_wf_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "obtain u v where [simp]: \"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (with_proj (subdivide G e w))", "have \"\\<And>a b. (a, b) \\<in> parcs (subdivide G e w) \\<Longrightarrow> (b, a) \\<in> parcs (subdivide G e w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n       (b, a) \\<in> parcs (subdivide G e w)", "unfolding \\<open>e = _\\<close> arcs_subdivide"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> parcs G - {(u, v), (v, u)} \\<union>\n             {(u, w), (w, u), (w, v), (v, w)} \\<Longrightarrow>\n       (b, a)\n       \\<in> parcs G - {(u, v), (v, u)} \\<union>\n             {(u, w), (w, u), (w, v), (v, w)}", "by (elim UnE, rule UnI1, rule_tac [2] UnI2) (blast intro: arcs_symmetric)+"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n  (?b, ?a) \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. symmetric (with_proj (subdivide G e w))", "then"], ["proof (chain)\npicking this:\n  (?a, ?b) \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n  (?b, ?a) \\<in> parcs (subdivide G e w)", "show \"symmetric ?sG\""], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n  (?b, ?a) \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. symmetric (with_proj (subdivide G e w))", "unfolding symmetric_def with_proj_simps"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> parcs (subdivide G e w) \\<Longrightarrow>\n  (?b, ?a) \\<in> parcs (subdivide G e w)\n\ngoal (1 subgoal):\n 1. sym (parcs (subdivide G e w))", "by (rule symI)"], ["proof (state)\nthis:\n  symmetric (with_proj (subdivide G e w))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pair_sym_digraph (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_loopfree_digraph) pair_loopfree_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_loopfree_digraph (subdivide G e w)\" (is \"pair_loopfree_digraph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "interpret sdG: pair_wf_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph (subdivide G e w)", "by (rule pair_wf_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "from assms"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "by unfold_locales (cases e, auto dest: wellformed no_loops)"], ["proof (state)\nthis:\n  pair_loopfree_digraph (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_bidirected_digraph) pair_bidirected_digraph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_bidirected_digraph (subdivide G e w)\" (is \"pair_bidirected_digraph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph (subdivide G e w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph (subdivide G e w)", "interpret sdG: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph (subdivide G e w)", "interpret sdG: pair_loopfree_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "by (rule pair_loopfree_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph (subdivide G e w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph (subdivide G e w)", "by unfold_locales"], ["proof (state)\nthis:\n  pair_bidirected_digraph (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_pseudo_graph) pair_pseudo_graph_subdivide:\n  assumes props: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_pseudo_graph (subdivide G e w)\" (is \"pair_pseudo_graph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "interpret sdG: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "obtain u v where [simp]: \"e = (u,v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v. e = (u, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (u, v)\n\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "by unfold_locales (cases e, auto)"], ["proof (state)\nthis:\n  pair_pseudo_graph (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_graph) pair_graph_subdivide:\n  assumes \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows \"pair_graph (subdivide G e w)\" (is \"pair_graph ?sG\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph (subdivide G e w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph (subdivide G e w)", "interpret PPG: pair_pseudo_graph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_pseudo_graph (subdivide G e w)", "by (rule pair_pseudo_graph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph (subdivide G e w)", "interpret PPG: pair_loopfree_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_loopfree_digraph (subdivide G e w)", "by (rule pair_loopfree_digraph_subdivide)"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_graph (subdivide G e w)", "from assms"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_graph (subdivide G e w)", "by unfold_locales"], ["proof (state)\nthis:\n  pair_graph (subdivide G e w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arcs_subdivideD:\n  assumes \"x \\<in> parcs (subdivide G e w)\" \"fst x \\<noteq> w\" \"snd x \\<noteq> w\"\n  shows \"x \\<in> parcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> parcs G", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> parcs (subdivide G e w)\n  fst x \\<noteq> w\n  snd x \\<noteq> w\n\ngoal (1 subgoal):\n 1. x \\<in> parcs G", "by (cases e) auto"], ["", "context pair_sym_digraph begin"], ["", "lemma\n  assumes path: \"apath u p v\"\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\"\n  shows apath_sd_path: \"pre_digraph.apath (subdivide G e w) u (sd_path e w p) v\" (is ?A)\n    and set_awalk_verts_sd_path: \"set (awalk_verts u (sd_path e w p))\n      \\<subseteq> set (awalk_verts u p) \\<union> {w}\" (is ?B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v &&&\n    set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "obtain x y where e_conv: \"e = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. e = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (x, y)\n\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "define sG where \"sG = subdivide G e w\""], ["proof (state)\nthis:\n  sG = subdivide G e w\n\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "interpret S: pair_sym_digraph sG"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph sG", "unfolding sG_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using elems"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "have ev_sG: \"S.awalk_verts = awalk_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pawalk_verts = pawalk_verts", "by (auto simp: fun_eq_iff pre_digraph.awalk_verts_conv)"], ["proof (state)\nthis:\n  pawalk_verts = pawalk_verts\n\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "have w_sG: \"{(x,w), (y,w), (w,x), (w,y)} \\<subseteq> parcs sG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, w), (y, w), (w, x), (w, y)} \\<subseteq> parcs sG", "by (auto simp: sG_def e_conv)"], ["proof (state)\nthis:\n  {(x, w), (y, w), (w, x), (w, y)} \\<subseteq> parcs sG\n\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "from path"], ["proof (chain)\npicking this:\n  apath u p v", "have \"S.apath u (sd_path (x,y) w p) v\"\n    and \"set (S.awalk_verts u (sd_path (x,y) w p)) \\<subseteq> set (awalk_verts u p) \\<union> {w}\""], ["proof (prove)\nusing this:\n  apath u p v\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w p) v &&&\n    set (pawalk_verts u (sd_path (x, y) w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "proof (induct p arbitrary: u rule: sd_path_induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow> S.apath u (sd_path (x, y) w []) v\n 2. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 4. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 6. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 8. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow> S.apath u (sd_path (x, y) w []) v\n 2. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 4. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 6. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 8. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 1"], ["proof (state)\nthis:\n  apath u [] v\n\ngoal (8 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow> S.apath u (sd_path (x, y) w []) v\n 2. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 4. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 6. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 8. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "moreover"], ["proof (state)\nthis:\n  apath u [] v\n\ngoal (8 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow> S.apath u (sd_path (x, y) w []) v\n 2. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 4. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 6. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 8. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "have \"pverts sG = pverts G \\<union> {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts sG = pverts G \\<union> {w}", "by (simp add: sG_def)"], ["proof (state)\nthis:\n  pverts sG = pverts G \\<union> {w}\n\ngoal (8 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow> S.apath u (sd_path (x, y) w []) v\n 2. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 4. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 6. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 8. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "ultimately"], ["proof (chain)\npicking this:\n  apath u [] v\n  pverts sG = pverts G \\<union> {w}", "show ?case"], ["proof (prove)\nusing this:\n  apath u [] v\n  pverts sG = pverts G \\<union> {w}\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w []) v", "by (auto simp: apath_Nil_iff S.apath_Nil_iff)"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w []) v\n\ngoal (7 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 2"], ["proof (state)\nthis:\n  apath u [] v\n\ngoal (7 subgoals):\n 1. \\<And>u.\n       apath u [] v \\<Longrightarrow>\n       set (pawalk_verts u (sd_path (x, y) w []))\n       \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 3. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 5. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 7. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  apath u [] v", "show ?case"], ["proof (prove)\nusing this:\n  apath u [] v\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w []))\n    \\<subseteq> set (pawalk_verts u []) \\<union> {w}", "by simp"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path (x, y) w []))\n  \\<subseteq> set (pawalk_verts u []) \\<union> {w}\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case (pass e' es)"], ["proof (state)\nthis:\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 1"], ["proof (state)\nthis:\n  apath u (e' # es) v\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  apath u (e' # es) v", "have \"S.apath (snd e') (sd_path (x,y) w es) v\" \"u \\<noteq> w\" \"fst e' = u\"\n          \"u \\<notin> set (S.awalk_verts (snd e') (sd_path (x,y) w es))\""], ["proof (prove)\nusing this:\n  apath u (e' # es) v\n\ngoal (1 subgoal):\n 1. (S.apath (snd e') (sd_path (x, y) w es) v &&& u \\<noteq> w) &&&\n    fst e' = u &&&\n    u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))", "using pass elems"], ["proof (prove)\nusing this:\n  apath u (e' # es) v\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. (S.apath (snd e') (sd_path (x, y) w es) v &&& u \\<noteq> w) &&&\n    fst e' = u &&&\n    u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))", "by (fastforce simp: apath_Cons_iff)+"], ["proof (state)\nthis:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "moreover"], ["proof (state)\nthis:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))", "have \"e' \\<in> parcs sG\""], ["proof (prove)\nusing this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n\ngoal (1 subgoal):\n 1. e' \\<in> parcs sG", "using 1 pass"], ["proof (prove)\nusing this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n  apath u (e' # es) v\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (1 subgoal):\n 1. e' \\<in> parcs sG", "by (auto simp: e_conv sG_def S.apath_Cons_iff apath_Cons_iff)"], ["proof (state)\nthis:\n  e' \\<in> parcs sG\n\ngoal (6 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w (e' # es)) v\n 2. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 4. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 6. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "ultimately"], ["proof (chain)\npicking this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n  e' \\<in> parcs sG", "show ?case"], ["proof (prove)\nusing this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n  e' \\<in> parcs sG\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w (e' # es)) v", "using pass"], ["proof (prove)\nusing this:\n  S.apath (snd e') (sd_path (x, y) w es) v\n  u \\<noteq> w\n  fst e' = u\n  u \\<notin> set (pawalk_verts (snd e') (sd_path (x, y) w es))\n  e' \\<in> parcs sG\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w (e' # es)) v", "by (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w (e' # es)) v\n\ngoal (5 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  apath ?ua2 (e' # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w (e' # es)) v\n\ngoal (5 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "note case1 = this"], ["proof (state)\nthis:\n  apath ?ua2 (e' # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w (e' # es)) v\n\ngoal (5 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  apath ?ua2 (e' # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w (e' # es)) v\n\ngoal (5 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 2"], ["proof (state)\nthis:\n  apath u (e' # es) v\n\ngoal (5 subgoals):\n 1. \\<And>e' es u.\n       \\<lbrakk>e' \\<noteq> (x, y); e' \\<noteq> (snd (x, y), fst (x, y));\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u (e' # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n                         \\<subseteq> set (pawalk_verts u (e' # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 3. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 5. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "with pass 2"], ["proof (chain)\npicking this:\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u (e' # es) v\n  apath u (e' # es) v", "show ?case"], ["proof (prove)\nusing this:\n  e' \\<noteq> (x, y)\n  e' \\<noteq> (snd (x, y), fst (x, y))\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u (e' # es) v\n  apath u (e' # es) v\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n    \\<subseteq> set (pawalk_verts u (e' # es)) \\<union> {w}", "by (simp add: apath_Cons_iff) blast"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path (x, y) w (e' # es)))\n  \\<subseteq> set (pawalk_verts u (e' # es)) \\<union> {w}\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  apath ?ua2 (e' # es) v \\<Longrightarrow>\n  set (pawalk_verts ?ua2 (sd_path (x, y) w (e' # es)))\n  \\<subseteq> set (pawalk_verts ?ua2 (e' # es)) \\<union> {w}\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "fix u es a b"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "assume A: \"apath u ((a,b) # es) v\"\n        and ab: \"(a,b) = (x,y) \\<or> (a,b) = (y,x)\"\n        and hyps: \"\\<And>u. apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v\"\n          \"\\<And>u. apath u es v \\<Longrightarrow> set (awalk_verts u (sd_path (x, y) w es)) \\<subseteq> set (awalk_verts u es) \\<union> {w}\""], ["proof (state)\nthis:\n  apath u ((a, b) # es) v\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "from ab A"], ["proof (chain)\npicking this:\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  apath u ((a, b) # es) v", "have \"(x,y) \\<notin> set es\" \"(y,x) \\<notin> set es\""], ["proof (prove)\nusing this:\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  apath u ((a, b) # es) v\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> set es &&& (y, x) \\<notin> set es", "by (auto simp: apath_Cons_iff dest!: awalkI_apath dest: awalk_verts_arc1 awalk_verts_arc2)"], ["proof (state)\nthis:\n  (x, y) \\<notin> set es\n  (y, x) \\<notin> set es\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<notin> set es\n  (y, x) \\<notin> set es", "have ev_sd: \"set (S.awalk_verts b (sd_path (x,y) w es)) = set (awalk_verts b es)\""], ["proof (prove)\nusing this:\n  (x, y) \\<notin> set es\n  (y, x) \\<notin> set es\n\ngoal (1 subgoal):\n 1. set (pawalk_verts b (sd_path (x, y) w es)) = set (pawalk_verts b es)", "by (simp add: sd_path_id)"], ["proof (state)\nthis:\n  set (pawalk_verts b (sd_path (x, y) w es)) = set (pawalk_verts b es)\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "from A ab"], ["proof (chain)\npicking this:\n  apath u ((a, b) # es) v\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)", "have [simp]: \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  apath u ((a, b) # es) v\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by (simp add: apath_Cons_iff) (metis awalkI_apath awalk_verts_non_Nil awhd_of_awalk hd_in_set)"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "from A"], ["proof (chain)\npicking this:\n  apath u ((a, b) # es) v", "have \"S.apath b (sd_path (x,y) w es) v\" \"u = a\" \"u \\<noteq> w\""], ["proof (prove)\nusing this:\n  apath u ((a, b) # es) v\n\ngoal (1 subgoal):\n 1. S.apath b (sd_path (x, y) w es) v &&& u = a &&& u \\<noteq> w", "using ab hyps elems"], ["proof (prove)\nusing this:\n  apath u ((a, b) # es) v\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. S.apath b (sd_path (x, y) w es) v &&& u = a &&& u \\<noteq> w", "by (auto simp: apath_Cons_iff wellformed')"], ["proof (state)\nthis:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "moreover"], ["proof (state)\nthis:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w", "have \"S.awalk u (sd_path (x, y) w ((a, b) # es)) v \""], ["proof (prove)\nusing this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. S.awalk u (sd_path (x, y) w ((a, b) # es)) v", "using ab w_sG"], ["proof (prove)\nusing this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  {(x, w), (y, w), (w, x), (w, y)} \\<subseteq> parcs sG\n\ngoal (1 subgoal):\n 1. S.awalk u (sd_path (x, y) w ((a, b) # es)) v", "by (auto simp: S.apath_def S.awalk_simps S.wellformed')"], ["proof (state)\nthis:\n  S.awalk u (sd_path (x, y) w ((a, b) # es)) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "then"], ["proof (chain)\npicking this:\n  S.awalk u (sd_path (x, y) w ((a, b) # es)) v", "have \"u \\<notin> set (S.awalk_verts w ((w,b) # sd_path (x,y) w es))\""], ["proof (prove)\nusing this:\n  S.awalk u (sd_path (x, y) w ((a, b) # es)) v\n\ngoal (1 subgoal):\n 1. u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))", "using ab \\<open>u \\<noteq> w\\<close> ev_sd A"], ["proof (prove)\nusing this:\n  S.awalk u (sd_path (x, y) w ((a, b) # es)) v\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  u \\<noteq> w\n  set (pawalk_verts b (sd_path (x, y) w es)) = set (pawalk_verts b es)\n  apath u ((a, b) # es) v\n\ngoal (1 subgoal):\n 1. u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))", "by (auto simp: apath_Cons_iff S.awalk_def)"], ["proof (state)\nthis:\n  u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "moreover"], ["proof (state)\nthis:\n  u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "have \"w \\<notin> set (awalk_verts b (sd_path (x, y) w es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))", "using ab ev_sd A elems"], ["proof (prove)\nusing this:\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  set (pawalk_verts b (sd_path (x, y) w es)) = set (pawalk_verts b es)\n  apath u ((a, b) # es) v\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))", "by (auto simp: awalk_Cons_iff apath_def)"], ["proof (state)\nthis:\n  w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "ultimately"], ["proof (chain)\npicking this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n  u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))\n  w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))", "have path: \"S.apath u (sd_path (x, y) w ((a, b) # es)) v \""], ["proof (prove)\nusing this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n  u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))\n  w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w ((a, b) # es)) v", "using ab hyps w_sG \\<open>u = a\\<close>"], ["proof (prove)\nusing this:\n  S.apath b (sd_path (x, y) w es) v\n  u = a\n  u \\<noteq> w\n  u \\<notin> set (pawalk_verts w ((w, b) # sd_path (x, y) w es))\n  w \\<notin> set (pawalk_verts b (sd_path (x, y) w es))\n  (a, b) = (x, y) \\<or> (a, b) = (y, x)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  {(x, w), (y, w), (w, x), (w, y)} \\<subseteq> parcs sG\n  u = a\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w ((a, b) # es)) v", "by (auto simp: S.apath_Cons_iff )"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w ((a, b) # es)) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>apath ?ua2 ((?a2, ?b2) # ?es2) v;\n   (?a2, ?b2) = (x, y) \\<or> (?a2, ?b2) = (y, x);\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow> S.apath u (sd_path (x, y) w ?es2) v;\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es2))\n      \\<subseteq> set (pawalk_verts u ?es2) \\<union> {w}\\<rbrakk>\n  \\<Longrightarrow> S.apath ?ua2 (sd_path (x, y) w ((?a2, ?b2) # ?es2)) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "note path = this"], ["proof (state)\nthis:\n  \\<lbrakk>apath ?ua2 ((?a2, ?b2) # ?es2) v;\n   (?a2, ?b2) = (x, y) \\<or> (?a2, ?b2) = (y, x);\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow> S.apath u (sd_path (x, y) w ?es2) v;\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es2))\n      \\<subseteq> set (pawalk_verts u ?es2) \\<union> {w}\\<rbrakk>\n  \\<Longrightarrow> S.apath ?ua2 (sd_path (x, y) w ((?a2, ?b2) # ?es2)) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  \\<lbrakk>apath ?ua2 ((?a2, ?b2) # ?es2) v;\n   (?a2, ?b2) = (x, y) \\<or> (?a2, ?b2) = (y, x);\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow> S.apath u (sd_path (x, y) w ?es2) v;\n   \\<And>u.\n      apath u ?es2 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es2))\n      \\<subseteq> set (pawalk_verts u ?es2) \\<union> {w}\\<rbrakk>\n  \\<Longrightarrow> S.apath ?ua2 (sd_path (x, y) w ((?a2, ?b2) # ?es2)) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case (sd es)"], ["proof (state)\nthis:\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 1"], ["proof (state)\nthis:\n  apath u ((x, y) # es) v\n\ngoal (4 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u (sd_path (x, y) w ((x, y) # es)) v\n 2. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 4. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "with sd"], ["proof (chain)\npicking this:\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u ((x, y) # es) v", "show ?case"], ["proof (prove)\nusing this:\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u ((x, y) # es) v\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w ((x, y) # es)) v", "by (intro path) auto"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w ((x, y) # es)) v\n\ngoal (3 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  apath ?ua2 ((x, y) # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w ((x, y) # es)) v\n\ngoal (3 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  apath ?ua2 ((x, y) # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w ((x, y) # es)) v\n\ngoal (3 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 2"], ["proof (state)\nthis:\n  apath u ((x, y) # es) v\n\ngoal (3 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>\\<And>u.\n                   apath u es v \\<Longrightarrow>\n                   S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((x, y) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w ((x, y) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((x, y) # es)) \\<union>\n                                     {w}\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 3. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w ((x, y) # es)))\n    \\<subseteq> set (pawalk_verts u ((x, y) # es)) \\<union> {w}", "using 2 sd"], ["proof (prove)\nusing this:\n  apath u ((x, y) # es) v\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w ((x, y) # es)))\n    \\<subseteq> set (pawalk_verts u ((x, y) # es)) \\<union> {w}", "by (auto simp: apath_Cons_iff)"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path (x, y) w ((x, y) # es)))\n  \\<subseteq> set (pawalk_verts u ((x, y) # es)) \\<union> {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  apath ?ua2 ((x, y) # es) v \\<Longrightarrow>\n  set (pawalk_verts ?ua2 (sd_path (x, y) w ((x, y) # es)))\n  \\<subseteq> set (pawalk_verts ?ua2 ((x, y) # es)) \\<union> {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>u.\n              apath u ?es5 v \\<Longrightarrow>\n              S.apath u (sd_path (x, y) w ?es5) v;\n   \\<And>u.\n      apath u ?es5 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es5))\n      \\<subseteq> set (pawalk_verts u ?es5) \\<union> {w};\n   apath ?ua2 ((x, y) # ?es5) v\\<rbrakk>\n  \\<Longrightarrow> set (pawalk_verts ?ua2\n                          (sd_path (x, y) w ((x, y) # ?es5)))\n                    \\<subseteq> set (pawalk_verts ?ua2\n((x, y) # ?es5)) \\<union>\n                                {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>u.\n              apath u ?es5 v \\<Longrightarrow>\n              S.apath u (sd_path (x, y) w ?es5) v;\n   \\<And>u.\n      apath u ?es5 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es5))\n      \\<subseteq> set (pawalk_verts u ?es5) \\<union> {w};\n   apath ?ua2 ((x, y) # ?es5) v\\<rbrakk>\n  \\<Longrightarrow> set (pawalk_verts ?ua2\n                          (sd_path (x, y) w ((x, y) # ?es5)))\n                    \\<subseteq> set (pawalk_verts ?ua2\n((x, y) # ?es5)) \\<union>\n                                {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case (sdrev es)"], ["proof (state)\nthis:\n  fst (x, y) \\<noteq> snd (x, y)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  fst (x, y) \\<noteq> snd (x, y)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 1"], ["proof (state)\nthis:\n  apath u ((snd (x, y), fst (x, y)) # es) v\n\ngoal (2 subgoals):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> S.apath u\n                          (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es))\n                          v\n 2. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "with sdrev"], ["proof (chain)\npicking this:\n  fst (x, y) \\<noteq> snd (x, y)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u ((snd (x, y), fst (x, y)) # es) v", "show ?case"], ["proof (prove)\nusing this:\n  fst (x, y) \\<noteq> snd (x, y)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n  apath u ((snd (x, y), fst (x, y)) # es) v\n\ngoal (1 subgoal):\n 1. S.apath u (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)) v", "by (intro path) auto"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)) v\n\ngoal (1 subgoal):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "}"], ["proof (state)\nthis:\n  apath ?ua2 ((snd (x, y), fst (x, y)) # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)) v\n\ngoal (1 subgoal):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "{"], ["proof (state)\nthis:\n  apath ?ua2 ((snd (x, y), fst (x, y)) # es) v \\<Longrightarrow>\n  S.apath ?ua2 (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)) v\n\ngoal (1 subgoal):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "case 2"], ["proof (state)\nthis:\n  apath u ((snd (x, y), fst (x, y)) # es) v\n\ngoal (1 subgoal):\n 1. \\<And>es u.\n       \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n        \\<And>u.\n           apath u es v \\<Longrightarrow> S.apath u (sd_path (x, y) w es) v;\n        \\<And>u.\n           apath u es v \\<Longrightarrow>\n           set (pawalk_verts u (sd_path (x, y) w es))\n           \\<subseteq> set (pawalk_verts u es) \\<union> {w};\n        apath u ((snd (x, y), fst (x, y)) # es) v\\<rbrakk>\n       \\<Longrightarrow> set (pawalk_verts u\n                               (sd_path (x, y) w\n                                 ((snd (x, y), fst (x, y)) # es)))\n                         \\<subseteq> set\n(pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n                                     {w}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)))\n    \\<subseteq> set (pawalk_verts u\n                      ((snd (x, y), fst (x, y)) # es)) \\<union>\n                {w}", "using 2 sdrev"], ["proof (prove)\nusing this:\n  apath u ((snd (x, y), fst (x, y)) # es) v\n  fst (x, y) \\<noteq> snd (x, y)\n  apath ?u es v \\<Longrightarrow> S.apath ?u (sd_path (x, y) w es) v\n  apath ?u es v \\<Longrightarrow>\n  set (pawalk_verts ?u (sd_path (x, y) w es))\n  \\<subseteq> set (pawalk_verts ?u es) \\<union> {w}\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)))\n    \\<subseteq> set (pawalk_verts u\n                      ((snd (x, y), fst (x, y)) # es)) \\<union>\n                {w}", "by (auto simp: apath_Cons_iff)"], ["proof (state)\nthis:\n  set (pawalk_verts u (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)))\n  \\<subseteq> set (pawalk_verts u ((snd (x, y), fst (x, y)) # es)) \\<union>\n              {w}\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  apath ?ua2 ((snd (x, y), fst (x, y)) # es) v \\<Longrightarrow>\n  set (pawalk_verts ?ua2 (sd_path (x, y) w ((snd (x, y), fst (x, y)) # es)))\n  \\<subseteq> set (pawalk_verts ?ua2\n                    ((snd (x, y), fst (x, y)) # es)) \\<union>\n              {w}\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>fst (x, y) \\<noteq> snd (x, y);\n   \\<And>u.\n      apath u ?es5 v \\<Longrightarrow> S.apath u (sd_path (x, y) w ?es5) v;\n   \\<And>u.\n      apath u ?es5 v \\<Longrightarrow>\n      set (pawalk_verts u (sd_path (x, y) w ?es5))\n      \\<subseteq> set (pawalk_verts u ?es5) \\<union> {w};\n   apath ?ua2 ((snd (x, y), fst (x, y)) # ?es5) v\\<rbrakk>\n  \\<Longrightarrow> set (pawalk_verts ?ua2\n                          (sd_path (x, y) w\n                            ((snd (x, y), fst (x, y)) # ?es5)))\n                    \\<subseteq> set (pawalk_verts ?ua2\n((snd (x, y), fst (x, y)) # ?es5)) \\<union>\n                                {w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.apath u (sd_path (x, y) w p) v\n  set (pawalk_verts u (sd_path (x, y) w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal (2 subgoals):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n 2. set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "then"], ["proof (chain)\npicking this:\n  S.apath u (sd_path (x, y) w p) v\n  set (pawalk_verts u (sd_path (x, y) w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "show ?A ?B"], ["proof (prove)\nusing this:\n  S.apath u (sd_path (x, y) w p) v\n  set (pawalk_verts u (sd_path (x, y) w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v &&&\n    set (pawalk_verts u (sd_path e w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "unfolding sG_def e_conv"], ["proof (prove)\nusing this:\n  pre_digraph.apath (with_proj (subdivide G (x, y) w)) u\n   (sd_path (x, y) w p) v\n  set (pawalk_verts u (sd_path (x, y) w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal (1 subgoal):\n 1. pre_digraph.apath (with_proj (subdivide G (x, y) w)) u\n     (sd_path (x, y) w p) v &&&\n    set (pawalk_verts u (sd_path (x, y) w p))\n    \\<subseteq> set (pawalk_verts u p) \\<union> {w}", "."], ["proof (state)\nthis:\n  pre_digraph.apath (with_proj (subdivide G e w)) u (sd_path e w p) v\n  set (pawalk_verts u (sd_path e w p))\n  \\<subseteq> set (pawalk_verts u p) \\<union> {w}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  assumes elems: \"e \\<in> parcs G\" \"w \\<notin> pverts G\" \"u \\<in> pverts G\" \"v \\<in> pverts G\"\n  assumes path: \"pre_digraph.apath (subdivide G e w) u p v\"\n  shows apath_co_path: \"apath u (co_path e w p) v\" (is ?thesis_path)\n    and set_awalk_verts_co_path: \"set (awalk_verts u (co_path e w p)) = set (awalk_verts u p) - {w}\" (is ?thesis_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. apath u (co_path e w p) v &&&\n    set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "obtain x y where e_conv: \"e = (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. e = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases e) auto"], ["proof (state)\nthis:\n  e = (x, y)\n\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "interpret S: pair_sym_digraph \"subdivide G e w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "using elems(1,2)"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n\ngoal (1 subgoal):\n 1. pair_sym_digraph (subdivide G e w)", "by (rule pair_sym_digraph_subdivide)"], ["proof (state)\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "have e_w: \"fst e \\<noteq> w\" \"snd e \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e \\<noteq> w &&& snd e \\<noteq> w", "using elems"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. fst e \\<noteq> w &&& snd e \\<noteq> w", "by auto"], ["proof (state)\nthis:\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "have \"S.apath u p v\" \"u \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.apath u p v &&& u \\<noteq> w", "using elems path"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u p v\n\ngoal (1 subgoal):\n 1. S.apath u p v &&& u \\<noteq> w", "by auto"], ["proof (state)\nthis:\n  S.apath u p v\n  u \\<noteq> w\n\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "then"], ["proof (chain)\npicking this:\n  S.apath u p v\n  u \\<noteq> w", "have co_path: \"apath u (co_path e w p) v\n    \\<and> set (awalk_verts u (co_path e w p)) = set (awalk_verts u p) - {w}\""], ["proof (prove)\nusing this:\n  S.apath u p v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. apath u (co_path e w p) v \\<and>\n    set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "proof (induction p arbitrary: u rule: co_path_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>S.apath u [] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w []) v \\<and>\n                         set (pawalk_verts u (co_path e w [])) =\n                         set (pawalk_verts u []) - {w}\n 2. \\<And>e' u.\n       \\<lbrakk>S.apath u [e'] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w [e']) v \\<and>\n                         set (pawalk_verts u (co_path e w [e'])) =\n                         set (pawalk_verts u [e']) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 4. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 5. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "case empty"], ["proof (state)\nthis:\n  S.apath u [] v\n  u \\<noteq> w\n\ngoal (5 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>S.apath u [] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w []) v \\<and>\n                         set (pawalk_verts u (co_path e w [])) =\n                         set (pawalk_verts u []) - {w}\n 2. \\<And>e' u.\n       \\<lbrakk>S.apath u [e'] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w [e']) v \\<and>\n                         set (pawalk_verts u (co_path e w [e'])) =\n                         set (pawalk_verts u [e']) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 4. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 5. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "with elems"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u [] v\n  u \\<noteq> w", "show ?case"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u [] v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. apath u (co_path e w []) v \\<and>\n    set (pawalk_verts u (co_path e w [])) = set (pawalk_verts u []) - {w}", "by (simp add: apath_Nil_iff S.apath_Nil_iff)"], ["proof (state)\nthis:\n  apath u (co_path e w []) v \\<and>\n  set (pawalk_verts u (co_path e w [])) = set (pawalk_verts u []) - {w}\n\ngoal (4 subgoals):\n 1. \\<And>e' u.\n       \\<lbrakk>S.apath u [e'] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w [e']) v \\<and>\n                         set (pawalk_verts u (co_path e w [e'])) =\n                         set (pawalk_verts u [e']) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 4. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e' u.\n       \\<lbrakk>S.apath u [e'] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w [e']) v \\<and>\n                         set (pawalk_verts u (co_path e w [e'])) =\n                         set (pawalk_verts u [e']) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 4. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "case (single e')"], ["proof (state)\nthis:\n  S.apath u [e'] v\n  u \\<noteq> w\n\ngoal (4 subgoals):\n 1. \\<And>e' u.\n       \\<lbrakk>S.apath u [e'] v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w [e']) v \\<and>\n                         set (pawalk_verts u (co_path e w [e'])) =\n                         set (pawalk_verts u [e']) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 4. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "with elems"], ["proof (chain)\npicking this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u [e'] v\n  u \\<noteq> w", "show ?case"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u [e'] v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. apath u (co_path e w [e']) v \\<and>\n    set (pawalk_verts u (co_path e w [e'])) =\n    set (pawalk_verts u [e']) - {w}", "by (auto simp: apath_Cons_iff S.apath_Cons_iff apath_Nil_iff S.apath_Nil_iff\n        dest: arcs_subdivideD)"], ["proof (state)\nthis:\n  apath u (co_path e w [e']) v \\<and>\n  set (pawalk_verts u (co_path e w [e'])) = set (pawalk_verts u [e']) - {w}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "case (co e1 e2 es)"], ["proof (state)\nthis:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "then"], ["proof (chain)\npicking this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w", "have \"apath u (co_path e w (e1 # e2 # es)) v\""], ["proof (prove)\nusing this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "using co e_w elems"], ["proof (prove)\nusing this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "by (auto simp: apath_Cons_iff S.apath_Cons_iff)"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "moreover"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"set (awalk_verts u (co_path e w (e1 # e2 # es))) = set (awalk_verts u (e1 # e2 # es)) - {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "using co e_w"], ["proof (prove)\nusing this:\n  e1 = (fst e, w) \\<and> e2 = (w, snd e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by (auto simp: apath_Cons_iff S.apath_Cons_iff)"], ["proof (state)\nthis:\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>e1 = (fst e, w) \\<and> e2 = (w, snd e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 3. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "ultimately"], ["proof (chain)\npicking this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}", "show ?case"], ["proof (prove)\nusing this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v \\<and>\n    set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by fast"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v \\<and>\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "case (corev e1 e2 es)"], ["proof (state)\nthis:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"apath u (co_path e w (e1 # e2 # es)) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "using corev(1-3) e_w(1) elems(1)"], ["proof (prove)\nusing this:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  fst e \\<noteq> w\n  e \\<in> parcs G\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "by (auto simp: apath_Cons_iff S.apath_Cons_iff  intro: arcs_symmetric)"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "moreover"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"set (awalk_verts u (co_path e w (e1 # e2 # es))) = set (awalk_verts u (e1 # e2 # es)) - {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "using corev e_w"], ["proof (prove)\nusing this:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n  e1 = (snd e, w) \\<and> e2 = (w, fst e)\n  \\<lbrakk>S.apath ?u es v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w es) v \\<and>\n                    set (pawalk_verts ?u (co_path e w es)) =\n                    set (pawalk_verts ?u es) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by (auto simp: apath_Cons_iff S.apath_Cons_iff)"], ["proof (state)\nthis:\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (2 subgoals):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e)) \\<and>\n                e1 = (snd e, w) \\<and> e2 = (w, fst e);\n        \\<And>u.\n           \\<lbrakk>S.apath u es v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w es) v \\<and>\n                             set (pawalk_verts u (co_path e w es)) =\n                             set (pawalk_verts u es) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}\n 2. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "ultimately"], ["proof (chain)\npicking this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}", "show ?case"], ["proof (prove)\nusing this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v \\<and>\n    set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by fast"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v \\<and>\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "case (pass e1 e2 es)"], ["proof (state)\nthis:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e))\n  \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e))\n  \\<lbrakk>S.apath ?u (e2 # es) v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w (e2 # es)) v \\<and>\n                    set (pawalk_verts ?u (co_path e w (e2 # es))) =\n                    set (pawalk_verts ?u (e2 # es)) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"fst e1 \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e1 \\<noteq> w", "using elems pass.prems"], ["proof (prove)\nusing this:\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. fst e1 \\<noteq> w", "by (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  fst e1 \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"snd e1 \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd e1 \\<noteq> w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "assume \"snd e1 = w\""], ["proof (state)\nthis:\n  snd e1 = w\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  snd e1 = w", "have \"e1 \\<notin> parcs G\""], ["proof (prove)\nusing this:\n  snd e1 = w\n\ngoal (1 subgoal):\n 1. e1 \\<notin> parcs G", "using elems"], ["proof (prove)\nusing this:\n  snd e1 = w\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. e1 \\<notin> parcs G", "by auto"], ["proof (state)\nthis:\n  e1 \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e1 \\<notin> parcs G", "have \"e1 \\<in> parcs (subdivide G e w) - parcs G\""], ["proof (prove)\nusing this:\n  e1 \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. e1 \\<in> parcs (subdivide G e w) - parcs G", "using pass"], ["proof (prove)\nusing this:\n  e1 \\<notin> parcs G\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e))\n  \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e))\n  \\<lbrakk>S.apath ?u (e2 # es) v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w (e2 # es)) v \\<and>\n                    set (pawalk_verts ?u (co_path e w (e2 # es))) =\n                    set (pawalk_verts ?u (e2 # es)) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. e1 \\<in> parcs (subdivide G e w) - parcs G", "by (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  e1 \\<in> parcs (subdivide G e w) - parcs G\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e1 \\<in> parcs (subdivide G e w) - parcs G", "have \"e1 = (x,w) \\<or> e1 = (y,w)\""], ["proof (prove)\nusing this:\n  e1 \\<in> parcs (subdivide G e w) - parcs G\n\ngoal (1 subgoal):\n 1. e1 = (x, w) \\<or> e1 = (y, w)", "using \\<open>fst e1 \\<noteq> w\\<close> e_w"], ["proof (prove)\nusing this:\n  e1 \\<in> parcs (subdivide G e w) - parcs G\n  fst e1 \\<noteq> w\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n\ngoal (1 subgoal):\n 1. e1 = (x, w) \\<or> e1 = (y, w)", "by (auto simp add: e_conv)"], ["proof (state)\nthis:\n  e1 = (x, w) \\<or> e1 = (y, w)\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  e1 = (x, w) \\<or> e1 = (y, w)\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "have \"fst e2 = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e2 = w", "using \\<open>snd e1 = w\\<close> pass.prems"], ["proof (prove)\nusing this:\n  snd e1 = w\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. fst e2 = w", "by (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  fst e2 = w\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst e2 = w", "have \"e2 \\<notin> parcs G\""], ["proof (prove)\nusing this:\n  fst e2 = w\n\ngoal (1 subgoal):\n 1. e2 \\<notin> parcs G", "using elems"], ["proof (prove)\nusing this:\n  fst e2 = w\n  e \\<in> parcs G\n  w \\<notin> pverts G\n  u \\<in> pverts G\n  v \\<in> pverts G\n\ngoal (1 subgoal):\n 1. e2 \\<notin> parcs G", "by auto"], ["proof (state)\nthis:\n  e2 \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e2 \\<notin> parcs G", "have \"e2 \\<in> parcs (subdivide G e w) - parcs G\""], ["proof (prove)\nusing this:\n  e2 \\<notin> parcs G\n\ngoal (1 subgoal):\n 1. e2 \\<in> parcs (subdivide G e w) - parcs G", "using pass"], ["proof (prove)\nusing this:\n  e2 \\<notin> parcs G\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e))\n  \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e))\n  \\<lbrakk>S.apath ?u (e2 # es) v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w (e2 # es)) v \\<and>\n                    set (pawalk_verts ?u (co_path e w (e2 # es))) =\n                    set (pawalk_verts ?u (e2 # es)) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. e2 \\<in> parcs (subdivide G e w) - parcs G", "by (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  e2 \\<in> parcs (subdivide G e w) - parcs G\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e2 \\<in> parcs (subdivide G e w) - parcs G", "have \"e2 = (w,x) \\<or> e2 = (w,y)\""], ["proof (prove)\nusing this:\n  e2 \\<in> parcs (subdivide G e w) - parcs G\n\ngoal (1 subgoal):\n 1. e2 = (w, x) \\<or> e2 = (w, y)", "using \\<open>fst e2 = w\\<close> e_w"], ["proof (prove)\nusing this:\n  e2 \\<in> parcs (subdivide G e w) - parcs G\n  fst e2 = w\n  fst e \\<noteq> w\n  snd e \\<noteq> w\n\ngoal (1 subgoal):\n 1. e2 = (w, x) \\<or> e2 = (w, y)", "by (cases e2) (auto simp add: e_conv)"], ["proof (state)\nthis:\n  e2 = (w, x) \\<or> e2 = (w, y)\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  e1 = (x, w) \\<or> e1 = (y, w)\n  e2 = (w, x) \\<or> e2 = (w, y)", "have \"e1 = (x,w) \\<and> e2 = (w,x) \\<or> e1 = (y,w) \\<and> e2 = (w,y)\""], ["proof (prove)\nusing this:\n  e1 = (x, w) \\<or> e1 = (y, w)\n  e2 = (w, x) \\<or> e2 = (w, y)\n\ngoal (1 subgoal):\n 1. e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)", "using pass.hyps[simplified e_conv]"], ["proof (prove)\nusing this:\n  e1 = (x, w) \\<or> e1 = (y, w)\n  e2 = (w, x) \\<or> e2 = (w, y)\n  \\<not> (e1 = (fst (x, y), w) \\<and> e2 = (w, snd (x, y)))\n  \\<not> (e1 = (snd (x, y), w) \\<and> e2 = (w, fst (x, y)))\n\ngoal (1 subgoal):\n 1. e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)", "by auto"], ["proof (state)\nthis:\n  e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)\n\ngoal (1 subgoal):\n 1. snd e1 = w \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)", "show False"], ["proof (prove)\nusing this:\n  e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)\n\ngoal (1 subgoal):\n 1. False", "using pass.prems"], ["proof (prove)\nusing this:\n  e1 = (x, w) \\<and> e2 = (w, x) \\<or> e1 = (y, w) \\<and> e2 = (w, y)\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. False", "by (cases es) (auto simp: S.apath_Cons_iff)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd e1 \\<noteq> w\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "then"], ["proof (chain)\npicking this:\n  snd e1 \\<noteq> w", "have \"e1 \\<in> parcs G\""], ["proof (prove)\nusing this:\n  snd e1 \\<noteq> w\n\ngoal (1 subgoal):\n 1. e1 \\<in> parcs G", "using \\<open>fst e1 \\<noteq> w\\<close> pass.prems"], ["proof (prove)\nusing this:\n  snd e1 \\<noteq> w\n  fst e1 \\<noteq> w\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. e1 \\<in> parcs G", "by (auto simp: S.apath_Cons_iff dest: arcs_subdivideD)"], ["proof (state)\nthis:\n  e1 \\<in> parcs G\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have ih: \"apath (snd e1) (co_path e w (e2 # es)) v \\<and> set (awalk_verts (snd e1) (co_path e w (e2 # es))) = set (awalk_verts (snd e1) (e2 # es)) - {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n    set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n    set (pawalk_verts (snd e1) (e2 # es)) - {w}", "using pass.prems \\<open>snd e1 \\<noteq> w\\<close>"], ["proof (prove)\nusing this:\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  snd e1 \\<noteq> w\n\ngoal (1 subgoal):\n 1. apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n    set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n    set (pawalk_verts (snd e1) (e2 # es)) - {w}", "by (intro pass.IH) (auto simp: apath_Cons_iff S.apath_Cons_iff)"], ["proof (state)\nthis:\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "then"], ["proof (chain)\npicking this:\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}", "have \"fst e1 \\<notin> set (awalk_verts (snd e1) (co_path e w (e2 # es)))\" \"fst e1 = u\""], ["proof (prove)\nusing this:\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es))) &&&\n    fst e1 = u", "using pass.prems"], ["proof (prove)\nusing this:\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n\ngoal (1 subgoal):\n 1. fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es))) &&&\n    fst e1 = u", "by (clarsimp simp: S.apath_Cons_iff)+"], ["proof (state)\nthis:\n  fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es)))\n  fst e1 = u\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "then"], ["proof (chain)\npicking this:\n  fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es)))\n  fst e1 = u", "have \"apath u (co_path e w (e1 # e2 # es)) v\""], ["proof (prove)\nusing this:\n  fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es)))\n  fst e1 = u\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "using ih pass \\<open>e1 \\<in> parcs G\\<close>"], ["proof (prove)\nusing this:\n  fst e1 \\<notin> set (pawalk_verts (snd e1) (co_path e w (e2 # es)))\n  fst e1 = u\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e))\n  \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e))\n  \\<lbrakk>S.apath ?u (e2 # es) v; ?u \\<noteq> w\\<rbrakk>\n  \\<Longrightarrow> apath ?u (co_path e w (e2 # es)) v \\<and>\n                    set (pawalk_verts ?u (co_path e w (e2 # es))) =\n                    set (pawalk_verts ?u (e2 # es)) - {w}\n  S.apath u (e1 # e2 # es) v\n  u \\<noteq> w\n  e1 \\<in> parcs G\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v", "by (auto simp: apath_Cons_iff S.apath_Cons_iff)[]"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "moreover"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "have \"set (awalk_verts u (co_path e w (e1 # e2 # es))) = set (awalk_verts u (e1 # e2 # es)) - {w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "using pass.hyps ih \\<open>fst e1 \\<noteq> w\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e))\n  \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e))\n  apath (snd e1) (co_path e w (e2 # es)) v \\<and>\n  set (pawalk_verts (snd e1) (co_path e w (e2 # es))) =\n  set (pawalk_verts (snd e1) (e2 # es)) - {w}\n  fst e1 \\<noteq> w\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by auto"], ["proof (state)\nthis:\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 es u.\n       \\<lbrakk>\\<not> (e1 = (fst e, w) \\<and> e2 = (w, snd e));\n        \\<not> (e1 = (snd e, w) \\<and> e2 = (w, fst e));\n        \\<And>u.\n           \\<lbrakk>S.apath u (e2 # es) v; u \\<noteq> w\\<rbrakk>\n           \\<Longrightarrow> apath u (co_path e w (e2 # es)) v \\<and>\n                             set (pawalk_verts u (co_path e w (e2 # es))) =\n                             set (pawalk_verts u (e2 # es)) - {w};\n        S.apath u (e1 # e2 # es) v; u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> apath u (co_path e w (e1 # e2 # es)) v \\<and>\n                         set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n                         set (pawalk_verts u (e1 # e2 # es)) - {w}", "ultimately"], ["proof (chain)\npicking this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}", "show ?case"], ["proof (prove)\nusing this:\n  apath u (co_path e w (e1 # e2 # es)) v\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal (1 subgoal):\n 1. apath u (co_path e w (e1 # e2 # es)) v \\<and>\n    set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n    set (pawalk_verts u (e1 # e2 # es)) - {w}", "by fast"], ["proof (state)\nthis:\n  apath u (co_path e w (e1 # e2 # es)) v \\<and>\n  set (pawalk_verts u (co_path e w (e1 # e2 # es))) =\n  set (pawalk_verts u (e1 # e2 # es)) - {w}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  apath u (co_path e w p) v \\<and>\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n\ngoal (2 subgoals):\n 1. apath u (co_path e w p) v\n 2. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "then"], ["proof (chain)\npicking this:\n  apath u (co_path e w p) v \\<and>\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}", "show ?thesis_set ?thesis_path"], ["proof (prove)\nusing this:\n  apath u (co_path e w p) v \\<and>\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n\ngoal (1 subgoal):\n 1. set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w} &&&\n    apath u (co_path e w p) v", "by blast+"], ["proof (state)\nthis:\n  set (pawalk_verts u (co_path e w p)) = set (pawalk_verts u p) - {w}\n  apath u (co_path e w p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Bidirected Graphs\\<close>"], ["", "definition (in -) swap_in :: \"('a \\<times> 'a) set \\<Rightarrow> 'a \\<times> 'a \\<Rightarrow> 'a \\<times> 'a\" where\n  \"swap_in S x = (if x \\<in> S then prod.swap x else x)\""], ["", "lemma bidirected_digraph_rev_conv_pair:\n  assumes \"bidirected_digraph (with_proj G) rev_G\"\n  shows \"rev_G = swap_in (parcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_G = swap_in (parcs G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rev_G = swap_in (parcs G)", "interpret bidirected_digraph G rev_G"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (with_proj G) rev_G", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. rev_G = swap_in (parcs G)", "have \"\\<And>a b. (a, b) \\<in> parcs G \\<Longrightarrow> rev_G (a, b) = (b, a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. (a, b) \\<in> parcs G \\<Longrightarrow> rev_G (a, b) = (b, a)", "using tail_arev[simplified with_proj_simps] head_arev[simplified with_proj_simps]"], ["proof (prove)\nusing this:\n  ?a \\<in> parcs G \\<Longrightarrow> fst (rev_G ?a) = snd ?a\n  ?a \\<in> parcs G \\<Longrightarrow> snd (rev_G ?a) = fst ?a\n\ngoal (1 subgoal):\n 1. \\<And>a b. (a, b) \\<in> parcs G \\<Longrightarrow> rev_G (a, b) = (b, a)", "by (metis fst_conv prod.collapse snd_conv)"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> parcs G \\<Longrightarrow> rev_G (?a, ?b) = (?b, ?a)\n\ngoal (1 subgoal):\n 1. rev_G = swap_in (parcs G)", "then"], ["proof (chain)\npicking this:\n  (?a, ?b) \\<in> parcs G \\<Longrightarrow> rev_G (?a, ?b) = (?b, ?a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> parcs G \\<Longrightarrow> rev_G (?a, ?b) = (?b, ?a)\n\ngoal (1 subgoal):\n 1. rev_G = swap_in (parcs G)", "by (auto simp: swap_in_def fun_eq_iff arev_eq)"], ["proof (state)\nthis:\n  rev_G = swap_in (parcs G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pair_bidirected_digraph) bidirected_digraph:\n  \"bidirected_digraph (with_proj G) (swap_in (parcs G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (with_proj G) (swap_in (parcs G))", "using no_loops' arcs_symmetric"], ["proof (prove)\nusing this:\n  (?u, ?v) \\<in> parcs G \\<Longrightarrow> ?u \\<noteq> ?v\n  (?a, ?b) \\<in> parcs G \\<Longrightarrow> (?b, ?a) \\<in> parcs G\n\ngoal (1 subgoal):\n 1. bidirected_digraph (with_proj G) (swap_in (parcs G))", "by unfold_locales (auto simp: swap_in_def)"], ["", "lemma pair_bidirected_digraphI_bidirected_digraph:\n  assumes \"bidirected_digraph (with_proj G) (swap_in (parcs G))\"\n  shows \"pair_bidirected_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "interpret bidirected_digraph \"with_proj G\" \"swap_in (parcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (with_proj G) (swap_in (parcs G))", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "assume \"a \\<in> parcs G\""], ["proof (state)\nthis:\n  a \\<in> parcs G\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "then"], ["proof (chain)\npicking this:\n  a \\<in> parcs G", "have \"fst a \\<noteq> snd a\""], ["proof (prove)\nusing this:\n  a \\<in> parcs G\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> snd a", "using arev_neq[of a] bidirected_digraph_rev_conv_pair[OF assms(1)]"], ["proof (prove)\nusing this:\n  a \\<in> parcs G\n  a \\<in> arcs (with_proj G) \\<Longrightarrow>\n  swap_in (parcs G) a \\<noteq> a\n  swap_in (parcs G) = swap_in (parcs G)\n\ngoal (1 subgoal):\n 1. fst a \\<noteq> snd a", "by (cases a) (auto simp: swap_in_def)"], ["proof (state)\nthis:\n  fst a \\<noteq> snd a\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> parcs G \\<Longrightarrow> fst ?a2 \\<noteq> snd ?a2\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> parcs G \\<Longrightarrow> fst ?a2 \\<noteq> snd ?a2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?a2 \\<in> parcs G \\<Longrightarrow> fst ?a2 \\<noteq> snd ?a2\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "using tail_in_verts head_in_verts"], ["proof (prove)\nusing this:\n  ?a2 \\<in> parcs G \\<Longrightarrow> fst ?a2 \\<noteq> snd ?a2\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  tail (with_proj G) ?e \\<in> verts (with_proj G)\n  ?e \\<in> arcs (with_proj G) \\<Longrightarrow>\n  head (with_proj G) ?e \\<in> verts (with_proj G)\n\ngoal (1 subgoal):\n 1. pair_bidirected_digraph G", "by unfold_locales auto"], ["proof (state)\nthis:\n  pair_bidirected_digraph G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}