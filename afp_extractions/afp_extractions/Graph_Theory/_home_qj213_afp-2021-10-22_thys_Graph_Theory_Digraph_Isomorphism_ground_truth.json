{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Digraph_Isomorphism.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma verts_app_iso: \"verts (app_iso hom G) = iso_verts hom ` verts G\"\n  and arcs_app_iso: \"arcs (app_iso hom G) = iso_arcs hom `arcs G\"\n  and tail_app_iso: \"tail (app_iso hom G) = iso_tail hom\"\n  and head_app_iso: \"head (app_iso hom G) = iso_head hom\"", "lemmas app_iso_simps[simp] = verts_app_iso arcs_app_iso tail_app_iso head_app_iso", "lemma\n  assumes \"digraph_isomorphism hom\"\n  shows iso_verts_inv_iso: \"\\<And>u. u \\<in> verts G \\<Longrightarrow> iso_verts (inv_iso hom) (iso_verts hom u) = u\"\n    and iso_arcs_inv_iso: \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> iso_arcs (inv_iso hom) (iso_arcs hom a) = a\"\n    and iso_verts_iso_inv: \"\\<And>u. u \\<in> verts (app_iso hom G) \\<Longrightarrow> iso_verts hom (iso_verts (inv_iso hom) u) = u\"\n    and iso_arcs_iso_inv: \"\\<And>a. a \\<in> arcs (app_iso hom G) \\<Longrightarrow> iso_arcs hom (iso_arcs (inv_iso hom) a) = a\"\n    and iso_tail_inv_iso: \"iso_tail (inv_iso hom) = tail G\"\n    and iso_head_inv_iso: \"iso_head (inv_iso hom) = head G\"\n    and verts_app_inv_iso:\"iso_verts (inv_iso hom) ` iso_verts hom ` verts G = verts G\"\n    and arcs_app_inv_iso:\"iso_arcs (inv_iso hom) ` iso_arcs hom ` arcs G = arcs G\"", "lemmas iso_inv_simps[simp] =\n   iso_verts_inv_iso iso_verts_iso_inv\n   iso_arcs_inv_iso iso_arcs_iso_inv\n   verts_app_inv_iso arcs_app_inv_iso\n   iso_tail_inv_iso iso_head_inv_iso", "lemma app_iso_inv[simp]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"app_iso (inv_iso hom) (app_iso hom G) = G\"", "lemma iso_verts_eq_iff[simp]:\n  assumes \"digraph_isomorphism hom\" \"u \\<in> verts G\" \"v \\<in> verts G\"\n  shows \"iso_verts hom u = iso_verts hom v \\<longleftrightarrow> u = v\"", "lemma iso_arcs_eq_iff[simp]:\n  assumes \"digraph_isomorphism hom\" \"e1 \\<in> arcs G\" \"e2 \\<in> arcs G\"\n  shows \"iso_arcs hom e1 = iso_arcs hom e2 \\<longleftrightarrow> e1 = e2\"", "lemma\n  assumes \"digraph_isomorphism hom\" \"e \\<in> arcs G\"\n  shows iso_verts_tail: \"iso_tail hom (iso_arcs hom e) = iso_verts hom (tail G e)\"\n    and iso_verts_head: \"iso_head hom (iso_arcs hom e) = iso_verts hom (head G e)\"", "lemma digraph_isomorphism_inj_on_arcs:\n  \"digraph_isomorphism hom \\<Longrightarrow> inj_on (iso_arcs hom) (arcs G)\"", "lemma digraph_isomorphism_inj_on_verts:\n  \"digraph_isomorphism hom \\<Longrightarrow> inj_on (iso_verts hom) (verts G)\"", "lemma (in wf_digraph) wf_digraphI_app_iso[intro?]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"wf_digraph (app_iso hom G)\"", "lemma (in fin_digraph) fin_digraphI_app_iso[intro?]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"fin_digraph (app_iso hom G)\"", "lemma digraph_isomorphism_invI:\n  assumes \"digraph_isomorphism hom\" shows \"pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\"", "lemma awalk_app_isoI:\n  assumes \"awalk u p v\" and hom: \"digraph_isomorphism hom\"\n  shows \"pre_digraph.awalk (app_iso hom G) (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\"", "lemma awalk_app_isoD:\n  assumes w: \"pre_digraph.awalk (app_iso hom G) u p v\" and hom: \"digraph_isomorphism hom\"\n  shows \"awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p) (iso_verts (inv_iso hom) v)\"", "lemma awalk_verts_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"awalk u p v\"\n  shows \"pre_digraph.awalk_verts (app_iso hom G) (iso_verts hom u) (map (iso_arcs hom) p)\n    = map (iso_verts hom) (awalk_verts u p)\"", "lemma arcs_ends_app_iso_eq:\n  assumes \"digraph_isomorphism hom\"\n  shows \"arcs_ends (app_iso hom G) = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G\"", "lemma in_arcs_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"in_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` in_arcs G u\"", "lemma out_arcs_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"out_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` out_arcs G u\"", "lemma in_degree_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"in_degree (app_iso hom G) (iso_verts hom u) = in_degree G u\"", "lemma out_degree_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"out_degree (app_iso hom G) (iso_verts hom u) = out_degree G u\"", "lemma in_arcs_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"in_arcs (app_iso hom G) u = iso_arcs hom ` in_arcs G (iso_verts (inv_iso hom) u)\"", "lemma out_arcs_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"out_arcs (app_iso hom G) u = iso_arcs hom ` out_arcs G (iso_verts (inv_iso hom) u)\"", "lemma in_degree_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"in_degree (app_iso hom G) u = in_degree G (iso_verts (inv_iso hom) u)\"", "lemma out_degree_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"out_degree (app_iso hom G) u = out_degree G (iso_verts (inv_iso hom) u)\"", "lemmas app_iso_eq =\n  awalk_verts_app_iso_eq\n  arcs_ends_app_iso_eq\n  in_arcs_app_iso_eq'\n  out_arcs_app_iso_eq'\n  in_degree_app_iso_eq'\n  out_degree_app_iso_eq'", "lemma reachableI_app_iso:\n  assumes r: \"u \\<rightarrow>\\<^sup>* v\" and hom: \"digraph_isomorphism hom\"\n  shows \"(iso_verts hom u) \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> (iso_verts hom v)\"", "lemma awalk_app_iso_eq:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"u \\<in> iso_verts hom ` verts G\" \"v \\<in> iso_verts hom ` verts G\" \"set p \\<subseteq> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph.awalk (app_iso hom G) u p v\n    \\<longleftrightarrow> awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p) (iso_verts (inv_iso hom) v)\"", "lemma reachable_app_iso_eq:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"u \\<in> iso_verts hom ` verts G\" \"v \\<in> iso_verts hom ` verts G\"\n  shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<longleftrightarrow> iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma connectedI_app_iso:\n  assumes c: \"connected G\" and hom: \"digraph_isomorphism hom\"\n  shows \"connected (app_iso hom G)\"", "lemma digraph_iso_swap:\n  assumes \"wf_digraph G\" \"digraph_iso G H\" shows \"digraph_iso H G\"", "lemma digraph_iso_trans[trans]:\n  assumes \"digraph_iso G H\" \"digraph_iso H I\" shows \"digraph_iso G I\"", "lemma (in pre_digraph) digraph_isomorphism_subgraphI:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H G\"\n  shows \"pre_digraph.digraph_isomorphism H hom\"", "lemma (in wf_digraph) verts_app_inv_iso_subgraph:\n  assumes hom: \"digraph_isomorphism hom\" and \"V \\<subseteq> verts G\"\n  shows \"iso_verts (inv_iso hom) ` iso_verts hom ` V = V\"", "lemma (in wf_digraph) arcs_app_inv_iso_subgraph:\n  assumes hom: \"digraph_isomorphism hom\" and \"A \\<subseteq> arcs G\"\n  shows \"iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A\"", "lemma (in pre_digraph) app_iso_inv_subgraph[simp]:\n  assumes \"digraph_isomorphism hom\" \"subgraph H G\"\n  shows \"app_iso (inv_iso hom) (app_iso hom H) = H\"", "lemma (in wf_digraph) app_iso_iso_inv_subgraph[simp]:\n  assumes \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H (app_iso hom G)\"\n  shows \"app_iso hom (app_iso (inv_iso hom) H) = H\"", "lemma (in pre_digraph) subgraph_app_isoI':\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H H'\" \"subgraph H' G\"\n  shows \"subgraph (app_iso hom H) (app_iso hom H')\"", "lemma (in pre_digraph) subgraph_app_isoI:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H G\"\n  shows \"subgraph (app_iso hom H) (app_iso hom G)\"", "lemma (in pre_digraph) app_iso_eq_conv:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H1 G\" \"subgraph H2 G\"\n  shows \"app_iso hom H1 = app_iso hom H2 \\<longleftrightarrow> H1 = H2\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma in_arcs_app_iso_cases:\n  assumes \"a \\<in> arcs (app_iso hom G)\"\n  obtains a0 where \"a = iso_arcs hom a0\" \"a0 \\<in> arcs G\"", "lemma in_verts_app_iso_cases:\n  assumes \"v \\<in> verts (app_iso hom G)\"\n  obtains v0 where \"v = iso_verts hom v0\" \"v0 \\<in> verts G\"", "lemma (in wf_digraph) max_subgraph_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H (app_iso hom G)\"\n  shows \"pre_digraph.max_subgraph (app_iso hom G) P H\n    \\<longleftrightarrow> max_subgraph (P o app_iso hom) (app_iso (inv_iso hom) H)\"", "lemma (in pre_digraph) max_subgraph_cong:\n  assumes \"H = H'\" \"\\<And>H''. subgraph H' H'' \\<Longrightarrow> subgraph H'' G \\<Longrightarrow> P H'' = P' H''\"\n  shows \"max_subgraph P H = max_subgraph P' H'\"", "lemma (in pre_digraph) inj_on_app_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"S \\<subseteq> {H. subgraph H G}\"\n  shows \"inj_on (app_iso hom) S\"", "lemma card_verts_iso[simp]: \"card (iso_verts hom ` verts G) = card (verts G)\"", "lemma card_arcs_iso[simp]: \"card (iso_arcs hom ` arcs G) = card (arcs G)\"", "lemma strongly_connected_iso[simp]: \"strongly_connected (app_iso hom G) \\<longleftrightarrow> strongly_connected G\"", "lemma subgraph_strongly_connected_iso:\n    assumes \"subgraph H G\"\n    shows \"strongly_connected (app_iso hom H) \\<longleftrightarrow> strongly_connected H\"", "lemma sccs_iso[simp]: \"pre_digraph.sccs (app_iso hom G) = app_iso hom ` sccs\" (is \"?L = ?R\")", "lemma card_sccs_iso[simp]: \"card (app_iso hom ` sccs) = card sccs\""], "translations": [["", "lemma verts_app_iso: \"verts (app_iso hom G) = iso_verts hom ` verts G\"\n  and arcs_app_iso: \"arcs (app_iso hom G) = iso_arcs hom `arcs G\"\n  and tail_app_iso: \"tail (app_iso hom G) = iso_tail hom\"\n  and head_app_iso: \"head (app_iso hom G) = iso_head hom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (app_iso hom G) = iso_verts hom ` verts G &&&\n     arcs (app_iso hom G) = iso_arcs hom ` arcs G) &&&\n    tail (app_iso hom G) = iso_tail hom &&&\n    head (app_iso hom G) = iso_head hom", "by (auto simp: app_iso_def)"], ["", "lemmas app_iso_simps[simp] = verts_app_iso arcs_app_iso tail_app_iso head_app_iso"], ["", "context pre_digraph begin"], ["", "lemma\n  assumes \"digraph_isomorphism hom\"\n  shows iso_verts_inv_iso: \"\\<And>u. u \\<in> verts G \\<Longrightarrow> iso_verts (inv_iso hom) (iso_verts hom u) = u\"\n    and iso_arcs_inv_iso: \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> iso_arcs (inv_iso hom) (iso_arcs hom a) = a\"\n    and iso_verts_iso_inv: \"\\<And>u. u \\<in> verts (app_iso hom G) \\<Longrightarrow> iso_verts hom (iso_verts (inv_iso hom) u) = u\"\n    and iso_arcs_iso_inv: \"\\<And>a. a \\<in> arcs (app_iso hom G) \\<Longrightarrow> iso_arcs hom (iso_arcs (inv_iso hom) a) = a\"\n    and iso_tail_inv_iso: \"iso_tail (inv_iso hom) = tail G\"\n    and iso_head_inv_iso: \"iso_head (inv_iso hom) = head G\"\n    and verts_app_inv_iso:\"iso_verts (inv_iso hom) ` iso_verts hom ` verts G = verts G\"\n    and arcs_app_inv_iso:\"iso_arcs (inv_iso hom) ` iso_arcs hom ` arcs G = arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<And>u.\n          u \\<in> verts G \\<Longrightarrow>\n          iso_verts (inv_iso hom) (iso_verts hom u) = u) &&&\n      (\\<And>a.\n          a \\<in> arcs G \\<Longrightarrow>\n          iso_arcs (inv_iso hom) (iso_arcs hom a) = a)) &&&\n     (\\<And>u.\n         u \\<in> verts (app_iso hom G) \\<Longrightarrow>\n         iso_verts hom (iso_verts (inv_iso hom) u) = u) &&&\n     (\\<And>a.\n         a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n         iso_arcs hom (iso_arcs (inv_iso hom) a) = a)) &&&\n    (iso_tail (inv_iso hom) = tail G &&&\n     iso_head (inv_iso hom) = head G) &&&\n    iso_verts (inv_iso hom) ` iso_verts hom ` verts G = verts G &&&\n    iso_arcs (inv_iso hom) ` iso_arcs hom ` arcs G = arcs G", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. (((\\<And>u.\n          u \\<in> verts G \\<Longrightarrow>\n          iso_verts (inv_iso hom) (iso_verts hom u) = u) &&&\n      (\\<And>a.\n          a \\<in> arcs G \\<Longrightarrow>\n          iso_arcs (inv_iso hom) (iso_arcs hom a) = a)) &&&\n     (\\<And>u.\n         u \\<in> verts (app_iso hom G) \\<Longrightarrow>\n         iso_verts hom (iso_verts (inv_iso hom) u) = u) &&&\n     (\\<And>a.\n         a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n         iso_arcs hom (iso_arcs (inv_iso hom) a) = a)) &&&\n    (iso_tail (inv_iso hom) = tail G &&&\n     iso_head (inv_iso hom) = head G) &&&\n    iso_verts (inv_iso hom) ` iso_verts hom ` verts G = verts G &&&\n    iso_arcs (inv_iso hom) ` iso_arcs hom ` arcs G = arcs G", "by (auto simp: inv_iso_def digraph_isomorphism_def the_inv_into_f_f)"], ["", "lemmas iso_inv_simps[simp] =\n   iso_verts_inv_iso iso_verts_iso_inv\n   iso_arcs_inv_iso iso_arcs_iso_inv\n   verts_app_inv_iso arcs_app_inv_iso\n   iso_tail_inv_iso iso_head_inv_iso"], ["", "lemma app_iso_inv[simp]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"app_iso (inv_iso hom) (app_iso hom G) = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom G) = G", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom G) = G", "by (intro pre_digraph.equality) (auto intro: rev_image_eqI)"], ["", "lemma iso_verts_eq_iff[simp]:\n  assumes \"digraph_isomorphism hom\" \"u \\<in> verts G\" \"v \\<in> verts G\"\n  shows \"iso_verts hom u = iso_verts hom v \\<longleftrightarrow> u = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (iso_verts hom u = iso_verts hom v) = (u = v)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. (iso_verts hom u = iso_verts hom v) = (u = v)", "by (auto simp: digraph_isomorphism_def dest: inj_onD)"], ["", "lemma iso_arcs_eq_iff[simp]:\n  assumes \"digraph_isomorphism hom\" \"e1 \\<in> arcs G\" \"e2 \\<in> arcs G\"\n  shows \"iso_arcs hom e1 = iso_arcs hom e2 \\<longleftrightarrow> e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (iso_arcs hom e1 = iso_arcs hom e2) = (e1 = e2)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  e1 \\<in> arcs G\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (iso_arcs hom e1 = iso_arcs hom e2) = (e1 = e2)", "by (auto simp: digraph_isomorphism_def dest: inj_onD)"], ["", "lemma\n  assumes \"digraph_isomorphism hom\" \"e \\<in> arcs G\"\n  shows iso_verts_tail: \"iso_tail hom (iso_arcs hom e) = iso_verts hom (tail G e)\"\n    and iso_verts_head: \"iso_head hom (iso_arcs hom e) = iso_verts hom (head G e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_tail hom (iso_arcs hom e) = iso_verts hom (tail G e) &&&\n    iso_head hom (iso_arcs hom e) = iso_verts hom (head G e)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_tail hom (iso_arcs hom e) = iso_verts hom (tail G e) &&&\n    iso_head hom (iso_arcs hom e) = iso_verts hom (head G e)", "unfolding digraph_isomorphism_def"], ["proof (prove)\nusing this:\n  wf_digraph G \\<and>\n  inj_on (iso_verts hom) (verts G) \\<and>\n  inj_on (iso_arcs hom) (arcs G) \\<and>\n  (\\<forall>a\\<in>arcs G.\n      iso_verts hom (tail G a) = iso_tail hom (iso_arcs hom a) \\<and>\n      iso_verts hom (head G a) = iso_head hom (iso_arcs hom a))\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_tail hom (iso_arcs hom e) = iso_verts hom (tail G e) &&&\n    iso_head hom (iso_arcs hom e) = iso_verts hom (head G e)", "by auto"], ["", "lemma digraph_isomorphism_inj_on_arcs:\n  \"digraph_isomorphism hom \\<Longrightarrow> inj_on (iso_arcs hom) (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_isomorphism hom \\<Longrightarrow> inj_on (iso_arcs hom) (arcs G)", "by (auto simp: digraph_isomorphism_def)"], ["", "lemma digraph_isomorphism_inj_on_verts:\n  \"digraph_isomorphism hom \\<Longrightarrow> inj_on (iso_verts hom) (verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_isomorphism hom \\<Longrightarrow>\n    inj_on (iso_verts hom) (verts G)", "by (auto simp: digraph_isomorphism_def)"], ["", "end"], ["", "lemma (in wf_digraph) wf_digraphI_app_iso[intro?]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"wf_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "proof unfold_locales"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n 2. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       head (app_iso hom G) e \\<in> verts (app_iso hom G)", "fix e"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n 2. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       head (app_iso hom G) e \\<in> verts (app_iso hom G)", "assume \"e \\<in> arcs (app_iso hom G)\""], ["proof (state)\nthis:\n  e \\<in> arcs (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n 2. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       head (app_iso hom G) e \\<in> verts (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  e \\<in> arcs (app_iso hom G)", "obtain e' where e': \"e' \\<in> arcs G\" \"iso_arcs hom e' = e\""], ["proof (prove)\nusing this:\n  e \\<in> arcs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        \\<lbrakk>e' \\<in> arcs G; iso_arcs hom e' = e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e' \\<in> arcs G\n  iso_arcs hom e' = e\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n 2. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       head (app_iso hom G) e \\<in> verts (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  e' \\<in> arcs G\n  iso_arcs hom e' = e", "have \"iso_verts hom (head G e') \\<in> verts (app_iso hom G)\"\n      \"iso_verts hom (tail G e') \\<in> verts (app_iso hom G)\""], ["proof (prove)\nusing this:\n  e' \\<in> arcs G\n  iso_arcs hom e' = e\n\ngoal (1 subgoal):\n 1. iso_verts hom (head G e') \\<in> verts (app_iso hom G) &&&\n    iso_verts hom (tail G e') \\<in> verts (app_iso hom G)", "by auto"], ["proof (state)\nthis:\n  iso_verts hom (head G e') \\<in> verts (app_iso hom G)\n  iso_verts hom (tail G e') \\<in> verts (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n 2. \\<And>e.\n       e \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       head (app_iso hom G) e \\<in> verts (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  iso_verts hom (head G e') \\<in> verts (app_iso hom G)\n  iso_verts hom (tail G e') \\<in> verts (app_iso hom G)", "show \"tail (app_iso hom G) e \\<in> verts (app_iso hom G)\"\n      \"head (app_iso hom G) e \\<in> verts (app_iso hom G)\""], ["proof (prove)\nusing this:\n  iso_verts hom (head G e') \\<in> verts (app_iso hom G)\n  iso_verts hom (tail G e') \\<in> verts (app_iso hom G)\n\ngoal (1 subgoal):\n 1. tail (app_iso hom G) e \\<in> verts (app_iso hom G) &&&\n    head (app_iso hom G) e \\<in> verts (app_iso hom G)", "using e' assms"], ["proof (prove)\nusing this:\n  iso_verts hom (head G e') \\<in> verts (app_iso hom G)\n  iso_verts hom (tail G e') \\<in> verts (app_iso hom G)\n  e' \\<in> arcs G\n  iso_arcs hom e' = e\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. tail (app_iso hom G) e \\<in> verts (app_iso hom G) &&&\n    head (app_iso hom G) e \\<in> verts (app_iso hom G)", "by (auto simp: iso_verts_tail iso_verts_head)"], ["proof (state)\nthis:\n  tail (app_iso hom G) e \\<in> verts (app_iso hom G)\n  head (app_iso hom G) e \\<in> verts (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in fin_digraph) fin_digraphI_app_iso[intro?]:\n  assumes \"digraph_isomorphism hom\"\n  shows \"fin_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "by unfold_locales auto"], ["proof (state)\nthis:\n  fin_digraph (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "context wf_digraph begin"], ["", "lemma digraph_isomorphism_invI:\n  assumes \"digraph_isomorphism hom\" shows \"pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "proof (unfold pre_digraph.digraph_isomorphism_def, safe)"], ["proof (state)\ngoal (5 subgoals):\n 1. wf_digraph (app_iso hom G)\n 2. inj_on (iso_verts (inv_iso hom)) (verts (app_iso hom G))\n 3. inj_on (iso_arcs (inv_iso hom)) (arcs (app_iso hom G))\n 4. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 5. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "show \"inj_on (iso_verts (inv_iso hom)) (verts (app_iso hom G))\"\n      \"inj_on (iso_arcs (inv_iso hom)) (arcs (app_iso hom G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (iso_verts (inv_iso hom)) (verts (app_iso hom G)) &&&\n    inj_on (iso_arcs (inv_iso hom)) (arcs (app_iso hom G))", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. inj_on (iso_verts (inv_iso hom)) (verts (app_iso hom G)) &&&\n    inj_on (iso_arcs (inv_iso hom)) (arcs (app_iso hom G))", "unfolding pre_digraph.digraph_isomorphism_def inv_iso_def"], ["proof (prove)\nusing this:\n  wf_digraph G \\<and>\n  inj_on (iso_verts hom) (verts G) \\<and>\n  inj_on (iso_arcs hom) (arcs G) \\<and>\n  (\\<forall>a\\<in>arcs G.\n      iso_verts hom (tail G a) = iso_tail hom (iso_arcs hom a) \\<and>\n      iso_verts hom (head G a) = iso_head hom (iso_arcs hom a))\n\ngoal (1 subgoal):\n 1. inj_on\n     (iso_verts\n       \\<lparr>iso_verts = the_inv_into (verts G) (iso_verts hom),\n          iso_arcs = the_inv_into (arcs G) (iso_arcs hom),\n          iso_head = head G, iso_tail = tail G\\<rparr>)\n     (verts (app_iso hom G)) &&&\n    inj_on\n     (iso_arcs\n       \\<lparr>iso_verts = the_inv_into (verts G) (iso_verts hom),\n          iso_arcs = the_inv_into (arcs G) (iso_arcs hom),\n          iso_head = head G, iso_tail = tail G\\<rparr>)\n     (arcs (app_iso hom G))", "by (auto intro: inj_on_the_inv_into)"], ["proof (state)\nthis:\n  inj_on (iso_verts (inv_iso hom)) (verts (app_iso hom G))\n  inj_on (iso_arcs (inv_iso hom)) (arcs (app_iso hom G))\n\ngoal (3 subgoals):\n 1. wf_digraph (app_iso hom G)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. wf_digraph (app_iso hom G)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "show \"wf_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\nthis:\n  wf_digraph (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "assume \"a \\<in> arcs (app_iso hom G)\""], ["proof (state)\nthis:\n  a \\<in> arcs (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs (app_iso hom G)", "obtain b where B: \"a = iso_arcs hom b\" \"b \\<in> arcs G\""], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>a = iso_arcs hom b; b \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = iso_arcs hom b\n  b \\<in> arcs G\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "with assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  a = iso_arcs hom b\n  b \\<in> arcs G", "have [simp]:\n      \"iso_tail hom (iso_arcs hom b) = iso_verts hom (tail G b)\"\n      \"iso_head hom (iso_arcs hom b) = iso_verts hom (head G b)\"\n      \"inj_on (iso_arcs hom) (arcs G)\"\n      \"inj_on (iso_verts hom) (verts G)\""], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  a = iso_arcs hom b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (iso_tail hom (iso_arcs hom b) = iso_verts hom (tail G b) &&&\n     iso_head hom (iso_arcs hom b) = iso_verts hom (head G b)) &&&\n    inj_on (iso_arcs hom) (arcs G) &&& inj_on (iso_verts hom) (verts G)", "by (auto simp: digraph_isomorphism_def)"], ["proof (state)\nthis:\n  iso_tail hom (iso_arcs hom b) = iso_verts hom (tail G b)\n  iso_head hom (iso_arcs hom b) = iso_verts hom (head G b)\n  inj_on (iso_arcs hom) (arcs G)\n  inj_on (iso_verts hom) (verts G)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n       iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "from B"], ["proof (chain)\npicking this:\n  a = iso_arcs hom b\n  b \\<in> arcs G", "show \"iso_verts (inv_iso hom) (tail (app_iso hom G) a)\n      = iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\""], ["proof (prove)\nusing this:\n  a = iso_arcs hom b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n    iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)", "by (auto simp: inv_iso_def the_inv_into_f_f)"], ["proof (state)\nthis:\n  iso_verts (inv_iso hom) (tail (app_iso hom G) a) =\n  iso_tail (inv_iso hom) (iso_arcs (inv_iso hom) a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n       iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "from B"], ["proof (chain)\npicking this:\n  a = iso_arcs hom b\n  b \\<in> arcs G", "show \"iso_verts (inv_iso hom) (head (app_iso hom G) a)\n      = iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)\""], ["proof (prove)\nusing this:\n  a = iso_arcs hom b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n    iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)", "by (auto simp: inv_iso_def the_inv_into_f_f)"], ["proof (state)\nthis:\n  iso_verts (inv_iso hom) (head (app_iso hom G) a) =\n  iso_head (inv_iso hom) (iso_arcs (inv_iso hom) a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_app_isoI:\n  assumes \"awalk u p v\" and hom: \"digraph_isomorphism hom\"\n  shows \"pre_digraph.awalk (app_iso hom G) (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (app_iso hom G) (iso_verts hom u)\n     (map (iso_arcs hom) p) (iso_verts hom v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (app_iso hom G) (iso_verts hom u)\n     (map (iso_arcs hom) p) (iso_verts hom v)", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)", "from assms"], ["proof (chain)\npicking this:\n  awalk u p v\n  digraph_isomorphism hom", "show ?thesis"], ["proof (prove)\nusing this:\n  awalk u p v\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)", "by (induct p arbitrary: u)\n       (auto simp: awalk_simps H.awalk_simps iso_verts_head iso_verts_tail)"], ["proof (state)\nthis:\n  H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_app_isoD:\n  assumes w: \"pre_digraph.awalk (app_iso hom G) u p v\" and hom: \"digraph_isomorphism hom\"\n  shows \"awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p) (iso_verts (inv_iso hom) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "from assms"], ["proof (chain)\npicking this:\n  H.awalk u p v\n  digraph_isomorphism hom", "show ?thesis"], ["proof (prove)\nusing this:\n  H.awalk u p v\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "by (induct p arbitrary: u)\n       (force simp: awalk_simps H.awalk_simps iso_verts_head iso_verts_tail)+"], ["proof (state)\nthis:\n  awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n   (iso_verts (inv_iso hom) v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_verts_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"awalk u p v\"\n  shows \"pre_digraph.awalk_verts (app_iso hom G) (iso_verts hom u) (map (iso_arcs hom) p)\n    = map (iso_verts hom) (awalk_verts u p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (app_iso hom G) (iso_verts hom u)\n     (map (iso_arcs hom) p) =\n    map (iso_verts hom) (awalk_verts u p)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  awalk u p v\n\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (app_iso hom G) (iso_verts hom u)\n     (map (iso_arcs hom) p) =\n    map (iso_verts hom) (awalk_verts u p)", "by (induct p arbitrary: u)\n     (auto simp: pre_digraph.awalk_verts.simps iso_verts_head iso_verts_tail awalk_Cons_iff)"], ["", "(*\nlemma awalk_verts_app_iso_eq':\n  assumes hom: \"digraph_isomorphism hom\" and w: \"pre_digraph.awalk (app_iso hom G) u p v\"\n  shows \"pre_digraph.awalk_verts (app_iso hom G) u p\n    = map (iso_verts hom) (awalk_verts (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p))\"\nproof -\n  interpret H: wf_digraph \"app_iso hom G\" using hom ..\n  have w': \"awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p) (iso_verts (inv_iso hom) v)\"\n    using w hom by (rule awalk_app_isoD)\n  have \"pre_digraph.awalk_verts (app_iso hom G) u p =\n      pre_digraph.awalk_verts (app_iso hom G) (iso_verts hom (iso_verts (inv_iso hom) u)) (map (iso_arcs hom) (map (iso_arcs (inv_iso hom)) p))\"\n    using hom w by (auto simp add: o_def subsetD cong: map_cong)\n  also have \"\\<dots> = map (iso_verts hom) (awalk_verts (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p))\"\n    using hom w' by (rule awalk_verts_app_iso_eq)\n  finally show ?thesis .\nqed\n*)"], ["", "lemma arcs_ends_app_iso_eq:\n  assumes \"digraph_isomorphism hom\"\n  shows \"arcs_ends (app_iso hom G) = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends (app_iso hom G) =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. arcs_ends (app_iso hom G) =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G", "by (auto simp: arcs_ends_conv image_image iso_verts_head iso_verts_tail\n      intro!: rev_image_eqI)"], ["", "lemma in_arcs_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"in_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` in_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` in_arcs G u", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. in_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` in_arcs G u", "unfolding in_arcs_def"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. {e \\<in> arcs (app_iso hom G).\n     head (app_iso hom G) e = iso_verts hom u} =\n    iso_arcs hom ` {e \\<in> arcs G. head G e = u}", "by (auto simp: iso_verts_head)"], ["", "lemma out_arcs_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"out_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` out_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` out_arcs G u", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) (iso_verts hom u) = iso_arcs hom ` out_arcs G u", "unfolding out_arcs_def"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. {e \\<in> arcs (app_iso hom G).\n     tail (app_iso hom G) e = iso_verts hom u} =\n    iso_arcs hom ` {e \\<in> arcs G. tail G e = u}", "by (auto simp: iso_verts_tail)"], ["", "lemma in_degree_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"in_degree (app_iso hom G) (iso_verts hom u) = in_degree G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (app_iso hom G) (iso_verts hom u) = in_degree G u", "unfolding in_degree_def in_arcs_app_iso_eq[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (iso_arcs hom ` in_arcs G u) = card (in_arcs G u)", "proof (rule card_image)"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (in_arcs G u)", "from assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  u \\<in> verts G", "show \"inj_on (iso_arcs hom) (in_arcs G u)\""], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (in_arcs G u)", "unfolding digraph_isomorphism_def"], ["proof (prove)\nusing this:\n  wf_digraph G \\<and>\n  inj_on (iso_verts hom) (verts G) \\<and>\n  inj_on (iso_arcs hom) (arcs G) \\<and>\n  (\\<forall>a\\<in>arcs G.\n      iso_verts hom (tail G a) = iso_tail hom (iso_arcs hom a) \\<and>\n      iso_verts hom (head G a) = iso_head hom (iso_arcs hom a))\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (in_arcs G u)", "by - (rule subset_inj_on, auto)"], ["proof (state)\nthis:\n  inj_on (iso_arcs hom) (in_arcs G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma out_degree_app_iso_eq:\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts G\"\n  shows \"out_degree (app_iso hom G) (iso_verts hom u) = out_degree G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree (app_iso hom G) (iso_verts hom u) = out_degree G u", "unfolding out_degree_def out_arcs_app_iso_eq[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (iso_arcs hom ` out_arcs G u) = card (out_arcs G u)", "proof (rule card_image)"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (out_arcs G u)", "from assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  u \\<in> verts G", "show \"inj_on (iso_arcs hom) (out_arcs G u)\""], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (out_arcs G u)", "unfolding digraph_isomorphism_def"], ["proof (prove)\nusing this:\n  wf_digraph G \\<and>\n  inj_on (iso_verts hom) (verts G) \\<and>\n  inj_on (iso_arcs hom) (arcs G) \\<and>\n  (\\<forall>a\\<in>arcs G.\n      iso_verts hom (tail G a) = iso_tail hom (iso_arcs hom a) \\<and>\n      iso_verts hom (head G a) = iso_head hom (iso_arcs hom a))\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. inj_on (iso_arcs hom) (out_arcs G u)", "by - (rule subset_inj_on, auto)"], ["proof (state)\nthis:\n  inj_on (iso_arcs hom) (out_arcs G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_arcs_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"in_arcs (app_iso hom G) u = iso_arcs hom ` in_arcs G (iso_verts (inv_iso hom) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (app_iso hom G) u =\n    iso_arcs hom ` in_arcs G (iso_verts (inv_iso hom) u)", "using assms in_arcs_app_iso_eq[of hom \"iso_verts (inv_iso hom) u\"]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts (app_iso hom G)\n  \\<lbrakk>digraph_isomorphism hom;\n   iso_verts (inv_iso hom) u \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> in_arcs (app_iso hom G)\n                     (iso_verts hom (iso_verts (inv_iso hom) u)) =\n                    iso_arcs hom ` in_arcs G (iso_verts (inv_iso hom) u)\n\ngoal (1 subgoal):\n 1. in_arcs (app_iso hom G) u =\n    iso_arcs hom ` in_arcs G (iso_verts (inv_iso hom) u)", "by auto"], ["", "lemma out_arcs_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"out_arcs (app_iso hom G) u = iso_arcs hom ` out_arcs G (iso_verts (inv_iso hom) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) u =\n    iso_arcs hom ` out_arcs G (iso_verts (inv_iso hom) u)", "using assms out_arcs_app_iso_eq[of hom \"iso_verts (inv_iso hom) u\"]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts (app_iso hom G)\n  \\<lbrakk>digraph_isomorphism hom;\n   iso_verts (inv_iso hom) u \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> out_arcs (app_iso hom G)\n                     (iso_verts hom (iso_verts (inv_iso hom) u)) =\n                    iso_arcs hom ` out_arcs G (iso_verts (inv_iso hom) u)\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) u =\n    iso_arcs hom ` out_arcs G (iso_verts (inv_iso hom) u)", "by auto"], ["", "lemma in_degree_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"in_degree (app_iso hom G) u = in_degree G (iso_verts (inv_iso hom) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (app_iso hom G) u = in_degree G (iso_verts (inv_iso hom) u)", "using assms in_degree_app_iso_eq[of hom \"iso_verts (inv_iso hom) u\"]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts (app_iso hom G)\n  \\<lbrakk>digraph_isomorphism hom;\n   iso_verts (inv_iso hom) u \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> in_degree (app_iso hom G)\n                     (iso_verts hom (iso_verts (inv_iso hom) u)) =\n                    in_degree G (iso_verts (inv_iso hom) u)\n\ngoal (1 subgoal):\n 1. in_degree (app_iso hom G) u = in_degree G (iso_verts (inv_iso hom) u)", "by auto"], ["", "lemma out_degree_app_iso_eq':\n  assumes \"digraph_isomorphism hom\" and \"u \\<in> verts (app_iso hom G)\"\n  shows \"out_degree (app_iso hom G) u = out_degree G (iso_verts (inv_iso hom) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree (app_iso hom G) u = out_degree G (iso_verts (inv_iso hom) u)", "using assms out_degree_app_iso_eq[of hom \"iso_verts (inv_iso hom) u\"]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> verts (app_iso hom G)\n  \\<lbrakk>digraph_isomorphism hom;\n   iso_verts (inv_iso hom) u \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> out_degree (app_iso hom G)\n                     (iso_verts hom (iso_verts (inv_iso hom) u)) =\n                    out_degree G (iso_verts (inv_iso hom) u)\n\ngoal (1 subgoal):\n 1. out_degree (app_iso hom G) u = out_degree G (iso_verts (inv_iso hom) u)", "by auto"], ["", "lemmas app_iso_eq =\n  awalk_verts_app_iso_eq\n  arcs_ends_app_iso_eq\n  in_arcs_app_iso_eq'\n  out_arcs_app_iso_eq'\n  in_degree_app_iso_eq'\n  out_degree_app_iso_eq'"], ["", "lemma reachableI_app_iso:\n  assumes r: \"u \\<rightarrow>\\<^sup>* v\" and hom: \"digraph_isomorphism hom\"\n  shows \"(iso_verts hom u) \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> (iso_verts hom v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "from r"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v", "obtain p where \"awalk u p v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. (\\<And>p. awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: reachable_awalk)"], ["proof (state)\nthis:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "then"], ["proof (chain)\npicking this:\n  awalk u p v", "have \"H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\""], ["proof (prove)\nusing this:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)", "using hom"], ["proof (prove)\nusing this:\n  awalk u p v\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)", "by (rule awalk_app_isoI)"], ["proof (state)\nthis:\n  H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\n\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "then"], ["proof (chain)\npicking this:\n  H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)", "show ?thesis"], ["proof (prove)\nusing this:\n  H.awalk (iso_verts hom u) (map (iso_arcs hom) p) (iso_verts hom v)\n\ngoal (1 subgoal):\n 1. iso_verts hom\n     u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v", "by (auto simp: H.reachable_awalk)"], ["proof (state)\nthis:\n  iso_verts hom\n   u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> iso_verts hom v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_app_iso_eq:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"u \\<in> iso_verts hom ` verts G\" \"v \\<in> iso_verts hom ` verts G\" \"set p \\<subseteq> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph.awalk (app_iso hom G) u p v\n    \\<longleftrightarrow> awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p) (iso_verts (inv_iso hom) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (app_iso hom G) u p v =\n    awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (app_iso hom G) u p v =\n    awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. H.awalk u p v =\n    awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "from assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  u \\<in> iso_verts hom ` verts G\n  v \\<in> iso_verts hom ` verts G\n  set p \\<subseteq> iso_arcs hom ` arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  u \\<in> iso_verts hom ` verts G\n  v \\<in> iso_verts hom ` verts G\n  set p \\<subseteq> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. H.awalk u p v =\n    awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n     (iso_verts (inv_iso hom) v)", "by (induct p arbitrary: u)\n       (auto simp: awalk_simps H.awalk_simps iso_verts_head iso_verts_tail)"], ["proof (state)\nthis:\n  H.awalk u p v =\n  awalk (iso_verts (inv_iso hom) u) (map (iso_arcs (inv_iso hom)) p)\n   (iso_verts (inv_iso hom) v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_app_iso_eq:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"u \\<in> iso_verts hom ` verts G\" \"v \\<in> iso_verts hom ` verts G\"\n  shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<longleftrightarrow> iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v) =\n    (iso_verts (inv_iso hom)\n      u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v) =\n    (iso_verts (inv_iso hom)\n      u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v)", "interpret H: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v) =\n    (iso_verts (inv_iso hom)\n      u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v) =\n    (iso_verts (inv_iso hom)\n      u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<Longrightarrow>\n    iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n 2. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "assume ?L"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<Longrightarrow>\n    iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n 2. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "obtain p where \"H.awalk u p v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>p. H.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: H.reachable_awalk)"], ["proof (state)\nthis:\n  H.awalk u p v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<Longrightarrow>\n    iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n 2. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "moreover"], ["proof (state)\nthis:\n  H.awalk u p v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<Longrightarrow>\n    iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n 2. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  H.awalk u p v", "have \"set p \\<subseteq> iso_arcs hom ` arcs G\""], ["proof (prove)\nusing this:\n  H.awalk u p v\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> iso_arcs hom ` arcs G", "by (simp add: H.awalk_def)"], ["proof (state)\nthis:\n  set p \\<subseteq> iso_arcs hom ` arcs G\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v \\<Longrightarrow>\n    iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n 2. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "ultimately"], ["proof (chain)\npicking this:\n  H.awalk u p v\n  set p \\<subseteq> iso_arcs hom ` arcs G", "show ?R"], ["proof (prove)\nusing this:\n  H.awalk u p v\n  set p \\<subseteq> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v", "using assms"], ["proof (prove)\nusing this:\n  H.awalk u p v\n  set p \\<subseteq> iso_arcs hom ` arcs G\n  digraph_isomorphism hom\n  u \\<in> iso_verts hom ` verts G\n  v \\<in> iso_verts hom ` verts G\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v", "by (auto simp: awalk_app_iso_eq reachable_awalk)"], ["proof (state)\nthis:\n  iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "assume ?R"], ["proof (state)\nthis:\n  iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v", "obtain p0 where \"awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\""], ["proof (prove)\nusing this:\n  iso_verts (inv_iso hom) u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v\n\ngoal (1 subgoal):\n 1. (\\<And>p0.\n        awalk (iso_verts (inv_iso hom) u) p0\n         (iso_verts (inv_iso hom) v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: reachable_awalk)"], ["proof (state)\nthis:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "moreover"], ["proof (state)\nthis:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)", "have \"set p0 \\<subseteq> arcs G\""], ["proof (prove)\nusing this:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n\ngoal (1 subgoal):\n 1. set p0 \\<subseteq> arcs G", "by (simp add: awalk_def)"], ["proof (state)\nthis:\n  set p0 \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "define p where \"p = map (iso_arcs hom) p0\""], ["proof (state)\nthis:\n  p = map (iso_arcs hom) p0\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "have \"set p \\<subseteq> iso_arcs hom ` arcs G\" \"p0 = map (iso_arcs (inv_iso hom)) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p \\<subseteq> iso_arcs hom ` arcs G &&&\n    p0 = map (iso_arcs (inv_iso hom)) p", "using \\<open>set p0 \\<subseteq> _\\<close> hom"], ["proof (prove)\nusing this:\n  set p0 \\<subseteq> arcs G\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> iso_arcs hom ` arcs G &&&\n    p0 = map (iso_arcs (inv_iso hom)) p", "by (auto simp: p_def map_idI subsetD)"], ["proof (state)\nthis:\n  set p \\<subseteq> iso_arcs hom ` arcs G\n  p0 = map (iso_arcs (inv_iso hom)) p\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom)\n     u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "ultimately"], ["proof (chain)\npicking this:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n  set p \\<subseteq> iso_arcs hom ` arcs G\n  p0 = map (iso_arcs (inv_iso hom)) p", "show ?L"], ["proof (prove)\nusing this:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n  set p \\<subseteq> iso_arcs hom ` arcs G\n  p0 = map (iso_arcs (inv_iso hom)) p\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  awalk (iso_verts (inv_iso hom) u) p0 (iso_verts (inv_iso hom) v)\n  set p \\<subseteq> iso_arcs hom ` arcs G\n  p0 = map (iso_arcs (inv_iso hom)) p\n  digraph_isomorphism hom\n  u \\<in> iso_verts hom ` verts G\n  v \\<in> iso_verts hom ` verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v", "by (auto simp: awalk_app_iso_eq[symmetric] H.reachable_awalk)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u \\<rightarrow>\\<^sup>*\\<^bsub>app_iso hom G\\<^esub> v) =\n  (iso_verts (inv_iso hom)\n    u \\<rightarrow>\\<^sup>* iso_verts (inv_iso hom) v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma connectedI_app_iso:\n  assumes c: \"connected G\" and hom: \"digraph_isomorphism hom\"\n  shows \"connected (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "have *: \"symcl (arcs_ends (app_iso hom G)) = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` symcl (arcs_ends G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (arcs_ends (app_iso hom G))\\<^sup>s =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    (arcs_ends G)\\<^sup>s", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. (arcs_ends (app_iso hom G))\\<^sup>s =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    (arcs_ends G)\\<^sup>s", "by (auto simp add: app_iso_eq symcl_def)"], ["proof (state)\nthis:\n  (arcs_ends (app_iso hom G))\\<^sup>s =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  (arcs_ends G)\\<^sup>s\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "{"], ["proof (state)\nthis:\n  (arcs_ends (app_iso hom G))\\<^sup>s =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  (arcs_ends G)\\<^sup>s\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "assume \"(u,v) \\<in> rtrancl_on (verts G) (symcl (arcs_ends G))\""], ["proof (state)\nthis:\n  (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)", "have \"(iso_verts hom u, iso_verts hom v) \\<in> rtrancl_on (verts (app_iso hom G)) (symcl (arcs_ends (app_iso hom G)))\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)\n\ngoal (1 subgoal):\n 1. (iso_verts hom u, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    (iso_verts hom v, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> (arcs_ends G)\\<^sup>s;\n        (y, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s);\n        x \\<in> verts G; y \\<in> verts G;\n        (iso_verts hom y, iso_verts hom v)\n        \\<in> rtrancl_on (verts (app_iso hom G))\n               ((arcs_ends (app_iso hom G))\\<^sup>s)\\<rbrakk>\n       \\<Longrightarrow> (iso_verts hom x, iso_verts hom v)\n                         \\<in> rtrancl_on (verts (app_iso hom G))\n                                ((arcs_ends (app_iso hom G))\\<^sup>s)", "case (step x y)"], ["proof (state)\nthis:\n  (x, y) \\<in> (arcs_ends G)\\<^sup>s\n  (y, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)\n  x \\<in> verts G\n  y \\<in> verts G\n  (iso_verts hom y, iso_verts hom v)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    (iso_verts hom v, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> (arcs_ends G)\\<^sup>s;\n        (y, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s);\n        x \\<in> verts G; y \\<in> verts G;\n        (iso_verts hom y, iso_verts hom v)\n        \\<in> rtrancl_on (verts (app_iso hom G))\n               ((arcs_ends (app_iso hom G))\\<^sup>s)\\<rbrakk>\n       \\<Longrightarrow> (iso_verts hom x, iso_verts hom v)\n                         \\<in> rtrancl_on (verts (app_iso hom G))\n                                ((arcs_ends (app_iso hom G))\\<^sup>s)", "have \"(iso_verts hom x, iso_verts hom y)\n          \\<in> rtrancl_on (verts (app_iso hom G)) (symcl (arcs_ends (app_iso hom G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (iso_verts hom x, iso_verts hom y)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)", "using step"], ["proof (prove)\nusing this:\n  (x, y) \\<in> (arcs_ends G)\\<^sup>s\n  (y, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)\n  x \\<in> verts G\n  y \\<in> verts G\n  (iso_verts hom y, iso_verts hom v)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. (iso_verts hom x, iso_verts hom y)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)", "by (rule_tac rtrancl_on_into_rtrancl_on[where b=\"iso_verts hom x\"]) (auto simp: *)"], ["proof (state)\nthis:\n  (iso_verts hom x, iso_verts hom y)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    (iso_verts hom v, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> (arcs_ends G)\\<^sup>s;\n        (y, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s);\n        x \\<in> verts G; y \\<in> verts G;\n        (iso_verts hom y, iso_verts hom v)\n        \\<in> rtrancl_on (verts (app_iso hom G))\n               ((arcs_ends (app_iso hom G))\\<^sup>s)\\<rbrakk>\n       \\<Longrightarrow> (iso_verts hom x, iso_verts hom v)\n                         \\<in> rtrancl_on (verts (app_iso hom G))\n                                ((arcs_ends (app_iso hom G))\\<^sup>s)", "then"], ["proof (chain)\npicking this:\n  (iso_verts hom x, iso_verts hom y)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)", "show ?case"], ["proof (prove)\nusing this:\n  (iso_verts hom x, iso_verts hom y)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. (iso_verts hom x, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)", "by (rule rtrancl_on_trans) (rule step)"], ["proof (state)\nthis:\n  (iso_verts hom x, iso_verts hom v)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. v \\<in> verts G \\<Longrightarrow>\n    (iso_verts hom v, iso_verts hom v)\n    \\<in> rtrancl_on (verts (app_iso hom G))\n           ((arcs_ends (app_iso hom G))\\<^sup>s)", "qed auto"], ["proof (state)\nthis:\n  (iso_verts hom u, iso_verts hom v)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "}"], ["proof (state)\nthis:\n  (?u4, ?v4)\n  \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s) \\<Longrightarrow>\n  (iso_verts hom ?u4, iso_verts hom ?v4)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "with c"], ["proof (chain)\npicking this:\n  Digraph_Component.connected G\n  (?u4, ?v4)\n  \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s) \\<Longrightarrow>\n  (iso_verts hom ?u4, iso_verts hom ?v4)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)", "show ?thesis"], ["proof (prove)\nusing this:\n  Digraph_Component.connected G\n  (?u4, ?v4)\n  \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s) \\<Longrightarrow>\n  (iso_verts hom ?u4, iso_verts hom ?v4)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected (app_iso hom G)", "unfolding connected_conv"], ["proof (prove)\nusing this:\n  verts G \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts G.\n      \\<forall>v\\<in>verts G.\n         (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s))\n  (?u4, ?v4)\n  \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s) \\<Longrightarrow>\n  (iso_verts hom ?u4, iso_verts hom ?v4)\n  \\<in> rtrancl_on (verts (app_iso hom G))\n         ((arcs_ends (app_iso hom G))\\<^sup>s)\n\ngoal (1 subgoal):\n 1. verts (app_iso hom G) \\<noteq> {} \\<and>\n    (\\<forall>u\\<in>verts (app_iso hom G).\n        \\<forall>v\\<in>verts (app_iso hom G).\n           (u, v)\n           \\<in> rtrancl_on (verts (app_iso hom G))\n                  ((arcs_ends (app_iso hom G))\\<^sup>s))", "by auto"], ["proof (state)\nthis:\n  Digraph_Component.connected (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma digraph_iso_swap:\n  assumes \"wf_digraph G\" \"digraph_iso G H\" shows \"digraph_iso H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso H G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso H G", "from assms"], ["proof (chain)\npicking this:\n  wf_digraph G\n  digraph_iso G H", "obtain f where \"pre_digraph.digraph_isomorphism G f\" \"H = app_iso f G\""], ["proof (prove)\nusing this:\n  wf_digraph G\n  digraph_iso G H\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>pre_digraph.digraph_isomorphism G f;\n         H = app_iso f G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding digraph_iso_def"], ["proof (prove)\nusing this:\n  wf_digraph G\n  \\<exists>f. pre_digraph.digraph_isomorphism G f \\<and> H = app_iso f G\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>pre_digraph.digraph_isomorphism G f;\n         H = app_iso f G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism G f\n  H = app_iso f G\n\ngoal (1 subgoal):\n 1. digraph_iso H G", "then"], ["proof (chain)\npicking this:\n  pre_digraph.digraph_isomorphism G f\n  H = app_iso f G", "have \"pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f)\" \"app_iso (pre_digraph.inv_iso G f) H = G\""], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G f\n  H = app_iso f G\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f) &&&\n    app_iso (pre_digraph.inv_iso G f) H = G", "using assms"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G f\n  H = app_iso f G\n  wf_digraph G\n  digraph_iso G H\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f) &&&\n    app_iso (pre_digraph.inv_iso G f) H = G", "by (simp_all add: wf_digraph.digraph_isomorphism_invI pre_digraph.app_iso_inv)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f)\n  app_iso (pre_digraph.inv_iso G f) H = G\n\ngoal (1 subgoal):\n 1. digraph_iso H G", "then"], ["proof (chain)\npicking this:\n  pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f)\n  app_iso (pre_digraph.inv_iso G f) H = G", "show ?thesis"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f)\n  app_iso (pre_digraph.inv_iso G f) H = G\n\ngoal (1 subgoal):\n 1. digraph_iso H G", "unfolding digraph_iso_def"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism H (pre_digraph.inv_iso G f)\n  app_iso (pre_digraph.inv_iso G f) H = G\n\ngoal (1 subgoal):\n 1. \\<exists>f. pre_digraph.digraph_isomorphism H f \\<and> G = app_iso f H", "by auto"], ["proof (state)\nthis:\n  digraph_iso H G\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  o_iso :: \"('c,'d,'e,'f) digraph_isomorphism \\<Rightarrow> ('a,'b,'c,'d) digraph_isomorphism \\<Rightarrow> ('a,'b,'e,'f) digraph_isomorphism\"\nwhere\n  \"o_iso hom2 hom1 = \\<lparr>\n    iso_verts = iso_verts hom2 o iso_verts hom1,\n    iso_arcs = iso_arcs hom2 o iso_arcs hom1,\n    iso_head = iso_head hom2,\n    iso_tail = iso_tail hom2\n    \\<rparr>\""], ["", "lemma digraph_iso_trans[trans]:\n  assumes \"digraph_iso G H\" \"digraph_iso H I\" shows \"digraph_iso G I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G I", "from assms"], ["proof (chain)\npicking this:\n  digraph_iso G H\n  digraph_iso H I", "obtain hom1 where \"pre_digraph.digraph_isomorphism G hom1\" \"H = app_iso hom1 G\""], ["proof (prove)\nusing this:\n  digraph_iso G H\n  digraph_iso H I\n\ngoal (1 subgoal):\n 1. (\\<And>hom1.\n        \\<lbrakk>pre_digraph.digraph_isomorphism G hom1;\n         H = app_iso hom1 G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism G hom1\n  H = app_iso hom1 G\n\ngoal (1 subgoal):\n 1. digraph_iso G I", "moreover"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism G hom1\n  H = app_iso hom1 G\n\ngoal (1 subgoal):\n 1. digraph_iso G I", "from assms"], ["proof (chain)\npicking this:\n  digraph_iso G H\n  digraph_iso H I", "obtain hom2 where \"pre_digraph.digraph_isomorphism H hom2\" \"I = app_iso hom2 H\""], ["proof (prove)\nusing this:\n  digraph_iso G H\n  digraph_iso H I\n\ngoal (1 subgoal):\n 1. (\\<And>hom2.\n        \\<lbrakk>pre_digraph.digraph_isomorphism H hom2;\n         I = app_iso hom2 H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism H hom2\n  I = app_iso hom2 H\n\ngoal (1 subgoal):\n 1. digraph_iso G I", "ultimately"], ["proof (chain)\npicking this:\n  pre_digraph.digraph_isomorphism G hom1\n  H = app_iso hom1 G\n  pre_digraph.digraph_isomorphism H hom2\n  I = app_iso hom2 H", "have \"pre_digraph.digraph_isomorphism G (o_iso hom2 hom1)\" \"I = app_iso (o_iso hom2 hom1) G\""], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G hom1\n  H = app_iso hom1 G\n  pre_digraph.digraph_isomorphism H hom2\n  I = app_iso hom2 H\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism G (o_iso hom2 hom1) &&&\n    I = app_iso (o_iso hom2 hom1) G", "apply (auto simp: o_iso_def app_iso_def pre_digraph.digraph_isomorphism_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_verts hom2 \\<circ> iso_verts hom1)\n                       (verts G)\n 2. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_arcs hom2 \\<circ> iso_arcs hom1) (arcs G)", "apply (rule comp_inj_on)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_verts hom1) (verts G)\n 2. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_verts hom2) (iso_verts hom1 ` verts G)\n 3. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_arcs hom2 \\<circ> iso_arcs hom1) (arcs G)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_arcs hom2 \\<circ> iso_arcs hom1) (arcs G)", "apply (rule comp_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_arcs hom1) (arcs G)\n 2. \\<lbrakk>H =\n             \\<lparr>verts = iso_verts hom1 ` verts G,\n                arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n                head = iso_head hom1\\<rparr>;\n     I =\n     \\<lparr>verts = iso_verts hom2 ` iso_verts hom1 ` verts G,\n        arcs = iso_arcs hom2 ` iso_arcs hom1 ` arcs G, tail = iso_tail hom2,\n        head = iso_head hom2\\<rparr>;\n     wf_digraph G;\n     wf_digraph\n      \\<lparr>verts = iso_verts hom1 ` verts G,\n         arcs = iso_arcs hom1 ` arcs G, tail = iso_tail hom1,\n         head = iso_head hom1\\<rparr>;\n     inj_on (iso_verts hom1) (verts G);\n     inj_on (iso_verts hom2) (iso_verts hom1 ` verts G);\n     inj_on (iso_arcs hom1) (arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom1 (tail G a) = iso_tail hom1 (iso_arcs hom1 a) \\<and>\n        iso_verts hom1 (head G a) = iso_head hom1 (iso_arcs hom1 a);\n     inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G);\n     \\<forall>a\\<in>arcs G.\n        iso_verts hom2 (iso_tail hom1 (iso_arcs hom1 a)) =\n        iso_tail hom2 (iso_arcs hom2 (iso_arcs hom1 a)) \\<and>\n        iso_verts hom2 (iso_head hom1 (iso_arcs hom1 a)) =\n        iso_head hom2 (iso_arcs hom2 (iso_arcs hom1 a))\\<rbrakk>\n    \\<Longrightarrow> inj_on (iso_arcs hom2) (iso_arcs hom1 ` arcs G)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism G (o_iso hom2 hom1)\n  I = app_iso (o_iso hom2 hom1) G\n\ngoal (1 subgoal):\n 1. digraph_iso G I", "then"], ["proof (chain)\npicking this:\n  pre_digraph.digraph_isomorphism G (o_iso hom2 hom1)\n  I = app_iso (o_iso hom2 hom1) G", "show ?thesis"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G (o_iso hom2 hom1)\n  I = app_iso (o_iso hom2 hom1) G\n\ngoal (1 subgoal):\n 1. digraph_iso G I", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  digraph_iso G I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) digraph_isomorphism_subgraphI:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H G\"\n  shows \"pre_digraph.digraph_isomorphism H hom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H hom", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H hom", "by (auto simp: pre_digraph.digraph_isomorphism_def subgraph_def compatible_def intro: subset_inj_on)"], ["", "(* XXX move *)"], ["", "lemma (in wf_digraph) verts_app_inv_iso_subgraph:\n  assumes hom: \"digraph_isomorphism hom\" and \"V \\<subseteq> verts G\"\n  shows \"iso_verts (inv_iso hom) ` iso_verts hom ` V = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) ` iso_verts hom ` V = V", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) ` iso_verts hom ` V = V", "have \"\\<And>x. x \\<in> V \\<Longrightarrow> iso_verts (inv_iso hom) (iso_verts hom x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> V \\<Longrightarrow>\n       iso_verts (inv_iso hom) (iso_verts hom x) = x", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  V \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> V \\<Longrightarrow>\n       iso_verts (inv_iso hom) (iso_verts hom x) = x", "by auto"], ["proof (state)\nthis:\n  ?x2 \\<in> V \\<Longrightarrow>\n  iso_verts (inv_iso hom) (iso_verts hom ?x2) = ?x2\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) ` iso_verts hom ` V = V", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> V \\<Longrightarrow>\n  iso_verts (inv_iso hom) (iso_verts hom ?x2) = ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> V \\<Longrightarrow>\n  iso_verts (inv_iso hom) (iso_verts hom ?x2) = ?x2\n\ngoal (1 subgoal):\n 1. iso_verts (inv_iso hom) ` iso_verts hom ` V = V", "by (auto simp: image_image cong: image_cong)"], ["proof (state)\nthis:\n  iso_verts (inv_iso hom) ` iso_verts hom ` V = V\n\ngoal:\nNo subgoals!", "qed"], ["", "(* XXX move *)"], ["", "lemma (in wf_digraph) arcs_app_inv_iso_subgraph:\n  assumes hom: \"digraph_isomorphism hom\" and \"A \\<subseteq> arcs G\"\n  shows \"iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A", "have \"\\<And>x. x \\<in> A \\<Longrightarrow> iso_arcs (inv_iso hom) (iso_arcs hom x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       iso_arcs (inv_iso hom) (iso_arcs hom x) = x", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  A \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       iso_arcs (inv_iso hom) (iso_arcs hom x) = x", "by auto"], ["proof (state)\nthis:\n  ?x2 \\<in> A \\<Longrightarrow>\n  iso_arcs (inv_iso hom) (iso_arcs hom ?x2) = ?x2\n\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> A \\<Longrightarrow>\n  iso_arcs (inv_iso hom) (iso_arcs hom ?x2) = ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> A \\<Longrightarrow>\n  iso_arcs (inv_iso hom) (iso_arcs hom ?x2) = ?x2\n\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A", "by (auto simp: image_image cong: image_cong)"], ["proof (state)\nthis:\n  iso_arcs (inv_iso hom) ` iso_arcs hom ` A = A\n\ngoal:\nNo subgoals!", "qed"], ["", "(* XXX move *)"], ["", "lemma (in pre_digraph) app_iso_inv_subgraph[simp]:\n  assumes \"digraph_isomorphism hom\" \"subgraph H G\"\n  shows \"app_iso (inv_iso hom) (app_iso hom H) = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H) = H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H) = H", "from assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  subgraph H G", "interpret wf_digraph G"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H) = H", "have \"\\<And>u. u \\<in> verts H \\<Longrightarrow> u \\<in> verts G\" \"\\<And>a. a \\<in> arcs H \\<Longrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> verts H \\<Longrightarrow> u \\<in> verts G) &&&\n    (\\<And>a. a \\<in> arcs H \\<Longrightarrow> a \\<in> arcs G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> verts H \\<Longrightarrow> u \\<in> verts G) &&&\n    (\\<And>a. a \\<in> arcs H \\<Longrightarrow> a \\<in> arcs G)", "by auto"], ["proof (state)\nthis:\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H) = H", "with assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  subgraph H G\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H) = H", "by (intro pre_digraph.equality) (auto simp: verts_app_inv_iso_subgraph\n      arcs_app_inv_iso_subgraph compatible_def)"], ["proof (state)\nthis:\n  app_iso (inv_iso hom) (app_iso hom H) = H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) app_iso_iso_inv_subgraph[simp]:\n  assumes \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H (app_iso hom G)\"\n  shows \"app_iso hom (app_iso (inv_iso hom) H) = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app_iso hom (app_iso (inv_iso hom) H) = H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. app_iso hom (app_iso (inv_iso hom) H) = H", "have \"\\<And>u. u \\<in> verts H \\<Longrightarrow> u \\<in> iso_verts hom ` verts G\" \"\\<And>a. a \\<in> arcs H \\<Longrightarrow> a \\<in> iso_arcs hom ` arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u \\<in> verts H \\<Longrightarrow>\n        u \\<in> iso_verts hom ` verts G) &&&\n    (\\<And>a.\n        a \\<in> arcs H \\<Longrightarrow> a \\<in> iso_arcs hom ` arcs G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u \\<in> verts H \\<Longrightarrow>\n        u \\<in> iso_verts hom ` verts G) &&&\n    (\\<And>a.\n        a \\<in> arcs H \\<Longrightarrow> a \\<in> iso_arcs hom ` arcs G)", "by (auto simp: subgraph_def)"], ["proof (state)\nthis:\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> iso_verts hom ` verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. app_iso hom (app_iso (inv_iso hom) H) = H", "with assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> iso_verts hom ` verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> iso_arcs hom ` arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n  ?u2 \\<in> verts H \\<Longrightarrow> ?u2 \\<in> iso_verts hom ` verts G\n  ?a2 \\<in> arcs H \\<Longrightarrow> ?a2 \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. app_iso hom (app_iso (inv_iso hom) H) = H", "by (intro pre_digraph.equality) (auto simp: compatible_def image_image cong: image_cong)"], ["proof (state)\nthis:\n  app_iso hom (app_iso (inv_iso hom) H) = H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) subgraph_app_isoI':\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H H'\" \"subgraph H' G\"\n  shows \"subgraph (app_iso hom H) (app_iso hom H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "have \"subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H G", "using subg"], ["proof (prove)\nusing this:\n  subgraph H H'\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. subgraph H G", "by (rule subgraph_trans)"], ["proof (state)\nthis:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "then"], ["proof (chain)\npicking this:\n  subgraph H G", "have \"pre_digraph.digraph_isomorphism H hom\" \"pre_digraph.digraph_isomorphism H' hom\""], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H hom &&&\n    pre_digraph.digraph_isomorphism H' hom", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n  digraph_isomorphism hom\n  subgraph H H'\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism H hom &&&\n    pre_digraph.digraph_isomorphism H' hom", "by (auto intro: digraph_isomorphism_subgraphI)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism H hom\n  pre_digraph.digraph_isomorphism H' hom\n\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "then"], ["proof (chain)\npicking this:\n  pre_digraph.digraph_isomorphism H hom\n  pre_digraph.digraph_isomorphism H' hom", "show ?thesis"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism H hom\n  pre_digraph.digraph_isomorphism H' hom\n\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "using assms"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism H hom\n  pre_digraph.digraph_isomorphism H' hom\n  digraph_isomorphism hom\n  subgraph H H'\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom H')", "by (auto simp: subgraph_def wf_digraph.wf_digraphI_app_iso compatible_def\n      intro: digraph_isomorphism_subgraphI)"], ["proof (state)\nthis:\n  subgraph (app_iso hom H) (app_iso hom H')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) subgraph_app_isoI:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H G\"\n  shows \"subgraph (app_iso hom H) (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph (app_iso hom H) (app_iso hom G)", "by (auto intro: subgraph_app_isoI' wf_digraph.subgraph_refl)"], ["", "lemma (in pre_digraph) app_iso_eq_conv:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"subgraph H1 G\" \"subgraph H2 G\"\n  shows \"app_iso hom H1 = app_iso hom H2 \\<longleftrightarrow> H1 = H2\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (app_iso hom H1 = app_iso hom H2) = (H1 = H2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. app_iso hom H1 = app_iso hom H2 \\<Longrightarrow> H1 = H2\n 2. H1 = H2 \\<Longrightarrow> app_iso hom H1 = app_iso hom H2", "assume ?L"], ["proof (state)\nthis:\n  app_iso hom H1 = app_iso hom H2\n\ngoal (2 subgoals):\n 1. app_iso hom H1 = app_iso hom H2 \\<Longrightarrow> H1 = H2\n 2. H1 = H2 \\<Longrightarrow> app_iso hom H1 = app_iso hom H2", "then"], ["proof (chain)\npicking this:\n  app_iso hom H1 = app_iso hom H2", "have \"app_iso (inv_iso hom) (app_iso hom H1) = app_iso (inv_iso hom) (app_iso hom H2)\""], ["proof (prove)\nusing this:\n  app_iso hom H1 = app_iso hom H2\n\ngoal (1 subgoal):\n 1. app_iso (inv_iso hom) (app_iso hom H1) =\n    app_iso (inv_iso hom) (app_iso hom H2)", "by simp"], ["proof (state)\nthis:\n  app_iso (inv_iso hom) (app_iso hom H1) =\n  app_iso (inv_iso hom) (app_iso hom H2)\n\ngoal (2 subgoals):\n 1. app_iso hom H1 = app_iso hom H2 \\<Longrightarrow> H1 = H2\n 2. H1 = H2 \\<Longrightarrow> app_iso hom H1 = app_iso hom H2", "with assms"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  subgraph H1 G\n  subgraph H2 G\n  app_iso (inv_iso hom) (app_iso hom H1) =\n  app_iso (inv_iso hom) (app_iso hom H2)", "show ?R"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H1 G\n  subgraph H2 G\n  app_iso (inv_iso hom) (app_iso hom H1) =\n  app_iso (inv_iso hom) (app_iso hom H2)\n\ngoal (1 subgoal):\n 1. H1 = H2", "by auto"], ["proof (state)\nthis:\n  H1 = H2\n\ngoal (1 subgoal):\n 1. H1 = H2 \\<Longrightarrow> app_iso hom H1 = app_iso hom H2", "qed simp"], ["", "lemma in_arcs_app_iso_cases:\n  assumes \"a \\<in> arcs (app_iso hom G)\"\n  obtains a0 where \"a = iso_arcs hom a0\" \"a0 \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a0.\n        \\<lbrakk>a = iso_arcs hom a0; a0 \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>a0.\n        \\<lbrakk>a = iso_arcs hom a0; a0 \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma in_verts_app_iso_cases:\n  assumes \"v \\<in> verts (app_iso hom G)\"\n  obtains v0 where \"v = iso_verts hom v0\" \"v0 \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v0.\n        \\<lbrakk>v = iso_verts hom v0; v0 \\<in> verts G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> verts (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>v0.\n        \\<lbrakk>v = iso_verts hom v0; v0 \\<in> verts G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma (in wf_digraph) max_subgraph_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes subg: \"subgraph H (app_iso hom G)\"\n  shows \"pre_digraph.max_subgraph (app_iso hom G) P H\n    \\<longleftrightarrow> max_subgraph (P o app_iso hom) (app_iso (inv_iso hom) H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.max_subgraph (app_iso hom G) P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.max_subgraph (app_iso hom G) P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "have hom_inv: \"pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "by (rule digraph_isomorphism_invI)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\n\ngoal (1 subgoal):\n 1. pre_digraph.max_subgraph (app_iso hom G) P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "interpret aG: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. aG.max_subgraph P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "have *: \"subgraph (app_iso (inv_iso hom) H) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (app_iso (inv_iso hom) H) G", "using hom pre_digraph.subgraph_app_isoI'[OF hom_inv subg aG.subgraph_refl]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph (app_iso (inv_iso hom) H) (app_iso (inv_iso hom) (app_iso hom G))\n\ngoal (1 subgoal):\n 1. subgraph (app_iso (inv_iso hom) H) G", "by simp"], ["proof (state)\nthis:\n  subgraph (app_iso (inv_iso hom) H) G\n\ngoal (1 subgoal):\n 1. aG.max_subgraph P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "define H0 where \"H0 = app_iso (inv_iso hom) H\""], ["proof (state)\nthis:\n  H0 = app_iso (inv_iso hom) H\n\ngoal (1 subgoal):\n 1. aG.max_subgraph P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "then"], ["proof (chain)\npicking this:\n  H0 = app_iso (inv_iso hom) H", "have H0: \"H = app_iso hom H0\" \"subgraph H0 G\""], ["proof (prove)\nusing this:\n  H0 = app_iso (inv_iso hom) H\n\ngoal (1 subgoal):\n 1. H = app_iso hom H0 &&& subgraph H0 G", "using hom subg \\<open>subgraph _ G\\<close>"], ["proof (prove)\nusing this:\n  H0 = app_iso (inv_iso hom) H\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n  subgraph (app_iso (inv_iso hom) H) G\n\ngoal (1 subgoal):\n 1. H = app_iso hom H0 &&& subgraph H0 G", "by (auto simp: )"], ["proof (state)\nthis:\n  H = app_iso hom H0\n  subgraph H0 G\n\ngoal (1 subgoal):\n 1. aG.max_subgraph P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "show ?thesis (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. aG.max_subgraph P H =\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. aG.max_subgraph P H \\<Longrightarrow>\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n 2. max_subgraph (P \\<circ> app_iso hom)\n     (app_iso (inv_iso hom) H) \\<Longrightarrow>\n    aG.max_subgraph P H", "assume ?L"], ["proof (state)\nthis:\n  aG.max_subgraph P H\n\ngoal (2 subgoals):\n 1. aG.max_subgraph P H \\<Longrightarrow>\n    max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n 2. max_subgraph (P \\<circ> app_iso hom)\n     (app_iso (inv_iso hom) H) \\<Longrightarrow>\n    aG.max_subgraph P H", "then"], ["proof (chain)\npicking this:\n  aG.max_subgraph P H", "show ?R"], ["proof (prove)\nusing this:\n  aG.max_subgraph P H\n\ngoal (1 subgoal):\n 1. max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "using assms H0"], ["proof (prove)\nusing this:\n  aG.max_subgraph P H\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n  H = app_iso hom H0\n  subgraph H0 G\n\ngoal (1 subgoal):\n 1. max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "by (auto simp: max_subgraph_def aG.max_subgraph_def pre_digraph.subgraph_app_isoI'\n        subgraph_refl pre_digraph.app_iso_eq_conv)"], ["proof (state)\nthis:\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n\ngoal (1 subgoal):\n 1. max_subgraph (P \\<circ> app_iso hom)\n     (app_iso (inv_iso hom) H) \\<Longrightarrow>\n    aG.max_subgraph P H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. max_subgraph (P \\<circ> app_iso hom)\n     (app_iso (inv_iso hom) H) \\<Longrightarrow>\n    aG.max_subgraph P H", "assume ?R"], ["proof (state)\nthis:\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n\ngoal (1 subgoal):\n 1. max_subgraph (P \\<circ> app_iso hom)\n     (app_iso (inv_iso hom) H) \\<Longrightarrow>\n    aG.max_subgraph P H", "then"], ["proof (chain)\npicking this:\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)", "show ?L"], ["proof (prove)\nusing this:\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n\ngoal (1 subgoal):\n 1. aG.max_subgraph P H", "using assms hom_inv pre_digraph.subgraph_app_isoI[OF hom_inv]"], ["proof (prove)\nusing this:\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n  digraph_isomorphism hom\n  subgraph H (app_iso hom G)\n  aG.digraph_isomorphism (inv_iso hom)\n  subgraph ?H (app_iso hom G) \\<Longrightarrow>\n  subgraph (app_iso (inv_iso hom) ?H)\n   (app_iso (inv_iso hom) (app_iso hom G))\n\ngoal (1 subgoal):\n 1. aG.max_subgraph P H", "apply (auto simp: max_subgraph_def aG.max_subgraph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>H'.\n       \\<lbrakk>digraph_isomorphism hom; subgraph H (app_iso hom G);\n        aG.digraph_isomorphism (inv_iso hom);\n        \\<And>H.\n           subgraph H (app_iso hom G) \\<Longrightarrow>\n           subgraph (app_iso (inv_iso hom) H) G;\n        P H;\n        \\<forall>H'.\n           H' \\<noteq> app_iso (inv_iso hom) H \\<and>\n           subgraph (app_iso (inv_iso hom) H) H' \\<longrightarrow>\n           subgraph H' G \\<longrightarrow> \\<not> P (app_iso hom H');\n        H' \\<noteq> H; subgraph H H'; subgraph H' (app_iso hom G);\n        P H'\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule allE[of _ \"app_iso (inv_iso hom) H'\" for H'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>H'.\n       \\<lbrakk>digraph_isomorphism hom; subgraph H (app_iso hom G);\n        aG.digraph_isomorphism (inv_iso hom);\n        \\<And>H.\n           subgraph H (app_iso hom G) \\<Longrightarrow>\n           subgraph (app_iso (inv_iso hom) H) G;\n        P H; H' \\<noteq> H; subgraph H H'; subgraph H' (app_iso hom G);\n        P H';\n        app_iso (inv_iso hom) (?H'16 H') \\<noteq>\n        app_iso (inv_iso hom) H \\<and>\n        subgraph (app_iso (inv_iso hom) H)\n         (app_iso (inv_iso hom) (?H'16 H')) \\<longrightarrow>\n        subgraph (app_iso (inv_iso hom) (?H'16 H')) G \\<longrightarrow>\n        \\<not> P (app_iso hom (app_iso (inv_iso hom) (?H'16 H')))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp: pre_digraph.subgraph_app_isoI' pre_digraph.app_iso_eq_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  aG.max_subgraph P H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  aG.max_subgraph P H =\n  max_subgraph (P \\<circ> app_iso hom) (app_iso (inv_iso hom) H)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) max_subgraph_cong:\n  assumes \"H = H'\" \"\\<And>H''. subgraph H' H'' \\<Longrightarrow> subgraph H'' G \\<Longrightarrow> P H'' = P' H''\"\n  shows \"max_subgraph P H = max_subgraph P' H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_subgraph P H = max_subgraph P' H'", "using assms"], ["proof (prove)\nusing this:\n  H = H'\n  \\<lbrakk>subgraph H' ?H''2; subgraph ?H''2 G\\<rbrakk>\n  \\<Longrightarrow> P ?H''2 = P' ?H''2\n\ngoal (1 subgoal):\n 1. max_subgraph P H = max_subgraph P' H'", "by (auto simp: max_subgraph_def intro: wf_digraph.subgraph_refl)"], ["", "lemma (in pre_digraph) inj_on_app_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes \"S \\<subseteq> {H. subgraph H G}\"\n  shows \"inj_on (app_iso hom) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (app_iso hom) S", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  S \\<subseteq> {H. subgraph H G}\n\ngoal (1 subgoal):\n 1. inj_on (app_iso hom) S", "by (intro inj_onI) (subst (asm) app_iso_eq_conv, auto)"], ["", "subsection \\<open>Graph Invariants\\<close>"], ["", "context\n  fixes G hom assumes hom: \"pre_digraph.digraph_isomorphism G hom\"\nbegin"], ["", "interpretation wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "using hom"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G hom\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by (auto simp: pre_digraph.digraph_isomorphism_def)"], ["", "lemma card_verts_iso[simp]: \"card (iso_verts hom ` verts G) = card (verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (iso_verts hom ` verts G) = card (verts G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. card (iso_verts hom ` verts G) = card (verts G)", "by (intro card_image digraph_isomorphism_inj_on_verts)"], ["", "lemma card_arcs_iso[simp]: \"card (iso_arcs hom ` arcs G) = card (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (iso_arcs hom ` arcs G) = card (arcs G)", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. card (iso_arcs hom ` arcs G) = card (arcs G)", "by (intro card_image digraph_isomorphism_inj_on_arcs)"], ["", "lemma strongly_connected_iso[simp]: \"strongly_connected (app_iso hom G) \\<longleftrightarrow> strongly_connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom G) = strongly_connected G", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom G) = strongly_connected G", "by (auto simp: strongly_connected_def reachable_app_iso_eq)"], ["", "lemma subgraph_strongly_connected_iso:\n    assumes \"subgraph H G\"\n    shows \"strongly_connected (app_iso hom H) \\<longleftrightarrow> strongly_connected H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "interpret H: wf_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H", "using \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "have \"H.digraph_isomorphism hom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.digraph_isomorphism hom", "using hom assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. H.digraph_isomorphism hom", "by (rule digraph_isomorphism_subgraphI)"], ["proof (state)\nthis:\n  H.digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "then"], ["proof (chain)\npicking this:\n  H.digraph_isomorphism hom", "show ?thesis"], ["proof (prove)\nusing this:\n  H.digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "using assms"], ["proof (prove)\nusing this:\n  H.digraph_isomorphism hom\n  subgraph H G\n\ngoal (1 subgoal):\n 1. strongly_connected (app_iso hom H) = strongly_connected H", "by (auto simp: strongly_connected_def H.reachable_app_iso_eq)"], ["proof (state)\nthis:\n  strongly_connected (app_iso hom H) = strongly_connected H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sccs_iso[simp]: \"pre_digraph.sccs (app_iso hom G) = app_iso hom ` sccs\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.sccs (app_iso hom G) = app_iso hom ` sccs", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> pre_digraph.sccs (app_iso hom G) \\<Longrightarrow>\n       x \\<in> app_iso hom ` sccs\n 2. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> pre_digraph.sccs (app_iso hom G) \\<Longrightarrow>\n       x \\<in> app_iso hom ` sccs\n 2. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "assume \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> pre_digraph.sccs (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> pre_digraph.sccs (app_iso hom G) \\<Longrightarrow>\n       x \\<in> app_iso hom ` sccs\n 2. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  x \\<in> pre_digraph.sccs (app_iso hom G)", "have \"subgraph x (app_iso hom G)\""], ["proof (prove)\nusing this:\n  x \\<in> pre_digraph.sccs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. subgraph x (app_iso hom G)", "by (auto simp: pre_digraph.sccs_def)"], ["proof (state)\nthis:\n  subgraph x (app_iso hom G)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> pre_digraph.sccs (app_iso hom G) \\<Longrightarrow>\n       x \\<in> app_iso hom ` sccs\n 2. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  subgraph x (app_iso hom G)", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  subgraph x (app_iso hom G)\n\ngoal (1 subgoal):\n 1. x \\<in> app_iso hom ` sccs", "using \\<open>x \\<in> ?L\\<close> hom"], ["proof (prove)\nusing this:\n  subgraph x (app_iso hom G)\n  x \\<in> pre_digraph.sccs (app_iso hom G)\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. x \\<in> app_iso hom ` sccs", "by (auto simp: pre_digraph.sccs_altdef2 max_subgraph_iso\n        subgraph_strongly_connected_iso cong: max_subgraph_cong  intro: rev_image_eqI)"], ["proof (state)\nthis:\n  x \\<in> app_iso hom ` sccs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> app_iso hom ` sccs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  x \\<in> app_iso hom ` sccs", "obtain x0 where \"x0 \\<in> sccs\" \"x = app_iso hom x0\""], ["proof (prove)\nusing this:\n  x \\<in> app_iso hom ` sccs\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x0 \\<in> sccs; x = app_iso hom x0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x0 \\<in> sccs\n  x = app_iso hom x0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> app_iso hom ` sccs \\<Longrightarrow>\n       x \\<in> pre_digraph.sccs (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  x0 \\<in> sccs\n  x = app_iso hom x0", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x0 \\<in> sccs\n  x = app_iso hom x0\n\ngoal (1 subgoal):\n 1. x \\<in> pre_digraph.sccs (app_iso hom G)", "using hom"], ["proof (prove)\nusing this:\n  x0 \\<in> sccs\n  x = app_iso hom x0\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. x \\<in> pre_digraph.sccs (app_iso hom G)", "by (auto simp: pre_digraph.sccs_altdef2 max_subgraph_iso subgraph_app_isoI\n        subgraphI_max_subgraph subgraph_strongly_connected_iso cong: max_subgraph_cong)"], ["proof (state)\nthis:\n  x \\<in> pre_digraph.sccs (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_sccs_iso[simp]: \"card (app_iso hom ` sccs) = card sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (app_iso hom ` sccs) = card sccs", "apply (rule card_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (app_iso hom) sccs", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. inj_on (app_iso hom) sccs", "apply (rule inj_on_app_iso)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs \\<subseteq> {H. subgraph H G}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}