{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Digraph_Component.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma compatible_tail:\n  assumes \"compatible G H\" shows \"tail G = tail H\"", "lemma compatible_head:\n  assumes \"compatible G H\" shows \"head G = head H\"", "lemma compatible_cas:\n  assumes \"compatible G H\" shows \"pre_digraph.cas G = pre_digraph.cas H\"", "lemma compatible_awalk_verts:\n  assumes \"compatible G H\" shows \"pre_digraph.awalk_verts G = pre_digraph.awalk_verts H\"", "lemma compatibleI_with_proj[intro]:\n  shows \"compatible (with_proj G) (with_proj H)\"", "lemma (in sym_digraph) graph_symmetric:\n  shows \"(u,v) \\<in> arcs_ends G \\<Longrightarrow> (v,u) \\<in> arcs_ends G\"", "lemma strongly_connectedI[intro]:\n  assumes \"verts G \\<noteq> {}\" \"\\<And>u v. u \\<in> verts G \\<Longrightarrow> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  shows \"strongly_connected G\"", "lemma strongly_connectedE[elim]:\n  assumes \"strongly_connected G\"\n  assumes \"(\\<And>u v. u \\<in> verts G \\<and> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v) \\<Longrightarrow> P\"\n  shows \"P\"", "lemma subgraph_imp_subverts:\n  assumes \"subgraph H G\"\n  shows \"verts H \\<subseteq> verts G\"", "lemma induced_imp_subgraph:\n  assumes \"induced_subgraph H G\"\n  shows \"subgraph H G\"", "lemma (in pre_digraph) in_sccs_imp_induced:\n  assumes \"c \\<in> sccs\"\n  shows \"induced_subgraph c G\"", "lemma spanning_tree_imp_tree[dest]:\n  assumes \"spanning_tree H G\"\n  shows \"tree H\"", "lemma tree_imp_connected[dest]:\n  assumes \"tree G\"\n  shows \"connected G\"", "lemma spanning_treeI[intro]:\n  assumes \"spanning H G\"\n  assumes \"tree H\"\n  shows \"spanning_tree H G\"", "lemma spanning_treeE[elim]:\n  assumes \"spanning_tree H G\"\n  assumes \"tree H \\<and> spanning H G \\<Longrightarrow> P\"\n  shows \"P\"", "lemma spanningE[elim]:\n  assumes \"spanning H G\"\n  assumes \"subgraph H G \\<and> verts G = verts H \\<Longrightarrow> P\"\n  shows \"P\"", "lemma (in pre_digraph) in_sccsI[intro]:\n  assumes \"induced_subgraph c G\"\n  assumes \"strongly_connected c\"\n  assumes \"\\<not>(\\<exists>c'. induced_subgraph c' G \\<and> strongly_connected c' \\<and>\n    verts c \\<subset> verts c')\"\n  shows \"c \\<in> sccs\"", "lemma (in pre_digraph) in_sccsE[elim]:\n  assumes \"c \\<in> sccs\"\n  assumes \"induced_subgraph c G \\<Longrightarrow> strongly_connected c \\<Longrightarrow> \\<not> (\\<exists>d.\n    induced_subgraph d G \\<and> strongly_connected d \\<and> verts c \\<subset> verts d) \\<Longrightarrow> P\"\n  shows \"P\"", "lemma subgraphI:\n  assumes \"verts H \\<subseteq> verts G\"\n  assumes \"arcs H \\<subseteq> arcs G\"\n  assumes \"compatible G H\"\n  assumes \"wf_digraph H\"\n  assumes \"wf_digraph G\"\n  shows \"subgraph H G\"", "lemma subgraphE[elim]:\n  assumes \"subgraph H G\"\n  obtains \"verts H \\<subseteq> verts G\" \"arcs H \\<subseteq> arcs G\" \"compatible G H\" \"wf_digraph H\" \"wf_digraph G\"", "lemma induced_subgraphI[intro]:\n  assumes \"subgraph H G\"\n  assumes \"arcs H = {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\"\n  shows \"induced_subgraph H G\"", "lemma induced_subgraphE[elim]:\n  assumes \"induced_subgraph H G\"\n  assumes \"\\<lbrakk>subgraph H G; arcs H = {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\\<rbrakk> \\<Longrightarrow> P\"\n  shows \"P\"", "lemma pverts_mk_symmetric[simp]: \"pverts (mk_symmetric G) = verts G\"\n  and parcs_mk_symmetric:\n    \"parcs (mk_symmetric G) = (\\<Union>e\\<in>arcs G. {(tail G e, head G e), (head G e, tail G e)})\"", "lemma arcs_ends_mono:\n  assumes \"subgraph H G\"\n  shows \"arcs_ends H \\<subseteq> arcs_ends G\"", "lemma (in wf_digraph) subgraph_refl: \"subgraph G G\"", "lemma (in wf_digraph) induced_subgraph_refl: \"induced_subgraph G G\"", "lemma (in wf_digraph) wellformed_mk_symmetric[intro]: \"pair_wf_digraph (mk_symmetric G)\"", "lemma (in fin_digraph) pair_fin_digraph_mk_symmetric[intro]: \"pair_fin_digraph (mk_symmetric G)\"", "lemma (in digraph) digraph_mk_symmetric[intro]: \"pair_digraph (mk_symmetric G)\"", "lemma (in wf_digraph) reachable_mk_symmetricI:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\"", "lemma (in wf_digraph) adj_mk_symmetric_eq:\n  \"symmetric G \\<Longrightarrow> parcs (mk_symmetric G) = arcs_ends G\"", "lemma (in wf_digraph) reachable_mk_symmetric_eq:\n  assumes \"symmetric G\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v \\<longleftrightarrow> u \\<rightarrow>\\<^sup>* v\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in wf_digraph) mk_symmetric_awalk_imp_awalk:\n  assumes sym: \"symmetric G\"\n  assumes walk: \"pre_digraph.awalk (mk_symmetric G) u p v\"\n  obtains q where \"awalk u q v\"", "lemma symmetric_mk_symmetric:\n  \"symmetric (mk_symmetric G)\"", "lemma subgraph_trans:\n  assumes \"subgraph G H\" \"subgraph H I\" shows \"subgraph G I\"", "lemma (in fin_digraph) fin_digraph_subgraph:\n  assumes \"subgraph H G\" shows \"fin_digraph H\"", "lemma (in digraph) digraph_subgraph:\n  assumes \"subgraph H G\" shows \"digraph H\"", "lemma (in pre_digraph) adj_mono:\n  assumes \"u \\<rightarrow>\\<^bsub>H\\<^esub> v\" \"subgraph H G\"\n  shows \"u \\<rightarrow> v\"", "lemma (in pre_digraph) reachable_mono:\n  assumes walk: \"u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\" and sub: \"subgraph H G\"\n  shows \"u \\<rightarrow>\\<^sup>* v\"", "lemma (in wf_digraph) subgraph_awalk_imp_awalk:\n  assumes walk: \"pre_digraph.awalk H u p v\"\n  assumes sub: \"subgraph H G\"\n  shows \"awalk u p v\"", "lemma (in wf_digraph) subgraph_apath_imp_apath:\n  assumes path: \"pre_digraph.apath H u p v\"\n  assumes sub: \"subgraph H G\"\n  shows \"apath u p v\"", "lemma subgraph_mk_symmetric:\n  assumes \"subgraph H G\"\n  shows \"subgraph (mk_symmetric H) (mk_symmetric G)\"", "lemma (in fin_digraph) subgraph_in_degree:\n  assumes \"subgraph H G\"\n  shows \"in_degree H v \\<le> in_degree G v\"", "lemma (in wf_digraph) subgraph_cycle:\n  assumes \"subgraph H G\" \"pre_digraph.cycle H p \" shows \"cycle p\"", "lemma (in wf_digraph) subgraph_del_vert: \"subgraph (del_vert u) G\"", "lemma (in wf_digraph) subgraph_del_arc: \"subgraph (del_arc a) G\"", "lemma wf_digraphI_induced:\n  assumes \"induced_subgraph H G\"\n  shows \"wf_digraph H\"", "lemma (in digraph) digraphI_induced:\n  assumes \"induced_subgraph H G\"\n  shows \"digraph H\"", "lemma induce_subgraph_verts[simp]:\n \"verts (G \\<restriction> vs) = vs\"", "lemma induce_subgraph_arcs[simp]:\n \"arcs (G \\<restriction> vs) = {e \\<in> arcs G. tail G e \\<in> vs \\<and> head G e \\<in> vs}\"", "lemma induce_subgraph_tail[simp]:\n  \"tail (G \\<restriction> vs) = tail G\"", "lemma induce_subgraph_head[simp]:\n  \"head (G \\<restriction> vs) = head G\"", "lemma compatible_induce_subgraph: \"compatible (G \\<restriction> S) G\"", "lemma (in wf_digraph) induced_induce[intro]:\n  assumes \"vs \\<subseteq> verts G\"\n  shows \"induced_subgraph (G \\<restriction> vs) G\"", "lemma (in wf_digraph) wellformed_induce_subgraph[intro]:\n  \"wf_digraph (G \\<restriction> vs)\"", "lemma induced_graph_imp_symmetric:\n  assumes \"symmetric G\"\n  assumes \"induced_subgraph H G\"\n  shows \"symmetric H\"", "lemma (in sym_digraph) induced_graph_imp_graph:\n  assumes \"induced_subgraph H G\"\n  shows \"sym_digraph H\"", "lemma (in wf_digraph) induce_reachable_preserves_paths:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w}\\<^esub> v\"", "lemma induce_subgraph_ends[simp]:\n  \"arc_to_ends (G \\<restriction> S) = arc_to_ends G\"", "lemma dominates_induce_subgraphD:\n  assumes \"u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\" shows \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\"", "lemma reachable_induce_subgraphD:\n    assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> verts G\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"", "lemma dominates_induce_ss:\n    assumes \"u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> T\" shows \"u \\<rightarrow>\\<^bsub>G \\<restriction> T\\<^esub> v\"", "lemma reachable_induce_ss:\n    assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> T\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\"", "lemma awalk_verts_induce:\n    \"pre_digraph.awalk_verts (G \\<restriction> S) = awalk_verts\"", "lemma (in -) cas_subset:\n    assumes \"pre_digraph.cas G u p v\" \"subgraph G H\"\n    shows \"pre_digraph.cas H u p v\"", "lemma cas_induce:\n    assumes \"cas u p v\" \"set (awalk_verts u p) \\<subseteq> S\"\n    shows \"pre_digraph.cas (G \\<restriction> S) u p v\"", "lemma awalk_induce:\n    assumes \"awalk u p v\" \"set (awalk_verts u p) \\<subseteq> S\"\n    shows \"pre_digraph.awalk (G \\<restriction> S) u p v\"", "lemma subgraph_induce_subgraphI:\n    assumes \"V \\<subseteq> verts G\" shows \"subgraph (G \\<restriction> V) G\"", "lemma induced_subgraphI':\n  assumes subg:\"subgraph H G\"\n  assumes max: \"\\<And>H'. subgraph H' G \\<Longrightarrow> (verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H)\"\n  shows \"induced_subgraph H G\"", "lemma (in pre_digraph) induced_subgraph_altdef:\n  \"induced_subgraph H G \\<longleftrightarrow> subgraph H G \\<and> (\\<forall>H'. subgraph H' G \\<longrightarrow> (verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma\n  verts_union[simp]: \"verts (union G H) = verts G \\<union> verts H\" and\n  arcs_union[simp]: \"arcs (union G H) = arcs G \\<union> arcs H\" and\n  tail_union[simp]: \"tail (union G H) = tail G\" and\n  head_union[simp]: \"head (union G H) = head G\"", "lemma wellformed_union:\n  assumes \"wf_digraph G\" \"wf_digraph H\" \"compatible G H\"\n  shows \"wf_digraph (union G H)\"", "lemma subgraph_union_iff:\n  assumes \"wf_digraph H1\" \"wf_digraph H2\" \"compatible H1 H2\"\n  shows \"subgraph (union H1 H2) G \\<longleftrightarrow> subgraph H1 G \\<and> subgraph H2 G\"", "lemma subgraph_union[intro]:\n  assumes \"subgraph H1 G\" \"compatible H1 G\"\n  assumes \"subgraph H2 G\" \"compatible H2 G\"\n  shows \"subgraph (union H1 H2) G\"", "lemma union_fin_digraph:\n  assumes \"fin_digraph G\" \"fin_digraph H\" \"compatible G H\"\n  shows \"fin_digraph (union G H)\"", "lemma subgraphs_of_union:\n  assumes \"wf_digraph G\" \"wf_digraph G'\" \"compatible G G'\"\n  shows \"subgraph G (union G G')\"\n    and \"subgraph G' (union G G')\"", "lemma (in pre_digraph) max_subgraph_mp:\n  assumes \"max_subgraph Q x\" \"\\<And>x. P x \\<Longrightarrow> Q x\" \"P x\" shows \"max_subgraph P x\"", "lemma (in pre_digraph) max_subgraph_prop: \"max_subgraph P x \\<Longrightarrow> P x\"", "lemma (in pre_digraph) max_subgraph_subg_eq:\n  assumes \"max_subgraph P H1\" \"max_subgraph P H2\" \"subgraph H1 H2\"\n  shows \"H1 = H2\"", "lemma subgraph_induce_subgraphI2:\n  assumes \"subgraph H G\" shows \"subgraph H (G \\<restriction> verts H)\"", "lemma (in pre_digraph) induced_subgraphI_arc_mono:\n  assumes \"max_subgraph P H\"\n  assumes \"arc_mono P\"\n  shows \"induced_subgraph H G\"", "lemma (in pre_digraph) induced_subgraph_altdef2:\n  \"induced_subgraph H G \\<longleftrightarrow> max_subgraph (\\<lambda>H'. verts H' = verts H) H\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in pre_digraph) max_subgraphI:\n  assumes \"P x\" \"subgraph x G\" \"\\<And>y. \\<lbrakk>x \\<noteq> y; subgraph x y; subgraph y G\\<rbrakk> \\<Longrightarrow> \\<not>P y\"\n  shows \"max_subgraph P x\"", "lemma (in pre_digraph) subgraphI_max_subgraph: \"max_subgraph P x \\<Longrightarrow> subgraph x G\"", "lemma in_sccs_verts_conv_reachable:\n    \"S \\<in> sccs_verts \\<longleftrightarrow> S \\<noteq> {} \\<and> (\\<forall>u \\<in> S. \\<forall>v \\<in> S. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v) \\<and> (\\<forall>u \\<in> S. \\<forall>v. v \\<notin> S \\<longrightarrow> \\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u)\"", "lemma sccs_verts_disjoint:\n    assumes \"S \\<in> sccs_verts\" \"T \\<in> sccs_verts\" \"S \\<noteq> T\" shows \"S \\<inter> T = {}\"", "lemma strongly_connected_spanning_imp_strongly_connected:\n    assumes \"spanning H G\"\n    assumes \"strongly_connected H\"\n    shows \"strongly_connected G\"", "lemma strongly_connected_imp_induce_subgraph_strongly_connected:\n    assumes subg: \"subgraph H G\"\n    assumes sc: \"strongly_connected H\"\n    shows \"strongly_connected (G \\<restriction> (verts H))\"", "lemma in_sccs_vertsI_sccs:\n    assumes \"S \\<in> verts ` sccs\" shows \"S \\<in> sccs_verts\"", "lemma arc_mono_strongly_connected[intro,simp]: \"arc_mono strongly_connected\"", "lemma (in pre_digraph) sccs_altdef2:\n  \"sccs = {H. max_subgraph strongly_connected H}\" (is \"?L = ?R\")", "lemma reach_in: \"\\<And>u v. \\<lbrakk>u \\<in> S; v \\<in> S\\<rbrakk> \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and not_reach_out: \"\\<And>u v. \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk> \\<Longrightarrow> \\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\"\n    and not_empty: \"S \\<noteq> {}\"", "lemma reachable_induced:\n    assumes conn: \"u \\<in> S\" \"v \\<in> S\" \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\"", "lemma strongly_connected:\n    shows \"strongly_connected (G \\<restriction> S)\"", "lemma induced_in_sccs: \"G \\<restriction> S \\<in> sccs\"", "lemma in_verts_sccsD_sccs:\n    assumes \"S \\<in> sccs_verts\"\n    shows \"G \\<restriction> S \\<in> sccs\"", "lemma sccs_verts_conv: \"sccs_verts = verts ` sccs\"", "lemma induce_eq_iff_induced:\n    assumes \"induced_subgraph H G\" shows \"G \\<restriction> verts H = H\"", "lemma sccs_conv_sccs_verts: \"sccs = induce_subgraph G ` sccs_verts\"", "lemma connected_conv:\n  shows \"connected G \\<longleftrightarrow> verts G \\<noteq> {} \\<and> (\\<forall>u \\<in> verts G. \\<forall>v \\<in> verts G. (u,v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s))\"", "lemma (in wf_digraph) symmetric_connected_imp_strongly_connected:\n  assumes \"symmetric G\" \"connected G\"\n  shows \"strongly_connected G\"", "lemma (in wf_digraph) connected_spanning_imp_connected:\n  assumes \"spanning H G\"\n  assumes \"connected H\"\n  shows \"connected G\"", "lemma (in wf_digraph) spanning_tree_imp_connected:\n  assumes \"spanning_tree H G\"\n  shows \"connected G\"", "lemma (in sym_digraph) induce_reachable_is_in_sccs:\n  assumes \"u \\<in> verts G\"\n  shows \"(G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<in> sccs\"", "lemma induced_eq_verts_imp_eq:\n  assumes \"induced_subgraph G H\"\n  assumes \"induced_subgraph G' H\"\n  assumes \"verts G = verts G'\"\n  shows \"G = G'\"", "lemma (in pre_digraph) in_sccs_subset_imp_eq:\n  assumes \"c \\<in> sccs\"\n  assumes \"d \\<in> sccs\"\n  assumes \"verts c \\<subseteq> verts d\"\n  shows \"c = d\"", "lemma connectedI:\n    assumes \"verts G \\<noteq> {}\" \"\\<And>u v. u \\<in> verts G \\<Longrightarrow> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\"\n    shows \"connected G\"", "lemma connected_awalkE:\n    assumes \"connected G\" \"u \\<in> verts G\" \"v \\<in> verts G\"\n    obtains p where \"pre_digraph.awalk (mk_symmetric G) u p v\"", "lemma inj_on_verts_sccs: \"inj_on verts sccs\"", "lemma card_sccs_verts: \"card sccs_verts = card sccs\"", "lemma strongly_connected_non_disj:\n  assumes wf: \"wf_digraph G\" \"wf_digraph H\" \"compatible G H\"\n  assumes sc: \"strongly_connected G\" \"strongly_connected H\"\n  assumes not_disj: \"verts G \\<inter> verts H \\<noteq> {}\"\n  shows \"strongly_connected (union G H)\"", "lemma scc_disj:\n    assumes scc: \"c \\<in> sccs\" \"d \\<in> sccs\"\n    assumes \"c \\<noteq> d\"\n    shows \"verts c \\<inter> verts d = {}\"", "lemma in_sccs_verts_conv:\n    \"S \\<in> sccs_verts \\<longleftrightarrow> G \\<restriction> S \\<in> sccs\"", "lemma (in wf_digraph) in_scc_of_self: \"u \\<in> verts G \\<Longrightarrow> u \\<in> scc_of u\"", "lemma (in wf_digraph) scc_of_empty_conv: \"scc_of u = {} \\<longleftrightarrow> u \\<notin> verts G\"", "lemma (in wf_digraph) scc_of_in_sccs_verts:\n  assumes \"u \\<in> verts G\" shows \"scc_of u \\<in> sccs_verts\"", "lemma (in wf_digraph) sccs_verts_subsets: \"S \\<in> sccs_verts \\<Longrightarrow> S \\<subseteq> verts G\"", "lemma (in fin_digraph) finite_sccs_verts: \"finite sccs_verts\"", "lemma (in wf_digraph) sccs_verts_conv_scc_of:\n  \"sccs_verts = scc_of ` verts G\" (is \"?L = ?R\")", "lemma (in sym_digraph) scc_ofI_reachable:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<in> scc_of v\"", "lemma (in sym_digraph) scc_ofI_reachable':\n  assumes \"v \\<rightarrow>\\<^sup>* u\" shows \"u \\<in> scc_of v\"", "lemma (in sym_digraph) scc_ofI_awalk:\n  assumes \"awalk u p v\" shows \"u \\<in> scc_of v\"", "lemma (in sym_digraph) scc_ofI_apath:\n  assumes \"apath u p v\" shows \"u \\<in> scc_of v\"", "lemma (in wf_digraph) scc_of_eq: \"u \\<in> scc_of v \\<Longrightarrow> scc_of u = scc_of v\"", "lemma (in wf_digraph) strongly_connected_eq_iff:\n  \"strongly_connected G \\<longleftrightarrow> sccs = {G}\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in sym_digraph) exists_scc:\n  assumes \"verts G \\<noteq> {}\" shows \"\\<exists>c. c \\<in> sccs\"", "theorem (in sym_digraph) graph_is_union_sccs:\n  shows \"Union sccs = G\"", "lemma (in sym_digraph) scc_for_vert_ex:\n  assumes \"u \\<in> verts G\"\n  shows \"\\<exists>c. c\\<in>sccs \\<and> u \\<in> verts c\"", "lemma (in sym_digraph) scc_decomp_unique:\n  assumes \"S \\<subseteq> sccs\" \"verts (Union S) = verts G\" shows \"S = sccs\""], "translations": [["", "lemma compatible_tail:\n  assumes \"compatible G H\" shows \"tail G = tail H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G = tail H", "using assms"], ["proof (prove)\nusing this:\n  compatible G H\n\ngoal (1 subgoal):\n 1. tail G = tail H", "by (simp add: fun_eq_iff compatible_def)"], ["", "lemma compatible_head:\n  assumes \"compatible G H\" shows \"head G = head H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head G = head H", "using assms"], ["proof (prove)\nusing this:\n  compatible G H\n\ngoal (1 subgoal):\n 1. head G = head H", "by (simp add: fun_eq_iff compatible_def)"], ["", "lemma compatible_cas:\n  assumes \"compatible G H\" shows \"pre_digraph.cas G = pre_digraph.cas H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas G = pre_digraph.cas H", "proof (unfold fun_eq_iff, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. pre_digraph.cas G x xa xb = pre_digraph.cas H x xa xb", "fix u es v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. pre_digraph.cas G x xa xb = pre_digraph.cas H x xa xb", "show \"pre_digraph.cas G u es v = pre_digraph.cas H u es v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas G u es v = pre_digraph.cas H u es v", "using assms"], ["proof (prove)\nusing this:\n  compatible G H\n\ngoal (1 subgoal):\n 1. pre_digraph.cas G u es v = pre_digraph.cas H u es v", "by (induct es arbitrary: u)\n       (simp_all add: pre_digraph.cas.simps compatible_head compatible_tail)"], ["proof (state)\nthis:\n  pre_digraph.cas G u es v = pre_digraph.cas H u es v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compatible_awalk_verts:\n  assumes \"compatible G H\" shows \"pre_digraph.awalk_verts G = pre_digraph.awalk_verts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts G = pre_digraph.awalk_verts H", "proof (unfold fun_eq_iff, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts G x xa = pre_digraph.awalk_verts H x xa", "fix u es"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts G x xa = pre_digraph.awalk_verts H x xa", "show \"pre_digraph.awalk_verts G u es = pre_digraph.awalk_verts H u es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts G u es = pre_digraph.awalk_verts H u es", "using assms"], ["proof (prove)\nusing this:\n  compatible G H\n\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts G u es = pre_digraph.awalk_verts H u es", "by (induct es arbitrary: u)\n       (simp_all add: pre_digraph.awalk_verts.simps compatible_head compatible_tail)"], ["proof (state)\nthis:\n  pre_digraph.awalk_verts G u es = pre_digraph.awalk_verts H u es\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compatibleI_with_proj[intro]:\n  shows \"compatible (with_proj G) (with_proj H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible (with_proj G) (with_proj H)", "by (auto simp: compatible_def)"], ["", "subsection \\<open>Basic lemmas\\<close>"], ["", "lemma (in sym_digraph) graph_symmetric:\n  shows \"(u,v) \\<in> arcs_ends G \\<Longrightarrow> (v,u) \\<in> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow> v \\<Longrightarrow> v \\<rightarrow> u", "using sym_arcs"], ["proof (prove)\nusing this:\n  symmetric G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow> v \\<Longrightarrow> v \\<rightarrow> u", "by (auto simp add: symmetric_def sym_def)"], ["", "lemma strongly_connectedI[intro]:\n  assumes \"verts G \\<noteq> {}\" \"\\<And>u v. u \\<in> verts G \\<Longrightarrow> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  shows \"strongly_connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected G", "using assms"], ["proof (prove)\nusing this:\n  verts G \\<noteq> {}\n  \\<lbrakk>?u \\<in> verts G; ?v \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> ?v\n\ngoal (1 subgoal):\n 1. strongly_connected G", "by (simp add: strongly_connected_def)"], ["", "lemma strongly_connectedE[elim]:\n  assumes \"strongly_connected G\"\n  assumes \"(\\<And>u v. u \\<in> verts G \\<and> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v) \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  strongly_connected G\n  (\\<And>u v.\n      u \\<in> verts G \\<and> v \\<in> verts G \\<Longrightarrow>\n      u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v) \\<Longrightarrow>\n  P\n\ngoal (1 subgoal):\n 1. P", "by (auto simp add: strongly_connected_def)"], ["", "lemma subgraph_imp_subverts:\n  assumes \"subgraph H G\"\n  shows \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "by (simp add: subgraph_def)"], ["", "lemma induced_imp_subgraph:\n  assumes \"induced_subgraph H G\"\n  shows \"subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H G", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph H G", "by (simp add: induced_subgraph_def)"], ["", "lemma (in pre_digraph) in_sccs_imp_induced:\n  assumes \"c \\<in> sccs\"\n  shows \"induced_subgraph c G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph c G", "using assms"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n\ngoal (1 subgoal):\n 1. induced_subgraph c G", "by (auto simp: sccs_def)"], ["", "lemma spanning_tree_imp_tree[dest]:\n  assumes \"spanning_tree H G\"\n  shows \"tree H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tree H", "using assms"], ["proof (prove)\nusing this:\n  spanning_tree H G\n\ngoal (1 subgoal):\n 1. tree H", "by (simp add: spanning_tree_def)"], ["", "lemma tree_imp_connected[dest]:\n  assumes \"tree G\"\n  shows \"connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "using assms"], ["proof (prove)\nusing this:\n  tree G\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "by (simp add: tree_def)"], ["", "lemma spanning_treeI[intro]:\n  assumes \"spanning H G\"\n  assumes \"tree H\"\n  shows \"spanning_tree H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spanning_tree H G", "using assms"], ["proof (prove)\nusing this:\n  spanning H G\n  tree H\n\ngoal (1 subgoal):\n 1. spanning_tree H G", "by (simp add: spanning_tree_def)"], ["", "lemma spanning_treeE[elim]:\n  assumes \"spanning_tree H G\"\n  assumes \"tree H \\<and> spanning H G \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  spanning_tree H G\n  tree H \\<and> spanning H G \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (simp add: spanning_tree_def)"], ["", "lemma spanningE[elim]:\n  assumes \"spanning H G\"\n  assumes \"subgraph H G \\<and> verts G = verts H \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  spanning H G\n  subgraph H G \\<and> verts G = verts H \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (simp add: spanning_def)"], ["", "lemma (in pre_digraph) in_sccsI[intro]:\n  assumes \"induced_subgraph c G\"\n  assumes \"strongly_connected c\"\n  assumes \"\\<not>(\\<exists>c'. induced_subgraph c' G \\<and> strongly_connected c' \\<and>\n    verts c \\<subset> verts c')\"\n  shows \"c \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> sccs", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph c G\n  strongly_connected c\n  \\<nexists>c'.\n     induced_subgraph c' G \\<and>\n     strongly_connected c' \\<and> verts c \\<subset> verts c'\n\ngoal (1 subgoal):\n 1. c \\<in> sccs", "by (auto simp add: sccs_def)"], ["", "lemma (in pre_digraph) in_sccsE[elim]:\n  assumes \"c \\<in> sccs\"\n  assumes \"induced_subgraph c G \\<Longrightarrow> strongly_connected c \\<Longrightarrow> \\<not> (\\<exists>d.\n    induced_subgraph d G \\<and> strongly_connected d \\<and> verts c \\<subset> verts d) \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  \\<lbrakk>induced_subgraph c G; strongly_connected c;\n   \\<nexists>d.\n      induced_subgraph d G \\<and>\n      strongly_connected d \\<and> verts c \\<subset> verts d\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (simp add: sccs_def)"], ["", "lemma subgraphI:\n  assumes \"verts H \\<subseteq> verts G\"\n  assumes \"arcs H \\<subseteq> arcs G\"\n  assumes \"compatible G H\"\n  assumes \"wf_digraph H\"\n  assumes \"wf_digraph G\"\n  shows \"subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H G", "using assms"], ["proof (prove)\nusing this:\n  verts H \\<subseteq> verts G\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  wf_digraph H\n  wf_digraph G\n\ngoal (1 subgoal):\n 1. subgraph H G", "by (auto simp add: subgraph_def)"], ["", "lemma subgraphE[elim]:\n  assumes \"subgraph H G\"\n  obtains \"verts H \\<subseteq> verts G\" \"arcs H \\<subseteq> arcs G\" \"compatible G H\" \"wf_digraph H\" \"wf_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>verts H \\<subseteq> verts G; arcs H \\<subseteq> arcs G;\n      compatible G H; wf_digraph H; wf_digraph G\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>verts H \\<subseteq> verts G; arcs H \\<subseteq> arcs G;\n      compatible G H; wf_digraph H; wf_digraph G\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: subgraph_def)"], ["", "lemma induced_subgraphI[intro]:\n  assumes \"subgraph H G\"\n  assumes \"arcs H = {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\"\n  shows \"induced_subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n  arcs H =\n  {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "unfolding induced_subgraph_def"], ["proof (prove)\nusing this:\n  subgraph H G\n  arcs H =\n  {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\n\ngoal (1 subgoal):\n 1. subgraph H G \\<and>\n    arcs H =\n    {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}", "by safe"], ["", "lemma induced_subgraphE[elim]:\n  assumes \"induced_subgraph H G\"\n  assumes \"\\<lbrakk>subgraph H G; arcs H = {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\\<rbrakk> \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n  \\<lbrakk>subgraph H G;\n   arcs H =\n   {e \\<in> arcs G.\n    tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (auto simp add: induced_subgraph_def)"], ["", "lemma pverts_mk_symmetric[simp]: \"pverts (mk_symmetric G) = verts G\"\n  and parcs_mk_symmetric:\n    \"parcs (mk_symmetric G) = (\\<Union>e\\<in>arcs G. {(tail G e, head G e), (head G e, tail G e)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts (mk_symmetric G) = verts G &&&\n    parcs (mk_symmetric G) =\n    (\\<Union>e\\<in>arcs G. {(tail G e, head G e), (head G e, tail G e)})", "by (auto simp: mk_symmetric_def arcs_ends_conv image_UN)"], ["", "lemma arcs_ends_mono:\n  assumes \"subgraph H G\"\n  shows \"arcs_ends H \\<subseteq> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends H \\<subseteq> arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs_ends H \\<subseteq> arcs_ends G", "by (auto simp add: subgraph_def arcs_ends_conv compatible_tail compatible_head)"], ["", "lemma (in wf_digraph) subgraph_refl: \"subgraph G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G G", "by (auto simp: subgraph_def compatible_def) unfold_locales"], ["", "lemma (in wf_digraph) induced_subgraph_refl: \"induced_subgraph G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph G G", "by (rule induced_subgraphI) (auto simp: subgraph_refl)"], ["", "subsection \\<open>The underlying symmetric graph of a digraph\\<close>"], ["", "lemma (in wf_digraph) wellformed_mk_symmetric[intro]: \"pair_wf_digraph (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric G)", "by unfold_locales (auto simp: parcs_mk_symmetric)"], ["", "lemma (in fin_digraph) pair_fin_digraph_mk_symmetric[intro]: \"pair_fin_digraph (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "have \"finite ((\\<lambda>(a,b). (b,a)) ` arcs_ends G)\" (is \"finite ?X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)", "by (auto simp: arcs_ends_conv)"], ["proof (state)\nthis:\n  finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)\n\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "also"], ["proof (state)\nthis:\n  finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)\n\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "have \"?X = {(a, b). (b, a) \\<in> arcs_ends G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(a, b). (b, a)) ` arcs_ends G = {(a, b). b \\<rightarrow> a}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>(a, b). (b, a)) ` arcs_ends G = {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "finally"], ["proof (chain)\npicking this:\n  finite {(a, b). b \\<rightarrow> a}", "have X: \"finite ...\""], ["proof (prove)\nusing this:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. finite {(a, b). b \\<rightarrow> a}", "."], ["proof (state)\nthis:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "then"], ["proof (chain)\npicking this:\n  finite {(a, b). b \\<rightarrow> a}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_fin_digraph (mk_symmetric G)", "by unfold_locales (auto simp: mk_symmetric_def arcs_ends_conv)"], ["proof (state)\nthis:\n  pair_fin_digraph (mk_symmetric G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph) digraph_mk_symmetric[intro]: \"pair_digraph (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "have \"finite ((\\<lambda>(a,b). (b,a)) ` arcs_ends G)\" (is \"finite ?X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)", "by (auto simp: arcs_ends_conv)"], ["proof (state)\nthis:\n  finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)\n\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "also"], ["proof (state)\nthis:\n  finite ((\\<lambda>(a, b). (b, a)) ` arcs_ends G)\n\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "have \"?X = {(a, b). (b, a) \\<in> arcs_ends G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(a, b). (b, a)) ` arcs_ends G = {(a, b). b \\<rightarrow> a}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>(a, b). (b, a)) ` arcs_ends G = {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "finally"], ["proof (chain)\npicking this:\n  finite {(a, b). b \\<rightarrow> a}", "have \"finite ...\""], ["proof (prove)\nusing this:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. finite {(a, b). b \\<rightarrow> a}", "."], ["proof (state)\nthis:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "then"], ["proof (chain)\npicking this:\n  finite {(a, b). b \\<rightarrow> a}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {(a, b). b \\<rightarrow> a}\n\ngoal (1 subgoal):\n 1. pair_digraph (mk_symmetric G)", "by unfold_locales (auto simp: mk_symmetric_def arc_to_ends_def dest: no_loops)"], ["proof (state)\nthis:\n  pair_digraph (mk_symmetric G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) reachable_mk_symmetricI:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "have \"arcs_ends G \\<subseteq> parcs (mk_symmetric G)\"\n       \"(u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends G \\<subseteq> parcs (mk_symmetric G) &&&\n    (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. arcs_ends G \\<subseteq> parcs (mk_symmetric G) &&&\n    (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. arcs_ends G \\<subseteq> parcs (mk_symmetric G) &&&\n    (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)", "by (auto simp: parcs_mk_symmetric)"], ["proof (state)\nthis:\n  arcs_ends G \\<subseteq> parcs (mk_symmetric G)\n  (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  arcs_ends G \\<subseteq> parcs (mk_symmetric G)\n  (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)", "show ?thesis"], ["proof (prove)\nusing this:\n  arcs_ends G \\<subseteq> parcs (mk_symmetric G)\n  (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  arcs_ends G \\<subseteq> parcs (mk_symmetric G)\n  (u, v) \\<in> rtrancl_on (pverts (mk_symmetric G)) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> rtrancl_on (verts (with_proj (mk_symmetric G)))\n           (arcs_ends (with_proj (mk_symmetric G)))", "by (auto intro: rtrancl_on_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) adj_mk_symmetric_eq:\n  \"symmetric G \\<Longrightarrow> parcs (mk_symmetric G) = arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric G \\<Longrightarrow> parcs (mk_symmetric G) = arcs_ends G", "by (auto simp: parcs_mk_symmetric in_arcs_imp_in_arcs_ends arcs_ends_symmetric)"], ["", "lemma (in wf_digraph) reachable_mk_symmetric_eq:\n  assumes \"symmetric G\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v \\<longleftrightarrow> u \\<rightarrow>\\<^sup>* v\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v) =\n    (u \\<rightarrow>\\<^sup>* v)", "using adj_mk_symmetric_eq[OF assms]"], ["proof (prove)\nusing this:\n  parcs (mk_symmetric G) = arcs_ends G\n\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v) =\n    (u \\<rightarrow>\\<^sup>* v)", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  parcs (mk_symmetric G) = arcs_ends G\n\ngoal (1 subgoal):\n 1. ((u, v)\n     \\<in> rtrancl_on (verts (with_proj (mk_symmetric G)))\n            (arcs_ends (with_proj (mk_symmetric G)))) =\n    ((u, v) \\<in> rtrancl_on (verts G) (arcs_ends G))", "by auto"], ["", "lemma (in wf_digraph) mk_symmetric_awalk_imp_awalk:\n  assumes sym: \"symmetric G\"\n  assumes walk: \"pre_digraph.awalk (mk_symmetric G) u p v\"\n  obtains q where \"awalk u q v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q. awalk u q v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q. awalk u q v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "interpret S: pair_wf_digraph \"mk_symmetric G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>q. awalk u q v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "from walk"], ["proof (chain)\npicking this:\n  S.awalk u p v", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\""], ["proof (prove)\nusing this:\n  S.awalk u p v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "by (simp only: S.reachable_awalk) rule"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>q. awalk u q v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "have \"u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by (simp only: reachable_mk_symmetric_eq[OF sym])"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. (\\<And>q. awalk u q v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: reachable_awalk intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma symmetric_mk_symmetric:\n  \"symmetric (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric (with_proj (mk_symmetric G))", "by (auto simp: symmetric_def parcs_mk_symmetric intro: symI)"], ["", "subsection \\<open>Subgraphs and Induced Subgraphs\\<close>"], ["", "lemma subgraph_trans:\n  assumes \"subgraph G H\" \"subgraph H I\" shows \"subgraph G I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G I", "using assms"], ["proof (prove)\nusing this:\n  subgraph G H\n  subgraph H I\n\ngoal (1 subgoal):\n 1. subgraph G I", "by (auto simp: subgraph_def compatible_def)"], ["", "text \\<open>\n  The @{term digraph} and @{term fin_digraph} properties are preserved under\n  the (inverse) subgraph relation\n\\<close>"], ["", "lemma (in fin_digraph) fin_digraph_subgraph:\n  assumes \"subgraph H G\" shows \"fin_digraph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph H", "proof (intro_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph H\n 2. fin_digraph_axioms H", "from assms"], ["proof (chain)\npicking this:\n  subgraph H G", "show \"wf_digraph H\""], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by auto"], ["proof (state)\nthis:\n  wf_digraph H\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms H", "have HG: \"arcs H \\<subseteq> arcs G\" \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms H", "then"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G", "have \"finite (verts H)\" \"finite (arcs H)\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. finite (verts H) &&& finite (arcs H)", "using finite_verts finite_arcs"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  finite (verts G)\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. finite (verts H) &&& finite (arcs H)", "by (blast intro: finite_subset)+"], ["proof (state)\nthis:\n  finite (verts H)\n  finite (arcs H)\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms H", "then"], ["proof (chain)\npicking this:\n  finite (verts H)\n  finite (arcs H)", "show \"fin_digraph_axioms H\""], ["proof (prove)\nusing this:\n  finite (verts H)\n  finite (arcs H)\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms H", "by unfold_locales"], ["proof (state)\nthis:\n  fin_digraph_axioms H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph) digraph_subgraph:\n  assumes \"subgraph H G\" shows \"digraph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph H", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<in> verts H\n 2. \\<And>e. e \\<in> arcs H \\<Longrightarrow> head H e \\<in> verts H\n 3. finite (verts H)\n 4. finite (arcs H)\n 5. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 6. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "fix e"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<in> verts H\n 2. \\<And>e. e \\<in> arcs H \\<Longrightarrow> head H e \\<in> verts H\n 3. finite (verts H)\n 4. finite (arcs H)\n 5. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 6. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "assume e: \"e \\<in> arcs H\""], ["proof (state)\nthis:\n  e \\<in> arcs H\n\ngoal (6 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<in> verts H\n 2. \\<And>e. e \\<in> arcs H \\<Longrightarrow> head H e \\<in> verts H\n 3. finite (verts H)\n 4. finite (arcs H)\n 5. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 6. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  e \\<in> arcs H", "show \"tail H e \\<in> verts H\" \"head H e \\<in> verts H\""], ["proof (prove)\nusing this:\n  subgraph H G\n  e \\<in> arcs H\n\ngoal (1 subgoal):\n 1. tail H e \\<in> verts H &&& head H e \\<in> verts H", "by (auto simp: subgraph_def intro: wf_digraph.wellformed)"], ["proof (state)\nthis:\n  tail H e \\<in> verts H\n  head H e \\<in> verts H\n\ngoal (4 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 4. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "from e and assms"], ["proof (chain)\npicking this:\n  e \\<in> arcs H\n  subgraph H G", "have \"e \\<in> arcs H \\<inter> arcs G\""], ["proof (prove)\nusing this:\n  e \\<in> arcs H\n  subgraph H G\n\ngoal (1 subgoal):\n 1. e \\<in> arcs H \\<inter> arcs G", "by auto"], ["proof (state)\nthis:\n  e \\<in> arcs H \\<inter> arcs G\n\ngoal (4 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 4. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  e \\<in> arcs H \\<inter> arcs G", "show \"tail H e \\<noteq> head H e\""], ["proof (prove)\nusing this:\n  subgraph H G\n  e \\<in> arcs H \\<inter> arcs G\n\ngoal (1 subgoal):\n 1. tail H e \\<noteq> head H e", "using no_loops"], ["proof (prove)\nusing this:\n  subgraph H G\n  e \\<in> arcs H \\<inter> arcs G\n  ?e \\<in> arcs G \\<Longrightarrow> tail G ?e \\<noteq> head G ?e\n\ngoal (1 subgoal):\n 1. tail H e \\<noteq> head H e", "by (auto simp: subgraph_def compatible_def arc_to_ends_def)"], ["proof (state)\nthis:\n  tail H e \\<noteq> head H e\n\ngoal (3 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "have \"arcs H \\<subseteq> arcs G\" \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (3 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "then"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G", "show \"finite (arcs H)\" \"finite (verts H)\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. finite (arcs H) &&& finite (verts H)", "using finite_verts finite_arcs"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  finite (verts G)\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. finite (arcs H) &&& finite (verts H)", "by (blast intro: finite_subset)+"], ["proof (state)\nthis:\n  finite (arcs H)\n  finite (verts H)\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "fix e1 e2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "assume \"e1 \\<in> arcs H\" \"e2 \\<in> arcs H\"\n    and eq: \"arc_to_ends H e1 = arc_to_ends H e2\""], ["proof (state)\nthis:\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2", "have \"e1 \\<in> arcs H \\<inter> arcs G\" \"e2 \\<in> arcs H \\<inter> arcs G\""], ["proof (prove)\nusing this:\n  subgraph H G\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2\n\ngoal (1 subgoal):\n 1. e1 \\<in> arcs H \\<inter> arcs G &&& e2 \\<in> arcs H \\<inter> arcs G", "by auto"], ["proof (state)\nthis:\n  e1 \\<in> arcs H \\<inter> arcs G\n  e2 \\<in> arcs H \\<inter> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with eq"], ["proof (chain)\npicking this:\n  arc_to_ends H e1 = arc_to_ends H e2\n  e1 \\<in> arcs H \\<inter> arcs G\n  e2 \\<in> arcs H \\<inter> arcs G", "show \"e1 = e2\""], ["proof (prove)\nusing this:\n  arc_to_ends H e1 = arc_to_ends H e2\n  e1 \\<in> arcs H \\<inter> arcs G\n  e2 \\<in> arcs H \\<inter> arcs G\n\ngoal (1 subgoal):\n 1. e1 = e2", "using no_multi_arcs assms"], ["proof (prove)\nusing this:\n  arc_to_ends H e1 = arc_to_ends H e2\n  e1 \\<in> arcs H \\<inter> arcs G\n  e2 \\<in> arcs H \\<inter> arcs G\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n  subgraph H G\n\ngoal (1 subgoal):\n 1. e1 = e2", "by (auto simp: subgraph_def compatible_def arc_to_ends_def)"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) adj_mono:\n  assumes \"u \\<rightarrow>\\<^bsub>H\\<^esub> v\" \"subgraph H G\"\n  shows \"u \\<rightarrow> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow> v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>H\\<^esub> v\n  subgraph H G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow> v", "by (blast dest: arcs_ends_mono)"], ["", "lemma (in pre_digraph) reachable_mono:\n  assumes walk: \"u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\" and sub: \"subgraph H G\"\n  shows \"u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "have \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "using sub"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "with assms"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\n  subgraph H G\n  verts H \\<subseteq> verts G", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\n  subgraph H G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts H) (arcs_ends H)\n  subgraph H G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)", "by (metis arcs_ends_mono rtrancl_on_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Arc walks and paths are preserved under the subgraph relation.\n\\<close>"], ["", "lemma (in wf_digraph) subgraph_awalk_imp_awalk:\n  assumes walk: \"pre_digraph.awalk H u p v\"\n  assumes sub: \"subgraph H G\"\n  shows \"awalk u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. awalk u p v", "using assms"], ["proof (prove)\nusing this:\n  pre_digraph.awalk H u p v\n  subgraph H G\n\ngoal (1 subgoal):\n 1. awalk u p v", "by (auto simp: pre_digraph.awalk_def compatible_cas)"], ["", "lemma (in wf_digraph) subgraph_apath_imp_apath:\n  assumes path: \"pre_digraph.apath H u p v\"\n  assumes sub: \"subgraph H G\"\n  shows \"apath u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apath u p v", "using assms"], ["proof (prove)\nusing this:\n  pre_digraph.apath H u p v\n  subgraph H G\n\ngoal (1 subgoal):\n 1. apath u p v", "unfolding pre_digraph.apath_def"], ["proof (prove)\nusing this:\n  pre_digraph.awalk H u p v \\<and> distinct (pre_digraph.awalk_verts H u p)\n  subgraph H G\n\ngoal (1 subgoal):\n 1. awalk u p v \\<and> distinct (awalk_verts u p)", "by (auto intro: subgraph_awalk_imp_awalk simp: compatible_awalk_verts)"], ["", "lemma subgraph_mk_symmetric:\n  assumes \"subgraph H G\"\n  shows \"subgraph (mk_symmetric H) (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))", "proof (rule subgraphI)"], ["proof (state)\ngoal (5 subgoals):\n 1. verts (with_proj (mk_symmetric H))\n    \\<subseteq> verts (with_proj (mk_symmetric G))\n 2. arcs (with_proj (mk_symmetric H))\n    \\<subseteq> arcs (with_proj (mk_symmetric G))\n 3. compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))\n 4. wf_digraph (with_proj (mk_symmetric H))\n 5. wf_digraph (with_proj (mk_symmetric G))", "let ?wpms = \"\\<lambda>G. mk_symmetric G\""], ["proof (state)\ngoal (5 subgoals):\n 1. verts (with_proj (mk_symmetric H))\n    \\<subseteq> verts (with_proj (mk_symmetric G))\n 2. arcs (with_proj (mk_symmetric H))\n    \\<subseteq> arcs (with_proj (mk_symmetric G))\n 3. compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))\n 4. wf_digraph (with_proj (mk_symmetric H))\n 5. wf_digraph (with_proj (mk_symmetric G))", "from assms"], ["proof (chain)\npicking this:\n  subgraph H G", "have \"compatible G H\""], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. compatible G H", "by auto"], ["proof (state)\nthis:\n  compatible G H\n\ngoal (5 subgoals):\n 1. verts (with_proj (mk_symmetric H))\n    \\<subseteq> verts (with_proj (mk_symmetric G))\n 2. arcs (with_proj (mk_symmetric H))\n    \\<subseteq> arcs (with_proj (mk_symmetric G))\n 3. compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))\n 4. wf_digraph (with_proj (mk_symmetric H))\n 5. wf_digraph (with_proj (mk_symmetric G))", "with assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  compatible G H", "show \"verts (?wpms H)  \\<subseteq> verts (?wpms G)\"\n    and \"arcs (?wpms H) \\<subseteq> arcs (?wpms G)\""], ["proof (prove)\nusing this:\n  subgraph H G\n  compatible G H\n\ngoal (1 subgoal):\n 1. verts (with_proj (mk_symmetric H))\n    \\<subseteq> verts (with_proj (mk_symmetric G)) &&&\n    arcs (with_proj (mk_symmetric H))\n    \\<subseteq> arcs (with_proj (mk_symmetric G))", "by (auto simp: parcs_mk_symmetric compatible_head compatible_tail)"], ["proof (state)\nthis:\n  verts (with_proj (mk_symmetric H))\n  \\<subseteq> verts (with_proj (mk_symmetric G))\n  arcs (with_proj (mk_symmetric H))\n  \\<subseteq> arcs (with_proj (mk_symmetric G))\n\ngoal (3 subgoals):\n 1. compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))\n 2. wf_digraph (with_proj (mk_symmetric H))\n 3. wf_digraph (with_proj (mk_symmetric G))", "show \"compatible (?wpms G) (?wpms H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))", "by rule"], ["proof (state)\nthis:\n  compatible (with_proj (mk_symmetric G)) (with_proj (mk_symmetric H))\n\ngoal (2 subgoals):\n 1. wf_digraph (with_proj (mk_symmetric H))\n 2. wf_digraph (with_proj (mk_symmetric G))", "interpret H: pair_wf_digraph \"mk_symmetric H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric H)", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric H)", "by (auto intro: wf_digraph.wellformed_mk_symmetric)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (with_proj (mk_symmetric H))\n 2. wf_digraph (with_proj (mk_symmetric G))", "interpret G: pair_wf_digraph \"mk_symmetric G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric G)", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric G)", "by (auto intro: wf_digraph.wellformed_mk_symmetric)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (with_proj (mk_symmetric H))\n 2. wf_digraph (with_proj (mk_symmetric G))", "show \"wf_digraph (?wpms H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (with_proj (mk_symmetric H))", "by unfold_locales"], ["proof (state)\nthis:\n  wf_digraph (with_proj (mk_symmetric H))\n\ngoal (1 subgoal):\n 1. wf_digraph (with_proj (mk_symmetric G))", "show \"wf_digraph (?wpms G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (with_proj (mk_symmetric G))", "by unfold_locales"], ["proof (state)\nthis:\n  wf_digraph (with_proj (mk_symmetric G))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in fin_digraph) subgraph_in_degree:\n  assumes \"subgraph H G\"\n  shows \"in_degree H v \\<le> in_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "have \"finite (in_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (in_arcs G v)", "by auto"], ["proof (state)\nthis:\n  finite (in_arcs G v)\n\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "moreover"], ["proof (state)\nthis:\n  finite (in_arcs G v)\n\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "have \"in_arcs H v \\<subseteq> in_arcs G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs H v \\<subseteq> in_arcs G v", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. in_arcs H v \\<subseteq> in_arcs G v", "by (auto simp: subgraph_def in_arcs_def compatible_head compatible_tail)"], ["proof (state)\nthis:\n  in_arcs H v \\<subseteq> in_arcs G v\n\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "ultimately"], ["proof (chain)\npicking this:\n  finite (in_arcs G v)\n  in_arcs H v \\<subseteq> in_arcs G v", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (in_arcs G v)\n  in_arcs H v \\<subseteq> in_arcs G v\n\ngoal (1 subgoal):\n 1. in_degree H v \\<le> in_degree G v", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  finite (in_arcs G v)\n  in_arcs H v \\<subseteq> in_arcs G v\n\ngoal (1 subgoal):\n 1. card (in_arcs H v) \\<le> card (in_arcs G v)", "by (rule card_mono)"], ["proof (state)\nthis:\n  in_degree H v \\<le> in_degree G v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) subgraph_cycle:\n  assumes \"subgraph H G\" \"pre_digraph.cycle H p \" shows \"cycle p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cycle p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cycle p", "from assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  pre_digraph.cycle H p", "have \"compatible G H\""], ["proof (prove)\nusing this:\n  subgraph H G\n  pre_digraph.cycle H p\n\ngoal (1 subgoal):\n 1. compatible G H", "by auto"], ["proof (state)\nthis:\n  compatible G H\n\ngoal (1 subgoal):\n 1. cycle p", "with assms"], ["proof (chain)\npicking this:\n  subgraph H G\n  pre_digraph.cycle H p\n  compatible G H", "show ?thesis"], ["proof (prove)\nusing this:\n  subgraph H G\n  pre_digraph.cycle H p\n  compatible G H\n\ngoal (1 subgoal):\n 1. cycle p", "by (auto simp: pre_digraph.cycle_def compatible_awalk_verts intro: subgraph_awalk_imp_awalk)"], ["proof (state)\nthis:\n  cycle p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) subgraph_del_vert: \"subgraph (del_vert u) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (del_vert u) G", "by (auto simp: subgraph_def compatible_def del_vert_simps wf_digraph_del_vert) intro_locales"], ["", "lemma (in wf_digraph) subgraph_del_arc: \"subgraph (del_arc a) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (del_arc a) G", "by (auto simp: subgraph_def compatible_def del_vert_simps wf_digraph_del_vert) intro_locales"], ["", "subsection \\<open>Induced subgraphs\\<close>"], ["", "lemma wf_digraphI_induced:\n  assumes \"induced_subgraph H G\"\n  shows \"wf_digraph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_digraph H", "from assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G", "have \"compatible G H\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. compatible G H", "by auto"], ["proof (state)\nthis:\n  compatible G H\n\ngoal (1 subgoal):\n 1. wf_digraph H", "with assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G\n  compatible G H", "show ?thesis"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n  compatible G H\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by unfold_locales (auto simp: compatible_tail compatible_head)"], ["proof (state)\nthis:\n  wf_digraph H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph) digraphI_induced:\n  assumes \"induced_subgraph H G\"\n  shows \"digraph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph H", "interpret W: wf_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by (rule wf_digraphI_induced)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph H", "from assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G", "have \"compatible G H\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. compatible G H", "by auto"], ["proof (state)\nthis:\n  compatible G H\n\ngoal (1 subgoal):\n 1. digraph H", "from assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G", "have arcs: \"arcs H \\<subseteq> arcs G\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G", "by blast"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. digraph H", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph H", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 4. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "from assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G", "have \"verts H \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "by blast"], ["proof (state)\nthis:\n  verts H \\<subseteq> verts G\n\ngoal (4 subgoals):\n 1. finite (verts H)\n 2. finite (arcs H)\n 3. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 4. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "then"], ["proof (chain)\npicking this:\n  verts H \\<subseteq> verts G", "show \"finite (verts H)\""], ["proof (prove)\nusing this:\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. finite (verts H)", "using finite_verts"], ["proof (prove)\nusing this:\n  verts H \\<subseteq> verts G\n  finite (verts G)\n\ngoal (1 subgoal):\n 1. finite (verts H)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (verts H)\n\ngoal (3 subgoals):\n 1. finite (arcs H)\n 2. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 3. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (arcs H)\n 2. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 3. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "from arcs"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G", "show \"finite (arcs H)\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. finite (arcs H)", "using finite_arcs"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. finite (arcs H)", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite (arcs H)\n\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 2. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 2. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "fix e"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 2. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "assume \"e \\<in> arcs H\""], ["proof (state)\nthis:\n  e \\<in> arcs H\n\ngoal (2 subgoals):\n 1. \\<And>e. e \\<in> arcs H \\<Longrightarrow> tail H e \\<noteq> head H e\n 2. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with arcs \\<open>compatible G H\\<close>"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  e \\<in> arcs H", "show \"tail H e \\<noteq> head H e\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  e \\<in> arcs H\n\ngoal (1 subgoal):\n 1. tail H e \\<noteq> head H e", "by (auto dest: no_loops simp: compatible_tail[symmetric] compatible_head[symmetric])"], ["proof (state)\nthis:\n  tail H e \\<noteq> head H e\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "fix e1 e2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "assume \"e1 \\<in> arcs H\" \"e2 \\<in> arcs H\" and ate: \"arc_to_ends H e1 = arc_to_ends H e2\""], ["proof (state)\nthis:\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2.\n       \\<lbrakk>e1 \\<in> arcs H; e2 \\<in> arcs H;\n        arc_to_ends H e1 = arc_to_ends H e2\\<rbrakk>\n       \\<Longrightarrow> e1 = e2", "with arcs \\<open>compatible G H\\<close>"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2", "show \"e1 = e2\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "using ate"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  compatible G H\n  e1 \\<in> arcs H\n  e2 \\<in> arcs H\n  arc_to_ends H e1 = arc_to_ends H e2\n  arc_to_ends H e1 = arc_to_ends H e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "by (auto intro: no_multi_arcs simp: compatible_tail[symmetric] compatible_head[symmetric] arc_to_ends_def)"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  digraph H\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Computes the subgraph of @{term G} induced by @{term vs}\\<close>"], ["", "definition induce_subgraph :: \"('a,'b) pre_digraph \\<Rightarrow> 'a set \\<Rightarrow> ('a,'b) pre_digraph\" (infix \"\\<restriction>\" 67) where\n  \"G \\<restriction> vs = \\<lparr> verts = vs, arcs = {e \\<in> arcs G. tail G e \\<in> vs \\<and> head G e \\<in> vs},\n    tail = tail G, head = head G \\<rparr>\""], ["", "lemma induce_subgraph_verts[simp]:\n \"verts (G \\<restriction> vs) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts (G \\<restriction> vs) = vs", "by (auto simp add: induce_subgraph_def)"], ["", "lemma induce_subgraph_arcs[simp]:\n \"arcs (G \\<restriction> vs) = {e \\<in> arcs G. tail G e \\<in> vs \\<and> head G e \\<in> vs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs (G \\<restriction> vs) =\n    {e \\<in> arcs G. tail G e \\<in> vs \\<and> head G e \\<in> vs}", "by (auto simp add: induce_subgraph_def)"], ["", "lemma induce_subgraph_tail[simp]:\n  \"tail (G \\<restriction> vs) = tail G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (G \\<restriction> vs) = tail G", "by (auto simp: induce_subgraph_def)"], ["", "lemma induce_subgraph_head[simp]:\n  \"head (G \\<restriction> vs) = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (G \\<restriction> vs) = head G", "by (auto simp: induce_subgraph_def)"], ["", "lemma compatible_induce_subgraph: \"compatible (G \\<restriction> S) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible (G \\<restriction> S) G", "by (auto simp: compatible_def)"], ["", "lemma (in wf_digraph) induced_induce[intro]:\n  assumes \"vs \\<subseteq> verts G\"\n  shows \"induced_subgraph (G \\<restriction> vs) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> vs) G", "using assms"], ["proof (prove)\nusing this:\n  vs \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> vs) G", "by (intro subgraphI induced_subgraphI)\n   (auto simp: arc_to_ends_def induce_subgraph_def wf_digraph_def compatible_def)"], ["", "lemma (in wf_digraph) wellformed_induce_subgraph[intro]:\n  \"wf_digraph (G \\<restriction> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> vs)", "by unfold_locales auto"], ["", "lemma induced_graph_imp_symmetric:\n  assumes \"symmetric G\"\n  assumes \"induced_subgraph H G\"\n  shows \"symmetric H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric H", "proof (unfold symmetric_conv, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "from assms"], ["proof (chain)\npicking this:\n  symmetric G\n  induced_subgraph H G", "have \"compatible G H\""], ["proof (prove)\nusing this:\n  symmetric G\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. compatible G H", "by auto"], ["proof (state)\nthis:\n  compatible G H\n\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "fix e1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "assume \"e1 \\<in> arcs H\""], ["proof (state)\nthis:\n  e1 \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "then"], ["proof (chain)\npicking this:\n  e1 \\<in> arcs H", "obtain e2 where \"tail G e1 = head G e2\"  \"head G e1 = tail G e2\" \"e2 \\<in> arcs G\""], ["proof (prove)\nusing this:\n  e1 \\<in> arcs H\n\ngoal (1 subgoal):\n 1. (\\<And>e2.\n        \\<lbrakk>tail G e1 = head G e2; head G e1 = tail G e2;\n         e2 \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  e1 \\<in> arcs H\n  symmetric G\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. (\\<And>e2.\n        \\<lbrakk>tail G e1 = head G e2; head G e1 = tail G e2;\n         e2 \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: symmetric_conv)"], ["proof (state)\nthis:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "moreover"], ["proof (state)\nthis:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "then"], ["proof (chain)\npicking this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G", "have \"e2 \\<in> arcs H\""], ["proof (prove)\nusing this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. e2 \\<in> arcs H", "using assms and \\<open>e1 \\<in> arcs H\\<close>"], ["proof (prove)\nusing this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n  symmetric G\n  induced_subgraph H G\n  e1 \\<in> arcs H\n\ngoal (1 subgoal):\n 1. e2 \\<in> arcs H", "by auto"], ["proof (state)\nthis:\n  e2 \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<And>e1.\n       e1 \\<in> arcs H \\<Longrightarrow>\n       \\<exists>e2\\<in>arcs H.\n          tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "ultimately"], ["proof (chain)\npicking this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n  e2 \\<in> arcs H", "show \"\\<exists>e2\\<in>arcs H. tail H e1 = head H e2 \\<and> head H e1 = tail H e2\""], ["proof (prove)\nusing this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n  e2 \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<exists>e2\\<in>arcs H.\n       tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "using assms \\<open>e1 \\<in> arcs H\\<close> \\<open>compatible G H\\<close>"], ["proof (prove)\nusing this:\n  tail G e1 = head G e2\n  head G e1 = tail G e2\n  e2 \\<in> arcs G\n  e2 \\<in> arcs H\n  symmetric G\n  induced_subgraph H G\n  e1 \\<in> arcs H\n  compatible G H\n\ngoal (1 subgoal):\n 1. \\<exists>e2\\<in>arcs H.\n       tail H e1 = head H e2 \\<and> head H e1 = tail H e2", "by (auto simp: compatible_head compatible_tail)"], ["proof (state)\nthis:\n  \\<exists>e2\\<in>arcs H. tail H e1 = head H e2 \\<and> head H e1 = tail H e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sym_digraph) induced_graph_imp_graph:\n  assumes \"induced_subgraph H G\"\n  shows \"sym_digraph H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph H", "proof (rule wf_digraph.sym_digraphI)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph H\n 2. symmetric H", "from assms"], ["proof (chain)\npicking this:\n  induced_subgraph H G", "show \"wf_digraph H\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by (rule wf_digraphI_induced)"], ["proof (state)\nthis:\n  wf_digraph H\n\ngoal (1 subgoal):\n 1. symmetric H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric H", "show \"symmetric H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric H", "using assms sym_arcs"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n  symmetric G\n\ngoal (1 subgoal):\n 1. symmetric H", "by (auto intro: induced_graph_imp_symmetric)"], ["proof (state)\nthis:\n  symmetric H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) induce_reachable_preserves_paths:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w}\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>* w}\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>* w}\\<^esub> v", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. v \\<rightarrow>\\<^sup>* w}\\<^esub> v\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "case base"], ["proof (state)\nthis:\n  v \\<in> verts G\n\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. v \\<rightarrow>\\<^sup>* w}\\<^esub> v\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts G", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. v \\<rightarrow>\\<^sup>* w}\\<^esub> v", "by (auto simp: reachable_def)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. v \\<rightarrow>\\<^sup>* w}\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "case (step u w)"], ["proof (state)\nthis:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa}\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "interpret iG: wf_digraph \"G \\<restriction> {w. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> {w. u \\<rightarrow>\\<^sup>* w})", "by (rule wellformed_induce_subgraph)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "from \\<open>u \\<rightarrow> w\\<close>"], ["proof (chain)\npicking this:\n  u \\<rightarrow> w", "have \"u \\<rightarrow>\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> wa}\\<^esub> w\""], ["proof (prove)\nusing this:\n  u \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w", "by (auto simp: arcs_ends_conv reachable_def intro: wellformed rtrancl_on_into_rtrancl_on)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> wa}\\<^esub> w\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w", "by (rule iG.reachable_adjI)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "moreover"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "from step"], ["proof (chain)\npicking this:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa}\\<^esub> v", "have \"{x. w \\<rightarrow>\\<^sup>* x} \\<subseteq> {x. u \\<rightarrow>\\<^sup>* x}\""], ["proof (prove)\nusing this:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa}\\<^esub> v\n\ngoal (1 subgoal):\n 1. {x. w \\<rightarrow>\\<^sup>* x}\n    \\<subseteq> {x. u \\<rightarrow>\\<^sup>* x}", "by (auto intro: adj_reachable_trans)"], ["proof (state)\nthis:\n  {x. w \\<rightarrow>\\<^sup>* x} \\<subseteq> {x. u \\<rightarrow>\\<^sup>* x}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  {x. w \\<rightarrow>\\<^sup>* x} \\<subseteq> {x. u \\<rightarrow>\\<^sup>* x}", "have \"subgraph (G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa}) (G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa})\""], ["proof (prove)\nusing this:\n  {x. w \\<rightarrow>\\<^sup>* x} \\<subseteq> {x. u \\<rightarrow>\\<^sup>* x}\n\ngoal (1 subgoal):\n 1. subgraph (G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa})\n     (G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa})", "by (intro subgraphI) (auto simp: arcs_ends_conv compatible_def)"], ["proof (state)\nthis:\n  subgraph (G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa})\n   (G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa})\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  subgraph (G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa})\n   (G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa})", "have \"w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> v\""], ["proof (prove)\nusing this:\n  subgraph (G \\<restriction> {wa. w \\<rightarrow>\\<^sup>* wa})\n   (G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa})\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> v", "by (rule iG.reachable_mono[rotated]) fact"], ["proof (state)\nthis:\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. y \\<rightarrow>\\<^sup>* w}\\<^esub> v\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. x \\<rightarrow>\\<^sup>* w}\\<^esub> v", "ultimately"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> v", "show ?case"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> w\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {wa. u \\<rightarrow>\\<^sup>* wa}\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>* w}\\<^esub> v", "by (rule iG.reachable_trans)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {w. u \\<rightarrow>\\<^sup>* w}\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma induce_subgraph_ends[simp]:\n  \"arc_to_ends (G \\<restriction> S) = arc_to_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_ends (G \\<restriction> S) = arc_to_ends G", "by (auto simp: arc_to_ends_def)"], ["", "lemma dominates_induce_subgraphD:\n  assumes \"u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\" shows \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G\\<^esub> v", "by (auto simp: arcs_ends_def intro: rev_image_eqI)"], ["", "context wf_digraph begin"], ["", "lemma reachable_induce_subgraphD:\n    assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> verts G\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "interpret GS: wf_digraph \"G \\<restriction> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> S)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by induct (auto dest: dominates_induce_subgraphD intro: adj_reachable_trans)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dominates_induce_ss:\n    assumes \"u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> T\" shows \"u \\<rightarrow>\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G \\<restriction> T\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G \\<restriction> S\\<^esub> v\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G \\<restriction> T\\<^esub> v", "by (auto simp: arcs_ends_def)"], ["", "lemma reachable_induce_ss:\n    assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\" \"S \\<subseteq> T\" shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v)\n  \\<in> rtrancl_on (verts (G \\<restriction> S))\n         (arcs_ends (G \\<restriction> S))\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. (u, v)\n    \\<in> rtrancl_on (verts (G \\<restriction> T))\n           (arcs_ends (G \\<restriction> T))", "by induct (auto intro: dominates_induce_ss converse_rtrancl_on_into_rtrancl_on)"], ["", "lemma awalk_verts_induce:\n    \"pre_digraph.awalk_verts (G \\<restriction> S) = awalk_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (G \\<restriction> S) = awalk_verts", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts (G \\<restriction> S) x xa = awalk_verts x xa", "fix u p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       pre_digraph.awalk_verts (G \\<restriction> S) x xa = awalk_verts x xa", "show \"pre_digraph.awalk_verts (G \\<restriction> S) u p = awalk_verts u p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk_verts (G \\<restriction> S) u p = awalk_verts u p", "by (induct p arbitrary: u) (auto simp: pre_digraph.awalk_verts.simps)"], ["proof (state)\nthis:\n  pre_digraph.awalk_verts (G \\<restriction> S) u p = awalk_verts u p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in -) cas_subset:\n    assumes \"pre_digraph.cas G u p v\" \"subgraph G H\"\n    shows \"pre_digraph.cas H u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas H u p v", "using assms"], ["proof (prove)\nusing this:\n  pre_digraph.cas G u p v\n  subgraph G H\n\ngoal (1 subgoal):\n 1. pre_digraph.cas H u p v", "by (induct p arbitrary: u) (auto simp: pre_digraph.cas.simps subgraph_def compatible_def)"], ["", "lemma cas_induce:\n    assumes \"cas u p v\" \"set (awalk_verts u p) \\<subseteq> S\"\n    shows \"pre_digraph.cas (G \\<restriction> S) u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) u p v", "using assms"], ["proof (prove)\nusing this:\n  cas u p v\n  set (awalk_verts u p) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) u p v", "proof (induct p arbitrary: u S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u S.\n       \\<lbrakk>cas u [] v; set (awalk_verts u []) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u [] v\n 2. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "case Nil"], ["proof (state)\nthis:\n  cas u [] v\n  set (awalk_verts u []) \\<subseteq> S\n\ngoal (2 subgoals):\n 1. \\<And>u S.\n       \\<lbrakk>cas u [] v; set (awalk_verts u []) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u [] v\n 2. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "then"], ["proof (chain)\npicking this:\n  cas u [] v\n  set (awalk_verts u []) \\<subseteq> S", "show ?case"], ["proof (prove)\nusing this:\n  cas u [] v\n  set (awalk_verts u []) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) u [] v", "by (auto simp: pre_digraph.cas.simps)"], ["proof (state)\nthis:\n  pre_digraph.cas (G \\<restriction> S) u [] v\n\ngoal (1 subgoal):\n 1. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>cas ?u as v; set (awalk_verts ?u as) \\<subseteq> ?S\\<rbrakk>\n  \\<Longrightarrow> pre_digraph.cas (G \\<restriction> ?S) ?u as v\n  cas u (a # as) v\n  set (awalk_verts u (a # as)) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "have \"pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as)) (head G a) as v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n     (head G a) as v", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>cas ?u as v; set (awalk_verts ?u as) \\<subseteq> ?S\\<rbrakk>\n  \\<Longrightarrow> pre_digraph.cas (G \\<restriction> ?S) ?u as v\n  cas u (a # as) v\n  set (awalk_verts u (a # as)) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n     (head G a) as v", "by auto"], ["proof (state)\nthis:\n  pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n   (head G a) as v\n\ngoal (1 subgoal):\n 1. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "then"], ["proof (chain)\npicking this:\n  pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n   (head G a) as v", "have \"pre_digraph.cas (G \\<restriction> S) (head G a) as v\""], ["proof (prove)\nusing this:\n  pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n   (head G a) as v\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) (head G a) as v", "using \\<open>_ \\<subseteq> S\\<close>"], ["proof (prove)\nusing this:\n  pre_digraph.cas (G \\<restriction> set (awalk_verts (head G a) as))\n   (head G a) as v\n  set (awalk_verts u (a # as)) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) (head G a) as v", "by (rule_tac cas_subset) (auto simp: subgraph_def compatible_def)"], ["proof (state)\nthis:\n  pre_digraph.cas (G \\<restriction> S) (head G a) as v\n\ngoal (1 subgoal):\n 1. \\<And>a p u S.\n       \\<lbrakk>\\<And>u S.\n                   \\<lbrakk>cas u p v;\n                    set (awalk_verts u p) \\<subseteq> S\\<rbrakk>\n                   \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u\np v;\n        cas u (a # p) v; set (awalk_verts u (a # p)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> pre_digraph.cas (G \\<restriction> S) u (a # p) v", "then"], ["proof (chain)\npicking this:\n  pre_digraph.cas (G \\<restriction> S) (head G a) as v", "show ?case"], ["proof (prove)\nusing this:\n  pre_digraph.cas (G \\<restriction> S) (head G a) as v\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) u (a # as) v", "using Cons"], ["proof (prove)\nusing this:\n  pre_digraph.cas (G \\<restriction> S) (head G a) as v\n  \\<lbrakk>cas ?u as v; set (awalk_verts ?u as) \\<subseteq> ?S\\<rbrakk>\n  \\<Longrightarrow> pre_digraph.cas (G \\<restriction> ?S) ?u as v\n  cas u (a # as) v\n  set (awalk_verts u (a # as)) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pre_digraph.cas (G \\<restriction> S) u (a # as) v", "by (auto simp: pre_digraph.cas.simps)"], ["proof (state)\nthis:\n  pre_digraph.cas (G \\<restriction> S) u (a # as) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma awalk_induce:\n    assumes \"awalk u p v\" \"set (awalk_verts u p) \\<subseteq> S\"\n    shows \"pre_digraph.awalk (G \\<restriction> S) u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (G \\<restriction> S) u p v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph.awalk (G \\<restriction> S) u p v", "interpret GS: wf_digraph \"G \\<restriction> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> S)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. GS.awalk u p v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. GS.awalk u p v", "using assms"], ["proof (prove)\nusing this:\n  awalk u p v\n  set (awalk_verts u p) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. GS.awalk u p v", "by (auto simp: pre_digraph.awalk_def cas_induce GS.cas_induce set_awalk_verts)"], ["proof (state)\nthis:\n  GS.awalk u p v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraph_induce_subgraphI:\n    assumes \"V \\<subseteq> verts G\" shows \"subgraph (G \\<restriction> V) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (G \\<restriction> V) G", "by (metis assms induced_imp_subgraph induced_induce)"], ["", "end"], ["", "lemma induced_subgraphI':\n  assumes subg:\"subgraph H G\"\n  assumes max: \"\\<And>H'. subgraph H' G \\<Longrightarrow> (verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H)\"\n  shows \"induced_subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "interpret H: wf_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H", "using \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "define H' where \"H' = G \\<restriction> verts H\""], ["proof (state)\nthis:\n  H' = G \\<restriction> verts H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "then"], ["proof (chain)\npicking this:\n  H' = G \\<restriction> verts H", "have H'_props: \"subgraph H' G\" \"verts H' = verts H\""], ["proof (prove)\nusing this:\n  H' = G \\<restriction> verts H\n\ngoal (1 subgoal):\n 1. subgraph H' G &&& verts H' = verts H", "using subg"], ["proof (prove)\nusing this:\n  H' = G \\<restriction> verts H\n  subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph H' G &&& verts H' = verts H", "by (auto intro: wf_digraph.subgraph_induce_subgraphI)"], ["proof (state)\nthis:\n  subgraph H' G\n  verts H' = verts H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "moreover"], ["proof (state)\nthis:\n  subgraph H' G\n  verts H' = verts H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "have \"arcs H' = arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H' = arcs H", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. arcs H' \\<subseteq> arcs H\n 2. arcs H \\<subseteq> arcs H'", "show \"arcs H' \\<subseteq> arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H' \\<subseteq> arcs H", "using max H'_props"], ["proof (prove)\nusing this:\n  subgraph ?H' G \\<Longrightarrow>\n  verts ?H' \\<noteq> verts H \\<or> arcs ?H' \\<subseteq> arcs H\n  subgraph H' G\n  verts H' = verts H\n\ngoal (1 subgoal):\n 1. arcs H' \\<subseteq> arcs H", "by auto"], ["proof (state)\nthis:\n  arcs H' \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs H'", "show \"arcs H \\<subseteq> arcs H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs H'", "using subg"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs H'", "by (auto simp: H'_def compatible_def)"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs H'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arcs H' = arcs H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "then"], ["proof (chain)\npicking this:\n  arcs H' = arcs H", "show \"induced_subgraph H G\""], ["proof (prove)\nusing this:\n  arcs H' = arcs H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "by (auto simp: induced_subgraph_def H'_def subg)"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) induced_subgraph_altdef:\n  \"induced_subgraph H G \\<longleftrightarrow> subgraph H G \\<and> (\\<forall>H'. subgraph H' G \\<longrightarrow> (verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "fix H' :: \"('a,'b) pre_digraph\""], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "assume A: \"verts H' = verts H\" \"subgraph H' G\""], ["proof (state)\nthis:\n  verts H' = verts H\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "interpret H': wf_digraph H'"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H'", "using \\<open>subgraph H' G\\<close>"], ["proof (prove)\nusing this:\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. wf_digraph H'", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "from \\<open>subgraph H' G\\<close>"], ["proof (chain)\npicking this:\n  subgraph H' G", "have comp: \"tail G = tail H'\" \"head G = head H'\""], ["proof (prove)\nusing this:\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. tail G = tail H' &&& head G = head H'", "by (auto simp: compatible_def)"], ["proof (state)\nthis:\n  tail G = tail H'\n  head G = head H'\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "then"], ["proof (chain)\npicking this:\n  tail G = tail H'\n  head G = head H'", "have \"\\<And>a. a \\<in> arcs H' \\<Longrightarrow> tail G a \\<in> verts H\" \"\\<And>a. a \\<in> arcs H' \\<Longrightarrow> tail G a \\<in> verts H\""], ["proof (prove)\nusing this:\n  tail G = tail H'\n  head G = head H'\n\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> arcs H' \\<Longrightarrow> tail G a \\<in> verts H) &&&\n    (\\<And>a. a \\<in> arcs H' \\<Longrightarrow> tail G a \\<in> verts H)", "by (auto dest: H'.wellformed simp: A)"], ["proof (state)\nthis:\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "then"], ["proof (chain)\npicking this:\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H", "have \"arcs H' \\<subseteq> {e \\<in> arcs G. tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\""], ["proof (prove)\nusing this:\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n\ngoal (1 subgoal):\n 1. arcs H'\n    \\<subseteq> {e \\<in> arcs G.\n                 tail G e \\<in> verts H \\<and> head G e \\<in> verts H}", "using \\<open>subgraph H' G\\<close>"], ["proof (prove)\nusing this:\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n  ?a \\<in> arcs H' \\<Longrightarrow> tail G ?a \\<in> verts H\n  subgraph H' G\n\ngoal (1 subgoal):\n 1. arcs H'\n    \\<subseteq> {e \\<in> arcs G.\n                 tail G e \\<in> verts H \\<and> head G e \\<in> verts H}", "by (auto simp: subgraph_def comp A(1)[symmetric])"], ["proof (state)\nthis:\n  arcs H'\n  \\<subseteq> {e \\<in> arcs G.\n               tail G e \\<in> verts H \\<and> head G e \\<in> verts H}\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>verts ?H'2 = verts H; subgraph ?H'2 G\\<rbrakk>\n  \\<Longrightarrow> arcs ?H'2\n                    \\<subseteq> {e \\<in> arcs G.\n                                 tail G e \\<in> verts H \\<and>\n                                 head G e \\<in> verts H}\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>verts ?H'2 = verts H; subgraph ?H'2 G\\<rbrakk>\n  \\<Longrightarrow> arcs ?H'2\n                    \\<subseteq> {e \\<in> arcs G.\n                                 tail G e \\<in> verts H \\<and>\n                                 head G e \\<in> verts H}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>verts ?H'2 = verts H; subgraph ?H'2 G\\<rbrakk>\n  \\<Longrightarrow> arcs ?H'2\n                    \\<subseteq> {e \\<in> arcs G.\n                                 tail G e \\<in> verts H \\<and>\n                                 head G e \\<in> verts H}\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "using induced_subgraphI'[of H G]"], ["proof (prove)\nusing this:\n  \\<lbrakk>verts ?H'2 = verts H; subgraph ?H'2 G\\<rbrakk>\n  \\<Longrightarrow> arcs ?H'2\n                    \\<subseteq> {e \\<in> arcs G.\n                                 tail G e \\<in> verts H \\<and>\n                                 head G e \\<in> verts H}\n  \\<lbrakk>subgraph H G;\n   \\<And>H'.\n      subgraph H' G \\<Longrightarrow>\n      verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H\\<rbrakk>\n  \\<Longrightarrow> induced_subgraph H G\n\ngoal (1 subgoal):\n 1. induced_subgraph H G =\n    (subgraph H G \\<and>\n     (\\<forall>H'.\n         subgraph H' G \\<longrightarrow>\n         verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))", "by (auto simp: induced_subgraph_def)"], ["proof (state)\nthis:\n  induced_subgraph H G =\n  (subgraph H G \\<and>\n   (\\<forall>H'.\n       subgraph H' G \\<longrightarrow>\n       verts H' \\<noteq> verts H \\<or> arcs H' \\<subseteq> arcs H))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Unions of Graphs\\<close>"], ["", "lemma\n  verts_union[simp]: \"verts (union G H) = verts G \\<union> verts H\" and\n  arcs_union[simp]: \"arcs (union G H) = arcs G \\<union> arcs H\" and\n  tail_union[simp]: \"tail (union G H) = tail G\" and\n  head_union[simp]: \"head (union G H) = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (Digraph_Component.union G H) = verts G \\<union> verts H &&&\n     arcs (Digraph_Component.union G H) = arcs G \\<union> arcs H) &&&\n    tail (Digraph_Component.union G H) = tail G &&&\n    head (Digraph_Component.union G H) = head G", "by (auto simp: union_def)"], ["", "lemma wellformed_union:\n  assumes \"wf_digraph G\" \"wf_digraph H\" \"compatible G H\"\n  shows \"wf_digraph (union G H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union G H)", "using assms"], ["proof (prove)\nusing this:\n  wf_digraph G\n  wf_digraph H\n  compatible G H\n\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union G H)", "by unfold_locales\n     (auto simp: union_def compatible_tail compatible_head dest: wf_digraph.wellformed)"], ["", "lemma subgraph_union_iff:\n  assumes \"wf_digraph H1\" \"wf_digraph H2\" \"compatible H1 H2\"\n  shows \"subgraph (union H1 H2) G \\<longleftrightarrow> subgraph H1 G \\<and> subgraph H2 G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G =\n    (subgraph H1 G \\<and> subgraph H2 G)", "using assms"], ["proof (prove)\nusing this:\n  wf_digraph H1\n  wf_digraph H2\n  compatible H1 H2\n\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G =\n    (subgraph H1 G \\<and> subgraph H2 G)", "by (fastforce simp: compatible_def intro!: subgraphI wellformed_union)"], ["", "lemma subgraph_union[intro]:\n  assumes \"subgraph H1 G\" \"compatible H1 G\"\n  assumes \"subgraph H2 G\" \"compatible H2 G\"\n  shows \"subgraph (union H1 H2) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G", "from assms"], ["proof (chain)\npicking this:\n  subgraph H1 G\n  compatible H1 G\n  subgraph H2 G\n  compatible H2 G", "have \"wf_digraph (union H1 H2)\""], ["proof (prove)\nusing this:\n  subgraph H1 G\n  compatible H1 G\n  subgraph H2 G\n  compatible H2 G\n\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union H1 H2)", "by (auto intro: wellformed_union simp: compatible_def)"], ["proof (state)\nthis:\n  wf_digraph (Digraph_Component.union H1 H2)\n\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G", "with assms"], ["proof (chain)\npicking this:\n  subgraph H1 G\n  compatible H1 G\n  subgraph H2 G\n  compatible H2 G\n  wf_digraph (Digraph_Component.union H1 H2)", "show ?thesis"], ["proof (prove)\nusing this:\n  subgraph H1 G\n  compatible H1 G\n  subgraph H2 G\n  compatible H2 G\n  wf_digraph (Digraph_Component.union H1 H2)\n\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union H1 H2) G", "by (auto simp add: subgraph_def union_def arc_to_ends_def compatible_def)"], ["proof (state)\nthis:\n  subgraph (Digraph_Component.union H1 H2) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma union_fin_digraph:\n  assumes \"fin_digraph G\" \"fin_digraph H\" \"compatible G H\"\n  shows \"fin_digraph (union G H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (Digraph_Component.union G H)", "proof intro_locales"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (Digraph_Component.union G H)\n 2. fin_digraph_axioms (Digraph_Component.union G H)", "interpret G: fin_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph G", "by (rule assms)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (Digraph_Component.union G H)\n 2. fin_digraph_axioms (Digraph_Component.union G H)", "interpret H: fin_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph H", "by (rule assms)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_digraph (Digraph_Component.union G H)\n 2. fin_digraph_axioms (Digraph_Component.union G H)", "show \"wf_digraph (union G H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union G H)", "using assms"], ["proof (prove)\nusing this:\n  fin_digraph G\n  fin_digraph H\n  compatible G H\n\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union G H)", "by (intro wellformed_union) intro_locales"], ["proof (state)\nthis:\n  wf_digraph (Digraph_Component.union G H)\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms (Digraph_Component.union G H)", "show \"fin_digraph_axioms (union G H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph_axioms (Digraph_Component.union G H)", "using assms"], ["proof (prove)\nusing this:\n  fin_digraph G\n  fin_digraph H\n  compatible G H\n\ngoal (1 subgoal):\n 1. fin_digraph_axioms (Digraph_Component.union G H)", "by unfold_locales (auto simp: union_def)"], ["proof (state)\nthis:\n  fin_digraph_axioms (Digraph_Component.union G H)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraphs_of_union:\n  assumes \"wf_digraph G\" \"wf_digraph G'\" \"compatible G G'\"\n  shows \"subgraph G (union G G')\"\n    and \"subgraph G' (union G G')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G (Digraph_Component.union G G') &&&\n    subgraph G' (Digraph_Component.union G G')", "using assms"], ["proof (prove)\nusing this:\n  wf_digraph G\n  wf_digraph G'\n  compatible G G'\n\ngoal (1 subgoal):\n 1. subgraph G (Digraph_Component.union G G') &&&\n    subgraph G' (Digraph_Component.union G G')", "by (auto intro!: subgraphI wellformed_union simp: compatible_def)"], ["", "subsection \\<open>Maximal Subgraphs\\<close>"], ["", "lemma (in pre_digraph) max_subgraph_mp:\n  assumes \"max_subgraph Q x\" \"\\<And>x. P x \\<Longrightarrow> Q x\" \"P x\" shows \"max_subgraph P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_subgraph P x", "using assms"], ["proof (prove)\nusing this:\n  max_subgraph Q x\n  P ?x \\<Longrightarrow> Q ?x\n  P x\n\ngoal (1 subgoal):\n 1. max_subgraph P x", "by (auto simp: max_subgraph_def)"], ["", "lemma (in pre_digraph) max_subgraph_prop: \"max_subgraph P x \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_subgraph P x \\<Longrightarrow> P x", "by (simp add: max_subgraph_def)"], ["", "lemma (in pre_digraph) max_subgraph_subg_eq:\n  assumes \"max_subgraph P H1\" \"max_subgraph P H2\" \"subgraph H1 H2\"\n  shows \"H1 = H2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H1 = H2", "using assms"], ["proof (prove)\nusing this:\n  max_subgraph P H1\n  max_subgraph P H2\n  subgraph H1 H2\n\ngoal (1 subgoal):\n 1. H1 = H2", "by (auto simp: max_subgraph_def)"], ["", "lemma subgraph_induce_subgraphI2:\n  assumes \"subgraph H G\" shows \"subgraph H (G \\<restriction> verts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H (G \\<restriction> verts H)", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph H (G \\<restriction> verts H)", "by (auto simp: subgraph_def compatible_def wf_digraph.wellformed wf_digraph.wellformed_induce_subgraph)"], ["", "definition arc_mono :: \"(('a,'b) pre_digraph \\<Rightarrow> bool) \\<Rightarrow> bool\" where\n  \"arc_mono P \\<equiv> (\\<forall>H1 H2. P H1 \\<and> subgraph H1 H2 \\<and> verts H1 = verts H2 \\<longrightarrow> P H2)\""], ["", "lemma (in pre_digraph) induced_subgraphI_arc_mono:\n  assumes \"max_subgraph P H\"\n  assumes \"arc_mono P\"\n  shows \"induced_subgraph H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "interpret wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "using assms"], ["proof (prove)\nusing this:\n  max_subgraph P H\n  arc_mono P\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by (auto simp: max_subgraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "have \"subgraph H (G \\<restriction> verts H)\" \"subgraph (G \\<restriction> verts H) G\" \"verts H = verts (G \\<restriction> verts H)\" \"P H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subgraph H (G \\<restriction> verts H) &&&\n     subgraph (G \\<restriction> verts H) G) &&&\n    verts H = verts (G \\<restriction> verts H) &&& P H", "using assms"], ["proof (prove)\nusing this:\n  max_subgraph P H\n  arc_mono P\n\ngoal (1 subgoal):\n 1. (subgraph H (G \\<restriction> verts H) &&&\n     subgraph (G \\<restriction> verts H) G) &&&\n    verts H = verts (G \\<restriction> verts H) &&& P H", "by (auto simp: max_subgraph_def subgraph_induce_subgraphI2 subgraph_induce_subgraphI)"], ["proof (state)\nthis:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "moreover"], ["proof (state)\nthis:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "then"], ["proof (chain)\npicking this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H", "have \"P (G \\<restriction> verts  H)\""], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n\ngoal (1 subgoal):\n 1. P (G \\<restriction> verts H)", "using assms"], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n  max_subgraph P H\n  arc_mono P\n\ngoal (1 subgoal):\n 1. P (G \\<restriction> verts H)", "by (auto simp: arc_mono_def)"], ["proof (state)\nthis:\n  P (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "ultimately"], ["proof (chain)\npicking this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n  P (G \\<restriction> verts H)", "have \"max_subgraph P (G \\<restriction> verts H)\""], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n  P (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. max_subgraph P (G \\<restriction> verts H)", "using assms"], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  subgraph (G \\<restriction> verts H) G\n  verts H = verts (G \\<restriction> verts H)\n  P H\n  P (G \\<restriction> verts H)\n  max_subgraph P H\n  arc_mono P\n\ngoal (1 subgoal):\n 1. max_subgraph P (G \\<restriction> verts H)", "by (auto simp: max_subgraph_def) metis"], ["proof (state)\nthis:\n  max_subgraph P (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "then"], ["proof (chain)\npicking this:\n  max_subgraph P (G \\<restriction> verts H)", "have \"H = G \\<restriction> verts H\""], ["proof (prove)\nusing this:\n  max_subgraph P (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. H = G \\<restriction> verts H", "using \\<open>max_subgraph P H\\<close> \\<open>subgraph H _\\<close>"], ["proof (prove)\nusing this:\n  max_subgraph P (G \\<restriction> verts H)\n  max_subgraph P H\n  subgraph H (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. H = G \\<restriction> verts H", "by (intro max_subgraph_subg_eq)"], ["proof (state)\nthis:\n  H = G \\<restriction> verts H\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G", "using assms"], ["proof (prove)\nusing this:\n  max_subgraph P H\n  arc_mono P\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "by (subst \\<open>H = _\\<close>) (auto simp: max_subgraph_def)"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) induced_subgraph_altdef2:\n  \"induced_subgraph H G \\<longleftrightarrow> max_subgraph (\\<lambda>H'. verts H' = verts H) H\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph H G = max_subgraph (\\<lambda>H'. verts H' = verts H) H", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "assume ?L"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "moreover"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "{"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "fix H'"], ["proof (state)\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "assume \"induced_subgraph H G\" \"subgraph H H'\" \"H \\<noteq> H'\""], ["proof (state)\nthis:\n  induced_subgraph H G\n  subgraph H H'\n  H \\<noteq> H'\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "then"], ["proof (chain)\npicking this:\n  induced_subgraph H G\n  subgraph H H'\n  H \\<noteq> H'", "have \"\\<not>(subgraph H' G \\<and> verts H' = verts H)\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n  subgraph H H'\n  H \\<noteq> H'\n\ngoal (1 subgoal):\n 1. \\<not> (subgraph H' G \\<and> verts H' = verts H)", "by (auto simp: induced_subgraph_altdef compatible_def elim!: allE[where x=H'])"], ["proof (state)\nthis:\n  \\<not> (subgraph H' G \\<and> verts H' = verts H)\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>induced_subgraph H G; subgraph H ?H'2; H \\<noteq> ?H'2\\<rbrakk>\n  \\<Longrightarrow> \\<not> (subgraph ?H'2 G \\<and> verts ?H'2 = verts H)\n\ngoal (2 subgoals):\n 1. induced_subgraph H G \\<Longrightarrow>\n    max_subgraph (\\<lambda>H'. verts H' = verts H) H\n 2. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "ultimately"], ["proof (chain)\npicking this:\n  induced_subgraph H G\n  \\<lbrakk>induced_subgraph H G; subgraph H ?H'2; H \\<noteq> ?H'2\\<rbrakk>\n  \\<Longrightarrow> \\<not> (subgraph ?H'2 G \\<and> verts ?H'2 = verts H)", "show \"max_subgraph (\\<lambda>H'. verts H' = verts H) H\""], ["proof (prove)\nusing this:\n  induced_subgraph H G\n  \\<lbrakk>induced_subgraph H G; subgraph H ?H'2; H \\<noteq> ?H'2\\<rbrakk>\n  \\<Longrightarrow> \\<not> (subgraph ?H'2 G \\<and> verts ?H'2 = verts H)\n\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H", "by (auto simp: max_subgraph_def)"], ["proof (state)\nthis:\n  max_subgraph (\\<lambda>H'. verts H' = verts H) H\n\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "assume ?R"], ["proof (state)\nthis:\n  max_subgraph (\\<lambda>H'. verts H' = verts H) H\n\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "moreover"], ["proof (state)\nthis:\n  max_subgraph (\\<lambda>H'. verts H' = verts H) H\n\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "have \"arc_mono (\\<lambda>H'. verts H' = verts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_mono (\\<lambda>H'. verts H' = verts H)", "by (auto simp: arc_mono_def)"], ["proof (state)\nthis:\n  arc_mono (\\<lambda>H'. verts H' = verts H)\n\ngoal (1 subgoal):\n 1. max_subgraph (\\<lambda>H'. verts H' = verts H) H \\<Longrightarrow>\n    induced_subgraph H G", "ultimately"], ["proof (chain)\npicking this:\n  max_subgraph (\\<lambda>H'. verts H' = verts H) H\n  arc_mono (\\<lambda>H'. verts H' = verts H)", "show ?L"], ["proof (prove)\nusing this:\n  max_subgraph (\\<lambda>H'. verts H' = verts H) H\n  arc_mono (\\<lambda>H'. verts H' = verts H)\n\ngoal (1 subgoal):\n 1. induced_subgraph H G", "by (rule induced_subgraphI_arc_mono)"], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal:\nNo subgoals!", "qed"], ["", "(*XXX*)"], ["", "lemma (in pre_digraph) max_subgraphI:\n  assumes \"P x\" \"subgraph x G\" \"\\<And>y. \\<lbrakk>x \\<noteq> y; subgraph x y; subgraph y G\\<rbrakk> \\<Longrightarrow> \\<not>P y\"\n  shows \"max_subgraph P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_subgraph P x", "using assms"], ["proof (prove)\nusing this:\n  P x\n  subgraph x G\n  \\<lbrakk>x \\<noteq> ?y; subgraph x ?y; subgraph ?y G\\<rbrakk>\n  \\<Longrightarrow> \\<not> P ?y\n\ngoal (1 subgoal):\n 1. max_subgraph P x", "by (auto simp: max_subgraph_def)"], ["", "lemma (in pre_digraph) subgraphI_max_subgraph: \"max_subgraph P x \\<Longrightarrow> subgraph x G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_subgraph P x \\<Longrightarrow> subgraph x G", "by (simp add: max_subgraph_def)"], ["", "subsection \\<open>Connected and Strongly Connected Graphs\\<close>"], ["", "context wf_digraph begin"], ["", "lemma in_sccs_verts_conv_reachable:\n    \"S \\<in> sccs_verts \\<longleftrightarrow> S \\<noteq> {} \\<and> (\\<forall>u \\<in> S. \\<forall>v \\<in> S. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v) \\<and> (\\<forall>u \\<in> S. \\<forall>v. v \\<notin> S \\<longrightarrow> \\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> sccs_verts) =\n    (S \\<noteq> {} \\<and>\n     (\\<forall>u\\<in>S. \\<forall>v\\<in>S. u \\<rightarrow>\\<^sup>* v) \\<and>\n     (\\<forall>u\\<in>S.\n         \\<forall>v.\n            v \\<notin> S \\<longrightarrow>\n            \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n            \\<not> v \\<rightarrow>\\<^sup>* u))", "by (simp add: sccs_verts_def)"], ["", "lemma sccs_verts_disjoint:\n    assumes \"S \\<in> sccs_verts\" \"T \\<in> sccs_verts\" \"S \\<noteq> T\" shows \"S \\<inter> T = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> T = {}", "using assms"], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n  T \\<in> sccs_verts\n  S \\<noteq> T\n\ngoal (1 subgoal):\n 1. S \\<inter> T = {}", "unfolding in_sccs_verts_conv_reachable"], ["proof (prove)\nusing this:\n  S \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>S. Ball S (reachable G u)) \\<and>\n  (\\<forall>u\\<in>S.\n      \\<forall>v.\n         v \\<notin> S \\<longrightarrow>\n         \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n         \\<not> v \\<rightarrow>\\<^sup>* u)\n  T \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>T. Ball T (reachable G u)) \\<and>\n  (\\<forall>u\\<in>T.\n      \\<forall>v.\n         v \\<notin> T \\<longrightarrow>\n         \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n         \\<not> v \\<rightarrow>\\<^sup>* u)\n  S \\<noteq> T\n\ngoal (1 subgoal):\n 1. S \\<inter> T = {}", "by safe meson+"], ["", "lemma strongly_connected_spanning_imp_strongly_connected:\n    assumes \"spanning H G\"\n    assumes \"strongly_connected H\"\n    shows \"strongly_connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected G", "proof (unfold strongly_connected_def, intro ballI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. verts G \\<noteq> {}\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "from assms"], ["proof (chain)\npicking this:\n  spanning H G\n  strongly_connected H", "show \"verts G \\<noteq> {}\""], ["proof (prove)\nusing this:\n  spanning H G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "unfolding strongly_connected_def spanning_def"], ["proof (prove)\nusing this:\n  subgraph H G \\<and> verts G = verts H\n  verts H \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts H.\n      \\<forall>v\\<in>verts H. u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v)\n\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  verts G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "assume \"u \\<in> verts G\" and \"v \\<in> verts G\""], ["proof (state)\nthis:\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts G\n  v \\<in> verts G", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\" \"subgraph H G\""], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v &&& subgraph H G", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  v \\<in> verts G\n  spanning H G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v &&& subgraph H G", "by (auto simp add: strongly_connected_def)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\n  subgraph H G\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\n  subgraph H G", "show \"u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v\n  subgraph H G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by (rule reachable_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strongly_connected_imp_induce_subgraph_strongly_connected:\n    assumes subg: \"subgraph H G\"\n    assumes sc: \"strongly_connected H\"\n    shows \"strongly_connected (G \\<restriction> (verts H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "let ?is_H = \"G \\<restriction> (verts H)\""], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "interpret H: wf_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H", "using subg"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by (rule subgraphE)"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "interpret GrH: wf_digraph \"?is_H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> verts H)", "by (rule wellformed_induce_subgraph)"], ["proof (state)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "have \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "using assms"], ["proof (prove)\nusing this:\n  subgraph H G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "have \"subgraph H (G \\<restriction> verts H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H (G \\<restriction> verts H)", "using subg"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. subgraph H (G \\<restriction> verts H)", "by (intro subgraphI) (auto simp: compatible_def)"], ["proof (state)\nthis:\n  subgraph H (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "then"], ["proof (chain)\npicking this:\n  subgraph H (G \\<restriction> verts H)", "show ?thesis"], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "using induced_induce[OF \\<open>verts H \\<subseteq> verts G\\<close>]\n        and sc GrH.strongly_connected_spanning_imp_strongly_connected"], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  induced_subgraph (G \\<restriction> verts H) G\n  strongly_connected H\n  \\<lbrakk>spanning ?H (G \\<restriction> verts H);\n   strongly_connected ?H\\<rbrakk>\n  \\<Longrightarrow> strongly_connected (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "unfolding spanning_def"], ["proof (prove)\nusing this:\n  subgraph H (G \\<restriction> verts H)\n  induced_subgraph (G \\<restriction> verts H) G\n  strongly_connected H\n  \\<lbrakk>subgraph ?H (G \\<restriction> verts H) \\<and>\n           verts (G \\<restriction> verts H) = verts ?H;\n   strongly_connected ?H\\<rbrakk>\n  \\<Longrightarrow> strongly_connected (G \\<restriction> verts H)\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> verts H)", "by auto"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> verts H)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_sccs_vertsI_sccs:\n    assumes \"S \\<in> verts ` sccs\" shows \"S \\<in> sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> sccs_verts", "unfolding sccs_verts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> {S. S \\<noteq> {} \\<and>\n                (\\<forall>u\\<in>S. Ball S (reachable G u)) \\<and>\n                (\\<forall>u\\<in>S.\n                    \\<forall>v.\n                       v \\<notin> S \\<longrightarrow>\n                       \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                       \\<not> v \\<rightarrow>\\<^sup>* u)}", "proof (intro CollectI conjI allI ballI impI)"], ["proof (state)\ngoal (3 subgoals):\n 1. S \\<noteq> {}\n 2. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 3. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "show \"S \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  S \\<in> verts ` sccs\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "by (auto simp: sccs_verts_def sccs_def strongly_connected_def)"], ["proof (state)\nthis:\n  S \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "from assms"], ["proof (chain)\npicking this:\n  S \\<in> verts ` sccs", "have sc: \"strongly_connected (G \\<restriction> S)\" \"S \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  S \\<in> verts ` sccs\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> S) &&& S \\<subseteq> verts G", "apply (auto simp: sccs_verts_def sccs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S = verts x; induced_subgraph x G; strongly_connected x;\n        \\<forall>H'.\n           strongly_connected H' \\<longrightarrow>\n           induced_subgraph H' G \\<longrightarrow>\n           \\<not> verts x \\<subset> verts H'\\<rbrakk>\n       \\<Longrightarrow> strongly_connected (G \\<restriction> verts x)", "by (metis induced_imp_subgraph subgraphE wf_digraph.strongly_connected_imp_induce_subgraph_strongly_connected)"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> S)\n  S \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> S)\n  S \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix u v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume A: \"u \\<in> S\" \"v \\<in> S\""], ["proof (state)\nthis:\n  u \\<in> S\n  v \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "with sc"], ["proof (chain)\npicking this:\n  strongly_connected (G \\<restriction> S)\n  S \\<subseteq> verts G\n  u \\<in> S\n  v \\<in> S", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\""], ["proof (prove)\nusing this:\n  strongly_connected (G \\<restriction> S)\n  S \\<subseteq> verts G\n  u \\<in> S\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "by auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal (2 subgoals):\n 1. \\<And>u x.\n       \\<lbrakk>u \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* x\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "show \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "using \\<open>S \\<subseteq> verts G\\<close>"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by (rule reachable_induce_subgraphD)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume A: \"u \\<in> S\" \"v \\<notin> S\""], ["proof (state)\nthis:\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume B: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "from B"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u", "obtain p_uv where p_uv: \"awalk u p_uv v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. (\\<And>p_uv. awalk u p_uv v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reachable_awalk)"], ["proof (state)\nthis:\n  awalk u p_uv v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "from B"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u", "obtain p_vu where p_vu: \"awalk v p_vu u\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. (\\<And>p_vu. awalk v p_vu u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reachable_awalk)"], ["proof (state)\nthis:\n  awalk v p_vu u\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "define T where \"T = S \\<union> set (awalk_verts u p_uv) \\<union> set (awalk_verts v p_vu)\""], ["proof (state)\nthis:\n  T = S \\<union> set (awalk_verts u p_uv) \\<union> set (awalk_verts v p_vu)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "have \"S \\<subseteq> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> T", "by (auto simp: T_def)"], ["proof (state)\nthis:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "have \"v \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> T", "using p_vu"], ["proof (prove)\nusing this:\n  awalk v p_vu u\n\ngoal (1 subgoal):\n 1. v \\<in> T", "by (auto simp: T_def set_awalk_verts)"], ["proof (state)\nthis:\n  v \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  v \\<in> T", "have \"T \\<noteq> S\""], ["proof (prove)\nusing this:\n  v \\<in> T\n\ngoal (1 subgoal):\n 1. T \\<noteq> S", "using \\<open>v \\<notin> S\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> T\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. T \\<noteq> S", "by auto"], ["proof (state)\nthis:\n  T \\<noteq> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "interpret T: wf_digraph \"G \\<restriction> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> T)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "from p_uv"], ["proof (chain)\npicking this:\n  awalk u p_uv v", "have T_p_uv: \"T.awalk u p_uv v\""], ["proof (prove)\nusing this:\n  awalk u p_uv v\n\ngoal (1 subgoal):\n 1. T.awalk u p_uv v", "by (rule awalk_induce) (auto simp: T_def)"], ["proof (state)\nthis:\n  T.awalk u p_uv v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "from p_vu"], ["proof (chain)\npicking this:\n  awalk v p_vu u", "have T_p_vu: \"T.awalk v p_vu u\""], ["proof (prove)\nusing this:\n  awalk v p_vu u\n\ngoal (1 subgoal):\n 1. T.awalk v p_vu u", "by (rule awalk_induce) (auto simp: T_def)"], ["proof (state)\nthis:\n  T.awalk v p_vu u\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "have uv_reach: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v &&&\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u", "using T_p_uv T_p_vu A"], ["proof (prove)\nusing this:\n  T.awalk u p_uv v\n  T.awalk v p_vu u\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v &&&\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u", "by (metis T.reachable_awalk)+"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> S\" \"y \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> S\n  y \\<in> S", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y\" \"y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<in> S\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y &&&\n    y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x", "using sc"], ["proof (prove)\nusing this:\n  x \\<in> S\n  y \\<in> S\n  strongly_connected (G \\<restriction> S)\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y &&&\n    y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x", "by auto"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y\" \"y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y &&&\n    y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "using \\<open>S \\<subseteq> T\\<close>"], ["proof (prove)\nusing this:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> x\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y &&&\n    y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "by (auto intro: reachable_induce_ss)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "note A1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> T\""], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> S", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "using uv_reach A1 A"], ["proof (prove)\nusing this:\n  x \\<in> S\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "by (auto intro: T.reachable_trans[rotated])"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> set (awalk_verts u p_uv)\""], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (awalk_verts u p_uv)", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts u p_uv)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "using T_p_uv"], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts u p_uv)\n  T.awalk u p_uv v\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "by (auto simp: awalk_verts_induce intro: T.awalk_verts_reachable_to)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> set (awalk_verts v p_vu)\""], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (awalk_verts v p_vu)", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts v p_vu)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "using T_p_vu"], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts v p_vu)\n  T.awalk v p_vu u\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "by (rule_tac T.reachable_trans)\n                (auto simp: uv_reach awalk_verts_induce dest: T.awalk_verts_reachable_to)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> T\n  x \\<in> S \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\""], ["proof (prove)\nusing this:\n  x \\<in> T\n  x \\<in> S \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v", "by (auto simp: T_def)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "note xv_reach = this"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> T\""], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> S", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "using uv_reach A1 A"], ["proof (prove)\nusing this:\n  x \\<in> S\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  \\<lbrakk>?x2 \\<in> S; ?y2 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "by (auto intro: T.reachable_trans)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> S \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> set (awalk_verts v p_vu)\""], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (awalk_verts v p_vu)", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts v p_vu)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "using T_p_vu"], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts v p_vu)\n  T.awalk v p_vu u\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "by (auto simp: awalk_verts_induce intro: T.awalk_verts_reachable_from)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> set (awalk_verts u p_uv)\""], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (awalk_verts u p_uv)", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts u p_uv)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "using T_p_uv"], ["proof (prove)\nusing this:\n  x \\<in> set (awalk_verts u p_uv)\n  T.awalk u p_uv v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "by (rule_tac T.reachable_trans[rotated])\n                (auto intro: T.awalk_verts_reachable_from uv_reach simp: awalk_verts_induce)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> T\n  x \\<in> S \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\""], ["proof (prove)\nusing this:\n  x \\<in> T\n  x \\<in> S \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n  x \\<in> set (awalk_verts v p_vu) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n  x \\<in> set (awalk_verts u p_uv) \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x", "by (auto simp: T_def)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> x\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "note vx_reach = this"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> T \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "assume \"x \\<in> T\" \"y \\<in> T\""], ["proof (state)\nthis:\n  x \\<in> T\n  y \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  x \\<in> T\n  y \\<in> T", "have \"x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y\""], ["proof (prove)\nusing this:\n  x \\<in> T\n  y \\<in> T\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y", "using xv_reach vx_reach"], ["proof (prove)\nusing this:\n  x \\<in> T\n  y \\<in> T\n  ?x2 \\<in> T \\<Longrightarrow>\n  ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  ?x2 \\<in> T \\<Longrightarrow>\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?x2\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y", "by (blast intro: T.reachable_trans)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> y\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> T; ?y2 \\<in> T\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2 \\<in> T; ?y2 \\<in> T\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2", "have \"strongly_connected (G \\<restriction> T)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> T; ?y2 \\<in> T\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> T)", "using \\<open>S \\<noteq> {}\\<close> \\<open>S \\<subseteq> T\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> T; ?y2 \\<in> T\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> ?y2\n  S \\<noteq> {}\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> T)", "by auto"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "moreover"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "have \"induced_subgraph (G \\<restriction> T) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> T) G", "using \\<open>S \\<subseteq> verts G\\<close>"], ["proof (prove)\nusing this:\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> T) G", "by (auto simp: T_def intro: awalk_verts_reachable_from p_uv p_vu reachable_in_verts(2))"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> T) G\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "ultimately"], ["proof (chain)\npicking this:\n  strongly_connected (G \\<restriction> T)\n  induced_subgraph (G \\<restriction> T) G", "have \"\\<exists>T. induced_subgraph (G \\<restriction> T) G \\<and> strongly_connected (G \\<restriction> T) \\<and> verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)\""], ["proof (prove)\nusing this:\n  strongly_connected (G \\<restriction> T)\n  induced_subgraph (G \\<restriction> T) G\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       induced_subgraph (G \\<restriction> T) G \\<and>\n       strongly_connected (G \\<restriction> T) \\<and>\n       verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)", "using \\<open>S \\<subseteq> T\\<close> \\<open>T \\<noteq> S\\<close>"], ["proof (prove)\nusing this:\n  strongly_connected (G \\<restriction> T)\n  induced_subgraph (G \\<restriction> T) G\n  S \\<subseteq> T\n  T \\<noteq> S\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       induced_subgraph (G \\<restriction> T) G \\<and>\n       strongly_connected (G \\<restriction> T) \\<and>\n       verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)", "by auto"], ["proof (state)\nthis:\n  \\<exists>T.\n     induced_subgraph (G \\<restriction> T) G \\<and>\n     strongly_connected (G \\<restriction> T) \\<and>\n     verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  \\<exists>T.\n     induced_subgraph (G \\<restriction> T) G \\<and>\n     strongly_connected (G \\<restriction> T) \\<and>\n     verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)", "have \"G \\<restriction> S \\<notin> sccs\""], ["proof (prove)\nusing this:\n  \\<exists>T.\n     induced_subgraph (G \\<restriction> T) G \\<and>\n     strongly_connected (G \\<restriction> T) \\<and>\n     verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<notin> sccs", "unfolding sccs_def"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     induced_subgraph (G \\<restriction> T) G \\<and>\n     strongly_connected (G \\<restriction> T) \\<and>\n     verts (G \\<restriction> S) \\<subset> verts (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. G \\<restriction> S\n    \\<notin> {H. induced_subgraph H G \\<and>\n                 strongly_connected H \\<and>\n                 (\\<nexists>H'.\n                     induced_subgraph H' G \\<and>\n                     strongly_connected H' \\<and>\n                     verts H \\<subset> verts H')}", "by blast"], ["proof (state)\nthis:\n  G \\<restriction> S \\<notin> sccs\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  G \\<restriction> S \\<notin> sccs", "have \"S \\<notin> verts ` sccs\""], ["proof (prove)\nusing this:\n  G \\<restriction> S \\<notin> sccs\n\ngoal (1 subgoal):\n 1. S \\<notin> verts ` sccs", "by (metis (erased, hide_lams) \\<open>S \\<subseteq> T\\<close> \\<open>T \\<noteq> S\\<close> \\<open>induced_subgraph (G \\<restriction> T) G\\<close> \\<open>strongly_connected (G \\<restriction> T)\\<close>\n            dual_order.order_iff_strict image_iff in_sccsE induce_subgraph_verts)"], ["proof (state)\nthis:\n  S \\<notin> verts ` sccs\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  S \\<notin> verts ` sccs", "have False"], ["proof (prove)\nusing this:\n  S \\<notin> verts ` sccs\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  S \\<notin> verts ` sccs\n  S \\<in> verts ` sccs\n\ngoal (1 subgoal):\n 1. False", "by metis"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "}"], ["proof (state)\nthis:\n  \\<lbrakk>u \\<rightarrow>\\<^sup>* v; v \\<rightarrow>\\<^sup>* u\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                         \\<not> v \\<rightarrow>\\<^sup>* u", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>u \\<rightarrow>\\<^sup>* v; v \\<rightarrow>\\<^sup>* u\\<rbrakk>\n  \\<Longrightarrow> False", "show \"\\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (prove)\nusing this:\n  \\<lbrakk>u \\<rightarrow>\\<^sup>* v; v \\<rightarrow>\\<^sup>* u\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u", "by metis"], ["proof (state)\nthis:\n  \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?u2 \\<in> S; ?v2 \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?u2 \\<rightarrow>\\<^sup>* ?v2 \\<or>\n                    \\<not> ?v2 \\<rightarrow>\\<^sup>* ?u2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma arc_mono_strongly_connected[intro,simp]: \"arc_mono strongly_connected\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_mono strongly_connected", "by (auto simp: arc_mono_def) (metis spanning_def subgraphE wf_digraph.strongly_connected_spanning_imp_strongly_connected)"], ["", "lemma (in pre_digraph) sccs_altdef2:\n  \"sccs = {H. max_subgraph strongly_connected H}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "fix H H' :: \"('a, 'b) pre_digraph\""], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a1: \"strongly_connected H'\""], ["proof (state)\nthis:\n  strongly_connected H'\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a2: \"induced_subgraph H' G\""], ["proof (state)\nthis:\n  induced_subgraph H' G\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a3: \"max_subgraph strongly_connected H\""], ["proof (state)\nthis:\n  max_subgraph strongly_connected H\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a4: \"verts H \\<subseteq> verts H'\""], ["proof (state)\nthis:\n  verts H \\<subseteq> verts H'\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "have sg: \"subgraph H G\" and ends_G: \"tail G = tail H \" \"head G = head H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H G &&& tail G = tail H &&& head G = head H", "using a3"], ["proof (prove)\nusing this:\n  max_subgraph strongly_connected H\n\ngoal (1 subgoal):\n 1. subgraph H G &&& tail G = tail H &&& head G = head H", "by (auto simp: max_subgraph_def compatible_def)"], ["proof (state)\nthis:\n  subgraph H G\n  tail G = tail H\n  head G = head H\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "then"], ["proof (chain)\npicking this:\n  subgraph H G\n  tail G = tail H\n  head G = head H", "interpret H: wf_digraph H"], ["proof (prove)\nusing this:\n  subgraph H G\n  tail G = tail H\n  head G = head H\n\ngoal (1 subgoal):\n 1. wf_digraph H", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "have \"arcs H \\<subseteq> arcs H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs H'", "using a2 a4 sg"], ["proof (prove)\nusing this:\n  induced_subgraph H' G\n  verts H \\<subseteq> verts H'\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs H'", "by (fastforce simp: ends_G)"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs H'\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "then"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs H'", "have \"H = H'\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs H'\n\ngoal (1 subgoal):\n 1. H = H'", "using a1 a2 a3 a4"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs H'\n  strongly_connected H'\n  induced_subgraph H' G\n  max_subgraph strongly_connected H\n  verts H \\<subseteq> verts H'\n\ngoal (1 subgoal):\n 1. H = H'", "by (metis (no_types) compatible_def induced_imp_subgraph max_subgraph_def subgraph_def)"], ["proof (state)\nthis:\n  H = H'\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>strongly_connected ?H'2; induced_subgraph ?H'2 G;\n   max_subgraph strongly_connected ?H2;\n   verts ?H2 \\<subseteq> verts ?H'2\\<rbrakk>\n  \\<Longrightarrow> ?H2 = ?H'2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "note X = this"], ["proof (state)\nthis:\n  \\<lbrakk>strongly_connected ?H'2; induced_subgraph ?H'2 G;\n   max_subgraph strongly_connected ?H2;\n   verts ?H2 \\<subseteq> verts ?H'2\\<rbrakk>\n  \\<Longrightarrow> ?H2 = ?H'2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "{"], ["proof (state)\nthis:\n  \\<lbrakk>strongly_connected ?H'2; induced_subgraph ?H'2 G;\n   max_subgraph strongly_connected ?H2;\n   verts ?H2 \\<subseteq> verts ?H'2\\<rbrakk>\n  \\<Longrightarrow> ?H2 = ?H'2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "fix H"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a1: \"induced_subgraph H G\""], ["proof (state)\nthis:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a2: \"strongly_connected H\""], ["proof (state)\nthis:\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume a3: \"\\<forall>H'. strongly_connected H' \\<longrightarrow> induced_subgraph H' G \\<longrightarrow> \\<not> verts H \\<subset> verts H'\""], ["proof (state)\nthis:\n  \\<forall>H'.\n     strongly_connected H' \\<longrightarrow>\n     induced_subgraph H' G \\<longrightarrow>\n     \\<not> verts H \\<subset> verts H'\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "interpret G: wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "using a1"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "assume \"H \\<noteq> y\" and subg: \"subgraph H y\" \"subgraph y G\""], ["proof (state)\nthis:\n  H \\<noteq> y\n  subgraph H y\n  subgraph y G\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "then"], ["proof (chain)\npicking this:\n  H \\<noteq> y\n  subgraph H y\n  subgraph y G", "have \"verts H \\<subset> verts y\""], ["proof (prove)\nusing this:\n  H \\<noteq> y\n  subgraph H y\n  subgraph y G\n\ngoal (1 subgoal):\n 1. verts H \\<subset> verts y", "using a1"], ["proof (prove)\nusing this:\n  H \\<noteq> y\n  subgraph H y\n  subgraph y G\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. verts H \\<subset> verts y", "by (auto simp: induced_subgraph_altdef2 max_subgraph_def)"], ["proof (state)\nthis:\n  verts H \\<subset> verts y\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "then"], ["proof (chain)\npicking this:\n  verts H \\<subset> verts y", "have \"\\<not>strongly_connected y\""], ["proof (prove)\nusing this:\n  verts H \\<subset> verts y\n\ngoal (1 subgoal):\n 1. \\<not> strongly_connected y", "using subg a1 a2 a3[THEN spec, of \"G \\<restriction> verts y\"]"], ["proof (prove)\nusing this:\n  verts H \\<subset> verts y\n  subgraph H y\n  subgraph y G\n  induced_subgraph H G\n  strongly_connected H\n  strongly_connected (G \\<restriction> verts y) \\<longrightarrow>\n  induced_subgraph (G \\<restriction> verts y) G \\<longrightarrow>\n  \\<not> verts H \\<subset> verts (G \\<restriction> verts y)\n\ngoal (1 subgoal):\n 1. \\<not> strongly_connected y", "by (auto simp: G.induced_induce G.strongly_connected_imp_induce_subgraph_strongly_connected)"], ["proof (state)\nthis:\n  \\<not> strongly_connected y\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>H \\<noteq> ?y2; subgraph H ?y2; subgraph ?y2 G\\<rbrakk>\n  \\<Longrightarrow> \\<not> strongly_connected ?y2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>H \\<noteq> ?y2; subgraph H ?y2; subgraph ?y2 G\\<rbrakk>\n  \\<Longrightarrow> \\<not> strongly_connected ?y2", "have \"max_subgraph strongly_connected H\""], ["proof (prove)\nusing this:\n  \\<lbrakk>H \\<noteq> ?y2; subgraph H ?y2; subgraph ?y2 G\\<rbrakk>\n  \\<Longrightarrow> \\<not> strongly_connected ?y2\n\ngoal (1 subgoal):\n 1. max_subgraph strongly_connected H", "using a1 a2"], ["proof (prove)\nusing this:\n  \\<lbrakk>H \\<noteq> ?y2; subgraph H ?y2; subgraph ?y2 G\\<rbrakk>\n  \\<Longrightarrow> \\<not> strongly_connected ?y2\n  induced_subgraph H G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. max_subgraph strongly_connected H", "by (auto intro: max_subgraphI)"], ["proof (state)\nthis:\n  max_subgraph strongly_connected H\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>induced_subgraph ?H2 G; strongly_connected ?H2;\n   \\<forall>H'.\n      strongly_connected H' \\<longrightarrow>\n      induced_subgraph H' G \\<longrightarrow>\n      \\<not> verts ?H2 \\<subset> verts H'\\<rbrakk>\n  \\<Longrightarrow> max_subgraph strongly_connected ?H2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "note Y = this"], ["proof (state)\nthis:\n  \\<lbrakk>induced_subgraph ?H2 G; strongly_connected ?H2;\n   \\<forall>H'.\n      strongly_connected H' \\<longrightarrow>\n      induced_subgraph H' G \\<longrightarrow>\n      \\<not> verts ?H2 \\<subset> verts H'\\<rbrakk>\n  \\<Longrightarrow> max_subgraph strongly_connected ?H2\n\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs = {H. max_subgraph strongly_connected H}", "unfolding sccs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {H. induced_subgraph H G \\<and>\n        strongly_connected H \\<and>\n        (\\<nexists>H'.\n            induced_subgraph H' G \\<and>\n            strongly_connected H' \\<and> verts H \\<subset> verts H')} =\n    {H. max_subgraph strongly_connected H}", "by (auto dest: max_subgraph_prop X intro: induced_subgraphI_arc_mono Y)"], ["proof (state)\nthis:\n  sccs = {H. max_subgraph strongly_connected H}\n\ngoal:\nNo subgoals!", "qed"], ["", "locale max_reachable_set = wf_digraph +\n  fixes S assumes S_in_sv: \"S \\<in> sccs_verts\"\nbegin"], ["", "lemma reach_in: \"\\<And>u v. \\<lbrakk>u \\<in> S; v \\<in> S\\<rbrakk> \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and not_reach_out: \"\\<And>u v. \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk> \\<Longrightarrow> \\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\"\n    and not_empty: \"S \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>u \\<in> S; v \\<in> S\\<rbrakk>\n        \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v) &&&\n    (\\<And>u v.\n        \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                          \\<not> v \\<rightarrow>\\<^sup>* u) &&&\n    S \\<noteq> {}", "using S_in_sv"], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>u \\<in> S; v \\<in> S\\<rbrakk>\n        \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v) &&&\n    (\\<And>u v.\n        \\<lbrakk>u \\<in> S; v \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> \\<not> u \\<rightarrow>\\<^sup>* v \\<or>\n                          \\<not> v \\<rightarrow>\\<^sup>* u) &&&\n    S \\<noteq> {}", "by (auto simp: sccs_verts_def)"], ["", "lemma reachable_induced:\n    assumes conn: \"u \\<in> S\" \"v \\<in> S\" \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    shows \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "let ?H = \"G \\<restriction> S\""], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "have \"S \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> verts G", "using reach_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u \\<in> S; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* ?v\n\ngoal (1 subgoal):\n 1. S \\<subseteq> verts G", "by (auto dest: reachable_in_verts)"], ["proof (state)\nthis:\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  S \\<subseteq> verts G", "have \"induced_subgraph ?H G\""], ["proof (prove)\nusing this:\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> S) G", "by (rule induced_induce)"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> S) G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  induced_subgraph (G \\<restriction> S) G", "interpret H: wf_digraph ?H"], ["proof (prove)\nusing this:\n  induced_subgraph (G \\<restriction> S) G\n\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> S)", "by (rule wf_digraphI_induced)"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "from conn"], ["proof (chain)\npicking this:\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v", "obtain p where p: \"awalk u p v\""], ["proof (prove)\nusing this:\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. (\\<And>p. awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis reachable_awalk)"], ["proof (state)\nthis:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "proof (cases \"set p \\<subseteq> arcs (G \\<restriction> S)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n 2. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "case True"], ["proof (state)\nthis:\n  set p \\<subseteq> arcs (G \\<restriction> S)\n\ngoal (2 subgoals):\n 1. set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n 2. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "with p conn"], ["proof (chain)\npicking this:\n  awalk u p v\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n  set p \\<subseteq> arcs (G \\<restriction> S)", "have \"H.awalk u p v\""], ["proof (prove)\nusing this:\n  awalk u p v\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n  set p \\<subseteq> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. H.awalk u p v", "by (auto simp: pre_digraph.awalk_def compatible_cas[OF compatible_induce_subgraph])"], ["proof (state)\nthis:\n  H.awalk u p v\n\ngoal (2 subgoals):\n 1. set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n 2. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  H.awalk u p v", "show ?thesis"], ["proof (prove)\nusing this:\n  H.awalk u p v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "by (metis H.reachable_awalk)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "case False"], ["proof (state)\nthis:\n  \\<not> set p \\<subseteq> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  \\<not> set p \\<subseteq> arcs (G \\<restriction> S)", "obtain a where \"a \\<in> set p\" \"a \\<notin> arcs (G \\<restriction> S)\""], ["proof (prove)\nusing this:\n  \\<not> set p \\<subseteq> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> set p;\n         a \\<notin> arcs (G \\<restriction> S)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "moreover"], ["proof (state)\nthis:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)", "have \"tail G a \\<notin> S \\<or> head G a \\<notin> S\""], ["proof (prove)\nusing this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> S \\<or> head G a \\<notin> S", "using p"], ["proof (prove)\nusing this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n  awalk u p v\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> S \\<or> head G a \\<notin> S", "by auto"], ["proof (state)\nthis:\n  tail G a \\<notin> S \\<or> head G a \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n  tail G a \\<notin> S \\<or> head G a \\<notin> S", "obtain w where \"w \\<in> set (awalk_verts u p)\" \"w \\<notin> S\""], ["proof (prove)\nusing this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n  tail G a \\<notin> S \\<or> head G a \\<notin> S\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (awalk_verts u p); w \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using p"], ["proof (prove)\nusing this:\n  a \\<in> set p\n  a \\<notin> arcs (G \\<restriction> S)\n  tail G a \\<notin> S \\<or> head G a \\<notin> S\n  awalk u p v\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> set (awalk_verts u p); w \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: set_awalk_verts)"], ["proof (state)\nthis:\n  w \\<in> set (awalk_verts u p)\n  w \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  w \\<in> set (awalk_verts u p)\n  w \\<notin> S", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\nusing this:\n  w \\<in> set (awalk_verts u p)\n  w \\<notin> S\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* w &&& w \\<rightarrow>\\<^sup>* v", "using p"], ["proof (prove)\nusing this:\n  w \\<in> set (awalk_verts u p)\n  w \\<notin> S\n  awalk u p v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* w &&& w \\<rightarrow>\\<^sup>* v", "by (auto intro: awalk_verts_reachable_from awalk_verts_reachable_to)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "moreover"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* u", "using conn reach_in"], ["proof (prove)\nusing this:\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n  \\<lbrakk>?u \\<in> S; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* ?v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* u", "by auto"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "ultimately"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* w &&& w \\<rightarrow>\\<^sup>* u", "by (auto intro: reachable_trans)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "with \\<open>w \\<notin> S\\<close> conn not_reach_out"], ["proof (chain)\npicking this:\n  w \\<notin> S\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n  \\<lbrakk>?u \\<in> S; ?v \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?u \\<rightarrow>\\<^sup>* ?v \\<or>\n                    \\<not> ?v \\<rightarrow>\\<^sup>* ?u\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* u", "have False"], ["proof (prove)\nusing this:\n  w \\<notin> S\n  u \\<in> S\n  v \\<in> S\n  u \\<rightarrow>\\<^sup>* v\n  \\<lbrakk>?u \\<in> S; ?v \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?u \\<rightarrow>\\<^sup>* ?v \\<or>\n                    \\<not> ?v \\<rightarrow>\\<^sup>* ?u\n  u \\<rightarrow>\\<^sup>* w\n  w \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> set p \\<subseteq> arcs (G \\<restriction> S) \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v", ".."], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> S\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strongly_connected:\n    shows \"strongly_connected (G \\<restriction> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> S)", "using not_empty"], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> S)", "by (intro strongly_connectedI) (auto intro: reachable_induced reach_in)"], ["", "lemma induced_in_sccs: \"G \\<restriction> S \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "let ?H = \"G \\<restriction> S\""], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "have \"S \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> verts G", "using reach_in"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u \\<in> S; ?v \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* ?v\n\ngoal (1 subgoal):\n 1. S \\<subseteq> verts G", "by (auto dest: reachable_in_verts)"], ["proof (state)\nthis:\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  S \\<subseteq> verts G", "have \"induced_subgraph ?H G\""], ["proof (prove)\nusing this:\n  S \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> S) G", "by (rule induced_induce)"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> S) G\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  induced_subgraph (G \\<restriction> S) G", "interpret H: wf_digraph ?H"], ["proof (prove)\nusing this:\n  induced_subgraph (G \\<restriction> S) G\n\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> S)", "by (rule wf_digraphI_induced)"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "fix T"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "assume \"S \\<subset> T\" \"T \\<subseteq> verts G\" \"strongly_connected (G \\<restriction> T)\""], ["proof (state)\nthis:\n  S \\<subset> T\n  T \\<subseteq> verts G\n  strongly_connected (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "from \\<open>S \\<subset> T\\<close>"], ["proof (chain)\npicking this:\n  S \\<subset> T", "obtain v where \"v \\<in> T\" \"v \\<notin> S\""], ["proof (prove)\nusing this:\n  S \\<subset> T\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> T; v \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> T\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "from not_empty"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "obtain u where \"u \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  u \\<in> S\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  u \\<in> S", "have \"u \\<in> T\""], ["proof (prove)\nusing this:\n  u \\<in> S\n\ngoal (1 subgoal):\n 1. u \\<in> T", "using \\<open>S \\<subset> T\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> S\n  S \\<subset> T\n\ngoal (1 subgoal):\n 1. u \\<in> T", "by auto"], ["proof (state)\nthis:\n  u \\<in> T\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "from \\<open>u \\<in> S\\<close> \\<open>v \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> S\n  v \\<notin> S", "have \"\\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<or> \\<not>v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (prove)\nusing this:\n  u \\<in> S\n  v \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u", "by (rule not_reach_out)"], ["proof (state)\nthis:\n  \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "moreover"], ["proof (state)\nthis:\n  \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "from \\<open>strongly_connected _\\<close>"], ["proof (chain)\npicking this:\n  strongly_connected (G \\<restriction> T)", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\""], ["proof (prove)\nusing this:\n  strongly_connected (G \\<restriction> T)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v &&&\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u", "using \\<open>v \\<in> T\\<close> \\<open>u \\<in> T\\<close>"], ["proof (prove)\nusing this:\n  strongly_connected (G \\<restriction> T)\n  v \\<in> T\n  u \\<in> T\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v &&&\n    v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u", "by (auto simp: strongly_connected_def)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> u\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v &&& v \\<rightarrow>\\<^sup>* u", "using \\<open>T \\<subseteq> verts G\\<close>"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> v\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> T\\<^esub> u\n  T \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v &&& v \\<rightarrow>\\<^sup>* u", "by (auto dest: reachable_induce_subgraphD)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u", "have False"], ["proof (prove)\nusing this:\n  \\<not> u \\<rightarrow>\\<^sup>* v \\<or> \\<not> v \\<rightarrow>\\<^sup>* u\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<subset> ?T2; ?T2 \\<subseteq> verts G;\n   strongly_connected (G \\<restriction> ?T2)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "note psuper_not_sc = this"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<subset> ?T2; ?T2 \\<subseteq> verts G;\n   strongly_connected (G \\<restriction> ?T2)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "have \"\\<not> (\\<exists>c'. induced_subgraph c' G \\<and> strongly_connected c' \\<and> verts (G \\<restriction> S) \\<subset> verts c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>c'.\n       induced_subgraph c' G \\<and>\n       strongly_connected c' \\<and>\n       verts (G \\<restriction> S) \\<subset> verts c'", "by (metis induce_subgraph_verts induced_imp_subgraph psuper_not_sc subgraphE\n        strongly_connected_imp_induce_subgraph_strongly_connected)"], ["proof (state)\nthis:\n  \\<nexists>c'.\n     induced_subgraph c' G \\<and>\n     strongly_connected c' \\<and>\n     verts (G \\<restriction> S) \\<subset> verts c'\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "with \\<open>S \\<subseteq> _\\<close> not_empty"], ["proof (chain)\npicking this:\n  S \\<subseteq> verts G\n  S \\<noteq> {}\n  \\<nexists>c'.\n     induced_subgraph c' G \\<and>\n     strongly_connected c' \\<and>\n     verts (G \\<restriction> S) \\<subset> verts c'", "show \"?H \\<in> sccs\""], ["proof (prove)\nusing this:\n  S \\<subseteq> verts G\n  S \\<noteq> {}\n  \\<nexists>c'.\n     induced_subgraph c' G \\<and>\n     strongly_connected c' \\<and>\n     verts (G \\<restriction> S) \\<subset> verts c'\n\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "by (intro in_sccsI induced_induce strongly_connected)"], ["proof (state)\nthis:\n  G \\<restriction> S \\<in> sccs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context wf_digraph begin"], ["", "lemma in_verts_sccsD_sccs:\n    assumes \"S \\<in> sccs_verts\"\n    shows \"G \\<restriction> S \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "from assms"], ["proof (chain)\npicking this:\n  S \\<in> sccs_verts", "interpret max_reachable_set"], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. max_reachable_set G S", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> S \\<in> sccs", "by (auto simp: sccs_verts_def intro: induced_in_sccs)"], ["proof (state)\nthis:\n  G \\<restriction> S \\<in> sccs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sccs_verts_conv: \"sccs_verts = verts ` sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs_verts = verts ` sccs", "by (auto intro: in_sccs_vertsI_sccs rev_image_eqI dest: in_verts_sccsD_sccs)"], ["", "lemma induce_eq_iff_induced:\n    assumes \"induced_subgraph H G\" shows \"G \\<restriction> verts H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> verts H = H", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph H G\n\ngoal (1 subgoal):\n 1. G \\<restriction> verts H = H", "by (auto simp: induced_subgraph_def induce_subgraph_def compatible_def)"], ["", "lemma sccs_conv_sccs_verts: \"sccs = induce_subgraph G ` sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs = (\\<restriction>) G ` sccs_verts", "by (auto intro!: rev_image_eqI in_sccs_vertsI_sccs dest: in_verts_sccsD_sccs\n      simp: sccs_def induce_eq_iff_induced)"], ["", "end"], ["", "lemma connected_conv:\n  shows \"connected G \\<longleftrightarrow> verts G \\<noteq> {} \\<and> (\\<forall>u \\<in> verts G. \\<forall>v \\<in> verts G. (u,v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G =\n    (verts G \\<noteq> {} \\<and>\n     (\\<forall>u\\<in>verts G.\n         \\<forall>v\\<in>verts G.\n            (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G =\n    (verts G \\<noteq> {} \\<and>\n     (\\<forall>u\\<in>verts G.\n         \\<forall>v\\<in>verts G.\n            (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)))", "have \"symcl (arcs_ends G) = parcs (mk_symmetric G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (arcs_ends G)\\<^sup>s = parcs (mk_symmetric G)", "by (auto simp: parcs_mk_symmetric symcl_def arcs_ends_conv)"], ["proof (state)\nthis:\n  (arcs_ends G)\\<^sup>s = parcs (mk_symmetric G)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected G =\n    (verts G \\<noteq> {} \\<and>\n     (\\<forall>u\\<in>verts G.\n         \\<forall>v\\<in>verts G.\n            (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)))", "then"], ["proof (chain)\npicking this:\n  (arcs_ends G)\\<^sup>s = parcs (mk_symmetric G)", "show ?thesis"], ["proof (prove)\nusing this:\n  (arcs_ends G)\\<^sup>s = parcs (mk_symmetric G)\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected G =\n    (verts G \\<noteq> {} \\<and>\n     (\\<forall>u\\<in>verts G.\n         \\<forall>v\\<in>verts G.\n            (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)))", "by (auto simp: connected_def strongly_connected_def reachable_def)"], ["proof (state)\nthis:\n  Digraph_Component.connected G =\n  (verts G \\<noteq> {} \\<and>\n   (\\<forall>u\\<in>verts G.\n       \\<forall>v\\<in>verts G.\n          (u, v) \\<in> rtrancl_on (verts G) ((arcs_ends G)\\<^sup>s)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) symmetric_connected_imp_strongly_connected:\n  assumes \"symmetric G\" \"connected G\"\n  shows \"strongly_connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. verts G \\<noteq> {}\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "from \\<open>connected G\\<close>"], ["proof (chain)\npicking this:\n  Digraph_Component.connected G", "show \"verts G \\<noteq> {}\""], ["proof (prove)\nusing this:\n  Digraph_Component.connected G\n\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "unfolding connected_def strongly_connected_def"], ["proof (prove)\nusing this:\n  verts (with_proj (mk_symmetric G)) \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts (with_proj (mk_symmetric G)).\n      \\<forall>v\\<in>verts (with_proj (mk_symmetric G)).\n         u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v)\n\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  verts G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "from \\<open>connected G\\<close>"], ["proof (chain)\npicking this:\n  Digraph_Component.connected G", "have sc_mks: \"strongly_connected (mk_symmetric G)\""], ["proof (prove)\nusing this:\n  Digraph_Component.connected G\n\ngoal (1 subgoal):\n 1. strongly_connected (with_proj (mk_symmetric G))", "unfolding connected_def"], ["proof (prove)\nusing this:\n  strongly_connected (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. strongly_connected (with_proj (mk_symmetric G))", "by simp"], ["proof (state)\nthis:\n  strongly_connected (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "assume \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (state)\nthis:\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "with sc_mks"], ["proof (chain)\npicking this:\n  strongly_connected (with_proj (mk_symmetric G))\n  u \\<in> verts G\n  v \\<in> verts G", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\""], ["proof (prove)\nusing this:\n  strongly_connected (with_proj (mk_symmetric G))\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "unfolding strongly_connected_def"], ["proof (prove)\nusing this:\n  verts (with_proj (mk_symmetric G)) \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts (with_proj (mk_symmetric G)).\n      \\<forall>v\\<in>verts (with_proj (mk_symmetric G)).\n         u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v)\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "by auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "show \"u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n  symmetric G\n  Digraph_Component.connected G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by (simp only: reachable_mk_symmetric_eq)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) connected_spanning_imp_connected:\n  assumes \"spanning H G\"\n  assumes \"connected H\"\n  shows \"connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "proof (unfold connected_def strongly_connected_def, intro conjI ballI)"], ["proof (state)\ngoal (2 subgoals):\n 1. verts (with_proj (mk_symmetric G)) \\<noteq> {}\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "from assms"], ["proof (chain)\npicking this:\n  spanning H G\n  Digraph_Component.connected H", "show \"verts (mk_symmetric G )\\<noteq> {}\""], ["proof (prove)\nusing this:\n  spanning H G\n  Digraph_Component.connected H\n\ngoal (1 subgoal):\n 1. verts (with_proj (mk_symmetric G)) \\<noteq> {}", "unfolding spanning_def connected_def strongly_connected_def"], ["proof (prove)\nusing this:\n  subgraph H G \\<and> verts G = verts H\n  verts (with_proj (mk_symmetric H)) \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts (with_proj (mk_symmetric H)).\n      \\<forall>v\\<in>verts (with_proj (mk_symmetric H)).\n         u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v)\n\ngoal (1 subgoal):\n 1. verts (with_proj (mk_symmetric G)) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  verts (with_proj (mk_symmetric G)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "assume \"u \\<in> verts (mk_symmetric G)\" and \"v \\<in> verts (mk_symmetric G)\""], ["proof (state)\nthis:\n  u \\<in> verts (with_proj (mk_symmetric G))\n  v \\<in> verts (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts (with_proj (mk_symmetric G))\n  v \\<in> verts (with_proj (mk_symmetric G))", "have \"u \\<in> pverts (mk_symmetric H)\" and \"v \\<in> pverts (mk_symmetric H)\""], ["proof (prove)\nusing this:\n  u \\<in> verts (with_proj (mk_symmetric G))\n  v \\<in> verts (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. u \\<in> pverts (mk_symmetric H) &&& v \\<in> pverts (mk_symmetric H)", "using \\<open>spanning H G\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> verts (with_proj (mk_symmetric G))\n  v \\<in> verts (with_proj (mk_symmetric G))\n  spanning H G\n\ngoal (1 subgoal):\n 1. u \\<in> pverts (mk_symmetric H) &&& v \\<in> pverts (mk_symmetric H)", "by (auto simp: mk_symmetric_def)"], ["proof (state)\nthis:\n  u \\<in> pverts (mk_symmetric H)\n  v \\<in> pverts (mk_symmetric H)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "with \\<open>connected H\\<close>"], ["proof (chain)\npicking this:\n  Digraph_Component.connected H\n  u \\<in> pverts (mk_symmetric H)\n  v \\<in> pverts (mk_symmetric H)", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v\" \"subgraph (mk_symmetric H) (mk_symmetric G)\""], ["proof (prove)\nusing this:\n  Digraph_Component.connected H\n  u \\<in> pverts (mk_symmetric H)\n  v \\<in> pverts (mk_symmetric H)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v &&&\n    subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))", "using \\<open>spanning H G\\<close>"], ["proof (prove)\nusing this:\n  Digraph_Component.connected H\n  u \\<in> pverts (mk_symmetric H)\n  v \\<in> pverts (mk_symmetric H)\n  spanning H G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v &&&\n    subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))", "unfolding connected_def"], ["proof (prove)\nusing this:\n  strongly_connected (with_proj (mk_symmetric H))\n  u \\<in> pverts (mk_symmetric H)\n  v \\<in> pverts (mk_symmetric H)\n  spanning H G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v &&&\n    subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))", "by (auto simp: spanning_def dest: subgraph_mk_symmetric)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v\n  subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (with_proj (mk_symmetric G));\n        v \\<in> verts (with_proj (mk_symmetric G))\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v\n  subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))", "show \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric H)\\<^esub> v\n  subgraph (with_proj (mk_symmetric H)) (with_proj (mk_symmetric G))\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "by (rule pre_digraph.reachable_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) spanning_tree_imp_connected:\n  assumes \"spanning_tree H G\"\n  shows \"connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "using assms"], ["proof (prove)\nusing this:\n  spanning_tree H G\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "by (auto intro: connected_spanning_imp_connected)"], ["", "term \"LEAST x. P x\""], ["", "lemma (in sym_digraph) induce_reachable_is_in_sccs:\n  assumes \"u \\<in> verts G\"\n  shows \"(G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "let ?c = \"(G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\""], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "have isub_c: \"induced_subgraph ?c G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G", "by (auto elim: reachable_in_vertsE)"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G", "interpret c: wf_digraph ?c"], ["proof (prove)\nusing this:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n\ngoal (1 subgoal):\n 1. wf_digraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "by (rule wf_digraphI_induced)"], ["proof (state)\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "have sym_c: \"symmetric (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "using sym_arcs isub_c"], ["proof (prove)\nusing this:\n  symmetric G\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n\ngoal (1 subgoal):\n 1. symmetric (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "by (rule induced_graph_imp_symmetric)"], ["proof (state)\nthis:\n  symmetric (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "note \\<open>induced_subgraph ?c G\\<close>"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "moreover"], ["proof (state)\nthis:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "have \"strongly_connected ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "proof (rule strongly_connectedI)"], ["proof (state)\ngoal (2 subgoals):\n 1. verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<noteq> {}\n 2. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "show \"verts ?c \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "fix v w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "assume l_assms: \"v \\<in> verts ?c\" \"w \\<in> verts ?c\""], ["proof (state)\nthis:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  w \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "using l_assms"], ["proof (prove)\nusing this:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  w \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "by (intro induce_reachable_preserves_paths) auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "have \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> u\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> u", "by (rule symmetric_reachable[OF sym_c])"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> u\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "also"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> u\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w", "using l_assms"], ["proof (prove)\nusing this:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  w \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w", "by (intro induce_reachable_preserves_paths) auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>ua v.\n       \\<lbrakk>ua \\<in> verts\n                          (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v});\n        v \\<in> verts\n                 (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> v", "finally"], ["proof (chain)\npicking this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w", "show \"v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w\""], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w", "."], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\\<^esub> w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "moreover"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "have \"\\<not>(\\<exists>d. induced_subgraph d G \\<and> strongly_connected d \\<and>\n    verts ?c \\<subset> verts d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "assume \"\\<exists>d. induced_subgraph d G \\<and> strongly_connected d \\<and>\n      verts ?c \\<subset> verts d\""], ["proof (state)\nthis:\n  \\<exists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d", "obtain d where \"induced_subgraph d G\" \"strongly_connected d\"\n      \"verts ?c \\<subset> verts d\""], ["proof (prove)\nusing this:\n  \\<exists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>induced_subgraph d G; strongly_connected d;\n         verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n         \\<subset> verts d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  induced_subgraph d G\n  strongly_connected d\n  verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<subset> verts d\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  induced_subgraph d G\n  strongly_connected d\n  verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<subset> verts d", "obtain v where \"v \\<in> verts d\" and \"v \\<notin> verts ?c\""], ["proof (prove)\nusing this:\n  induced_subgraph d G\n  strongly_connected d\n  verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<subset> verts d\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> verts d;\n         v \\<notin> verts\n                     (G \\<restriction>\n                      {v. u \\<rightarrow>\\<^sup>* v})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> verts d\n  v \\<notin> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "have \"u \\<in> verts ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "using \\<open>u \\<in> verts G\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "by auto"], ["proof (state)\nthis:\n  u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "have \"u \\<in> verts d\""], ["proof (prove)\nusing this:\n  u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. u \\<in> verts d", "using \\<open>verts ?c \\<subset> verts d\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) \\<subset> verts d\n\ngoal (1 subgoal):\n 1. u \\<in> verts d", "by auto"], ["proof (state)\nthis:\n  u \\<in> verts d\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts d", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v\""], ["proof (prove)\nusing this:\n  u \\<in> verts d\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v", "using \\<open>strongly_connected d\\<close> \\<open>u \\<in> verts d\\<close> \\<open>v \\<in> verts d\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> verts d\n  strongly_connected d\n  u \\<in> verts d\n  v \\<in> verts d\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v", "by auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v", "have \"u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "using \\<open>induced_subgraph d G\\<close>"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>d\\<^esub> v\n  induced_subgraph d G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by (auto intro: pre_digraph.reachable_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v", "have \"v \\<in> verts ?c\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "by (auto simp: reachable_awalk)"], ["proof (state)\nthis:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. \\<exists>d.\n       induced_subgraph d G \\<and>\n       strongly_connected d \\<and>\n       verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n       \\<subset> verts d \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})", "show False"], ["proof (prove)\nusing this:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<notin> verts ?c\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  v \\<notin> verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "ultimately"], ["proof (chain)\npicking this:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n  strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  \\<nexists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d", "show ?thesis"], ["proof (prove)\nusing this:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n  strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  \\<nexists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs", "unfolding sccs_def"], ["proof (prove)\nusing this:\n  induced_subgraph (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}) G\n  strongly_connected (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n  \\<nexists>d.\n     induced_subgraph d G \\<and>\n     strongly_connected d \\<and>\n     verts (G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v})\n     \\<subset> verts d\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v}\n    \\<in> {H. induced_subgraph H G \\<and>\n              strongly_connected H \\<and>\n              (\\<nexists>H'.\n                  induced_subgraph H' G \\<and>\n                  strongly_connected H' \\<and> verts H \\<subset> verts H')}", "by auto"], ["proof (state)\nthis:\n  G \\<restriction> {v. u \\<rightarrow>\\<^sup>* v} \\<in> sccs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma induced_eq_verts_imp_eq:\n  assumes \"induced_subgraph G H\"\n  assumes \"induced_subgraph G' H\"\n  assumes \"verts G = verts G'\"\n  shows \"G = G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = G'", "using assms"], ["proof (prove)\nusing this:\n  induced_subgraph G H\n  induced_subgraph G' H\n  verts G = verts G'\n\ngoal (1 subgoal):\n 1. G = G'", "by (auto simp: induced_subgraph_def subgraph_def compatible_def)"], ["", "lemma (in pre_digraph) in_sccs_subset_imp_eq:\n  assumes \"c \\<in> sccs\"\n  assumes \"d \\<in> sccs\"\n  assumes \"verts c \\<subseteq> verts d\"\n  shows \"c = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = d", "using assms"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  d \\<in> sccs\n  verts c \\<subseteq> verts d\n\ngoal (1 subgoal):\n 1. c = d", "by (blast intro: induced_eq_verts_imp_eq)"], ["", "context wf_digraph begin"], ["", "lemma connectedI:\n    assumes \"verts G \\<noteq> {}\" \"\\<And>u v. u \\<in> verts G \\<Longrightarrow> v \\<in> verts G \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\"\n    shows \"connected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "using assms"], ["proof (prove)\nusing this:\n  verts G \\<noteq> {}\n  \\<lbrakk>?u \\<in> verts G; ?v \\<in> verts G\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> ?v\n\ngoal (1 subgoal):\n 1. Digraph_Component.connected G", "by (auto simp: connected_def)"], ["", "lemma connected_awalkE:\n    assumes \"connected G\" \"u \\<in> verts G\" \"v \\<in> verts G\"\n    obtains p where \"pre_digraph.awalk (mk_symmetric G) u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        pre_digraph.awalk (with_proj (mk_symmetric G)) u p\n         v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        pre_digraph.awalk (with_proj (mk_symmetric G)) u p\n         v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "interpret sG: pair_wf_digraph \"mk_symmetric G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_wf_digraph (mk_symmetric G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p. sG.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  Digraph_Component.connected G\n  u \\<in> verts G\n  v \\<in> verts G", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>mk_symmetric G\\<^esub> v\""], ["proof (prove)\nusing this:\n  Digraph_Component.connected G\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "by (auto simp: connected_def)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>p. sG.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v", "obtain p where \"sG.awalk u p v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>with_proj (mk_symmetric G)\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>p. sG.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sG.reachable_awalk)"], ["proof (state)\nthis:\n  sG.awalk u p v\n\ngoal (1 subgoal):\n 1. (\\<And>p. sG.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  sG.awalk u p v", "show ?thesis"], ["proof (prove)\nusing this:\n  sG.awalk u p v\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_verts_sccs: \"inj_on verts sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on verts sccs", "by (rule inj_onI) (metis in_sccs_imp_induced induced_eq_verts_imp_eq)"], ["", "lemma card_sccs_verts: \"card sccs_verts = card sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card sccs_verts = card sccs", "by (auto simp: sccs_verts_conv intro: inj_on_verts_sccs card_image)"], ["", "end"], ["", "lemma strongly_connected_non_disj:\n  assumes wf: \"wf_digraph G\" \"wf_digraph H\" \"compatible G H\"\n  assumes sc: \"strongly_connected G\" \"strongly_connected H\"\n  assumes not_disj: \"verts G \\<inter> verts H \\<noteq> {}\"\n  shows \"strongly_connected (union G H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected (Digraph_Component.union G H)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. verts (Digraph_Component.union G H) \\<noteq> {}\n 2. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "from sc"], ["proof (chain)\npicking this:\n  strongly_connected G\n  strongly_connected H", "show \"verts (union G H) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  strongly_connected G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. verts (Digraph_Component.union G H) \\<noteq> {}", "unfolding strongly_connected_def"], ["proof (prove)\nusing this:\n  verts G \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts G.\n      \\<forall>v\\<in>verts G. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v)\n  verts H \\<noteq> {} \\<and>\n  (\\<forall>u\\<in>verts H.\n      \\<forall>v\\<in>verts H. u \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> v)\n\ngoal (1 subgoal):\n 1. verts (Digraph_Component.union G H) \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  verts (Digraph_Component.union G H) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "let ?x = \"union G H\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "fix u v w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "assume \"u \\<in> verts ?x\" and \"v \\<in> verts ?x\""], ["proof (state)\nthis:\n  u \\<in> verts (Digraph_Component.union G H)\n  v \\<in> verts (Digraph_Component.union G H)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "obtain w where w_in_both: \"w \\<in> verts G\" \"w \\<in> verts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> verts G; w \\<in> verts H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_disj"], ["proof (prove)\nusing this:\n  verts G \\<inter> verts H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>w \\<in> verts G; w \\<in> verts H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w \\<in> verts G\n  w \\<in> verts H\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "interpret x: wf_digraph ?x"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union G H)", "by (rule wellformed_union) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "have subg: \"subgraph G ?x\" \"subgraph H ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph G (Digraph_Component.union G H) &&&\n    subgraph H (Digraph_Component.union G H)", "by (rule subgraphs_of_union[OF _ _ ], fact+)+"], ["proof (state)\nthis:\n  subgraph G (Digraph_Component.union G H)\n  subgraph H (Digraph_Component.union G H)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "have reach_uw: \"u \\<rightarrow>\\<^sup>*\\<^bsub>?x\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> w", "using \\<open>u \\<in> verts ?x\\<close> subg w_in_both sc"], ["proof (prove)\nusing this:\n  u \\<in> verts (Digraph_Component.union G H)\n  subgraph G (Digraph_Component.union G H)\n  subgraph H (Digraph_Component.union G H)\n  w \\<in> verts G\n  w \\<in> verts H\n  strongly_connected G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> w", "by (auto intro: pre_digraph.reachable_mono)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "also"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "have reach_wv: \"w \\<rightarrow>\\<^sup>*\\<^bsub>?x\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "using \\<open>v \\<in> verts ?x\\<close> subg w_in_both sc"], ["proof (prove)\nusing this:\n  v \\<in> verts (Digraph_Component.union G H)\n  subgraph G (Digraph_Component.union G H)\n  subgraph H (Digraph_Component.union G H)\n  w \\<in> verts G\n  w \\<in> verts H\n  strongly_connected G\n  strongly_connected H\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "by (auto intro: pre_digraph.reachable_mono)"], ["proof (state)\nthis:\n  w \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> verts (Digraph_Component.union G H);\n        v \\<in> verts (Digraph_Component.union G H)\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "finally (x.reachable_trans)"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "show \"u \\<rightarrow>\\<^sup>*\\<^bsub>?x\\<^esub> v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v", "."], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>Digraph_Component.union G H\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "context wf_digraph begin"], ["", "lemma scc_disj:\n    assumes scc: \"c \\<in> sccs\" \"d \\<in> sccs\"\n    assumes \"c \\<noteq> d\"\n    shows \"verts c \\<inter> verts d = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "assume contr: \"\\<not>?thesis\""], ["proof (state)\nthis:\n  verts c \\<inter> verts d \\<noteq> {}\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "let ?x = \"union c d\""], ["proof (state)\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "have comp1: \"compatible G c\" \"compatible G d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible G c &&& compatible G d", "using scc"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  d \\<in> sccs\n\ngoal (1 subgoal):\n 1. compatible G c &&& compatible G d", "by (auto simp: sccs_def)"], ["proof (state)\nthis:\n  compatible G c\n  compatible G d\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  compatible G c\n  compatible G d", "have comp: \"compatible c d\""], ["proof (prove)\nusing this:\n  compatible G c\n  compatible G d\n\ngoal (1 subgoal):\n 1. compatible c d", "by (auto simp: compatible_def)"], ["proof (state)\nthis:\n  compatible c d\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "have wf: \"wf_digraph c\" \"wf_digraph d\"\n      and sc: \"strongly_connected c\" \"strongly_connected d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wf_digraph c &&& wf_digraph d) &&&\n    strongly_connected c &&& strongly_connected d", "using scc"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  d \\<in> sccs\n\ngoal (1 subgoal):\n 1. (wf_digraph c &&& wf_digraph d) &&&\n    strongly_connected c &&& strongly_connected d", "by (auto intro: in_sccs_imp_induced)"], ["proof (state)\nthis:\n  wf_digraph c\n  wf_digraph d\n  strongly_connected c\n  strongly_connected d\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "have \"compatible c d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compatible c d", "using comp"], ["proof (prove)\nusing this:\n  compatible c d\n\ngoal (1 subgoal):\n 1. compatible c d", "by (auto simp: sccs_def compatible_def)"], ["proof (state)\nthis:\n  compatible c d\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "from wf comp sc"], ["proof (chain)\npicking this:\n  wf_digraph c\n  wf_digraph d\n  compatible c d\n  strongly_connected c\n  strongly_connected d", "have union_conn: \"strongly_connected ?x\""], ["proof (prove)\nusing this:\n  wf_digraph c\n  wf_digraph d\n  compatible c d\n  strongly_connected c\n  strongly_connected d\n\ngoal (1 subgoal):\n 1. strongly_connected (Digraph_Component.union c d)", "using contr"], ["proof (prove)\nusing this:\n  wf_digraph c\n  wf_digraph d\n  compatible c d\n  strongly_connected c\n  strongly_connected d\n  verts c \\<inter> verts d \\<noteq> {}\n\ngoal (1 subgoal):\n 1. strongly_connected (Digraph_Component.union c d)", "by (rule strongly_connected_non_disj)"], ["proof (state)\nthis:\n  strongly_connected (Digraph_Component.union c d)\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "have sg: \"subgraph ?x G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union c d) G", "using scc comp1"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  d \\<in> sccs\n  compatible G c\n  compatible G d\n\ngoal (1 subgoal):\n 1. subgraph (Digraph_Component.union c d) G", "by (intro subgraph_union) (auto simp: compatible_def)"], ["proof (state)\nthis:\n  subgraph (Digraph_Component.union c d) G\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  subgraph (Digraph_Component.union c d) G", "have v_cd: \"verts c \\<subseteq> verts G\"  \"verts d \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  subgraph (Digraph_Component.union c d) G\n\ngoal (1 subgoal):\n 1. verts c \\<subseteq> verts G &&& verts d \\<subseteq> verts G", "by (auto elim!: subgraphE)"], ["proof (state)\nthis:\n  verts c \\<subseteq> verts G\n  verts d \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "have \"wf_digraph ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (Digraph_Component.union c d)", "by (rule wellformed_union) fact+"], ["proof (state)\nthis:\n  wf_digraph (Digraph_Component.union c d)\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "with v_cd sg union_conn"], ["proof (chain)\npicking this:\n  verts c \\<subseteq> verts G\n  verts d \\<subseteq> verts G\n  subgraph (Digraph_Component.union c d) G\n  strongly_connected (Digraph_Component.union c d)\n  wf_digraph (Digraph_Component.union c d)", "have induce_subgraph_conn: \"strongly_connected (G \\<restriction> verts ?x)\"\n        \"induced_subgraph (G \\<restriction> verts ?x) G\""], ["proof (prove)\nusing this:\n  verts c \\<subseteq> verts G\n  verts d \\<subseteq> verts G\n  subgraph (Digraph_Component.union c d) G\n  strongly_connected (Digraph_Component.union c d)\n  wf_digraph (Digraph_Component.union c d)\n\ngoal (1 subgoal):\n 1. strongly_connected\n     (G \\<restriction> verts (Digraph_Component.union c d)) &&&\n    induced_subgraph (G \\<restriction> verts (Digraph_Component.union c d))\n     G", "by - (intro strongly_connected_imp_induce_subgraph_strongly_connected,\n        auto simp: subgraph_union_iff)"], ["proof (state)\nthis:\n  strongly_connected (G \\<restriction> verts (Digraph_Component.union c d))\n  induced_subgraph (G \\<restriction> verts (Digraph_Component.union c d)) G\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  c \\<in> sccs\n  d \\<in> sccs\n  c \\<noteq> d", "have \"\\<not>verts c \\<subseteq> verts d\" and \"\\<not> verts d \\<subseteq> verts c\""], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  d \\<in> sccs\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<not> verts c \\<subseteq> verts d &&&\n    \\<not> verts d \\<subseteq> verts c", "by (metis in_sccs_subset_imp_eq)+"], ["proof (state)\nthis:\n  \\<not> verts c \\<subseteq> verts d\n  \\<not> verts d \\<subseteq> verts c\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> verts c \\<subseteq> verts d\n  \\<not> verts d \\<subseteq> verts c", "have psub: \"verts c \\<subset> verts ?x\""], ["proof (prove)\nusing this:\n  \\<not> verts c \\<subseteq> verts d\n  \\<not> verts d \\<subseteq> verts c\n\ngoal (1 subgoal):\n 1. verts c \\<subset> verts (Digraph_Component.union c d)", "by (auto simp: union_def)"], ["proof (state)\nthis:\n  verts c \\<subset> verts (Digraph_Component.union c d)\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts d \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  verts c \\<subset> verts (Digraph_Component.union c d)", "show False"], ["proof (prove)\nusing this:\n  verts c \\<subset> verts (Digraph_Component.union c d)\n\ngoal (1 subgoal):\n 1. False", "using induce_subgraph_conn"], ["proof (prove)\nusing this:\n  verts c \\<subset> verts (Digraph_Component.union c d)\n  strongly_connected (G \\<restriction> verts (Digraph_Component.union c d))\n  induced_subgraph (G \\<restriction> verts (Digraph_Component.union c d)) G\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>c \\<in> sccs\\<close> in_sccsE induce_subgraph_verts)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_sccs_verts_conv:\n    \"S \\<in> sccs_verts \\<longleftrightarrow> G \\<restriction> S \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> sccs_verts) = (G \\<restriction> S \\<in> sccs)", "by (auto simp: sccs_verts_conv intro: rev_image_eqI)\n      (metis in_sccs_imp_induced induce_subgraph_verts induced_eq_verts_imp_eq induced_imp_subgraph induced_induce subgraphE)"], ["", "end"], ["", "lemma (in wf_digraph) in_scc_of_self: \"u \\<in> verts G \\<Longrightarrow> u \\<in> scc_of u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts G \\<Longrightarrow> u \\<in> scc_of u", "by (auto simp: scc_of_def)"], ["", "lemma (in wf_digraph) scc_of_empty_conv: \"scc_of u = {} \\<longleftrightarrow> u \\<notin> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (scc_of u = {}) = (u \\<notin> verts G)", "using in_scc_of_self"], ["proof (prove)\nusing this:\n  ?u \\<in> verts G \\<Longrightarrow> ?u \\<in> scc_of ?u\n\ngoal (1 subgoal):\n 1. (scc_of u = {}) = (u \\<notin> verts G)", "by (auto simp: scc_of_def reachable_in_verts)"], ["", "lemma (in wf_digraph) scc_of_in_sccs_verts:\n  assumes \"u \\<in> verts G\" shows \"scc_of u \\<in> sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_of u \\<in> sccs_verts", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. scc_of u \\<in> sccs_verts", "by (auto simp: in_sccs_verts_conv_reachable scc_of_def intro: reachable_trans exI[where x=u])"], ["", "lemma (in wf_digraph) sccs_verts_subsets: \"S \\<in> sccs_verts \\<Longrightarrow> S \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> sccs_verts \\<Longrightarrow> S \\<subseteq> verts G", "by (auto simp: sccs_verts_conv)"], ["", "lemma (in fin_digraph) finite_sccs_verts: \"finite sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite sccs_verts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite sccs_verts", "have \"finite (Pow (verts G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Pow (verts G))", "by auto"], ["proof (state)\nthis:\n  finite (Pow (verts G))\n\ngoal (1 subgoal):\n 1. finite sccs_verts", "moreover"], ["proof (state)\nthis:\n  finite (Pow (verts G))\n\ngoal (1 subgoal):\n 1. finite sccs_verts", "with sccs_verts_subsets"], ["proof (chain)\npicking this:\n  ?S \\<in> sccs_verts \\<Longrightarrow> ?S \\<subseteq> verts G\n  finite (Pow (verts G))", "have \"sccs_verts \\<subseteq> Pow (verts G)\""], ["proof (prove)\nusing this:\n  ?S \\<in> sccs_verts \\<Longrightarrow> ?S \\<subseteq> verts G\n  finite (Pow (verts G))\n\ngoal (1 subgoal):\n 1. sccs_verts \\<subseteq> Pow (verts G)", "by auto"], ["proof (state)\nthis:\n  sccs_verts \\<subseteq> Pow (verts G)\n\ngoal (1 subgoal):\n 1. finite sccs_verts", "ultimately"], ["proof (chain)\npicking this:\n  finite (Pow (verts G))\n  sccs_verts \\<subseteq> Pow (verts G)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (Pow (verts G))\n  sccs_verts \\<subseteq> Pow (verts G)\n\ngoal (1 subgoal):\n 1. finite sccs_verts", "by (rule rev_finite_subset)"], ["proof (state)\nthis:\n  finite sccs_verts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) sccs_verts_conv_scc_of:\n  \"sccs_verts = scc_of ` verts G\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sccs_verts = scc_of ` verts G", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G\n 2. \\<And>x. x \\<in> scc_of ` verts G \\<Longrightarrow> x \\<in> sccs_verts", "fix S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G\n 2. \\<And>x. x \\<in> scc_of ` verts G \\<Longrightarrow> x \\<in> sccs_verts", "assume \"S \\<in> ?R\""], ["proof (state)\nthis:\n  S \\<in> scc_of ` verts G\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G\n 2. \\<And>x. x \\<in> scc_of ` verts G \\<Longrightarrow> x \\<in> sccs_verts", "then"], ["proof (chain)\npicking this:\n  S \\<in> scc_of ` verts G", "show \"S \\<in> ?L\""], ["proof (prove)\nusing this:\n  S \\<in> scc_of ` verts G\n\ngoal (1 subgoal):\n 1. S \\<in> sccs_verts", "by (auto simp: in_sccs_verts_conv_reachable scc_of_empty_conv) (auto simp: scc_of_def intro: reachable_trans)"], ["proof (state)\nthis:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "assume \"S \\<in> ?L\""], ["proof (state)\nthis:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "moreover"], ["proof (state)\nthis:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "then"], ["proof (chain)\npicking this:\n  S \\<in> sccs_verts", "obtain u where \"u \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: in_sccs_verts_conv_reachable)"], ["proof (state)\nthis:\n  u \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "moreover"], ["proof (state)\nthis:\n  u \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "then"], ["proof (chain)\npicking this:\n  u \\<in> S", "have \"u \\<in> verts G\""], ["proof (prove)\nusing this:\n  u \\<in> S\n\ngoal (1 subgoal):\n 1. u \\<in> verts G", "using \\<open>S \\<in> ?L\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> S\n  S \\<in> sccs_verts\n\ngoal (1 subgoal):\n 1. u \\<in> verts G", "by (metis sccs_verts_subsets subsetCE)"], ["proof (state)\nthis:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts G", "have \"scc_of u \\<in> sccs_verts\" \"u \\<in> scc_of u\""], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. scc_of u \\<in> sccs_verts &&& u \\<in> scc_of u", "by (auto intro: scc_of_in_sccs_verts in_scc_of_self)"], ["proof (state)\nthis:\n  scc_of u \\<in> sccs_verts\n  u \\<in> scc_of u\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "ultimately"], ["proof (chain)\npicking this:\n  S \\<in> sccs_verts\n  u \\<in> S\n  scc_of u \\<in> sccs_verts\n  u \\<in> scc_of u", "have \"scc_of u = S\""], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n  u \\<in> S\n  scc_of u \\<in> sccs_verts\n  u \\<in> scc_of u\n\ngoal (1 subgoal):\n 1. scc_of u = S", "using sccs_verts_disjoint"], ["proof (prove)\nusing this:\n  S \\<in> sccs_verts\n  u \\<in> S\n  scc_of u \\<in> sccs_verts\n  u \\<in> scc_of u\n  \\<lbrakk>?S \\<in> sccs_verts; ?T \\<in> sccs_verts; ?S \\<noteq> ?T\\<rbrakk>\n  \\<Longrightarrow> ?S \\<inter> ?T = {}\n\ngoal (1 subgoal):\n 1. scc_of u = S", "by blast"], ["proof (state)\nthis:\n  scc_of u = S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> sccs_verts \\<Longrightarrow> x \\<in> scc_of ` verts G", "then"], ["proof (chain)\npicking this:\n  scc_of u = S", "show \"S \\<in> ?R\""], ["proof (prove)\nusing this:\n  scc_of u = S\n\ngoal (1 subgoal):\n 1. S \\<in> scc_of ` verts G", "using \\<open>scc_of u \\<in> _\\<close> \\<open>u \\<in> verts G\\<close>"], ["proof (prove)\nusing this:\n  scc_of u = S\n  scc_of u \\<in> sccs_verts\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. S \\<in> scc_of ` verts G", "by auto"], ["proof (state)\nthis:\n  S \\<in> scc_of ` verts G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sym_digraph) scc_ofI_reachable:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<in> scc_of v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "by (auto simp: scc_of_def symmetric_reachable[OF sym_arcs])"], ["", "lemma (in sym_digraph) scc_ofI_reachable':\n  assumes \"v \\<rightarrow>\\<^sup>* u\" shows \"u \\<in> scc_of v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "by (auto simp: scc_of_def symmetric_reachable[OF sym_arcs])"], ["", "lemma (in sym_digraph) scc_ofI_awalk:\n  assumes \"awalk u p v\" shows \"u \\<in> scc_of v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "using assms"], ["proof (prove)\nusing this:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "by (metis reachable_awalk scc_ofI_reachable)"], ["", "lemma (in sym_digraph) scc_ofI_apath:\n  assumes \"apath u p v\" shows \"u \\<in> scc_of v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "using assms"], ["proof (prove)\nusing this:\n  apath u p v\n\ngoal (1 subgoal):\n 1. u \\<in> scc_of v", "by (metis reachable_apath scc_ofI_reachable)"], ["", "lemma (in wf_digraph) scc_of_eq: \"u \\<in> scc_of v \\<Longrightarrow> scc_of u = scc_of v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> scc_of v \\<Longrightarrow> scc_of u = scc_of v", "by (auto simp: scc_of_def intro: reachable_trans)"], ["", "lemma (in wf_digraph) strongly_connected_eq_iff:\n  \"strongly_connected G \\<longleftrightarrow> sccs = {G}\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. strongly_connected G = (sccs = {G})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "assume ?L"], ["proof (state)\nthis:\n  strongly_connected G\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "then"], ["proof (chain)\npicking this:\n  strongly_connected G", "have \"G \\<in> sccs\""], ["proof (prove)\nusing this:\n  strongly_connected G\n\ngoal (1 subgoal):\n 1. G \\<in> sccs", "by (auto simp: sccs_def induced_subgraph_refl)"], ["proof (state)\nthis:\n  G \\<in> sccs\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "moreover"], ["proof (state)\nthis:\n  G \\<in> sccs\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "{"], ["proof (state)\nthis:\n  G \\<in> sccs\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "fix H"], ["proof (state)\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "assume \"H \\<in> sccs\" \"G \\<noteq> H\""], ["proof (state)\nthis:\n  H \\<in> sccs\n  G \\<noteq> H\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "with \\<open>G \\<in> sccs\\<close>"], ["proof (chain)\npicking this:\n  G \\<in> sccs\n  H \\<in> sccs\n  G \\<noteq> H", "have \"verts G \\<inter> verts H = {}\""], ["proof (prove)\nusing this:\n  G \\<in> sccs\n  H \\<in> sccs\n  G \\<noteq> H\n\ngoal (1 subgoal):\n 1. verts G \\<inter> verts H = {}", "by (rule scc_disj)"], ["proof (state)\nthis:\n  verts G \\<inter> verts H = {}\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "moreover"], ["proof (state)\nthis:\n  verts G \\<inter> verts H = {}\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "from \\<open>H \\<in> sccs\\<close>"], ["proof (chain)\npicking this:\n  H \\<in> sccs", "have \"verts H \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  H \\<in> sccs\n\ngoal (1 subgoal):\n 1. verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  verts H \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "ultimately"], ["proof (chain)\npicking this:\n  verts G \\<inter> verts H = {}\n  verts H \\<subseteq> verts G", "have \"verts H = {}\""], ["proof (prove)\nusing this:\n  verts G \\<inter> verts H = {}\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. verts H = {}", "by auto"], ["proof (state)\nthis:\n  verts H = {}\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "with \\<open>H \\<in> sccs\\<close>"], ["proof (chain)\npicking this:\n  H \\<in> sccs\n  verts H = {}", "have \"False\""], ["proof (prove)\nusing this:\n  H \\<in> sccs\n  verts H = {}\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: sccs_def strongly_connected_def)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?H2 \\<in> sccs; G \\<noteq> ?H2\\<rbrakk> \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. strongly_connected G \\<Longrightarrow> sccs = {G}\n 2. sccs = {G} \\<Longrightarrow> strongly_connected G", "ultimately"], ["proof (chain)\npicking this:\n  G \\<in> sccs\n  \\<lbrakk>?H2 \\<in> sccs; G \\<noteq> ?H2\\<rbrakk> \\<Longrightarrow> False", "show ?R"], ["proof (prove)\nusing this:\n  G \\<in> sccs\n  \\<lbrakk>?H2 \\<in> sccs; G \\<noteq> ?H2\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. sccs = {G}", "by auto"], ["proof (state)\nthis:\n  sccs = {G}\n\ngoal (1 subgoal):\n 1. sccs = {G} \\<Longrightarrow> strongly_connected G", "qed (auto simp: sccs_def)"], ["", "subsection \\<open>Components\\<close>"], ["", "lemma (in sym_digraph) exists_scc:\n  assumes \"verts G \\<noteq> {}\" shows \"\\<exists>c. c \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs", "from assms"], ["proof (chain)\npicking this:\n  verts G \\<noteq> {}", "obtain u where \"u \\<in> verts G\""], ["proof (prove)\nusing this:\n  verts G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>u. u \\<in> verts G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts G", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs", "by (blast dest: induce_reachable_is_in_sccs)"], ["proof (state)\nthis:\n  \\<exists>c. c \\<in> sccs\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem (in sym_digraph) graph_is_union_sccs:\n  shows \"Union sccs = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.Union sccs = G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.Union sccs = G", "have \"(\\<Union>c \\<in> sccs. verts c) = verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (verts ` sccs) = verts G", "by (auto intro: induce_reachable_is_in_sccs)"], ["proof (state)\nthis:\n  \\<Union> (verts ` sccs) = verts G\n\ngoal (1 subgoal):\n 1. local.Union sccs = G", "moreover"], ["proof (state)\nthis:\n  \\<Union> (verts ` sccs) = verts G\n\ngoal (1 subgoal):\n 1. local.Union sccs = G", "have \"(\\<Union>c \\<in> sccs. arcs c) = arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (arcs ` sccs) = arcs G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Union> (arcs ` sccs) \\<subseteq> arcs G\n 2. arcs G \\<subseteq> \\<Union> (arcs ` sccs)", "show \"(\\<Union>c \\<in> sccs. arcs c) \\<subseteq> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (arcs ` sccs) \\<subseteq> arcs G", "by safe (metis in_sccsE induced_imp_subgraph subgraphE subsetD)"], ["proof (state)\nthis:\n  \\<Union> (arcs ` sccs) \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. arcs G \\<subseteq> \\<Union> (arcs ` sccs)", "show \"arcs G \\<subseteq> (\\<Union>c \\<in> sccs. arcs c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs G \\<subseteq> \\<Union> (arcs ` sccs)", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> \\<Union> (arcs ` sccs)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> \\<Union> (arcs ` sccs)", "assume \"e \\<in> arcs G\""], ["proof (state)\nthis:\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> \\<Union> (arcs ` sccs)", "define a b where [simp]: \"a = tail G e\" and [simp]: \"b = head G e\""], ["proof (state)\nthis:\n  a = tail G e\n  b = head G e\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> \\<Union> (arcs ` sccs)", "have \"e \\<in> (\\<Union>x \\<in> sccs. arcs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> \\<Union> (arcs ` sccs)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)\n 2. \\<not> ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)", "assume \"\\<exists>x\\<in>sccs. {a,b } \\<subseteq> verts x\""], ["proof (state)\nthis:\n  \\<exists>x\\<in>sccs. {a, b} \\<subseteq> verts x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)\n 2. \\<not> ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>sccs. {a, b} \\<subseteq> verts x", "obtain c where \"c \\<in> sccs\" and \"{a,b} \\<subseteq> verts c\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>sccs. {a, b} \\<subseteq> verts x\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> sccs; {a, b} \\<subseteq> verts c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c \\<in> sccs\n  {a, b} \\<subseteq> verts c\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)\n 2. \\<not> ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  c \\<in> sccs\n  {a, b} \\<subseteq> verts c", "have \"e \\<in> {e \\<in> arcs G. tail G e \\<in> verts c\n          \\<and> head G e \\<in> verts c}\""], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  {a, b} \\<subseteq> verts c\n\ngoal (1 subgoal):\n 1. e \\<in> {e \\<in> arcs G.\n             tail G e \\<in> verts c \\<and> head G e \\<in> verts c}", "using \\<open>e \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  c \\<in> sccs\n  {a, b} \\<subseteq> verts c\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. e \\<in> {e \\<in> arcs G.\n             tail G e \\<in> verts c \\<and> head G e \\<in> verts c}", "by auto"], ["proof (state)\nthis:\n  e \\<in> {e \\<in> arcs G.\n           tail G e \\<in> verts c \\<and> head G e \\<in> verts c}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)\n 2. \\<not> ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  e \\<in> {e \\<in> arcs G.\n           tail G e \\<in> verts c \\<and> head G e \\<in> verts c}", "have \"e \\<in> arcs c\""], ["proof (prove)\nusing this:\n  e \\<in> {e \\<in> arcs G.\n           tail G e \\<in> verts c \\<and> head G e \\<in> verts c}\n\ngoal (1 subgoal):\n 1. e \\<in> arcs c", "using \\<open>c \\<in> sccs\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> {e \\<in> arcs G.\n           tail G e \\<in> verts c \\<and> head G e \\<in> verts c}\n  c \\<in> sccs\n\ngoal (1 subgoal):\n 1. e \\<in> arcs c", "by blast"], ["proof (state)\nthis:\n  e \\<in> arcs c\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)\n 2. \\<not> ?P \\<Longrightarrow> e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  e \\<in> arcs c", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> arcs c\n\ngoal (1 subgoal):\n 1. e \\<in> \\<Union> (arcs ` sccs)", "using \\<open>c \\<in> sccs\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> arcs c\n  c \\<in> sccs\n\ngoal (1 subgoal):\n 1. e \\<in> \\<Union> (arcs ` sccs)", "by auto"], ["proof (state)\nthis:\n  e \\<in> \\<Union> (arcs ` sccs)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "assume l_assm: \"\\<not>(\\<exists>x\\<in>sccs. {a,b} \\<subseteq> verts x)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>sccs. {a, b} \\<subseteq> verts x)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "have \"a \\<rightarrow>\\<^sup>* b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* b", "using \\<open>e \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* b", "by (metis a_def b_def reachable_adjI in_arcs_imp_in_arcs_ends)"], ["proof (state)\nthis:\n  a \\<rightarrow>\\<^sup>* b\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  a \\<rightarrow>\\<^sup>* b", "have \"{a,b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\" \"a \\<in> verts G\""], ["proof (prove)\nusing this:\n  a \\<rightarrow>\\<^sup>* b\n\ngoal (1 subgoal):\n 1. {a, b}\n    \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v}) &&&\n    a \\<in> verts G", "by (auto elim: reachable_in_vertsE)"], ["proof (state)\nthis:\n  {a, b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\n  a \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "moreover"], ["proof (state)\nthis:\n  {a, b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\n  a \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "have \"(G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v}) \\<in> sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs", "using \\<open>a \\<in> verts G\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> verts G\n\ngoal (1 subgoal):\n 1. G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs", "by (auto intro: induce_reachable_is_in_sccs)"], ["proof (state)\nthis:\n  G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "ultimately"], ["proof (chain)\npicking this:\n  {a, b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\n  a \\<in> verts G\n  G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs", "have False"], ["proof (prove)\nusing this:\n  {a, b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\n  a \\<in> verts G\n  G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs\n\ngoal (1 subgoal):\n 1. False", "using l_assm"], ["proof (prove)\nusing this:\n  {a, b} \\<subseteq> verts (G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v})\n  a \\<in> verts G\n  G \\<restriction> {v. a \\<rightarrow>\\<^sup>* v} \\<in> sccs\n  \\<not> (\\<exists>x\\<in>sccs. {a, b} \\<subseteq> verts x)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>sccs.\n               {a, b} \\<subseteq> verts x) \\<Longrightarrow>\n    e \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. e \\<in> \\<Union> (arcs ` sccs)", "by simp"], ["proof (state)\nthis:\n  e \\<in> \\<Union> (arcs ` sccs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e \\<in> \\<Union> (arcs ` sccs)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> \\<Union> (arcs ` sccs)", "then"], ["proof (chain)\npicking this:\n  e \\<in> \\<Union> (arcs ` sccs)", "show \"e \\<in> (\\<Union>c \\<in> sccs. arcs c)\""], ["proof (prove)\nusing this:\n  e \\<in> \\<Union> (arcs ` sccs)\n\ngoal (1 subgoal):\n 1. e \\<in> \\<Union> (arcs ` sccs)", "by auto"], ["proof (state)\nthis:\n  e \\<in> \\<Union> (arcs ` sccs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arcs G \\<subseteq> \\<Union> (arcs ` sccs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (arcs ` sccs) = arcs G\n\ngoal (1 subgoal):\n 1. local.Union sccs = G", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union> (verts ` sccs) = verts G\n  \\<Union> (arcs ` sccs) = arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (verts ` sccs) = verts G\n  \\<Union> (arcs ` sccs) = arcs G\n\ngoal (1 subgoal):\n 1. local.Union sccs = G", "by (auto simp add: Union_def)"], ["proof (state)\nthis:\n  local.Union sccs = G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sym_digraph) scc_for_vert_ex:\n  assumes \"u \\<in> verts G\"\n  shows \"\\<exists>c. c\\<in>sccs \\<and> u \\<in> verts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs \\<and> u \\<in> verts c", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<in> sccs \\<and> u \\<in> verts c", "by (auto intro: induce_reachable_is_in_sccs)"], ["", "lemma (in sym_digraph) scc_decomp_unique:\n  assumes \"S \\<subseteq> sccs\" \"verts (Union S) = verts G\" shows \"S = sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = sccs", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "assume \"S \\<noteq> sccs\""], ["proof (state)\nthis:\n  S \\<noteq> sccs\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  S \\<noteq> sccs", "obtain c where \"c \\<in> sccs\" and \"c \\<notin> S\""], ["proof (prove)\nusing this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  S \\<noteq> sccs\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> sccs; c \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c \\<in> sccs\n  c \\<notin> S\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  c \\<in> sccs\n  c \\<notin> S", "have \"\\<And>d. d \\<in> S \\<Longrightarrow> verts c \\<inter> verts d = {}\""], ["proof (prove)\nusing this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  c \\<in> sccs\n  c \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>d. d \\<in> S \\<Longrightarrow> verts c \\<inter> verts d = {}", "by (intro scc_disj) auto"], ["proof (state)\nthis:\n  ?d \\<in> S \\<Longrightarrow> verts c \\<inter> verts ?d = {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ?d \\<in> S \\<Longrightarrow> verts c \\<inter> verts ?d = {}", "have \"verts c \\<inter> verts (Union S) = {}\""], ["proof (prove)\nusing this:\n  ?d \\<in> S \\<Longrightarrow> verts c \\<inter> verts ?d = {}\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts (local.Union S) = {}", "by (auto simp: Union_def)"], ["proof (state)\nthis:\n  verts c \\<inter> verts (local.Union S) = {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  verts c \\<inter> verts (local.Union S) = {}", "have \"verts c \\<inter> verts G = {}\""], ["proof (prove)\nusing this:\n  S \\<subseteq> sccs\n  verts (local.Union S) = verts G\n  verts c \\<inter> verts (local.Union S) = {}\n\ngoal (1 subgoal):\n 1. verts c \\<inter> verts G = {}", "by auto"], ["proof (state)\nthis:\n  verts c \\<inter> verts G = {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  verts c \\<inter> verts G = {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "from \\<open>c \\<in> sccs\\<close>"], ["proof (chain)\npicking this:\n  c \\<in> sccs", "obtain u where \"u \\<in> verts c \\<inter> verts G\""], ["proof (prove)\nusing this:\n  c \\<in> sccs\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u \\<in> verts c \\<inter> verts G \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sccs_def strongly_connected_def)"], ["proof (state)\nthis:\n  u \\<in> verts c \\<inter> verts G\n\ngoal (1 subgoal):\n 1. S \\<noteq> sccs \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  verts c \\<inter> verts G = {}\n  u \\<in> verts c \\<inter> verts G", "show False"], ["proof (prove)\nusing this:\n  verts c \\<inter> verts G = {}\n  u \\<in> verts c \\<inter> verts G\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}