{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Digraph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma wf_digraph: \"wf_digraph G\"", "lemmas wellformed = tail_in_verts head_in_verts", "lemma (in wf_digraph) fin_digraphI[intro]:\n  assumes \"finite (verts G)\"\n  assumes \"finite (arcs G)\"\n  shows \"fin_digraph G\"", "lemma (in wf_digraph) sym_digraphI[intro]:\n  assumes \"symmetric G\"\n  shows \"sym_digraph G\"", "lemma (in digraph) graphI[intro]:\n  assumes \"symmetric G\"\n  shows \"graph G\"", "lemma (in fin_digraph) fin_digraph: \"fin_digraph G\"", "lemma (in nomulti_digraph) nomulti_digraph: \"nomulti_digraph G\"", "lemma arcs_ends_conv: \"arcs_ends G = (\\<lambda>e. (tail G e, head G e)) ` arcs G\"", "lemma symmetric_conv: \"symmetric G \\<longleftrightarrow> (\\<forall>e1 \\<in> arcs G. \\<exists>e2 \\<in> arcs G. tail G e1 = head G e2 \\<and> head G e1 = tail G e2)\"", "lemma arcs_ends_symmetric:\n  assumes \"symmetric G\"\n  shows \"(u,v) \\<in> arcs_ends G \\<Longrightarrow> (v,u) \\<in> arcs_ends G\"", "lemma (in nomulti_digraph) inj_on_arc_to_ends:\n  \"inj_on (arc_to_ends G) (arcs G)\"", "lemma reachableE[elim]:\n  assumes \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\"\n  obtains e where \"e \\<in> arcs G\" \"tail G e = u\" \"head G e = v\"", "lemma (in loopfree_digraph) adj_not_same:\n  assumes \"a \\<rightarrow> a\" shows \"False\"", "lemma reachable_in_vertsE:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\" obtains \"u \\<in> verts G\" \"v \\<in> verts G\"", "lemma symmetric_reachable:\n  assumes \"symmetric G\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"", "lemma reachable_rtranclI:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<^esub> v \\<Longrightarrow> (u, v) \\<in> (arcs_ends G)\\<^sup>*\"", "lemma adj_in_verts:\n  assumes \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\"", "lemma dominatesI: assumes \"arc_to_ends G a = (u,v)\" \"a \\<in> arcs G\" shows \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\"", "lemma reachable_refl [intro!, Pure.intro!, simp]: \"v \\<in> verts G \\<Longrightarrow> v \\<rightarrow>\\<^sup>* v\"", "lemma adj_reachable_trans[trans]:\n  assumes \"a \\<rightarrow>\\<^bsub>G\\<^esub> b\" \"b \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\" shows \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\"", "lemma reachable_adj_trans[trans]:\n  assumes \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> b\" \"b \\<rightarrow>\\<^bsub>G\\<^esub> c\" shows \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\"", "lemma reachable_adjI [intro, simp]: \"u \\<rightarrow> v \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v\"", "lemma reachable_trans[trans]:\n  assumes \"u \\<rightarrow>\\<^sup>*v\" \"v \\<rightarrow>\\<^sup>* w\" shows \"u \\<rightarrow>\\<^sup>* w\"", "lemma reachable_induct[consumes 1, case_names base step]:\n  assumes major: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and cases: \"u \\<in> verts G \\<Longrightarrow> P u\"\n       \"\\<And>x y. \\<lbrakk>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> x; x \\<rightarrow>\\<^bsub>G\\<^esub> y; P x\\<rbrakk> \\<Longrightarrow> P y\"\n  shows \"P v\"", "lemma converse_reachable_induct[consumes 1, case_names base step, induct pred: reachable]:\n  assumes major: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and cases: \"v \\<in> verts G \\<Longrightarrow> P v\"\n       \"\\<And>x y. \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y; y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v; P y\\<rbrakk> \\<Longrightarrow> P x\"\n  shows \"P u\"", "lemma (in pre_digraph) converse_reachable_cases:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  obtains (base) \"u = v\" \"u \\<in> verts G\"\n    | (step) w where \"u \\<rightarrow>\\<^bsub>G\\<^esub> w\" \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"", "lemma reachable_in_verts:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\"", "lemma reachable1_in_verts:\n  assumes \"u \\<rightarrow>\\<^sup>+ v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\"", "lemma reachable1_reachable[intro]:\n  \"v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow> v \\<rightarrow>\\<^sup>* w\"", "lemmas reachable1_reachableE[elim] = reachable1_reachable[elim_format]", "lemma reachable_neq_reachable1[intro]:\n  assumes reach: \"v \\<rightarrow>\\<^sup>* w\"\n  and neq: \"v \\<noteq> w\"\n  shows \"v \\<rightarrow>\\<^sup>+ w\"", "lemmas reachable_neq_reachable1E[elim] = reachable_neq_reachable1[elim_format]", "lemma reachable1_reachable_trans [trans]:\n  \"u \\<rightarrow>\\<^sup>+ v \\<Longrightarrow> v \\<rightarrow>\\<^sup>* w \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w\"", "lemma reachable_reachable1_trans [trans]:\n  \"u \\<rightarrow>\\<^sup>* v \\<Longrightarrow> v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w\"", "lemma reachable_conv:\n  \"u \\<rightarrow>\\<^sup>* v \\<longleftrightarrow> (u,v) \\<in> (arcs_ends G)^* \\<inter> (verts G \\<times> verts G)\"", "lemma reachable_conv':\n  assumes \"u \\<in> verts G\"\n  shows \"u \\<rightarrow>\\<^sup>* v \\<longleftrightarrow> (u,v) \\<in> (arcs_ends G)\\<^sup>*\" (is \"?L = ?R\")", "lemma (in sym_digraph) symmetric_reachable':\n  assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"", "lemma (in fin_digraph) finite_in_arcs[intro]:\n  \"finite (in_arcs G v)\"", "lemma (in fin_digraph) finite_out_arcs[intro]:\n  \"finite (out_arcs G v)\"", "lemma in_in_arcs_conv[simp]:\n  \"e \\<in> in_arcs G v \\<longleftrightarrow> e \\<in> arcs G \\<and> head G e = v\"", "lemma in_out_arcs_conv[simp]:\n  \"e \\<in> out_arcs G v \\<longleftrightarrow> e \\<in> arcs G \\<and> tail G e = v\"", "lemma inout_arcs_arc_simps[simp]:\n  assumes \"e \\<in> arcs G\"\n  shows \"tail G e = u \\<Longrightarrow> out_arcs G u \\<inter> insert e E = insert e (out_arcs G u \\<inter> E)\"\n        \"tail G e \\<noteq> u \\<Longrightarrow> out_arcs G u \\<inter> insert e E = out_arcs G u \\<inter> E\"\n        \"out_arcs G u \\<inter> {} = {}\" (* XXX: should be unnecessary *)\n        \"head G e = u \\<Longrightarrow> in_arcs G u \\<inter> insert e E = insert e (in_arcs G u \\<inter> E)\"\n        \"head G e \\<noteq> u \\<Longrightarrow> in_arcs G u \\<inter> insert e E = in_arcs G u \\<inter> E\"\n        \"in_arcs G u \\<inter> {} = {}\"", "lemma in_arcs_int_arcs[simp]: \"in_arcs G u \\<inter> arcs G = in_arcs G u\" and\n      out_arcs_int_arcs[simp]: \"out_arcs G u \\<inter> arcs G = out_arcs G u\"", "lemma in_arcs_in_arcs: \"x \\<in> in_arcs G u \\<Longrightarrow> x \\<in> arcs G\"\n  and out_arcs_in_arcs: \"x \\<in> out_arcs G u \\<Longrightarrow> x \\<in> arcs G\"", "lemma\n  verts_add_arc: \"\\<lbrakk> tail G a \\<in> verts G; head G a \\<in> verts G \\<rbrakk> \\<Longrightarrow> verts (add_arc a) = verts G\"  and\n  verts_add_arc_conv: \"verts (add_arc a) = verts G \\<union> {tail G a, head G a}\" and\n  arcs_add_arc: \"arcs (add_arc a) = insert a (arcs G)\" and\n  tail_add_arc: \"tail (add_arc a) = tail G\" and\n  head_add_arc: \"head (add_arc a) = head G\"", "lemmas add_arc_simps[simp] = verts_add_arc arcs_add_arc tail_add_arc head_add_arc", "lemma\n  verts_del_arc: \"verts (del_arc a) = verts G\"  and\n  arcs_del_arc: \"arcs (del_arc a) = arcs G - {a}\" and\n  tail_del_arc: \"tail (del_arc a) = tail G\" and\n  head_del_arc: \"head (del_arc a) = head G\"", "lemmas del_arc_simps[simp] = verts_del_arc arcs_del_arc tail_del_arc head_del_arc", "lemma\n    verts_add_vert: \"verts (pre_digraph.add_vert G u) = insert u (verts G)\" and\n    arcs_add_vert: \"arcs (pre_digraph.add_vert G u) = arcs G\" and\n    tail_add_vert: \"tail (pre_digraph.add_vert G u) = tail G\" and\n    head_add_vert: \"head (pre_digraph.add_vert G u) = head G\"", "lemmas add_vert_simps = verts_add_vert arcs_add_vert tail_add_vert head_add_vert", "lemma\n    verts_del_vert: \"verts (pre_digraph.del_vert G u) = verts G - {u}\" and\n    arcs_del_vert: \"arcs (pre_digraph.del_vert G u) = {a \\<in> arcs G. tail G a \\<noteq> u \\<and> head G a \\<noteq> u}\" and\n    tail_del_vert: \"tail (pre_digraph.del_vert G u) = tail G\" and\n    head_del_vert: \"head (pre_digraph.del_vert G u) = head G\" and\n    ends_del_vert: \"arc_to_ends (pre_digraph.del_vert G u) = arc_to_ends G\"", "lemmas del_vert_simps = verts_del_vert arcs_del_vert tail_del_vert head_del_vert", "lemma add_add_arc_collapse[simp]: \"pre_digraph.add_arc (add_arc a) a = add_arc a\"", "lemma add_del_arc_collapse[simp]: \"pre_digraph.add_arc (del_arc a) a = add_arc a\"", "lemma del_add_arc_collapse[simp]:\n  \"\\<lbrakk> tail G a \\<in> verts G; head G a \\<in> verts G \\<rbrakk> \\<Longrightarrow> pre_digraph.del_arc (add_arc a) a = del_arc a\"", "lemma del_del_arc_collapse[simp]: \"pre_digraph.del_arc (del_arc a) a = del_arc a\"", "lemma add_arc_commute: \"pre_digraph.add_arc (add_arc b) a = pre_digraph.add_arc (add_arc a) b\"", "lemma del_arc_commute: \"pre_digraph.del_arc (del_arc b) a = pre_digraph.del_arc (del_arc a) b\"", "lemma del_arc_in: \"a \\<notin> arcs G \\<Longrightarrow> del_arc a = G\"", "lemma in_arcs_add_arc_iff:\n  \"in_arcs (add_arc a) u = (if head G a = u then insert a (in_arcs G u) else in_arcs G u)\"", "lemma out_arcs_add_arc_iff:\n  \"out_arcs (add_arc a) u = (if tail G a = u then insert a (out_arcs G u) else out_arcs G u)\"", "lemma in_arcs_del_arc_iff:\n  \"in_arcs (del_arc a) u = (if head G a = u then in_arcs G u - {a} else in_arcs G u)\"", "lemma out_arcs_del_arc_iff:\n  \"out_arcs (del_arc a) u = (if tail G a = u then out_arcs G u - {a} else out_arcs G u)\"", "lemma (in wf_digraph) add_arc_in: \"a \\<in> arcs G \\<Longrightarrow> add_arc a = G\"", "lemma wf_digraph_add_arc[intro]:\n  \"wf_digraph (add_arc a)\"", "lemma wf_digraph_del_arc[intro]:\n  \"wf_digraph (del_arc a)\"", "lemma wf_digraph_del_vert: \"wf_digraph (del_vert u)\"", "lemma wf_digraph_add_vert: \"wf_digraph (add_vert u)\"", "lemma del_vert_add_vert:\n  assumes \"u \\<notin> verts G\"\n  shows \"pre_digraph.del_vert (add_vert u) u = G\"", "lemma in_degree_add_arc_iff:\n  \"in_degree (add_arc a) u = (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1 else in_degree G u)\"", "lemma out_degree_add_arc_iff:\n  \"out_degree (add_arc a) u = (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1 else out_degree G u)\"", "lemma in_degree_del_arc_iff:\n  \"in_degree (del_arc a) u = (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1 else in_degree G u)\"", "lemma out_degree_del_arc_iff:\n  \"out_degree (del_arc a) u = (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1 else out_degree G u)\"", "lemma fin_digraph_del_vert: \"fin_digraph (del_vert u)\"", "lemma fin_digraph_del_arc: \"fin_digraph (del_arc a)\""], "translations": [["", "lemma wf_digraph: \"wf_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "by intro_locales"], ["", "lemmas wellformed = tail_in_verts head_in_verts"], ["", "end"], ["", "definition arcs_ends :: \"('a,'b) pre_digraph \\<Rightarrow> ('a \\<times> 'a) set\" where\n  \"arcs_ends G \\<equiv> arc_to_ends G ` arcs G\""], ["", "definition symmetric :: \"('a,'b) pre_digraph \\<Rightarrow> bool\" where\n  \"symmetric G \\<equiv> sym (arcs_ends G)\""], ["", "text \\<open>\n  Matches \"pseudo digraphs\" from \\cite{bangjensen2009digraphs}, except for\n  allowing the null graph. For a discussion of that topic,\n  see also \\cite{harary1974nullgraph}.\n\\<close>"], ["", "locale fin_digraph = wf_digraph +\n  assumes finite_verts[simp]: \"finite (verts G)\"\n    and finite_arcs[simp]: \"finite (arcs G)\""], ["", "locale loopfree_digraph = wf_digraph +\n  assumes no_loops: \"e \\<in> arcs G \\<Longrightarrow> tail G e \\<noteq> head G e\""], ["", "locale nomulti_digraph = wf_digraph +\n  assumes no_multi_arcs: \"\\<And>e1 e2. \\<lbrakk>e1 \\<in> arcs G; e2 \\<in> arcs G;\n     arc_to_ends G e1 = arc_to_ends G e2\\<rbrakk> \\<Longrightarrow> e1 = e2\""], ["", "locale sym_digraph = wf_digraph +\n  assumes sym_arcs[intro]: \"symmetric G\""], ["", "locale digraph = fin_digraph + loopfree_digraph + nomulti_digraph"], ["", "text \\<open>\n  We model graphs as symmetric digraphs. This is fine for many purposes,\n  but not for all. For example, the path $a,b,a$ is considered to be a cycle\n  in a digraph (and hence in a symmetric digraph), but not in an undirected\n  graph.\n\\<close>"], ["", "locale pseudo_graph = fin_digraph + sym_digraph"], ["", "locale graph = digraph + pseudo_graph"], ["", "lemma (in wf_digraph) fin_digraphI[intro]:\n  assumes \"finite (verts G)\"\n  assumes \"finite (arcs G)\"\n  shows \"fin_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph G", "using assms"], ["proof (prove)\nusing this:\n  finite (verts G)\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. fin_digraph G", "by unfold_locales"], ["", "lemma (in wf_digraph) sym_digraphI[intro]:\n  assumes \"symmetric G\"\n  shows \"sym_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph G", "using assms"], ["proof (prove)\nusing this:\n  symmetric G\n\ngoal (1 subgoal):\n 1. sym_digraph G", "by unfold_locales"], ["", "lemma (in digraph) graphI[intro]:\n  assumes \"symmetric G\"\n  shows \"graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  symmetric G\n\ngoal (1 subgoal):\n 1. graph G", "by unfold_locales"], ["", "definition (in wf_digraph) arc :: \"'b \\<Rightarrow> 'a \\<times> 'a \\<Rightarrow> bool\" where\n  \"arc e uv \\<equiv> e \\<in> arcs G \\<and> tail G e = fst uv \\<and> head G e = snd uv\""], ["", "lemma (in fin_digraph) fin_digraph: \"fin_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph G", "by unfold_locales"], ["", "lemma (in nomulti_digraph) nomulti_digraph: \"nomulti_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nomulti_digraph G", "by unfold_locales"], ["", "lemma arcs_ends_conv: \"arcs_ends G = (\\<lambda>e. (tail G e, head G e)) ` arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends G = (\\<lambda>e. (tail G e, head G e)) ` arcs G", "by (auto simp: arc_to_ends_def arcs_ends_def)"], ["", "lemma symmetric_conv: \"symmetric G \\<longleftrightarrow> (\\<forall>e1 \\<in> arcs G. \\<exists>e2 \\<in> arcs G. tail G e1 = head G e2 \\<and> head G e1 = tail G e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric G =\n    (\\<forall>e1\\<in>arcs G.\n        \\<exists>e2\\<in>arcs G.\n           tail G e1 = head G e2 \\<and> head G e1 = tail G e2)", "unfolding symmetric_def arcs_ends_conv sym_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        (x, y)\n        \\<in> (\\<lambda>e. (tail G e, head G e)) ` arcs G \\<longrightarrow>\n        (y, x) \\<in> (\\<lambda>e. (tail G e, head G e)) ` arcs G) =\n    (\\<forall>e1\\<in>arcs G.\n        \\<exists>e2\\<in>arcs G.\n           tail G e1 = head G e2 \\<and> head G e1 = tail G e2)", "by auto"], ["", "lemma arcs_ends_symmetric:\n  assumes \"symmetric G\"\n  shows \"(u,v) \\<in> arcs_ends G \\<Longrightarrow> (v,u) \\<in> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> arcs_ends G \\<Longrightarrow> (v, u) \\<in> arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  symmetric G\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> arcs_ends G \\<Longrightarrow> (v, u) \\<in> arcs_ends G", "unfolding symmetric_def sym_def"], ["proof (prove)\nusing this:\n  \\<forall>x y.\n     (x, y) \\<in> arcs_ends G \\<longrightarrow> (y, x) \\<in> arcs_ends G\n\ngoal (1 subgoal):\n 1. (u, v) \\<in> arcs_ends G \\<Longrightarrow> (v, u) \\<in> arcs_ends G", "by auto"], ["", "lemma (in nomulti_digraph) inj_on_arc_to_ends:\n  \"inj_on (arc_to_ends G) (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (arc_to_ends G) (arcs G)", "by (rule inj_onI) (rule no_multi_arcs)"], ["", "subsection \\<open>Reachability\\<close>"], ["", "abbreviation dominates :: \"('a,'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (\"_ \\<rightarrow>\\<index> _\" [100,100] 40) where\n  \"dominates G u v \\<equiv> (u,v) \\<in> arcs_ends G\""], ["", "abbreviation reachable1 :: \"('a,'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (\"_ \\<rightarrow>\\<^sup>+\\<index> _\" [100,100] 40) where\n  \"reachable1 G u v \\<equiv> (u,v) \\<in> (arcs_ends G)^+\""], ["", "definition reachable :: \"('a,'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (\"_ \\<rightarrow>\\<^sup>*\\<index> _\" [100,100] 40) where\n  \"reachable G u v \\<equiv> (u,v) \\<in> rtrancl_on (verts G) (arcs_ends G)\""], ["", "lemma reachableE[elim]:\n  assumes \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\"\n  obtains e where \"e \\<in> arcs G\" \"tail G e = u\" \"head G e = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> arcs G; tail G e = u; head G e = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> arcs G; tail G e = u; head G e = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: arcs_ends_conv)"], ["", "lemma (in loopfree_digraph) adj_not_same:\n  assumes \"a \\<rightarrow> a\" shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  a \\<rightarrow> a\n\ngoal (1 subgoal):\n 1. False", "by (rule reachableE) (auto dest: no_loops)"], ["", "lemma reachable_in_vertsE:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\" obtains \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>u \\<in> verts G; v \\<in> verts G\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by induct auto"], ["", "lemma symmetric_reachable:\n  assumes \"symmetric G\" \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v", "have \"sym (rtrancl_on (verts G) (arcs_ends G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (rtrancl_on (verts G) (arcs_ends G))", "using assms"], ["proof (prove)\nusing this:\n  symmetric G\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n\ngoal (1 subgoal):\n 1. sym (rtrancl_on (verts G) (arcs_ends G))", "by (auto simp add: symmetric_def dest: rtrancl_on_sym)"], ["proof (state)\nthis:\n  sym (rtrancl_on (verts G) (arcs_ends G))\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v", "then"], ["proof (chain)\npicking this:\n  sym (rtrancl_on (verts G) (arcs_ends G))", "show ?thesis"], ["proof (prove)\nusing this:\n  sym (rtrancl_on (verts G) (arcs_ends G))\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v", "using assms"], ["proof (prove)\nusing this:\n  sym (rtrancl_on (verts G) (arcs_ends G))\n  symmetric G\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  sym (rtrancl_on (verts G) (arcs_ends G))\n  symmetric G\n  (v, w) \\<in> rtrancl_on (verts G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. (w, v) \\<in> rtrancl_on (verts G) (arcs_ends G)", "by (blast elim: symE)"], ["proof (state)\nthis:\n  w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_rtranclI:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G \\<^esub> v \\<Longrightarrow> (u, v) \\<in> (arcs_ends G)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<Longrightarrow>\n    (u, v) \\<in> (arcs_ends G)\\<^sup>*", "unfolding reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G) \\<Longrightarrow>\n    (u, v) \\<in> (arcs_ends G)\\<^sup>*", "by (rule rtrancl_on_rtranclI)"], ["", "context wf_digraph begin"], ["", "lemma adj_in_verts:\n  assumes \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow> v\n\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "unfolding arcs_ends_conv"], ["proof (prove)\nusing this:\n  (u, v) \\<in> (\\<lambda>e. (tail G e, head G e)) ` arcs G\n\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "by auto"], ["", "lemma dominatesI: assumes \"arc_to_ends G a = (u,v)\" \"a \\<in> arcs G\" shows \"u \\<rightarrow>\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow> v", "using assms"], ["proof (prove)\nusing this:\n  arc_to_ends G a = (u, v)\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow> v", "by (auto simp: arcs_ends_def intro: rev_image_eqI)"], ["", "lemma reachable_refl [intro!, Pure.intro!, simp]: \"v \\<in> verts G \\<Longrightarrow> v \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> verts G \\<Longrightarrow> v \\<rightarrow>\\<^sup>* v", "unfolding reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> verts G \\<Longrightarrow>\n    (v, v) \\<in> rtrancl_on (verts G) (arcs_ends G)", "by auto"], ["", "lemma adj_reachable_trans[trans]:\n  assumes \"a \\<rightarrow>\\<^bsub>G\\<^esub> b\" \"b \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\" shows \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* c", "using assms"], ["proof (prove)\nusing this:\n  a \\<rightarrow> b\n  b \\<rightarrow>\\<^sup>* c\n\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* c", "by (auto simp: reachable_def intro: converse_rtrancl_on_into_rtrancl_on adj_in_verts)"], ["", "lemma reachable_adj_trans[trans]:\n  assumes \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> b\" \"b \\<rightarrow>\\<^bsub>G\\<^esub> c\" shows \"a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* c", "using assms"], ["proof (prove)\nusing this:\n  a \\<rightarrow>\\<^sup>* b\n  b \\<rightarrow> c\n\ngoal (1 subgoal):\n 1. a \\<rightarrow>\\<^sup>* c", "by (auto simp: reachable_def intro: rtrancl_on_into_rtrancl_on adj_in_verts)"], ["", "lemma reachable_adjI [intro, simp]: \"u \\<rightarrow> v \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow> v \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "by (auto intro: adj_reachable_trans adj_in_verts)"], ["", "lemma reachable_trans[trans]:\n  assumes \"u \\<rightarrow>\\<^sup>*v\" \"v \\<rightarrow>\\<^sup>* w\" shows \"u \\<rightarrow>\\<^sup>* w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* w", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<rightarrow>\\<^sup>* w\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* w", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n  (v, w) \\<in> rtrancl_on (verts G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. (u, w) \\<in> rtrancl_on (verts G) (arcs_ends G)", "by (rule rtrancl_on_trans)"], ["", "lemma reachable_induct[consumes 1, case_names base step]:\n  assumes major: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and cases: \"u \\<in> verts G \\<Longrightarrow> P u\"\n       \"\\<And>x y. \\<lbrakk>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> x; x \\<rightarrow>\\<^bsub>G\\<^esub> y; P x\\<rbrakk> \\<Longrightarrow> P y\"\n  shows \"P v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P v", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  u \\<in> verts G \\<Longrightarrow> P u\n  \\<lbrakk>u \\<rightarrow>\\<^sup>* ?x; ?x \\<rightarrow> ?y; P ?x\\<rbrakk>\n  \\<Longrightarrow> P ?y\n\ngoal (1 subgoal):\n 1. P v", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n  u \\<in> verts G \\<Longrightarrow> P u\n  \\<lbrakk>(u, ?x) \\<in> rtrancl_on (verts G) (arcs_ends G);\n   ?x \\<rightarrow> ?y; P ?x\\<rbrakk>\n  \\<Longrightarrow> P ?y\n\ngoal (1 subgoal):\n 1. P v", "by (rule rtrancl_on_induct) auto"], ["", "lemma converse_reachable_induct[consumes 1, case_names base step, induct pred: reachable]:\n  assumes major: \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n    and cases: \"v \\<in> verts G \\<Longrightarrow> P v\"\n       \"\\<And>x y. \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y; y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v; P y\\<rbrakk> \\<Longrightarrow> P x\"\n  shows \"P u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P u", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  v \\<in> verts G \\<Longrightarrow> P v\n  \\<lbrakk>?x \\<rightarrow> ?y; ?y \\<rightarrow>\\<^sup>* v; P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. P u", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n  v \\<in> verts G \\<Longrightarrow> P v\n  \\<lbrakk>?x \\<rightarrow> ?y;\n   (?y, v) \\<in> rtrancl_on (verts G) (arcs_ends G); P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. P u", "by (rule converse_rtrancl_on_induct) auto"], ["", "lemma (in pre_digraph) converse_reachable_cases:\n  assumes \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\"\n  obtains (base) \"u = v\" \"u \\<in> verts G\"\n    | (step) w where \"u \\<rightarrow>\\<^bsub>G\\<^esub> w\" \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>u = v; u \\<in> verts G\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>w.\n        \\<lbrakk>u \\<rightarrow> w; w \\<rightarrow>\\<^sup>* v\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>u = v; u \\<in> verts G\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>w.\n        \\<lbrakk>u \\<rightarrow> w; w \\<rightarrow>\\<^sup>* v\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding reachable_def"], ["proof (prove)\nusing this:\n  (u, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>u = v; u \\<in> verts G\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>w.\n        \\<lbrakk>u \\<rightarrow> w;\n         (w, v) \\<in> rtrancl_on (verts G) (arcs_ends G)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases rule: converse_rtrancl_on_cases) auto"], ["", "lemma reachable_in_verts:\n  assumes \"u \\<rightarrow>\\<^sup>* v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "by induct (simp_all add: adj_in_verts)"], ["", "lemma reachable1_in_verts:\n  assumes \"u \\<rightarrow>\\<^sup>+ v\" shows \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "using assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>+ v\n\ngoal (1 subgoal):\n 1. u \\<in> verts G &&& v \\<in> verts G", "by induct (simp_all add: adj_in_verts)"], ["", "lemma reachable1_reachable[intro]:\n  \"v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow> v \\<rightarrow>\\<^sup>* w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow> v \\<rightarrow>\\<^sup>* w", "unfolding reachable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow>\n    (v, w) \\<in> rtrancl_on (verts G) (arcs_ends G)", "by (rule rtrancl_consistent_rtrancl_on) (simp_all add: reachable1_in_verts adj_in_verts)"], ["", "lemmas reachable1_reachableE[elim] = reachable1_reachable[elim_format]"], ["", "lemma reachable_neq_reachable1[intro]:\n  assumes reach: \"v \\<rightarrow>\\<^sup>* w\"\n  and neq: \"v \\<noteq> w\"\n  shows \"v \\<rightarrow>\\<^sup>+ w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w", "from reach"], ["proof (chain)\npicking this:\n  v \\<rightarrow>\\<^sup>* w", "have \"(v,w) \\<in> (arcs_ends G)^*\""], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>* w\n\ngoal (1 subgoal):\n 1. (v, w) \\<in> (arcs_ends G)\\<^sup>*", "by (rule reachable_rtranclI)"], ["proof (state)\nthis:\n  (v, w) \\<in> (arcs_ends G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w", "with neq"], ["proof (chain)\npicking this:\n  v \\<noteq> w\n  (v, w) \\<in> (arcs_ends G)\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> w\n  (v, w) \\<in> (arcs_ends G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>+ w", "by (auto dest: rtranclD)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>+ w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas reachable_neq_reachable1E[elim] = reachable_neq_reachable1[elim_format]"], ["", "lemma reachable1_reachable_trans [trans]:\n  \"u \\<rightarrow>\\<^sup>+ v \\<Longrightarrow> v \\<rightarrow>\\<^sup>* w \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<rightarrow>\\<^sup>+ v; v \\<rightarrow>\\<^sup>* w\\<rbrakk>\n    \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w", "by (metis trancl_trans reachable_neq_reachable1)"], ["", "lemma reachable_reachable1_trans [trans]:\n  \"u \\<rightarrow>\\<^sup>* v \\<Longrightarrow> v \\<rightarrow>\\<^sup>+ w \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<rightarrow>\\<^sup>* v; v \\<rightarrow>\\<^sup>+ w\\<rbrakk>\n    \\<Longrightarrow> u \\<rightarrow>\\<^sup>+ w", "by (metis trancl_trans reachable_neq_reachable1)"], ["", "lemma reachable_conv:\n  \"u \\<rightarrow>\\<^sup>* v \\<longleftrightarrow> (u,v) \\<in> (arcs_ends G)^* \\<inter> (verts G \\<times> verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>* v) =\n    ((u, v) \\<in> Restr ((arcs_ends G)\\<^sup>*) (verts G))", "apply (auto intro: reachable_in_verts)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(u, v) \\<in> (arcs_ends G)\\<^sup>*; u \\<in> verts G;\n     v \\<in> verts G\\<rbrakk>\n    \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v", "apply (induct rule: rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>u \\<in> verts G; u \\<in> verts G\\<rbrakk>\n    \\<Longrightarrow> u \\<rightarrow>\\<^sup>* u\n 2. \\<And>y z.\n       \\<lbrakk>(u, y) \\<in> (arcs_ends G)\\<^sup>*; y \\<rightarrow> z;\n        \\<lbrakk>u \\<in> verts G; y \\<in> verts G\\<rbrakk>\n        \\<Longrightarrow> u \\<rightarrow>\\<^sup>* y;\n        u \\<in> verts G; z \\<in> verts G\\<rbrakk>\n       \\<Longrightarrow> u \\<rightarrow>\\<^sup>* z", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma reachable_conv':\n  assumes \"u \\<in> verts G\"\n  shows \"u \\<rightarrow>\\<^sup>* v \\<longleftrightarrow> (u,v) \\<in> (arcs_ends G)\\<^sup>*\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>* v) = ((u, v) \\<in> (arcs_ends G)\\<^sup>*)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    (u, v) \\<in> (arcs_ends G)\\<^sup>*\n 2. (u, v) \\<in> (arcs_ends G)\\<^sup>* \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "assume \"?R\""], ["proof (state)\nthis:\n  (u, v) \\<in> (arcs_ends G)\\<^sup>*\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    (u, v) \\<in> (arcs_ends G)\\<^sup>*\n 2. (u, v) \\<in> (arcs_ends G)\\<^sup>* \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  (u, v) \\<in> (arcs_ends G)\\<^sup>*", "show \"?L\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> (arcs_ends G)\\<^sup>*\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "using assms"], ["proof (prove)\nusing this:\n  (u, v) \\<in> (arcs_ends G)\\<^sup>*\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by induct auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    (u, v) \\<in> (arcs_ends G)\\<^sup>*", "qed (auto simp: reachable_conv)"], ["", "end"], ["", "lemma (in sym_digraph) symmetric_reachable':\n  assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"w \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>* v", "using sym_arcs assms"], ["proof (prove)\nusing this:\n  symmetric G\n  v \\<rightarrow>\\<^sup>* w\n\ngoal (1 subgoal):\n 1. w \\<rightarrow>\\<^sup>* v", "by (rule symmetric_reachable)"], ["", "subsection \\<open>Degrees of vertices\\<close>"], ["", "definition in_arcs :: \"('a, 'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> 'b set\" where\n  \"in_arcs G v \\<equiv> {e \\<in> arcs G. head G e = v}\""], ["", "definition out_arcs :: \"('a, 'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> 'b set\" where\n  \"out_arcs G v \\<equiv> {e \\<in> arcs G. tail G e = v}\""], ["", "definition in_degree :: \"('a, 'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> nat\" where\n  \"in_degree G v \\<equiv> card (in_arcs G v)\""], ["", "definition out_degree :: \"('a, 'b) pre_digraph \\<Rightarrow> 'a \\<Rightarrow> nat\" where\n  \"out_degree G v \\<equiv> card (out_arcs G v)\""], ["", "lemma (in fin_digraph) finite_in_arcs[intro]:\n  \"finite (in_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (in_arcs G v)", "unfolding in_arcs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {e \\<in> arcs G. head G e = v}", "by auto"], ["", "lemma (in fin_digraph) finite_out_arcs[intro]:\n  \"finite (out_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (out_arcs G v)", "unfolding out_arcs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {e \\<in> arcs G. tail G e = v}", "by auto"], ["", "lemma in_in_arcs_conv[simp]:\n  \"e \\<in> in_arcs G v \\<longleftrightarrow> e \\<in> arcs G \\<and> head G e = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<in> in_arcs G v) = (e \\<in> arcs G \\<and> head G e = v)", "unfolding in_arcs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<in> {e \\<in> arcs G. head G e = v}) =\n    (e \\<in> arcs G \\<and> head G e = v)", "by auto"], ["", "lemma in_out_arcs_conv[simp]:\n  \"e \\<in> out_arcs G v \\<longleftrightarrow> e \\<in> arcs G \\<and> tail G e = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<in> out_arcs G v) = (e \\<in> arcs G \\<and> tail G e = v)", "unfolding out_arcs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<in> {e \\<in> arcs G. tail G e = v}) =\n    (e \\<in> arcs G \\<and> tail G e = v)", "by auto"], ["", "lemma inout_arcs_arc_simps[simp]:\n  assumes \"e \\<in> arcs G\"\n  shows \"tail G e = u \\<Longrightarrow> out_arcs G u \\<inter> insert e E = insert e (out_arcs G u \\<inter> E)\"\n        \"tail G e \\<noteq> u \\<Longrightarrow> out_arcs G u \\<inter> insert e E = out_arcs G u \\<inter> E\"\n        \"out_arcs G u \\<inter> {} = {}\" (* XXX: should be unnecessary *)\n        \"head G e = u \\<Longrightarrow> in_arcs G u \\<inter> insert e E = insert e (in_arcs G u \\<inter> E)\"\n        \"head G e \\<noteq> u \\<Longrightarrow> in_arcs G u \\<inter> insert e E = in_arcs G u \\<inter> E\"\n        \"in_arcs G u \\<inter> {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((tail G e = u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E =\n      insert e (out_arcs G u \\<inter> E)) &&&\n     (tail G e \\<noteq> u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E = out_arcs G u \\<inter> E) &&&\n     out_arcs G u \\<inter> {} = {}) &&&\n    (head G e = u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E =\n     insert e (in_arcs G u \\<inter> E)) &&&\n    (head G e \\<noteq> u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E = in_arcs G u \\<inter> E) &&&\n    in_arcs G u \\<inter> {} = {}", "(* XXX: should be unnecessary *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((tail G e = u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E =\n      insert e (out_arcs G u \\<inter> E)) &&&\n     (tail G e \\<noteq> u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E = out_arcs G u \\<inter> E) &&&\n     out_arcs G u \\<inter> {} = {}) &&&\n    (head G e = u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E =\n     insert e (in_arcs G u \\<inter> E)) &&&\n    (head G e \\<noteq> u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E = in_arcs G u \\<inter> E) &&&\n    in_arcs G u \\<inter> {} = {}", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> arcs G\n\ngoal (1 subgoal):\n 1. ((tail G e = u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E =\n      insert e (out_arcs G u \\<inter> E)) &&&\n     (tail G e \\<noteq> u \\<Longrightarrow>\n      out_arcs G u \\<inter> insert e E = out_arcs G u \\<inter> E) &&&\n     out_arcs G u \\<inter> {} = {}) &&&\n    (head G e = u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E =\n     insert e (in_arcs G u \\<inter> E)) &&&\n    (head G e \\<noteq> u \\<Longrightarrow>\n     in_arcs G u \\<inter> insert e E = in_arcs G u \\<inter> E) &&&\n    in_arcs G u \\<inter> {} = {}", "by auto"], ["", "lemma in_arcs_int_arcs[simp]: \"in_arcs G u \\<inter> arcs G = in_arcs G u\" and\n      out_arcs_int_arcs[simp]: \"out_arcs G u \\<inter> arcs G = out_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs G u \\<inter> arcs G = in_arcs G u &&&\n    out_arcs G u \\<inter> arcs G = out_arcs G u", "by auto"], ["", "lemma in_arcs_in_arcs: \"x \\<in> in_arcs G u \\<Longrightarrow> x \\<in> arcs G\"\n  and out_arcs_in_arcs: \"x \\<in> out_arcs G u \\<Longrightarrow> x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> in_arcs G u \\<Longrightarrow> x \\<in> arcs G) &&&\n    (x \\<in> out_arcs G u \\<Longrightarrow> x \\<in> arcs G)", "by (auto simp: in_arcs_def out_arcs_def)"], ["", "subsection \\<open>Graph operations\\<close>"], ["", "context pre_digraph begin"], ["", "definition add_arc :: \"'b \\<Rightarrow>  ('a,'b) pre_digraph\" where\n  \"add_arc a = \\<lparr> verts = verts G \\<union> {tail G a, head G a}, arcs = insert a (arcs G), tail = tail G, head = head G \\<rparr>\""], ["", "definition  del_arc :: \"'b \\<Rightarrow> ('a,'b) pre_digraph\" where\n  \"del_arc a = \\<lparr> verts = verts G, arcs = arcs G - {a}, tail = tail G, head = head G \\<rparr>\""], ["", "definition add_vert :: \"'a \\<Rightarrow>  ('a,'b) pre_digraph\" where\n  \"add_vert v = \\<lparr> verts = insert v (verts G), arcs = arcs G, tail = tail G, head = head G \\<rparr>\""], ["", "definition del_vert :: \"'a \\<Rightarrow>  ('a,'b) pre_digraph\" where\n  \"del_vert v = \\<lparr> verts = verts G - {v}, arcs = {a \\<in> arcs G. tail G a \\<noteq> v \\<and> head G a \\<noteq> v}, tail = tail G, head = head G \\<rparr>\""], ["", "lemma\n  verts_add_arc: \"\\<lbrakk> tail G a \\<in> verts G; head G a \\<in> verts G \\<rbrakk> \\<Longrightarrow> verts (add_arc a) = verts G\"  and\n  verts_add_arc_conv: \"verts (add_arc a) = verts G \\<union> {tail G a, head G a}\" and\n  arcs_add_arc: \"arcs (add_arc a) = insert a (arcs G)\" and\n  tail_add_arc: \"tail (add_arc a) = tail G\" and\n  head_add_arc: \"head (add_arc a) = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>tail G a \\<in> verts G; head G a \\<in> verts G\\<rbrakk>\n      \\<Longrightarrow> verts (add_arc a) = verts G) &&&\n     verts (add_arc a) = verts G \\<union> {tail G a, head G a}) &&&\n    arcs (add_arc a) = insert a (arcs G) &&&\n    tail (add_arc a) = tail G &&& head (add_arc a) = head G", "by (auto simp: add_arc_def)"], ["", "lemmas add_arc_simps[simp] = verts_add_arc arcs_add_arc tail_add_arc head_add_arc"], ["", "lemma\n  verts_del_arc: \"verts (del_arc a) = verts G\"  and\n  arcs_del_arc: \"arcs (del_arc a) = arcs G - {a}\" and\n  tail_del_arc: \"tail (del_arc a) = tail G\" and\n  head_del_arc: \"head (del_arc a) = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (del_arc a) = verts G &&& arcs (del_arc a) = arcs G - {a}) &&&\n    tail (del_arc a) = tail G &&& head (del_arc a) = head G", "by (auto simp: del_arc_def)"], ["", "lemmas del_arc_simps[simp] = verts_del_arc arcs_del_arc tail_del_arc head_del_arc"], ["", "lemma\n    verts_add_vert: \"verts (pre_digraph.add_vert G u) = insert u (verts G)\" and\n    arcs_add_vert: \"arcs (pre_digraph.add_vert G u) = arcs G\" and\n    tail_add_vert: \"tail (pre_digraph.add_vert G u) = tail G\" and\n    head_add_vert: \"head (pre_digraph.add_vert G u) = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (add_vert u) = insert u (verts G) &&&\n     arcs (add_vert u) = arcs G) &&&\n    tail (add_vert u) = tail G &&& head (add_vert u) = head G", "by (auto simp: pre_digraph.add_vert_def)"], ["", "lemmas add_vert_simps = verts_add_vert arcs_add_vert tail_add_vert head_add_vert"], ["", "lemma\n    verts_del_vert: \"verts (pre_digraph.del_vert G u) = verts G - {u}\" and\n    arcs_del_vert: \"arcs (pre_digraph.del_vert G u) = {a \\<in> arcs G. tail G a \\<noteq> u \\<and> head G a \\<noteq> u}\" and\n    tail_del_vert: \"tail (pre_digraph.del_vert G u) = tail G\" and\n    head_del_vert: \"head (pre_digraph.del_vert G u) = head G\" and\n    ends_del_vert: \"arc_to_ends (pre_digraph.del_vert G u) = arc_to_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts (del_vert u) = verts G - {u} &&&\n     arcs (del_vert u) =\n     {a \\<in> arcs G. tail G a \\<noteq> u \\<and> head G a \\<noteq> u}) &&&\n    tail (del_vert u) = tail G &&&\n    head (del_vert u) = head G &&& arc_to_ends (del_vert u) = arc_to_ends G", "by (auto simp: pre_digraph.del_vert_def arc_to_ends_def)"], ["", "lemmas del_vert_simps = verts_del_vert arcs_del_vert tail_del_vert head_del_vert"], ["", "lemma add_add_arc_collapse[simp]: \"pre_digraph.add_arc (add_arc a) a = add_arc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.add_arc (add_arc a) a = add_arc a", "by (auto simp: pre_digraph.add_arc_def)"], ["", "lemma add_del_arc_collapse[simp]: \"pre_digraph.add_arc (del_arc a) a = add_arc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.add_arc (del_arc a) a = add_arc a", "by (auto simp: pre_digraph.verts_add_arc_conv pre_digraph.add_arc_simps)"], ["", "lemma del_add_arc_collapse[simp]:\n  \"\\<lbrakk> tail G a \\<in> verts G; head G a \\<in> verts G \\<rbrakk> \\<Longrightarrow> pre_digraph.del_arc (add_arc a) a = del_arc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tail G a \\<in> verts G; head G a \\<in> verts G\\<rbrakk>\n    \\<Longrightarrow> pre_digraph.del_arc (add_arc a) a = del_arc a", "by (auto simp: pre_digraph.add_arc_simps pre_digraph.del_arc_simps)"], ["", "lemma del_del_arc_collapse[simp]: \"pre_digraph.del_arc (del_arc a) a = del_arc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.del_arc (del_arc a) a = del_arc a", "by (auto simp: pre_digraph.add_arc_simps pre_digraph.del_arc_simps)"], ["", "lemma add_arc_commute: \"pre_digraph.add_arc (add_arc b) a = pre_digraph.add_arc (add_arc a) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.add_arc (add_arc b) a = pre_digraph.add_arc (add_arc a) b", "by (auto simp: pre_digraph.add_arc_def)"], ["", "lemma del_arc_commute: \"pre_digraph.del_arc (del_arc b) a = pre_digraph.del_arc (del_arc a) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.del_arc (del_arc b) a = pre_digraph.del_arc (del_arc a) b", "by (auto simp: pre_digraph.del_arc_def)"], ["", "lemma del_arc_in: \"a \\<notin> arcs G \\<Longrightarrow> del_arc a = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> del_arc a = G", "by (rule pre_digraph.equality) (auto simp: add_arc_def)"], ["", "lemma in_arcs_add_arc_iff:\n  \"in_arcs (add_arc a) u = (if head G a = u then insert a (in_arcs G u) else in_arcs G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (add_arc a) u =\n    (if head G a = u then insert a (in_arcs G u) else in_arcs G u)", "by auto"], ["", "lemma out_arcs_add_arc_iff:\n  \"out_arcs (add_arc a) u = (if tail G a = u then insert a (out_arcs G u) else out_arcs G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (add_arc a) u =\n    (if tail G a = u then insert a (out_arcs G u) else out_arcs G u)", "by auto"], ["", "lemma in_arcs_del_arc_iff:\n  \"in_arcs (del_arc a) u = (if head G a = u then in_arcs G u - {a} else in_arcs G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs (del_arc a) u =\n    (if head G a = u then in_arcs G u - {a} else in_arcs G u)", "by auto"], ["", "lemma out_arcs_del_arc_iff:\n  \"out_arcs (del_arc a) u = (if tail G a = u then out_arcs G u - {a} else out_arcs G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (del_arc a) u =\n    (if tail G a = u then out_arcs G u - {a} else out_arcs G u)", "by auto"], ["", "lemma (in wf_digraph) add_arc_in: \"a \\<in> arcs G \\<Longrightarrow> add_arc a = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> arcs G \\<Longrightarrow> add_arc a = G", "by (rule pre_digraph.equality) (auto simp: add_arc_def)"], ["", "end"], ["", "context wf_digraph begin"], ["", "lemma wf_digraph_add_arc[intro]:\n  \"wf_digraph (add_arc a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (add_arc a)", "by unfold_locales (auto simp: verts_add_arc_conv)"], ["", "lemma wf_digraph_del_arc[intro]:\n  \"wf_digraph (del_arc a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (del_arc a)", "by unfold_locales (auto simp: verts_add_arc_conv)"], ["", "lemma wf_digraph_del_vert: \"wf_digraph (del_vert u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (del_vert u)", "by standard (auto simp: del_vert_simps)"], ["", "lemma wf_digraph_add_vert: \"wf_digraph (add_vert u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (add_vert u)", "by standard (auto simp: add_vert_simps)"], ["", "lemma del_vert_add_vert:\n  assumes \"u \\<notin> verts G\"\n  shows \"pre_digraph.del_vert (add_vert u) u = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.del_vert (add_vert u) u = G", "using assms"], ["proof (prove)\nusing this:\n  u \\<notin> verts G\n\ngoal (1 subgoal):\n 1. pre_digraph.del_vert (add_vert u) u = G", "by (intro pre_digraph.equality) (auto simp: pre_digraph.del_vert_def add_vert_def)"], ["", "end"], ["", "context fin_digraph begin"], ["", "lemma in_degree_add_arc_iff:\n  \"in_degree (add_arc a) u = (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1 else in_degree G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (add_arc a) u =\n    (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1\n     else in_degree G u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (add_arc a) u =\n    (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1\n     else in_degree G u)", "have \"a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u", "by (auto simp: in_arcs_def)"], ["proof (state)\nthis:\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. in_degree (add_arc a) u =\n    (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1\n     else in_degree G u)", "with finite_in_arcs"], ["proof (chain)\npicking this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. in_degree (add_arc a) u =\n    (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1\n     else in_degree G u)", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. card (in_arcs (add_arc a) u) =\n    (if head G a = u \\<and> a \\<notin> arcs G then card (in_arcs G u) + 1\n     else card (in_arcs G u))", "by (auto simp: in_arcs_add_arc_iff intro: arg_cong[where f=card])"], ["proof (state)\nthis:\n  in_degree (add_arc a) u =\n  (if head G a = u \\<and> a \\<notin> arcs G then in_degree G u + 1\n   else in_degree G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma out_degree_add_arc_iff:\n  \"out_degree (add_arc a) u = (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1 else out_degree G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree (add_arc a) u =\n    (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1\n     else out_degree G u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. out_degree (add_arc a) u =\n    (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1\n     else out_degree G u)", "have \"a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u", "by (auto simp: out_arcs_def)"], ["proof (state)\nthis:\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. out_degree (add_arc a) u =\n    (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1\n     else out_degree G u)", "with finite_out_arcs"], ["proof (chain)\npicking this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. out_degree (add_arc a) u =\n    (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1\n     else out_degree G u)", "unfolding out_degree_def"], ["proof (prove)\nusing this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. card (out_arcs (add_arc a) u) =\n    (if tail G a = u \\<and> a \\<notin> arcs G then card (out_arcs G u) + 1\n     else card (out_arcs G u))", "by (auto simp: out_arcs_add_arc_iff intro: arg_cong[where f=card])"], ["proof (state)\nthis:\n  out_degree (add_arc a) u =\n  (if tail G a = u \\<and> a \\<notin> arcs G then out_degree G u + 1\n   else out_degree G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_degree_del_arc_iff:\n  \"in_degree (del_arc a) u = (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1 else in_degree G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree (del_arc a) u =\n    (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1\n     else in_degree G u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. in_degree (del_arc a) u =\n    (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1\n     else in_degree G u)", "have \"a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u", "by (auto simp: in_arcs_def)"], ["proof (state)\nthis:\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. in_degree (del_arc a) u =\n    (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1\n     else in_degree G u)", "with finite_in_arcs"], ["proof (chain)\npicking this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. in_degree (del_arc a) u =\n    (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1\n     else in_degree G u)", "unfolding in_degree_def"], ["proof (prove)\nusing this:\n  finite (in_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> in_arcs G u\n\ngoal (1 subgoal):\n 1. card (in_arcs (del_arc a) u) =\n    (if head G a = u \\<and> a \\<in> arcs G then card (in_arcs G u) - 1\n     else card (in_arcs G u))", "by (auto simp: in_arcs_del_arc_iff intro: arg_cong[where f=card])"], ["proof (state)\nthis:\n  in_degree (del_arc a) u =\n  (if head G a = u \\<and> a \\<in> arcs G then in_degree G u - 1\n   else in_degree G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma out_degree_del_arc_iff:\n  \"out_degree (del_arc a) u = (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1 else out_degree G u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree (del_arc a) u =\n    (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1\n     else out_degree G u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. out_degree (del_arc a) u =\n    (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1\n     else out_degree G u)", "have \"a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u", "by (auto simp: out_arcs_def)"], ["proof (state)\nthis:\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. out_degree (del_arc a) u =\n    (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1\n     else out_degree G u)", "with finite_out_arcs"], ["proof (chain)\npicking this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. out_degree (del_arc a) u =\n    (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1\n     else out_degree G u)", "unfolding out_degree_def"], ["proof (prove)\nusing this:\n  finite (out_arcs G ?v)\n  a \\<notin> arcs G \\<Longrightarrow> a \\<notin> out_arcs G u\n\ngoal (1 subgoal):\n 1. card (out_arcs (del_arc a) u) =\n    (if tail G a = u \\<and> a \\<in> arcs G then card (out_arcs G u) - 1\n     else card (out_arcs G u))", "by (auto simp: out_arcs_del_arc_iff intro: arg_cong[where f=card])"], ["proof (state)\nthis:\n  out_degree (del_arc a) u =\n  (if tail G a = u \\<and> a \\<in> arcs G then out_degree G u - 1\n   else out_degree G u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fin_digraph_del_vert: \"fin_digraph (del_vert u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (del_vert u)", "by standard (auto simp: del_vert_simps)"], ["", "lemma fin_digraph_del_arc: \"fin_digraph (del_arc a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (del_arc a)", "by standard (auto simp: del_vert_simps)"], ["", "end"], ["", "end"]]}