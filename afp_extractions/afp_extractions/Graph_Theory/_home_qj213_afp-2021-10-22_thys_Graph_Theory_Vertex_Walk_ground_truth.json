{"file_name": "/home/qj213/afp-2021-10-22/thys/Graph_Theory/Vertex_Walk.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Graph_Theory", "problem_names": ["lemma vwalk_length_simp[simp]:\n  shows \"vwalk_length p = length p - 1\"", "lemma vwalkI[intro]:\n  assumes \"set p \\<subseteq> verts G\"\n  assumes \"set (vwalk_arcs p) \\<subseteq> arcs_ends G\"\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk p G\"", "lemma vwalkE[elim]:\n  assumes \"vwalk p G\"\n  assumes \"set p \\<subseteq> verts G \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> arcs_ends G \\<and> p \\<noteq> [] \\<Longrightarrow> P\"\n  shows \"P\"", "lemma vpathI[intro]:\n  assumes \"vwalk p G\"\n  assumes \"distinct p\"\n  shows \"vpath p G\"", "lemma vpathE[elim]:\n  assumes \"vpath p G\"\n  assumes \"vwalk p G \\<Longrightarrow> distinct p \\<Longrightarrow> P\"\n  shows \"P\"", "lemma vwalk_consI:\n  assumes \"vwalk p G\"\n  assumes \"a \\<in> verts G\"\n  assumes \"(a, hd p) \\<in> arcs_ends G\"\n  shows \"vwalk (a # p) G\"", "lemma vwalk_consE:\n  assumes \"vwalk (a # p) G\"\n  assumes \"p \\<noteq> []\"\n  assumes \"(a, hd p) \\<in> arcs_ends G \\<Longrightarrow> vwalk p G \\<Longrightarrow> P\"\n  shows \"P\"", "lemma vwalk_induct[case_names Base Cons, induct pred: vwalk]:\n  assumes \"vwalk p G\"\n  assumes \"\\<And>u. u \\<in> verts G \\<Longrightarrow> P [u]\"\n  assumes \"\\<And>u v es. (u,v) \\<in> arcs_ends G \\<Longrightarrow> P (v # es) \\<Longrightarrow> P (u # v # es)\"\n  shows \"P p\"", "lemma vwalk_arcs_Cons[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk_arcs (u # p) = (u, hd p) # vwalk_arcs p\"", "lemma vwalk_arcs_append:\n  assumes \"p \\<noteq> []\" and \"q \\<noteq> []\"\n  shows \"vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q\"", "lemma set_vwalk_arcs_append1:\n  \"set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\"", "lemma set_vwalk_arcs_append2:\n  \"set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\"", "lemma set_vwalk_arcs_cons:\n  \"set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (u # p))\"", "lemma set_vwalk_arcs_snoc:\n  assumes \"p \\<noteq> []\"\n  shows \"set (vwalk_arcs (p @ [a]))\n    = insert (last p, a) (set (vwalk_arcs p))\"", "lemma (in wf_digraph) vwalk_wf_digraph_consI:\n  assumes \"vwalk p G\"\n  assumes \"(a, hd p) \\<in> arcs_ends G\"\n  shows \"vwalk (a # p) G\"", "lemma vwalkI_append_l:\n  assumes \"p \\<noteq> []\"\n  assumes \"vwalk (p @ q) G\"\n  shows \"vwalk p G\"", "lemma vwalkI_append_r:\n  assumes \"q \\<noteq> []\"\n  assumes \"vwalk (p @ q) G\"\n  shows \"vwalk q G\"", "lemma vwalk_to_vpath_hd: \"hd (vwalk_to_vpath xs) = hd xs\"", "lemma vwalk_to_vpath_induct3[consumes 0, case_names base in_set not_in_set]:\n  assumes \"P []\"\n  assumes \"\\<And>x xs. x \\<in> set xs \\<Longrightarrow> P (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n    \\<Longrightarrow> P (x # xs)\"\n  assumes \"\\<And>x xs. x \\<notin> set xs \\<Longrightarrow> P xs \\<Longrightarrow> P (x # xs)\"\n  shows \"P xs\"", "lemma vwalk_to_vpath_nonempty:\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk_to_vpath p \\<noteq> []\"", "lemma vwalk_to_vpath_last:\n  \"last (vwalk_to_vpath xs) = last xs\"", "lemma vwalk_to_vpath_subset:\n  assumes \"x \\<in> set (vwalk_to_vpath xs)\"\n  shows \"x \\<in> set xs\"", "lemma vwalk_to_vpath_cons:\n  assumes \"x \\<notin> set xs\"\n  shows \"vwalk_to_vpath (x # xs) = x # vwalk_to_vpath xs\"", "lemma vwalk_to_vpath_vpath:\n  assumes \"vwalk p G\"\n  shows \"vpath (vwalk_to_vpath p) G\"", "lemma vwalk_imp_ex_vpath:\n  assumes \"vwalk p G\"\n  assumes \"hd p = u\"\n  assumes \"last p = v\"\n  shows \"\\<exists>q. vpath q G \\<and> hd q = u \\<and> last q = v\"", "lemma vwalk_arcs_set_nil:\n  assumes \"x \\<in> set (vwalk_arcs p)\"\n  shows \"p \\<noteq> []\"", "lemma in_set_vwalk_arcs_append1:\n  assumes \"x \\<in> set (vwalk_arcs p) \\<or> x \\<in> set (vwalk_arcs q)\"\n  shows \"x \\<in> set (vwalk_arcs (p @ q))\"", "lemma in_set_vwalk_arcs_append2:\n  assumes nonempty: \"p \\<noteq> []\" \"q \\<noteq> []\"\n  assumes disj: \"x \\<in> set (vwalk_arcs p) \\<or> x = (last p, hd q)\n    \\<or> x \\<in> set (vwalk_arcs q)\"\n  shows \"x \\<in> set (vwalk_arcs (p @ q))\"", "lemma arcs_in_vwalk_arcs:\n  assumes \"u \\<in> set (vwalk_arcs p)\"\n  shows \"u \\<in> set p \\<times> set p\"", "lemma set_vwalk_arcs_rev:\n  \"set (vwalk_arcs (rev p)) = {(v, u). (u,v) \\<in> set (vwalk_arcs p)}\"", "lemma vpath_self:\n  assumes \"u \\<in> verts G\"\n  shows \"vpath [u] G\"", "lemma vwalk_verts_in_verts:\n  assumes \"vwalk p G\"\n  assumes \"u \\<in> set p\"\n  shows \"u \\<in> verts G\"", "lemma vwalk_arcs_tl:\n  \"vwalk_arcs (tl xs) = tl (vwalk_arcs xs)\"", "lemma vwalk_arcs_butlast:\n  \"vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\"", "lemma vwalk_arcs_tl_empty:\n  \"vwalk_arcs xs = [] \\<Longrightarrow> vwalk_arcs (tl xs) = []\"", "lemma vwalk_arcs_butlast_empty:\n  \"xs \\<noteq> [] \\<Longrightarrow> vwalk_arcs xs = [] \\<Longrightarrow> vwalk_arcs (butlast xs) = []\"", "lemma joinable_Nil_l_iff[simp]: \"joinable [] p = False\"\n  and joinable_Nil_r_iff[simp]: \"joinable q [] = False\"", "lemma joinable_Cons_l_iff[simp]: \"p \\<noteq> [] \\<Longrightarrow> joinable (v # p) q = joinable p q\"\n  and joinable_Snoc_r_iff[simp]: \"q \\<noteq> [] \\<Longrightarrow> joinable p (q @ [v]) = joinable p q\"", "lemma joinableI[intro,simp]:\n  assumes \"last p = hd q\" \"p \\<noteq> []\" \"q \\<noteq> []\"\n  shows \"joinable p q\"", "lemma vwalk_join_non_Nil[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"p \\<oplus> q \\<noteq> []\"", "lemma vwalk_join_Cons[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"(u # p) \\<oplus> q = u # p \\<oplus> q\"", "lemma vwalk_join_def2:\n  assumes \"joinable p q\"\n  shows \"p \\<oplus> q = butlast p @ q\"", "lemma vwalk_join_hd':\n  assumes \"p \\<noteq> []\"\n  shows \"hd (p \\<oplus> q) = hd p\"", "lemma vwalk_join_hd:\n  assumes \"joinable p q\"\n  shows \"hd (p \\<oplus> q) = hd p\"", "lemma vwalk_join_last:\n  assumes \"joinable p q\"\n  shows \"last (p \\<oplus> q) = last q\"", "lemma vwalk_join_Nil[simp]:\n  \"p \\<oplus> [] = p\"", "lemma vwalk_joinI_vwalk':\n  assumes \"vwalk p G\"\n  assumes \"vwalk q G\"\n  assumes \"last p = hd q\"\n  shows \"vwalk (p \\<oplus> q) G\"", "lemma vwalk_joinI_vwalk:\n  assumes \"vwalk p G\"\n  assumes \"vwalk q G\"\n  assumes \"joinable p q\"\n  shows \"vwalk (p \\<oplus> q) G\"", "lemma vwalk_join_split:\n  assumes \"u \\<in> set p\"\n  shows \"\\<exists>q r. p = q \\<oplus> r\n  \\<and> last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []\"", "lemma vwalkI_vwalk_join_l:\n  assumes \"p \\<noteq> []\"\n  assumes \"vwalk (p \\<oplus> q) G\"\n  shows \"vwalk p G\"", "lemma vwalkI_vwalk_join_r:\n  assumes \"joinable p q\"\n  assumes \"vwalk (p \\<oplus> q) G\"\n  shows \"vwalk q G\"", "lemma vwalk_join_assoc':\n  assumes \"p \\<noteq> []\" \"q \\<noteq> []\"\n  shows \"(p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r\"", "lemma vwalk_join_assoc:\n  assumes \"joinable p q\" \"joinable q r\"\n  shows \"(p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r\"", "lemma joinable_vwalk_join_r_iff:\n  \"joinable p (q \\<oplus> r) \\<longleftrightarrow> joinable p q \\<or> (q = [] \\<and> joinable p (tl r))\"", "lemma joinable_vwalk_join_l_iff:\n  assumes \"joinable p q\"\n  shows \"joinable (p \\<oplus> q) r \\<longleftrightarrow> joinable q r\" (is \"?L \\<longleftrightarrow> ?R\")", "lemmas joinable_simps =\n  joinable_vwalk_join_l_iff\n  joinable_vwalk_join_r_iff", "lemma joinable_cyclic_omit:\n  assumes \"joinable p q\" \"joinable q r\" \"joinable q q\"\n  shows \"joinable p r\"", "lemma joinable_non_Nil:\n  assumes \"joinable p q\"\n  shows \"p \\<noteq> []\" \"q \\<noteq> []\"", "lemma vwalk_join_vwalk_length[simp]:\n  assumes \"joinable p q\"\n  shows \"vwalk_length (p \\<oplus> q) = vwalk_length p + vwalk_length q\"", "lemma vwalk_join_arcs:\n  assumes \"joinable p q\"\n  shows \"vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q\"", "lemma vwalk_join_arcs1:\n  assumes \"set (vwalk_arcs p) \\<subseteq> E\"\n  assumes \"p = q \\<oplus> r\"\n  shows \"set (vwalk_arcs q) \\<subseteq> E\"", "lemma vwalk_join_arcs2:\n  assumes \"set (vwalk_arcs p) \\<subseteq> E\"\n  assumes \"joinable q r\"\n  assumes \"p = q \\<oplus> r\"\n  shows \"set (vwalk_arcs r) \\<subseteq> E\"", "lemma concat_vpath_is_vpath:\n  assumes p_props: \"vwalk p G\" \"hd p = u\" \"last p = v\"\n  assumes q_props: \"vwalk q G\" \"hd q = v\" \"last q = w\"\n  shows \"vpath (concat_vpath p q) G \\<and> hd (concat_vpath p q) = u\n    \\<and> last (concat_vpath p q) = w\"", "lemma concat_vpath_exists:\n  assumes p_props: \"vwalk p G\" \"hd p = u\" \"last p = v\"\n  assumes q_props: \"vwalk q G\" \"hd q = v\" \"last q = w\"\n  obtains r where \"vpath r G\" \"hd r = u\" \"last r = w\"", "lemma (in fin_digraph) vpaths_finite:\n  shows \"finite {p. vpath p G}\"", "lemma (in wf_digraph) reachable_vwalk_conv:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<longleftrightarrow> (\\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in wf_digraph) reachable_vpath_conv:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<longleftrightarrow> (\\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v)\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma in_set_vwalk_arcsE:\n  assumes \"(u,v) \\<in> set (vwalk_arcs p)\"\n  obtains \"u \\<in> set p\" \"v \\<in> set p\"", "lemma vwalk_rev_ex:\n  assumes \"symmetric G\"\n  assumes \"vwalk p G\"\n  shows \"vwalk (rev p) G\"", "lemma vwalk_singleton[simp]: \"vwalk [u] G = (u \\<in> verts G)\"", "lemma (in wf_digraph) vwalk_Cons_Cons[simp]:\n  \"vwalk (u # v # ws) G = ((u,v) \\<in> arcs_ends G \\<and> vwalk (v # ws) G)\"", "lemma (in wf_digraph) awalk_imp_vwalk:\n  assumes \"awalk u p v\" shows \"vwalk (awalk_verts u p) G\""], "translations": [["", "lemma vwalk_length_simp[simp]:\n  shows \"vwalk_length p = length p - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_length p = length p - 1", "by (induct p rule: vwalk_arcs.induct) (auto simp: vwalk_length_def)"], ["", "definition vwalk :: \"'a vwalk \\<Rightarrow> ('a,'b) pre_digraph \\<Rightarrow> bool\" where\n  \"vwalk p G \\<equiv> set p \\<subseteq> verts G \\<and> set (vwalk_arcs p) \\<subseteq> arcs_ends G \\<and> p \\<noteq> []\""], ["", "definition vpath :: \"'a vwalk \\<Rightarrow> ('a,'b) pre_digraph \\<Rightarrow> bool\" where\n  \"vpath p G \\<equiv> vwalk p G \\<and> distinct p\""], ["", "text \\<open>For a given vwalk, compute a vpath with the same tail G and end\\<close>"], ["", "function vwalk_to_vpath :: \"'a vwalk \\<Rightarrow> 'a vwalk\" where\n    \"vwalk_to_vpath [] = []\"\n  | \"vwalk_to_vpath (x # xs) = (if (x \\<in> set xs)\n      then vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n      else x # vwalk_to_vpath xs)\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>x = [] \\<Longrightarrow> P;\n        \\<And>xa xs. x = xa # xs \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. [] = [] \\<Longrightarrow> [] = []\n 3. \\<And>x xs.\n       [] = x # xs \\<Longrightarrow>\n       [] =\n       (if x \\<in> set xs\n        then vwalk_to_vpath_sumC (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n        else x # vwalk_to_vpath_sumC xs)\n 4. \\<And>x xs xa xsa.\n       x # xs = xa # xsa \\<Longrightarrow>\n       (if x \\<in> set xs\n        then vwalk_to_vpath_sumC (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n        else x # vwalk_to_vpath_sumC xs) =\n       (if xa \\<in> set xsa\n        then vwalk_to_vpath_sumC (dropWhile (\\<lambda>y. y \\<noteq> xa) xsa)\n        else xa # vwalk_to_vpath_sumC xsa)", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All vwalk_to_vpath_dom", "by (lexicographic_order simp add: length_dropWhile_le)"], ["", "lemma vwalkI[intro]:\n  assumes \"set p \\<subseteq> verts G\"\n  assumes \"set (vwalk_arcs p) \\<subseteq> arcs_ends G\"\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk p G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk p G", "using assms"], ["proof (prove)\nusing this:\n  set p \\<subseteq> verts G\n  set (vwalk_arcs p) \\<subseteq> arcs_ends G\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. vwalk p G", "by (auto simp add: vwalk_def)"], ["", "lemma vwalkE[elim]:\n  assumes \"vwalk p G\"\n  assumes \"set p \\<subseteq> verts G \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> arcs_ends G \\<and> p \\<noteq> [] \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  \\<lbrakk>set p \\<subseteq> verts G;\n   set (vwalk_arcs p) \\<subseteq> arcs_ends G \\<and> p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (simp add: vwalk_def)"], ["", "lemma vpathI[intro]:\n  assumes \"vwalk p G\"\n  assumes \"distinct p\"\n  shows \"vpath p G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath p G", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  distinct p\n\ngoal (1 subgoal):\n 1. vpath p G", "by (simp add: vpath_def)"], ["", "lemma vpathE[elim]:\n  assumes \"vpath p G\"\n  assumes \"vwalk p G \\<Longrightarrow> distinct p \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  vpath p G\n  \\<lbrakk>vwalk p G; distinct p\\<rbrakk> \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (simp add: vpath_def)"], ["", "lemma vwalk_consI:\n  assumes \"vwalk p G\"\n  assumes \"a \\<in> verts G\"\n  assumes \"(a, hd p) \\<in> arcs_ends G\"\n  shows \"vwalk (a # p) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (a # p) G", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  a \\<in> verts G\n  a \\<rightarrow>\\<^bsub>G\\<^esub> hd p\n\ngoal (1 subgoal):\n 1. vwalk (a # p) G", "by (cases p) (auto simp add: vwalk_def)"], ["", "lemma vwalk_consE:\n  assumes \"vwalk (a # p) G\"\n  assumes \"p \\<noteq> []\"\n  assumes \"(a, hd p) \\<in> arcs_ends G \\<Longrightarrow> vwalk p G \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  vwalk (a # p) G\n  p \\<noteq> []\n  \\<lbrakk>a \\<rightarrow>\\<^bsub>G\\<^esub> hd p; vwalk p G\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (cases p) (auto simp add: vwalk_def)"], ["", "lemma vwalk_induct[case_names Base Cons, induct pred: vwalk]:\n  assumes \"vwalk p G\"\n  assumes \"\\<And>u. u \\<in> verts G \\<Longrightarrow> P [u]\"\n  assumes \"\\<And>u v es. (u,v) \\<in> arcs_ends G \\<Longrightarrow> P (v # es) \\<Longrightarrow> P (u # v # es)\"\n  shows \"P p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)\n\ngoal (1 subgoal):\n 1. P p", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vwalk [] G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n    \\<Longrightarrow> P []\n 2. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>vwalk p G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P p;\n        vwalk (a # p) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n       \\<Longrightarrow> P (a # p)", "case (Cons u es)"], ["proof (state)\nthis:\n  \\<lbrakk>vwalk es G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n   \\<And>u v es.\n      \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n      \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n  \\<Longrightarrow> P es\n  vwalk (u # es) G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vwalk [] G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n    \\<Longrightarrow> P []\n 2. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>vwalk p G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P p;\n        vwalk (a # p) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n       \\<Longrightarrow> P (a # p)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>vwalk es G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n   \\<And>u v es.\n      \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n      \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n  \\<Longrightarrow> P es\n  vwalk (u # es) G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vwalk es G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n   \\<And>u v es.\n      \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n      \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n  \\<Longrightarrow> P es\n  vwalk (u # es) G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)\n\ngoal (1 subgoal):\n 1. P (u # es)", "proof (cases es)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>vwalk es G;\n              \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n              \\<And>u v es.\n                 \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                  P (v # es)\\<rbrakk>\n                 \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n             \\<Longrightarrow> P es;\n     vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es);\n     es = []\\<rbrakk>\n    \\<Longrightarrow> P (u # es)\n 2. \\<And>a list.\n       \\<lbrakk>\\<lbrakk>vwalk es G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P es;\n        vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es);\n        es = a # list\\<rbrakk>\n       \\<Longrightarrow> P (u # es)", "fix v es'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>vwalk es G;\n              \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n              \\<And>u v es.\n                 \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                  P (v # es)\\<rbrakk>\n                 \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n             \\<Longrightarrow> P es;\n     vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es);\n     es = []\\<rbrakk>\n    \\<Longrightarrow> P (u # es)\n 2. \\<And>a list.\n       \\<lbrakk>\\<lbrakk>vwalk es G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P es;\n        vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es);\n        es = a # list\\<rbrakk>\n       \\<Longrightarrow> P (u # es)", "assume \"es = v # es'\""], ["proof (state)\nthis:\n  es = v # es'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>vwalk es G;\n              \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n              \\<And>u v es.\n                 \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                  P (v # es)\\<rbrakk>\n                 \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n             \\<Longrightarrow> P es;\n     vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es);\n     es = []\\<rbrakk>\n    \\<Longrightarrow> P (u # es)\n 2. \\<And>a list.\n       \\<lbrakk>\\<lbrakk>vwalk es G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P es;\n        vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es);\n        es = a # list\\<rbrakk>\n       \\<Longrightarrow> P (u # es)", "then"], ["proof (chain)\npicking this:\n  es = v # es'", "have \"(u,v) \\<in> arcs_ends G\" and \"P (v # es')\""], ["proof (prove)\nusing this:\n  es = v # es'\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G\\<^esub> v &&& P (v # es')", "using Cons"], ["proof (prove)\nusing this:\n  es = v # es'\n  \\<lbrakk>vwalk es G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n   \\<And>u v es.\n      \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n      \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n  \\<Longrightarrow> P es\n  vwalk (u # es) G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^bsub>G\\<^esub> v &&& P (v # es')", "by (auto elim: vwalk_consE)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^bsub>G\\<^esub> v\n  P (v # es')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>vwalk es G;\n              \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n              \\<And>u v es.\n                 \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                  P (v # es)\\<rbrakk>\n                 \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n             \\<Longrightarrow> P es;\n     vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es);\n     es = []\\<rbrakk>\n    \\<Longrightarrow> P (u # es)\n 2. \\<And>a list.\n       \\<lbrakk>\\<lbrakk>vwalk es G;\n                 \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n                 \\<And>u v es.\n                    \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                     P (v # es)\\<rbrakk>\n                    \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n                \\<Longrightarrow> P es;\n        vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n        \\<And>u v es.\n           \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n           \\<Longrightarrow> P (u # v # es);\n        es = a # list\\<rbrakk>\n       \\<Longrightarrow> P (u # es)", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^bsub>G\\<^esub> v\n  P (v # es')", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G\\<^esub> v\n  P (v # es')\n\ngoal (1 subgoal):\n 1. P (u # es)", "using \\<open>es = v # es'\\<close> Cons.prems"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>G\\<^esub> v\n  P (v # es')\n  es = v # es'\n  vwalk (u # es) G\n  ?u \\<in> verts G \\<Longrightarrow> P [?u]\n  \\<lbrakk>?u \\<rightarrow>\\<^bsub>G\\<^esub> ?v; P (?v # ?es)\\<rbrakk>\n  \\<Longrightarrow> P (?u # ?v # ?es)\n\ngoal (1 subgoal):\n 1. P (u # es)", "by auto"], ["proof (state)\nthis:\n  P (u # es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>vwalk es G;\n              \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n              \\<And>u v es.\n                 \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v;\n                  P (v # es)\\<rbrakk>\n                 \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n             \\<Longrightarrow> P es;\n     vwalk (u # es) G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es);\n     es = []\\<rbrakk>\n    \\<Longrightarrow> P (u # es)", "qed auto"], ["proof (state)\nthis:\n  P (u # es)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwalk [] G; \\<And>u. u \\<in> verts G \\<Longrightarrow> P [u];\n     \\<And>u v es.\n        \\<lbrakk>u \\<rightarrow>\\<^bsub>G\\<^esub> v; P (v # es)\\<rbrakk>\n        \\<Longrightarrow> P (u # v # es)\\<rbrakk>\n    \\<Longrightarrow> P []", "qed auto"], ["", "lemma vwalk_arcs_Cons[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk_arcs (u # p) = (u, hd p) # vwalk_arcs p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs (u # p) = (u, hd p) # vwalk_arcs p", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. vwalk_arcs (u # p) = (u, hd p) # vwalk_arcs p", "by (cases p) simp+"], ["", "lemma vwalk_arcs_append:\n  assumes \"p \\<noteq> []\" and \"q \\<noteq> []\"\n  shows \"vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "from assms"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  q \\<noteq> []", "obtain a b p' q' where \"p = a # p'\" and \"q = b # q'\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a p' b q'.\n        \\<lbrakk>p = a # p'; q = b # q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  p = a # p'\n  q = b # q'\n\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "moreover"], ["proof (state)\nthis:\n  p = a # p'\n  q = b # q'\n\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "have \"vwalk_arcs ((a # p') @ (b # q'))\n    = vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs ((a # p') @ b # q') =\n    vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')", "proof (induct p')"], ["proof (state)\ngoal (2 subgoals):\n 1. vwalk_arcs ([a] @ b # q') =\n    vwalk_arcs [a] @ (last [a], b) # vwalk_arcs (b # q')\n 2. \\<And>aa p'.\n       vwalk_arcs ((a # p') @ b # q') =\n       vwalk_arcs (a # p') @\n       (last (a # p'), b) # vwalk_arcs (b # q') \\<Longrightarrow>\n       vwalk_arcs ((a # aa # p') @ b # q') =\n       vwalk_arcs (a # aa # p') @\n       (last (a # aa # p'), b) # vwalk_arcs (b # q')", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. vwalk_arcs ([a] @ b # q') =\n    vwalk_arcs [a] @ (last [a], b) # vwalk_arcs (b # q')\n 2. \\<And>aa p'.\n       vwalk_arcs ((a # p') @ b # q') =\n       vwalk_arcs (a # p') @\n       (last (a # p'), b) # vwalk_arcs (b # q') \\<Longrightarrow>\n       vwalk_arcs ((a # aa # p') @ b # q') =\n       vwalk_arcs (a # aa # p') @\n       (last (a # aa # p'), b) # vwalk_arcs (b # q')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs ([a] @ b # q') =\n    vwalk_arcs [a] @ (last [a], b) # vwalk_arcs (b # q')", "by simp"], ["proof (state)\nthis:\n  vwalk_arcs ([a] @ b # q') =\n  vwalk_arcs [a] @ (last [a], b) # vwalk_arcs (b # q')\n\ngoal (1 subgoal):\n 1. \\<And>aa p'.\n       vwalk_arcs ((a # p') @ b # q') =\n       vwalk_arcs (a # p') @\n       (last (a # p'), b) # vwalk_arcs (b # q') \\<Longrightarrow>\n       vwalk_arcs ((a # aa # p') @ b # q') =\n       vwalk_arcs (a # aa # p') @\n       (last (a # aa # p'), b) # vwalk_arcs (b # q')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa p'.\n       vwalk_arcs ((a # p') @ b # q') =\n       vwalk_arcs (a # p') @\n       (last (a # p'), b) # vwalk_arcs (b # q') \\<Longrightarrow>\n       vwalk_arcs ((a # aa # p') @ b # q') =\n       vwalk_arcs (a # aa # p') @\n       (last (a # aa # p'), b) # vwalk_arcs (b # q')", "case (Cons a' p')"], ["proof (state)\nthis:\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')\n\ngoal (1 subgoal):\n 1. \\<And>aa p'.\n       vwalk_arcs ((a # p') @ b # q') =\n       vwalk_arcs (a # p') @\n       (last (a # p'), b) # vwalk_arcs (b # q') \\<Longrightarrow>\n       vwalk_arcs ((a # aa # p') @ b # q') =\n       vwalk_arcs (a # aa # p') @\n       (last (a # aa # p'), b) # vwalk_arcs (b # q')", "then"], ["proof (chain)\npicking this:\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')", "show ?case"], ["proof (prove)\nusing this:\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')\n\ngoal (1 subgoal):\n 1. vwalk_arcs ((a # a' # p') @ b # q') =\n    vwalk_arcs (a # a' # p') @ (last (a # a' # p'), b) # vwalk_arcs (b # q')", "by (auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  vwalk_arcs ((a # a' # p') @ b # q') =\n  vwalk_arcs (a # a' # p') @ (last (a # a' # p'), b) # vwalk_arcs (b # q')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')\n\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "ultimately"], ["proof (chain)\npicking this:\n  p = a # p'\n  q = b # q'\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')", "show ?thesis"], ["proof (prove)\nusing this:\n  p = a # p'\n  q = b # q'\n  vwalk_arcs ((a # p') @ b # q') =\n  vwalk_arcs (a # p') @ (last (a # p'), b) # vwalk_arcs (b # q')\n\ngoal (1 subgoal):\n 1. vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q", "by auto"], ["proof (state)\nthis:\n  vwalk_arcs (p @ q) = vwalk_arcs p @ (last p, hd q) # vwalk_arcs q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_vwalk_arcs_append1:\n  \"set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "proof (cases p)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "case (Cons a p')"], ["proof (state)\nthis:\n  p = a # p'\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "note p_Cons = Cons"], ["proof (state)\nthis:\n  p = a # p'\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  p = a # p'", "show ?thesis"], ["proof (prove)\nusing this:\n  p = a # p'\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "proof (cases q)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs p)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs p)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "case (Cons b q')"], ["proof (state)\nthis:\n  q = b # q'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs p)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs p)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "with p_Cons"], ["proof (chain)\npicking this:\n  p = a # p'\n  q = b # q'", "have \"p \\<noteq> []\" and \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  p = a # p'\n  q = b # q'\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs p)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs p)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  q \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "by (auto simp add: vwalk_arcs_append)"], ["proof (state)\nthis:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs p)\n                      \\<subseteq> set (vwalk_arcs (p @ q))", "qed simp"], ["proof (state)\nthis:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "qed simp"], ["", "lemma set_vwalk_arcs_append2:\n  \"set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "proof (cases p)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "case (Cons a p')"], ["proof (state)\nthis:\n  p = a # p'\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "note p_Cons = Cons"], ["proof (state)\nthis:\n  p = a # p'\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>a list.\n       p = a # list \\<Longrightarrow>\n       set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  p = a # p'", "show ?thesis"], ["proof (prove)\nusing this:\n  p = a # p'\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "proof (cases q)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs q)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs q)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "case (Cons b q')"], ["proof (state)\nthis:\n  q = b # q'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs q)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs q)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "with p_Cons"], ["proof (chain)\npicking this:\n  p = a # p'\n  q = b # q'", "have \"p \\<noteq> []\" and \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  p = a # p'\n  q = b # q'\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs q)\n                      \\<subseteq> set (vwalk_arcs (p @ q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = a # p'; q = aa # list\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs q)\n                         \\<subseteq> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  q \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "by (auto simp add: vwalk_arcs_append)"], ["proof (state)\nthis:\n  set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = a # p'; q = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs q)\n                      \\<subseteq> set (vwalk_arcs (p @ q))", "qed simp"], ["proof (state)\nthis:\n  set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow>\n    set (vwalk_arcs q) \\<subseteq> set (vwalk_arcs (p @ q))", "qed simp"], ["", "lemma set_vwalk_arcs_cons:\n  \"set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (u # p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (u # p))", "by (cases p) auto"], ["", "lemma set_vwalk_arcs_snoc:\n  assumes \"p \\<noteq> []\"\n  shows \"set (vwalk_arcs (p @ [a]))\n    = insert (last p, a) (set (vwalk_arcs p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ [a])) = insert (last p, a) (set (vwalk_arcs p))", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ [a])) = insert (last p, a) (set (vwalk_arcs p))", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow>\n    set (vwalk_arcs ([] @ [a])) = insert (last [], a) (set (vwalk_arcs []))\n 2. \\<And>aa p.\n       \\<lbrakk>p \\<noteq> [] \\<Longrightarrow>\n                set (vwalk_arcs (p @ [a])) =\n                insert (last p, a) (set (vwalk_arcs p));\n        aa # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs ((aa # p) @ [a])) =\n                         insert (last (aa # p), a)\n                          (set (vwalk_arcs (aa # p)))", "case Nil"], ["proof (state)\nthis:\n  [] \\<noteq> []\n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow>\n    set (vwalk_arcs ([] @ [a])) = insert (last [], a) (set (vwalk_arcs []))\n 2. \\<And>aa p.\n       \\<lbrakk>p \\<noteq> [] \\<Longrightarrow>\n                set (vwalk_arcs (p @ [a])) =\n                insert (last p, a) (set (vwalk_arcs p));\n        aa # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs ((aa # p) @ [a])) =\n                         insert (last (aa # p), a)\n                          (set (vwalk_arcs (aa # p)))", "then"], ["proof (chain)\npicking this:\n  [] \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs ([] @ [a])) = insert (last [], a) (set (vwalk_arcs []))", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs ([] @ [a])) = insert (last [], a) (set (vwalk_arcs []))\n\ngoal (1 subgoal):\n 1. \\<And>aa p.\n       \\<lbrakk>p \\<noteq> [] \\<Longrightarrow>\n                set (vwalk_arcs (p @ [a])) =\n                insert (last p, a) (set (vwalk_arcs p));\n        aa # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs ((aa # p) @ [a])) =\n                         insert (last (aa # p), a)\n                          (set (vwalk_arcs (aa # p)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa p.\n       \\<lbrakk>p \\<noteq> [] \\<Longrightarrow>\n                set (vwalk_arcs (p @ [a])) =\n                insert (last p, a) (set (vwalk_arcs p));\n        aa # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs ((aa # p) @ [a])) =\n                         insert (last (aa # p), a)\n                          (set (vwalk_arcs (aa # p)))", "case (Cons x xs)"], ["proof (state)\nthis:\n  xs \\<noteq> [] \\<Longrightarrow>\n  set (vwalk_arcs (xs @ [a])) = insert (last xs, a) (set (vwalk_arcs xs))\n  x # xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa p.\n       \\<lbrakk>p \\<noteq> [] \\<Longrightarrow>\n                set (vwalk_arcs (p @ [a])) =\n                insert (last p, a) (set (vwalk_arcs p));\n        aa # p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> set (vwalk_arcs ((aa # p) @ [a])) =\n                         insert (last (aa # p), a)\n                          (set (vwalk_arcs (aa # p)))", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> [] \\<Longrightarrow>\n  set (vwalk_arcs (xs @ [a])) = insert (last xs, a) (set (vwalk_arcs xs))\n  x # xs \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  xs \\<noteq> [] \\<Longrightarrow>\n  set (vwalk_arcs (xs @ [a])) = insert (last xs, a) (set (vwalk_arcs xs))\n  x # xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs ((x # xs) @ [a])) =\n    insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "proof (cases \"xs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))\n 2. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))\n 2. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs ((x # xs) @ [a])) =\n    insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs ((x # xs) @ [a])) =\n  insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "have \"set (vwalk_arcs ((x # xs) @ [a]))\n      = set (vwalk_arcs (x # (xs @ [a])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs ((x # xs) @ [a])) = set (vwalk_arcs (x # xs @ [a]))", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs ((x # xs) @ [a])) = set (vwalk_arcs (x # xs @ [a]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow>\n             set (vwalk_arcs (xs @ [a])) =\n             insert (last xs, a) (set (vwalk_arcs xs));\n     x # xs \\<noteq> []; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs ((x # xs) @ [a])) =\n                      insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs ((x # xs) @ [a])) = set (vwalk_arcs (x # xs @ [a]))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (vwalk_arcs ((x # xs) @ [a])) = set (vwalk_arcs (x # xs @ [a]))\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs ((x # xs) @ [a])) =\n    insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "using Cons and False"], ["proof (prove)\nusing this:\n  set (vwalk_arcs ((x # xs) @ [a])) = set (vwalk_arcs (x # xs @ [a]))\n  xs \\<noteq> [] \\<Longrightarrow>\n  set (vwalk_arcs (xs @ [a])) = insert (last xs, a) (set (vwalk_arcs xs))\n  x # xs \\<noteq> []\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs ((x # xs) @ [a])) =\n    insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))", "by (auto simp add: set_vwalk_arcs_cons)"], ["proof (state)\nthis:\n  set (vwalk_arcs ((x # xs) @ [a])) =\n  insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (vwalk_arcs ((x # xs) @ [a])) =\n  insert (last (x # xs), a) (set (vwalk_arcs (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) vwalk_wf_digraph_consI:\n  assumes \"vwalk p G\"\n  assumes \"(a, hd p) \\<in> arcs_ends G\"\n  shows \"vwalk (a # p) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (a # p) G", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. set (a # p) \\<subseteq> verts G\n 2. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G\n 3. a # p \\<noteq> []", "show \"a # p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # p \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  a # p \\<noteq> []\n\ngoal (2 subgoals):\n 1. set (a # p) \\<subseteq> verts G\n 2. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "from assms"], ["proof (chain)\npicking this:\n  vwalk p G\n  a \\<rightarrow> hd p", "have \"a \\<in> verts G\" and \"set p \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  vwalk p G\n  a \\<rightarrow> hd p\n\ngoal (1 subgoal):\n 1. a \\<in> verts G &&& set p \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  a \\<in> verts G\n  set p \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. set (a # p) \\<subseteq> verts G\n 2. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  a \\<in> verts G\n  set p \\<subseteq> verts G", "show \"set (a # p) \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  a \\<in> verts G\n  set p \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set (a # p) \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  set (a # p) \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "from \\<open>vwalk p G\\<close>"], ["proof (chain)\npicking this:\n  vwalk p G", "have \"p \\<noteq> []\""], ["proof (prove)\nusing this:\n  vwalk p G\n\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []", "show \"set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "using \\<open>vwalk p G\\<close> and \\<open>(a, hd p) \\<in> arcs_ends G\\<close>"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  vwalk p G\n  a \\<rightarrow> hd p\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G", "by (auto simp add: set_vwalk_arcs_cons)"], ["proof (state)\nthis:\n  set (vwalk_arcs (a # p)) \\<subseteq> arcs_ends G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalkI_append_l:\n  assumes \"p \\<noteq> []\"\n  assumes \"vwalk (p @ q) G\"\n  shows \"vwalk p G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk p G", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. set p \\<subseteq> verts G\n 2. set (vwalk_arcs p) \\<subseteq> arcs_ends G\n 3. p \\<noteq> []", "from assms"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  vwalk (p @ q) G", "show \"p \\<noteq> []\" and \"set p \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  vwalk (p @ q) G\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& set p \\<subseteq> verts G", "by (auto elim!: vwalkE)"], ["proof (state)\nthis:\n  p \\<noteq> []\n  set p \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "have \"set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "by (auto simp add: set_vwalk_arcs_append1)"], ["proof (state)\nthis:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))", "show \"set (vwalk_arcs p) \\<subseteq> arcs_ends G\""], ["proof (prove)\nusing this:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  set (vwalk_arcs p) \\<subseteq> set (vwalk_arcs (p @ q))\n  p \\<noteq> []\n  vwalk (p @ q) G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "by blast"], ["proof (state)\nthis:\n  set (vwalk_arcs p) \\<subseteq> arcs_ends G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalkI_append_r:\n  assumes \"q \\<noteq> []\"\n  assumes \"vwalk (p @ q) G\"\n  shows \"vwalk q G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk q G", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. set q \\<subseteq> verts G\n 2. set (vwalk_arcs q) \\<subseteq> arcs_ends G\n 3. q \\<noteq> []", "from \\<open>vwalk (p @ q) G\\<close>"], ["proof (chain)\npicking this:\n  vwalk (p @ q) G", "have \"set (p @ q) \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  vwalk (p @ q) G\n\ngoal (1 subgoal):\n 1. set (p @ q) \\<subseteq> verts G", "by blast"], ["proof (state)\nthis:\n  set (p @ q) \\<subseteq> verts G\n\ngoal (3 subgoals):\n 1. set q \\<subseteq> verts G\n 2. set (vwalk_arcs q) \\<subseteq> arcs_ends G\n 3. q \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  set (p @ q) \\<subseteq> verts G", "show \"set q \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  set (p @ q) \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set q \\<subseteq> verts G", "by simp"], ["proof (state)\nthis:\n  set q \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. set (vwalk_arcs q) \\<subseteq> arcs_ends G\n 2. q \\<noteq> []", "from \\<open>vwalk (p @ q) G\\<close>"], ["proof (chain)\npicking this:\n  vwalk (p @ q) G", "have \"set (vwalk_arcs (p @ q)) \\<subseteq> arcs_ends G\""], ["proof (prove)\nusing this:\n  vwalk (p @ q) G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ q)) \\<subseteq> arcs_ends G", "by blast"], ["proof (state)\nthis:\n  set (vwalk_arcs (p @ q)) \\<subseteq> arcs_ends G\n\ngoal (2 subgoals):\n 1. set (vwalk_arcs q) \\<subseteq> arcs_ends G\n 2. q \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs (p @ q)) \\<subseteq> arcs_ends G", "show \"set (vwalk_arcs q) \\<subseteq> arcs_ends G\""], ["proof (prove)\nusing this:\n  set (vwalk_arcs (p @ q)) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs q) \\<subseteq> arcs_ends G", "by (metis set_vwalk_arcs_append2 subset_trans)"], ["proof (state)\nthis:\n  set (vwalk_arcs q) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. q \\<noteq> []", "from \\<open>q \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  q \\<noteq> []", "show \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. q \\<noteq> []", "by assumption"], ["proof (state)\nthis:\n  q \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalk_to_vpath_hd: \"hd (vwalk_to_vpath xs) = hd xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath xs) = hd xs", "proof (induct xs rule: vwalk_to_vpath.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. hd (vwalk_to_vpath []) = hd []\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                hd (vwalk_to_vpath\n                     (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n                hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n        x \\<notin> set xs \\<Longrightarrow>\n        hd (vwalk_to_vpath xs) = hd xs\\<rbrakk>\n       \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "case (2 x xs)"], ["proof (state)\nthis:\n  x \\<in> set xs \\<Longrightarrow>\n  hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs\n\ngoal (2 subgoals):\n 1. hd (vwalk_to_vpath []) = hd []\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                hd (vwalk_to_vpath\n                     (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n                hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n        x \\<notin> set xs \\<Longrightarrow>\n        hd (vwalk_to_vpath xs) = hd xs\\<rbrakk>\n       \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set xs \\<Longrightarrow>\n  hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> set xs \\<Longrightarrow>\n  hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs\n\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "proof (cases \"x \\<in> set xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)\n 2. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "case True"], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)\n 2. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set xs", "have \"hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x\""], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x", "using hd_dropWhile[where P=\"\\<lambda>y. y \\<noteq> x\"]"], ["proof (prove)\nusing this:\n  x \\<in> set xs\n  dropWhile (\\<lambda>y. y \\<noteq> x) ?xs \\<noteq> [] \\<Longrightarrow>\n  \\<not> hd (dropWhile (\\<lambda>y. y \\<noteq> x) ?xs) \\<noteq> x\n\ngoal (1 subgoal):\n 1. hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x", "by auto"], ["proof (state)\nthis:\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)\n 2. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "then"], ["proof (chain)\npicking this:\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x\n\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "using True and 2"], ["proof (prove)\nusing this:\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs) = x\n  x \\<in> set xs\n  x \\<in> set xs \\<Longrightarrow>\n  hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n  hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs\n\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "by auto"], ["proof (state)\nthis:\n  hd (vwalk_to_vpath (x # xs)) = hd (x # xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n             hd (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) =\n             hd (dropWhile (\\<lambda>y. y \\<noteq> x) xs);\n     x \\<notin> set xs \\<Longrightarrow> hd (vwalk_to_vpath xs) = hd xs;\n     x \\<notin> set xs\\<rbrakk>\n    \\<Longrightarrow> hd (vwalk_to_vpath (x # xs)) = hd (x # xs)", "qed auto"], ["proof (state)\nthis:\n  hd (vwalk_to_vpath (x # xs)) = hd (x # xs)\n\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath []) = hd []", "qed auto"], ["", "lemma vwalk_to_vpath_induct3[consumes 0, case_names base in_set not_in_set]:\n  assumes \"P []\"\n  assumes \"\\<And>x xs. x \\<in> set xs \\<Longrightarrow> P (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n    \\<Longrightarrow> P (x # xs)\"\n  assumes \"\\<And>x xs. x \\<notin> set xs \\<Longrightarrow> P xs \\<Longrightarrow> P (x # xs)\"\n  shows \"P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P xs", "using assms"], ["proof (prove)\nusing this:\n  P []\n  \\<lbrakk>?x \\<in> set ?xs;\n   P (dropWhile (\\<lambda>y. y \\<noteq> ?x) ?xs)\\<rbrakk>\n  \\<Longrightarrow> P (?x # ?xs)\n  \\<lbrakk>?x \\<notin> set ?xs; P ?xs\\<rbrakk>\n  \\<Longrightarrow> P (?x # ?xs)\n\ngoal (1 subgoal):\n 1. P xs", "by (induct xs rule: vwalk_to_vpath.induct) auto"], ["", "lemma vwalk_to_vpath_nonempty:\n  assumes \"p \\<noteq> []\"\n  shows \"vwalk_to_vpath p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_to_vpath p \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. vwalk_to_vpath p \\<noteq> []", "by (induct p rule: vwalk_to_vpath_induct3) auto"], ["", "lemma vwalk_to_vpath_last:\n  \"last (vwalk_to_vpath xs) = last xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (vwalk_to_vpath xs) = last xs", "by (induct xs rule: vwalk_to_vpath_induct3)\n   (auto simp add: dropWhile_last vwalk_to_vpath_nonempty)"], ["", "lemma vwalk_to_vpath_subset:\n  assumes \"x \\<in> set (vwalk_to_vpath xs)\"\n  shows \"x \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_to_vpath xs)\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "proof (induct xs rule: vwalk_to_vpath.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set (vwalk_to_vpath []) \\<Longrightarrow> x \\<in> set []\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>xa \\<in> set xs;\n                 x \\<in> set (vwalk_to_vpath\n                               (dropWhile (\\<lambda>y. y \\<noteq> xa)\n                                 xs))\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set\n     (dropWhile (\\<lambda>y. y \\<noteq> xa) xs);\n        \\<lbrakk>xa \\<notin> set xs;\n         x \\<in> set (vwalk_to_vpath xs)\\<rbrakk>\n        \\<Longrightarrow> x \\<in> set xs;\n        x \\<in> set (vwalk_to_vpath (xa # xs))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (xa # xs)", "case (2 x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> set xs;\n   x \\<in> set (vwalk_to_vpath\n                 (dropWhile (\\<lambda>y. y \\<noteq> x) xs))\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  \\<lbrakk>x \\<notin> set xs; x \\<in> set (vwalk_to_vpath xs)\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set xs\n  x \\<in> set (vwalk_to_vpath (x # xs))\n\ngoal (2 subgoals):\n 1. x \\<in> set (vwalk_to_vpath []) \\<Longrightarrow> x \\<in> set []\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>xa \\<in> set xs;\n                 x \\<in> set (vwalk_to_vpath\n                               (dropWhile (\\<lambda>y. y \\<noteq> xa)\n                                 xs))\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set\n     (dropWhile (\\<lambda>y. y \\<noteq> xa) xs);\n        \\<lbrakk>xa \\<notin> set xs;\n         x \\<in> set (vwalk_to_vpath xs)\\<rbrakk>\n        \\<Longrightarrow> x \\<in> set xs;\n        x \\<in> set (vwalk_to_vpath (xa # xs))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (xa # xs)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> set xs;\n   x \\<in> set (vwalk_to_vpath\n                 (dropWhile (\\<lambda>y. y \\<noteq> x) xs))\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  \\<lbrakk>x \\<notin> set xs; x \\<in> set (vwalk_to_vpath xs)\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set xs\n  x \\<in> set (vwalk_to_vpath (x # xs))", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> set xs;\n   x \\<in> set (vwalk_to_vpath\n                 (dropWhile (\\<lambda>y. y \\<noteq> x) xs))\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set (dropWhile (\\<lambda>y. y \\<noteq> x) xs)\n  \\<lbrakk>x \\<notin> set xs; x \\<in> set (vwalk_to_vpath xs)\\<rbrakk>\n  \\<Longrightarrow> x \\<in> set xs\n  x \\<in> set (vwalk_to_vpath (x # xs))\n\ngoal (1 subgoal):\n 1. x \\<in> set (x # xs)", "by (cases \"x \\<in> set xs\") (auto dest: set_dropWhileD)"], ["proof (state)\nthis:\n  x \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_to_vpath []) \\<Longrightarrow> x \\<in> set []", "qed simp_all"], ["", "lemma vwalk_to_vpath_cons:\n  assumes \"x \\<notin> set xs\"\n  shows \"vwalk_to_vpath (x # xs) = x # vwalk_to_vpath xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_to_vpath (x # xs) = x # vwalk_to_vpath xs", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. vwalk_to_vpath (x # xs) = x # vwalk_to_vpath xs", "by auto"], ["", "lemma vwalk_to_vpath_vpath:\n  assumes \"vwalk p G\"\n  shows \"vpath (vwalk_to_vpath p) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath p) G", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath p) G", "proof (induct p rule: vwalk_to_vpath_induct3)"], ["proof (state)\ngoal (3 subgoals):\n 1. vwalk [] G \\<Longrightarrow> vpath (vwalk_to_vpath []) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 3. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "case base"], ["proof (state)\nthis:\n  vwalk [] G\n\ngoal (3 subgoals):\n 1. vwalk [] G \\<Longrightarrow> vpath (vwalk_to_vpath []) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 3. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vwalk [] G", "show ?case"], ["proof (prove)\nusing this:\n  vwalk [] G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath []) G", "by auto"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath []) G\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "case (in_set x xs)"], ["proof (state)\nthis:\n  x \\<in> set xs\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n  vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G\n  vwalk (x # xs) G\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "have set_neq: \"\\<And>x xs. x \\<notin> set xs \\<Longrightarrow> \\<forall>x' \\<in> set xs. x' \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       x \\<notin> set xs \\<Longrightarrow>\n       \\<forall>x'\\<in>set xs. x' \\<noteq> x", "by metis"], ["proof (state)\nthis:\n  ?x \\<notin> set ?xs \\<Longrightarrow>\n  \\<forall>x'\\<in>set ?xs. x' \\<noteq> ?x\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "from \\<open>x \\<in> set xs\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> set xs", "obtain ys zs where \"xs = ys @ x # zs\" and \"x \\<notin> set ys\""], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>xs = ys @ x # zs; x \\<notin> set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_decomp_first)"], ["proof (state)\nthis:\n  xs = ys @ x # zs\n  x \\<notin> set ys\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  xs = ys @ x # zs\n  x \\<notin> set ys", "have vwalk_dW: \"vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G\""], ["proof (prove)\nusing this:\n  xs = ys @ x # zs\n  x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G", "using in_set and \\<open>xs = ys @ x # zs\\<close>"], ["proof (prove)\nusing this:\n  xs = ys @ x # zs\n  x \\<notin> set ys\n  x \\<in> set xs\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n  vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G\n  vwalk (x # xs) G\n  xs = ys @ x # zs\n\ngoal (1 subgoal):\n 1. vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G", "by (auto simp add: dropWhile_append3 set_neq intro: vwalkI_append_r[where p=\"x # ys\"])"], ["proof (state)\nthis:\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G\n\ngoal (2 subgoals):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<in> set xs;\n        vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n        vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G", "show ?case"], ["proof (prove)\nusing this:\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "using in_set"], ["proof (prove)\nusing this:\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G\n  x \\<in> set xs\n  vwalk (dropWhile (\\<lambda>y. y \\<noteq> x) xs) G \\<Longrightarrow>\n  vpath (vwalk_to_vpath (dropWhile (\\<lambda>y. y \\<noteq> x) xs)) G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "by (auto simp add: vwalk_dW)"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath (x # xs)) G\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "case (not_in_set x xs)"], ["proof (state)\nthis:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G", "have \"x \\<in> verts G\" and x_notin: \"x \\<notin> set (vwalk_to_vpath xs)\""], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. x \\<in> verts G &&& x \\<notin> set (vwalk_to_vpath xs)", "by (auto intro: vwalk_to_vpath_subset)"], ["proof (state)\nthis:\n  x \\<in> verts G\n  x \\<notin> set (vwalk_to_vpath xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "from not_in_set"], ["proof (chain)\npicking this:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G", "show ?case"], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "proof (cases \"xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G; xs = []\\<rbrakk>\n    \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G; xs = []\\<rbrakk>\n    \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G\n 2. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "using not_in_set.prems"], ["proof (prove)\nusing this:\n  xs = []\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "by auto"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath (x # xs)) G\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "case (Cons x' xs')"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "have \"vpath (vwalk_to_vpath xs) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath xs) G", "apply (rule not_in_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk xs G", "apply (rule vwalkI_append_r[where p=\"[x]\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs \\<noteq> []\n 2. vwalk ([x] @ xs) G", "using Cons not_in_set"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (2 subgoals):\n 1. xs \\<noteq> []\n 2. vwalk ([x] @ xs) G", "by auto"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vpath (vwalk_to_vpath xs) G", "have \"vwalk (x # vwalk_to_vpath xs) G\""], ["proof (prove)\nusing this:\n  vpath (vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. vwalk (x # vwalk_to_vpath xs) G", "apply (auto intro!: vwalk_consI simp add: vwalk_to_vpath_hd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. vpath (vwalk_to_vpath xs) G \\<Longrightarrow> x \\<in> verts G\n 2. vpath (vwalk_to_vpath xs) G \\<Longrightarrow>\n    x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs", "using not_in_set"], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (2 subgoals):\n 1. vpath (vwalk_to_vpath xs) G \\<Longrightarrow> x \\<in> verts G\n 2. vpath (vwalk_to_vpath xs) G \\<Longrightarrow>\n    x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G\\<rbrakk>\n    \\<Longrightarrow> x \\<in> verts G\n 2. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs", "apply (erule vwalk_consE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\\<rbrakk>\n    \\<Longrightarrow> xs \\<noteq> []\n 2. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs; vwalk xs G\\<rbrakk>\n    \\<Longrightarrow> x \\<in> verts G\n 3. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs", "using Cons"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\\<rbrakk>\n    \\<Longrightarrow> xs \\<noteq> []\n 2. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs; vwalk xs G\\<rbrakk>\n    \\<Longrightarrow> x \\<in> verts G\n 3. \\<lbrakk>vpath (vwalk_to_vpath xs) G; x \\<notin> set xs;\n     vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n     vwalk (x # xs) G\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow>\\<^bsub>G\\<^esub> hd xs", "apply (auto intro: \\<open>x \\<in> verts G\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vwalk (x # vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vwalk (x # vwalk_to_vpath xs) G", "have \"vpath (x # vwalk_to_vpath xs) G\""], ["proof (prove)\nusing this:\n  vwalk (x # vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. vpath (x # vwalk_to_vpath xs) G", "apply (rule vpathI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (x # vwalk_to_vpath xs)", "using \\<open>vpath (vwalk_to_vpath xs) G\\<close>"], ["proof (prove)\nusing this:\n  vpath (vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. distinct (x # vwalk_to_vpath xs)", "using x_notin"], ["proof (prove)\nusing this:\n  vpath (vwalk_to_vpath xs) G\n  x \\<notin> set (vwalk_to_vpath xs)\n\ngoal (1 subgoal):\n 1. distinct (x # vwalk_to_vpath xs)", "by auto"], ["proof (state)\nthis:\n  vpath (x # vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>x \\<notin> set xs;\n        vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G;\n        vwalk (x # xs) G; xs = a # list\\<rbrakk>\n       \\<Longrightarrow> vpath (vwalk_to_vpath (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vpath (x # vwalk_to_vpath xs) G", "show ?thesis"], ["proof (prove)\nusing this:\n  vpath (x # vwalk_to_vpath xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "using not_in_set"], ["proof (prove)\nusing this:\n  vpath (x # vwalk_to_vpath xs) G\n  x \\<notin> set xs\n  vwalk xs G \\<Longrightarrow> vpath (vwalk_to_vpath xs) G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (x # xs)) G", "by (auto simp add: vwalk_to_vpath_cons)"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath (x # xs)) G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vpath (vwalk_to_vpath (x # xs)) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalk_imp_ex_vpath:\n  assumes \"vwalk p G\"\n  assumes \"hd p = u\"\n  assumes \"last p = v\"\n  shows \"\\<exists>q. vpath q G \\<and> hd q = u \\<and> last q = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q. vpath q G \\<and> hd q = u \\<and> last q = v", "by (metis assms vwalk_to_vpath_hd vwalk_to_vpath_last vwalk_to_vpath_vpath)"], ["", "lemma vwalk_arcs_set_nil:\n  assumes \"x \\<in> set (vwalk_arcs p)\"\n  shows \"p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_arcs p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by fastforce"], ["", "lemma in_set_vwalk_arcs_append1:\n  assumes \"x \\<in> set (vwalk_arcs p) \\<or> x \\<in> set (vwalk_arcs q)\"\n  shows \"x \\<in> set (vwalk_arcs (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_arcs p) \\<or> x \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set (vwalk_arcs p) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))\n 2. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "assume \"x \\<in> set (vwalk_arcs p)\""], ["proof (state)\nthis:\n  x \\<in> set (vwalk_arcs p)\n\ngoal (2 subgoals):\n 1. x \\<in> set (vwalk_arcs p) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))\n 2. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (vwalk_arcs p)", "show \"x \\<in> set (vwalk_arcs (p @ q))\""], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_arcs p)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "by (cases \"q = []\")\n       (auto simp add: vwalk_arcs_append vwalk_arcs_set_nil)"], ["proof (state)\nthis:\n  x \\<in> set (vwalk_arcs (p @ q))\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "assume \"x \\<in> set (vwalk_arcs q)\""], ["proof (state)\nthis:\n  x \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (vwalk_arcs q)", "show \"x \\<in> set (vwalk_arcs (p @ q))\""], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "by (cases \"p = []\")\n       (auto simp add: vwalk_arcs_append vwalk_arcs_set_nil)"], ["proof (state)\nthis:\n  x \\<in> set (vwalk_arcs (p @ q))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_set_vwalk_arcs_append2:\n  assumes nonempty: \"p \\<noteq> []\" \"q \\<noteq> []\"\n  assumes disj: \"x \\<in> set (vwalk_arcs p) \\<or> x = (last p, hd q)\n    \\<or> x \\<in> set (vwalk_arcs q)\"\n  shows \"x \\<in> set (vwalk_arcs (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "using disj"], ["proof (prove)\nusing this:\n  x \\<in> set (vwalk_arcs p) \\<or>\n  x = (last p, hd q) \\<or> x \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. x \\<in> set (vwalk_arcs p) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))\n 2. x = (last p, hd q) \\<Longrightarrow> x \\<in> set (vwalk_arcs (p @ q))\n 3. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "assume \"x = (last p, hd q)\""], ["proof (state)\nthis:\n  x = (last p, hd q)\n\ngoal (3 subgoals):\n 1. x \\<in> set (vwalk_arcs p) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))\n 2. x = (last p, hd q) \\<Longrightarrow> x \\<in> set (vwalk_arcs (p @ q))\n 3. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "then"], ["proof (chain)\npicking this:\n  x = (last p, hd q)", "show \"x \\<in> set (vwalk_arcs (p @ q))\""], ["proof (prove)\nusing this:\n  x = (last p, hd q)\n\ngoal (1 subgoal):\n 1. x \\<in> set (vwalk_arcs (p @ q))", "by (metis nonempty in_set_conv_decomp vwalk_arcs_append)"], ["proof (state)\nthis:\n  x \\<in> set (vwalk_arcs (p @ q))\n\ngoal (2 subgoals):\n 1. x \\<in> set (vwalk_arcs p) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))\n 2. x \\<in> set (vwalk_arcs q) \\<Longrightarrow>\n    x \\<in> set (vwalk_arcs (p @ q))", "qed (auto intro: in_set_vwalk_arcs_append1)"], ["", "lemma arcs_in_vwalk_arcs:\n  assumes \"u \\<in> set (vwalk_arcs p)\"\n  shows \"u \\<in> set p \\<times> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> set p \\<times> set p", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> set (vwalk_arcs p)\n\ngoal (1 subgoal):\n 1. u \\<in> set p \\<times> set p", "by (induct p rule: vwalk_arcs.induct) auto"], ["", "lemma set_vwalk_arcs_rev:\n  \"set (vwalk_arcs (rev p)) = {(v, u). (u,v) \\<in> set (vwalk_arcs p)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev p)) = {(v, u). (u, v) \\<in> set (vwalk_arcs p)}", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. set (vwalk_arcs (rev [])) =\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs [])}\n 2. \\<And>a p.\n       set (vwalk_arcs (rev p)) =\n       {a. case a of\n           (v, u) \\<Rightarrow>\n             (u, v) \\<in> set (vwalk_arcs p)} \\<Longrightarrow>\n       set (vwalk_arcs (rev (a # p))) =\n       {b. case b of\n           (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (a # p))}", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. set (vwalk_arcs (rev [])) =\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs [])}\n 2. \\<And>a p.\n       set (vwalk_arcs (rev p)) =\n       {a. case a of\n           (v, u) \\<Rightarrow>\n             (u, v) \\<in> set (vwalk_arcs p)} \\<Longrightarrow>\n       set (vwalk_arcs (rev (a # p))) =\n       {b. case b of\n           (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (a # p))}", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev [])) =\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs [])}", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev [])) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs [])}\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       set (vwalk_arcs (rev p)) =\n       {a. case a of\n           (v, u) \\<Rightarrow>\n             (u, v) \\<in> set (vwalk_arcs p)} \\<Longrightarrow>\n       set (vwalk_arcs (rev (a # p))) =\n       {b. case b of\n           (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (a # p))}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       set (vwalk_arcs (rev p)) =\n       {a. case a of\n           (v, u) \\<Rightarrow>\n             (u, v) \\<in> set (vwalk_arcs p)} \\<Longrightarrow>\n       set (vwalk_arcs (rev (a # p))) =\n       {b. case b of\n           (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (a # p))}", "case (Cons x xs)"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev xs)) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       set (vwalk_arcs (rev p)) =\n       {a. case a of\n           (v, u) \\<Rightarrow>\n             (u, v) \\<in> set (vwalk_arcs p)} \\<Longrightarrow>\n       set (vwalk_arcs (rev (a # p))) =\n       {b. case b of\n           (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (a # p))}", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs (rev xs)) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}", "show ?case"], ["proof (prove)\nusing this:\n  set (vwalk_arcs (rev xs)) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) =\n    {a. case a of\n        (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "proof (cases \"xs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}\n 2. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}\n 2. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) =\n    {a. case a of\n        (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "have \"set (vwalk_arcs (rev (x # xs))) = {(hd xs, x)}\n      \\<union> {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) =\n    {(hd xs, x)} \\<union>\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}", "by (simp add: set_vwalk_arcs_snoc last_rev Cons)"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) =\n  {(hd xs, x)} \\<union>\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "also"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) =\n  {(hd xs, x)} \\<union>\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "have \"\\<dots> = {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(hd xs, x)} \\<union>\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)} =\n    {a. case a of\n        (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "using False"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. {(hd xs, x)} \\<union>\n    {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)} =\n    {a. case a of\n        (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "by (auto simp add: set_vwalk_arcs_cons)"], ["proof (state)\nthis:\n  {(hd xs, x)} \\<union>\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)} =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set (vwalk_arcs (rev xs)) =\n             {a. case a of\n                 (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs xs)};\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> set (vwalk_arcs (rev (x # xs))) =\n                      {a. case a of\n                          (v, u) \\<Rightarrow>\n                            (u, v) \\<in> set (vwalk_arcs (x # xs))}", "finally"], ["proof (chain)\npicking this:\n  set (vwalk_arcs (rev (x # xs))) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (vwalk_arcs (rev (x # xs))) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) =\n    {a. case a of\n        (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}", "by assumption"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) =\n  {a. case a of (v, u) \\<Rightarrow> (u, v) \\<in> set (vwalk_arcs (x # xs))}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vpath_self:\n  assumes \"u \\<in> verts G\"\n  shows \"vpath [u] G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath [u] G", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n\ngoal (1 subgoal):\n 1. vpath [u] G", "by (intro vpathI vwalkI, auto)"], ["", "lemma vwalk_verts_in_verts:\n  assumes \"vwalk p G\"\n  assumes \"u \\<in> set p\"\n  shows \"u \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> verts G", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  u \\<in> set p\n\ngoal (1 subgoal):\n 1. u \\<in> verts G", "by auto"], ["", "lemma vwalk_arcs_tl:\n  \"vwalk_arcs (tl xs) = tl (vwalk_arcs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs (tl xs) = tl (vwalk_arcs xs)", "by (induct xs rule: vwalk_arcs.induct) simp_all"], ["", "lemma vwalk_arcs_butlast:\n  \"vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)", "proof (induct xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. vwalk_arcs (butlast []) = butlast (vwalk_arcs [])\n 2. \\<And>x xs.\n       vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs) \\<Longrightarrow>\n       vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n\ngoal (2 subgoals):\n 1. vwalk_arcs (butlast []) = butlast (vwalk_arcs [])\n 2. \\<And>x xs.\n       vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs) \\<Longrightarrow>\n       vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n\ngoal (1 subgoal):\n 1. vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))", "proof (cases \"xs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))\n 2. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))\n 2. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "with snoc"], ["proof (chain)\npicking this:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n  xs = []\n\ngoal (1 subgoal):\n 1. vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))", "by simp"], ["proof (state)\nthis:\n  vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "hence \"vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]", "using vwalk_arcs_append"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<lbrakk>?p \\<noteq> []; ?q \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> vwalk_arcs (?p @ ?q) =\n                    vwalk_arcs ?p @ (last ?p, hd ?q) # vwalk_arcs ?q\n\ngoal (1 subgoal):\n 1. vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]", "by force"], ["proof (state)\nthis:\n  vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs);\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast (xs @ [x])) =\n                      butlast (vwalk_arcs (xs @ [x]))", "with snoc"], ["proof (chain)\npicking this:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n  vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]", "show ?thesis"], ["proof (prove)\nusing this:\n  vwalk_arcs (butlast xs) = butlast (vwalk_arcs xs)\n  vwalk_arcs (xs @ [x]) = vwalk_arcs xs @ [(last xs, x)]\n\ngoal (1 subgoal):\n 1. vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))", "by simp"], ["proof (state)\nthis:\n  vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwalk_arcs (butlast (xs @ [x])) = butlast (vwalk_arcs (xs @ [x]))\n\ngoal (1 subgoal):\n 1. vwalk_arcs (butlast []) = butlast (vwalk_arcs [])", "qed simp"], ["", "lemma vwalk_arcs_tl_empty:\n  \"vwalk_arcs xs = [] \\<Longrightarrow> vwalk_arcs (tl xs) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs xs = [] \\<Longrightarrow> vwalk_arcs (tl xs) = []", "by (induct xs rule: vwalk_arcs.induct) simp_all"], ["", "lemma vwalk_arcs_butlast_empty:\n  \"xs \\<noteq> [] \\<Longrightarrow> vwalk_arcs xs = [] \\<Longrightarrow> vwalk_arcs (butlast xs) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; vwalk_arcs xs = []\\<rbrakk>\n    \\<Longrightarrow> vwalk_arcs (butlast xs) = []", "by (induct xs rule: vwalk_arcs.induct) simp_all"], ["", "definition joinable :: \"'a vwalk \\<Rightarrow> 'a vwalk \\<Rightarrow> bool\" where\n  \"joinable p q \\<equiv> last p = hd q \\<and> p \\<noteq> [] \\<and> q \\<noteq> []\""], ["", "definition vwalk_join :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\"\n  (infixr \"\\<oplus>\" 65) where\n  \"p \\<oplus> q \\<equiv> p @ tl q\""], ["", "lemma joinable_Nil_l_iff[simp]: \"joinable [] p = False\"\n  and joinable_Nil_r_iff[simp]: \"joinable q [] = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable [] p = False &&& joinable q [] = False", "by (auto simp: joinable_def)"], ["", "lemma joinable_Cons_l_iff[simp]: \"p \\<noteq> [] \\<Longrightarrow> joinable (v # p) q = joinable p q\"\n  and joinable_Snoc_r_iff[simp]: \"q \\<noteq> [] \\<Longrightarrow> joinable p (q @ [v]) = joinable p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<noteq> [] \\<Longrightarrow> joinable (v # p) q = joinable p q) &&&\n    (q \\<noteq> [] \\<Longrightarrow> joinable p (q @ [v]) = joinable p q)", "by (auto simp: joinable_def)"], ["", "lemma joinableI[intro,simp]:\n  assumes \"last p = hd q\" \"p \\<noteq> []\" \"q \\<noteq> []\"\n  shows \"joinable p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable p q", "using assms"], ["proof (prove)\nusing this:\n  last p = hd q\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. joinable p q", "by (simp add: joinable_def)"], ["", "lemma vwalk_join_non_Nil[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"p \\<oplus> q \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<oplus> q \\<noteq> []", "unfolding vwalk_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ tl q \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. p @ tl q \\<noteq> []", "by simp"], ["", "lemma vwalk_join_Cons[simp]:\n  assumes \"p \\<noteq> []\"\n  shows \"(u # p) \\<oplus> q = u # p \\<oplus> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u # p) \\<oplus> q = u # p \\<oplus> q", "unfolding vwalk_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u # p) @ tl q = u # p @ tl q", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. (u # p) @ tl q = u # p @ tl q", "by simp"], ["", "lemma vwalk_join_def2:\n  assumes \"joinable p q\"\n  shows \"p \\<oplus> q = butlast p @ q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "from assms"], ["proof (chain)\npicking this:\n  joinable p q", "have \"p \\<noteq> []\" and \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& q \\<noteq> []", "by (simp add: joinable_def)+"], ["proof (state)\nthis:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  q \\<noteq> []", "have \"vwalk_join p q = butlast p @ last p # tl q\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ last p # tl q", "unfolding vwalk_join_def"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. p @ tl q = butlast p @ last p # tl q", "by simp"], ["proof (state)\nthis:\n  p \\<oplus> q = butlast p @ last p # tl q\n\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "then"], ["proof (chain)\npicking this:\n  p \\<oplus> q = butlast p @ last p # tl q", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<oplus> q = butlast p @ last p # tl q\n\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "using assms"], ["proof (prove)\nusing this:\n  p \\<oplus> q = butlast p @ last p # tl q\n  joinable p q\n\ngoal (1 subgoal):\n 1. p \\<oplus> q = butlast p @ q", "by (simp add: joinable_def)"], ["proof (state)\nthis:\n  p \\<oplus> q = butlast p @ q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalk_join_hd':\n  assumes \"p \\<noteq> []\"\n  shows \"hd (p \\<oplus> q) = hd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (p \\<oplus> q) = hd p", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (p \\<oplus> q) = hd p", "by (auto simp add: vwalk_join_def)"], ["", "lemma vwalk_join_hd:\n  assumes \"joinable p q\"\n  shows \"hd (p \\<oplus> q) = hd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (p \\<oplus> q) = hd p", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. hd (p \\<oplus> q) = hd p", "by (auto simp add: vwalk_join_def joinable_def)"], ["", "lemma vwalk_join_last:\n  assumes \"joinable p q\"\n  shows \"last (p \\<oplus> q) = last q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (p \\<oplus> q) = last q", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. last (p \\<oplus> q) = last q", "by (auto simp add: vwalk_join_def2 joinable_def)"], ["", "lemma vwalk_join_Nil[simp]:\n  \"p \\<oplus> [] = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<oplus> [] = p", "by (simp add: vwalk_join_def)"], ["", "lemma vwalk_joinI_vwalk':\n  assumes \"vwalk p G\"\n  assumes \"vwalk q G\"\n  assumes \"last p = hd q\"\n  shows \"vwalk (p \\<oplus> q) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (p \\<oplus> q) G", "proof (unfold vwalk_join_def, rule vwalkI)"], ["proof (state)\ngoal (3 subgoals):\n 1. set (p @ tl q) \\<subseteq> verts G\n 2. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 3. p @ tl q \\<noteq> []", "have \"set p \\<subseteq> verts G\" and \"set q \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p \\<subseteq> verts G &&& set q \\<subseteq> verts G", "using \\<open>vwalk p G\\<close> and \\<open>vwalk q G\\<close>"], ["proof (prove)\nusing this:\n  vwalk p G\n  vwalk q G\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> verts G &&& set q \\<subseteq> verts G", "by blast+"], ["proof (state)\nthis:\n  set p \\<subseteq> verts G\n  set q \\<subseteq> verts G\n\ngoal (3 subgoals):\n 1. set (p @ tl q) \\<subseteq> verts G\n 2. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 3. p @ tl q \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  set p \\<subseteq> verts G\n  set q \\<subseteq> verts G", "show \"set (p @ tl q) \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  set p \\<subseteq> verts G\n  set q \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set (p @ tl q) \\<subseteq> verts G", "by (cases q) auto"], ["proof (state)\nthis:\n  set (p @ tl q) \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 2. p @ tl q \\<noteq> []", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 2. p @ tl q \\<noteq> []", "show \"p @ tl q \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ tl q \\<noteq> []", "using \\<open>vwalk p G\\<close>"], ["proof (prove)\nusing this:\n  vwalk p G\n\ngoal (1 subgoal):\n 1. p @ tl q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  p @ tl q \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "have pe_p: \"set (vwalk_arcs p) \\<subseteq> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "using \\<open>vwalk p G\\<close>"], ["proof (prove)\nusing this:\n  vwalk p G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs p) \\<subseteq> arcs_ends G", "by blast"], ["proof (state)\nthis:\n  set (vwalk_arcs p) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "have pe_q': \"set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G", "have \"set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)", "by (cases q) (simp_all add: set_vwalk_arcs_cons)"], ["proof (state)\nthis:\n  set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G", "using \\<open>vwalk q G\\<close>"], ["proof (prove)\nusing this:\n  set (vwalk_arcs (tl q)) \\<subseteq> set (vwalk_arcs q)\n  vwalk q G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G", "by blast"], ["proof (state)\nthis:\n  set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (vwalk_arcs (tl q)) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "show \"set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "proof (cases \"tl q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tl q = [] \\<Longrightarrow>\n    set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 2. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "case Nil"], ["proof (state)\nthis:\n  tl q = []\n\ngoal (2 subgoals):\n 1. tl q = [] \\<Longrightarrow>\n    set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n 2. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  tl q = []", "show ?thesis"], ["proof (prove)\nusing this:\n  tl q = []\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "using pe_p"], ["proof (prove)\nusing this:\n  tl q = []\n  set (vwalk_arcs p) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "case (Cons x xs)"], ["proof (state)\nthis:\n  tl q = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "then"], ["proof (chain)\npicking this:\n  tl q = x # xs", "have nonempty: \"p \\<noteq> []\" \"tl q \\<noteq> []\""], ["proof (prove)\nusing this:\n  tl q = x # xs\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& tl q \\<noteq> []", "using \\<open>vwalk p G\\<close>"], ["proof (prove)\nusing this:\n  tl q = x # xs\n  vwalk p G\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& tl q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> []\n  tl q \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "moreover"], ["proof (state)\nthis:\n  p \\<noteq> []\n  tl q \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "have \"(hd q, hd (tl q)) \\<in> set (vwalk_arcs q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)", "using \\<open>vwalk q G\\<close> Cons"], ["proof (prove)\nusing this:\n  vwalk q G\n  tl q = x # xs\n\ngoal (1 subgoal):\n 1. (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)", "by  (cases q) auto"], ["proof (state)\nthis:\n  (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       tl q = a # list \\<Longrightarrow>\n       set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "ultimately"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  tl q \\<noteq> []\n  (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  tl q \\<noteq> []\n  (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "using \\<open>vwalk q G\\<close>"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  tl q \\<noteq> []\n  (hd q, hd (tl q)) \\<in> set (vwalk_arcs q)\n  vwalk q G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G", "by (auto simp: pe_p pe_q' \\<open>last p = hd q\\<close> vwalk_arcs_append)"], ["proof (state)\nthis:\n  set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (vwalk_arcs (p @ tl q)) \\<subseteq> arcs_ends G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalk_joinI_vwalk:\n  assumes \"vwalk p G\"\n  assumes \"vwalk q G\"\n  assumes \"joinable p q\"\n  shows \"vwalk (p \\<oplus> q) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (p \\<oplus> q) G", "using assms vwalk_joinI_vwalk'"], ["proof (prove)\nusing this:\n  vwalk p G\n  vwalk q G\n  joinable p q\n  \\<lbrakk>vwalk ?p ?G; vwalk ?q ?G; last ?p = hd ?q\\<rbrakk>\n  \\<Longrightarrow> vwalk (?p \\<oplus> ?q) ?G\n\ngoal (1 subgoal):\n 1. vwalk (p \\<oplus> q) G", "by (auto simp: joinable_def)"], ["", "lemma vwalk_join_split:\n  assumes \"u \\<in> set p\"\n  shows \"\\<exists>q r. p = q \\<oplus> r\n  \\<and> last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q r.\n       p = q \\<oplus> r \\<and>\n       last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q r.\n       p = q \\<oplus> r \\<and>\n       last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []", "from \\<open>u \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> set p", "obtain pre_p post_p where \"p = pre_p @ u # post_p\""], ["proof (prove)\nusing this:\n  u \\<in> set p\n\ngoal (1 subgoal):\n 1. (\\<And>pre_p post_p.\n        p = pre_p @ u # post_p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (auto simp add: split_list)"], ["proof (state)\nthis:\n  p = pre_p @ u # post_p\n\ngoal (1 subgoal):\n 1. \\<exists>q r.\n       p = q \\<oplus> r \\<and>\n       last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  p = pre_p @ u # post_p", "have \"p = (pre_p @ [u]) \\<oplus> (u # post_p)\""], ["proof (prove)\nusing this:\n  p = pre_p @ u # post_p\n\ngoal (1 subgoal):\n 1. p = (pre_p @ [u]) \\<oplus> u # post_p", "unfolding vwalk_join_def"], ["proof (prove)\nusing this:\n  p = pre_p @ u # post_p\n\ngoal (1 subgoal):\n 1. p = (pre_p @ [u]) @ tl (u # post_p)", "by simp"], ["proof (state)\nthis:\n  p = (pre_p @ [u]) \\<oplus> u # post_p\n\ngoal (1 subgoal):\n 1. \\<exists>q r.\n       p = q \\<oplus> r \\<and>\n       last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  p = (pre_p @ [u]) \\<oplus> u # post_p", "show ?thesis"], ["proof (prove)\nusing this:\n  p = (pre_p @ [u]) \\<oplus> u # post_p\n\ngoal (1 subgoal):\n 1. \\<exists>q r.\n       p = q \\<oplus> r \\<and>\n       last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>q r.\n     p = q \\<oplus> r \\<and>\n     last q = u \\<and> hd r = u \\<and> q \\<noteq> [] \\<and> r \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalkI_vwalk_join_l:\n  assumes \"p \\<noteq> []\"\n  assumes \"vwalk (p \\<oplus> q) G\"\n  shows \"vwalk p G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk p G", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  vwalk (p \\<oplus> q) G\n\ngoal (1 subgoal):\n 1. vwalk p G", "unfolding vwalk_join_def"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  vwalk (p @ tl q) G\n\ngoal (1 subgoal):\n 1. vwalk p G", "by (auto intro: vwalkI_append_l)"], ["", "lemma vwalkI_vwalk_join_r:\n  assumes \"joinable p q\"\n  assumes \"vwalk (p \\<oplus> q) G\"\n  shows \"vwalk q G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk q G", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n  vwalk (p \\<oplus> q) G\n\ngoal (1 subgoal):\n 1. vwalk q G", "by (auto simp add: vwalk_join_def2 joinable_def intro: vwalkI_append_r)"], ["", "lemma vwalk_join_assoc':\n  assumes \"p \\<noteq> []\" \"q \\<noteq> []\"\n  shows \"(p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. (p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r", "by (simp add: vwalk_join_def)"], ["", "lemma vwalk_join_assoc:\n  assumes \"joinable p q\" \"joinable q r\"\n  shows \"(p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n  joinable q r\n\ngoal (1 subgoal):\n 1. (p \\<oplus> q) \\<oplus> r = p \\<oplus> q \\<oplus> r", "by (simp add: vwalk_join_def joinable_def)"], ["", "lemma joinable_vwalk_join_r_iff:\n  \"joinable p (q \\<oplus> r) \\<longleftrightarrow> joinable p q \\<or> (q = [] \\<and> joinable p (tl r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable p (q \\<oplus> r) =\n    (joinable p q \\<or> q = [] \\<and> joinable p (tl r))", "by (cases q) (auto simp add: vwalk_join_def joinable_def)"], ["", "lemma joinable_vwalk_join_l_iff:\n  assumes \"joinable p q\"\n  shows \"joinable (p \\<oplus> q) r \\<longleftrightarrow> joinable q r\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable (p \\<oplus> q) r = joinable q r", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. joinable (p \\<oplus> q) r = joinable q r", "by (auto simp: joinable_def vwalk_join_last)"], ["", "lemmas joinable_simps =\n  joinable_vwalk_join_l_iff\n  joinable_vwalk_join_r_iff"], ["", "lemma joinable_cyclic_omit:\n  assumes \"joinable p q\" \"joinable q r\" \"joinable q q\"\n  shows \"joinable p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable p r", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n  joinable q r\n  joinable q q\n\ngoal (1 subgoal):\n 1. joinable p r", "by (metis joinable_def)"], ["", "lemma joinable_non_Nil:\n  assumes \"joinable p q\"\n  shows \"p \\<noteq> []\" \"q \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& q \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] &&& q \\<noteq> []", "by (simp_all add: joinable_def)"], ["", "lemma vwalk_join_vwalk_length[simp]:\n  assumes \"joinable p q\"\n  shows \"vwalk_length (p \\<oplus> q) = vwalk_length p + vwalk_length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_length (p \\<oplus> q) = vwalk_length p + vwalk_length q", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. vwalk_length (p \\<oplus> q) = vwalk_length p + vwalk_length q", "unfolding vwalk_join_def"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. vwalk_length (p @ tl q) = vwalk_length p + vwalk_length q", "by (simp add: less_eq_Suc_le[symmetric] joinable_non_Nil)"], ["", "lemma vwalk_join_arcs:\n  assumes \"joinable p q\"\n  shows \"vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q", "using assms"], ["proof (prove)\nusing this:\n  joinable p q\n\ngoal (1 subgoal):\n 1. vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. joinable [] q \\<Longrightarrow>\n    vwalk_arcs ([] \\<oplus> q) = vwalk_arcs [] @ vwalk_arcs q\n 2. \\<And>a p.\n       \\<lbrakk>joinable p q \\<Longrightarrow>\n                vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q;\n        joinable (a # p) q\\<rbrakk>\n       \\<Longrightarrow> vwalk_arcs ((a # p) \\<oplus> q) =\n                         vwalk_arcs (a # p) @ vwalk_arcs q", "case (Cons v vs)"], ["proof (state)\nthis:\n  joinable vs q \\<Longrightarrow>\n  vwalk_arcs (vs \\<oplus> q) = vwalk_arcs vs @ vwalk_arcs q\n  joinable (v # vs) q\n\ngoal (2 subgoals):\n 1. joinable [] q \\<Longrightarrow>\n    vwalk_arcs ([] \\<oplus> q) = vwalk_arcs [] @ vwalk_arcs q\n 2. \\<And>a p.\n       \\<lbrakk>joinable p q \\<Longrightarrow>\n                vwalk_arcs (p \\<oplus> q) = vwalk_arcs p @ vwalk_arcs q;\n        joinable (a # p) q\\<rbrakk>\n       \\<Longrightarrow> vwalk_arcs ((a # p) \\<oplus> q) =\n                         vwalk_arcs (a # p) @ vwalk_arcs q", "then"], ["proof (chain)\npicking this:\n  joinable vs q \\<Longrightarrow>\n  vwalk_arcs (vs \\<oplus> q) = vwalk_arcs vs @ vwalk_arcs q\n  joinable (v # vs) q", "show ?case"], ["proof (prove)\nusing this:\n  joinable vs q \\<Longrightarrow>\n  vwalk_arcs (vs \\<oplus> q) = vwalk_arcs vs @ vwalk_arcs q\n  joinable (v # vs) q\n\ngoal (1 subgoal):\n 1. vwalk_arcs ((v # vs) \\<oplus> q) = vwalk_arcs (v # vs) @ vwalk_arcs q", "by (cases \"vs = []\")\n       (auto simp: vwalk_join_hd, simp add: joinable_def vwalk_join_def)"], ["proof (state)\nthis:\n  vwalk_arcs ((v # vs) \\<oplus> q) = vwalk_arcs (v # vs) @ vwalk_arcs q\n\ngoal (1 subgoal):\n 1. joinable [] q \\<Longrightarrow>\n    vwalk_arcs ([] \\<oplus> q) = vwalk_arcs [] @ vwalk_arcs q", "qed simp"], ["", "lemma vwalk_join_arcs1:\n  assumes \"set (vwalk_arcs p) \\<subseteq> E\"\n  assumes \"p = q \\<oplus> r\"\n  shows \"set (vwalk_arcs q) \\<subseteq> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs q) \\<subseteq> E", "by (metis assms vwalk_join_def set_vwalk_arcs_append1 subset_trans)"], ["", "lemma vwalk_join_arcs2:\n  assumes \"set (vwalk_arcs p) \\<subseteq> E\"\n  assumes \"joinable q r\"\n  assumes \"p = q \\<oplus> r\"\n  shows \"set (vwalk_arcs r) \\<subseteq> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs r) \\<subseteq> E", "using assms"], ["proof (prove)\nusing this:\n  set (vwalk_arcs p) \\<subseteq> E\n  joinable q r\n  p = q \\<oplus> r\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs r) \\<subseteq> E", "by (simp add: vwalk_join_arcs)"], ["", "definition concat_vpath :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"concat_vpath p q \\<equiv> vwalk_to_vpath (p \\<oplus> q)\""], ["", "lemma concat_vpath_is_vpath:\n  assumes p_props: \"vwalk p G\" \"hd p = u\" \"last p = v\"\n  assumes q_props: \"vwalk q G\" \"hd q = v\" \"last q = w\"\n  shows \"vpath (concat_vpath p q) G \\<and> hd (concat_vpath p q) = u\n    \\<and> last (concat_vpath p q) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath (concat_vpath p q) G \\<and>\n    hd (concat_vpath p q) = u \\<and> last (concat_vpath p q) = w", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. vpath (concat_vpath p q) G\n 2. hd (concat_vpath p q) = u\n 3. last (concat_vpath p q) = w", "have joinable: \"joinable p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable p q", "using assms"], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = u\n  last p = v\n  vwalk q G\n  hd q = v\n  last q = w\n\ngoal (1 subgoal):\n 1. joinable p q", "by auto"], ["proof (state)\nthis:\n  joinable p q\n\ngoal (3 subgoals):\n 1. vpath (concat_vpath p q) G\n 2. hd (concat_vpath p q) = u\n 3. last (concat_vpath p q) = w", "show \"vpath (concat_vpath p q) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath (concat_vpath p q) G", "unfolding concat_vpath_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (p \\<oplus> q)) G", "using assms and joinable"], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = u\n  last p = v\n  vwalk q G\n  hd q = v\n  last q = w\n  joinable p q\n\ngoal (1 subgoal):\n 1. vpath (vwalk_to_vpath (p \\<oplus> q)) G", "by (auto intro: vwalk_to_vpath_vpath vwalk_joinI_vwalk)"], ["proof (state)\nthis:\n  vpath (concat_vpath p q) G\n\ngoal (2 subgoals):\n 1. hd (concat_vpath p q) = u\n 2. last (concat_vpath p q) = w", "show \"hd (concat_vpath p q) = u\" \"last (concat_vpath p q) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (concat_vpath p q) = u &&& last (concat_vpath p q) = w", "unfolding concat_vpath_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath (p \\<oplus> q)) = u &&&\n    last (vwalk_to_vpath (p \\<oplus> q)) = w", "using assms and joinable"], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = u\n  last p = v\n  vwalk q G\n  hd q = v\n  last q = w\n  joinable p q\n\ngoal (1 subgoal):\n 1. hd (vwalk_to_vpath (p \\<oplus> q)) = u &&&\n    last (vwalk_to_vpath (p \\<oplus> q)) = w", "by (auto simp: vwalk_to_vpath_hd vwalk_to_vpath_last\n      vwalk_join_hd vwalk_join_last)"], ["proof (state)\nthis:\n  hd (concat_vpath p q) = u\n  last (concat_vpath p q) = w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma concat_vpath_exists:\n  assumes p_props: \"vwalk p G\" \"hd p = u\" \"last p = v\"\n  assumes q_props: \"vwalk q G\" \"hd q = v\" \"last q = w\"\n  obtains r where \"vpath r G\" \"hd r = u\" \"last r = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>vpath r G; hd r = u; last r = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using concat_vpath_is_vpath[OF assms]"], ["proof (prove)\nusing this:\n  vpath (concat_vpath p q) G \\<and>\n  hd (concat_vpath p q) = u \\<and> last (concat_vpath p q) = w\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>vpath r G; hd r = u; last r = w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma (in fin_digraph) vpaths_finite:\n  shows \"finite {p. vpath p G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "have \"{p. vpath p G}\n    \\<subseteq> {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. vpath p G}\n    \\<subseteq> {xs.\n                 set xs \\<subseteq> verts G \\<and>\n                 length xs \\<le> card (verts G)}", "proof (clarify, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. vpath x G \\<Longrightarrow> set x \\<subseteq> verts G\n 2. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. vpath x G \\<Longrightarrow> set x \\<subseteq> verts G\n 2. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "assume \"vpath p G\""], ["proof (state)\nthis:\n  vpath p G\n\ngoal (2 subgoals):\n 1. \\<And>x. vpath x G \\<Longrightarrow> set x \\<subseteq> verts G\n 2. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "then"], ["proof (chain)\npicking this:\n  vpath p G", "show \"set p \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  vpath p G\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> verts G", "by blast"], ["proof (state)\nthis:\n  set p \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "from \\<open>vpath p G\\<close>"], ["proof (chain)\npicking this:\n  vpath p G", "have \"length p = card (set p)\""], ["proof (prove)\nusing this:\n  vpath p G\n\ngoal (1 subgoal):\n 1. length p = card (set p)", "by (auto simp add: distinct_card)"], ["proof (state)\nthis:\n  length p = card (set p)\n\ngoal (1 subgoal):\n 1. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "also"], ["proof (state)\nthis:\n  length p = card (set p)\n\ngoal (1 subgoal):\n 1. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "have \"\\<dots> \\<le> card (verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set p) \\<le> card (verts G)", "using \\<open>vpath p G\\<close>"], ["proof (prove)\nusing this:\n  vpath p G\n\ngoal (1 subgoal):\n 1. card (set p) \\<le> card (verts G)", "by (auto intro!: card_mono elim!: vpathE)"], ["proof (state)\nthis:\n  card (set p) \\<le> card (verts G)\n\ngoal (1 subgoal):\n 1. \\<And>x. vpath x G \\<Longrightarrow> length x \\<le> card (verts G)", "finally"], ["proof (chain)\npicking this:\n  length p \\<le> card (verts G)", "show \"length p \\<le> card (verts G)\""], ["proof (prove)\nusing this:\n  length p \\<le> card (verts G)\n\ngoal (1 subgoal):\n 1. length p \\<le> card (verts G)", "."], ["proof (state)\nthis:\n  length p \\<le> card (verts G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p. vpath p G}\n  \\<subseteq> {xs.\n               set xs \\<subseteq> verts G \\<and>\n               length xs \\<le> card (verts G)}\n\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "moreover"], ["proof (state)\nthis:\n  {p. vpath p G}\n  \\<subseteq> {xs.\n               set xs \\<subseteq> verts G \\<and>\n               length xs \\<le> card (verts G)}\n\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "have \"finite {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}", "by (intro finite_lists_length_le) auto"], ["proof (state)\nthis:\n  finite\n   {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}\n\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "ultimately"], ["proof (chain)\npicking this:\n  {p. vpath p G}\n  \\<subseteq> {xs.\n               set xs \\<subseteq> verts G \\<and>\n               length xs \\<le> card (verts G)}\n  finite\n   {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}", "show ?thesis"], ["proof (prove)\nusing this:\n  {p. vpath p G}\n  \\<subseteq> {xs.\n               set xs \\<subseteq> verts G \\<and>\n               length xs \\<le> card (verts G)}\n  finite\n   {xs. set xs \\<subseteq> verts G \\<and> length xs \\<le> card (verts G)}\n\ngoal (1 subgoal):\n 1. finite {p. vpath p G}", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite {p. vpath p G}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) reachable_vwalk_conv:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<longleftrightarrow> (\\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>* v) =\n    (\\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n 2. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "assume ?L"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n 2. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v", "show ?R"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v", "proof (induct rule: converse_reachable_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    \\<exists>p. vwalk p G \\<and> hd p = v \\<and> last p = v\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "case base"], ["proof (state)\nthis:\n  v \\<in> verts G\n\ngoal (2 subgoals):\n 1. v \\<in> verts G \\<Longrightarrow>\n    \\<exists>p. vwalk p G \\<and> hd p = v \\<and> last p = v\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts G", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. \\<exists>p. vwalk p G \\<and> hd p = v \\<and> last p = v", "by (rule_tac x=\"[v]\" in exI)\n         (auto simp: vwalk_def arcs_ends_conv)"], ["proof (state)\nthis:\n  \\<exists>p. vwalk p G \\<and> hd p = v \\<and> last p = v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "case (step u w)"], ["proof (state)\nthis:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  \\<exists>p. vwalk p G \\<and> hd p = w \\<and> last p = v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  \\<exists>p. vwalk p G \\<and> hd p = w \\<and> last p = v", "obtain p where \"vwalk p G\" \"hd p = w\" \"last p = v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  \\<exists>p. vwalk p G \\<and> hd p = w \\<and> last p = v\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>vwalk p G; hd p = w; last p = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  vwalk p G\n  hd p = w\n  last p = v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "then"], ["proof (chain)\npicking this:\n  vwalk p G\n  hd p = w\n  last p = v", "have \"vwalk (u#p) G \\<and> hd (u#p) = u \\<and> last (u#p) = v\""], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = w\n  last p = v\n\ngoal (1 subgoal):\n 1. vwalk (u # p) G \\<and> hd (u # p) = u \\<and> last (u # p) = v", "using step"], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = w\n  last p = v\n  u \\<rightarrow> w\n  w \\<rightarrow>\\<^sup>* v\n  \\<exists>p. vwalk p G \\<and> hd p = w \\<and> last p = v\n\ngoal (1 subgoal):\n 1. vwalk (u # p) G \\<and> hd (u # p) = u \\<and> last (u # p) = v", "by (auto intro!: vwalk_consI intro: adj_in_verts)"], ["proof (state)\nthis:\n  vwalk (u # p) G \\<and> hd (u # p) = u \\<and> last (u # p) = v\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow> y; y \\<rightarrow>\\<^sup>* v;\n        \\<exists>p. vwalk p G \\<and> hd p = y \\<and> last p = v\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            vwalk p G \\<and> hd p = x \\<and> last p = v", "then"], ["proof (chain)\npicking this:\n  vwalk (u # p) G \\<and> hd (u # p) = u \\<and> last (u # p) = v", "show ?case"], ["proof (prove)\nusing this:\n  vwalk (u # p) G \\<and> hd (u # p) = u \\<and> last (u # p) = v\n\ngoal (1 subgoal):\n 1. \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v", ".."], ["proof (state)\nthis:\n  \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "assume ?R"], ["proof (state)\nthis:\n  \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v", "obtain p where \"vwalk p G\" \"hd p = u\" \"last p = v\""], ["proof (prove)\nusing this:\n  \\<exists>p. vwalk p G \\<and> hd p = u \\<and> last p = v\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>vwalk p G; hd p = u; last p = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  vwalk p G\n  hd p = u\n  last p = v\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       vwalk p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "with \\<open>vwalk p G\\<close>"], ["proof (chain)\npicking this:\n  vwalk p G\n  vwalk p G\n  hd p = u\n  last p = v", "show ?L"], ["proof (prove)\nusing this:\n  vwalk p G\n  vwalk p G\n  hd p = u\n  last p = v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "proof (induct p arbitrary: u rule: vwalk_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> verts G; vwalk [u] G; hd [u] = ua;\n        last [u] = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v\n 2. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "case (Base u)"], ["proof (state)\nthis:\n  ua__ \\<in> verts G\n  vwalk [ua__] G\n  hd [ua__] = u\n  last [ua__] = v\n\ngoal (2 subgoals):\n 1. \\<And>u ua.\n       \\<lbrakk>u \\<in> verts G; vwalk [u] G; hd [u] = ua;\n        last [u] = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v\n 2. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  ua__ \\<in> verts G\n  vwalk [ua__] G\n  hd [ua__] = u\n  last [ua__] = v", "show ?case"], ["proof (prove)\nusing this:\n  ua__ \\<in> verts G\n  vwalk [ua__] G\n  hd [ua__] = u\n  last [ua__] = v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "by auto"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "case (Cons w x es)"], ["proof (state)\nthis:\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v\n\ngoal (1 subgoal):\n 1. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v", "have \"u \\<rightarrow>\\<^bsub>G\\<^esub> x\""], ["proof (prove)\nusing this:\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow> x", "using Cons"], ["proof (prove)\nusing this:\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v\n\ngoal (1 subgoal):\n 1. u \\<rightarrow> x", "by auto"], ["proof (state)\nthis:\n  u \\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<And>u va es ua.\n       \\<lbrakk>u \\<rightarrow> va;\n        \\<And>u.\n           \\<lbrakk>vwalk (va # es) G; hd (va # es) = u;\n            last (va # es) = v\\<rbrakk>\n           \\<Longrightarrow> u \\<rightarrow>\\<^sup>* v;\n        vwalk (u # va # es) G; hd (u # va # es) = ua;\n        last (u # va # es) = v\\<rbrakk>\n       \\<Longrightarrow> ua \\<rightarrow>\\<^sup>* v", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>* v", "apply (rule adj_reachable_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. u \\<rightarrow> ?b\n 2. ?b \\<rightarrow>\\<^sup>* v", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>* v", "apply (rule Cons)"], ["proof (prove)\ngoal (3 subgoals):\n 1. vwalk (x # es) G\n 2. hd (x # es) = x\n 3. last (x # es) = v", "using Cons"], ["proof (prove)\nusing this:\n  w \\<rightarrow> x\n  \\<lbrakk>vwalk (x # es) G; hd (x # es) = ?u; last (x # es) = v\\<rbrakk>\n  \\<Longrightarrow> ?u \\<rightarrow>\\<^sup>* v\n  vwalk (w # x # es) G\n  hd (w # x # es) = u\n  last (w # x # es) = v\n\ngoal (3 subgoals):\n 1. vwalk (x # es) G\n 2. hd (x # es) = x\n 3. last (x # es) = v", "by (auto elim: vwalk_consE)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) reachable_vpath_conv:\n  \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v \\<longleftrightarrow> (\\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v)\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>* v) =\n    (\\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    \\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v\n 2. \\<exists>p.\n       vpath p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "assume ?L"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    \\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v\n 2. \\<exists>p.\n       vpath p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>* v", "obtain p where \"vwalk p G\" \"hd p = u\" \"last p = v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>vwalk p G; hd p = u; last p = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: reachable_vwalk_conv)"], ["proof (state)\nthis:\n  vwalk p G\n  hd p = u\n  last p = v\n\ngoal (2 subgoals):\n 1. u \\<rightarrow>\\<^sup>* v \\<Longrightarrow>\n    \\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v\n 2. \\<exists>p.\n       vpath p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "then"], ["proof (chain)\npicking this:\n  vwalk p G\n  hd p = u\n  last p = v", "show ?R"], ["proof (prove)\nusing this:\n  vwalk p G\n  hd p = u\n  last p = v\n\ngoal (1 subgoal):\n 1. \\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v", "by (auto intro: exI[where x=\"vwalk_to_vpath p\"]\n      simp: vwalk_to_vpath_hd vwalk_to_vpath_last vwalk_to_vpath_vpath)"], ["proof (state)\nthis:\n  \\<exists>p. vpath p G \\<and> hd p = u \\<and> last p = v\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       vpath p G \\<and> hd p = u \\<and> last p = v \\<Longrightarrow>\n    u \\<rightarrow>\\<^sup>* v", "qed (auto simp: reachable_vwalk_conv)"], ["", "lemma in_set_vwalk_arcsE:\n  assumes \"(u,v) \\<in> set (vwalk_arcs p)\"\n  obtains \"u \\<in> set p\" \"v \\<in> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>u \\<in> set p; v \\<in> set p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (u, v) \\<in> set (vwalk_arcs p)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>u \\<in> set p; v \\<in> set p\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (induct p rule: vwalk_arcs.induct) auto"], ["", "lemma vwalk_rev_ex:\n  assumes \"symmetric G\"\n  assumes \"vwalk p G\"\n  shows \"vwalk (rev p) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (rev p) G", "using assms"], ["proof (prove)\nusing this:\n  symmetric G\n  vwalk p G\n\ngoal (1 subgoal):\n 1. vwalk (rev p) G", "proof (induct p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>symmetric G; vwalk [] G\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev []) G\n 2. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>symmetric G; vwalk p G\\<rbrakk>\n                \\<Longrightarrow> vwalk (rev p) G;\n        symmetric G; vwalk (a # p) G\\<rbrakk>\n       \\<Longrightarrow> vwalk (rev (a # p)) G", "case Nil"], ["proof (state)\nthis:\n  symmetric G\n  vwalk [] G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>symmetric G; vwalk [] G\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev []) G\n 2. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>symmetric G; vwalk p G\\<rbrakk>\n                \\<Longrightarrow> vwalk (rev p) G;\n        symmetric G; vwalk (a # p) G\\<rbrakk>\n       \\<Longrightarrow> vwalk (rev (a # p)) G", "then"], ["proof (chain)\npicking this:\n  symmetric G\n  vwalk [] G", "show ?case"], ["proof (prove)\nusing this:\n  symmetric G\n  vwalk [] G\n\ngoal (1 subgoal):\n 1. vwalk (rev []) G", "by simp"], ["proof (state)\nthis:\n  vwalk (rev []) G\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>symmetric G; vwalk p G\\<rbrakk>\n                \\<Longrightarrow> vwalk (rev p) G;\n        symmetric G; vwalk (a # p) G\\<rbrakk>\n       \\<Longrightarrow> vwalk (rev (a # p)) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>symmetric G; vwalk p G\\<rbrakk>\n                \\<Longrightarrow> vwalk (rev p) G;\n        symmetric G; vwalk (a # p) G\\<rbrakk>\n       \\<Longrightarrow> vwalk (rev (a # p)) G", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n  \\<Longrightarrow> vwalk (rev xs) G\n  symmetric G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       \\<lbrakk>\\<lbrakk>symmetric G; vwalk p G\\<rbrakk>\n                \\<Longrightarrow> vwalk (rev p) G;\n        symmetric G; vwalk (a # p) G\\<rbrakk>\n       \\<Longrightarrow> vwalk (rev (a # p)) G", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n  \\<Longrightarrow> vwalk (rev xs) G\n  symmetric G\n  vwalk (x # xs) G", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n  \\<Longrightarrow> vwalk (rev xs) G\n  symmetric G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vwalk (rev (x # xs)) G", "proof (cases \"xs = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs = []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G\n 2. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "case True"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs = []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G\n 2. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  xs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. vwalk (rev (x # xs)) G", "using Cons"], ["proof (prove)\nusing this:\n  xs = []\n  \\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n  \\<Longrightarrow> vwalk (rev xs) G\n  symmetric G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vwalk (rev (x # xs)) G", "by auto"], ["proof (state)\nthis:\n  vwalk (rev (x # xs)) G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "case False"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "have \"vwalk xs G\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. vwalk xs G", "using \\<open>vwalk (x # xs) G\\<close>"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vwalk xs G", "by (metis vwalk_consE)"], ["proof (state)\nthis:\n  vwalk xs G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vwalk xs G", "have \"vwalk (rev xs) G\""], ["proof (prove)\nusing this:\n  vwalk xs G\n\ngoal (1 subgoal):\n 1. vwalk (rev xs) G", "using Cons"], ["proof (prove)\nusing this:\n  vwalk xs G\n  \\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n  \\<Longrightarrow> vwalk (rev xs) G\n  symmetric G\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. vwalk (rev xs) G", "by blast"], ["proof (state)\nthis:\n  vwalk (rev xs) G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "have \"vwalk (rev (x # xs)) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (rev (x # xs)) G", "proof (rule vwalkI)"], ["proof (state)\ngoal (3 subgoals):\n 1. set (rev (x # xs)) \\<subseteq> verts G\n 2. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n 3. rev (x # xs) \\<noteq> []", "have \"set (x # xs) \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> verts G", "using \\<open>vwalk (x # xs) G\\<close>"], ["proof (prove)\nusing this:\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> verts G", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> verts G\n\ngoal (3 subgoals):\n 1. set (rev (x # xs)) \\<subseteq> verts G\n 2. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n 3. rev (x # xs) \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  set (x # xs) \\<subseteq> verts G", "show \"set (rev (x # xs)) \\<subseteq> verts G\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. set (rev (x # xs)) \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  set (rev (x # xs)) \\<subseteq> verts G\n\ngoal (2 subgoals):\n 1. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n 2. rev (x # xs) \\<noteq> []", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n 2. rev (x # xs) \\<noteq> []", "have \"set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G", "using \\<open>vwalk (x # xs) G\\<close>"], ["proof (prove)\nusing this:\n  vwalk (x # xs) G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G", "by auto"], ["proof (state)\nthis:\n  set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G\n\ngoal (2 subgoals):\n 1. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n 2. rev (x # xs) \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G", "show \"set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\""], ["proof (prove)\nusing this:\n  set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G", "using \\<open>symmetric G\\<close>"], ["proof (prove)\nusing this:\n  set (vwalk_arcs (x # xs)) \\<subseteq> arcs_ends G\n  symmetric G\n\ngoal (1 subgoal):\n 1. set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G", "by (simp only: set_vwalk_arcs_rev)\n           (auto intro: arcs_ends_symmetric)"], ["proof (state)\nthis:\n  set (vwalk_arcs (rev (x # xs))) \\<subseteq> arcs_ends G\n\ngoal (1 subgoal):\n 1. rev (x # xs) \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rev (x # xs) \\<noteq> []", "show \"rev (x # xs) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (x # xs) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  rev (x # xs) \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwalk (rev (x # xs)) G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>symmetric G; vwalk xs G\\<rbrakk>\n             \\<Longrightarrow> vwalk (rev xs) G;\n     symmetric G; vwalk (x # xs) G; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> vwalk (rev (x # xs)) G", "then"], ["proof (chain)\npicking this:\n  vwalk (rev (x # xs)) G", "show \"vwalk (rev (x # xs)) G\""], ["proof (prove)\nusing this:\n  vwalk (rev (x # xs)) G\n\ngoal (1 subgoal):\n 1. vwalk (rev (x # xs)) G", "by auto"], ["proof (state)\nthis:\n  vwalk (rev (x # xs)) G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vwalk (rev (x # xs)) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vwalk_singleton[simp]: \"vwalk [u] G = (u \\<in> verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk [u] G = (u \\<in> verts G)", "by auto"], ["", "lemma (in wf_digraph) vwalk_Cons_Cons[simp]:\n  \"vwalk (u # v # ws) G = ((u,v) \\<in> arcs_ends G \\<and> vwalk (v # ws) G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (u # v # ws) G = (u \\<rightarrow> v \\<and> vwalk (v # ws) G)", "by (force elim: vwalk_consE intro: vwalk_consI)"], ["", "lemma (in wf_digraph) awalk_imp_vwalk:\n  assumes \"awalk u p v\" shows \"vwalk (awalk_verts u p) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwalk (awalk_verts u p) G", "using assms"], ["proof (prove)\nusing this:\n  awalk u p v\n\ngoal (1 subgoal):\n 1. vwalk (awalk_verts u p) G", "by (induct p arbitrary: u rule: vwalk_arcs.induct)\n     (force simp: awalk_simps dest: in_arcs_imp_in_arcs_ends)+"], ["", "end"]]}