{"file_name": "/home/qj213/afp-2021-10-22/thys/KAD/Antidomain_Semiring.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KAD", "problem_names": ["lemma a_d_zero [simp]: \"ad x \\<cdot> d x = 0\"", "lemma a_d_one [simp]: \"d x \\<oplus> ad x = 1\"", "lemma n_annil [simp]: \"0 \\<cdot> x = 0\"", "lemma a_mult_idem [simp]: \"ad x \\<cdot> ad x = ad x\"", "lemma a_add_idem [simp]: \"ad x \\<oplus> ad x = ad x\"", "lemma a_add_comm: \"x \\<oplus> y = y \\<oplus> x\"", "lemma a_add_assoc: \"x \\<oplus> (y \\<oplus> z) = (x \\<oplus> y) \\<oplus> z\"", "lemma huntington [simp]: \"ad (x \\<oplus> y) \\<oplus> ad (x \\<oplus> ad y) = ad x\"", "lemma a_absorb1 [simp]: \"(ad x \\<oplus> ad y) \\<cdot> ad x = ad x\"", "lemma a_absorb2 [simp]: \"ad x \\<oplus> ad x \\<cdot> ad y = ad x\"", "lemma prod_split [simp]: \"ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> d y = ad x\"", "lemma sum_split [simp]: \"(ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> d y) = ad x\"", "lemma a_comp_simp [simp]: \"(ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x\"", "lemma a_distrib1: \"ad x \\<cdot> (ad y \\<oplus> ad z) = ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z\"", "lemma a_distrib2: \"ad x \\<oplus> ad y \\<cdot> ad z = (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)\"", "lemma aa_loc [simp]: \"d (x \\<cdot> d y) = d (x \\<cdot> y)\"", "lemma a_loc [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\"", "lemma d_a_export [simp]: \"d (ad x \\<cdot> y) = ad x \\<cdot> d y\"", "lemma ds_ord_iso1: \"x \\<sqsubseteq> y \\<Longrightarrow> z \\<cdot> x \\<sqsubseteq> z \\<cdot> y\"", "lemma a_very_costrict: \"ad x = 1 \\<longleftrightarrow> x = 0\"", "lemma a_weak_loc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\"", "lemma a_closure [simp]: \"d (ad x) = ad x\"", "lemma a_d_mult_closure [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\"", "lemma kat_3': \"d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\"", "lemma s4 [simp]: \"ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y\"", "lemma kat_3_equiv: \"d x \\<cdot> y \\<cdot> ad z = 0 \\<longleftrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\"", "lemma a_a_one [simp]: \"d 1 = 1\"", "lemma a_very_costrict': \"ad x = 1 \\<longleftrightarrow> x = 0\"", "lemma one_idem [simp]: \"1 + 1 = 1\"", "lemma d1_a [simp]: \"d x \\<cdot> x = x\"", "lemma a_comm: \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\"", "lemma a_subid: \"ad x \\<le> 1\"", "lemma a_subid_aux1: \"ad x \\<cdot> y \\<le> y\"", "lemma a_subdist: \"ad (x + y) \\<le> ad x\"", "lemma a_antitone: \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\"", "lemma a_mul_d [simp]: \"ad x \\<cdot> d x = 0\"", "lemma a_gla1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\"", "lemma a_gla2: \"ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = 0\"", "lemma a2_eq [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\"", "lemma a_export' [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\"", "lemma a_idem [simp]: \"ad x \\<cdot> ad x = ad x\"", "lemma a_3_var [simp]: \"ad x \\<cdot> ad y \\<cdot> (x + y) = 0\"", "lemma a_3 [simp]: \"ad x \\<cdot> ad y \\<cdot> d (x + y) = 0\"", "lemma a_closure' [simp]: \"d (ad x) = ad x\"", "lemma \"x \\<cdot> ad 1 = ad 1\"", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\"", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\"", "lemma phl_seq_inv: \"d v \\<cdot> x \\<cdot> y \\<cdot> ad w = 0 \\<Longrightarrow> \\<exists>z. d v \\<cdot> x \\<cdot> d z = 0 \\<and> ad z \\<cdot> y \\<cdot> ad w = 0\"", "lemma a_fixpoint: \"ad x = x \\<Longrightarrow> (\\<forall>y. y = 0)\"", "lemma a_very_costrict'': \"ad x = 1 \\<longleftrightarrow> x = 0\"", "lemma a_subid': \"ad x \\<le> 1\"", "lemma d1_a' [simp]: \"d x \\<cdot> x = x\"", "lemma a_subid_aux1': \"ad x \\<cdot> y \\<le> y\"", "lemma a_mul_d' [simp]: \"ad x \\<cdot> d x = 0\"", "lemma a_d_closed [simp]: \"d (ad x) = ad x\"", "lemma meet_ord_def: \"ad x \\<le> ad y \\<longleftrightarrow> ad x \\<cdot> ad y = ad x\"", "lemma d_weak_loc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\"", "lemma gla_1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\"", "lemma a2_eq' [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\"", "lemma a_supdist_var: \"ad (x + y) \\<le> ad x\"", "lemma a_antitone': \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\"", "lemma a_comm_var: \"ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x\"", "lemma a_comm': \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\"", "lemma a_closed [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\"", "lemma a_export'' [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\"", "lemma d1_sum_var: \"x + y \\<le> (d x + d y) \\<cdot> (x + y)\"", "lemma a4': \"ad (x + y) = ad x \\<cdot> ad y\"", "lemma a_supdist: \"ad (x + y) \\<le> ad x + ad y\"", "lemma a_gla: \"ad x \\<cdot> y = 0 \\<longleftrightarrow> ad x \\<le> ad y\"", "lemma a_subid_aux2: \"x \\<cdot> ad y \\<le> x\"", "lemma a42_var: \"d x \\<cdot> d y \\<le> ad (ad x + ad y)\"", "lemma d1_weak [simp]: \"(d x + d y) \\<cdot> x = x\"", "lemma \"x \\<cdot> ad 1 = ad 1\"", "lemma \"ad x \\<cdot> (y + z) = ad x \\<cdot> y + ad x \\<cdot> z\"", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\"", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\"", "lemma one_idem': \"1 + 1 = 1\"", "lemma am5_lem [simp]: \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\"", "lemma am6_lem [simp]: \"ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x\"", "lemma a_zero [simp]: \"ad 0 = 1\"", "lemma a_one [simp]: \"ad 1 = 0\"", "lemma fd_eq_fdia [simp]: \"domain_semiringl.fd (\\<cdot>) d x y \\<equiv> fdia x y\"", "lemma \"a_zero = 0\"", "lemma a_2_var: \"ad x \\<cdot> d y = 0 \\<longleftrightarrow> ad x \\<le> ad y\"", "lemma da_shunt1: \"x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z\"", "lemma da_shunt2: \"x \\<le> ad y + z \\<Longrightarrow> x \\<cdot> d y \\<le> z\"", "lemma d_a_galois1: \"d x \\<cdot> ad y \\<le> d z \\<longleftrightarrow> d x \\<le> d z + d y\"", "lemma d_a_galois2: \"d x \\<cdot> d y \\<le> d z \\<longleftrightarrow> d x \\<le> d z + ad y\"", "lemma d_cancellation_1: \"d x \\<le> d y + d x \\<cdot> ad y\"", "lemma d_cancellation_2: \"(d z + d y) \\<cdot> ad y \\<le> d z\"", "lemma a_de_morgan: \"ad (ad x \\<cdot> ad y) = d (x + y)\"", "lemma a_de_morgan_var_3: \"ad (d x + d y) = ad x \\<cdot> ad y\"", "lemma a_de_morgan_var_4: \"ad (d x \\<cdot> d y) = ad x + ad y\"", "lemma a_4: \"ad x \\<le> ad (x \\<cdot> y)\"", "lemma a_6: \"ad (d x \\<cdot> y) = ad x + ad y\"", "lemma a_7: \"d x \\<cdot> ad (d y + d z) = d x \\<cdot> ad y \\<cdot> ad z\"", "lemma a_d_add_closure [simp]: \"d (ad x + ad y) = ad x + ad y\"", "lemma d_6 [simp]: \"d x + ad x \\<cdot> d y = d x + d y\"", "lemma d_7 [simp]: \"ad x + d x \\<cdot> ad y = ad x + ad y\"", "lemma a_mult_add: \"ad x \\<cdot> (y + x) = ad x \\<cdot> y\"", "lemma kat_2: \"y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\"", "lemma kat_3: \"d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\"", "lemma kat_4: \"d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow> d x \\<cdot> y \\<le> y \\<cdot> d z\"", "lemma kat_2_equiv: \"y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<longleftrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\"", "lemma kat_4_equiv: \"d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<longleftrightarrow> d x \\<cdot> y \\<le> y \\<cdot> d z\"", "lemma kat_3_equiv_opp: \"ad z \\<cdot> y \\<cdot> d x = 0 \\<longleftrightarrow> y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x\"", "lemma kat_4_equiv_opp: \"y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x \\<longleftrightarrow> y \\<cdot> d x \\<le> d z \\<cdot> y\"", "lemma fdemodalisation22: \"|x\\<rangle> y \\<le> d z \\<longleftrightarrow> ad z \\<cdot> x \\<cdot> d y = 0\"", "lemma dia_diff_var: \"|x\\<rangle> y \\<le> |x\\<rangle> (d y \\<cdot> ad z) + |x\\<rangle> z\"", "lemma dia_diff: \"|x\\<rangle> y \\<cdot> ad ( |x\\<rangle> z ) \\<le> |x\\<rangle> (d y \\<cdot> ad z)\"", "lemma fdia_export_2: \"ad y \\<cdot> |x\\<rangle> z = |ad y \\<cdot> x\\<rangle> z\"", "lemma fdia_split: \"|x\\<rangle> y = d z \\<cdot> |x\\<rangle> y + ad z \\<cdot> |x\\<rangle> y\"", "lemma fdia_fbox_de_morgan_2: \"ad ( |x\\<rangle> y) = |x] ad y\"", "lemma fbox_simp: \"|x] y = |x] d y\"", "lemma fbox_dom [simp]: \"|x] 0 = ad x\"", "lemma fbox_add1: \"|x] (d y \\<cdot> d z) = |x] y \\<cdot> |x] z\"", "lemma fbox_add2: \"|x + y] z = |x] z \\<cdot> |y] z\"", "lemma fbox_mult: \"|x \\<cdot> y] z = |x] |y] z\"", "lemma fbox_zero [simp]: \"|0] x = 1\"", "lemma fbox_one [simp]: \"|1] x = d x\"", "lemma fbox_iso: \"d x \\<le> d y \\<Longrightarrow> |z] x \\<le> |z] y\"", "lemma fbox_antitone_var: \"x \\<le> y \\<Longrightarrow> |y] z \\<le> |x] z\"", "lemma fbox_subdist_1: \"|x] (d y \\<cdot> d z) \\<le> |x] y\"", "lemma fbox_subdist_2: \"|x] y \\<le>|x] (d y + d z)\"", "lemma fbox_subdist: \"|x] d y + |x] d z \\<le> |x] (d y + d z)\"", "lemma fbox_diff_var: \"|x] (d y + ad z) \\<cdot> |x] z \\<le> |x] y\"", "lemma fbox_diff: \"|x] (d y + ad z) \\<le> |x] y + ad ( |x] z )\"", "lemma kat_1: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow> y \\<cdot> ad z \\<le> ad x \\<cdot> y\"", "lemma kat_1_equiv: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<longleftrightarrow> y \\<cdot> ad z \\<le> ad x \\<cdot> y\"", "lemma kat_3_equiv': \"d x \\<cdot> y \\<cdot> ad z = 0 \\<longleftrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\"", "lemma kat_1_equiv_opp: \"y \\<cdot> d x \\<le> d z \\<cdot> y \\<longleftrightarrow> ad z \\<cdot> y \\<le> y \\<cdot> ad x\"", "lemma kat_2_equiv_opp: \"ad z \\<cdot> y \\<le> y \\<cdot> ad x \\<longleftrightarrow> ad z \\<cdot> y \\<cdot> d x = 0\"", "lemma fbox_one_1 [simp]: \"|x] 1 = 1\"", "lemma fbox_demodalisation3: \"d y \\<le> |x] d z \\<longleftrightarrow> d y \\<cdot> x \\<le> x \\<cdot> d z\"", "lemma a_star [simp]: \"ad (x\\<^sup>\\<star>) = 0\"", "lemma fbox_star_unfold [simp]: \"|1] z \\<cdot> |x] |x\\<^sup>\\<star>] z = |x\\<^sup>\\<star>] z\"", "lemma fbox_star_unfold_var [simp]: \"d z \\<cdot> |x] |x\\<^sup>\\<star>] z = |x\\<^sup>\\<star>] z\"", "lemma fbox_star_unfoldr [simp]: \"|1] z \\<cdot> |x\\<^sup>\\<star>] |x] z = |x\\<^sup>\\<star>] z\"", "lemma fbox_star_unfoldr_var [simp]: \"d z \\<cdot> |x\\<^sup>\\<star>] |x] z = |x\\<^sup>\\<star>] z\"", "lemma fbox_star_induct_var: \"d y \\<le> |x] y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] y\"", "lemma fbox_star_induct: \"d y \\<le> d z \\<cdot> |x] y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] z\"", "lemma fbox_star_induct_eq: \"d z \\<cdot> |x] y = d y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] z\"", "lemma fbox_export_1: \"ad y + |x] y = |d y \\<cdot> x] y\"", "lemma fbox_export_2: \"d y + |x] y = |ad y \\<cdot> x] y\"", "lemma \"d p \\<le> |(d t \\<cdot> x)\\<^sup>\\<star> \\<cdot> ad t] (d q \\<cdot> ad t) \\<Longrightarrow> d p \\<le> |d t \\<cdot> x] d q\""], "translations": [["", "lemma a_d_zero [simp]: \"ad x \\<cdot> d x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = 0", "by (metis am1 am2 a_zero_def am_d_def)"], ["", "lemma a_d_one [simp]: \"d x \\<oplus> ad x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<oplus> ad x = (1::'a)", "by (metis am1 am3 mult_1_right am_d_def am_add_op_def)"], ["", "lemma n_annil [simp]: \"0 \\<cdot> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "have \"0 \\<cdot> x = d x \\<cdot> ad x \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = d x \\<cdot> ad x \\<cdot> x", "by (simp add: a_zero_def am_d_def)"], ["proof (state)\nthis:\n  0 \\<cdot> x = d x \\<cdot> ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "also"], ["proof (state)\nthis:\n  0 \\<cdot> x = d x \\<cdot> ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "have \"... = d x \\<cdot> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> ad x \\<cdot> x = d x \\<cdot> 0", "by (metis am1 mult_assoc a_zero_def)"], ["proof (state)\nthis:\n  d x \\<cdot> ad x \\<cdot> x = d x \\<cdot> 0\n\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  d x \\<cdot> ad x \\<cdot> x = d x \\<cdot> 0\n\ngoal (1 subgoal):\n 1. 0 \\<cdot> x = 0", "by (metis am1 am2 am3 mult_assoc a_zero_def)"], ["proof (state)\nthis:\n  0 \\<cdot> x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_mult_idem [simp]: \"ad x \\<cdot> ad x = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "have \"ad x \\<cdot> ad x = ad (1 \\<cdot> x) \\<cdot> 1 \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad x = ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad x = ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "have \"... = ad (1 \\<cdot> x) \\<cdot> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x =\n    ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a)", "using am5"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> ?y) \\<cdot> ?x \\<cdot> ad ?y =\n  ad (?x \\<cdot> ?y) \\<cdot> ?x\n\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x =\n    ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a)", "by blast"], ["proof (state)\nthis:\n  ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a) \\<cdot> ad x =\n  ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> ad x = ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad x = ad ((1::'a) \\<cdot> x) \\<cdot> (1::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad x = ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_add_idem [simp]: \"ad x \\<oplus> ad x = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x = ad x", "by (metis am1 am3 am4 mult_1_right am_add_op_def)"], ["", "text \\<open>The next three axioms suffice to show that the domain elements form a Boolean algebra.\\<close>"], ["", "lemma a_add_comm: \"x \\<oplus> y = y \\<oplus> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> y = y \\<oplus> x", "using am2 am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. x \\<oplus> y = y \\<oplus> x", "by auto"], ["", "lemma a_add_assoc: \"x \\<oplus> (y \\<oplus> z) = (x \\<oplus> y) \\<oplus> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> (y \\<oplus> z) = x \\<oplus> y \\<oplus> z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<oplus> (y \\<oplus> z) = x \\<oplus> y \\<oplus> z", "have \"\\<And>x y. ad x \\<cdot> ad (x \\<cdot> y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. ad x \\<cdot> ad (x \\<cdot> y) = ad x", "by (metis a_mult_idem am2 am4 mult_assoc)"], ["proof (state)\nthis:\n  ad ?x \\<cdot> ad (?x \\<cdot> ?y) = ad ?x\n\ngoal (1 subgoal):\n 1. x \\<oplus> (y \\<oplus> z) = x \\<oplus> y \\<oplus> z", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ad (?x \\<cdot> ?y) = ad ?x\n\ngoal (1 subgoal):\n 1. x \\<oplus> (y \\<oplus> z) = x \\<oplus> y \\<oplus> z", "by (metis a_add_comm am_add_op_def local.am3 local.am4 mult_assoc)"], ["proof (state)\nthis:\n  x \\<oplus> (y \\<oplus> z) = x \\<oplus> y \\<oplus> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma huntington [simp]: \"ad (x \\<oplus> y) \\<oplus> ad (x \\<oplus> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<oplus> y) \\<oplus> ad (x \\<oplus> ad y) = ad x", "using a_add_idem am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad (x \\<oplus> y) \\<oplus> ad (x \\<oplus> ad y) = ad x", "by auto"], ["", "lemma a_absorb1 [simp]: \"(ad x \\<oplus> ad y) \\<cdot> ad x = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> ad x = ad x", "by (metis a_add_idem a_mult_idem am4 mult_assoc am_add_op_def)"], ["", "lemma a_absorb2 [simp]: \"ad x \\<oplus> ad x \\<cdot> ad y = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x \\<cdot> ad y = ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x \\<cdot> ad y = ad x", "have \"ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)", "by (metis (no_types) a_mult_idem local.am4 local.mult.semigroup_axioms semigroup.assoc)"], ["proof (state)\nthis:\n  ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x \\<cdot> ad y = ad x", "then"], ["proof (chain)\npicking this:\n  ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x \\<cdot> ad y = ad x", "using a_add_idem am_add_op_def"], ["proof (prove)\nusing this:\n  ad (ad x) \\<cdot> ad (ad x \\<cdot> ad y) = ad (ad x)\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad x \\<cdot> ad y = ad x", "by auto"], ["proof (state)\nthis:\n  ad x \\<oplus> ad x \\<cdot> ad y = ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The distributivity laws remain to be proved; our proofs follow those of Maddux~\\cite{Maddux}.\\<close>"], ["", "lemma prod_split [simp]: \"ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> d y = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> d y = ad x", "using a_add_idem am_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> d y = ad x", "by auto"], ["", "lemma sum_split [simp]: \"(ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> d y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> d y) = ad x", "using a_add_idem am_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> d y) = ad x", "by fastforce"], ["", "lemma a_comp_simp [simp]: \"(ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "have f1: \"(ad x \\<oplus> ad y) \\<cdot> d x = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad (ad x) \\<cdot> ad (ad (ad y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x =\n    ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad (ad x) \\<cdot>\n    ad (ad (ad y))", "by (simp add: am_add_op_def am_d_def)"], ["proof (state)\nthis:\n  (ad x \\<oplus> ad y) \\<cdot> d x =\n  ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad (ad x) \\<cdot> ad (ad (ad y))\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "have f2: \"ad y = ad (ad (ad y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y = ad (ad (ad y))", "using a_add_idem am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad y = ad (ad (ad y))", "by auto"], ["proof (state)\nthis:\n  ad y = ad (ad (ad y))\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "have \"ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y", "by (metis (no_types) a_absorb1 a_add_comm am_add_op_def)"], ["proof (state)\nthis:\n  ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "then"], ["proof (chain)\npicking this:\n  ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y", "show ?thesis"], ["proof (prove)\nusing this:\n  ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "using f2 f1"], ["proof (prove)\nusing this:\n  ad y = ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad y\n  ad y = ad (ad (ad y))\n  (ad x \\<oplus> ad y) \\<cdot> d x =\n  ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad (ad x) \\<cdot> ad (ad (ad y))\n\ngoal (1 subgoal):\n 1. (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x", "by (simp add: am_d_def local.am2 local.mult.semigroup_axioms semigroup.assoc)"], ["proof (state)\nthis:\n  (ad x \\<oplus> ad y) \\<cdot> d x = ad y \\<cdot> d x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_distrib1: \"ad x \\<cdot> (ad y \\<oplus> ad z) = ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have f1: \"\\<And>a. ad (ad (ad (a::'a)) \\<cdot> ad (ad a)) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a) \\<cdot> ad (ad a)) = ad a", "using a_add_idem am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a) \\<cdot> ad (ad a)) = ad a", "by auto"], ["proof (state)\nthis:\n  ad (ad (ad ?a) \\<cdot> ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have f2: \"\\<And>a aa. ad ((a::'a) \\<cdot> aa) \\<cdot> (a \\<cdot> ad aa) = ad (a \\<cdot> aa) \\<cdot> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       ad (a \\<cdot> aa) \\<cdot> (a \\<cdot> ad aa) =\n       ad (a \\<cdot> aa) \\<cdot> a", "using local.am5 mult_assoc"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> ?y) \\<cdot> ?x \\<cdot> ad ?y =\n  ad (?x \\<cdot> ?y) \\<cdot> ?x\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       ad (a \\<cdot> aa) \\<cdot> (a \\<cdot> ad aa) =\n       ad (a \\<cdot> aa) \\<cdot> a", "by auto"], ["proof (state)\nthis:\n  ad (?a \\<cdot> ?aa) \\<cdot> (?a \\<cdot> ad ?aa) =\n  ad (?a \\<cdot> ?aa) \\<cdot> ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have f3: \"\\<And>a. ad (ad (ad (a::'a))) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "using f1"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a) \\<cdot> ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "by simp"], ["proof (state)\nthis:\n  ad (ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have \"\\<And>a. ad (a::'a) \\<cdot> ad a = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad a \\<cdot> ad a = ad a", "by simp"], ["proof (state)\nthis:\n  ad ?a \\<cdot> ad ?a = ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "then"], ["proof (chain)\npicking this:\n  ad ?a \\<cdot> ad ?a = ad ?a", "have \"\\<And>a aa. ad (ad (ad (a::'a) \\<cdot> ad aa)) = ad aa \\<cdot> ad a\""], ["proof (prove)\nusing this:\n  ad ?a \\<cdot> ad ?a = ad ?a\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> ad aa)) = ad aa \\<cdot> ad a", "using f3 f2"], ["proof (prove)\nusing this:\n  ad ?a \\<cdot> ad ?a = ad ?a\n  ad (ad (ad ?a)) = ad ?a\n  ad (?a \\<cdot> ?aa) \\<cdot> (?a \\<cdot> ad ?aa) =\n  ad (?a \\<cdot> ?aa) \\<cdot> ?a\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> ad aa)) = ad aa \\<cdot> ad a", "by (metis (no_types) local.am2 local.am4 mult_assoc)"], ["proof (state)\nthis:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?aa \\<cdot> ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?aa \\<cdot> ad ?a", "have  \"ad x \\<cdot> (ad y \\<oplus> ad z) = ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\""], ["proof (prove)\nusing this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?aa \\<cdot> ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y", "using am_add_op_def am_d_def local.am2 local.am4"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?aa \\<cdot> ad ?a\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n  d ?x = ad (ad ?x)\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n  ad (?x \\<cdot> ?y) \\<cdot> ad (?x \\<cdot> ad ?y) = ad ?x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y", "by presburger"], ["proof (state)\nthis:\n  ad x \\<cdot> (ad y \\<oplus> ad z) =\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> (ad y \\<oplus> ad z) =\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have \"... = ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> ad y \\<oplus>\n  ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have \"... = ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<oplus>\n    ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> (ad y \\<oplus> ad z) \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have \"... = ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus> ad x \\<cdot> ad z \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus>\n    ad x \\<cdot> ad z \\<cdot> d y", "by (metis a_add_idem a_mult_idem local.am4 mult_assoc am_add_op_def)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus>\n  ad x \\<cdot> ad z \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus>\n  ad x \\<cdot> ad z \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "have \"... = ad x \\<cdot> ad y \\<oplus> (ad x \\<cdot> ad z \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus>\n    ad x \\<cdot> ad z \\<cdot> d y =\n    ad x \\<cdot> ad y \\<oplus>\n    (ad x \\<cdot> ad z \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y)", "by (metis am2 mult_assoc a_add_assoc)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad y \\<cdot> ad z \\<oplus>\n  ad x \\<cdot> ad z \\<cdot> d y =\n  ad x \\<cdot> ad y \\<oplus>\n  (ad x \\<cdot> ad z \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> (ad y \\<oplus> ad z) =\n  ad x \\<cdot> ad y \\<oplus>\n  (ad x \\<cdot> ad z \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad x \\<cdot> (ad y \\<oplus> ad z) =\n  ad x \\<cdot> ad y \\<oplus>\n  (ad x \\<cdot> ad z \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z \\<cdot> d y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> (ad y \\<oplus> ad z) =\n    ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z", "by (metis a_add_idem a_mult_idem am4 am_d_def am_add_op_def)"], ["proof (state)\nthis:\n  ad x \\<cdot> (ad y \\<oplus> ad z) =\n  ad x \\<cdot> ad y \\<oplus> ad x \\<cdot> ad z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_distrib2: \"ad x \\<oplus> ad y \\<cdot> ad z = (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "have f1: \"\\<And>a aa ab. ad (ad (ad (a::'a) \\<cdot> ad aa) \\<cdot> ad (ad a \\<cdot> ad ab)) = ad a \\<cdot> ad (ad (ad aa) \\<cdot> ad (ad ab))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab.\n       ad (ad (ad a \\<cdot> ad aa) \\<cdot> ad (ad a \\<cdot> ad ab)) =\n       ad a \\<cdot> ad (ad (ad aa) \\<cdot> ad (ad ab))", "using a_distrib1 am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> (ad ?y \\<oplus> ad ?z) =\n  ad ?x \\<cdot> ad ?y \\<oplus> ad ?x \\<cdot> ad ?z\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. \\<And>a aa ab.\n       ad (ad (ad a \\<cdot> ad aa) \\<cdot> ad (ad a \\<cdot> ad ab)) =\n       ad a \\<cdot> ad (ad (ad aa) \\<cdot> ad (ad ab))", "by auto"], ["proof (state)\nthis:\n  ad (ad (ad ?a \\<cdot> ad ?aa) \\<cdot> ad (ad ?a \\<cdot> ad ?ab)) =\n  ad ?a \\<cdot> ad (ad (ad ?aa) \\<cdot> ad (ad ?ab))\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "have \"\\<And>a. ad (ad (ad (a::'a))) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "by (metis a_absorb2 a_mult_idem am_add_op_def)"], ["proof (state)\nthis:\n  ad (ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad ?a)) = ad ?a", "have \"ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot> ad (ad (ad x) \\<cdot> ad (ad z)) = ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))\""], ["proof (prove)\nusing this:\n  ad (ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot>\n    ad (ad (ad x) \\<cdot> ad (ad z)) =\n    ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))", "using f1"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a)) = ad ?a\n  ad (ad (ad ?a \\<cdot> ad ?aa) \\<cdot> ad (ad ?a \\<cdot> ad ?ab)) =\n  ad ?a \\<cdot> ad (ad (ad ?aa) \\<cdot> ad (ad ?ab))\n\ngoal (1 subgoal):\n 1. ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot>\n    ad (ad (ad x) \\<cdot> ad (ad z)) =\n    ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))", "by (metis (full_types))"], ["proof (state)\nthis:\n  ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot>\n  ad (ad (ad x) \\<cdot> ad (ad z)) =\n  ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot>\n  ad (ad (ad x) \\<cdot> ad (ad z)) =\n  ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad (ad x) \\<cdot> ad (ad y)) \\<cdot>\n  ad (ad (ad x) \\<cdot> ad (ad z)) =\n  ad (ad (ad x) \\<cdot> ad (ad y \\<cdot> ad z))\n\ngoal (1 subgoal):\n 1. ad x \\<oplus> ad y \\<cdot> ad z =\n    (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)", "by (simp add: am_add_op_def)"], ["proof (state)\nthis:\n  ad x \\<oplus> ad y \\<cdot> ad z =\n  (ad x \\<oplus> ad y) \\<cdot> (ad x \\<oplus> ad z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aa_loc [simp]: \"d (x \\<cdot> d y) = d (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "have f1: \"x \\<cdot> d y \\<cdot> y = x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> d y \\<cdot> y = x \\<cdot> y", "by (metis am3 mult_assoc am_d_def)"], ["proof (state)\nthis:\n  x \\<cdot> d y \\<cdot> y = x \\<cdot> y\n\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "have f2: \"\\<And>w z. ad (w \\<cdot> z) \\<cdot> (w \\<cdot> ad z) = ad (w \\<cdot> z) \\<cdot> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w z.\n       ad (w \\<cdot> z) \\<cdot> (w \\<cdot> ad z) =\n       ad (w \\<cdot> z) \\<cdot> w", "by (metis am5 mult_assoc)"], ["proof (state)\nthis:\n  ad (?w \\<cdot> ?z) \\<cdot> (?w \\<cdot> ad ?z) =\n  ad (?w \\<cdot> ?z) \\<cdot> ?w\n\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "hence f3: \"\\<And>z. ad (x \\<cdot> y) \\<cdot> (x \\<cdot> z) = ad (x \\<cdot> y) \\<cdot> (x \\<cdot> (ad (ad (ad y) \\<cdot> y) \\<cdot> z))\""], ["proof (prove)\nusing this:\n  ad (?w \\<cdot> ?z) \\<cdot> (?w \\<cdot> ad ?z) =\n  ad (?w \\<cdot> ?z) \\<cdot> ?w\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       ad (x \\<cdot> y) \\<cdot> (x \\<cdot> z) =\n       ad (x \\<cdot> y) \\<cdot>\n       (x \\<cdot> (ad (ad (ad y) \\<cdot> y) \\<cdot> z))", "using f1"], ["proof (prove)\nusing this:\n  ad (?w \\<cdot> ?z) \\<cdot> (?w \\<cdot> ad ?z) =\n  ad (?w \\<cdot> ?z) \\<cdot> ?w\n  x \\<cdot> d y \\<cdot> y = x \\<cdot> y\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       ad (x \\<cdot> y) \\<cdot> (x \\<cdot> z) =\n       ad (x \\<cdot> y) \\<cdot>\n       (x \\<cdot> (ad (ad (ad y) \\<cdot> y) \\<cdot> z))", "by (metis (no_types) mult_assoc am_d_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> (x \\<cdot> ?z) =\n  ad (x \\<cdot> y) \\<cdot> (x \\<cdot> (ad (ad (ad y) \\<cdot> y) \\<cdot> ?z))\n\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "have \"ad (x \\<cdot> ad (ad y)) \\<cdot> (x \\<cdot> y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> ad (ad y)) \\<cdot> (x \\<cdot> y) = 0", "using f1"], ["proof (prove)\nusing this:\n  x \\<cdot> d y \\<cdot> y = x \\<cdot> y\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> ad (ad y)) \\<cdot> (x \\<cdot> y) = 0", "by (metis am1 mult_assoc n_annil a_zero_def am_d_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> ad (ad y)) \\<cdot> (x \\<cdot> y) = 0\n\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad (x \\<cdot> ad (ad y)) \\<cdot> (x \\<cdot> y) = 0\n\ngoal (1 subgoal):\n 1. d (x \\<cdot> d y) = d (x \\<cdot> y)", "by (metis a_d_zero am_d_def f3 local.am1 local.am2 local.am3 local.am4)"], ["proof (state)\nthis:\n  d (x \\<cdot> d y) = d (x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_loc [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "have \"\\<And>a. ad (ad (ad (a::'a))) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "using am_add_op_def am_d_def prod_split"], ["proof (prove)\nusing this:\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n  d ?x = ad (ad ?x)\n  ad ?x \\<cdot> ad ?y \\<oplus> ad ?x \\<cdot> d ?y = ad ?x\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "by auto"], ["proof (state)\nthis:\n  ad (ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad ?a)) = ad ?a", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a)) = ad ?a\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "by (metis (full_types) aa_loc am_d_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y) = ad (x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_a_export [simp]: \"d (ad x \\<cdot> y) = ad x \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "have f1: \"\\<And>a aa. ad ((a::'a) \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (a \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)", "using a_loc am_d_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> d ?y) = ad (?x \\<cdot> ?y)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (a \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)", "by auto"], ["proof (state)\nthis:\n  ad (?a \\<cdot> ad (ad ?aa)) = ad (?a \\<cdot> ?aa)\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "have \"\\<And>a. ad (ad (a::'a) \\<cdot> a) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad a \\<cdot> a) = (1::'a)", "using a_d_one am_add_op_def am_d_def"], ["proof (prove)\nusing this:\n  d ?x \\<oplus> ad ?x = (1::'a)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad a \\<cdot> a) = (1::'a)", "by auto"], ["proof (state)\nthis:\n  ad (ad ?a \\<cdot> ?a) = (1::'a)\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "then"], ["proof (chain)\npicking this:\n  ad (ad ?a \\<cdot> ?a) = (1::'a)", "have \"\\<And>a aa. ad (ad (ad (a::'a) \\<cdot> ad aa)) = ad a \\<cdot> ad aa\""], ["proof (prove)\nusing this:\n  ad (ad ?a \\<cdot> ?a) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> ad aa)) = ad a \\<cdot> ad aa", "using f1"], ["proof (prove)\nusing this:\n  ad (ad ?a \\<cdot> ?a) = (1::'a)\n  ad (?a \\<cdot> ad (ad ?aa)) = ad (?a \\<cdot> ?aa)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> ad aa)) = ad a \\<cdot> ad aa", "by (metis a_distrib2 am_add_op_def local.mult_1_left)"], ["proof (state)\nthis:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?a \\<cdot> ad ?aa\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?a \\<cdot> ad ?aa", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?a \\<cdot> ad ?aa\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "using f1"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a \\<cdot> ad ?aa)) = ad ?a \\<cdot> ad ?aa\n  ad (?a \\<cdot> ad (ad ?aa)) = ad (?a \\<cdot> ?aa)\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> y) = ad x \\<cdot> d y", "by (metis (no_types) am_d_def)"], ["proof (state)\nthis:\n  d (ad x \\<cdot> y) = ad x \\<cdot> d y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Every antidomain monoid is a domain monoid.\\<close>"], ["", "sublocale dm: domain_monoid am_d \"(\\<cdot>)\" 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_monoid d (\\<cdot>) (1::'a)", "apply (unfold_locales)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. d x \\<cdot> x = x\n 2. \\<And>x y. d (x \\<cdot> d y) = d (x \\<cdot> y)\n 3. \\<And>x y. d (d x \\<cdot> y) = d x \\<cdot> d y\n 4. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x", "apply (simp add: am_d_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y. d (x \\<cdot> d y) = d (x \\<cdot> y)\n 2. \\<And>x y. d (d x \\<cdot> y) = d x \\<cdot> d y\n 3. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. d (d x \\<cdot> y) = d x \\<cdot> d y\n 2. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x", "using am_d_def d_a_export"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  d (ad ?x \\<cdot> ?y) = ad ?x \\<cdot> d ?y\n\ngoal (2 subgoals):\n 1. \\<And>x y. d (d x \\<cdot> y) = d x \\<cdot> d y\n 2. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x", "by (simp add: am_d_def local.am2)"], ["", "lemma ds_ord_iso1: \"x \\<sqsubseteq> y \\<Longrightarrow> z \\<cdot> x \\<sqsubseteq> z \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow>\n    z \\<cdot> x \\<sqsubseteq> z \\<cdot> y", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow>\n    z \\<cdot> x \\<sqsubseteq> z \\<cdot> y", "oops"], ["", "lemma a_very_costrict: \"ad x = 1 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x = (1::'a)) = (x = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = 0\n 2. x = 0 \\<Longrightarrow> ad x = (1::'a)", "assume a: \"ad x = 1\""], ["proof (state)\nthis:\n  ad x = (1::'a)\n\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = 0\n 2. x = 0 \\<Longrightarrow> ad x = (1::'a)", "hence \"0 = ad x \\<cdot> x\""], ["proof (prove)\nusing this:\n  ad x = (1::'a)\n\ngoal (1 subgoal):\n 1. 0 = ad x \\<cdot> x", "using a_zero_def"], ["proof (prove)\nusing this:\n  ad x = (1::'a)\n  0 = ad (1::'a)\n\ngoal (1 subgoal):\n 1. 0 = ad x \\<cdot> x", "by force"], ["proof (state)\nthis:\n  0 = ad x \\<cdot> x\n\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = 0\n 2. x = 0 \\<Longrightarrow> ad x = (1::'a)", "thus \"x = 0\""], ["proof (prove)\nusing this:\n  0 = ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. x = 0", "by (simp add: a)"], ["proof (state)\nthis:\n  x = 0\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow> ad x = (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow> ad x = (1::'a)", "assume \"x = 0\""], ["proof (state)\nthis:\n  x = 0\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow> ad x = (1::'a)", "thus \"ad x = 1\""], ["proof (prove)\nusing this:\n  x = 0\n\ngoal (1 subgoal):\n 1. ad x = (1::'a)", "using a_zero_def am_d_def dm.dom_one"], ["proof (prove)\nusing this:\n  x = 0\n  0 = ad (1::'a)\n  d ?x = ad (ad ?x)\n  d (1::'a) = (1::'a)\n\ngoal (1 subgoal):\n 1. ad x = (1::'a)", "by auto"], ["proof (state)\nthis:\n  ad x = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_weak_loc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "have \"x \\<cdot> y = 0 \\<longleftrightarrow> ad (x \\<cdot> y) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (ad (x \\<cdot> y) = (1::'a))", "by (simp add: a_very_costrict)"], ["proof (state)\nthis:\n  (x \\<cdot> y = 0) = (ad (x \\<cdot> y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "also"], ["proof (state)\nthis:\n  (x \\<cdot> y = 0) = (ad (x \\<cdot> y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "have \"... \\<longleftrightarrow> ad (x \\<cdot> d y) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad (x \\<cdot> y) = (1::'a)) = (ad (x \\<cdot> d y) = (1::'a))", "by simp"], ["proof (state)\nthis:\n  (ad (x \\<cdot> y) = (1::'a)) = (ad (x \\<cdot> d y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "finally"], ["proof (chain)\npicking this:\n  (x \\<cdot> y = 0) = (ad (x \\<cdot> d y) = (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  (x \\<cdot> y = 0) = (ad (x \\<cdot> d y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "using a_very_costrict"], ["proof (prove)\nusing this:\n  (x \\<cdot> y = 0) = (ad (x \\<cdot> d y) = (1::'a))\n  (ad ?x = (1::'a)) = (?x = 0)\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)", "by blast"], ["proof (state)\nthis:\n  (x \\<cdot> y = 0) = (x \\<cdot> d y = 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_closure [simp]: \"d (ad x) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "using a_add_idem am_add_op_def am_d_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "by auto"], ["", "lemma a_d_mult_closure [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "by simp"], ["", "lemma kat_3': \"d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow>\n    d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z", "by (metis dm.dom_one local.am5 local.mult_1_left a_zero_def am_d_def)"], ["", "lemma s4 [simp]: \"ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y", "have \"\\<And>a aa. ad (a::'a) \\<cdot> ad (ad aa) = ad (ad (ad a \\<cdot> aa))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad a \\<cdot> ad (ad aa) = ad (ad (ad a \\<cdot> aa))", "using am_d_def d_a_export"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  d (ad ?x \\<cdot> ?y) = ad ?x \\<cdot> d ?y\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad a \\<cdot> ad (ad aa) = ad (ad (ad a \\<cdot> aa))", "by presburger"], ["proof (state)\nthis:\n  ad ?a1 \\<cdot> ad (ad ?aa1) = ad (ad (ad ?a1 \\<cdot> ?aa1))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y", "then"], ["proof (chain)\npicking this:\n  ad ?a1 \\<cdot> ad (ad ?aa1) = ad (ad (ad ?a1 \\<cdot> ?aa1))", "have \"\\<And>a aa. ad (ad (a::'a)) \\<cdot> ad aa = ad (ad (ad aa \\<cdot> a))\""], ["proof (prove)\nusing this:\n  ad ?a1 \\<cdot> ad (ad ?aa1) = ad (ad (ad ?a1 \\<cdot> ?aa1))\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad a) \\<cdot> ad aa = ad (ad (ad aa \\<cdot> a))", "using local.am2"], ["proof (prove)\nusing this:\n  ad ?a1 \\<cdot> ad (ad ?aa1) = ad (ad (ad ?a1 \\<cdot> ?aa1))\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad a) \\<cdot> ad aa = ad (ad (ad aa \\<cdot> a))", "by presburger"], ["proof (state)\nthis:\n  ad (ad ?a1) \\<cdot> ad ?aa1 = ad (ad (ad ?aa1 \\<cdot> ?a1))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y", "then"], ["proof (chain)\npicking this:\n  ad (ad ?a1) \\<cdot> ad ?aa1 = ad (ad (ad ?aa1 \\<cdot> ?a1))", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad ?a1) \\<cdot> ad ?aa1 = ad (ad (ad ?aa1 \\<cdot> ?a1))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y", "by (metis a_comp_simp a_d_mult_closure am_add_op_def am_d_def local.am2)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad (ad x \\<cdot> y) = ad x \\<cdot> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class antidomain_monoid = antidomain_left_monoid +\n  assumes am6 [simp]: \"x \\<cdot> ad 1 = ad 1\"\n\nbegin"], ["", "lemma kat_3_equiv: \"d x \\<cdot> y \\<cdot> ad z = 0 \\<longleftrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> y \\<cdot> ad z = 0) =\n    (d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow>\n    d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\n 2. d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = 0", "apply (metis kat_3')"], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = 0", "by (simp add: mult_assoc a_zero_def am_d_def)"], ["", "no_notation a_zero (\"0\")"], ["", "no_notation am_d (\"d\")"], ["", "end"], ["", "subsection \\<open>Antidomain Near-Semirings\\<close>"], ["", "text \\<open>We define antidomain near-semirings. We do not consider units separately. The axioms are taken from~\\cite{DesharnaisStruthAMAST}.\\<close>"], ["", "notation zero_class.zero (\"0\")"], ["", "class antidomain_near_semiring = ab_near_semiring_one_zerol + antidomain_op + plus_ord +\n  assumes ans1 [simp]: \"ad x \\<cdot> x = 0\"\n  and ans2 [simp]: \"ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) = ad (x \\<cdot> ad (ad y))\"\n  and ans3 [simp]: \"ad (ad x) + ad x = 1\"\n  and ans4 [simp]: \"ad (x + y) = ad x \\<cdot> ad y\"\n\nbegin"], ["", "definition ans_d :: \"'a \\<Rightarrow> 'a\" (\"d\") where\n   \"d x = ad (ad x)\""], ["", "lemma a_a_one [simp]: \"d 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "have \"d 1 = d 1 + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (1::'a) = d (1::'a) + (0::'a)", "by simp"], ["proof (state)\nthis:\n  d (1::'a) = d (1::'a) + (0::'a)\n\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  d (1::'a) = d (1::'a) + (0::'a)\n\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "have \"... = d 1 + ad 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (1::'a) + (0::'a) = d (1::'a) + ad (1::'a)", "by (metis ans1 mult_1_right)"], ["proof (state)\nthis:\n  d (1::'a) + (0::'a) = d (1::'a) + ad (1::'a)\n\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "finally"], ["proof (chain)\npicking this:\n  d (1::'a) = d (1::'a) + ad (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  d (1::'a) = d (1::'a) + ad (1::'a)\n\ngoal (1 subgoal):\n 1. d (1::'a) = (1::'a)", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  d (1::'a) = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_very_costrict': \"ad x = 1 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x = (1::'a)) = (x = (0::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "assume \"ad x = 1\""], ["proof (state)\nthis:\n  ad x = (1::'a)\n\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "hence \"x = ad x \\<cdot> x\""], ["proof (prove)\nusing this:\n  ad x = (1::'a)\n\ngoal (1 subgoal):\n 1. x = ad x \\<cdot> x", "by simp"], ["proof (state)\nthis:\n  x = ad x \\<cdot> x\n\ngoal (2 subgoals):\n 1. ad x = (1::'a) \\<Longrightarrow> x = (0::'a)\n 2. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "thus \"x = 0\""], ["proof (prove)\nusing this:\n  x = ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. x = (0::'a)", "by auto"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "assume \"x = 0\""], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "hence \"ad x = ad 0\""], ["proof (prove)\nusing this:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x = ad (0::'a)", "by blast"], ["proof (state)\nthis:\n  ad x = ad (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a) \\<Longrightarrow> ad x = (1::'a)", "thus \"ad x = 1\""], ["proof (prove)\nusing this:\n  ad x = ad (0::'a)\n\ngoal (1 subgoal):\n 1. ad x = (1::'a)", "by (metis a_a_one ans_d_def local.ans1 local.mult_1_right)"], ["proof (state)\nthis:\n  ad x = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma one_idem [simp]: \"1 + 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "have \"1 + 1 = d 1 + d 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = d (1::'a) + d (1::'a)", "by simp"], ["proof (state)\nthis:\n  (1::'a) + (1::'a) = d (1::'a) + d (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  (1::'a) + (1::'a) = d (1::'a) + d (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "have \"... = ad (ad 1 \\<cdot> 1) + ad (ad 1 \\<cdot> d 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (1::'a) + d (1::'a) =\n    ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a))", "using a_a_one ans_d_def"], ["proof (prove)\nusing this:\n  d (1::'a) = (1::'a)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d (1::'a) + d (1::'a) =\n    ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a))", "by auto"], ["proof (state)\nthis:\n  d (1::'a) + d (1::'a) =\n  ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  d (1::'a) + d (1::'a) =\n  ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "have \"... = ad (ad 1 \\<cdot> d 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a)) =\n    ad (ad (1::'a) \\<cdot> d (1::'a))", "using ans_d_def local.ans2"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  ad (?x \\<cdot> ?y) + ad (?x \\<cdot> ad (ad ?y)) =\n  ad (?x \\<cdot> ad (ad ?y))\n\ngoal (1 subgoal):\n 1. ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a)) =\n    ad (ad (1::'a) \\<cdot> d (1::'a))", "by presburger"], ["proof (state)\nthis:\n  ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a)) =\n  ad (ad (1::'a) \\<cdot> d (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  ad (ad (1::'a) \\<cdot> (1::'a)) + ad (ad (1::'a) \\<cdot> d (1::'a)) =\n  ad (ad (1::'a) \\<cdot> d (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "have \"... = ad (ad 1 \\<cdot> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad (1::'a) \\<cdot> d (1::'a)) = ad (ad (1::'a) \\<cdot> (1::'a))", "by simp"], ["proof (state)\nthis:\n  ad (ad (1::'a) \\<cdot> d (1::'a)) = ad (ad (1::'a) \\<cdot> (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "also"], ["proof (state)\nthis:\n  ad (ad (1::'a) \\<cdot> d (1::'a)) = ad (ad (1::'a) \\<cdot> (1::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "have \"... = d 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad (1::'a) \\<cdot> (1::'a)) = d (1::'a)", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  ad (ad (1::'a) \\<cdot> (1::'a)) = d (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "finally"], ["proof (chain)\npicking this:\n  (1::'a) + (1::'a) = d (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (1::'a) + (1::'a) = d (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "by simp"], ["proof (state)\nthis:\n  (1::'a) + (1::'a) = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Every antidomain near-semiring is automatically a dioid, and therefore ordered.\\<close>"], ["", "subclass near_dioid_one_zerol"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.near_dioid_one_zerol (+) (\\<cdot>) (1::'a) (0::'a) (\\<le>) (<)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "show \"\\<And>x. x + x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "have \"x + x = 1 \\<cdot> x + 1 \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + x = (1::'a) \\<cdot> x + (1::'a) \\<cdot> x", "by simp"], ["proof (state)\nthis:\n  x + x = (1::'a) \\<cdot> x + (1::'a) \\<cdot> x\n\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "also"], ["proof (state)\nthis:\n  x + x = (1::'a) \\<cdot> x + (1::'a) \\<cdot> x\n\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "have \"... = (1 + 1) \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot> x + (1::'a) \\<cdot> x = ((1::'a) + (1::'a)) \\<cdot> x", "using distrib_right'"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot> x + (1::'a) \\<cdot> x = ((1::'a) + (1::'a)) \\<cdot> x", "by presburger"], ["proof (state)\nthis:\n  (1::'a) \\<cdot> x + (1::'a) \\<cdot> x = ((1::'a) + (1::'a)) \\<cdot> x\n\ngoal (1 subgoal):\n 1. \\<And>x. x + x = x", "finally"], ["proof (chain)\npicking this:\n  x + x = ((1::'a) + (1::'a)) \\<cdot> x", "show \"x + x = x\""], ["proof (prove)\nusing this:\n  x + x = ((1::'a) + (1::'a)) \\<cdot> x\n\ngoal (1 subgoal):\n 1. x + x = x", "by simp"], ["proof (state)\nthis:\n  x + x = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x + ?x = ?x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d1_a [simp]: \"d x \\<cdot> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"x = (d x + ad x) \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (d x + ad x) \\<cdot> x", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  x = (d x + ad x) \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "also"], ["proof (state)\nthis:\n  x = (d x + ad x) \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"... = d x \\<cdot> x + ad x \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x", "using distrib_right'"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x", "by blast"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "also"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"... = d x \\<cdot> x + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x + ad x \\<cdot> x = d x \\<cdot> x + (0::'a)", "by simp"], ["proof (state)\nthis:\n  d x \\<cdot> x + ad x \\<cdot> x = d x \\<cdot> x + (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "finally"], ["proof (chain)\npicking this:\n  x = d x \\<cdot> x + (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = d x \\<cdot> x + (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "by auto"], ["proof (state)\nthis:\n  d x \\<cdot> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_comm: \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "using add_commute ans4"], ["proof (prove)\nusing this:\n  ?a + ?b = ?b + ?a\n  ad (?x + ?y) = ad ?x \\<cdot> ad ?y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "by fastforce"], ["", "lemma a_subid: \"ad x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<le> (1::'a)", "using local.ans3 local.join.sup_ge2"], ["proof (prove)\nusing this:\n  ad (ad ?x) + ad ?x = (1::'a)\n  ?y \\<le> ?x + ?y\n\ngoal (1 subgoal):\n 1. ad x \\<le> (1::'a)", "by fastforce"], ["", "lemma a_subid_aux1: \"ad x \\<cdot> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> y", "using a_subid mult_isor"], ["proof (prove)\nusing this:\n  ad ?x \\<le> (1::'a)\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> y", "by fastforce"], ["", "lemma a_subdist: \"ad (x + y) \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x", "by (metis a_subid_aux1 ans4 add_comm)"], ["", "lemma a_antitone: \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ad y \\<le> ad x", "using a_subdist local.order_prop"], ["proof (prove)\nusing this:\n  ad (?x + ?y) \\<le> ad ?x\n  (?x \\<le> ?y) = (\\<exists>z. ?x + z = ?y)\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ad y \\<le> ad x", "by auto"], ["", "lemma a_mul_d [simp]: \"ad x \\<cdot> d x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "by (metis a_comm ans_d_def local.ans1)"], ["", "lemma a_gla1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "assume \"ad x \\<cdot> y = 0\""], ["proof (state)\nthis:\n  ad x \\<cdot> y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "hence a: \"ad x \\<cdot> d y = 0\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y = (0::'a)", "by (metis a_subid a_very_costrict' ans_d_def local.ans2 local.join.sup.order_iff)"], ["proof (state)\nthis:\n  ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"ad x = (d y + ad y ) \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x = (d y + ad y) \\<cdot> ad x", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  ad x = (d y + ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  ad x = (d y + ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = d y \\<cdot> ad x + ad y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d y + ad y) \\<cdot> ad x = d y \\<cdot> ad x + ad y \\<cdot> ad x", "using distrib_right'"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (d y + ad y) \\<cdot> ad x = d y \\<cdot> ad x + ad y \\<cdot> ad x", "by blast"], ["proof (state)\nthis:\n  (d y + ad y) \\<cdot> ad x = d y \\<cdot> ad x + ad y \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  (d y + ad y) \\<cdot> ad x = d y \\<cdot> ad x + ad y \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = ad x \\<cdot> d y + ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d y \\<cdot> ad x + ad y \\<cdot> ad x =\n    ad x \\<cdot> d y + ad x \\<cdot> ad y", "using a_comm ans_d_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d y \\<cdot> ad x + ad y \\<cdot> ad x =\n    ad x \\<cdot> d y + ad x \\<cdot> ad y", "by auto"], ["proof (state)\nthis:\n  d y \\<cdot> ad x + ad y \\<cdot> ad x =\n  ad x \\<cdot> d y + ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  d y \\<cdot> ad x + ad y \\<cdot> ad x =\n  ad x \\<cdot> d y + ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y + ad x \\<cdot> ad y = ad x \\<cdot> ad y", "by (simp add: a)"], ["proof (state)\nthis:\n  ad x \\<cdot> d y + ad x \\<cdot> ad y = ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "finally"], ["proof (chain)\npicking this:\n  ad x = ad x \\<cdot> ad y", "show \"ad x \\<le> ad y\""], ["proof (prove)\nusing this:\n  ad x = ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad y", "by (metis a_subid_aux1)"], ["proof (state)\nthis:\n  ad x \\<le> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_gla2: \"ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = (0::'a)", "assume \"ad x \\<le> ad y\""], ["proof (state)\nthis:\n  ad x \\<le> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = (0::'a)", "hence \"ad x \\<cdot> y \\<le> ad y \\<cdot> y\""], ["proof (prove)\nusing this:\n  ad x \\<le> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> ad y \\<cdot> y", "using mult_isor"], ["proof (prove)\nusing this:\n  ad x \\<le> ad y\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> ad y \\<cdot> y", "by blast"], ["proof (state)\nthis:\n  ad x \\<cdot> y \\<le> ad y \\<cdot> y\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad y \\<Longrightarrow> ad x \\<cdot> y = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad x \\<cdot> y \\<le> ad y \\<cdot> y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a)", "by (simp add: join.le_bot)"], ["proof (state)\nthis:\n  ad x \\<cdot> y = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a2_eq [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\n 2. ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)", "show \"ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)", "by (simp add: ans_d_def local.less_eq_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "show \"ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "by (metis a_gla1 a_mul_d ans1 d1_a mult_assoc)"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_export' [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) = d x + ad y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)", "by (simp add: a_gla2 local.mult.semigroup_axioms semigroup.assoc)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "hence a: \"ad (ad x \\<cdot> y) \\<cdot> d y \\<le> ad (ad x)\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> d y \\<le> ad (ad x)", "by (metis a_comm a_gla1 ans4 mult_assoc ans_d_def)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> d y \\<le> ad (ad x)\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) = ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) =\n    ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y", "by (metis (no_types) add_commute ans3 ans4 distrib_right' mult_onel ans_d_def)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "thus \"ad (ad x \\<cdot> y) \\<le> d x + ad y\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y", "by (metis a_subid_aux1 a join.sup_mono ans_d_def)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<le> d x + ad y\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "show \"d x + ad y \\<le> ad (ad x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "by (metis a2_eq a_antitone a_comm a_subid_aux1 join.sup_least ans_d_def)"], ["proof (state)\nthis:\n  d x + ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Every antidomain near-semiring is a domain near-semiring.\\<close>"], ["", "sublocale dnsz: domain_near_semiring_one_zerol \"(+)\" \"(\\<cdot>)\" 1 0 \"ans_d\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_near_semiring_one_zerol (+) (\\<cdot>) (1::'a) (0::'a) d\n     (\\<le>) (<)", "apply (unfold_locales)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x. x + d x \\<cdot> x = d x \\<cdot> x\n 2. \\<And>x y. d (x \\<cdot> d y) = d (x \\<cdot> y)\n 3. \\<And>x. d x + (1::'a) = (1::'a)\n 4. \\<And>x y. d (x + y) = d x + d y\n 5. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 6. d (0::'a) = (0::'a)", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. d (x \\<cdot> d y) = d (x \\<cdot> y)\n 2. \\<And>x. d x + (1::'a) = (1::'a)\n 3. \\<And>x y. d (x + y) = d x + d y\n 4. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 5. d (0::'a) = (0::'a)", "using a2_eq ans_d_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> d ?y) = ad (?x \\<cdot> ?y)\n  d ?x = ad (ad ?x)\n\ngoal (5 subgoals):\n 1. \\<And>x y. d (x \\<cdot> d y) = d (x \\<cdot> y)\n 2. \\<And>x. d x + (1::'a) = (1::'a)\n 3. \\<And>x y. d (x + y) = d x + d y\n 4. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 5. d (0::'a) = (0::'a)", "apply auto[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. d x + (1::'a) = (1::'a)\n 2. \\<And>x y. d (x + y) = d x + d y\n 3. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 4. d (0::'a) = (0::'a)", "apply (simp add: a_subid ans_d_def local.join.sup_absorb2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y. d (x + y) = d x + d y\n 2. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 3. d (0::'a) = (0::'a)", "apply (simp add: ans_d_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. d x \\<cdot> d y = d y \\<cdot> d x\n 2. d (0::'a) = (0::'a)", "apply (simp add: a_comm ans_d_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d (0::'a) = (0::'a)", "using a_a_one a_very_costrict' ans_d_def"], ["proof (prove)\nusing this:\n  d (1::'a) = (1::'a)\n  (ad ?x = (1::'a)) = (?x = (0::'a))\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d (0::'a) = (0::'a)", "by force"], ["", "lemma a_idem [simp]: \"ad x \\<cdot> ad x = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "have \"ad x = (d x + ad x ) \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x = (d x + ad x) \\<cdot> ad x", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  ad x = (d x + ad x) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "also"], ["proof (state)\nthis:\n  ad x = (d x + ad x) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "have \"... = d x \\<cdot> ad x + ad x \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> ad x = d x \\<cdot> ad x + ad x \\<cdot> ad x", "using distrib_right'"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> ad x = d x \\<cdot> ad x + ad x \\<cdot> ad x", "by blast"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> ad x = d x \\<cdot> ad x + ad x \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "finally"], ["proof (chain)\npicking this:\n  ad x = d x \\<cdot> ad x + ad x \\<cdot> ad x", "show ?thesis"], ["proof (prove)\nusing this:\n  ad x = d x \\<cdot> ad x + ad x \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad x = ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_3_var [simp]: \"ad x \\<cdot> ad y \\<cdot> (x + y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<cdot> (x + y) = (0::'a)", "by (metis ans1 ans4)"], ["", "lemma a_3 [simp]: \"ad x \\<cdot> ad y \\<cdot> d (x + y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<cdot> d (x + y) = (0::'a)", "by (metis a_mul_d ans4)"], ["", "lemma a_closure' [simp]: \"d (ad x) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "have \"d (ad x) = ad (1 \\<cdot> d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = ad ((1::'a) \\<cdot> d x)", "by (simp add: ans_d_def)"], ["proof (state)\nthis:\n  d (ad x) = ad ((1::'a) \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "also"], ["proof (state)\nthis:\n  d (ad x) = ad ((1::'a) \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "have \"... = ad (1 \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> d x) = ad ((1::'a) \\<cdot> x)", "using a2_eq"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> d ?y) = ad (?x \\<cdot> ?y)\n\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> d x) = ad ((1::'a) \\<cdot> x)", "by blast"], ["proof (state)\nthis:\n  ad ((1::'a) \\<cdot> d x) = ad ((1::'a) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "finally"], ["proof (chain)\npicking this:\n  d (ad x) = ad ((1::'a) \\<cdot> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  d (ad x) = ad ((1::'a) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "by simp"], ["proof (state)\nthis:\n  d (ad x) = ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following counterexamples show that some of the antidomain monoid axioms do not need to hold.\\<close>"], ["", "lemma \"x \\<cdot> ad 1 = ad 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ad (1::'a) = ad (1::'a)", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ad (1::'a) = ad (1::'a)", "oops"], ["", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "oops"], ["", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "oops"], ["", "lemma phl_seq_inv: \"d v \\<cdot> x \\<cdot> y \\<cdot> ad w = 0 \\<Longrightarrow> \\<exists>z. d v \\<cdot> x \\<cdot> d z = 0 \\<and> ad z \\<cdot> y \\<cdot> ad w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a) \\<Longrightarrow>\n    \\<exists>z.\n       d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n       ad z \\<cdot> y \\<cdot> ad w = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a) \\<Longrightarrow>\n    \\<exists>z.\n       d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n       ad z \\<cdot> y \\<cdot> ad w = (0::'a)", "assume \"d v \\<cdot> x \\<cdot> y \\<cdot> ad w = 0\""], ["proof (state)\nthis:\n  d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a)\n\ngoal (1 subgoal):\n 1. d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a) \\<Longrightarrow>\n    \\<exists>z.\n       d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n       ad z \\<cdot> y \\<cdot> ad w = (0::'a)", "hence \"d v \\<cdot> x \\<cdot> d (y \\<cdot> ad w) = 0 \\<and> ad (y \\<cdot> ad w) \\<cdot> y \\<cdot> ad w = 0\""], ["proof (prove)\nusing this:\n  d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a)\n\ngoal (1 subgoal):\n 1. d v \\<cdot> x \\<cdot> d (y \\<cdot> ad w) = (0::'a) \\<and>\n    ad (y \\<cdot> ad w) \\<cdot> y \\<cdot> ad w = (0::'a)", "by (metis dnsz.dom_weakly_local local.ans1 mult_assoc)"], ["proof (state)\nthis:\n  d v \\<cdot> x \\<cdot> d (y \\<cdot> ad w) = (0::'a) \\<and>\n  ad (y \\<cdot> ad w) \\<cdot> y \\<cdot> ad w = (0::'a)\n\ngoal (1 subgoal):\n 1. d v \\<cdot> x \\<cdot> y \\<cdot> ad w = (0::'a) \\<Longrightarrow>\n    \\<exists>z.\n       d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n       ad z \\<cdot> y \\<cdot> ad w = (0::'a)", "thus \"\\<exists>z. d v \\<cdot> x \\<cdot> d z = 0 \\<and> ad z \\<cdot> y \\<cdot> ad w = 0\""], ["proof (prove)\nusing this:\n  d v \\<cdot> x \\<cdot> d (y \\<cdot> ad w) = (0::'a) \\<and>\n  ad (y \\<cdot> ad w) \\<cdot> y \\<cdot> ad w = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n       ad z \\<cdot> y \\<cdot> ad w = (0::'a)", "by blast"], ["proof (state)\nthis:\n  \\<exists>z.\n     d v \\<cdot> x \\<cdot> d z = (0::'a) \\<and>\n     ad z \\<cdot> y \\<cdot> ad w = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_fixpoint: \"ad x = x \\<Longrightarrow> (\\<forall>y. y = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "assume a1: \"ad x = x\""], ["proof (state)\nthis:\n  ad x = x\n\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "{"], ["proof (state)\nthis:\n  ad x = x\n\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "fix aa :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "have \"aa = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aa = (0::'a)", "using a1"], ["proof (prove)\nusing this:\n  ad x = x\n\ngoal (1 subgoal):\n 1. aa = (0::'a)", "by (metis (no_types) a_mul_d ans_d_def local.annil local.ans3 local.join.sup.idem local.mult_1_left)"], ["proof (state)\nthis:\n  aa = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "}"], ["proof (state)\nthis:\n  ?aa3 = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x = x \\<Longrightarrow> \\<forall>y. y = (0::'a)", "then"], ["proof (chain)\npicking this:\n  ?aa3 = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?aa3 = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>y. y = (0::'a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>y. y = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "no_notation ans_d (\"d\")"], ["", "end"], ["", "subsection \\<open>Antidomain Pre-Dioids\\<close>"], ["", "text \\<open>Antidomain pre-diods are based on a different set of axioms, which are again taken from~\\cite{DesharnaisStruthAMAST}.\\<close>"], ["", "class antidomain_pre_dioid = pre_dioid_one_zerol + antidomain_op +\n  assumes apd1 [simp]: \"ad x \\<cdot> x = 0\"\n  and apd2 [simp]: \"ad (x \\<cdot> y) \\<le> ad (x \\<cdot> ad (ad y))\"\n  and apd3 [simp]: \"ad (ad x) + ad x = 1\"\n\nbegin"], ["", "definition apd_d :: \"'a \\<Rightarrow> 'a\" (\"d\") where\n   \"d x = ad (ad x)\""], ["", "lemma a_very_costrict'': \"ad x = 1 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x = (1::'a)) = (x = (0::'a))", "by (metis add_commute local.add_zerol local.antisym local.apd1 local.apd3 local.join.bot_least local.mult_1_right local.phl_skip)"], ["", "lemma a_subid': \"ad x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<le> (1::'a)", "using local.apd3 local.join.sup_ge2"], ["proof (prove)\nusing this:\n  ad (ad ?x) + ad ?x = (1::'a)\n  ?y \\<le> ?x + ?y\n\ngoal (1 subgoal):\n 1. ad x \\<le> (1::'a)", "by fastforce"], ["", "lemma d1_a' [simp]: \"d x \\<cdot> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"x = (d x + ad x) \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (d x + ad x) \\<cdot> x", "by (simp add: apd_d_def)"], ["proof (state)\nthis:\n  x = (d x + ad x) \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "also"], ["proof (state)\nthis:\n  x = (d x + ad x) \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"... = d x \\<cdot> x + ad x \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x", "using distrib_right'"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x", "by blast"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "also"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> x = d x \\<cdot> x + ad x \\<cdot> x\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "have \"... = d x \\<cdot> x + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x + ad x \\<cdot> x = d x \\<cdot> x + (0::'a)", "by simp"], ["proof (state)\nthis:\n  d x \\<cdot> x + ad x \\<cdot> x = d x \\<cdot> x + (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "finally"], ["proof (chain)\npicking this:\n  x = d x \\<cdot> x + (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = d x \\<cdot> x + (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "by auto"], ["proof (state)\nthis:\n  d x \\<cdot> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_subid_aux1': \"ad x \\<cdot> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> y", "using a_subid' mult_isor"], ["proof (prove)\nusing this:\n  ad ?x \\<le> (1::'a)\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> y", "by fastforce"], ["", "lemma a_mul_d' [simp]: \"ad x \\<cdot> d x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "have \"1 = ad (ad x \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) = ad (ad x \\<cdot> x)", "using a_very_costrict''"], ["proof (prove)\nusing this:\n  (ad ?x = (1::'a)) = (?x = (0::'a))\n\ngoal (1 subgoal):\n 1. (1::'a) = ad (ad x \\<cdot> x)", "by force"], ["proof (state)\nthis:\n  (1::'a) = ad (ad x \\<cdot> x)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (1::'a) = ad (ad x \\<cdot> x)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "by (metis a_subid' a_very_costrict'' apd_d_def local.antisym local.apd2)"], ["proof (state)\nthis:\n  ad x \\<cdot> d x = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_d_closed [simp]: \"d (ad x) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "have \"d (ad x) = (d x + ad x) \\<cdot> d (ad x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = (d x + ad x) \\<cdot> d (ad x)", "by (simp add: apd_d_def)"], ["proof (state)\nthis:\n  d (ad x) = (d x + ad x) \\<cdot> d (ad x)\n\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "also"], ["proof (state)\nthis:\n  d (ad x) = (d x + ad x) \\<cdot> d (ad x)\n\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "have \"... = ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> d (ad x) =\n    ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x)", "using apd_d_def local.distrib_right'"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> d (ad x) =\n    ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x)", "by presburger"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> d (ad x) =\n  ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x)\n\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "also"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> d (ad x) =\n  ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x)\n\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "have \"... = ad x \\<cdot> d (ad x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x) =\n    ad x \\<cdot> d (ad x)", "using a_mul_d' apd_d_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> d ?x = (0::'a)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x) =\n    ad x \\<cdot> d (ad x)", "by auto"], ["proof (state)\nthis:\n  ad (ad x) \\<cdot> ad (d x) + ad x \\<cdot> d (ad x) = ad x \\<cdot> d (ad x)\n\ngoal (2 subgoals):\n 1. d (ad x) \\<le> ad x\n 2. ad x \\<le> d (ad x)", "finally"], ["proof (chain)\npicking this:\n  d (ad x) = ad x \\<cdot> d (ad x)", "show \"d (ad x) \\<le> ad x\""], ["proof (prove)\nusing this:\n  d (ad x) = ad x \\<cdot> d (ad x)\n\ngoal (1 subgoal):\n 1. d (ad x) \\<le> ad x", "by (metis a_subid' mult_1_right mult_isol apd_d_def)"], ["proof (state)\nthis:\n  d (ad x) \\<le> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "have \"ad x = ad (1 \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x = ad ((1::'a) \\<cdot> x)", "by simp"], ["proof (state)\nthis:\n  ad x = ad ((1::'a) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "also"], ["proof (state)\nthis:\n  ad x = ad ((1::'a) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "have \"... \\<le> ad (1 \\<cdot> d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> x) \\<le> ad ((1::'a) \\<cdot> d x)", "using apd_d_def local.apd2"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  ad (?x \\<cdot> ?y) \\<le> ad (?x \\<cdot> ad (ad ?y))\n\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> x) \\<le> ad ((1::'a) \\<cdot> d x)", "by presburger"], ["proof (state)\nthis:\n  ad ((1::'a) \\<cdot> x) \\<le> ad ((1::'a) \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "also"], ["proof (state)\nthis:\n  ad ((1::'a) \\<cdot> x) \\<le> ad ((1::'a) \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "have \"... = ad (d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad ((1::'a) \\<cdot> d x) = ad (d x)", "by simp"], ["proof (state)\nthis:\n  ad ((1::'a) \\<cdot> d x) = ad (d x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "finally"], ["proof (chain)\npicking this:\n  ad x \\<le> ad (d x)", "show \"ad x \\<le> d (ad x)\""], ["proof (prove)\nusing this:\n  ad x \\<le> ad (d x)\n\ngoal (1 subgoal):\n 1. ad x \\<le> d (ad x)", "by (simp add: apd_d_def)"], ["proof (state)\nthis:\n  ad x \\<le> d (ad x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meet_ord_def: \"ad x \\<le> ad y \\<longleftrightarrow> ad x \\<cdot> ad y = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<le> ad y) = (ad x \\<cdot> ad y = ad x)", "by (metis a_d_closed a_subid_aux1' d1_a' eq_iff mult_1_right mult_isol)"], ["", "lemma d_weak_loc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "have \"x \\<cdot> y = 0 \\<longleftrightarrow> ad (x \\<cdot> y) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (ad (x \\<cdot> y) = (1::'a))", "by (simp add: a_very_costrict'')"], ["proof (state)\nthis:\n  (x \\<cdot> y = (0::'a)) = (ad (x \\<cdot> y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "also"], ["proof (state)\nthis:\n  (x \\<cdot> y = (0::'a)) = (ad (x \\<cdot> y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "have \"... \\<longleftrightarrow> ad (x \\<cdot> d y) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad (x \\<cdot> y) = (1::'a)) = (ad (x \\<cdot> d y) = (1::'a))", "by (metis apd1 apd2 a_subid' apd_d_def d1_a' eq_iff mult_1_left mult_assoc)"], ["proof (state)\nthis:\n  (ad (x \\<cdot> y) = (1::'a)) = (ad (x \\<cdot> d y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "finally"], ["proof (chain)\npicking this:\n  (x \\<cdot> y = (0::'a)) = (ad (x \\<cdot> d y) = (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  (x \\<cdot> y = (0::'a)) = (ad (x \\<cdot> d y) = (1::'a))\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "by (simp add: a_very_costrict'')"], ["proof (state)\nthis:\n  (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gla_1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "assume \"ad x \\<cdot> y = 0\""], ["proof (state)\nthis:\n  ad x \\<cdot> y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "hence a: \"ad x \\<cdot> d y = 0\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y = (0::'a)", "using d_weak_loc"], ["proof (prove)\nusing this:\n  ad x \\<cdot> y = (0::'a)\n  (?x \\<cdot> ?y = (0::'a)) = (?x \\<cdot> d ?y = (0::'a))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y = (0::'a)", "by force"], ["proof (state)\nthis:\n  ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "hence \"d y = ad x \\<cdot> d y + d y\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. d y = ad x \\<cdot> d y + d y", "by simp"], ["proof (state)\nthis:\n  d y = ad x \\<cdot> d y + d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  d y = ad x \\<cdot> d y + d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = (1 + ad x) \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y + d y = ((1::'a) + ad x) \\<cdot> d y", "using join.sup_commute"], ["proof (prove)\nusing this:\n  ?x + ?y = ?y + ?x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y + d y = ((1::'a) + ad x) \\<cdot> d y", "by auto"], ["proof (state)\nthis:\n  ad x \\<cdot> d y + d y = ((1::'a) + ad x) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> d y + d y = ((1::'a) + ad x) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = (d x + ad x) \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) + ad x) \\<cdot> d y = (d x + ad x) \\<cdot> d y", "using apd_d_def calculation"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  d y = ((1::'a) + ad x) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ((1::'a) + ad x) \\<cdot> d y = (d x + ad x) \\<cdot> d y", "by auto"], ["proof (state)\nthis:\n  ((1::'a) + ad x) \\<cdot> d y = (d x + ad x) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "also"], ["proof (state)\nthis:\n  ((1::'a) + ad x) \\<cdot> d y = (d x + ad x) \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "have \"... = d x \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> d y = d x \\<cdot> d y", "by (simp add: a join.sup_commute)"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> d y = d x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "finally"], ["proof (chain)\npicking this:\n  d y = d x \\<cdot> d y", "have \"d y \\<le> d x\""], ["proof (prove)\nusing this:\n  d y = d x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. d y \\<le> d x", "by (metis apd_d_def a_subid' mult_1_right mult_isol)"], ["proof (state)\nthis:\n  d y \\<le> d x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "hence \"d y \\<cdot> ad x = 0\""], ["proof (prove)\nusing this:\n  d y \\<le> d x\n\ngoal (1 subgoal):\n 1. d y \\<cdot> ad x = (0::'a)", "by (metis apd_d_def a_d_closed a_mul_d' distrib_right' less_eq_def no_trivial_inverse)"], ["proof (state)\nthis:\n  d y \\<cdot> ad x = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "hence \"ad x = ad y \\<cdot> ad x\""], ["proof (prove)\nusing this:\n  d y \\<cdot> ad x = (0::'a)\n\ngoal (1 subgoal):\n 1. ad x = ad y \\<cdot> ad x", "by (metis apd_d_def apd3 add_0_left distrib_right' mult_1_left)"], ["proof (state)\nthis:\n  ad x = ad y \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "thus \"ad x \\<le> ad y\""], ["proof (prove)\nusing this:\n  ad x = ad y \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad y", "by (metis add_commute apd3 mult_oner subdistl)"], ["proof (state)\nthis:\n  ad x \\<le> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a2_eq' [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\n 2. ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)", "show \"ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)", "by (simp add: apd_d_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<le> ad (x \\<cdot> d y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "show \"ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)", "by (metis gla_1 apd1 a_mul_d' d1_a' mult_assoc)"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y) \\<le> ad (x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_supdist_var: \"ad (x + y) \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x", "by (metis gla_1 apd1 join.le_bot subdistl)"], ["", "lemma a_antitone': \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ad y \\<le> ad x", "using a_supdist_var local.order_prop"], ["proof (prove)\nusing this:\n  ad (?x + ?y) \\<le> ad ?x\n  (?x \\<le> ?y) = (\\<exists>z. ?x + z = ?y)\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ad y \\<le> ad x", "by auto"], ["", "lemma a_comm_var: \"ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "have \"ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "have \"... \\<le> d (ad x \\<cdot> ad y) \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n    \\<le> d (ad x \\<cdot> ad y) \\<cdot> ad x", "using a_subid' mult_isol"], ["proof (prove)\nusing this:\n  ad ?x \\<le> (1::'a)\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n    \\<le> d (ad x \\<cdot> ad y) \\<cdot> ad x", "by fastforce"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n  \\<le> d (ad x \\<cdot> ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "also"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n  \\<le> d (ad x \\<cdot> ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "have \"... \\<le> d (ad y) \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) \\<cdot> ad x \\<le> d (ad y) \\<cdot> ad x", "by (simp add: a_antitone' a_subid_aux1' apd_d_def local.mult_isor)"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) \\<cdot> ad x \\<le> d (ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> ad y \\<le> d (ad y) \\<cdot> ad x", "show ?thesis"], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y \\<le> d (ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_comm': \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "by (simp add: a_comm_var eq_iff)"], ["", "lemma a_closed [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "have f1: \"\\<And>x y. ad x \\<le> ad (ad y \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. ad x \\<le> ad (ad y \\<cdot> x)", "by (simp add: a_antitone' a_subid_aux1')"], ["proof (state)\nthis:\n  ad ?x1 \\<le> ad (ad ?y1 \\<cdot> ?x1)\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "have \"\\<And>x y. d (ad x \\<cdot> y) \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d (ad x \\<cdot> y) \\<le> ad x", "by (metis a2_eq' a_antitone' a_comm' a_d_closed apd_d_def f1)"], ["proof (state)\nthis:\n  d (ad ?x1 \\<cdot> ?y1) \\<le> ad ?x1\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "hence \"\\<And>x y. d (ad x \\<cdot> y) \\<cdot> y = ad x \\<cdot> y\""], ["proof (prove)\nusing this:\n  d (ad ?x1 \\<cdot> ?y1) \\<le> ad ?x1\n\ngoal (1 subgoal):\n 1. \\<And>x y. d (ad x \\<cdot> y) \\<cdot> y = ad x \\<cdot> y", "by (metis d1_a' meet_ord_def mult_assoc apd_d_def)"], ["proof (state)\nthis:\n  d (ad ?x1 \\<cdot> ?y1) \\<cdot> ?y1 = ad ?x1 \\<cdot> ?y1\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "thus ?thesis"], ["proof (prove)\nusing this:\n  d (ad ?x1 \\<cdot> ?y1) \\<cdot> ?y1 = ad ?x1 \\<cdot> ?y1\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "by (metis f1 a_comm' apd_d_def meet_ord_def)"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_export'' [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) = d x + ad y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)", "using d_weak_loc mult_assoc"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y = (0::'a)) = (?x \\<cdot> d ?y = (0::'a))\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)", "by fastforce"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "hence a: \"ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x", "by (metis a_closed a_comm' apd_d_def gla_1 mult_assoc)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) = ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) =\n    ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y", "by (metis apd3 a_comm' d1_a' distrib_right' mult_1_right apd_d_def)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "thus \"ad (ad x \\<cdot> y) \\<le> d x + ad y\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y", "by (metis a_subid_aux1' a join.sup_mono)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<le> d x + ad y\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad y \\<le> ad (ad x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y \\<le> ad (ad x \\<cdot> y)", "by (simp add: a_antitone' a_subid_aux1')"], ["proof (state)\nthis:\n  ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "thus \"d x + ad y \\<le> ad (ad x \\<cdot> y)\""], ["proof (prove)\nusing this:\n  ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "by (metis apd_d_def a_mul_d' d1_a' gla_1 apd1 join.sup_least mult_assoc)"], ["proof (state)\nthis:\n  d x + ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d1_sum_var: \"x + y \\<le> (d x + d y) \\<cdot> (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "have \"x + y = d x \\<cdot> x + d y \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = d x \\<cdot> x + d y \\<cdot> y", "by simp"], ["proof (state)\nthis:\n  x + y = d x \\<cdot> x + d y \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "also"], ["proof (state)\nthis:\n  x + y = d x \\<cdot> x + d y \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "have \"... \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x + d y \\<cdot> y\n    \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y", "using local.distrib_right' local.join.sup_ge1 local.join.sup_ge2 local.join.sup_mono"], ["proof (prove)\nusing this:\n  (?x + ?y) \\<cdot> ?z = ?x \\<cdot> ?z + ?y \\<cdot> ?z\n  ?x \\<le> ?x + ?y\n  ?y \\<le> ?x + ?y\n  \\<lbrakk>?a \\<le> ?c; ?b \\<le> ?d\\<rbrakk>\n  \\<Longrightarrow> ?a + ?b \\<le> ?c + ?d\n\ngoal (1 subgoal):\n 1. d x \\<cdot> x + d y \\<cdot> y\n    \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y", "by presburger"], ["proof (state)\nthis:\n  d x \\<cdot> x + d y \\<cdot> y\n  \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "finally"], ["proof (chain)\npicking this:\n  x + y \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y", "show ?thesis"], ["proof (prove)\nusing this:\n  x + y \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "using order_trans subdistl_var"], ["proof (prove)\nusing this:\n  x + y \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n  ?z \\<cdot> ?x + ?z \\<cdot> ?y \\<le> ?z \\<cdot> (?x + ?y)\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "by blast"], ["proof (state)\nthis:\n  x + y \\<le> (d x + d y) \\<cdot> (x + y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a4': \"ad (x + y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) = ad x \\<cdot> ad y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (x + y) \\<le> ad x \\<cdot> ad y\n 2. ad x \\<cdot> ad y \\<le> ad (x + y)", "show \"ad (x + y) \\<le> ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x \\<cdot> ad y", "by (metis a_d_closed a_supdist_var add_commute d1_a' local.mult_isol_var)"], ["proof (state)\nthis:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "hence \"ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\""], ["proof (prove)\nusing this:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)", "using less_eq_def add_commute"], ["proof (prove)\nusing this:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n  (?x \\<le> ?y) = (?x + ?y = ?y)\n  ?a + ?b = ?b + ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "have \"... = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y + ad (x + y) =\n    ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))", "by (metis a_closed a_export'')"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y + ad (x + y) =\n  ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))", "show \"ad x \\<cdot> ad y \\<le> ad (x + y)\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "using a_antitone' apd_d_def d1_sum_var"], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n  ?x \\<le> ?y \\<Longrightarrow> ad ?y \\<le> ad ?x\n  d ?x = ad (ad ?x)\n  ?x + ?y \\<le> (d ?x + d ?y) \\<cdot> (?x + ?y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "by auto"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<le> ad (x + y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Antidomain pre-dioids are domain pre-dioids and antidomain near-semirings, but still not antidomain monoids.\\<close>"], ["", "sublocale dpdz: domain_pre_dioid_one_zerol \"(+)\" \"(\\<cdot>)\" 1 0 \"(\\<le>)\" \"(<)\" \"\\<lambda>x. ad (ad x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_pre_dioid_one_zerol (+) (\\<cdot>) (1::'a) (0::'a) (\\<le>)\n     (<) (\\<lambda>x. ad (ad x))", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<le> ad (ad x) \\<cdot> x\n 2. \\<And>x y. ad (ad (x \\<cdot> ad (ad y))) = ad (ad (x \\<cdot> y))\n 3. \\<And>x. ad (ad x) \\<le> (1::'a)\n 4. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 5. ad (ad (0::'a)) = (0::'a)", "using apd_d_def d1_a'"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  d ?x \\<cdot> ?x = ?x\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<le> ad (ad x) \\<cdot> x\n 2. \\<And>x y. ad (ad (x \\<cdot> ad (ad y))) = ad (ad (x \\<cdot> y))\n 3. \\<And>x. ad (ad x) \\<le> (1::'a)\n 4. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 5. ad (ad (0::'a)) = (0::'a)", "apply auto[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y. ad (ad (x \\<cdot> ad (ad y))) = ad (ad (x \\<cdot> y))\n 2. \\<And>x. ad (ad x) \\<le> (1::'a)\n 3. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 4. ad (ad (0::'a)) = (0::'a)", "using a2_eq' apd_d_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> d ?y) = ad (?x \\<cdot> ?y)\n  d ?x = ad (ad ?x)\n\ngoal (4 subgoals):\n 1. \\<And>x y. ad (ad (x \\<cdot> ad (ad y))) = ad (ad (x \\<cdot> y))\n 2. \\<And>x. ad (ad x) \\<le> (1::'a)\n 3. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 4. ad (ad (0::'a)) = (0::'a)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. ad (ad x) \\<le> (1::'a)\n 2. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 3. ad (ad (0::'a)) = (0::'a)", "apply (simp add: a_subid')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. ad (ad (x + y)) = ad (ad x) + ad (ad y)\n 2. ad (ad (0::'a)) = (0::'a)", "apply (simp add: a4' apd_d_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad (0::'a)) = (0::'a)", "by (metis a_mul_d' a_very_costrict'' apd_d_def local.mult_onel)"], ["", "subclass antidomain_near_semiring"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_near_semiring ad (+) (\\<cdot>) (1::'a) (0::'a) (\\<le>)\n     (<)", "apply (unfold_locales)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. ad x \\<cdot> x = (0::'a)\n 2. \\<And>x y.\n       ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) =\n       ad (x \\<cdot> ad (ad y))\n 3. \\<And>x. ad (ad x) + ad x = (1::'a)\n 4. \\<And>x y. ad (x + y) = ad x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) =\n       ad (x \\<cdot> ad (ad y))\n 2. \\<And>x. ad (ad x) + ad x = (1::'a)\n 3. \\<And>x y. ad (x + y) = ad x \\<cdot> ad y", "using local.apd2 local.less_eq_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> ?y) \\<le> ad (?x \\<cdot> ad (ad ?y))\n  (?x \\<le> ?y) = (?x + ?y = ?y)\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) =\n       ad (x \\<cdot> ad (ad y))\n 2. \\<And>x. ad (ad x) + ad x = (1::'a)\n 3. \\<And>x y. ad (x + y) = ad x \\<cdot> ad y", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. ad (ad x) + ad x = (1::'a)\n 2. \\<And>x y. ad (x + y) = ad x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. ad (x + y) = ad x \\<cdot> ad y", "by (simp add: a4')"], ["", "lemma a_supdist: \"ad (x + y) \\<le> ad x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x + ad y", "using a_supdist_var local.join.le_supI1"], ["proof (prove)\nusing this:\n  ad (?x + ?y) \\<le> ad ?x\n  ?x \\<le> ?a \\<Longrightarrow> ?x \\<le> ?a + ?b\n\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x + ad y", "by auto"], ["", "lemma a_gla: \"ad x \\<cdot> y = 0 \\<longleftrightarrow> ad x \\<le> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<cdot> y = (0::'a)) = (ad x \\<le> ad y)", "using gla_1 a_gla2"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ?y = (0::'a) \\<Longrightarrow> ad ?x \\<le> ad ?y\n  ad ?x \\<le> ad ?y \\<Longrightarrow> ad ?x \\<cdot> ?y = (0::'a)\n\ngoal (1 subgoal):\n 1. (ad x \\<cdot> y = (0::'a)) = (ad x \\<le> ad y)", "by blast"], ["", "lemma a_subid_aux2: \"x \\<cdot> ad y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ad y \\<le> x", "using a_subid' mult_isol"], ["proof (prove)\nusing this:\n  ad ?x \\<le> (1::'a)\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. x \\<cdot> ad y \\<le> x", "by fastforce"], ["", "lemma a42_var: \"d x \\<cdot> d y \\<le> ad (ad x + ad y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> d y \\<le> ad (ad x + ad y)", "by (simp add: apd_d_def)"], ["", "lemma d1_weak [simp]: \"(d x + d y) \\<cdot> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + d y) \\<cdot> x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (d x + d y) \\<cdot> x = x", "have \"(d x + d y) \\<cdot> x = (1 + d y) \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + d y) \\<cdot> x = ((1::'a) + d y) \\<cdot> x", "by simp"], ["proof (state)\nthis:\n  (d x + d y) \\<cdot> x = ((1::'a) + d y) \\<cdot> x\n\ngoal (1 subgoal):\n 1. (d x + d y) \\<cdot> x = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  (d x + d y) \\<cdot> x = ((1::'a) + d y) \\<cdot> x\n\ngoal (1 subgoal):\n 1. (d x + d y) \\<cdot> x = x", "by (metis add_commute apd_d_def dpdz.dnso3 local.mult_1_left)"], ["proof (state)\nthis:\n  (d x + d y) \\<cdot> x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"x \\<cdot> ad 1 = ad 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ad (1::'a) = ad (1::'a)", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ad (1::'a) = ad (1::'a)", "oops"], ["", "lemma \"ad x \\<cdot> (y + z) = ad x \\<cdot> y + ad x \\<cdot> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (y + z) = ad x \\<cdot> y + ad x \\<cdot> z", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (y + z) = ad x \\<cdot> y + ad x \\<cdot> z", "oops"], ["", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "oops"], ["", "lemma \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "oops"], ["", "no_notation apd_d (\"d\")"], ["", "end"], ["", "subsection \\<open>Antidomain Semirings\\<close>"], ["", "text \\<open>Antidomain semirings are direct expansions of antidomain pre-dioids, but do not require idempotency of addition. Hence we give a slightly different axiomatisation, following~\\cite{DesharnaisStruthSCP}.\\<close>"], ["", "class antidomain_semiringl = semiring_one_zerol + plus_ord + antidomain_op +\n  assumes as1 [simp]: \"ad x \\<cdot> x = 0\"\n  and as2 [simp]: \"ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) = ad (x \\<cdot> ad (ad y))\"\n  and as3 [simp]: \"ad (ad x) + ad x = 1\"\n\nbegin"], ["", "definition ads_d :: \"'a \\<Rightarrow> 'a\" (\"d\") where\n  \"d x = ad (ad x)\""], ["", "lemma one_idem': \"1 + 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) + (1::'a) = (1::'a)", "by (metis as1 as2 as3 add_zeror mult.right_neutral)"], ["", "text \\<open>Every antidomain semiring is a dioid and an antidomain pre-dioid.\\<close>"], ["", "subclass dioid"], ["proof (prove)\ngoal (1 subgoal):\n 1. Dioid.class.dioid (+) (\\<cdot>) (\\<le>) (<)", "by (standard, metis distrib_left mult.right_neutral one_idem')"], ["", "subclass antidomain_pre_dioid"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_pre_dioid ad (+) (\\<cdot>) (1::'a) (0::'a) (\\<le>) (<)", "by (unfold_locales, auto simp: local.less_eq_def)"], ["", "lemma am5_lem [simp]: \"ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "have \"ad (x \\<cdot> y ) \\<cdot> ad (x \\<cdot> ad y) = ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) =\n    ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y)", "using ads_d_def local.a2_eq' local.apd_d_def"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  ad (?x \\<cdot> apd_d ?y) = ad (?x \\<cdot> ?y)\n  apd_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) =\n    ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y)", "by auto"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) =\n  ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "also"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) =\n  ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "have \"... = ad (x \\<cdot> d y + x \\<cdot> ad y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y) =\n    ad (x \\<cdot> d y + x \\<cdot> ad y)", "using ans4"], ["proof (prove)\nusing this:\n  ad (?x + ?y) = ad ?x \\<cdot> ad ?y\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y) =\n    ad (x \\<cdot> d y + x \\<cdot> ad y)", "by presburger"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y) =\n  ad (x \\<cdot> d y + x \\<cdot> ad y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "also"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y) \\<cdot> ad (x \\<cdot> ad y) =\n  ad (x \\<cdot> d y + x \\<cdot> ad y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "have \"... = ad (x \\<cdot> (d y + ad y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y + x \\<cdot> ad y) = ad (x \\<cdot> (d y + ad y))", "using distrib_left"], ["proof (prove)\nusing this:\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y + x \\<cdot> ad y) = ad (x \\<cdot> (d y + ad y))", "by presburger"], ["proof (state)\nthis:\n  ad (x \\<cdot> d y + x \\<cdot> ad y) = ad (x \\<cdot> (d y + ad y))\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "finally"], ["proof (chain)\npicking this:\n  ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad (x \\<cdot> (d y + ad y))", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad (x \\<cdot> (d y + ad y))\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x", "by (simp add: ads_d_def)"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> ad (x \\<cdot> ad y) = ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma am6_lem [simp]: \"ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "have \"ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n    ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a)", "by simp"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "also"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "have \"... = ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a) =\n    ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n    ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y", "using ans1 mult_assoc"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ?x = (0::'a)\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a) =\n    ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n    ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y", "by presburger"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a) =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n  ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "also"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y + (0::'a) =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n  ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "have \"... = ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n    ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y =\n    ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)", "using ads_d_def local.a2_eq' local.apd_d_def local.distrib_left"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  ad (?x \\<cdot> apd_d ?y) = ad (?x \\<cdot> ?y)\n  apd_d ?x = ad (ad ?x)\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n    ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y =\n    ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)", "by auto"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y +\n  ad (x \\<cdot> d y) \\<cdot> x \\<cdot> d y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "finally"], ["proof (chain)\npicking this:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)", "show \"ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x\""], ["proof (prove)\nusing this:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "using add_commute ads_d_def local.as3"], ["proof (prove)\nusing this:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y =\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> (ad y + d y)\n  ?a + ?b = ?b + ?a\n  d ?x = ad (ad ?x)\n  ad (ad ?x) + ad ?x = (1::'a)\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x", "by auto"], ["proof (state)\nthis:\n  ad (x \\<cdot> y) \\<cdot> x \\<cdot> ad y = ad (x \\<cdot> y) \\<cdot> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_zero [simp]: \"ad 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (0::'a) = (1::'a)", "by (simp add: local.a_very_costrict'')"], ["", "lemma a_one [simp]: \"ad 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (1::'a) = (0::'a)", "using a_zero local.dpdz.dpd5"], ["proof (prove)\nusing this:\n  ad (0::'a) = (1::'a)\n  ad (ad (0::'a)) = (0::'a)\n\ngoal (1 subgoal):\n 1. ad (1::'a) = (0::'a)", "by blast"], ["", "subclass antidomain_left_monoid"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_left_monoid ad (1::'a) (\\<cdot>)", "by (unfold_locales, auto simp:  local.a_comm')"], ["", "text \\<open>Every antidomain left semiring is a domain left semiring.\\<close>"], ["", "no_notation domain_semiringl_class.fd (\"( |_\\<rangle> _)\" [61,81] 82)"], ["", "definition fdia :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"( |_\\<rangle> _)\" [61,81] 82) where\n  \"|x\\<rangle> y = ad (ad (x \\<cdot> y))\""], ["", "sublocale ds: domain_semiringl \"(+)\" \"(\\<cdot>)\" 1 0 \"\\<lambda>x. ad (ad x)\" \"(\\<le>)\" \"(<)\"\n  rewrites \"ds.fd x y \\<equiv> fdia x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n     (\\<lambda>x. ad (ad x)) (\\<le>) (<) &&&\n    domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n     |x\\<rangle> y", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n     (\\<lambda>x. ad (ad x)) (\\<le>) (<)\n 2. domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n     |x\\<rangle> y", "show \"class.domain_semiringl (+) (\\<cdot>) 1 0 (\\<lambda>x. ad (ad x)) (\\<le>) (<) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n     (\\<lambda>x. ad (ad x)) (\\<le>) (<)", "by (unfold_locales, auto simp: local.dpdz.dpd4 ans_d_def)"], ["proof (state)\nthis:\n  class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n   (\\<lambda>x. ad (ad x)) (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n     |x\\<rangle> y", "then"], ["proof (chain)\npicking this:\n  class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n   (\\<lambda>x. ad (ad x)) (\\<le>) (<)", "interpret ds: domain_semiringl \"(+)\" \"(\\<cdot>)\" 1 0 \"\\<lambda>x. ad (ad x)\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\nusing this:\n  class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n   (\\<lambda>x. ad (ad x)) (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n     (\\<lambda>x. ad (ad x)) (\\<le>) (<)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n     |x\\<rangle> y", "show \"ds.fd x y \\<equiv> fdia x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n     |x\\<rangle> y", "by (auto simp: fdia_def ds.fd_def)"], ["proof (state)\nthis:\n  domain_semiringl.fd (\\<cdot>) (\\<lambda>x. ad (ad x)) x y \\<equiv>\n   |x\\<rangle> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fd_eq_fdia [simp]: \"domain_semiringl.fd (\\<cdot>) d x y \\<equiv> fdia x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "have \"class.domain_semiringl (+) (\\<cdot>) 1 0 d (\\<le>) (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a) d\n     (\\<le>) (<)", "by (unfold_locales, auto simp: ads_d_def local.ans_d_def)"], ["proof (state)\nthis:\n  class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a) d\n   (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "hence \"domain_semiringl.fd (\\<cdot>) d x y = d ((\\<cdot>) x y)\""], ["proof (prove)\nusing this:\n  class.domain_semiringl (+) (\\<cdot>) (1::'a) (zero_class.zero::'a) d\n   (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y = d (x \\<cdot> y)", "by (rule domain_semiringl.fd_def)"], ["proof (state)\nthis:\n  domain_semiringl.fd (\\<cdot>) d x y = d (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "also"], ["proof (state)\nthis:\n  domain_semiringl.fd (\\<cdot>) d x y = d (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "have \"... = ds.fd x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (x \\<cdot> y) =  |x\\<rangle> y", "by (simp add: ds.fd_def ads_d_def)"], ["proof (state)\nthis:\n  d (x \\<cdot> y) =  |x\\<rangle> y\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "finally"], ["proof (chain)\npicking this:\n  domain_semiringl.fd (\\<cdot>) d x y =  |x\\<rangle> y", "show \"domain_semiringl.fd (\\<cdot>) d x y \\<equiv> |x\\<rangle> y\""], ["proof (prove)\nusing this:\n  domain_semiringl.fd (\\<cdot>) d x y =  |x\\<rangle> y\n\ngoal (1 subgoal):\n 1. domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "by auto"], ["proof (state)\nthis:\n  domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class antidomain_semiring = antidomain_semiringl + semiring_one_zero\n\nbegin"], ["", "text \\<open>Every antidomain semiring is an antidomain monoid.\\<close>"], ["", "subclass antidomain_monoid"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_monoid ad (1::'a) (\\<cdot>)", "by (standard, metis ans1 mult_1_right annir)"], ["", "lemma \"a_zero = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_zero = (zero_class.zero::'a)", "by (simp add: local.a_zero_def)"], ["", "sublocale ds: domain_semiring \"(+)\" \"(\\<cdot>)\" 1 0 \"\\<lambda>x. ad (ad x)\" \"(\\<le>)\" \"(<)\"\n  rewrites \"ds.fd x y \\<equiv> fdia x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_semiring (+) (\\<cdot>) (1::'a) (zero_class.zero::'a)\n     (\\<lambda>x. ad (ad x)) (\\<le>) (<) &&&\n     |x\\<rangle> y \\<equiv>  |x\\<rangle> y", "by unfold_locales"], ["", "end"], ["", "subsection \\<open>The Boolean Algebra of Domain Elements\\<close>"], ["", "typedef (overloaded) 'a a2_element = \"{x :: 'a :: antidomain_semiring. x = d x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {x. x = d x}", "by (rule_tac x=1 in exI, auto simp: ads_d_def)"], ["", "setup_lifting type_definition_a2_element"], ["", "instantiation a2_element :: (antidomain_semiring) boolean_algebra\n\nbegin"], ["", "lift_definition less_eq_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element \\<Rightarrow> bool\" is \"(\\<le>)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition less_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element \\<Rightarrow> bool\" is \"(<)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition bot_a2_element :: \"'a a2_element\" is 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = d (0::'a)", "by (simp add: ads_d_def)"], ["", "lift_definition top_a2_element :: \"'a a2_element\" is 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) = d (1::'a)", "by (simp add: ads_d_def)"], ["", "lift_definition inf_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element \\<Rightarrow> 'a a2_element\" is \"(\\<cdot>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 = d a1; a2 = d a2\\<rbrakk>\n       \\<Longrightarrow> a1 \\<cdot> a2 = d (a1 \\<cdot> a2)", "by (metis (no_types, lifting) ads_d_def dpdz.dom_mult_closed)"], ["", "lift_definition sup_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element \\<Rightarrow> 'a a2_element\" is \"(+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 = d a1; a2 = d a2\\<rbrakk>\n       \\<Longrightarrow> a1 + a2 = d (a1 + a2)", "by (metis ads_d_def ds.dsr5)"], ["", "lift_definition minus_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element \\<Rightarrow> 'a a2_element\" is \"\\<lambda>x y. x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 = d a1; a2 = d a2\\<rbrakk>\n       \\<Longrightarrow> a1 \\<cdot> ad a2 = d (a1 \\<cdot> ad a2)", "by (metis (no_types, lifting) ads_d_def dpdz.domain_export'')"], ["", "lift_definition uminus_a2_element :: \"'a a2_element \\<Rightarrow> 'a a2_element\" is antidomain_op"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a = d a \\<Longrightarrow> ad a = d (ad a)", "by (simp add: ads_d_def)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a a2_element, boolean_algebra_class)", "apply (standard; transfer)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x = d x \\<Longrightarrow> x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; y \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y; x \\<le> y; y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 5. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> x\n 6. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 8. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 9. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 10. \\<And>y x z.\n        \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> y + z \\<le> x\nA total of 16 subgoals...", "apply (simp add: less_le_not_le)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>x. x = d x \\<Longrightarrow> x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; y \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y; x \\<le> y; y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 4. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> x\n 5. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 7. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 8. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 9. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 10. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\nA total of 15 subgoals...", "apply simp"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; y \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y; x \\<le> y; y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> x\n 4. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 6. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 7. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 8. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 9. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 10. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\nA total of 14 subgoals...", "apply auto[1]"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y; x \\<le> y; y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> x\n 3. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 5. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 6. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 7. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 8. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 9. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 10. \\<And>x y z.\n        \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n        \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\nA total of 13 subgoals...", "apply simp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> x\n 2. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 4. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 5. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 6. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 7. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 8. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 9. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 10. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\nA total of 12 subgoals...", "apply (metis a_subid_aux2 ads_d_def)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 3. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 4. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 5. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 6. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 7. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 8. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 9. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 10. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\nA total of 11 subgoals...", "apply (metis a_subid_aux1' ads_d_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z; x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> y \\<cdot> z\n 2. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 3. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 4. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 5. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 6. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 7. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 8. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 9. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 10. \\<And>x y.\n        \\<lbrakk>x = d x; y = d y\\<rbrakk>\n        \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply (metis (no_types, lifting) ads_d_def dpdz.dom_glb)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk> \\<Longrightarrow> x \\<le> x + y\n 2. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 3. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 4. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 5. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 6. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 7. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 8. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 9. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y x.\n       \\<lbrakk>y = d y; x = d x\\<rbrakk> \\<Longrightarrow> y \\<le> x + y\n 2. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 3. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 4. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 5. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 6. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 7. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 8. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y = d y; x = d x; z = d z; y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> y + z \\<le> x\n 2. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 3. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 4. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 5. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 6. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 7. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x. x = d x \\<Longrightarrow> (0::'a) \\<le> x\n 2. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 3. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 4. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 5. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 6. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a. a = d a \\<Longrightarrow> a \\<le> (1::'a)\n 2. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 3. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 4. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 5. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply (metis a_subid' ads_d_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x = d x; y = d y; z = d z\\<rbrakk>\n       \\<Longrightarrow> x + y \\<cdot> z = (x + y) \\<cdot> (x + z)\n 2. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 3. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 4. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply (metis (no_types, lifting) ads_d_def dpdz.dom_distrib)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x = d x \\<Longrightarrow> x \\<cdot> ad x = (0::'a)\n 2. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 3. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply (metis ads_d_def ans1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x = d x \\<Longrightarrow> x + ad x = (1::'a)\n 2. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "apply (metis ads_d_def ans3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x = d x; y = d y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> ad y = x \\<cdot> ad y", "by simp"], ["", "end"], ["", "subsection \\<open>Further Properties\\<close>"], ["", "context antidomain_semiringl\n\nbegin"], ["", "lemma a_2_var: \"ad x \\<cdot> d y = 0 \\<longleftrightarrow> ad x \\<le> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<cdot> d y = (zero_class.zero::'a)) = (ad x \\<le> ad y)", "using local.a_gla local.ads_d_def local.dpdz.dom_weakly_local"], ["proof (prove)\nusing this:\n  (ad ?x \\<cdot> ?y = (zero_class.zero::'a)) = (ad ?x \\<le> ad ?y)\n  d ?x = ad (ad ?x)\n  (?x \\<cdot> ?y = (zero_class.zero::'a)) =\n  (?x \\<cdot> ad (ad ?y) = (zero_class.zero::'a))\n\ngoal (1 subgoal):\n 1. (ad x \\<cdot> d y = (zero_class.zero::'a)) = (ad x \\<le> ad y)", "by auto"], ["", "text \\<open>The following two lemmas give the Galois connection of Heyting algebras.\\<close>"], ["", "lemma da_shunt1: \"x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "assume \"x \\<le> d y + z\""], ["proof (state)\nthis:\n  x \\<le> d y + z\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "hence \"x \\<cdot> ad y \\<le> (d y + z) \\<cdot> ad y\""], ["proof (prove)\nusing this:\n  x \\<le> d y + z\n\ngoal (1 subgoal):\n 1. x \\<cdot> ad y \\<le> (d y + z) \\<cdot> ad y", "using mult_isor"], ["proof (prove)\nusing this:\n  x \\<le> d y + z\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. x \\<cdot> ad y \\<le> (d y + z) \\<cdot> ad y", "by blast"], ["proof (state)\nthis:\n  x \\<cdot> ad y \\<le> (d y + z) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "also"], ["proof (state)\nthis:\n  x \\<cdot> ad y \\<le> (d y + z) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "have \"... = d y \\<cdot> ad y + z \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d y + z) \\<cdot> ad y = d y \\<cdot> ad y + z \\<cdot> ad y", "by simp"], ["proof (state)\nthis:\n  (d y + z) \\<cdot> ad y = d y \\<cdot> ad y + z \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "also"], ["proof (state)\nthis:\n  (d y + z) \\<cdot> ad y = d y \\<cdot> ad y + z \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "have \"... \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d y \\<cdot> ad y + z \\<cdot> ad y \\<le> z", "by (simp add: a_subid_aux2 ads_d_def)"], ["proof (state)\nthis:\n  d y \\<cdot> ad y + z \\<cdot> ad y \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<le> d y + z \\<Longrightarrow> x \\<cdot> ad y \\<le> z", "finally"], ["proof (chain)\npicking this:\n  x \\<cdot> ad y \\<le> z", "show \"x \\<cdot> ad y \\<le> z\""], ["proof (prove)\nusing this:\n  x \\<cdot> ad y \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<cdot> ad y \\<le> z", "by simp"], ["proof (state)\nthis:\n  x \\<cdot> ad y \\<le> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma da_shunt2: \"x \\<le> ad y + z \\<Longrightarrow> x \\<cdot> d y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> ad y + z \\<Longrightarrow> x \\<cdot> d y \\<le> z", "using da_shunt1 local.a_add_idem local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ?x \\<le> d ?y + ?z \\<Longrightarrow> ?x \\<cdot> ad ?y \\<le> ?z\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. x \\<le> ad y + z \\<Longrightarrow> x \\<cdot> d y \\<le> z", "by auto"], ["", "lemma d_a_galois1: \"d x \\<cdot> ad y \\<le> d z \\<longleftrightarrow> d x \\<le> d z + d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> ad y \\<le> d z) = (d x \\<le> d z + d y)", "by (metis add_assoc local.a_gla local.ads_d_def local.am2 local.ans4 local.ans_d_def local.dnsz.dnso4)"], ["", "lemma d_a_galois2: \"d x \\<cdot> d y \\<le> d z \\<longleftrightarrow> d x \\<le> d z + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> d y \\<le> d z) = (d x \\<le> d z + ad y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (d x \\<cdot> d y \\<le> d z) = (d x \\<le> d z + ad y)", "have \"\\<And>a aa. ad ((a::'a) \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (a \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)", "using local.a2_eq' local.apd_d_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> apd_d ?y) = ad (?x \\<cdot> ?y)\n  apd_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (a \\<cdot> ad (ad aa)) = ad (a \\<cdot> aa)", "by force"], ["proof (state)\nthis:\n  ad (?a1 \\<cdot> ad (ad ?aa1)) = ad (?a1 \\<cdot> ?aa1)\n\ngoal (1 subgoal):\n 1. (d x \\<cdot> d y \\<le> d z) = (d x \\<le> d z + ad y)", "then"], ["proof (chain)\npicking this:\n  ad (?a1 \\<cdot> ad (ad ?aa1)) = ad (?a1 \\<cdot> ?aa1)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (?a1 \\<cdot> ad (ad ?aa1)) = ad (?a1 \\<cdot> ?aa1)\n\ngoal (1 subgoal):\n 1. (d x \\<cdot> d y \\<le> d z) = (d x \\<le> d z + ad y)", "by (metis d_a_galois1 local.a_export' local.ads_d_def local.ans_d_def)"], ["proof (state)\nthis:\n  (d x \\<cdot> d y \\<le> d z) = (d x \\<le> d z + ad y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_cancellation_1: \"d x \\<le> d y + d x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "have a: \"d (d x \\<cdot> ad y) = ad y \\<cdot> d x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (d x \\<cdot> ad y) = ad y \\<cdot> d x", "using local.a_closure' local.ads_d_def local.am2 local.ans_d_def"], ["proof (prove)\nusing this:\n  ans_d (ad ?x) = ad ?x\n  d ?x = ad (ad ?x)\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n  ans_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d (d x \\<cdot> ad y) = ad y \\<cdot> d x", "by auto"], ["proof (state)\nthis:\n  d (d x \\<cdot> ad y) = ad y \\<cdot> d x\n\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "hence \"d x \\<le> d (d x \\<cdot> ad y) + d y\""], ["proof (prove)\nusing this:\n  d (d x \\<cdot> ad y) = ad y \\<cdot> d x\n\ngoal (1 subgoal):\n 1. d x \\<le> d (d x \\<cdot> ad y) + d y", "using d_a_galois1 local.a_comm_var local.ads_d_def"], ["proof (prove)\nusing this:\n  d (d x \\<cdot> ad y) = ad y \\<cdot> d x\n  (d ?x \\<cdot> ad ?y \\<le> d ?z) = (d ?x \\<le> d ?z + d ?y)\n  ad ?x \\<cdot> ad ?y \\<le> ad ?y \\<cdot> ad ?x\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d x \\<le> d (d x \\<cdot> ad y) + d y", "by fastforce"], ["proof (state)\nthis:\n  d x \\<le> d (d x \\<cdot> ad y) + d y\n\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "thus ?thesis"], ["proof (prove)\nusing this:\n  d x \\<le> d (d x \\<cdot> ad y) + d y\n\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "using a add_commute local.ads_d_def local.am2"], ["proof (prove)\nusing this:\n  d x \\<le> d (d x \\<cdot> ad y) + d y\n  d (d x \\<cdot> ad y) = ad y \\<cdot> d x\n  ?a + ?b = ?b + ?a\n  d ?x = ad (ad ?x)\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n\ngoal (1 subgoal):\n 1. d x \\<le> d y + d x \\<cdot> ad y", "by auto"], ["proof (state)\nthis:\n  d x \\<le> d y + d x \\<cdot> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_cancellation_2: \"(d z + d y) \\<cdot> ad y \\<le> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d z + d y) \\<cdot> ad y \\<le> d z", "by (simp add: da_shunt1)"], ["", "lemma a_de_morgan: \"ad (ad x \\<cdot> ad y) = d (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> ad y) = d (x + y)", "by (simp add: local.ads_d_def)"], ["", "lemma a_de_morgan_var_3: \"ad (d x + d y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (d x + d y) = ad x \\<cdot> ad y", "using local.a_add_idem local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad (d x + d y) = ad x \\<cdot> ad y", "by auto"], ["", "lemma a_de_morgan_var_4: \"ad (d x \\<cdot> d y) = ad x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (d x \\<cdot> d y) = ad x + ad y", "using local.a_add_idem local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad (d x \\<cdot> d y) = ad x + ad y", "by auto"], ["", "lemma a_4: \"ad x \\<le> ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<le> ad (x \\<cdot> y)", "using local.a_add_idem local.a_antitone' local.dpdz.domain_1'' am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<le> ?y \\<Longrightarrow> ad ?y \\<le> ad ?x\n  ad (ad (?x \\<cdot> ?y)) \\<le> ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad (x \\<cdot> y)", "by fastforce"], ["", "lemma a_6: \"ad (d x \\<cdot> y) = ad x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (d x \\<cdot> y) = ad x + ad y", "using a_de_morgan_var_4 local.ads_d_def"], ["proof (prove)\nusing this:\n  ad (d ?x \\<cdot> d ?y) = ad ?x + ad ?y\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad (d x \\<cdot> y) = ad x + ad y", "by auto"], ["", "lemma a_7: \"d x \\<cdot> ad (d y + d z) = d x \\<cdot> ad y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> ad (d y + d z) = d x \\<cdot> ad y \\<cdot> ad z", "using a_de_morgan_var_3 local.mult.semigroup_axioms semigroup.assoc"], ["proof (prove)\nusing this:\n  ad (d ?x + d ?y) = ad ?x \\<cdot> ad ?y\n  semigroup (\\<cdot>)\n  semigroup ?f \\<Longrightarrow> ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> ad (d y + d z) = d x \\<cdot> ad y \\<cdot> ad z", "by fastforce"], ["", "lemma a_d_add_closure [simp]: \"d (ad x + ad y) = ad x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x + ad y) = ad x + ad y", "using local.a_add_idem local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. d (ad x + ad y) = ad x + ad y", "by auto"], ["", "lemma d_6 [simp]: \"d x + ad x \\<cdot> d y = d x + d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x + ad x \\<cdot> d y = d x + d y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x + ad x \\<cdot> d y = d x + d y", "have \"ad (ad x \\<cdot> (x + ad y)) = d (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> (x + ad y)) = d (x + y)", "by (simp add: distrib_left ads_d_def)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> (x + ad y)) = d (x + y)\n\ngoal (1 subgoal):\n 1. d x + ad x \\<cdot> d y = d x + d y", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> (x + ad y)) = d (x + y)\n\ngoal (1 subgoal):\n 1. d x + ad x \\<cdot> d y = d x + d y", "by (simp add: local.ads_d_def local.ans_d_def)"], ["proof (state)\nthis:\n  d x + ad x \\<cdot> d y = d x + d y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_7 [simp]: \"ad x + d x \\<cdot> ad y = ad x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x + d x \\<cdot> ad y = ad x + ad y", "by (metis a_d_add_closure local.ads_d_def local.ans4 local.s4)"], ["", "lemma a_mult_add: \"ad x \\<cdot> (y + x) = ad x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> (y + x) = ad x \\<cdot> y", "by (simp add: distrib_left)"], ["", "lemma kat_2: \"y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "assume a: \"y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (state)\nthis:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "hence \"d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y\""], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y", "using local.mult_isol mult_assoc"], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y", "by presburger"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "using local.join.le_bot ads_d_def"], ["proof (prove)\nusing this:\n  d x \\<cdot> y \\<cdot> ad z \\<le> d x \\<cdot> ad x \\<cdot> y\n  ?a \\<le> (zero_class.zero::'a) \\<Longrightarrow>\n  ?a = (zero_class.zero::'a)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "by auto"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kat_3: \"d x \\<cdot> y \\<cdot> ad z = 0 \\<Longrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z", "using local.a_zero_def local.ads_d_def local.am_d_def local.kat_3'"], ["proof (prove)\nusing this:\n  a_zero = ad (1::'a)\n  d ?x = ad (ad ?x)\n  am_d ?x = ad (ad ?x)\n  am_d ?x \\<cdot> ?y \\<cdot> ad ?z = a_zero \\<Longrightarrow>\n  am_d ?x \\<cdot> ?y = am_d ?x \\<cdot> ?y \\<cdot> am_d ?z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z", "by auto"], ["", "lemma kat_4: \"d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow> d x \\<cdot> y \\<le> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "using a_subid_aux1 mult_assoc ads_d_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ?y \\<le> ?y\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "by auto"], ["", "lemma kat_2_equiv: \"y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<longleftrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<cdot> ad z \\<le> ad x \\<cdot> y) =\n    (d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n 2. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "assume \"y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (state)\nthis:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (2 subgoals):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n 2. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "thus \"d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)", "by (simp add: kat_2)"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "assume 1: \"d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"y \\<cdot> ad z = (d x + ad x) \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<cdot> ad z = (d x + ad x) \\<cdot> y \\<cdot> ad z", "by (simp add: local.ads_d_def)"], ["proof (state)\nthis:\n  y \\<cdot> ad z = (d x + ad x) \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "also"], ["proof (state)\nthis:\n  y \\<cdot> ad z = (d x + ad x) \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"... = d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> y \\<cdot> ad z =\n    d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z", "using local.distrib_right"], ["proof (prove)\nusing this:\n  (?a + ?b) \\<cdot> ?c = ?a \\<cdot> ?c + ?b \\<cdot> ?c\n\ngoal (1 subgoal):\n 1. (d x + ad x) \\<cdot> y \\<cdot> ad z =\n    d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z", "by presburger"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> y \\<cdot> ad z =\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "also"], ["proof (state)\nthis:\n  (d x + ad x) \\<cdot> y \\<cdot> ad z =\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"... = ad x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z =\n    ad x \\<cdot> y \\<cdot> ad z", "using \"1\""], ["proof (prove)\nusing this:\n  d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z =\n    ad x \\<cdot> y \\<cdot> ad z", "by auto"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z =\n  ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "also"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z =\n  ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"... \\<le> ad x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<cdot> ad z \\<le> ad x \\<cdot> y", "by (simp add: local.a_subid_aux2)"], ["proof (state)\nthis:\n  ad x \\<cdot> y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a) \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "finally"], ["proof (chain)\npicking this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y", "show \"y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y", "."], ["proof (state)\nthis:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kat_4_equiv: \"d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z \\<longleftrightarrow> d x \\<cdot> y \\<le> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z) =\n    (d x \\<cdot> y \\<le> y \\<cdot> d z)", "using local.ads_d_def local.dpdz.d_preserves_equation"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  (ad (ad ?y) \\<cdot> ?x \\<le> ?x \\<cdot> ad (ad ?z)) =\n  (ad (ad ?y) \\<cdot> ?x = ad (ad ?y) \\<cdot> ?x \\<cdot> ad (ad ?z))\n\ngoal (1 subgoal):\n 1. (d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z) =\n    (d x \\<cdot> y \\<le> y \\<cdot> d z)", "by auto"], ["", "lemma kat_3_equiv_opp: \"ad z \\<cdot> y \\<cdot> d x = 0 \\<longleftrightarrow> y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n    (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n    (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)", "have \"ad z \\<cdot> (y \\<cdot> d x) = 0 \\<longrightarrow> (ad z \\<cdot> y \\<cdot> d x = 0) = (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad z \\<cdot> (y \\<cdot> d x) = (zero_class.zero::'a) \\<longrightarrow>\n    (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n    (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)", "by (metis (no_types, hide_lams) add_commute local.add_zerol local.ads_d_def local.as3 local.distrib_right' local.mult_1_left mult_assoc)"], ["proof (state)\nthis:\n  ad z \\<cdot> (y \\<cdot> d x) = (zero_class.zero::'a) \\<longrightarrow>\n  (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n  (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n    (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad z \\<cdot> (y \\<cdot> d x) = (zero_class.zero::'a) \\<longrightarrow>\n  (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n  (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)\n\ngoal (1 subgoal):\n 1. (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n    (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)", "by (metis a_4 local.a_add_idem local.a_gla2 local.ads_d_def mult_assoc am_add_op_def)"], ["proof (state)\nthis:\n  (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a)) =\n  (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kat_4_equiv_opp: \"y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x \\<longleftrightarrow> y \\<cdot> d x \\<le> d z \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x) =\n    (y \\<cdot> d x \\<le> d z \\<cdot> y)", "using kat_2_equiv kat_3_equiv_opp local.ads_d_def"], ["proof (prove)\nusing this:\n  (?y \\<cdot> ad ?z \\<le> ad ?x \\<cdot> ?y) =\n  (d ?x \\<cdot> ?y \\<cdot> ad ?z = (zero_class.zero::'a))\n  (ad ?z \\<cdot> ?y \\<cdot> d ?x = (zero_class.zero::'a)) =\n  (?y \\<cdot> d ?x = d ?z \\<cdot> ?y \\<cdot> d ?x)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. (y \\<cdot> d x = d z \\<cdot> y \\<cdot> d x) =\n    (y \\<cdot> d x \\<le> d z \\<cdot> y)", "by auto"], ["", "subsection \\<open>Forward Box and Diamond Operators\\<close>"], ["", "lemma fdemodalisation22: \"|x\\<rangle> y \\<le> d z \\<longleftrightarrow> ad z \\<cdot> x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "have \"|x\\<rangle> y \\<le> d z \\<longleftrightarrow> d (x \\<cdot> y) \\<le> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) = (d (x \\<cdot> y) \\<le> d z)", "by (simp add: fdia_def ads_d_def)"], ["proof (state)\nthis:\n  ( |x\\<rangle> y \\<le> d z) = (d (x \\<cdot> y) \\<le> d z)\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "also"], ["proof (state)\nthis:\n  ( |x\\<rangle> y \\<le> d z) = (d (x \\<cdot> y) \\<le> d z)\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "have \"... \\<longleftrightarrow> ad z \\<cdot> d (x \\<cdot> y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d (x \\<cdot> y) \\<le> d z) =\n    (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a))", "by (metis add_commute local.a_gla local.ads_d_def local.ans4)"], ["proof (state)\nthis:\n  (d (x \\<cdot> y) \\<le> d z) =\n  (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a))\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "also"], ["proof (state)\nthis:\n  (d (x \\<cdot> y) \\<le> d z) =\n  (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a))\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "have \"... \\<longleftrightarrow> ad z \\<cdot> x \\<cdot> y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a)) =\n    (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))", "using dpdz.dom_weakly_local mult_assoc ads_d_def"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y = (zero_class.zero::'a)) =\n  (?x \\<cdot> ad (ad ?y) = (zero_class.zero::'a))\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a)) =\n    (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))", "by auto"], ["proof (state)\nthis:\n  (ad z \\<cdot> d (x \\<cdot> y) = (zero_class.zero::'a)) =\n  (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "finally"], ["proof (chain)\npicking this:\n  ( |x\\<rangle> y \\<le> d z) =\n  (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  ( |x\\<rangle> y \\<le> d z) =\n  (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "using dpdz.dom_weakly_local ads_d_def"], ["proof (prove)\nusing this:\n  ( |x\\<rangle> y \\<le> d z) =\n  (ad z \\<cdot> x \\<cdot> y = (zero_class.zero::'a))\n  (?x \\<cdot> ?y = (zero_class.zero::'a)) =\n  (?x \\<cdot> ad (ad ?y) = (zero_class.zero::'a))\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ( |x\\<rangle> y \\<le> d z) =\n    (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))", "by auto"], ["proof (state)\nthis:\n  ( |x\\<rangle> y \\<le> d z) =\n  (ad z \\<cdot> x \\<cdot> d y = (zero_class.zero::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dia_diff_var: \"|x\\<rangle> y \\<le> |x\\<rangle> (d y \\<cdot> ad z) + |x\\<rangle> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "have 1: \"|x\\<rangle> (d y \\<cdot> d z) \\<le> |x\\<rangle> (1 \\<cdot> d z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> (d y \\<cdot> d z) \\<le>  |x\\<rangle> ((1::'a) \\<cdot> d z)", "using dpdz.dom_glb_eq ds.fd_subdist fdia_def ads_d_def"], ["proof (prove)\nusing this:\n  (ad (ad ?x) \\<le> ad (ad ?y) \\<cdot> ad (ad ?z)) =\n  (ad (ad ?x) \\<le> ad (ad ?y) \\<and> ad (ad ?x) \\<le> ad (ad ?z))\n   |?x\\<rangle> (ad (ad ?y) \\<cdot> ad (ad ?z))\n  \\<le>  |?x\\<rangle> ?y \\<cdot>  |?x\\<rangle> ?z\n   |?x\\<rangle> ?y = ad (ad (?x \\<cdot> ?y))\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> (d y \\<cdot> d z) \\<le>  |x\\<rangle> ((1::'a) \\<cdot> d z)", "by force"], ["proof (state)\nthis:\n   |x\\<rangle> (d y \\<cdot> d z) \\<le>  |x\\<rangle> ((1::'a) \\<cdot> d z)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "have \"|x\\<rangle> y = |x\\<rangle> (d y \\<cdot> (ad z + d z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> y =  |x\\<rangle> (d y \\<cdot> (ad z + d z))", "by (metis as3 add_comm ds.fdia_d_simp mult_1_right ads_d_def)"], ["proof (state)\nthis:\n   |x\\<rangle> y =  |x\\<rangle> (d y \\<cdot> (ad z + d z))\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "also"], ["proof (state)\nthis:\n   |x\\<rangle> y =  |x\\<rangle> (d y \\<cdot> (ad z + d z))\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "have \"... = |x\\<rangle> (d y \\<cdot> ad z) + |x\\<rangle> (d y \\<cdot> d z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> (d y \\<cdot> (ad z + d z)) =\n     |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)", "by (simp add: local.distrib_left local.ds.fdia_add1)"], ["proof (state)\nthis:\n   |x\\<rangle> (d y \\<cdot> (ad z + d z)) =\n   |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "also"], ["proof (state)\nthis:\n   |x\\<rangle> (d y \\<cdot> (ad z + d z)) =\n   |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "have \"... \\<le> |x\\<rangle> (d y \\<cdot> ad z) + |x\\<rangle> (1 \\<cdot> d z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)\n    \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +\n           |x\\<rangle> ((1::'a) \\<cdot> d z)", "using \"1\" local.join.sup.mono"], ["proof (prove)\nusing this:\n   |x\\<rangle> (d y \\<cdot> d z) \\<le>  |x\\<rangle> ((1::'a) \\<cdot> d z)\n  \\<lbrakk>?c \\<le> ?a; ?d \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?c + ?d \\<le> ?a + ?b\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)\n    \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +\n           |x\\<rangle> ((1::'a) \\<cdot> d z)", "by blast"], ["proof (state)\nthis:\n   |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> (d y \\<cdot> d z)\n  \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> ((1::'a) \\<cdot> d z)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "finally"], ["proof (chain)\npicking this:\n   |x\\<rangle> y\n  \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> ((1::'a) \\<cdot> d z)", "show ?thesis"], ["proof (prove)\nusing this:\n   |x\\<rangle> y\n  \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> ((1::'a) \\<cdot> d z)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z", "by (simp add: fdia_def ads_d_def)"], ["proof (state)\nthis:\n   |x\\<rangle> y \\<le>  |x\\<rangle> (d y \\<cdot> ad z) +  |x\\<rangle> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dia_diff: \"|x\\<rangle> y \\<cdot> ad ( |x\\<rangle> z ) \\<le> |x\\<rangle> (d y \\<cdot> ad z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<cdot> ad ( |x\\<rangle> z)\n    \\<le>  |x\\<rangle> (d y \\<cdot> ad z)", "using fdia_def dia_diff_var d_a_galois2 ads_d_def"], ["proof (prove)\nusing this:\n   |?x\\<rangle> ?y = ad (ad (?x \\<cdot> ?y))\n   |?x\\<rangle> ?y\n  \\<le>  |?x\\<rangle> (d ?y \\<cdot> ad ?z) +  |?x\\<rangle> ?z\n  (d ?x \\<cdot> d ?y \\<le> d ?z) = (d ?x \\<le> d ?z + ad ?y)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1.  |x\\<rangle> y \\<cdot> ad ( |x\\<rangle> z)\n    \\<le>  |x\\<rangle> (d y \\<cdot> ad z)", "by metis"], ["", "lemma fdia_export_2: \"ad y \\<cdot> |x\\<rangle> z = |ad y \\<cdot> x\\<rangle> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y \\<cdot>  |x\\<rangle> z =  |ad y \\<cdot> x\\<rangle> z", "using local.am_d_def local.d_a_export local.fdia_def mult_assoc"], ["proof (prove)\nusing this:\n  am_d ?x = ad (ad ?x)\n  am_d (ad ?x \\<cdot> ?y) = ad ?x \\<cdot> am_d ?y\n   |?x\\<rangle> ?y = ad (ad (?x \\<cdot> ?y))\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. ad y \\<cdot>  |x\\<rangle> z =  |ad y \\<cdot> x\\<rangle> z", "by auto"], ["", "lemma fdia_split: \"|x\\<rangle> y = d z \\<cdot> |x\\<rangle> y + ad z \\<cdot> |x\\<rangle> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x\\<rangle> y =\n    d z \\<cdot>  |x\\<rangle> y + ad z \\<cdot>  |x\\<rangle> y", "by (metis mult_onel ans3 distrib_right ads_d_def)"], ["", "definition fbox :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"( |_] _)\" [61,81] 82) where\n  \"|x] y = ad (x \\<cdot> ad y)\""], ["", "text \\<open>The next lemmas establish the De Morgan duality between boxes and diamonds.\\<close>"], ["", "lemma fdia_fbox_de_morgan_2: \"ad ( |x\\<rangle> y) = |x] ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad ( |x\\<rangle> y) =  |x] ad y", "using fbox_def local.a_closure local.a_loc local.am_d_def local.fdia_def"], ["proof (prove)\nusing this:\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n  am_d (ad ?x) = ad ?x\n  ad (?x \\<cdot> am_d ?y) = ad (?x \\<cdot> ?y)\n  am_d ?x = ad (ad ?x)\n   |?x\\<rangle> ?y = ad (ad (?x \\<cdot> ?y))\n\ngoal (1 subgoal):\n 1. ad ( |x\\<rangle> y) =  |x] ad y", "by auto"], ["", "lemma fbox_simp: \"|x] y = |x] d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] y =  |x] d y", "using fbox_def local.a_add_idem local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n  ad ?x \\<oplus> ad ?x = ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1.  |x] y =  |x] d y", "by auto"], ["", "lemma fbox_dom [simp]: \"|x] 0 = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (zero_class.zero::'a) = ad x", "by (simp add: fbox_def)"], ["", "lemma fbox_add1: \"|x] (d y \\<cdot> d z) = |x] y \\<cdot> |x] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (d y \\<cdot> d z) =  |x] y \\<cdot>  |x] z", "using a_de_morgan_var_4 fbox_def local.distrib_left"], ["proof (prove)\nusing this:\n  ad (d ?x \\<cdot> d ?y) = ad ?x + ad ?y\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n\ngoal (1 subgoal):\n 1.  |x] (d y \\<cdot> d z) =  |x] y \\<cdot>  |x] z", "by auto"], ["", "lemma fbox_add2: \"|x + y] z = |x] z \\<cdot> |y] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x + y] z =  |x] z \\<cdot>  |y] z", "by (simp add: fbox_def)"], ["", "lemma fbox_mult: \"|x \\<cdot> y] z = |x] |y] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x \\<cdot> y] z =  |x]  |y] z", "using fbox_def local.a2_eq' local.apd_d_def mult_assoc"], ["proof (prove)\nusing this:\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n  ad (?x \\<cdot> apd_d ?y) = ad (?x \\<cdot> ?y)\n  apd_d ?x = ad (ad ?x)\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1.  |x \\<cdot> y] z =  |x]  |y] z", "by auto"], ["", "lemma fbox_zero [simp]: \"|0] x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |(zero_class.zero::'a)] x = (1::'a)", "by (simp add: fbox_def)"], ["", "lemma fbox_one [simp]: \"|1] x = d x\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |(1::'a)] x = d x", "by (simp add: fbox_def ads_d_def)"], ["", "lemma fbox_iso: \"d x \\<le> d y \\<Longrightarrow> |z] x \\<le> |z] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<le> d y \\<Longrightarrow>  |z] x \\<le>  |z] y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<le> d y \\<Longrightarrow>  |z] x \\<le>  |z] y", "assume \"d x \\<le> d y\""], ["proof (state)\nthis:\n  d x \\<le> d y\n\ngoal (1 subgoal):\n 1. d x \\<le> d y \\<Longrightarrow>  |z] x \\<le>  |z] y", "hence \"ad y \\<le> ad x\""], ["proof (prove)\nusing this:\n  d x \\<le> d y\n\ngoal (1 subgoal):\n 1. ad y \\<le> ad x", "using local.a_add_idem local.a_antitone' local.ads_d_def am_add_op_def"], ["proof (prove)\nusing this:\n  d x \\<le> d y\n  ad ?x \\<oplus> ad ?x = ad ?x\n  ?x \\<le> ?y \\<Longrightarrow> ad ?y \\<le> ad ?x\n  d ?x = ad (ad ?x)\n  ?x \\<oplus> ?y \\<equiv> ad (ad ?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. ad y \\<le> ad x", "by fastforce"], ["proof (state)\nthis:\n  ad y \\<le> ad x\n\ngoal (1 subgoal):\n 1. d x \\<le> d y \\<Longrightarrow>  |z] x \\<le>  |z] y", "hence \"z \\<cdot> ad y \\<le> z \\<cdot> ad x\""], ["proof (prove)\nusing this:\n  ad y \\<le> ad x\n\ngoal (1 subgoal):\n 1. z \\<cdot> ad y \\<le> z \\<cdot> ad x", "by (simp add: mult_isol)"], ["proof (state)\nthis:\n  z \\<cdot> ad y \\<le> z \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. d x \\<le> d y \\<Longrightarrow>  |z] x \\<le>  |z] y", "thus \"|z] x \\<le> |z] y\""], ["proof (prove)\nusing this:\n  z \\<cdot> ad y \\<le> z \\<cdot> ad x\n\ngoal (1 subgoal):\n 1.  |z] x \\<le>  |z] y", "by (simp add: fbox_def a_antitone')"], ["proof (state)\nthis:\n   |z] x \\<le>  |z] y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_antitone_var: \"x \\<le> y \\<Longrightarrow> |y] z \\<le> |x] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>  |y] z \\<le>  |x] z", "by (simp add: fbox_def a_antitone mult_isor)"], ["", "lemma fbox_subdist_1: \"|x] (d y \\<cdot> d z) \\<le> |x] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (d y \\<cdot> d z) \\<le>  |x] y", "using a_de_morgan_var_4 fbox_def local.a_supdist_var local.distrib_left"], ["proof (prove)\nusing this:\n  ad (d ?x \\<cdot> d ?y) = ad ?x + ad ?y\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n  ad (?x + ?y) \\<le> ad ?x\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n\ngoal (1 subgoal):\n 1.  |x] (d y \\<cdot> d z) \\<le>  |x] y", "by force"], ["", "lemma fbox_subdist_2: \"|x] y \\<le>|x] (d y + d z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] y \\<le>  |x] (d y + d z)", "by (simp add: fbox_iso ads_d_def)"], ["", "lemma fbox_subdist: \"|x] d y + |x] d z \\<le> |x] (d y + d z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] d y +  |x] d z \\<le>  |x] (d y + d z)", "by (simp add: fbox_iso sup_least ads_d_def)"], ["", "lemma fbox_diff_var: \"|x] (d y + ad z) \\<cdot> |x] z \\<le> |x] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y", "have \"ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)", "using local.dpdz.dsg4"], ["proof (prove)\nusing this:\n  ad (ad ?x) \\<cdot> ad (ad ?y) = ad (ad ?y) \\<cdot> ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)", "by auto"], ["proof (state)\nthis:\n  ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y", "then"], ["proof (chain)\npicking this:\n  ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)", "have \"d (d (d y + ad z) \\<cdot> d z) \\<le> d y\""], ["proof (prove)\nusing this:\n  ad (ad y) \\<cdot> ad (ad z) = ad (ad z + ad y)\n\ngoal (1 subgoal):\n 1. d (d (d y + ad z) \\<cdot> d z) \\<le> d y", "by (simp add: local.a_subid_aux1' local.ads_d_def)"], ["proof (state)\nthis:\n  d (d (d y + ad z) \\<cdot> d z) \\<le> d y\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y", "then"], ["proof (chain)\npicking this:\n  d (d (d y + ad z) \\<cdot> d z) \\<le> d y", "show ?thesis"], ["proof (prove)\nusing this:\n  d (d (d y + ad z) \\<cdot> d z) \\<le> d y\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y", "by (metis fbox_add1 fbox_iso)"], ["proof (state)\nthis:\n   |x] (d y + ad z) \\<cdot>  |x] z \\<le>  |x] y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_diff: \"|x] (d y + ad z) \\<le> |x] y + ad ( |x] z )\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have f1: \"\\<And>a. ad (ad (ad (a::'a))) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "using local.a_closure' local.ans_d_def"], ["proof (prove)\nusing this:\n  ans_d (ad ?x) = ad ?x\n  ans_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "by force"], ["proof (state)\nthis:\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have f2: \"\\<And>a aa. ad (ad (a::'a)) + ad aa = ad (ad a \\<cdot> aa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad a) + ad aa = ad (ad a \\<cdot> aa)", "using local.ans_d_def"], ["proof (prove)\nusing this:\n  ans_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad a) + ad aa = ad (ad a \\<cdot> aa)", "by auto"], ["proof (state)\nthis:\n  ad (ad ?a1) + ad ?aa1 = ad (ad ?a1 \\<cdot> ?aa1)\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have f3: \"\\<And>a aa. ad ((a::'a) + aa) = ad (aa + a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (a + aa) = ad (aa + a)", "by (simp add: local.am2)"], ["proof (state)\nthis:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "then"], ["proof (chain)\npicking this:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)", "have f4: \"\\<And>a aa. ad (ad (ad (a::'a) \\<cdot> aa)) = ad (ad aa + a)\""], ["proof (prove)\nusing this:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> aa)) = ad (ad aa + a)", "using f2 f1"], ["proof (prove)\nusing this:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n  ad (ad ?a1) + ad ?aa1 = ad (ad ?a1 \\<cdot> ?aa1)\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a \\<cdot> aa)) = ad (ad aa + a)", "by (metis (no_types) local.ans4)"], ["proof (state)\nthis:\n  ad (ad (ad ?a1 \\<cdot> ?aa1)) = ad (ad ?aa1 + ?a1)\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have f5: \"\\<And>a aa ab. ad ((a::'a) \\<cdot> (aa + ab)) = ad (a \\<cdot> (ab + aa))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab. ad (a \\<cdot> (aa + ab)) = ad (a \\<cdot> (ab + aa))", "using f3 local.distrib_left"], ["proof (prove)\nusing this:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n\ngoal (1 subgoal):\n 1. \\<And>a aa ab. ad (a \\<cdot> (aa + ab)) = ad (a \\<cdot> (ab + aa))", "by presburger"], ["proof (state)\nthis:\n  ad (?a1 \\<cdot> (?aa1 + ?ab1)) = ad (?a1 \\<cdot> (?ab1 + ?aa1))\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have f6: \"\\<And>a aa. ad (ad (ad (a::'a) + aa)) = ad (ad aa \\<cdot> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a + aa)) = ad (ad aa \\<cdot> a)", "using f3 f1"], ["proof (prove)\nusing this:\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1. \\<And>a aa. ad (ad (ad a + aa)) = ad (ad aa \\<cdot> a)", "by fastforce"], ["proof (state)\nthis:\n  ad (ad (ad ?a1 + ?aa1)) = ad (ad ?aa1 \\<cdot> ?a1)\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "have \"ad (x \\<cdot> ad (y + ad z)) \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> ad (y + ad z))\n    \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))", "using f5 f2 f1"], ["proof (prove)\nusing this:\n  ad (?a1 \\<cdot> (?aa1 + ?ab1)) = ad (?a1 \\<cdot> (?ab1 + ?aa1))\n  ad (ad ?a1) + ad ?aa1 = ad (ad ?a1 \\<cdot> ?aa1)\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1. ad (x \\<cdot> ad (y + ad z))\n    \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))", "by (metis (no_types) a_mult_add fbox_def fbox_subdist_1 local.a_gla2 local.ads_d_def local.ans4 local.distrib_left local.gla_1 mult_assoc)"], ["proof (state)\nthis:\n  ad (x \\<cdot> ad (y + ad z))\n  \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "then"], ["proof (chain)\npicking this:\n  ad (x \\<cdot> ad (y + ad z))\n  \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (x \\<cdot> ad (y + ad z))\n  \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "using f6 f4 f3 f1"], ["proof (prove)\nusing this:\n  ad (x \\<cdot> ad (y + ad z))\n  \\<le> ad (ad (x \\<cdot> ad z) \\<cdot> (x \\<cdot> ad y))\n  ad (ad (ad ?a1 + ?aa1)) = ad (ad ?aa1 \\<cdot> ?a1)\n  ad (ad (ad ?a1 \\<cdot> ?aa1)) = ad (ad ?aa1 + ?a1)\n  ad (?a1 + ?aa1) = ad (?aa1 + ?a1)\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1.  |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)", "by (simp add: fbox_def local.ads_d_def)"], ["proof (state)\nthis:\n   |x] (d y + ad z) \\<le>  |x] y + ad ( |x] z)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context antidomain_semiring\n\nbegin"], ["", "lemma kat_1: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow> y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "assume a: \"d x \\<cdot> y \\<le> y \\<cdot> d z\""], ["proof (state)\nthis:\n  d x \\<cdot> y \\<le> y \\<cdot> d z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"y \\<cdot> ad z = d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<cdot> ad z =\n    d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z", "by (metis local.ads_d_def local.as3 local.distrib_right local.mult_1_left)"], ["proof (state)\nthis:\n  y \\<cdot> ad z = d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "also"], ["proof (state)\nthis:\n  y \\<cdot> ad z = d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"... \\<le> y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n    \\<le> y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z", "by (metis a add_iso mult_isor mult_assoc)"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n  \\<le> y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "also"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z + ad x \\<cdot> y \\<cdot> ad z\n  \\<le> y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "have \"... = ad x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z =\n    ad x \\<cdot> y \\<cdot> ad z", "by (simp add: ads_d_def)"], ["proof (state)\nthis:\n  y \\<cdot> (d z \\<cdot> ad z) + ad x \\<cdot> y \\<cdot> ad z =\n  ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    y \\<cdot> ad z \\<le> ad x \\<cdot> y", "finally"], ["proof (chain)\npicking this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<cdot> ad z", "show \"y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y", "using local.a_subid_aux2 local.dual_order.trans"], ["proof (prove)\nusing this:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y \\<cdot> ad z\n  ?x \\<cdot> ad ?y \\<le> ?x\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. y \\<cdot> ad z \\<le> ad x \\<cdot> y", "by blast"], ["proof (state)\nthis:\n  y \\<cdot> ad z \\<le> ad x \\<cdot> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kat_1_equiv: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<longleftrightarrow> y \\<cdot> ad z \\<le> ad x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> y \\<le> y \\<cdot> d z) =\n    (y \\<cdot> ad z \\<le> ad x \\<cdot> y)", "using kat_1 kat_2 kat_3 kat_4"], ["proof (prove)\nusing this:\n  d ?x \\<cdot> ?y \\<le> ?y \\<cdot> d ?z \\<Longrightarrow>\n  ?y \\<cdot> ad ?z \\<le> ad ?x \\<cdot> ?y\n  ?y \\<cdot> ad ?z \\<le> ad ?x \\<cdot> ?y \\<Longrightarrow>\n  d ?x \\<cdot> ?y \\<cdot> ad ?z = (zero_class.zero::'a)\n  d ?x \\<cdot> ?y \\<cdot> ad ?z = (zero_class.zero::'a) \\<Longrightarrow>\n  d ?x \\<cdot> ?y = d ?x \\<cdot> ?y \\<cdot> d ?z\n  d ?x \\<cdot> ?y = d ?x \\<cdot> ?y \\<cdot> d ?z \\<Longrightarrow>\n  d ?x \\<cdot> ?y \\<le> ?y \\<cdot> d ?z\n\ngoal (1 subgoal):\n 1. (d x \\<cdot> y \\<le> y \\<cdot> d z) =\n    (y \\<cdot> ad z \\<le> ad x \\<cdot> y)", "by blast"], ["", "lemma kat_3_equiv': \"d x \\<cdot> y \\<cdot> ad z = 0 \\<longleftrightarrow> d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> y \\<cdot> ad z = (zero_class.zero::'a)) =\n    (d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z)", "by (simp add: kat_1_equiv local.kat_2_equiv local.kat_4_equiv)"], ["", "lemma kat_1_equiv_opp: \"y \\<cdot> d x \\<le> d z \\<cdot> y \\<longleftrightarrow> ad z \\<cdot> y \\<le> y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<cdot> d x \\<le> d z \\<cdot> y) =\n    (ad z \\<cdot> y \\<le> y \\<cdot> ad x)", "by (metis kat_1_equiv local.a_closure' local.ads_d_def local.ans_d_def)"], ["", "lemma kat_2_equiv_opp: \"ad z \\<cdot> y \\<le> y \\<cdot> ad x \\<longleftrightarrow> ad z \\<cdot> y \\<cdot> d x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad z \\<cdot> y \\<le> y \\<cdot> ad x) =\n    (ad z \\<cdot> y \\<cdot> d x = (zero_class.zero::'a))", "by (simp add: kat_1_equiv_opp local.kat_3_equiv_opp local.kat_4_equiv_opp)"], ["", "lemma fbox_one_1 [simp]: \"|x] 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] (1::'a) = (1::'a)", "by (simp add: fbox_def)"], ["", "lemma fbox_demodalisation3: \"d y \\<le> |x] d z \\<longleftrightarrow> d y \\<cdot> x \\<le> x \\<cdot> d z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d y \\<le>  |x] d z) = (d y \\<cdot> x \\<le> x \\<cdot> d z)", "by (simp add: fbox_def a_gla kat_2_equiv_opp mult_assoc ads_d_def)"], ["", "end"], ["", "subsection \\<open>Antidomain Kleene Algebras\\<close>"], ["", "class antidomain_left_kleene_algebra = antidomain_semiringl + left_kleene_algebra_zerol\n\nbegin"], ["", "sublocale dka: domain_left_kleene_algebra \"(+)\" \"(\\<cdot>)\" 1 0 d \"(\\<le>)\" \"(<)\" star\n  rewrites \"domain_semiringl.fd (\\<cdot>) d x y \\<equiv> |x\\<rangle> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.domain_left_kleene_algebra (+) (\\<cdot>) (1::'a)\n     (zero_class.zero::'a) d (\\<le>) (<) star &&&\n    domain_semiringl.fd (\\<cdot>) d x y \\<equiv>  |x\\<rangle> y", "by (unfold_locales, auto simp add: local.ads_d_def ans_d_def)"], ["", "lemma a_star [simp]: \"ad (x\\<^sup>\\<star>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x\\<^sup>\\<star>) = (zero_class.zero::'a)", "using dka.dom_star local.a_very_costrict'' local.ads_d_def"], ["proof (prove)\nusing this:\n  d (?x\\<^sup>\\<star>) = (1::'a)\n  (ad ?x = (1::'a)) = (?x = (zero_class.zero::'a))\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad (x\\<^sup>\\<star>) = (zero_class.zero::'a)", "by force"], ["", "lemma fbox_star_unfold [simp]: \"|1] z \\<cdot> |x] |x\\<^sup>\\<star>] z = |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "have \"ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) = ad (x\\<^sup>\\<star> \\<cdot> ad z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n    ad (x\\<^sup>\\<star> \\<cdot> ad z)", "using local.conway.dagger_unfoldl_distr mult_assoc"], ["proof (prove)\nusing this:\n  ?y + ?x \\<cdot> ?x\\<^sup>\\<star> \\<cdot> ?y = ?x\\<^sup>\\<star> \\<cdot> ?y\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n    ad (x\\<^sup>\\<star> \\<cdot> ad z)", "by auto"], ["proof (state)\nthis:\n  ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n  ad (x\\<^sup>\\<star> \\<cdot> ad z)\n\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "then"], ["proof (chain)\npicking this:\n  ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n  ad (x\\<^sup>\\<star> \\<cdot> ad z)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n  ad (x\\<^sup>\\<star> \\<cdot> ad z)\n\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "using local.a_closure' local.ans_d_def local.fbox_def local.fdia_def local.fdia_fbox_de_morgan_2"], ["proof (prove)\nusing this:\n  ad (ad z + x \\<cdot> (x\\<^sup>\\<star> \\<cdot> ad z)) =\n  ad (x\\<^sup>\\<star> \\<cdot> ad z)\n  ans_d (ad ?x) = ad ?x\n  ans_d ?x = ad (ad ?x)\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n   |?x\\<rangle> ?y = ad (ad (?x \\<cdot> ?y))\n  ad ( |?x\\<rangle> ?y) =  |?x] ad ?y\n\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "by fastforce"], ["proof (state)\nthis:\n   |(1::'a)] z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_star_unfold_var [simp]: \"d z \\<cdot> |x] |x\\<^sup>\\<star>] z = |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "using fbox_star_unfold"], ["proof (prove)\nusing this:\n   |(1::'a)] ?z \\<cdot>  |?x]  |?x\\<^sup>\\<star>] ?z =\n   |?x\\<^sup>\\<star>] ?z\n\ngoal (1 subgoal):\n 1. d z \\<cdot>  |x]  |x\\<^sup>\\<star>] z =  |x\\<^sup>\\<star>] z", "by auto"], ["", "lemma fbox_star_unfoldr [simp]: \"|1] z \\<cdot> |x\\<^sup>\\<star>] |x] z = |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |(1::'a)] z \\<cdot>  |x\\<^sup>\\<star>]  |x] z =  |x\\<^sup>\\<star>] z", "by (metis fbox_star_unfold fbox_mult star_slide_var)"], ["", "lemma fbox_star_unfoldr_var [simp]: \"d z \\<cdot> |x\\<^sup>\\<star>] |x] z = |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d z \\<cdot>  |x\\<^sup>\\<star>]  |x] z =  |x\\<^sup>\\<star>] z", "using fbox_star_unfoldr"], ["proof (prove)\nusing this:\n   |(1::'a)] ?z \\<cdot>  |?x\\<^sup>\\<star>]  |?x] ?z =\n   |?x\\<^sup>\\<star>] ?z\n\ngoal (1 subgoal):\n 1. d z \\<cdot>  |x\\<^sup>\\<star>]  |x] z =  |x\\<^sup>\\<star>] z", "by auto"], ["", "lemma fbox_star_induct_var: \"d y \\<le> |x] y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "assume a1: \"d y \\<le> |x] y\""], ["proof (state)\nthis:\n  d y \\<le>  |x] y\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "have \"\\<And>a. ad (ad (ad (a::'a))) = ad a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "using local.a_closure' local.ans_d_def"], ["proof (prove)\nusing this:\n  ans_d (ad ?x) = ad ?x\n  ans_d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a. ad (ad (ad a)) = ad a", "by auto"], ["proof (state)\nthis:\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "then"], ["proof (chain)\npicking this:\n  ad (ad (ad ?a1)) = ad ?a1", "have \"ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y\""], ["proof (prove)\nusing this:\n  ad (ad (ad ?a1)) = ad ?a1\n\ngoal (1 subgoal):\n 1. ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y", "using a1"], ["proof (prove)\nusing this:\n  ad (ad (ad ?a1)) = ad ?a1\n  d y \\<le>  |x] y\n\ngoal (1 subgoal):\n 1. ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y", "by (metis dka.fdia_star_induct local.a_export' local.ads_d_def local.ans4 local.ans_d_def local.eq_refl local.fbox_def local.fdia_def local.meet_ord_def)"], ["proof (state)\nthis:\n  ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "then"], ["proof (chain)\npicking this:\n  ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y", "have \"ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = zero_class.zero\""], ["proof (prove)\nusing this:\n  ad (ad (x\\<^sup>\\<star> \\<cdot> ad y)) \\<le> ad y\n\ngoal (1 subgoal):\n 1. ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = (zero_class.zero::'a)", "by (metis (no_types) add_commute local.a_2_var local.ads_d_def local.ans4)"], ["proof (state)\nthis:\n  ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = (zero_class.zero::'a)\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y \\<Longrightarrow> d y \\<le>  |x\\<^sup>\\<star>] y", "then"], ["proof (chain)\npicking this:\n  ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = (zero_class.zero::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = (zero_class.zero::'a)\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] y", "using local.a_2_var local.ads_d_def local.fbox_def"], ["proof (prove)\nusing this:\n  ad (ad y + ad (x\\<^sup>\\<star> \\<cdot> ad y)) = (zero_class.zero::'a)\n  (ad ?x \\<cdot> d ?y = (zero_class.zero::'a)) = (ad ?x \\<le> ad ?y)\n  d ?x = ad (ad ?x)\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] y", "by auto"], ["proof (state)\nthis:\n  d y \\<le>  |x\\<^sup>\\<star>] y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_star_induct: \"d y \\<le> d z \\<cdot> |x] y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d y \\<le> d z \\<cdot>  |x] y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d y \\<le> d z \\<cdot>  |x] y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "assume a1: \"d y \\<le> d z \\<cdot> |x] y\""], ["proof (state)\nthis:\n  d y \\<le> d z \\<cdot>  |x] y\n\ngoal (1 subgoal):\n 1. d y \\<le> d z \\<cdot>  |x] y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "hence a: \"d y \\<le> d z\" and \"d y \\<le> |x] y\""], ["proof (prove)\nusing this:\n  d y \\<le> d z \\<cdot>  |x] y\n\ngoal (1 subgoal):\n 1. d y \\<le> d z &&& d y \\<le>  |x] y", "apply (metis local.a_subid_aux2 local.dual_order.trans local.fbox_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y", "using a1 dka.dom_subid_aux2 local.dual_order.trans"], ["proof (prove)\nusing this:\n  d y \\<le> d z \\<cdot>  |x] y\n  d ?x \\<cdot> ?y \\<le> ?y\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x] y", "by blast"], ["proof (state)\nthis:\n  d y \\<le> d z\n  d y \\<le>  |x] y\n\ngoal (1 subgoal):\n 1. d y \\<le> d z \\<cdot>  |x] y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "hence \"d y \\<le> |x\\<^sup>\\<star>] y\""], ["proof (prove)\nusing this:\n  d y \\<le> d z\n  d y \\<le>  |x] y\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] y", "using fbox_star_induct_var"], ["proof (prove)\nusing this:\n  d y \\<le> d z\n  d y \\<le>  |x] y\n  d ?y \\<le>  |?x] ?y \\<Longrightarrow> d ?y \\<le>  |?x\\<^sup>\\<star>] ?y\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] y", "by blast"], ["proof (state)\nthis:\n  d y \\<le>  |x\\<^sup>\\<star>] y\n\ngoal (1 subgoal):\n 1. d y \\<le> d z \\<cdot>  |x] y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "thus ?thesis"], ["proof (prove)\nusing this:\n  d y \\<le>  |x\\<^sup>\\<star>] y\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] z", "using a local.fbox_iso local.order.trans"], ["proof (prove)\nusing this:\n  d y \\<le>  |x\\<^sup>\\<star>] y\n  d y \\<le> d z\n  d ?x \\<le> d ?y \\<Longrightarrow>  |?z] ?x \\<le>  |?z] ?y\n  \\<lbrakk>?a \\<le> ?b; ?b \\<le> ?c\\<rbrakk> \\<Longrightarrow> ?a \\<le> ?c\n\ngoal (1 subgoal):\n 1. d y \\<le>  |x\\<^sup>\\<star>] z", "by blast"], ["proof (state)\nthis:\n  d y \\<le>  |x\\<^sup>\\<star>] z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_star_induct_eq: \"d z \\<cdot> |x] y = d y \\<Longrightarrow> d y \\<le> |x\\<^sup>\\<star>] z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d z \\<cdot>  |x] y = d y \\<Longrightarrow>\n    d y \\<le>  |x\\<^sup>\\<star>] z", "by (simp add: fbox_star_induct)"], ["", "lemma fbox_export_1: \"ad y + |x] y = |d y \\<cdot> x] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y +  |x] y =  |d y \\<cdot> x] y", "by (simp add: local.a_6 local.fbox_def mult_assoc)"], ["", "lemma fbox_export_2: \"d y + |x] y = |ad y \\<cdot> x] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d y +  |x] y =  |ad y \\<cdot> x] y", "by (simp add: local.ads_d_def local.ans_d_def local.fbox_def mult_assoc)"], ["", "end"], ["", "class antidomain_kleene_algebra = antidomain_semiring + kleene_algebra\n\nbegin"], ["", "subclass antidomain_left_kleene_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_left_kleene_algebra ad (+) (\\<cdot>) (1::'a)\n     (zero_class.zero::'a) (\\<le>) (<) star", ".."], ["", "lemma \"d p \\<le> |(d t \\<cdot> x)\\<^sup>\\<star> \\<cdot> ad t] (d q \\<cdot> ad t) \\<Longrightarrow> d p \\<le> |d t \\<cdot> x] d q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p\n    \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star> \\<cdot>\n            ad t] (d q \\<cdot> ad t) \\<Longrightarrow>\n    d p \\<le>  |d t \\<cdot> x] d q", "(*nitpick [expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d p\n    \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star> \\<cdot>\n            ad t] (d q \\<cdot> ad t) \\<Longrightarrow>\n    d p \\<le>  |d t \\<cdot> x] d q", "oops"], ["", "end"], ["", "end"]]}