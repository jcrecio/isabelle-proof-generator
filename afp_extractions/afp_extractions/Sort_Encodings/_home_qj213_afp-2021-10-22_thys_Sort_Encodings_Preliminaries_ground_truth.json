{"file_name": "/home/qj213/afp-2021-10-22/thys/Sort_Encodings/Preliminaries.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Sort_Encodings", "problem_names": ["lemma infinite_univ[simp]: \"infinite (UNIV :: univ set)\"", "lemma countable_univ[simp]: \"countable (UNIV :: univ set)\"", "lemma pick[simp]: \"x \\<in> X \\<Longrightarrow> pick X \\<in> X\"", "lemma pick_NE[simp]: \"X \\<noteq> {} \\<Longrightarrow> pick X \\<in> X\"", "lemma sappend_NE[simp]: \"A @@ B \\<noteq> {} \\<longleftrightarrow> A \\<noteq> {} \\<and> B \\<noteq> {}\"", "lemma NE_NE: \"NE NE\"", "lemma length_Suc_0:\n\"length al = Suc 0 \\<longleftrightarrow> (\\<exists> a. al = [a])\"", "lemmas list_all2_length = list_all2_conv_all_nth", "lemmas list_eq_iff = list_eq_iff_nth_eq", "lemmas list_all_iff", "lemmas list_all_length", "lemma length_singl[simp]: \"length (singl a) = Suc 0\"", "lemma hd_singl[simp]: \"hd (singl a) = a\"", "lemma hd_o_singl[simp]: \"hd o singl = id\"", "lemma singl_hd[simp]: \"length al = Suc 0 \\<Longrightarrow> singl (hd al) = al\"", "lemma singl_inj[simp]: \"singl a = singl b \\<longleftrightarrow> a = b\"", "lemma distinct_set_list:\n\"finite A \\<Longrightarrow> distinct (list A) \\<and> set (list A) = A\"", "lemmas distinct_list[simp] = distinct_set_list[THEN conjunct1]", "lemmas set_list[simp] = distinct_set_list[THEN conjunct2]", "lemma set_list_set[simp]: \"set (list (set xl)) = set xl\"", "lemma length_list[simp]: \"finite A \\<Longrightarrow> length (list A) = card A\"", "lemma list_all_mp[elim]:\nassumes \"list_all (\\<lambda> a. \\<phi> a \\<longrightarrow> \\<psi> a) al\" and \"list_all \\<phi> al\"\nshows \"list_all \\<psi> al\"", "lemma list_all_map:\n\"list_all \\<phi> (map f al) = list_all (\\<phi> o f) al\"", "lemma list_Emp[simp]: \"list {} = []\"", "lemma distinct_set_eq_Singl[simp]: \"distinct al \\<Longrightarrow> set al = {a} \\<longleftrightarrow> al = [a]\"", "lemma list_Singl[simp]: \"list {b} = [b]\"", "lemma list_insert:\nassumes A: \"finite A\" and b: \"b \\<notin> A\"\nshows\n\"\\<exists> al1 al2.\n   A = set (al1 @ al2) \\<and> distinct (al1 @ [b] @ al2) \\<and>\n   list (insert b A) = al1 @ [b] @ al2\"", "lemma list_all_list[simp]:\nassumes \"finite A\" shows \"list_all \\<phi> (list A) \\<longleftrightarrow> (\\<forall> a \\<in> A. \\<phi> a)\"", "lemma list_ex_list[simp]:\n\"finite A \\<Longrightarrow> list_ex \\<phi> (list A) = (\\<exists>a\\<in>A. \\<phi> a)\"", "lemma set_lupd:\nassumes \"a \\<in> set al \\<or> F1 a = F2 a\"\nshows \"lupd al bl F1 a = lupd al bl F2 a\"", "lemma lupd_map:\nassumes \"length al = length bl\" and \"a1 \\<in> set al \\<or> G a1 = F (H a1)\"\nshows \"lupd al (map F bl) G a1 = F (lupd al bl H a1)\"", "lemma nth_map2[simp]:\nassumes \"length bl = length al\" and \"i < length al\"\nshows \"(map2 f al bl) ! i = f (al!i) (bl!i)\"", "lemma list_all2_Nil_iff:\nassumes \"list_all2 R xs ys\"\nshows \"xs = [] \\<longleftrightarrow> ys = []\"", "lemma list_all2_NilL[simp]:\n\"list_all2 R [] ys \\<longleftrightarrow> ys = []\"", "lemma list_all2_NilR[simp]:\n\"list_all2 R xs [] \\<longleftrightarrow> xs = []\"", "lemma list_all2_ConsL:\nassumes \"list_all2 R (x # xs') ys\"\nshows \"\\<exists> y ys'. ys = y # ys' \\<and> R x y \\<and> list_all2 R xs' ys'\"", "lemma list_all2_elimL[elim, consumes 2, case_names Cons]:\nassumes xs: \"xs = x # xs'\" and h: \"list_all2 R xs ys\"\nand Cons: \"\\<And> y ys'. \\<lbrakk>ys = y # ys'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma list_all2_elimL2[elim, consumes 1, case_names Cons]:\nassumes h: \"list_all2 R (x # xs') ys\"\nand Cons: \"\\<And> y ys'. \\<lbrakk>ys = y # ys'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma list_all2_ConsR:\nassumes \"list_all2 R xs (y # ys')\"\nshows \"\\<exists> x xs'. xs = x # xs' \\<and> R x y \\<and> list_all2 R xs' ys'\"", "lemma list_all2_elimR[elim, consumes 2, case_names Cons]:\nassumes ys: \"ys = y # ys'\" and h: \"list_all2 R xs ys\"\nand Cons: \"\\<And> x xs'. \\<lbrakk>xs = x # xs'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma list_all2_elimR2[elim, consumes 1, case_names Cons]:\nassumes h: \"list_all2 R xs (y # ys')\"\nand Cons: \"\\<And> x xs'. \\<lbrakk>xs = x # xs'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi", "lemma ex_list_all2:\nassumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> \\<exists>y. f x y\"\nshows \"\\<exists> ys. list_all2 f xs ys\"", "lemma list_all2_cong[fundef_cong]:\nassumes \"xs1 = ys1\" and \"xs2 = ys2\"\nand \"\\<And> i . i < length xs2 \\<Longrightarrow> R (xs1!i) (xs2!i) \\<longleftrightarrow> R' (ys1!i) (ys2!i)\"\nshows \"list_all2 R xs1 xs2 \\<longleftrightarrow> list_all2 R' ys1 ys2\"", "lemma list_all2_o: \"list_all2 (P o f) al bl = list_all2 P (map f al) bl\"", "lemma set_size_list:\nassumes \"x \\<in> set xs\"\nshows \"f x \\<le> size_list f xs\"", "lemma nth_size_list:\nassumes \"i < length xs\"\nshows \"f (xs!i) \\<le> size_list f xs\"", "lemma list_all2_list_all[simp]:\n\"list_all2 (\\<lambda> x. f) xs ys \\<longleftrightarrow>\n length xs = length ys \\<and> list_all f ys\"", "lemma list_all2_list_allR[simp]:\n\"list_all2 (\\<lambda> x y. f x) xs ys \\<longleftrightarrow>\n length xs = length ys \\<and> list_all f xs\"", "lemma list_all2_list_all_2[simp]:\n\"list_all2 f xs xs \\<longleftrightarrow> list_all (\\<lambda> x. f x x) xs\"", "lemma list_all2_map_map:\n\"list_all2 \\<phi> (map f Tl) (map g Tl) =\n list_all (\\<lambda>T. \\<phi> (f T) (g T)) Tl\"", "lemma length_map2[simp]:\nassumes \"length ys = length xs\"\nshows \"length (map2 f xs ys) = length xs\"", "lemma listAll2_map2I[intro?]:\nassumes \"length xs = length ys\"\nand \"\\<And> i. i < length xs \\<Longrightarrow> R (xs!i) (f (xs!i) (ys!i))\"\nshows \"list_all2 R xs (map2 f xs ys)\"", "lemma set_incl_pred:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a. A a \\<longrightarrow> B a)\"", "lemma set_incl_pred2:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2. A a1 a2 \\<longrightarrow> B a1 a2)\"", "lemma set_incl_pred3:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)\" (is \"_ \\<longleftrightarrow> ?R\")", "lemma set_incl_pred4:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)\" (is \"_ \\<longleftrightarrow> ?R\")", "lemma list_all_mono:\nassumes \"phi \\<le> chi\"\nshows \"list_all phi \\<le> list_all chi\"", "lemma list_all2_mono:\nassumes \"phi \\<le> chi\"\nshows \"list_all2 phi \\<le> list_all2 chi\"", "lemma card_of_var: \"|UNIV::var set| =o natLeq\"", "lemma infinite_var[simp]: \"infinite (UNIV :: var set)\"", "lemma countable_var: \"countable (UNIV :: var set)\"", "lemma countable_infinite:\nassumes A: \"countable A\" and B: \"infinite B\"\nshows \"|A| \\<le>o |B|\"", "lemma part12_pred:\nassumes \"infinite (V::'a set)\"  shows \"\\<exists> V1_V2. part12_pred V V1_V2\"", "lemma part12: assumes \"infinite V\"  shows \"part12_pred V (part12 V)\"", "lemma part1_Un_part2: \"infinite V \\<Longrightarrow> part1 V \\<union> part2 V = V\"", "lemma part1_Int_part2: \"infinite V \\<Longrightarrow> part1 V \\<inter> part2 V = {}\"", "lemma infinite_part1: \"infinite V \\<Longrightarrow> infinite (part1 V)\"", "lemma part1_su: \"infinite V \\<Longrightarrow> part1 V \\<subseteq> V\"", "lemma infinite_part2: \"infinite V \\<Longrightarrow> infinite (part2 V)\"", "lemma part2_su: \"infinite V \\<Longrightarrow> part2 V \\<subseteq> V\""], "translations": [["", "lemma infinite_univ[simp]: \"infinite (UNIV :: univ set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "unfolding infinite_iff_card_of_nat card_of_ordLeq[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. inj f \\<and> range f \\<subseteq> UNIV", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       (\\<forall>x\\<in>UNIV.\n           \\<forall>y\\<in>UNIV. f x = f y \\<longrightarrow> x = y) \\<and>\n       range f \\<subseteq> UNIV", "by auto"], ["", "lemma countable_univ[simp]: \"countable (UNIV :: univ set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable UNIV", "unfolding countable_card_of_nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "apply(rule surj_imp_ordLeq[of _ UU])"], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<subseteq> range UU", "by (metis subset_UNIV surj_def univ.exhaust)"], ["", "text\\<open>Picking an element from a nonempty set (Hilbert choice for sets):\\<close>"], ["", "definition \"pick X \\<equiv> SOME x. x \\<in> X\""], ["", "lemma pick[simp]: \"x \\<in> X \\<Longrightarrow> pick X \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> X \\<Longrightarrow> pick X \\<in> X", "unfolding pick_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> X \\<Longrightarrow> (SOME x. x \\<in> X) \\<in> X", "by (metis someI_ex)"], ["", "lemma pick_NE[simp]: \"X \\<noteq> {} \\<Longrightarrow> pick X \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<noteq> {} \\<Longrightarrow> pick X \\<in> X", "by auto"], ["", "definition sappend (infix \"@@\" 60) where\n\"Al @@ Bl = {al @ bl | al bl. al \\<in> Al \\<and> bl \\<in> Bl}\""], ["", "lemma sappend_NE[simp]: \"A @@ B \\<noteq> {} \\<longleftrightarrow> A \\<noteq> {} \\<and> B \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @@ B \\<noteq> {}) = (A \\<noteq> {} \\<and> B \\<noteq> {})", "unfolding sappend_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({al @ bl |al bl. al \\<in> A \\<and> bl \\<in> B} \\<noteq> {}) =\n    (A \\<noteq> {} \\<and> B \\<noteq> {})", "by auto"], ["", "abbreviation fst3 :: \"'a * 'b * 'c \\<Rightarrow> 'a\" where \"fst3 abc \\<equiv> fst abc\""], ["", "abbreviation \"snd3 abc \\<equiv> fst (snd abc)\""], ["", "abbreviation \"trd3 abc \\<equiv> snd (snd abc)\""], ["", "hide_const int"], ["", "abbreviation \"any \\<equiv> undefined\""], ["", "text\\<open>Non-emptyness of predicates:\\<close>"], ["", "abbreviation (input) \"NE \\<phi> \\<equiv> \\<exists> a. \\<phi> a\""], ["", "lemma NE_NE: \"NE NE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a aa. a aa", "apply(rule exI[of _ \"\\<lambda> a. True\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. True", "by auto"], ["", "lemma length_Suc_0:\n\"length al = Suc 0 \\<longleftrightarrow> (\\<exists> a. al = [a])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length al = Suc 0) = (\\<exists>a. al = [a])", "by (metis (lifting) length_0_conv length_Suc_conv)"], ["", "subsection\\<open>List combinators\\<close>"], ["", "lemmas list_all2_length = list_all2_conv_all_nth"], ["", "lemmas list_eq_iff = list_eq_iff_nth_eq"], ["", "lemmas list_all_iff"], ["", "lemmas list_all_length"], ["", "definition \"singl a = [a]\""], ["", "lemma length_singl[simp]: \"length (singl a) = Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (singl a) = Suc 0", "unfolding singl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [a] = Suc 0", "by simp"], ["", "lemma hd_singl[simp]: \"hd (singl a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (singl a) = a", "unfolding singl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hd [a] = a", "by simp"], ["", "lemma hd_o_singl[simp]: \"hd o singl = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd \\<circ> singl = id", "unfolding comp_def fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. hd (singl x) = id x", "by simp"], ["", "lemma singl_hd[simp]: \"length al = Suc 0 \\<Longrightarrow> singl (hd al) = al\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length al = Suc 0 \\<Longrightarrow> singl (hd al) = al", "unfolding singl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length al = Suc 0 \\<Longrightarrow> [hd al] = al", "by (cases al, auto)"], ["", "lemma singl_inj[simp]: \"singl a = singl b \\<longleftrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (singl a = singl b) = (a = b)", "unfolding singl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([a] = [b]) = (a = b)", "by simp"], ["", "(* The list of a finite set: *)"], ["", "definition \"list A \\<equiv> SOME al. distinct al \\<and> set al = A\""], ["", "lemma distinct_set_list:\n\"finite A \\<Longrightarrow> distinct (list A) \\<and> set (list A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> distinct (list A) \\<and> set (list A) = A", "unfolding list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    distinct (SOME al. distinct al \\<and> set al = A) \\<and>\n    set (SOME al. distinct al \\<and> set al = A) = A", "apply(rule someI_ex)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> \\<exists>x. distinct x \\<and> set x = A", "using finite_distinct_list"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A \\<and> distinct xs\n\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> \\<exists>x. distinct x \\<and> set x = A", "by auto"], ["", "lemmas distinct_list[simp] = distinct_set_list[THEN conjunct1]"], ["", "lemmas set_list[simp] = distinct_set_list[THEN conjunct2]"], ["", "lemma set_list_set[simp]: \"set (list (set xl)) = set xl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (list (set xl)) = set xl", "by auto"], ["", "lemma length_list[simp]: \"finite A \\<Longrightarrow> length (list A) = card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> length (list A) = card A", "by (metis distinct_card distinct_set_list)"], ["", "lemma list_all_mp[elim]:\nassumes \"list_all (\\<lambda> a. \\<phi> a \\<longrightarrow> \\<psi> a) al\" and \"list_all \\<phi> al\"\nshows \"list_all \\<psi> al\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all \\<psi> al", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. \\<phi> a \\<longrightarrow> \\<psi> a) al\n  list_all \\<phi> al\n\ngoal (1 subgoal):\n 1. list_all \\<psi> al", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set al. \\<phi> a \\<longrightarrow> \\<psi> a\n  Ball (set al) \\<phi>\n\ngoal (1 subgoal):\n 1. Ball (set al) \\<psi>", "by auto"], ["", "lemma list_all_map:\n\"list_all \\<phi> (map f al) = list_all (\\<phi> o f) al\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all \\<phi> (map f al) = list_all (\\<phi> \\<circ> f) al", "by (metis (no_types) length_map list_all_length nth_map o_def)"], ["", "lemma list_Emp[simp]: \"list {} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list {} = []", "by (metis set_empty2 set_list_set)"], ["", "lemma distinct_set_eq_Singl[simp]: \"distinct al \\<Longrightarrow> set al = {a} \\<longleftrightarrow> al = [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct al \\<Longrightarrow> (set al = {a}) = (al = [a])", "apply(cases al, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>distinct al; al = aa # list\\<rbrakk>\n       \\<Longrightarrow> (set al = {a}) = (al = [a])", "by (metis (lifting) List.set_simps distinct.simps\n           distinct_singleton empty_not_insert insert_eq_iff set_empty2)"], ["", "lemma list_Singl[simp]: \"list {b} = [b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list {b} = [b]", "unfolding list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME al. distinct al \\<and> set al = {b}) = [b]", "apply(rule some_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct [b] \\<and> set [b] = {b}\n 2. \\<And>al. distinct al \\<and> set al = {b} \\<Longrightarrow> al = [b]", "by auto"], ["", "lemma list_insert:\nassumes A: \"finite A\" and b: \"b \\<notin> A\"\nshows\n\"\\<exists> al1 al2.\n   A = set (al1 @ al2) \\<and> distinct (al1 @ [b] @ al2) \\<and>\n   list (insert b A) = al1 @ [b] @ al2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "have \"b \\<in> set (list (insert b A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> set (list (insert b A))", "using A"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. b \\<in> set (list (insert b A))", "by auto"], ["proof (state)\nthis:\n  b \\<in> set (list (insert b A))\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "then"], ["proof (chain)\npicking this:\n  b \\<in> set (list (insert b A))", "obtain al1 al2 where 0: \"list (insert b A) = al1 @ [b] @ al2\""], ["proof (prove)\nusing this:\n  b \\<in> set (list (insert b A))\n\ngoal (1 subgoal):\n 1. (\\<And>al1 al2.\n        list (insert b A) = al1 @ [b] @ al2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Cons eq_Nil_appendI split_list_last)"], ["proof (state)\nthis:\n  list (insert b A) = al1 @ [b] @ al2\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "hence 1: \"distinct (al1 @ [b] @ al2)\""], ["proof (prove)\nusing this:\n  list (insert b A) = al1 @ [b] @ al2\n\ngoal (1 subgoal):\n 1. distinct (al1 @ [b] @ al2)", "using A"], ["proof (prove)\nusing this:\n  list (insert b A) = al1 @ [b] @ al2\n  finite A\n\ngoal (1 subgoal):\n 1. distinct (al1 @ [b] @ al2)", "by (metis distinct_set_list finite_insert)"], ["proof (state)\nthis:\n  distinct (al1 @ [b] @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "hence \"b \\<notin> set (al1 @ al2)\""], ["proof (prove)\nusing this:\n  distinct (al1 @ [b] @ al2)\n\ngoal (1 subgoal):\n 1. b \\<notin> set (al1 @ al2)", "by simp"], ["proof (state)\nthis:\n  b \\<notin> set (al1 @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "moreover"], ["proof (state)\nthis:\n  b \\<notin> set (al1 @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "have \"insert b A = insert b (set (al1 @ al2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert b A = insert b (set (al1 @ al2))", "using 0 set_list[OF finite.insertI[OF A, of b]]"], ["proof (prove)\nusing this:\n  list (insert b A) = al1 @ [b] @ al2\n  set (list (insert b A)) = insert b A\n\ngoal (1 subgoal):\n 1. insert b A = insert b (set (al1 @ al2))", "by auto"], ["proof (state)\nthis:\n  insert b A = insert b (set (al1 @ al2))\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "ultimately"], ["proof (chain)\npicking this:\n  b \\<notin> set (al1 @ al2)\n  insert b A = insert b (set (al1 @ al2))", "have \"A = set (al1 @ al2)\""], ["proof (prove)\nusing this:\n  b \\<notin> set (al1 @ al2)\n  insert b A = insert b (set (al1 @ al2))\n\ngoal (1 subgoal):\n 1. A = set (al1 @ al2)", "using b"], ["proof (prove)\nusing this:\n  b \\<notin> set (al1 @ al2)\n  insert b A = insert b (set (al1 @ al2))\n  b \\<notin> A\n\ngoal (1 subgoal):\n 1. A = set (al1 @ al2)", "by auto"], ["proof (state)\nthis:\n  A = set (al1 @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = set (al1 @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "using 0 1"], ["proof (prove)\nusing this:\n  A = set (al1 @ al2)\n  list (insert b A) = al1 @ [b] @ al2\n  distinct (al1 @ [b] @ al2)\n\ngoal (1 subgoal):\n 1. \\<exists>al1 al2.\n       A = set (al1 @ al2) \\<and>\n       distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2", "by auto"], ["proof (state)\nthis:\n  \\<exists>al1 al2.\n     A = set (al1 @ al2) \\<and>\n     distinct (al1 @ [b] @ al2) \\<and> list (insert b A) = al1 @ [b] @ al2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all_list[simp]:\nassumes \"finite A\" shows \"list_all \\<phi> (list A) \\<longleftrightarrow> (\\<forall> a \\<in> A. \\<phi> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all \\<phi> (list A) = (\\<forall>a\\<in>A. \\<phi> a)", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. list_all \\<phi> (list A) = (\\<forall>a\\<in>A. \\<phi> a)", "unfolding list_all_iff"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. Ball (set (list A)) \\<phi> = (\\<forall>a\\<in>A. \\<phi> a)", "by simp"], ["", "lemma list_ex_list[simp]:\n\"finite A \\<Longrightarrow> list_ex \\<phi> (list A) = (\\<exists>a\\<in>A. \\<phi> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    list_ex \\<phi> (list A) = (\\<exists>a\\<in>A. \\<phi> a)", "unfolding list_ex_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    Bex (set (list A)) \\<phi> = (\\<exists>a\\<in>A. \\<phi> a)", "by simp"], ["", "text\\<open>list update:\\<close>"], ["", "fun lupd where\n\"lupd Nil Nil F = F\"\n|\n\"lupd (a # al) (b # bl) F = lupd al bl (F(a := b))\"\n|\n\"lupd _ _ F = any\""], ["", "lemma set_lupd:\nassumes \"a \\<in> set al \\<or> F1 a = F2 a\"\nshows \"lupd al bl F1 a = lupd al bl F2 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lupd al bl F1 a = lupd al bl F2 a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set al \\<or> F1 a = F2 a\n\ngoal (1 subgoal):\n 1. lupd al bl F1 a = lupd al bl F2 a", "apply(induct arbitrary: F1 F2 rule: list_induct2')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>F1 F2.\n       a \\<in> set [] \\<or> F1 a = F2 a \\<Longrightarrow>\n       lupd [] [] F1 a = lupd [] [] F2 a\n 2. \\<And>x xs F1 F2.\n       a \\<in> set (x # xs) \\<or> F1 a = F2 a \\<Longrightarrow>\n       lupd (x # xs) [] F1 a = lupd (x # xs) [] F2 a\n 3. \\<And>y ys F1 F2.\n       a \\<in> set [] \\<or> F1 a = F2 a \\<Longrightarrow>\n       lupd [] (y # ys) F1 a = lupd [] (y # ys) F2 a\n 4. \\<And>x xs y ys F1 F2.\n       \\<lbrakk>\\<And>F1 F2.\n                   a \\<in> set xs \\<or> F1 a = F2 a \\<Longrightarrow>\n                   lupd xs ys F1 a = lupd xs ys F2 a;\n        a \\<in> set (x # xs) \\<or> F1 a = F2 a\\<rbrakk>\n       \\<Longrightarrow> lupd (x # xs) (y # ys) F1 a =\n                         lupd (x # xs) (y # ys) F2 a", "by auto"], ["", "lemma lupd_map:\nassumes \"length al = length bl\" and \"a1 \\<in> set al \\<or> G a1 = F (H a1)\"\nshows \"lupd al (map F bl) G a1 = F (lupd al bl H a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lupd al (map F bl) G a1 = F (lupd al bl H a1)", "using assms"], ["proof (prove)\nusing this:\n  length al = length bl\n  a1 \\<in> set al \\<or> G a1 = F (H a1)\n\ngoal (1 subgoal):\n 1. lupd al (map F bl) G a1 = F (lupd al bl H a1)", "apply (induct arbitrary: F G H rule: list_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F G H.\n       a1 \\<in> set [] \\<or> G a1 = F (H a1) \\<Longrightarrow>\n       lupd [] (map F []) G a1 = F (lupd [] [] H a1)\n 2. \\<And>x xs y ys F G H.\n       \\<lbrakk>length xs = length ys;\n        \\<And>F G H.\n           a1 \\<in> set xs \\<or> G a1 = F (H a1) \\<Longrightarrow>\n           lupd xs (map F ys) G a1 = F (lupd xs ys H a1);\n        a1 \\<in> set (x # xs) \\<or> G a1 = F (H a1)\\<rbrakk>\n       \\<Longrightarrow> lupd (x # xs) (map F (y # ys)) G a1 =\n                         F (lupd (x # xs) (y # ys) H a1)", "by auto"], ["", "lemma nth_map2[simp]:\nassumes \"length bl = length al\" and \"i < length al\"\nshows \"(map2 f al bl) ! i = f (al!i) (bl!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f al bl ! i = f (al ! i) (bl ! i)", "using assms"], ["proof (prove)\nusing this:\n  length bl = length al\n  i < length al\n\ngoal (1 subgoal):\n 1. map2 f al bl ! i = f (al ! i) (bl ! i)", "by auto"], ["", "lemma list_all2_Nil_iff:\nassumes \"list_all2 R xs ys\"\nshows \"xs = [] \\<longleftrightarrow> ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs = []) = (ys = [])", "using assms"], ["proof (prove)\nusing this:\n  list_all2 R xs ys\n\ngoal (1 subgoal):\n 1. (xs = []) = (ys = [])", "by (cases xs, cases ys) auto"], ["", "lemma list_all2_NilL[simp]:\n\"list_all2 R [] ys \\<longleftrightarrow> ys = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 R [] ys = (ys = [])", "using list_all2_Nil_iff"], ["proof (prove)\nusing this:\n  list_all2 ?R ?xs ?ys \\<Longrightarrow> (?xs = []) = (?ys = [])\n\ngoal (1 subgoal):\n 1. list_all2 R [] ys = (ys = [])", "by auto"], ["", "lemma list_all2_NilR[simp]:\n\"list_all2 R xs [] \\<longleftrightarrow> xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 R xs [] = (xs = [])", "using list_all2_Nil_iff"], ["proof (prove)\nusing this:\n  list_all2 ?R ?xs ?ys \\<Longrightarrow> (?xs = []) = (?ys = [])\n\ngoal (1 subgoal):\n 1. list_all2 R xs [] = (xs = [])", "by auto"], ["", "lemma list_all2_ConsL:\nassumes \"list_all2 R (x # xs') ys\"\nshows \"\\<exists> y ys'. ys = y # ys' \\<and> R x y \\<and> list_all2 R xs' ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y ys'. ys = y # ys' \\<and> R x y \\<and> list_all2 R xs' ys'", "using assms"], ["proof (prove)\nusing this:\n  list_all2 R (x # xs') ys\n\ngoal (1 subgoal):\n 1. \\<exists>y ys'. ys = y # ys' \\<and> R x y \\<and> list_all2 R xs' ys'", "by(cases ys) auto"], ["", "lemma list_all2_elimL[elim, consumes 2, case_names Cons]:\nassumes xs: \"xs = x # xs'\" and h: \"list_all2 R xs ys\"\nand Cons: \"\\<And> y ys'. \\<lbrakk>ys = y # ys'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using list_all2_ConsL assms"], ["proof (prove)\nusing this:\n  list_all2 ?R (?x # ?xs') ?ys \\<Longrightarrow>\n  \\<exists>y ys'. ?ys = y # ys' \\<and> ?R ?x y \\<and> list_all2 ?R ?xs' ys'\n  xs = x # xs'\n  list_all2 R xs ys\n  \\<lbrakk>ys = ?y # ?ys'; R x ?y; list_all2 R xs' ?ys'\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by metis"], ["", "lemma list_all2_elimL2[elim, consumes 1, case_names Cons]:\nassumes h: \"list_all2 R (x # xs') ys\"\nand Cons: \"\\<And> y ys'. \\<lbrakk>ys = y # ys'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using list_all2_ConsL assms"], ["proof (prove)\nusing this:\n  list_all2 ?R (?x # ?xs') ?ys \\<Longrightarrow>\n  \\<exists>y ys'. ?ys = y # ys' \\<and> ?R ?x y \\<and> list_all2 ?R ?xs' ys'\n  list_all2 R (x # xs') ys\n  \\<lbrakk>ys = ?y # ?ys'; R x ?y; list_all2 R xs' ?ys'\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by metis"], ["", "lemma list_all2_ConsR:\nassumes \"list_all2 R xs (y # ys')\"\nshows \"\\<exists> x xs'. xs = x # xs' \\<and> R x y \\<and> list_all2 R xs' ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x xs'. xs = x # xs' \\<and> R x y \\<and> list_all2 R xs' ys'", "using assms"], ["proof (prove)\nusing this:\n  list_all2 R xs (y # ys')\n\ngoal (1 subgoal):\n 1. \\<exists>x xs'. xs = x # xs' \\<and> R x y \\<and> list_all2 R xs' ys'", "by(cases xs) auto"], ["", "lemma list_all2_elimR[elim, consumes 2, case_names Cons]:\nassumes ys: \"ys = y # ys'\" and h: \"list_all2 R xs ys\"\nand Cons: \"\\<And> x xs'. \\<lbrakk>xs = x # xs'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using list_all2_ConsR assms"], ["proof (prove)\nusing this:\n  list_all2 ?R ?xs (?y # ?ys') \\<Longrightarrow>\n  \\<exists>x xs'. ?xs = x # xs' \\<and> ?R x ?y \\<and> list_all2 ?R xs' ?ys'\n  ys = y # ys'\n  list_all2 R xs ys\n  \\<lbrakk>xs = ?x # ?xs'; R ?x y; list_all2 R ?xs' ys'\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by metis"], ["", "lemma list_all2_elimR2[elim, consumes 1, case_names Cons]:\nassumes h: \"list_all2 R xs (y # ys')\"\nand Cons: \"\\<And> x xs'. \\<lbrakk>xs = x # xs'; R x y; list_all2 R xs' ys'\\<rbrakk> \\<Longrightarrow> phi\"\nshows phi"], ["proof (prove)\ngoal (1 subgoal):\n 1. phi", "using list_all2_ConsR assms"], ["proof (prove)\nusing this:\n  list_all2 ?R ?xs (?y # ?ys') \\<Longrightarrow>\n  \\<exists>x xs'. ?xs = x # xs' \\<and> ?R x ?y \\<and> list_all2 ?R xs' ?ys'\n  list_all2 R xs (y # ys')\n  \\<lbrakk>xs = ?x # ?xs'; R ?x y; list_all2 R ?xs' ys'\\<rbrakk>\n  \\<Longrightarrow> phi\n\ngoal (1 subgoal):\n 1. phi", "by metis"], ["", "lemma ex_list_all2:\nassumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> \\<exists>y. f x y\"\nshows \"\\<exists> ys. list_all2 f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. list_all2 f xs ys", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set xs \\<Longrightarrow> \\<exists>y. f ?x y\n\ngoal (1 subgoal):\n 1. \\<exists>ys. list_all2 f xs ys", "apply(induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>x. x \\<in> set [] \\<Longrightarrow> Ex (f x)) \\<Longrightarrow>\n    Ex (list_all2 f [])\n 2. \\<And>a xs.\n       \\<lbrakk>(\\<And>x.\n                    x \\<in> set xs \\<Longrightarrow>\n                    Ex (f x)) \\<Longrightarrow>\n                Ex (list_all2 f xs);\n        \\<And>x. x \\<in> set (a # xs) \\<Longrightarrow> Ex (f x)\\<rbrakk>\n       \\<Longrightarrow> Ex (list_all2 f (a # xs))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>(\\<And>x.\n                    x \\<in> set xs \\<Longrightarrow>\n                    Ex (f x)) \\<Longrightarrow>\n                Ex (list_all2 f xs);\n        \\<And>x. x \\<in> set (a # xs) \\<Longrightarrow> Ex (f x)\\<rbrakk>\n       \\<Longrightarrow> Ex (list_all2 f (a # xs))", "by (metis set_simps insertCI list_all2_Cons)"], ["", "lemma list_all2_cong[fundef_cong]:\nassumes \"xs1 = ys1\" and \"xs2 = ys2\"\nand \"\\<And> i . i < length xs2 \\<Longrightarrow> R (xs1!i) (xs2!i) \\<longleftrightarrow> R' (ys1!i) (ys2!i)\"\nshows \"list_all2 R xs1 xs2 \\<longleftrightarrow> list_all2 R' ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 R xs1 xs2 = list_all2 R' ys1 ys2", "by (metis assms list_all2_length)"], ["", "lemma list_all2_o: \"list_all2 (P o f) al bl = list_all2 P (map f al) bl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (P \\<circ> f) al bl = list_all2 P (map f al) bl", "unfolding list_all2_map1 comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>x. P (f x)) al bl =\n    list_all2 (\\<lambda>x. P (f x)) al bl", ".."], ["", "lemma set_size_list:\nassumes \"x \\<in> set xs\"\nshows \"f x \\<le> size_list f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<le> size_list f xs", "by (metis assms size_list_estimation' order_eq_refl)"], ["", "lemma nth_size_list:\nassumes \"i < length xs\"\nshows \"f (xs!i) \\<le> size_list f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (xs ! i) \\<le> size_list f xs", "by (metis assms nth_mem set_size_list)"], ["", "lemma list_all2_list_all[simp]:\n\"list_all2 (\\<lambda> x. f) xs ys \\<longleftrightarrow>\n length xs = length ys \\<and> list_all f ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>x. f) xs ys =\n    (length xs = length ys \\<and> list_all f ys)", "by (metis list_all2_length list_all_length)"], ["", "lemma list_all2_list_allR[simp]:\n\"list_all2 (\\<lambda> x y. f x) xs ys \\<longleftrightarrow>\n length xs = length ys \\<and> list_all f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>x y. f x) xs ys =\n    (length xs = length ys \\<and> list_all f xs)", "by (metis (lifting) list_all2_length list_all_length)"], ["", "lemma list_all2_list_all_2[simp]:\n\"list_all2 f xs xs \\<longleftrightarrow> list_all (\\<lambda> x. f x x) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 f xs xs = list_all (\\<lambda>x. f x x) xs", "by (auto simp add: list_all2_iff list_all_iff zip_same)"], ["", "lemma list_all2_map_map:\n\"list_all2 \\<phi> (map f Tl) (map g Tl) =\n list_all (\\<lambda>T. \\<phi> (f T) (g T)) Tl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 \\<phi> (map f Tl) (map g Tl) =\n    list_all (\\<lambda>T. \\<phi> (f T) (g T)) Tl", "unfolding list_all2_map1 list_all2_map2 list_all2_list_all_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. \\<phi> (f x) (g x)) Tl =\n    list_all (\\<lambda>T. \\<phi> (f T) (g T)) Tl", ".."], ["", "lemma length_map2[simp]:\nassumes \"length ys = length xs\"\nshows \"length (map2 f xs ys) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map2 f xs ys) = length xs", "using assms"], ["proof (prove)\nusing this:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. length (map2 f xs ys) = length xs", "by auto"], ["", "lemma listAll2_map2I[intro?]:\nassumes \"length xs = length ys\"\nand \"\\<And> i. i < length xs \\<Longrightarrow> R (xs!i) (f (xs!i) (ys!i))\"\nshows \"list_all2 R xs (map2 f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 R xs (map2 f xs ys)", "apply(rule list_all2I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set (zip xs (map2 f xs ys)).\n       case x of (x, xa) \\<Rightarrow> R x xa\n 2. length xs = length (map2 f xs ys)", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  ?i < length xs \\<Longrightarrow> R (xs ! ?i) (f (xs ! ?i) (ys ! ?i))\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set (zip xs (map2 f xs ys)).\n       case x of (x, xa) \\<Rightarrow> R x xa\n 2. length xs = length (map2 f xs ys)", "unfolding set_zip"], ["proof (prove)\nusing this:\n  length xs = length ys\n  ?i < length xs \\<Longrightarrow> R (xs ! ?i) (f (xs ! ?i) (ys ! ?i))\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>{(xs ! i, map2 f xs ys ! i) |i.\n                    i < min (length xs) (length (map2 f xs ys))}.\n       case x of (x, xa) \\<Rightarrow> R x xa\n 2. length xs = length (map2 f xs ys)", "by auto"], ["", "(*\nlemma listAll2_map2I[intro?]:\nassumes \"length xs = length ys\" and \"\\<And> x y. R x (f x y)\"\nshows \"list_all2 R xs (map2 f xs ys)\"\napply(rule list_all2I) using assms unfolding set_zip map2_def by auto\n*)"], ["", "lemma set_incl_pred:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a. A a \\<longrightarrow> B a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (\\<forall>a. A a \\<longrightarrow> B a)", "by (metis predicate1D predicate1I)"], ["", "lemma set_incl_pred2:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2. A a1 a2 \\<longrightarrow> B a1 a2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (\\<forall>a1 a2. A a1 a2 \\<longrightarrow> B a1 a2)", "by (metis predicate2I rev_predicate2D)"], ["", "lemma set_incl_pred3:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)\" (is \"_ \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "have \"A \\<le> B \\<longleftrightarrow> (\\<forall> a1. A a1 \\<le> B a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)", "by (metis le_funD le_funI)"], ["proof (state)\nthis:\n  (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "also"], ["proof (state)\nthis:\n  (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "have \"... \\<longleftrightarrow> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a1. A a1 \\<le> B a1) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "apply(rule iff_allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1.\n       (A a1 \\<le> B a1) =\n       (\\<forall>a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "unfolding set_incl_pred2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1.\n       (\\<forall>a1a a2. A a1 a1a a2 \\<longrightarrow> B a1 a1a a2) =\n       (\\<forall>a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", ".."], ["proof (state)\nthis:\n  (\\<forall>a1. A a1 \\<le> B a1) =\n  (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "finally"], ["proof (chain)\npicking this:\n  (A \\<le> B) = (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "show ?thesis"], ["proof (prove)\nusing this:\n  (A \\<le> B) = (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)", "."], ["proof (state)\nthis:\n  (A \\<le> B) = (\\<forall>a1 a2 a3. A a1 a2 a3 \\<longrightarrow> B a1 a2 a3)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_incl_pred4:\n\"A \\<le> B \\<longleftrightarrow> (\\<forall> a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)\" (is \"_ \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "have \"A \\<le> B \\<longleftrightarrow> (\\<forall> a1. A a1 \\<le> B a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)", "by (metis le_funD le_funI)"], ["proof (state)\nthis:\n  (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "also"], ["proof (state)\nthis:\n  (A \\<le> B) = (\\<forall>a1. A a1 \\<le> B a1)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "have \"... \\<longleftrightarrow> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a1. A a1 \\<le> B a1) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "apply(rule iff_allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1.\n       (A a1 \\<le> B a1) =\n       (\\<forall>a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "unfolding set_incl_pred3"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1.\n       (\\<forall>a1a a2 a3.\n           A a1 a1a a2 a3 \\<longrightarrow> B a1 a1a a2 a3) =\n       (\\<forall>a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", ".."], ["proof (state)\nthis:\n  (\\<forall>a1. A a1 \\<le> B a1) =\n  (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "finally"], ["proof (chain)\npicking this:\n  (A \\<le> B) =\n  (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "show ?thesis"], ["proof (prove)\nusing this:\n  (A \\<le> B) =\n  (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)\n\ngoal (1 subgoal):\n 1. (A \\<le> B) =\n    (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)", "."], ["proof (state)\nthis:\n  (A \\<le> B) =\n  (\\<forall>a1 a2 a3 a4. A a1 a2 a3 a4 \\<longrightarrow> B a1 a2 a3 a4)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all_mono:\nassumes \"phi \\<le> chi\"\nshows \"list_all phi \\<le> list_all chi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all phi \\<le> list_all chi", "using assms"], ["proof (prove)\nusing this:\n  phi \\<le> chi\n\ngoal (1 subgoal):\n 1. list_all phi \\<le> list_all chi", "unfolding set_incl_pred list_all_iff"], ["proof (prove)\nusing this:\n  \\<forall>a. phi a \\<longrightarrow> chi a\n\ngoal (1 subgoal):\n 1. \\<forall>a. Ball (set a) phi \\<longrightarrow> Ball (set a) chi", "by auto"], ["", "lemma list_all2_mono:\nassumes \"phi \\<le> chi\"\nshows \"list_all2 phi \\<le> list_all2 chi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 phi \\<le> list_all2 chi", "using assms"], ["proof (prove)\nusing this:\n  phi \\<le> chi\n\ngoal (1 subgoal):\n 1. list_all2 phi \\<le> list_all2 chi", "by (metis (full_types) list_all2_mono set_incl_pred2)"], ["", "subsection\\<open>Variables\\<close>"], ["", "text\\<open>The type of variables:\\<close>"], ["", "datatype var = Variable nat"], ["", "lemma card_of_var: \"|UNIV::var set| =o natLeq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "have \"|UNIV::var set| =o |UNIV::nat set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| =o |UNIV|", "apply(rule ordIso_symmetric,rule card_of_ordIsoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij ?f2", "unfolding bij_betw_def inj_on_def surj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV. ?f2 x = ?f2 y \\<longrightarrow> x = y) \\<and>\n    (\\<forall>y. \\<exists>x. y = ?f2 x)", "using var.exhaust"], ["proof (prove)\nusing this:\n  (\\<And>x. ?y = Variable x \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV. ?f2 x = ?f2 y \\<longrightarrow> x = y) \\<and>\n    (\\<forall>y. \\<exists>x. y = ?f2 x)", "by auto"], ["proof (state)\nthis:\n  |UNIV| =o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "also"], ["proof (state)\nthis:\n  |UNIV| =o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "have \"|UNIV::nat set| =o natLeq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "by(rule card_of_nat)"], ["proof (state)\nthis:\n  |UNIV| =o natLeq\n\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "finally"], ["proof (chain)\npicking this:\n  |UNIV| =o natLeq", "show ?thesis"], ["proof (prove)\nusing this:\n  |UNIV| =o natLeq\n\ngoal (1 subgoal):\n 1. |UNIV| =o natLeq", "."], ["proof (state)\nthis:\n  |UNIV| =o natLeq\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_var[simp]: \"infinite (UNIV :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "using card_of_var"], ["proof (prove)\nusing this:\n  |UNIV| =o natLeq\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by (rule ordIso_natLeq_infinite1)"], ["", "lemma countable_var: \"countable (UNIV :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable UNIV", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. countable UNIV", "have 0: \"(UNIV :: var set) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  UNIV \\<noteq> {}\n\ngoal (1 subgoal):\n 1. countable UNIV", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable UNIV", "unfolding countable_card_of_nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o |UNIV|", "unfolding card_of_ordLeq2[symmetric, OF 0]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g. surj g", "apply(rule exI[of _ Variable])"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj Variable", "unfolding image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>UNIV. y = Variable x} = UNIV", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>xa. x = Variable xa", "by (case_tac x, auto)"], ["proof (state)\nthis:\n  countable UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "(* FIXME: Move into Countable_Set *)"], ["", "lemma countable_infinite:\nassumes A: \"countable A\" and B: \"infinite B\"\nshows \"|A| \\<le>o |B|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "have \"|A| \\<le>o natLeq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |A| \\<le>o natLeq", "using A"], ["proof (prove)\nusing this:\n  countable A\n\ngoal (1 subgoal):\n 1. |A| \\<le>o natLeq", "unfolding countable_card_le_natLeq"], ["proof (prove)\nusing this:\n  |A| \\<le>o natLeq\n\ngoal (1 subgoal):\n 1. |A| \\<le>o natLeq", "."], ["proof (state)\nthis:\n  |A| \\<le>o natLeq\n\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "also"], ["proof (state)\nthis:\n  |A| \\<le>o natLeq\n\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "have \"natLeq \\<le>o |B|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natLeq \\<le>o |B|", "by (metis B infinite_iff_natLeq_ordLeq)"], ["proof (state)\nthis:\n  natLeq \\<le>o |B|\n\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "finally"], ["proof (chain)\npicking this:\n  |A| \\<le>o |B|", "show ?thesis"], ["proof (prove)\nusing this:\n  |A| \\<le>o |B|\n\ngoal (1 subgoal):\n 1. |A| \\<le>o |B|", "."], ["proof (state)\nthis:\n  |A| \\<le>o |B|\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Partitioning V in two infinite disjoint sets *)"], ["", "definition \"part12_pred V V1_V2 \\<equiv>\n V = fst V1_V2 \\<union> snd V1_V2 \\<and> fst V1_V2 \\<inter> snd V1_V2 = {} \\<and>\n infinite (fst V1_V2) \\<and> infinite (snd V1_V2)\""], ["", "definition \"part12 V \\<equiv> SOME V1_V2. part12_pred V V1_V2\""], ["", "definition \"part1 = fst o part12\""], ["", "definition \"part2 = snd o part12\""], ["", "lemma part12_pred:\nassumes \"infinite (V::'a set)\"  shows \"\\<exists> V1_V2. part12_pred V V1_V2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "obtain f :: \"nat \\<Rightarrow> 'a\" where f: \"inj f\" and r: \"range f \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>inj f; range f \\<subseteq> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  infinite V\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>inj f; range f \\<subseteq> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis infinite_iff_countable_subset)"], ["proof (state)\nthis:\n  inj f\n  range f \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?u = \"\\<lambda> k::nat. 2 * k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?v = \"\\<lambda> k::nat. Suc (2 * k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?A = \"?u ` UNIV\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?B = \"?v ` UNIV\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "have 0: \"inj ?u \\<and> inj ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj ((*) 2) \\<and> inj (\\<lambda>k. Suc (2 * k))", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV. 2 * x = 2 * y \\<longrightarrow> x = y) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           Suc (2 * x) = Suc (2 * y) \\<longrightarrow> x = y)", "by auto"], ["proof (state)\nthis:\n  inj ((*) 2) \\<and> inj (\\<lambda>k. Suc (2 * k))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "hence 1: \"infinite ?A \\<and> infinite ?B\""], ["proof (prove)\nusing this:\n  inj ((*) 2) \\<and> inj (\\<lambda>k. Suc (2 * k))\n\ngoal (1 subgoal):\n 1. infinite (range ((*) 2)) \\<and>\n    infinite (range (\\<lambda>k. Suc (2 * k)))", "using finite_imageD"], ["proof (prove)\nusing this:\n  inj ((*) 2) \\<and> inj (\\<lambda>k. Suc (2 * k))\n  \\<lbrakk>finite (?f ` ?A); inj_on ?f ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. infinite (range ((*) 2)) \\<and>\n    infinite (range (\\<lambda>k. Suc (2 * k)))", "by auto"], ["proof (state)\nthis:\n  infinite (range ((*) 2)) \\<and> infinite (range (\\<lambda>k. Suc (2 * k)))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?V1 = \"f ` ?A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "let ?V2 = \"V - ?V1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "have \"V = ?V1 \\<union> ?V2 \\<and> ?V1 \\<inter> ?V2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n    f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}", "using r"], ["proof (prove)\nusing this:\n  range f \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n    f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}", "by blast"], ["proof (state)\nthis:\n  V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n  f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "moreover"], ["proof (state)\nthis:\n  V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n  f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "have \"infinite ?V1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (f ` range ((*) 2))", "using 1 f"], ["proof (prove)\nusing this:\n  infinite (range ((*) 2)) \\<and> infinite (range (\\<lambda>k. Suc (2 * k)))\n  inj f\n\ngoal (1 subgoal):\n 1. infinite (f ` range ((*) 2))", "by (metis finite_imageD subset_inj_on top_greatest)"], ["proof (state)\nthis:\n  infinite (f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "moreover"], ["proof (state)\nthis:\n  infinite (f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "{"], ["proof (state)\nthis:\n  infinite (f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "have \"infinite (f ` ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (f ` range (\\<lambda>k. Suc (2 * k)))", "using 1 f"], ["proof (prove)\nusing this:\n  infinite (range ((*) 2)) \\<and> infinite (range (\\<lambda>k. Suc (2 * k)))\n  inj f\n\ngoal (1 subgoal):\n 1. infinite (f ` range (\\<lambda>k. Suc (2 * k)))", "by (metis finite_imageD subset_inj_on top_greatest)"], ["proof (state)\nthis:\n  infinite (f ` range (\\<lambda>k. Suc (2 * k)))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "moreover"], ["proof (state)\nthis:\n  infinite (f ` range (\\<lambda>k. Suc (2 * k)))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "have \"f ` ?B \\<subseteq> ?V2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` range (\\<lambda>k. Suc (2 * k)) \\<subseteq> V - f ` range ((*) 2)", "using r f"], ["proof (prove)\nusing this:\n  range f \\<subseteq> V\n  inj f\n\ngoal (1 subgoal):\n 1. f ` range (\\<lambda>k. Suc (2 * k)) \\<subseteq> V - f ` range ((*) 2)", "by (auto simp: inj_eq) arith"], ["proof (state)\nthis:\n  f ` range (\\<lambda>k. Suc (2 * k)) \\<subseteq> V - f ` range ((*) 2)\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "ultimately"], ["proof (chain)\npicking this:\n  infinite (f ` range (\\<lambda>k. Suc (2 * k)))\n  f ` range (\\<lambda>k. Suc (2 * k)) \\<subseteq> V - f ` range ((*) 2)", "have \"infinite ?V2\""], ["proof (prove)\nusing this:\n  infinite (f ` range (\\<lambda>k. Suc (2 * k)))\n  f ` range (\\<lambda>k. Suc (2 * k)) \\<subseteq> V - f ` range ((*) 2)\n\ngoal (1 subgoal):\n 1. infinite (V - f ` range ((*) 2))", "by (metis infinite_super)"], ["proof (state)\nthis:\n  infinite (V - f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "}"], ["proof (state)\nthis:\n  infinite (V - f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "ultimately"], ["proof (chain)\npicking this:\n  V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n  f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}\n  infinite (f ` range ((*) 2))\n  infinite (V - f ` range ((*) 2))", "show ?thesis"], ["proof (prove)\nusing this:\n  V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n  f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}\n  infinite (f ` range ((*) 2))\n  infinite (V - f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2. part12_pred V V1_V2", "unfolding part12_pred_def"], ["proof (prove)\nusing this:\n  V = f ` range ((*) 2) \\<union> (V - f ` range ((*) 2)) \\<and>\n  f ` range ((*) 2) \\<inter> (V - f ` range ((*) 2)) = {}\n  infinite (f ` range ((*) 2))\n  infinite (V - f ` range ((*) 2))\n\ngoal (1 subgoal):\n 1. \\<exists>V1_V2.\n       V = fst V1_V2 \\<union> snd V1_V2 \\<and>\n       fst V1_V2 \\<inter> snd V1_V2 = {} \\<and>\n       infinite (fst V1_V2) \\<and> infinite (snd V1_V2)", "by (intro exI[of _ \"(?V1,?V2)\"]) auto"], ["proof (state)\nthis:\n  \\<exists>V1_V2. part12_pred V V1_V2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma part12: assumes \"infinite V\"  shows \"part12_pred V (part12 V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part12_pred V (part12 V)", "using part12_pred[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>V1_V2. part12_pred V V1_V2\n\ngoal (1 subgoal):\n 1. part12_pred V (part12 V)", "unfolding part12_def"], ["proof (prove)\nusing this:\n  \\<exists>V1_V2. part12_pred V V1_V2\n\ngoal (1 subgoal):\n 1. part12_pred V (SOME V1_V2. part12_pred V V1_V2)", "by(rule someI_ex)"], ["", "lemma part1_Un_part2: \"infinite V \\<Longrightarrow> part1 V \\<union> part2 V = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<union> part2 V = V", "using part12"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part12_pred ?V (part12 ?V)\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<union> part2 V = V", "unfolding part1_def part2_def part12_pred_def"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow>\n  ?V = fst (part12 ?V) \\<union> snd (part12 ?V) \\<and>\n  fst (part12 ?V) \\<inter> snd (part12 ?V) = {} \\<and>\n  infinite (fst (part12 ?V)) \\<and> infinite (snd (part12 ?V))\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow>\n    (fst \\<circ> part12) V \\<union> (snd \\<circ> part12) V = V", "by auto"], ["", "lemma part1_Int_part2: \"infinite V \\<Longrightarrow> part1 V \\<inter> part2 V = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<inter> part2 V = {}", "using part12"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part12_pred ?V (part12 ?V)\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<inter> part2 V = {}", "unfolding part1_def part2_def part12_pred_def"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow>\n  ?V = fst (part12 ?V) \\<union> snd (part12 ?V) \\<and>\n  fst (part12 ?V) \\<inter> snd (part12 ?V) = {} \\<and>\n  infinite (fst (part12 ?V)) \\<and> infinite (snd (part12 ?V))\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow>\n    (fst \\<circ> part12) V \\<inter> (snd \\<circ> part12) V = {}", "by auto"], ["", "lemma infinite_part1: \"infinite V \\<Longrightarrow> infinite (part1 V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite (part1 V)", "using part12"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part12_pred ?V (part12 ?V)\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite (part1 V)", "unfolding part1_def part12_pred_def"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow>\n  ?V = fst (part12 ?V) \\<union> snd (part12 ?V) \\<and>\n  fst (part12 ?V) \\<inter> snd (part12 ?V) = {} \\<and>\n  infinite (fst (part12 ?V)) \\<and> infinite (snd (part12 ?V))\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite ((fst \\<circ> part12) V)", "by auto"], ["", "lemma part1_su: \"infinite V \\<Longrightarrow> part1 V \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<subseteq> V", "using part1_Un_part2"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part1 ?V \\<union> part2 ?V = ?V\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part1 V \\<subseteq> V", "by auto"], ["", "lemma infinite_part2: \"infinite V \\<Longrightarrow> infinite (part2 V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite (part2 V)", "using part12"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part12_pred ?V (part12 ?V)\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite (part2 V)", "unfolding part2_def part12_pred_def"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow>\n  ?V = fst (part12 ?V) \\<union> snd (part12 ?V) \\<and>\n  fst (part12 ?V) \\<inter> snd (part12 ?V) = {} \\<and>\n  infinite (fst (part12 ?V)) \\<and> infinite (snd (part12 ?V))\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> infinite ((snd \\<circ> part12) V)", "by auto"], ["", "lemma part2_su: \"infinite V \\<Longrightarrow> part2 V \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part2 V \\<subseteq> V", "using part1_Un_part2"], ["proof (prove)\nusing this:\n  infinite ?V \\<Longrightarrow> part1 ?V \\<union> part2 ?V = ?V\n\ngoal (1 subgoal):\n 1. infinite V \\<Longrightarrow> part2 V \\<subseteq> V", "by auto"], ["", "end"]]}