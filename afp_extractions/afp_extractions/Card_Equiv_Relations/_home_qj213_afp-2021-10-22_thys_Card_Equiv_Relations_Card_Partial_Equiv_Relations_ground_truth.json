{"file_name": "/home/qj213/afp-2021-10-22/thys/Card_Equiv_Relations/Card_Partial_Equiv_Relations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Card_Equiv_Relations", "problem_names": ["lemma partial_equivI:\n  assumes \"R \\<subseteq> A \\<times> A\" \"sym R\" \"trans R\"\n  shows \"partial_equiv A R\"", "lemma partial_equiv_iff:\n  shows \"partial_equiv A R \\<longleftrightarrow> (\\<exists>A' \\<subseteq> A. equiv A' R)\"", "lemma all_partial_equivs_on:\n  assumes \"finite A\"\n  shows \"all_partial_equivs_on A = {R. partial_equiv A R}\"", "lemma equiv_inject:\n  assumes \"equiv A R\" \"equiv B R\"\n  shows \"A = B\"", "lemma injectivity:\n  assumes \"(A' \\<subseteq> A \\<and> card A' = k) \\<and> (A'' \\<subseteq> A \\<and> card A'' = k')\"\n  assumes \"equiv A' R \\<and> equiv A'' R'\"\n  assumes \"R = R'\"\n  shows \"A' = A''\" \"k = k'\"", "theorem card_partial_equiv:\n  assumes \"finite A\"\n  shows \"card {R. partial_equiv A R} = Bell (card A + 1)\""], "translations": [["", "lemma partial_equivI:\n  assumes \"R \\<subseteq> A \\<times> A\" \"sym R\" \"trans R\"\n  shows \"partial_equiv A R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_equiv A R", "using assms"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A\n  sym R\n  trans R\n\ngoal (1 subgoal):\n 1. partial_equiv A R", "unfolding partial_equiv_def"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A\n  sym R\n  trans R\n\ngoal (1 subgoal):\n 1. R \\<subseteq> A \\<times> A \\<and> sym R \\<and> trans R", "by auto"], ["", "lemma partial_equiv_iff:\n  shows \"partial_equiv A R \\<longleftrightarrow> (\\<exists>A' \\<subseteq> A. equiv A' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_equiv A R = (\\<exists>A'\\<subseteq>A. equiv A' R)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. partial_equiv A R \\<Longrightarrow> \\<exists>A'\\<subseteq>A. equiv A' R\n 2. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "assume \"partial_equiv A R\""], ["proof (state)\nthis:\n  partial_equiv A R\n\ngoal (2 subgoals):\n 1. partial_equiv A R \\<Longrightarrow> \\<exists>A'\\<subseteq>A. equiv A' R\n 2. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "from \\<open>partial_equiv A R\\<close>"], ["proof (chain)\npicking this:\n  partial_equiv A R", "have \"R `` A \\<subseteq> A\""], ["proof (prove)\nusing this:\n  partial_equiv A R\n\ngoal (1 subgoal):\n 1. R `` A \\<subseteq> A", "unfolding partial_equiv_def"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A \\<and> sym R \\<and> trans R\n\ngoal (1 subgoal):\n 1. R `` A \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  R `` A \\<subseteq> A\n\ngoal (2 subgoals):\n 1. partial_equiv A R \\<Longrightarrow> \\<exists>A'\\<subseteq>A. equiv A' R\n 2. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "moreover"], ["proof (state)\nthis:\n  R `` A \\<subseteq> A\n\ngoal (2 subgoals):\n 1. partial_equiv A R \\<Longrightarrow> \\<exists>A'\\<subseteq>A. equiv A' R\n 2. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "have \"equiv (R `` A) R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv (R `` A) R", "proof (rule equivI)"], ["proof (state)\ngoal (3 subgoals):\n 1. refl_on (R `` A) R\n 2. sym R\n 3. trans R", "from \\<open>partial_equiv A R\\<close>"], ["proof (chain)\npicking this:\n  partial_equiv A R", "show \"sym R\""], ["proof (prove)\nusing this:\n  partial_equiv A R\n\ngoal (1 subgoal):\n 1. sym R", "unfolding partial_equiv_def"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A \\<and> sym R \\<and> trans R\n\ngoal (1 subgoal):\n 1. sym R", "by blast"], ["proof (state)\nthis:\n  sym R\n\ngoal (2 subgoals):\n 1. refl_on (R `` A) R\n 2. trans R", "from \\<open>partial_equiv A R\\<close>"], ["proof (chain)\npicking this:\n  partial_equiv A R", "show \"trans R\""], ["proof (prove)\nusing this:\n  partial_equiv A R\n\ngoal (1 subgoal):\n 1. trans R", "unfolding partial_equiv_def"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A \\<and> sym R \\<and> trans R\n\ngoal (1 subgoal):\n 1. trans R", "by blast"], ["proof (state)\nthis:\n  trans R\n\ngoal (1 subgoal):\n 1. refl_on (R `` A) R", "show \"refl_on (R `` A) R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on (R `` A) R", "proof (rule refl_onI)"], ["proof (state)\ngoal (2 subgoals):\n 1. R \\<subseteq> R `` A \\<times> R `` A\n 2. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "show \"R \\<subseteq> R `` A \\<times> R `` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<subseteq> R `` A \\<times> R `` A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "assume \"p \\<in> R\""], ["proof (state)\nthis:\n  p \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "obtain x y where \"p = (x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. p = (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  p = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "moreover"], ["proof (state)\nthis:\n  p = (x, y)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "have \"x \\<in> R `` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> R `` A", "using \\<open>p \\<in> R\\<close> \\<open>p = (x, y)\\<close> \\<open>partial_equiv A R\\<close>\n            partial_equiv_def sym_def"], ["proof (prove)\nusing this:\n  p \\<in> R\n  p = (x, y)\n  partial_equiv A R\n  partial_equiv ?A ?R =\n  (?R \\<subseteq> ?A \\<times> ?A \\<and> sym ?R \\<and> trans ?R)\n  sym ?r = (\\<forall>x y. (x, y) \\<in> ?r \\<longrightarrow> (y, x) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. x \\<in> R `` A", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> R `` A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "moreover"], ["proof (state)\nthis:\n  x \\<in> R `` A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "have \"y \\<in> R `` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> R `` A", "using \\<open>p \\<in> R\\<close> \\<open>p = (x, y)\\<close> \\<open>R `` A \\<subseteq> A\\<close> \\<open>x \\<in> R `` A\\<close>"], ["proof (prove)\nusing this:\n  p \\<in> R\n  p = (x, y)\n  R `` A \\<subseteq> A\n  x \\<in> R `` A\n\ngoal (1 subgoal):\n 1. y \\<in> R `` A", "by blast"], ["proof (state)\nthis:\n  y \\<in> R `` A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R \\<Longrightarrow> x \\<in> R `` A \\<times> R `` A", "ultimately"], ["proof (chain)\npicking this:\n  p = (x, y)\n  x \\<in> R `` A\n  y \\<in> R `` A", "show \"p \\<in> R `` A \\<times> R `` A\""], ["proof (prove)\nusing this:\n  p = (x, y)\n  x \\<in> R `` A\n  y \\<in> R `` A\n\ngoal (1 subgoal):\n 1. p \\<in> R `` A \\<times> R `` A", "by auto"], ["proof (state)\nthis:\n  p \\<in> R `` A \\<times> R `` A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R \\<subseteq> R `` A \\<times> R `` A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "assume \"y \\<in> R `` A\""], ["proof (state)\nthis:\n  y \\<in> R `` A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "from this"], ["proof (chain)\npicking this:\n  y \\<in> R `` A", "obtain x where \"(x, y) \\<in> R\""], ["proof (prove)\nusing this:\n  y \\<in> R `` A\n\ngoal (1 subgoal):\n 1. (\\<And>x. (x, y) \\<in> R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "from \\<open>(x, y) \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  (x, y) \\<in> R", "have \"(y, x) \\<in> R\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n\ngoal (1 subgoal):\n 1. (y, x) \\<in> R", "using \\<open>sym R\\<close>"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n  sym R\n\ngoal (1 subgoal):\n 1. (y, x) \\<in> R", "by (meson symE)"], ["proof (state)\nthis:\n  (y, x) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R `` A \\<Longrightarrow> (x, x) \\<in> R", "from \\<open>(x, y) \\<in> R\\<close> \\<open>(y, x) \\<in> R\\<close>"], ["proof (chain)\npicking this:\n  (x, y) \\<in> R\n  (y, x) \\<in> R", "show \"(y, y) \\<in> R\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n  (y, x) \\<in> R\n\ngoal (1 subgoal):\n 1. (y, y) \\<in> R", "using \\<open>trans R\\<close>"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n  (y, x) \\<in> R\n  trans R\n\ngoal (1 subgoal):\n 1. (y, y) \\<in> R", "by (meson transE)"], ["proof (state)\nthis:\n  (y, y) \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  refl_on (R `` A) R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  equiv (R `` A) R\n\ngoal (2 subgoals):\n 1. partial_equiv A R \\<Longrightarrow> \\<exists>A'\\<subseteq>A. equiv A' R\n 2. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "ultimately"], ["proof (chain)\npicking this:\n  R `` A \\<subseteq> A\n  equiv (R `` A) R", "show \"\\<exists>A'\\<subseteq>A. equiv A' R\""], ["proof (prove)\nusing this:\n  R `` A \\<subseteq> A\n  equiv (R `` A) R\n\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. equiv A' R", "by blast"], ["proof (state)\nthis:\n  \\<exists>A'\\<subseteq>A. equiv A' R\n\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "assume \"\\<exists>A'\\<subseteq>A. equiv A' R\""], ["proof (state)\nthis:\n  \\<exists>A'\\<subseteq>A. equiv A' R\n\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "from this"], ["proof (chain)\npicking this:\n  \\<exists>A'\\<subseteq>A. equiv A' R", "obtain A' where \"A' \\<subseteq> A\" and \"equiv A' R\""], ["proof (prove)\nusing this:\n  \\<exists>A'\\<subseteq>A. equiv A' R\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; equiv A' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  equiv A' R\n\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A. equiv A' R \\<Longrightarrow> partial_equiv A R", "show \"partial_equiv A R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_equiv A R", "proof (rule partial_equivI)"], ["proof (state)\ngoal (3 subgoals):\n 1. R \\<subseteq> A \\<times> A\n 2. sym R\n 3. trans R", "from \\<open>equiv A' R\\<close> \\<open>A' \\<subseteq> A\\<close>"], ["proof (chain)\npicking this:\n  equiv A' R\n  A' \\<subseteq> A", "show \"R \\<subseteq> A \\<times> A\""], ["proof (prove)\nusing this:\n  equiv A' R\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. R \\<subseteq> A \\<times> A", "using equiv_class_eq_iff"], ["proof (prove)\nusing this:\n  equiv A' R\n  A' \\<subseteq> A\n  equiv ?A ?r \\<Longrightarrow>\n  ((?x, ?y) \\<in> ?r) =\n  (?r `` {?x} = ?r `` {?y} \\<and> ?x \\<in> ?A \\<and> ?y \\<in> ?A)\n\ngoal (1 subgoal):\n 1. R \\<subseteq> A \\<times> A", "by fastforce"], ["proof (state)\nthis:\n  R \\<subseteq> A \\<times> A\n\ngoal (2 subgoals):\n 1. sym R\n 2. trans R", "from \\<open>equiv A' R\\<close>"], ["proof (chain)\npicking this:\n  equiv A' R", "show \"sym R\""], ["proof (prove)\nusing this:\n  equiv A' R\n\ngoal (1 subgoal):\n 1. sym R", "using equivE"], ["proof (prove)\nusing this:\n  equiv A' R\n  \\<lbrakk>equiv ?A ?r;\n   \\<lbrakk>refl_on ?A ?r; sym ?r; trans ?r\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. sym R", "by blast"], ["proof (state)\nthis:\n  sym R\n\ngoal (1 subgoal):\n 1. trans R", "from \\<open>equiv A' R\\<close>"], ["proof (chain)\npicking this:\n  equiv A' R", "show \"trans R\""], ["proof (prove)\nusing this:\n  equiv A' R\n\ngoal (1 subgoal):\n 1. trans R", "using equivE"], ["proof (prove)\nusing this:\n  equiv A' R\n  \\<lbrakk>equiv ?A ?r;\n   \\<lbrakk>refl_on ?A ?r; sym ?r; trans ?r\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. trans R", "by blast"], ["proof (state)\nthis:\n  trans R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  partial_equiv A R\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Construction of all Partial Equivalence Relations for a Given Set\\<close>"], ["", "definition all_partial_equivs_on :: \"'a set \\<Rightarrow> (('a \\<times> 'a) set) set\"\nwhere\n  \"all_partial_equivs_on A =\n    do {\n      k \\<leftarrow> {0..card A};\n      A' \\<leftarrow> {A'. A' \\<subseteq> A \\<and> card A' = k};\n      {R. equiv A' R}\n    }\""], ["", "lemma all_partial_equivs_on:\n  assumes \"finite A\"\n  shows \"all_partial_equivs_on A = {R. partial_equiv A R}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_partial_equivs_on A = {R. partial_equiv A R}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. all_partial_equivs_on A \\<subseteq> {R. partial_equiv A R}\n 2. {R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A", "show \"all_partial_equivs_on A \\<subseteq> {R. partial_equiv A R}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_partial_equivs_on A \\<subseteq> {R. partial_equiv A R}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> all_partial_equivs_on A \\<Longrightarrow>\n       x \\<in> {R. partial_equiv A R}", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> all_partial_equivs_on A \\<Longrightarrow>\n       x \\<in> {R. partial_equiv A R}", "assume \"R \\<in> all_partial_equivs_on A\""], ["proof (state)\nthis:\n  R \\<in> all_partial_equivs_on A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> all_partial_equivs_on A \\<Longrightarrow>\n       x \\<in> {R. partial_equiv A R}", "from this"], ["proof (chain)\npicking this:\n  R \\<in> all_partial_equivs_on A", "obtain A' where \"A' \\<subseteq> A\" and \"equiv A' R\""], ["proof (prove)\nusing this:\n  R \\<in> all_partial_equivs_on A\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; equiv A' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding all_partial_equivs_on_def"], ["proof (prove)\nusing this:\n  R \\<in> {0..card A} \\<bind>\n          (\\<lambda>k.\n              {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n              (\\<lambda>A'. Collect (equiv A')))\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; equiv A' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  equiv A' R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> all_partial_equivs_on A \\<Longrightarrow>\n       x \\<in> {R. partial_equiv A R}", "from this"], ["proof (chain)\npicking this:\n  A' \\<subseteq> A\n  equiv A' R", "have \"partial_equiv A R\""], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  equiv A' R\n\ngoal (1 subgoal):\n 1. partial_equiv A R", "using partial_equiv_iff"], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  equiv A' R\n  partial_equiv ?A ?R = (\\<exists>A'\\<subseteq>?A. equiv A' ?R)\n\ngoal (1 subgoal):\n 1. partial_equiv A R", "by blast"], ["proof (state)\nthis:\n  partial_equiv A R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> all_partial_equivs_on A \\<Longrightarrow>\n       x \\<in> {R. partial_equiv A R}", "from this"], ["proof (chain)\npicking this:\n  partial_equiv A R", "show \"R \\<in> {R. partial_equiv A R}\""], ["proof (prove)\nusing this:\n  partial_equiv A R\n\ngoal (1 subgoal):\n 1. R \\<in> {R. partial_equiv A R}", ".."], ["proof (state)\nthis:\n  R \\<in> {R. partial_equiv A R}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  all_partial_equivs_on A \\<subseteq> {R. partial_equiv A R}\n\ngoal (1 subgoal):\n 1. {R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A", "show \"{R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "assume \"R \\<in> {R. partial_equiv A R}\""], ["proof (state)\nthis:\n  R \\<in> {R. partial_equiv A R}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "from this"], ["proof (chain)\npicking this:\n  R \\<in> {R. partial_equiv A R}", "obtain A' where \"A' \\<subseteq> A\" and \"equiv A' R\""], ["proof (prove)\nusing this:\n  R \\<in> {R. partial_equiv A R}\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; equiv A' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using partial_equiv_iff"], ["proof (prove)\nusing this:\n  R \\<in> {R. partial_equiv A R}\n  partial_equiv ?A ?R = (\\<exists>A'\\<subseteq>?A. equiv A' ?R)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; equiv A' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mem_Collect_eq)"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  equiv A' R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "moreover"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  equiv A' R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "have \"card A' \\<in> {0..card A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A' \\<in> {0..card A}", "using \\<open>A' \\<subseteq> A\\<close> \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  finite A\n\ngoal (1 subgoal):\n 1. card A' \\<in> {0..card A}", "by (simp add: card_mono)"], ["proof (state)\nthis:\n  card A' \\<in> {0..card A}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {R. partial_equiv A R} \\<Longrightarrow>\n       x \\<in> all_partial_equivs_on A", "ultimately"], ["proof (chain)\npicking this:\n  A' \\<subseteq> A\n  equiv A' R\n  card A' \\<in> {0..card A}", "show \"R \\<in> all_partial_equivs_on A\""], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  equiv A' R\n  card A' \\<in> {0..card A}\n\ngoal (1 subgoal):\n 1. R \\<in> all_partial_equivs_on A", "unfolding all_partial_equivs_on_def"], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  equiv A' R\n  card A' \\<in> {0..card A}\n\ngoal (1 subgoal):\n 1. R \\<in> {0..card A} \\<bind>\n            (\\<lambda>k.\n                {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n                (\\<lambda>A'. Collect (equiv A')))", "by (auto simp del: atLeastAtMost_iff)"], ["proof (state)\nthis:\n  R \\<in> all_partial_equivs_on A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {R. partial_equiv A R} \\<subseteq> all_partial_equivs_on A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Injectivity of the Set Construction\\<close>"], ["", "lemma equiv_inject:\n  assumes \"equiv A R\" \"equiv B R\"\n  shows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A = B", "from assms"], ["proof (chain)\npicking this:\n  equiv A R\n  equiv B R", "have \"R \\<subseteq> A \\<times> A\" \"R \\<subseteq> B \\<times> B\""], ["proof (prove)\nusing this:\n  equiv A R\n  equiv B R\n\ngoal (1 subgoal):\n 1. R \\<subseteq> A \\<times> A &&& R \\<subseteq> B \\<times> B", "by (simp add: equiv_type)+"], ["proof (state)\nthis:\n  R \\<subseteq> A \\<times> A\n  R \\<subseteq> B \\<times> B\n\ngoal (1 subgoal):\n 1. A = B", "moreover"], ["proof (state)\nthis:\n  R \\<subseteq> A \\<times> A\n  R \\<subseteq> B \\<times> B\n\ngoal (1 subgoal):\n 1. A = B", "from assms"], ["proof (chain)\npicking this:\n  equiv A R\n  equiv B R", "have \"\\<forall>x\\<in>A. (x, x) \\<in> R\" \"\\<forall>x\\<in>B. (x, x) \\<in> R\""], ["proof (prove)\nusing this:\n  equiv A R\n  equiv B R\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. (x, x) \\<in> R &&& \\<forall>x\\<in>B. (x, x) \\<in> R", "by (simp add: eq_equiv_class)+"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A. (x, x) \\<in> R\n  \\<forall>x\\<in>B. (x, x) \\<in> R\n\ngoal (1 subgoal):\n 1. A = B", "ultimately"], ["proof (chain)\npicking this:\n  R \\<subseteq> A \\<times> A\n  R \\<subseteq> B \\<times> B\n  \\<forall>x\\<in>A. (x, x) \\<in> R\n  \\<forall>x\\<in>B. (x, x) \\<in> R", "show ?thesis"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A\n  R \\<subseteq> B \\<times> B\n  \\<forall>x\\<in>A. (x, x) \\<in> R\n  \\<forall>x\\<in>B. (x, x) \\<in> R\n\ngoal (1 subgoal):\n 1. A = B", "using mem_Sigma_iff subset_antisym subset_eq"], ["proof (prove)\nusing this:\n  R \\<subseteq> A \\<times> A\n  R \\<subseteq> B \\<times> B\n  \\<forall>x\\<in>A. (x, x) \\<in> R\n  \\<forall>x\\<in>B. (x, x) \\<in> R\n  ((?a, ?b) \\<in> Sigma ?A ?B) = (?a \\<in> ?A \\<and> ?b \\<in> ?B ?a)\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  (?A \\<subseteq> ?B) = (\\<forall>x\\<in>?A. x \\<in> ?B)\n\ngoal (1 subgoal):\n 1. A = B", "by blast"], ["proof (state)\nthis:\n  A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma injectivity:\n  assumes \"(A' \\<subseteq> A \\<and> card A' = k) \\<and> (A'' \\<subseteq> A \\<and> card A'' = k')\"\n  assumes \"equiv A' R \\<and> equiv A'' R'\"\n  assumes \"R = R'\"\n  shows \"A' = A''\" \"k = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' = A'' &&& k = k'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. A' = A''\n 2. k = k'", "from \\<open>R = R'\\<close> assms(2)"], ["proof (chain)\npicking this:\n  R = R'\n  equiv A' R \\<and> equiv A'' R'", "show \"A' = A''\""], ["proof (prove)\nusing this:\n  R = R'\n  equiv A' R \\<and> equiv A'' R'\n\ngoal (1 subgoal):\n 1. A' = A''", "using equiv_inject"], ["proof (prove)\nusing this:\n  R = R'\n  equiv A' R \\<and> equiv A'' R'\n  \\<lbrakk>equiv ?A ?R; equiv ?B ?R\\<rbrakk> \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. A' = A''", "by fast"], ["proof (state)\nthis:\n  A' = A''\n\ngoal (1 subgoal):\n 1. k = k'", "from this assms(1)"], ["proof (chain)\npicking this:\n  A' = A''\n  (A' \\<subseteq> A \\<and> card A' = k) \\<and>\n  A'' \\<subseteq> A \\<and> card A'' = k'", "show \"k = k'\""], ["proof (prove)\nusing this:\n  A' = A''\n  (A' \\<subseteq> A \\<and> card A' = k) \\<and>\n  A'' \\<subseteq> A \\<and> card A'' = k'\n\ngoal (1 subgoal):\n 1. k = k'", "by simp"], ["proof (state)\nthis:\n  k = k'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Cardinality Theorem of Partial Equivalence Relations\\<close>"], ["", "theorem card_partial_equiv:\n  assumes \"finite A\"\n  shows \"card {R. partial_equiv A R} = Bell (card A + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "let ?expr = \"do {\n      k \\<leftarrow> {0..card A};\n      A' \\<leftarrow> {A'. A' \\<subseteq> A \\<and> card A' = k};\n      {R. equiv A' R}\n    }\""], ["proof (state)\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "have \"card {R. partial_equiv A R} = card (all_partial_equivs_on A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = card (all_partial_equivs_on A)", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = card (all_partial_equivs_on A)", "by (simp add: all_partial_equivs_on)"], ["proof (state)\nthis:\n  card {R. partial_equiv A R} = card (all_partial_equivs_on A)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "also"], ["proof (state)\nthis:\n  card {R. partial_equiv A R} = card (all_partial_equivs_on A)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "have \"card (all_partial_equivs_on A) = card ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (all_partial_equivs_on A) =\n    card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R})))", "unfolding all_partial_equivs_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. Collect (equiv A')))) =\n    card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R})))", ".."], ["proof (state)\nthis:\n  card (all_partial_equivs_on A) =\n  card\n   ({0..card A} \\<bind>\n    (\\<lambda>k.\n        {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n        (\\<lambda>A'. {R. equiv A' R})))\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "also"], ["proof (state)\nthis:\n  card (all_partial_equivs_on A) =\n  card\n   ({0..card A} \\<bind>\n    (\\<lambda>k.\n        {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n        (\\<lambda>A'. {R. equiv A' R})))\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "have \"card ?expr = (\\<Sum>k = 0..card A. (card A choose k) * Bell k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "assume k: \"k \\<in> {..card A}\""], ["proof (state)\nthis:\n  k \\<in> {..card A}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "let ?expr = \"?comp k\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "let \"?S \\<bind> ?comp\" = ?expr"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {A'. A' \\<subseteq> A \\<and> card A' = k}", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite {A'. A' \\<subseteq> A \\<and> card A' = k}", "by simp"], ["proof (state)\nthis:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "{"], ["proof (state)\nthis:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "fix A'"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "assume A': \"A' \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k}\""], ["proof (state)\nthis:\n  A' \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "from this"], ["proof (chain)\npicking this:\n  A' \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k}", "have \"A' \\<subseteq> A\" and \"card A' = k\""], ["proof (prove)\nusing this:\n  A' \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. A' \\<subseteq> A &&& card A' = k", "by auto"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  card A' = k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "let ?expr = \"?comp A'\""], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"finite A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A'", "using \\<open>finite A\\<close> \\<open>A' \\<subseteq> A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite A'", "by (simp add: finite_subset)"], ["proof (state)\nthis:\n  finite A'\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"card ?expr = Bell k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {R. equiv A' R} = Bell k", "using \\<open>finite A\\<close> \\<open>finite A'\\<close> \\<open>A' \\<subseteq> A\\<close> \\<open>card A' = k\\<close>"], ["proof (prove)\nusing this:\n  finite A\n  finite A'\n  A' \\<subseteq> A\n  card A' = k\n\ngoal (1 subgoal):\n 1. card {R. equiv A' R} = Bell k", "by (simp add: card_equiv_rel_eq_Bell)"], ["proof (state)\nthis:\n  card {R. equiv A' R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card {R. equiv A' R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {R. equiv A' R}", "using \\<open>finite A'\\<close>"], ["proof (prove)\nusing this:\n  finite A'\n\ngoal (1 subgoal):\n 1. finite {R. equiv A' R}", "by (simp add: finite_equiv)"], ["proof (state)\nthis:\n  finite {R. equiv A' R}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card {R. equiv A' R} = Bell k\n  finite {R. equiv A' R}", "have \"finite ?expr \\<and> card ?expr = Bell k\""], ["proof (prove)\nusing this:\n  card {R. equiv A' R} = Bell k\n  finite {R. equiv A' R}\n\ngoal (1 subgoal):\n 1. finite {R. equiv A' R} \\<and> card {R. equiv A' R} = Bell k", "by blast"], ["proof (state)\nthis:\n  finite {R. equiv A' R} \\<and> card {R. equiv A' R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "note inner = this"], ["proof (state)\nthis:\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on (\\<lambda>A'. {R. equiv A' R})\n     {A'. A' \\<subseteq> A \\<and> card A' = k}", "by (injectivity_solver rule: injectivity(1))"], ["proof (state)\nthis:\n  disjoint_family_on (\\<lambda>A'. {R. equiv A' R})\n   {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  disjoint_family_on (\\<lambda>A'. {R. equiv A' R})\n   {A'. A' \\<subseteq> A \\<and> card A' = k}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"card ?S = card A choose k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {A'. A' \\<subseteq> A \\<and> card A' = k} = card A choose k", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. card {A'. A' \\<subseteq> A \\<and> card A' = k} = card A choose k", "by (simp add: n_subsets)"], ["proof (state)\nthis:\n  card {A'. A' \\<subseteq> A \\<and> card A' = k} = card A choose k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n  disjoint_family_on (\\<lambda>A'. {R. equiv A' R})\n   {A'. A' \\<subseteq> A \\<and> card A' = k}\n  card {A'. A' \\<subseteq> A \\<and> card A' = k} = card A choose k", "have \"card ?expr = (card A choose k) * Bell k\" (is \"_ = ?formula\")"], ["proof (prove)\nusing this:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n  disjoint_family_on (\\<lambda>A'. {R. equiv A' R})\n   {A'. A' \\<subseteq> A \\<and> card A' = k}\n  card {A'. A' \\<subseteq> A \\<and> card A' = k} = card A choose k\n\ngoal (1 subgoal):\n 1. card\n     ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n      (\\<lambda>A'. {R. equiv A' R})) =\n    (card A choose k) * Bell k", "by (subst card_bind_constant) auto"], ["proof (state)\nthis:\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose k) * Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose k) * Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"finite ?expr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n      (\\<lambda>A'. {R. equiv A' R}))", "using \\<open>finite ?S\\<close> inner"], ["proof (prove)\nusing this:\n  finite {A'. A' \\<subseteq> A \\<and> card A' = k}\n  ?A'2 \\<in> {A'. A' \\<subseteq> A \\<and> card A' = k} \\<Longrightarrow>\n  finite {R. equiv ?A'2 R} \\<and> card {R. equiv ?A'2 R} = Bell k\n\ngoal (1 subgoal):\n 1. finite\n     ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n      (\\<lambda>A'. {R. equiv A' R}))", "by (auto intro!: finite_bind)"], ["proof (state)\nthis:\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R}))\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose k) * Bell k\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R}))", "have \"finite ?expr \\<and> card ?expr = ?formula\""], ["proof (prove)\nusing this:\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose k) * Bell k\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R}))\n\ngoal (1 subgoal):\n 1. finite\n     ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n      (\\<lambda>A'. {R. equiv A' R})) \\<and>\n    card\n     ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n      (\\<lambda>A'. {R. equiv A' R})) =\n    (card A choose k) * Bell k", "by blast"], ["proof (state)\nthis:\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) \\<and>\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose k) * Bell k\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {..card A} \\<Longrightarrow>\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) \\<and>\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose ?k2) * Bell ?k2\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  ?k2 \\<in> {..card A} \\<Longrightarrow>\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) \\<and>\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose ?k2) * Bell ?k2\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..card A}", "by simp"], ["proof (state)\nthis:\n  finite {0..card A}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "moreover"], ["proof (state)\nthis:\n  finite {0..card A}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "have \"disjoint_family_on ?comp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjoint_family_on\n     (\\<lambda>k.\n         {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n         (\\<lambda>A'. {R. equiv A' R}))\n     {0..card A}", "by (injectivity_solver rule: injectivity(2))"], ["proof (state)\nthis:\n  disjoint_family_on\n   (\\<lambda>k.\n       {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n       (\\<lambda>A'. {R. equiv A' R}))\n   {0..card A}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "ultimately"], ["proof (chain)\npicking this:\n  ?k2 \\<in> {..card A} \\<Longrightarrow>\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) \\<and>\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose ?k2) * Bell ?k2\n  finite {0..card A}\n  disjoint_family_on\n   (\\<lambda>k.\n       {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n       (\\<lambda>A'. {R. equiv A' R}))\n   {0..card A}", "show \"card ?expr = (\\<Sum>k = 0..card A. (card A choose k) * Bell k)\""], ["proof (prove)\nusing this:\n  ?k2 \\<in> {..card A} \\<Longrightarrow>\n  finite\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) \\<and>\n  card\n   ({A'. A' \\<subseteq> A \\<and> card A' = ?k2} \\<bind>\n    (\\<lambda>A'. {R. equiv A' R})) =\n  (card A choose ?k2) * Bell ?k2\n  finite {0..card A}\n  disjoint_family_on\n   (\\<lambda>k.\n       {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n       (\\<lambda>A'. {R. equiv A' R}))\n   {0..card A}\n\ngoal (1 subgoal):\n 1. card\n     ({0..card A} \\<bind>\n      (\\<lambda>k.\n          {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n          (\\<lambda>A'. {R. equiv A' R}))) =\n    (\\<Sum>k = 0..card A. (card A choose k) * Bell k)", "by (subst card_bind) auto"], ["proof (state)\nthis:\n  card\n   ({0..card A} \\<bind>\n    (\\<lambda>k.\n        {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n        (\\<lambda>A'. {R. equiv A' R}))) =\n  (\\<Sum>k = 0..card A. (card A choose k) * Bell k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card\n   ({0..card A} \\<bind>\n    (\\<lambda>k.\n        {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n        (\\<lambda>A'. {R. equiv A' R}))) =\n  (\\<Sum>k = 0..card A. (card A choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "also"], ["proof (state)\nthis:\n  card\n   ({0..card A} \\<bind>\n    (\\<lambda>k.\n        {A'. A' \\<subseteq> A \\<and> card A' = k} \\<bind>\n        (\\<lambda>A'. {R. equiv A' R}))) =\n  (\\<Sum>k = 0..card A. (card A choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "have \"\\<dots> = (\\<Sum>k\\<le>card A. (card A choose k) * Bell k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..card A. (card A choose k) * Bell k) =\n    (\\<Sum>k\\<le>card A. (card A choose k) * Bell k)", "by (auto intro: sum.cong)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..card A. (card A choose k) * Bell k) =\n  (\\<Sum>k\\<le>card A. (card A choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..card A. (card A choose k) * Bell k) =\n  (\\<Sum>k\\<le>card A. (card A choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "have \"\\<dots> = Bell (card A + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>card A. (card A choose k) * Bell k) = Bell (card A + 1)", "using Bell_recursive_eq"], ["proof (prove)\nusing this:\n  Bell (?n + 1) = (\\<Sum>k\\<le>?n. (?n choose k) * Bell k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<le>card A. (card A choose k) * Bell k) = Bell (card A + 1)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k\\<le>card A. (card A choose k) * Bell k) = Bell (card A + 1)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "finally"], ["proof (chain)\npicking this:\n  card {R. partial_equiv A R} = Bell (card A + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {R. partial_equiv A R} = Bell (card A + 1)\n\ngoal (1 subgoal):\n 1. card {R. partial_equiv A R} = Bell (card A + 1)", "."], ["proof (state)\nthis:\n  card {R. partial_equiv A R} = Bell (card A + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}