{"file_name": "/home/qj213/afp-2021-10-22/thys/Native_Word/Code_Target_Bits_Int.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Native_Word", "problem_names": ["lemma [code_unfold]:\n  \\<open>bit x n \\<longleftrightarrow> x AND (push_bit n 1) \\<noteq> 0\\<close> for x :: int", "lemma bit_int_code [code]:\n  \"bit (int_of_integer x) n = bit x n\"", "lemma and_int_code [code]:\n  \"int_of_integer i AND int_of_integer j = int_of_integer (i AND j)\"", "lemma or_int_code [code]:\n  \"int_of_integer i OR int_of_integer j = int_of_integer (i OR j)\"", "lemma xor_int_code [code]:\n  \"int_of_integer i XOR int_of_integer j = int_of_integer (i XOR j)\"", "lemma not_int_code [code]:\n  \"NOT (int_of_integer i) = int_of_integer (NOT i)\"", "lemma push_bit_int_code [code]:\n  \\<open>push_bit n (int_of_integer x) = int_of_integer (push_bit n x)\\<close>", "lemma drop_bit_int_code [code]:\n  \\<open>drop_bit n (int_of_integer x) = int_of_integer (drop_bit n x)\\<close>", "lemma take_bit_int_code [code]:\n  \\<open>take_bit n (int_of_integer x) = int_of_integer (take_bit n x)\\<close>", "lemma lsb_int_code [code]:\n  \"lsb (int_of_integer x) = lsb x\"", "lemma set_bit_int_code [code]:\n  \"set_bit (int_of_integer x) n b = int_of_integer (set_bit x n b)\"", "lemma int_of_integer_symbolic_code [code]:\n  \"int_of_integer_symbolic = int_of_integer\"", "lemma [code]:\n  \\<open>Code_Target_Bits_Int.even i \\<longleftrightarrow> i AND 1 = 0\\<close>", "lemma bin_rest_code:\n  \"bin_rest (int_of_integer i) = int_of_integer (bin_rest_integer i)\""], "translations": [["", "lemma [code_unfold]:\n  \\<open>bit x n \\<longleftrightarrow> x AND (push_bit n 1) \\<noteq> 0\\<close> for x :: int"], ["proof (prove)\ngoal (1 subgoal):\n 1. bit x n = (x AND push_bit n 1 \\<noteq> 0)", "by (fact bit_iff_and_push_bit_not_eq_0)"], ["", "context\nincludes integer.lifting\nbegin"], ["", "lemma bit_int_code [code]:\n  \"bit (int_of_integer x) n = bit x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bit (int_of_integer x) n = bit x n", "by transfer simp"], ["", "lemma and_int_code [code]:\n  \"int_of_integer i AND int_of_integer j = int_of_integer (i AND j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_of_integer i AND int_of_integer j = int_of_integer (i AND j)", "by transfer simp"], ["", "lemma or_int_code [code]:\n  \"int_of_integer i OR int_of_integer j = int_of_integer (i OR j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_of_integer i OR int_of_integer j = int_of_integer (i OR j)", "by transfer simp"], ["", "lemma xor_int_code [code]:\n  \"int_of_integer i XOR int_of_integer j = int_of_integer (i XOR j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_of_integer i XOR int_of_integer j = int_of_integer (i XOR j)", "by transfer simp"], ["", "lemma not_int_code [code]:\n  \"NOT (int_of_integer i) = int_of_integer (NOT i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NOT (int_of_integer i) = int_of_integer (NOT i)", "by transfer simp"], ["", "lemma push_bit_int_code [code]:\n  \\<open>push_bit n (int_of_integer x) = int_of_integer (push_bit n x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. push_bit n (int_of_integer x) = int_of_integer (push_bit n x)", "by transfer simp"], ["", "lemma drop_bit_int_code [code]:\n  \\<open>drop_bit n (int_of_integer x) = int_of_integer (drop_bit n x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop_bit n (int_of_integer x) = int_of_integer (drop_bit n x)", "by transfer simp"], ["", "lemma take_bit_int_code [code]:\n  \\<open>take_bit n (int_of_integer x) = int_of_integer (take_bit n x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. take_bit n (int_of_integer x) = int_of_integer (take_bit n x)", "by transfer simp"], ["", "lemma lsb_int_code [code]:\n  \"lsb (int_of_integer x) = lsb x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lsb (int_of_integer x) = lsb x", "by transfer simp"], ["", "lemma set_bit_int_code [code]:\n  \"set_bit (int_of_integer x) n b = int_of_integer (set_bit x n b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bit_class.set_bit (int_of_integer x) n b =\n    int_of_integer (set_bit_class.set_bit x n b)", "by transfer simp"], ["", "lemma int_of_integer_symbolic_code [code]:\n  \"int_of_integer_symbolic = int_of_integer\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_of_integer_symbolic = int_of_integer", "by (simp add: int_of_integer_symbolic_def)"], ["", "context\nbegin"], ["", "qualified"], ["", "definition even :: \\<open>int \\<Rightarrow> bool\\<close>\n  where [code_abbrev]: \\<open>even = Parity.even\\<close>"], ["", "end"], ["", "lemma [code]:\n  \\<open>Code_Target_Bits_Int.even i \\<longleftrightarrow> i AND 1 = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.even i = (i AND 1 = 0)", "by (simp add: Code_Target_Bits_Int.even_def even_iff_mod_2_eq_zero and_one_eq)"], ["", "lemma bin_rest_code:\n  \"bin_rest (int_of_integer i) = int_of_integer (bin_rest_integer i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_of_integer i div 2 = int_of_integer (bin_rest_integer i)", "by transfer simp"], ["", "end"], ["", "end"]]}