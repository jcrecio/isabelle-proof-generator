{"file_name": "/home/qj213/afp-2021-10-22/thys/Native_Word/Native_Cast_Uint.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Native_Word", "problem_names": ["lemma uint8_of_uint_code [code]:\n  \"uint8_of_uint x = Abs_uint8' (ucast (Rep_uint' x))\"", "lemma uint16_of_uint_code [code]:\n  \"uint16_of_uint x = Abs_uint16' (ucast (Rep_uint' x))\"", "lemma uint32_of_uint_code [code]:\n  \"uint32_of_uint x = Abs_uint32' (ucast (Rep_uint' x))\"", "lemma uint64_of_uint_code [code]:\n  \"uint64_of_uint x = Abs_uint64' (ucast (Rep_uint' x))\"", "lemma uint_of_uint8_code [code]:\n  \"uint_of_uint8 x = Abs_uint' (ucast (Rep_uint8' x))\"", "lemma uint_of_uint16_code [code]:\n  \"uint_of_uint16 x = Abs_uint' (ucast (Rep_uint16' x))\"", "lemma uint_of_uint32_code [code]:\n  \"uint_of_uint32 x = Abs_uint' (ucast (Rep_uint32' x))\"", "lemma uint_of_uint64_code [code]:\n  \"uint_of_uint64 x = Abs_uint' (ucast (Rep_uint64' x))\""], "translations": [["", "lemma uint8_of_uint_code [code]:\n  \"uint8_of_uint x = Abs_uint8' (ucast (Rep_uint' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint8_of_uint x = Abs_uint8' (ucast (Rep_uint' x))", "unfolding Rep_uint'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. uint8_of_uint x = Abs_uint8' (ucast (Rep_uint x))", "by transfer simp"], ["", "lemma uint16_of_uint_code [code]:\n  \"uint16_of_uint x = Abs_uint16' (ucast (Rep_uint' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint16_of_uint x = Abs_uint16' (ucast (Rep_uint' x))", "unfolding Rep_uint'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. uint16_of_uint x = Abs_uint16' (ucast (Rep_uint x))", "by transfer simp"], ["", "lemma uint32_of_uint_code [code]:\n  \"uint32_of_uint x = Abs_uint32' (ucast (Rep_uint' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint32_of_uint x = Abs_uint32' (ucast (Rep_uint' x))", "unfolding Rep_uint'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. uint32_of_uint x = Abs_uint32' (ucast (Rep_uint x))", "by transfer simp"], ["", "lemma uint64_of_uint_code [code]:\n  \"uint64_of_uint x = Abs_uint64' (ucast (Rep_uint' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint64_of_uint x = Abs_uint64' (ucast (Rep_uint' x))", "unfolding Rep_uint'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. uint64_of_uint x = Abs_uint64' (ucast (Rep_uint x))", "by transfer simp"], ["", "lemma uint_of_uint8_code [code]:\n  \"uint_of_uint8 x = Abs_uint' (ucast (Rep_uint8' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint_of_uint8 x = Abs_uint' (ucast (Rep_uint8' x))", "by transfer simp"], ["", "lemma uint_of_uint16_code [code]:\n  \"uint_of_uint16 x = Abs_uint' (ucast (Rep_uint16' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint_of_uint16 x = Abs_uint' (ucast (Rep_uint16' x))", "by transfer simp"], ["", "lemma uint_of_uint32_code [code]:\n  \"uint_of_uint32 x = Abs_uint' (ucast (Rep_uint32' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint_of_uint32 x = Abs_uint' (ucast (Rep_uint32' x))", "by transfer simp"], ["", "lemma uint_of_uint64_code [code]:\n  \"uint_of_uint64 x = Abs_uint' (ucast (Rep_uint64' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uint_of_uint64 x = Abs_uint' (ucast (Rep_uint64' x))", "by transfer simp"], ["", "end"]]}