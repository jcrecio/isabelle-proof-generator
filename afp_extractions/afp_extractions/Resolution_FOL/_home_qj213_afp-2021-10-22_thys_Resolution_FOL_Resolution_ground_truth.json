{"file_name": "/home/qj213/afp-2021-10-22/thys/Resolution_FOL/Resolution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Resolution_FOL", "problem_names": ["lemma cancel_comp1: \"(l\\<^sup>c)\\<^sup>c = l\"", "lemma cancel_comp2:\n  assumes asm: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2\\<^sup>c\"\n  shows \"l\\<^sub>1 = l\\<^sub>2\"", "lemma comp_exi1: \"\\<exists>l'. l' = l\\<^sup>c\"", "lemma comp_exi2: \"\\<exists>l. l' = l\\<^sup>c\"", "lemma comp_swap: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>1 = l\\<^sub>2\\<^sup>c\"", "lemma sign_comp: \"sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and> get_pred l\\<^sub>1 = get_pred l\\<^sub>2 \\<and> get_terms l\\<^sub>1 = get_terms l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>2 = l\\<^sub>1\\<^sup>c\"", "lemma sign_comp_atom: \"sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and> get_atom l\\<^sub>1 = get_atom l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>2 = l\\<^sub>1\\<^sup>c\"", "lemma cancel_compls1: \"(L\\<^sup>C)\\<^sup>C = L\"", "lemma cancel_compls2:\n  assumes asm: \"L\\<^sub>1\\<^sup>C = L\\<^sub>2\\<^sup>C\"\n  shows \"L\\<^sub>1 = L\\<^sub>2\"", "lemma ground_vars\\<^sub>t:\n  assumes \"ground\\<^sub>t t\"\n  shows \"vars\\<^sub>t t = {}\"", "lemma ground\\<^sub>t\\<^sub>s_vars\\<^sub>t\\<^sub>s: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"vars\\<^sub>t\\<^sub>s ts = {}\"", "lemma ground\\<^sub>l_vars\\<^sub>l:\n  assumes \"ground\\<^sub>l l\"\n  shows \"vars\\<^sub>l l = {}\"", "lemma ground\\<^sub>l\\<^sub>s_vars\\<^sub>l\\<^sub>s: \n  assumes \"ground\\<^sub>l\\<^sub>s L\"\n  shows \"vars\\<^sub>l\\<^sub>s L = {}\"", "lemma ground_comp: \"ground\\<^sub>l (l\\<^sup>c) \\<longleftrightarrow> ground\\<^sub>l l\"", "lemma  ground_compls: \"ground\\<^sub>l\\<^sub>s (L\\<^sup>C) \\<longleftrightarrow> ground\\<^sub>l\\<^sub>s L\"", "lemma ground_var_denott: \n  assumes \"ground\\<^sub>t t\"\n  shows \"eval\\<^sub>t E F t = eval\\<^sub>t E' F t\"", "lemma ground_var_denotts: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts\"", "lemma ground_var_denot: \n  assumes \"ground\\<^sub>l l\"\n  shows \"eval\\<^sub>l E F G l = eval\\<^sub>l E' F G l\"", "lemma subls_def2: \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>|l. l \\<in> L}\"", "lemma comp_sub: \"(l\\<^sup>c) \\<cdot>\\<^sub>l \\<sigma>=(l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c\"", "lemma compls_subls: \"(L\\<^sup>C) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>=(L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\\<^sup>C\"", "lemma subls_union: \"(L\\<^sub>1 \\<union> L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<union> (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\"", "lemma empty_subt: \"(t :: fterm) \\<cdot>\\<^sub>t \\<epsilon> = t\"", "lemma empty_subts: \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\"", "lemma empty_subl: \"l \\<cdot>\\<^sub>l \\<epsilon> = l\"", "lemma empty_subls: \"L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = L\"", "lemma instance_of\\<^sub>t_self: \"instance_of\\<^sub>t t t\"", "lemma instance_of\\<^sub>t\\<^sub>s_self: \"instance_of\\<^sub>t\\<^sub>s ts ts\"", "lemma instance_of\\<^sub>l_self: \"instance_of\\<^sub>l l l\"", "lemma instance_of\\<^sub>l\\<^sub>s_self: \"instance_of\\<^sub>l\\<^sub>s L L\"", "lemma ground_sub: \n  assumes \"ground\\<^sub>t t\"\n  shows \"t \\<cdot>\\<^sub>t \\<sigma> = t\"", "lemma ground_subs: \n  assumes \"ground\\<^sub>t\\<^sub>s ts \"\n  shows \" ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma> = ts\"", "lemma ground\\<^sub>l_subs: \n  assumes \"ground\\<^sub>l l \"\n  shows \" l \\<cdot>\\<^sub>l \\<sigma> = l\"", "lemma ground\\<^sub>l\\<^sub>s_subls:\n  assumes ground: \"ground\\<^sub>l\\<^sub>s L\"\n  shows \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L\"", "lemma composition_conseq2t:  \"(t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 = t \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\"", "lemma composition_conseq2ts: \"(ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2 = ts \\<cdot>\\<^sub>t\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\"", "lemma composition_conseq2l: \"(l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2 = l \\<cdot>\\<^sub>l (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\"", "lemma composition_conseq2ls: \"(L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2 = L \\<cdot>\\<^sub>l\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\"", "lemma composition_assoc: \"\\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3) = (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) \\<cdot> \\<sigma>\\<^sub>3\"", "lemma empty_comp1: \"(\\<sigma> \\<cdot> \\<epsilon>) = \\<sigma>\"", "lemma empty_comp2: \"(\\<epsilon> \\<cdot> \\<sigma>) = \\<sigma>\"", "lemma instance_of\\<^sub>t_trans : \n  assumes t\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>2\"\n  assumes t\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>t t\\<^sub>2 t\\<^sub>3\"\n  shows \"instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3\"", "lemma instance_of\\<^sub>t\\<^sub>s_trans : \n  assumes ts\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>2\"\n  assumes ts\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>2 ts\\<^sub>3\"\n  shows \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3\"", "lemma instance_of\\<^sub>l_trans : \n  assumes l\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>2\"\n  assumes l\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>l l\\<^sub>2 l\\<^sub>3\"\n  shows \"instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3\"", "lemma instance_of\\<^sub>l\\<^sub>s_trans : \n  assumes L\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>2\"\n  assumes L\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>2 L\\<^sub>3\"\n  shows \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3\"", "lemma project_sub:\n  assumes inst_C:\"C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\" \n  assumes L'sub: \"L' \\<subseteq> C'\"\n  shows \"\\<exists>L \\<subseteq> C. L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and> (C-L) \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'\"", "lemma relevant_vars_subt:\n  assumes \"\\<forall>x \\<in> vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \" t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\"", "lemma relevant_vars_subts: (* similar to above proof *)\n  assumes asm: \"\\<forall>x \\<in> vars\\<^sub>t\\<^sub>s ts. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 = ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\"", "lemma relevant_vars_subl:\n  assumes \"\\<forall>x \\<in> vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \"\n  shows \"l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\"", "lemma relevant_vars_subls: (* in many ways a mirror of relevant_vars_subts  *)\n  assumes asm: \"\\<forall>x \\<in> vars\\<^sub>l\\<^sub>s L. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 = L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\"", "lemma merge_sub:\n  assumes dist: \"vars\\<^sub>l\\<^sub>s C \\<inter> vars\\<^sub>l\\<^sub>s D = {}\"\n  assumes CC': \"C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\"\n  assumes DD': \"D \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = D'\"\n  shows \"\\<exists>\\<eta>. C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and> D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'\"", "lemma std_apart_apart'': \n  assumes \"x \\<in> vars\\<^sub>t  (t \\<cdot>\\<^sub>t (\\<lambda>x::char list. Var (y @ x)))\"\n  shows \"\\<exists>x'. x = y@x'\"", "lemma std_apart_apart':\n  assumes \"x \\<in> vars\\<^sub>l (l \\<cdot>\\<^sub>l (\\<lambda>x. Var  (y@x)))\" \n  shows \"\\<exists>x'. x = y@x'\"", "lemma std_apart_apart: \"vars\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1) \\<inter> vars\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2) = {}\"", "lemma std_apart_instance_of\\<^sub>l\\<^sub>s1: \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\"", "lemma std_apart_instance_of\\<^sub>l\\<^sub>s2: \"instance_of\\<^sub>l\\<^sub>s C2 (std\\<^sub>2 C2)\"", "lemma unif_sub:\n  assumes unif: \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\"\n  assumes nonempty: \"L \\<noteq> {}\"\n  shows \"\\<exists>l. subls L \\<sigma> = {subl l \\<sigma>}\"", "lemma unifiert_def2: (*  (\\<lambda>t. sub t \\<sigma>) ` ts could have some nice notation maybe *)\n  assumes L_elem: \"ts \\<noteq> {}\"\n  shows \"unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<longleftrightarrow> (\\<exists>l. (\\<lambda>t. sub t \\<sigma>) ` ts ={l})\"", "lemma unifier\\<^sub>l\\<^sub>s_def2: \n  assumes L_elem: \"L \\<noteq> {}\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<longleftrightarrow> (\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l})\"", "lemma ground\\<^sub>l\\<^sub>s_unif_singleton:\n  assumes ground\\<^sub>l\\<^sub>s: \"ground\\<^sub>l\\<^sub>s L\" \n  assumes unif: \"unifier\\<^sub>l\\<^sub>s \\<sigma>' L\"\n  assumes empt: \"L \\<noteq> {}\"\n  shows \"\\<exists>l. L = {l}\"", "lemma unifier_comp[simp]: \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<longleftrightarrow> unifier\\<^sub>l\\<^sub>s \\<sigma> L\"", "lemma unifier_sub1: \n  assumes \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\"\n  assumes \"L' \\<subseteq> L\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L' \"", "lemma unifier_sub2: \n  assumes asm: \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2)\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and> unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2 \"", "lemma substitutiont: \"eval\\<^sub>t E F (t \\<cdot>\\<^sub>t \\<sigma>) = eval\\<^sub>t (evalsub E F \\<sigma>) F t\"", "lemma substitutionts: \"eval\\<^sub>t\\<^sub>s E F (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>) = eval\\<^sub>t\\<^sub>s (evalsub E F \\<sigma>) F ts\"", "lemma substitution: \"eval\\<^sub>l E F G (l \\<cdot>\\<^sub>l \\<sigma>) \\<longleftrightarrow> eval\\<^sub>l (evalsub E F \\<sigma>) F G l\"", "lemma subst_sound:\n assumes asm: \"eval\\<^sub>c F G C\"\n shows \"eval\\<^sub>c F G (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\"", "lemma simple_resolution_sound:\n  assumes C\\<^sub>1sat:  \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes C\\<^sub>2sat:  \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes l\\<^sub>1inc\\<^sub>1: \"l\\<^sub>1 \\<in> C\\<^sub>1\"\n  assumes l\\<^sub>2inc\\<^sub>2: \"l\\<^sub>2 \\<in> C\\<^sub>2\"\n  assumes comp: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2\"\n  shows \"eval\\<^sub>c F G ((C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}))\"", "lemma mresolution_sound:\n  assumes sat\\<^sub>1: \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes sat\\<^sub>2: \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\"\n  shows \"eval\\<^sub>c F G (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\"", "lemma resolution_superset: \"mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> \\<subseteq> resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\"", "lemma superset_sound:\n  assumes sup: \"C \\<subseteq> C'\"\n  assumes sat: \"eval\\<^sub>c F G C\"\n  shows \"eval\\<^sub>c F G C'\"", "theorem resolution_sound:\n  assumes sat\\<^sub>1: \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes sat\\<^sub>2: \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\"\n  shows \"eval\\<^sub>c F G (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\"", "lemma mstep_sound: \n  assumes \"mresolution_step Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\"", "theorem step_sound: \n  assumes \"resolution_step Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\"", "lemma mderivation_sound: \n  assumes \"mresolution_deriv Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\"", "theorem derivation_sound: \n  assumes \"resolution_deriv Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows\"eval\\<^sub>c\\<^sub>s F G Cs'\"", "theorem derivation_sound_refute: \n  assumes deriv: \"resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\"\n  shows \"\\<not>eval\\<^sub>c\\<^sub>s F G Cs\"", "lemma eval_ground\\<^sub>t: \n  assumes \"ground\\<^sub>t t\"\n  shows \"(eval\\<^sub>t E HFun t) = hterm_of_fterm t\"", "lemma eval_ground\\<^sub>t\\<^sub>s: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"(eval\\<^sub>t\\<^sub>s E HFun ts) = hterms_of_fterms ts\"", "lemma eval\\<^sub>l_ground\\<^sub>t\\<^sub>s:\n  assumes asm: \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"eval\\<^sub>l E HFun G (Pos P ts) \\<longleftrightarrow> G P (hterms_of_fterms ts)\"", "lemma ground_sub_of_denott: \"ground\\<^sub>t (t \\<cdot>\\<^sub>t (sub_of_denot E))\"", "lemma ground_sub_of_denotts: \"ground\\<^sub>t\\<^sub>s (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)\"", "lemma ground_sub_of_denotl: \"ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)\"", "lemma sub_of_denot_equivx: \"eval\\<^sub>t E HFun (sub_of_denot E x) = E x\"", "lemma sub_of_denot_equivt:\n    \"eval\\<^sub>t E HFun (t \\<cdot>\\<^sub>t (sub_of_denot E)) = eval\\<^sub>t E HFun t\"", "lemma sub_of_denot_equivts: \"eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s (sub_of_denot E)) = eval\\<^sub>t\\<^sub>s E HFun ts\"", "lemma sub_of_denot_equivl: \"eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<longleftrightarrow> eval\\<^sub>l E HFun G l\"", "lemma sub_of_denot_equiv_ground': \n  \"eval\\<^sub>l E HFun G l = eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<and> ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)\"", "lemma partial_equiv_subst:\n  assumes \"falsifies\\<^sub>c G (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>)\"\n  shows \"falsifies\\<^sub>c G C\"", "lemma sub_of_denot_equiv_ground:\n  \"((\\<exists>l \\<in> C. eval\\<^sub>l E HFun G l) \\<longleftrightarrow> (\\<exists>l \\<in> C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E. eval\\<^sub>l E HFun G l))\n           \\<and> ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\"", "lemma std\\<^sub>1_falsifies: \"falsifies\\<^sub>c G C\\<^sub>1 \\<longleftrightarrow> falsifies\\<^sub>c G (std\\<^sub>1 C\\<^sub>1)\"", "lemma std\\<^sub>2_falsifies: \"falsifies\\<^sub>c G C\\<^sub>2 \\<longleftrightarrow> falsifies\\<^sub>c G (std\\<^sub>2 C\\<^sub>2)\"", "lemma std\\<^sub>1_renames: \"var_renaming_of C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\"", "lemma std\\<^sub>2_renames: \"var_renaming_of C\\<^sub>2 (std\\<^sub>2 C\\<^sub>2)\"", "lemma maximum:\n  assumes asm: \"finite C\"\n  shows \"\\<exists>n :: nat. \\<forall>l \\<in> C. f l \\<le> n\"", "lemma extend_preserves_model: (* only for ground *)\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\" \n  assumes C_ground: \"ground\\<^sub>l\\<^sub>s C\"\n  assumes C_sat: \"\\<not>falsifies\\<^sub>c (f (Suc n)) C\"\n  assumes n_max: \"\\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\"\n  shows \"eval\\<^sub>c HFun (extend f) C\"", "lemma extend_preserves_model2: (* only for ground *)\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\" \n  assumes C_ground: \"ground\\<^sub>l\\<^sub>s C\"\n  assumes fin_c: \"finite C\"\n  assumes model_C: \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) C\"\n  shows C_false: \"eval\\<^sub>c HFun (extend f) C\"", "lemma extend_infpath: \n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\"\n  assumes model_c: \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) C\"\n  assumes fin_c: \"finite C\"\n  shows \"eval\\<^sub>c HFun (extend f) C\"", "lemma infpath_model:\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\"\n  assumes model_cs: \"\\<forall>n. \\<not>falsifies\\<^sub>c\\<^sub>s (f n) Cs\" \n  assumes fin_cs: \"finite Cs\"\n  assumes fin_c: \"\\<forall>C \\<in> Cs. finite C\"\n  shows \"eval\\<^sub>c\\<^sub>s HFun (extend f) Cs\"", "lemma branch_length: \n  assumes \"branch b (deeptree n)\"\n  shows \"length b = n\"", "lemma infinity:\n  assumes inj: \"\\<forall>n :: nat. undiago (diago n) = n\" \n  assumes all_tree: \"\\<forall>n :: nat. (diago n) \\<in> tree\"\n  shows \"\\<not>finite tree\"", "lemma longer_falsifies\\<^sub>l:\n  assumes \"falsifies\\<^sub>l ds l\"\n  shows \"falsifies\\<^sub>l (ds@d) l\"", "lemma longer_falsifies\\<^sub>g:\n  assumes \"falsifies\\<^sub>g ds C\"\n  shows \"falsifies\\<^sub>g (ds @ d) C\"", "lemma longer_falsifies\\<^sub>c:\n  assumes \"falsifies\\<^sub>c ds C\"\n  shows \"falsifies\\<^sub>c (ds @ d) C\"", "lemma longer_falsifies:  \n  assumes \"falsifies\\<^sub>c\\<^sub>s ds Cs\"\n  shows \"falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs\"", "theorem herbrand':\n  assumes openb: \"\\<forall>T. \\<exists>G. open_branch G T Cs\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs\"", "lemma shorter_falsifies\\<^sub>l:\n  assumes \"falsifies\\<^sub>l (ds@d) l\"\n  assumes \"nat_of_fatom (get_atom l) < length ds\"\n  shows \"falsifies\\<^sub>l ds l\"", "theorem herbrand'_contra:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>G. \\<not>eval\\<^sub>c\\<^sub>s HFun G Cs\"\n  shows \"\\<exists>T. \\<forall>G. branch G T \\<longrightarrow> closed_branch G T Cs\"", "theorem herbrand:\n  assumes unsat: \"\\<forall>G. \\<not>eval\\<^sub>c\\<^sub>s HFun G Cs\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>T. closed_tree T Cs\""], "translations": [["", "lemma cancel_comp1: \"(l\\<^sup>c)\\<^sup>c = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sup>c\\<^sup>c = l", "by (cases l) auto"], ["", "lemma cancel_comp2:\n  assumes asm: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2\\<^sup>c\"\n  shows \"l\\<^sub>1 = l\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "from asm"], ["proof (chain)\npicking this:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\\<^sup>c", "have \"(l\\<^sub>1\\<^sup>c)\\<^sup>c = (l\\<^sub>2\\<^sup>c)\\<^sup>c\""], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>2\\<^sup>c\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>2\\<^sup>c\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>2\\<^sup>c\\<^sup>c", "have \"l\\<^sub>1 = (l\\<^sub>2\\<^sup>c)\\<^sup>c\""], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>2\\<^sup>c\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c", "using cancel_comp1[of l\\<^sub>1]"], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>2\\<^sup>c\\<^sup>c\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c", "show ?thesis"], ["proof (prove)\nusing this:\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "using cancel_comp1[of l\\<^sub>2]"], ["proof (prove)\nusing this:\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\\<^sup>c\n  l\\<^sub>2\\<^sup>c\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 = l\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_exi1: \"\\<exists>l'. l' = l\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. l' = l\\<^sup>c", "by (cases l) auto"], ["", "lemma comp_exi2: \"\\<exists>l. l' = l\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. l' = l\\<^sup>c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. l' = ?l\\<^sup>c", "show \"l' = (l'\\<^sup>c)\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' = l'\\<^sup>c\\<^sup>c", "using cancel_comp1[of l']"], ["proof (prove)\nusing this:\n  l'\\<^sup>c\\<^sup>c = l'\n\ngoal (1 subgoal):\n 1. l' = l'\\<^sup>c\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  l' = l'\\<^sup>c\\<^sup>c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_swap: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>1 = l\\<^sub>2\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "have \"l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow> l\\<^sub>1 = l\\<^sub>2\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n    l\\<^sub>1 = l\\<^sub>2\\<^sup>c", "using cancel_comp1[of l\\<^sub>1]"], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c\\<^sup>c = l\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n    l\\<^sub>1 = l\\<^sub>2\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "moreover"], ["proof (state)\nthis:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "have \"l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow> l\\<^sub>1\\<^sup>c = l\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow>\n    l\\<^sub>1\\<^sup>c = l\\<^sub>2", "using cancel_comp1"], ["proof (prove)\nusing this:\n  ?l\\<^sup>c\\<^sup>c = ?l\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow>\n    l\\<^sub>1\\<^sup>c = l\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow>\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "ultimately"], ["proof (chain)\npicking this:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow>\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2 \\<longrightarrow>\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c \\<longrightarrow>\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)", "by auto"], ["proof (state)\nthis:\n  (l\\<^sub>1\\<^sup>c = l\\<^sub>2) = (l\\<^sub>1 = l\\<^sub>2\\<^sup>c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sign_comp: \"sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and> get_pred l\\<^sub>1 = get_pred l\\<^sub>2 \\<and> get_terms l\\<^sub>1 = get_terms l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>2 = l\\<^sub>1\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and>\n     get_pred l\\<^sub>1 = get_pred l\\<^sub>2 \\<and>\n     get_terms l\\<^sub>1 = get_terms l\\<^sub>2) =\n    (l\\<^sub>2 = l\\<^sub>1\\<^sup>c)", "by (cases l\\<^sub>1; cases l\\<^sub>2) auto"], ["", "lemma sign_comp_atom: \"sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and> get_atom l\\<^sub>1 = get_atom l\\<^sub>2 \\<longleftrightarrow> l\\<^sub>2 = l\\<^sub>1\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sign l\\<^sub>1 \\<noteq> sign l\\<^sub>2 \\<and>\n     get_atom l\\<^sub>1 = get_atom l\\<^sub>2) =\n    (l\\<^sub>2 = l\\<^sub>1\\<^sup>c)", "by (cases l\\<^sub>1; cases l\\<^sub>2) auto"], ["", "section \\<open>Clauses\\<close>"], ["", "type_synonym 't clause = \"'t literal set\""], ["", "abbreviation complementls :: \"'t literal set \\<Rightarrow> 't literal set\" (\"_\\<^sup>C\" [300] 300) where \n  \"L\\<^sup>C \\<equiv> complement ` L\""], ["", "lemma cancel_compls1: \"(L\\<^sup>C)\\<^sup>C = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L\\<^sup>C\\<^sup>C = L", "apply (auto simp add: cancel_comp1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> L \\<Longrightarrow> x \\<in> L\\<^sup>C\\<^sup>C", "apply (metis imageI cancel_comp1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cancel_compls2:\n  assumes asm: \"L\\<^sub>1\\<^sup>C = L\\<^sub>2\\<^sup>C\"\n  shows \"L\\<^sub>1 = L\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L\\<^sub>1 = L\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L\\<^sub>1 = L\\<^sub>2", "from asm"], ["proof (chain)\npicking this:\n  L\\<^sub>1\\<^sup>C = L\\<^sub>2\\<^sup>C", "have \"(L\\<^sub>1\\<^sup>C)\\<^sup>C = (L\\<^sub>2\\<^sup>C)\\<^sup>C\""], ["proof (prove)\nusing this:\n  L\\<^sub>1\\<^sup>C = L\\<^sub>2\\<^sup>C\n\ngoal (1 subgoal):\n 1. L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>2\\<^sup>C\\<^sup>C", "by auto"], ["proof (state)\nthis:\n  L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>2\\<^sup>C\\<^sup>C\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 = L\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>2\\<^sup>C\\<^sup>C", "show ?thesis"], ["proof (prove)\nusing this:\n  L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>2\\<^sup>C\\<^sup>C\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 = L\\<^sub>2", "using cancel_compls1[of L\\<^sub>1] cancel_compls1[of L\\<^sub>2]"], ["proof (prove)\nusing this:\n  L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>2\\<^sup>C\\<^sup>C\n  L\\<^sub>1\\<^sup>C\\<^sup>C = L\\<^sub>1\n  L\\<^sub>2\\<^sup>C\\<^sup>C = L\\<^sub>2\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 = L\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  L\\<^sub>1 = L\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "fun vars\\<^sub>t  :: \"fterm \\<Rightarrow> var_sym set\" where\n  \"vars\\<^sub>t (Var x) = {x}\"\n| \"vars\\<^sub>t (Fun f ts) = (\\<Union>t \\<in> set ts. vars\\<^sub>t t)\""], ["", "abbreviation vars\\<^sub>t\\<^sub>s :: \"fterm list \\<Rightarrow> var_sym set\" where \n  \"vars\\<^sub>t\\<^sub>s ts \\<equiv> (\\<Union>t \\<in> set ts. vars\\<^sub>t t)\""], ["", "definition vars\\<^sub>l :: \"fterm literal \\<Rightarrow> var_sym set\" where \n  \"vars\\<^sub>l l = vars\\<^sub>t\\<^sub>s (get_terms l)\""], ["", "definition vars\\<^sub>l\\<^sub>s :: \"fterm literal set \\<Rightarrow> var_sym set\" where \n  \"vars\\<^sub>l\\<^sub>s L \\<equiv> \\<Union>l\\<in>L. vars\\<^sub>l l\""], ["", "lemma ground_vars\\<^sub>t:\n  assumes \"ground\\<^sub>t t\"\n  shows \"vars\\<^sub>t t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>t t = {}", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>t t\n\ngoal (1 subgoal):\n 1. vars\\<^sub>t t = {}", "by (induction t) auto"], ["", "lemma ground\\<^sub>t\\<^sub>s_vars\\<^sub>t\\<^sub>s: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"vars\\<^sub>t\\<^sub>s ts = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>t\\<^sub>s ts = {}", "using assms ground_vars\\<^sub>t"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  ground\\<^sub>t ?t \\<Longrightarrow> vars\\<^sub>t ?t = {}\n\ngoal (1 subgoal):\n 1. vars\\<^sub>t\\<^sub>s ts = {}", "by auto"], ["", "lemma ground\\<^sub>l_vars\\<^sub>l:\n  assumes \"ground\\<^sub>l l\"\n  shows \"vars\\<^sub>l l = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l l = {}", "unfolding vars\\<^sub>l_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>t\\<^sub>s (get_terms l) = {}", "using assms ground_vars\\<^sub>t"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\n  ground\\<^sub>t ?t \\<Longrightarrow> vars\\<^sub>t ?t = {}\n\ngoal (1 subgoal):\n 1. vars\\<^sub>t\\<^sub>s (get_terms l) = {}", "by auto"], ["", "lemma ground\\<^sub>l\\<^sub>s_vars\\<^sub>l\\<^sub>s: \n  assumes \"ground\\<^sub>l\\<^sub>s L\"\n  shows \"vars\\<^sub>l\\<^sub>s L = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s L = {}", "unfolding vars\\<^sub>l\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (vars\\<^sub>l ` L) = {}", "using assms ground\\<^sub>l_vars\\<^sub>l"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s L\n  ground\\<^sub>l ?l \\<Longrightarrow> vars\\<^sub>l ?l = {}\n\ngoal (1 subgoal):\n 1. \\<Union> (vars\\<^sub>l ` L) = {}", "by auto"], ["", "lemma ground_comp: \"ground\\<^sub>l (l\\<^sup>c) \\<longleftrightarrow> ground\\<^sub>l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l (l\\<^sup>c) = ground\\<^sub>l l", "by (cases l) auto"], ["", "lemma  ground_compls: \"ground\\<^sub>l\\<^sub>s (L\\<^sup>C) \\<longleftrightarrow> ground\\<^sub>l\\<^sub>s L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l\\<^sub>s (L\\<^sup>C) = ground\\<^sub>l\\<^sub>s L", "using ground_comp"], ["proof (prove)\nusing this:\n  ground\\<^sub>l (?l\\<^sup>c) = ground\\<^sub>l ?l\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l\\<^sub>s (L\\<^sup>C) = ground\\<^sub>l\\<^sub>s L", "by auto"], ["", "(* Alternative - Collect variables with vars and see if empty set *)"], ["", "section \\<open>Semantics\\<close>"], ["", "type_synonym 'u fun_denot  = \"fun_sym  \\<Rightarrow> 'u list \\<Rightarrow> 'u\""], ["", "type_synonym 'u pred_denot = \"pred_sym \\<Rightarrow> 'u list \\<Rightarrow> bool\""], ["", "type_synonym 'u var_denot  = \"var_sym  \\<Rightarrow> 'u\""], ["", "fun eval\\<^sub>t  :: \"'u var_denot \\<Rightarrow> 'u fun_denot \\<Rightarrow> fterm \\<Rightarrow> 'u\" where\n  \"eval\\<^sub>t E F (Var x) = E x\"\n| \"eval\\<^sub>t E F (Fun f ts) = F f (map (eval\\<^sub>t E F) ts)\""], ["", "abbreviation eval\\<^sub>t\\<^sub>s :: \"'u var_denot \\<Rightarrow> 'u fun_denot \\<Rightarrow> fterm list \\<Rightarrow> 'u list\" where\n  \"eval\\<^sub>t\\<^sub>s E F ts \\<equiv> map (eval\\<^sub>t E F) ts\""], ["", "fun eval\\<^sub>l :: \"'u var_denot \\<Rightarrow> 'u fun_denot \\<Rightarrow> 'u pred_denot \\<Rightarrow> fterm literal \\<Rightarrow> bool\" where\n  \"eval\\<^sub>l E F G (Pos p ts) \\<longleftrightarrow>  G p (eval\\<^sub>t\\<^sub>s E F ts)\"\n| \"eval\\<^sub>l E F G (Neg p ts) \\<longleftrightarrow> \\<not>G p (eval\\<^sub>t\\<^sub>s E F ts)\""], ["", "definition eval\\<^sub>c :: \"'u fun_denot \\<Rightarrow> 'u pred_denot \\<Rightarrow> fterm clause \\<Rightarrow> bool\" where\n  \"eval\\<^sub>c F G C \\<longleftrightarrow> (\\<forall>E. \\<exists>l \\<in> C. eval\\<^sub>l E F G l)\""], ["", "definition eval\\<^sub>c\\<^sub>s :: \"'u fun_denot \\<Rightarrow> 'u pred_denot \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"eval\\<^sub>c\\<^sub>s F G Cs \\<longleftrightarrow> (\\<forall>C \\<in> Cs. eval\\<^sub>c F G C)\""], ["", "subsection \\<open>Semantics of Ground Terms\\<close>"], ["", "lemma ground_var_denott: \n  assumes \"ground\\<^sub>t t\"\n  shows \"eval\\<^sub>t E F t = eval\\<^sub>t E' F t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E F t = eval\\<^sub>t E' F t", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>t t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E F t = eval\\<^sub>t E' F t", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)\n 2. \\<And>x.\n       ground\\<^sub>t (Var x) \\<Longrightarrow>\n       eval\\<^sub>t E F (Var x) = eval\\<^sub>t E' F (Var x)", "case (Var x)"], ["proof (state)\nthis:\n  ground\\<^sub>t (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)\n 2. \\<And>x.\n       ground\\<^sub>t (Var x) \\<Longrightarrow>\n       eval\\<^sub>t E F (Var x) = eval\\<^sub>t E' F (Var x)", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>t (Var x)", "have \"False\""], ["proof (prove)\nusing this:\n  ground\\<^sub>t (Var x)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)\n 2. \\<And>x.\n       ground\\<^sub>t (Var x) \\<Longrightarrow>\n       eval\\<^sub>t E F (Var x) = eval\\<^sub>t E' F (Var x)", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E F (Var x) = eval\\<^sub>t E' F (Var x)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t E F (Var x) = eval\\<^sub>t E' F (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "case (Fun f ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2aa \\<in> set ts; ground\\<^sub>t ?x2aa\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>t E F ?x2aa = eval\\<^sub>t E' F ?x2aa\n  ground\\<^sub>t (Fun f ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2aa \\<in> set ts; ground\\<^sub>t ?x2aa\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>t E F ?x2aa = eval\\<^sub>t E' F ?x2aa\n  ground\\<^sub>t (Fun f ts)", "have \"\\<forall>t \\<in> set ts. ground\\<^sub>t t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2aa \\<in> set ts; ground\\<^sub>t ?x2aa\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>t E F ?x2aa = eval\\<^sub>t E' F ?x2aa\n  ground\\<^sub>t (Fun f ts)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s ts", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>t\\<^sub>s ts\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>t\\<^sub>s ts", "have \"\\<forall>t \\<in> set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t\""], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t", "using Fun"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  \\<lbrakk>?x2aa \\<in> set ts; ground\\<^sub>t ?x2aa\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>t E F ?x2aa = eval\\<^sub>t E' F ?x2aa\n  ground\\<^sub>t (Fun f ts)\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t", "by auto"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "then"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t", "have \"eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set ts. eval\\<^sub>t E F t = eval\\<^sub>t E' F t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts", "have \"F f (map (eval\\<^sub>t E F) ts) = F f (map (eval\\<^sub>t E' F) ts)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts\n\ngoal (1 subgoal):\n 1. F f (eval\\<^sub>t\\<^sub>s E F ts) = F f (eval\\<^sub>t\\<^sub>s E' F ts)", "by metis"], ["proof (state)\nthis:\n  F f (eval\\<^sub>t\\<^sub>s E F ts) = F f (eval\\<^sub>t\\<^sub>s E' F ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a; ground\\<^sub>t x2aa\\<rbrakk>\n                   \\<Longrightarrow> eval\\<^sub>t E F x2aa =\n                                     eval\\<^sub>t E' F x2aa;\n        ground\\<^sub>t (Fun x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>t E F (Fun x1 x2a) =\n                         eval\\<^sub>t E' F (Fun x1 x2a)", "then"], ["proof (chain)\npicking this:\n  F f (eval\\<^sub>t\\<^sub>s E F ts) = F f (eval\\<^sub>t\\<^sub>s E' F ts)", "show ?case"], ["proof (prove)\nusing this:\n  F f (eval\\<^sub>t\\<^sub>s E F ts) = F f (eval\\<^sub>t\\<^sub>s E' F ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E F (Fun f ts) = eval\\<^sub>t E' F (Fun f ts)", "by simp"], ["proof (state)\nthis:\n  eval\\<^sub>t E F (Fun f ts) = eval\\<^sub>t E' F (Fun f ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ground_var_denotts: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts", "using assms ground_var_denott"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  ground\\<^sub>t ?t \\<Longrightarrow>\n  eval\\<^sub>t ?E ?F ?t = eval\\<^sub>t ?E' ?F ?t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E F ts = eval\\<^sub>t\\<^sub>s E' F ts", "by (metis map_eq_conv)"], ["", "lemma ground_var_denot: \n  assumes \"ground\\<^sub>l l\"\n  shows \"eval\\<^sub>l E F G l = eval\\<^sub>l E' F G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l = eval\\<^sub>l E' F G l", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l = eval\\<^sub>l E' F G l", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       ground\\<^sub>l (Pos x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Pos x1 x2) = eval\\<^sub>l E' F G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       ground\\<^sub>l (Neg x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Neg x1 x2) = eval\\<^sub>l E' F G (Neg x1 x2)", "case Pos"], ["proof (state)\nthis:\n  ground\\<^sub>l (Pos x1_ x2_)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       ground\\<^sub>l (Pos x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Pos x1 x2) = eval\\<^sub>l E' F G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       ground\\<^sub>l (Neg x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Neg x1 x2) = eval\\<^sub>l E' F G (Neg x1 x2)", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l (Pos x1_ x2_)", "show ?case"], ["proof (prove)\nusing this:\n  ground\\<^sub>l (Pos x1_ x2_)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G (Pos x1_ x2_) = eval\\<^sub>l E' F G (Pos x1_ x2_)", "using ground_var_denotts"], ["proof (prove)\nusing this:\n  ground\\<^sub>l (Pos x1_ x2_)\n  ground\\<^sub>t\\<^sub>s ?ts \\<Longrightarrow>\n  eval\\<^sub>t\\<^sub>s ?E ?F ?ts = eval\\<^sub>t\\<^sub>s ?E' ?F ?ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G (Pos x1_ x2_) = eval\\<^sub>l E' F G (Pos x1_ x2_)", "by (metis eval\\<^sub>l.simps(1) literal.sel(3))"], ["proof (state)\nthis:\n  eval\\<^sub>l E F G (Pos x1_ x2_) = eval\\<^sub>l E' F G (Pos x1_ x2_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ground\\<^sub>l (Neg x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Neg x1 x2) = eval\\<^sub>l E' F G (Neg x1 x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ground\\<^sub>l (Neg x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Neg x1 x2) = eval\\<^sub>l E' F G (Neg x1 x2)", "case Neg"], ["proof (state)\nthis:\n  ground\\<^sub>l (Neg x1_ x2_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ground\\<^sub>l (Neg x1 x2) \\<Longrightarrow>\n       eval\\<^sub>l E F G (Neg x1 x2) = eval\\<^sub>l E' F G (Neg x1 x2)", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l (Neg x1_ x2_)", "show ?case"], ["proof (prove)\nusing this:\n  ground\\<^sub>l (Neg x1_ x2_)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G (Neg x1_ x2_) = eval\\<^sub>l E' F G (Neg x1_ x2_)", "using ground_var_denotts"], ["proof (prove)\nusing this:\n  ground\\<^sub>l (Neg x1_ x2_)\n  ground\\<^sub>t\\<^sub>s ?ts \\<Longrightarrow>\n  eval\\<^sub>t\\<^sub>s ?E ?F ?ts = eval\\<^sub>t\\<^sub>s ?E' ?F ?ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G (Neg x1_ x2_) = eval\\<^sub>l E' F G (Neg x1_ x2_)", "by (metis eval\\<^sub>l.simps(2) literal.sel(4))"], ["proof (state)\nthis:\n  eval\\<^sub>l E F G (Neg x1_ x2_) = eval\\<^sub>l E' F G (Neg x1_ x2_)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Substitutions\\<close>"], ["", "type_synonym substitution = \"var_sym \\<Rightarrow> fterm\""], ["", "fun sub  :: \"fterm \\<Rightarrow> substitution \\<Rightarrow> fterm\" (infixl \"\\<cdot>\\<^sub>t\" 55) where\n  \"(Var x) \\<cdot>\\<^sub>t \\<sigma> = \\<sigma> x\"\n| \"(Fun f ts) \\<cdot>\\<^sub>t \\<sigma> = Fun f (map (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ts)\""], ["", "abbreviation subs :: \"fterm list \\<Rightarrow> substitution \\<Rightarrow> fterm list\" (infixl \"\\<cdot>\\<^sub>t\\<^sub>s\" 55) where\n  \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma> \\<equiv> (map (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ts)\""], ["", "fun subl :: \"fterm literal \\<Rightarrow> substitution \\<Rightarrow> fterm literal\" (infixl \"\\<cdot>\\<^sub>l\" 55) where\n  \"(Pos p ts) \\<cdot>\\<^sub>l \\<sigma> = Pos p (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>)\"\n| \"(Neg p ts) \\<cdot>\\<^sub>l \\<sigma> = Neg p (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>)\""], ["", "abbreviation subls :: \"fterm literal set \\<Rightarrow> substitution \\<Rightarrow> fterm literal set\" (infixl \"\\<cdot>\\<^sub>l\\<^sub>s\" 55) where\n  \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> \\<equiv> (\\<lambda>l. l \\<cdot>\\<^sub>l \\<sigma>) ` L\""], ["", "lemma subls_def2: \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>|l. l \\<in> L}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> =\n    {l \\<cdot>\\<^sub>l \\<sigma> |l. l \\<in> L}", "by auto"], ["", "definition instance_of\\<^sub>t :: \"fterm \\<Rightarrow> fterm \\<Rightarrow> bool\" where\n  \"instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>2 \\<longleftrightarrow> (\\<exists>\\<sigma>. t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>)\""], ["", "definition instance_of\\<^sub>t\\<^sub>s :: \"fterm list \\<Rightarrow> fterm list \\<Rightarrow> bool\" where\n  \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>2 \\<longleftrightarrow> (\\<exists>\\<sigma>. ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>)\""], ["", "definition instance_of\\<^sub>l :: \"fterm literal \\<Rightarrow> fterm literal \\<Rightarrow> bool\" where\n  \"instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>2 \\<longleftrightarrow> (\\<exists>\\<sigma>. l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>)\""], ["", "definition instance_of\\<^sub>l\\<^sub>s :: \"fterm clause \\<Rightarrow> fterm clause \\<Rightarrow> bool\" where\n  \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 C\\<^sub>2 \\<longleftrightarrow> (\\<exists>\\<sigma>. C\\<^sub>1 = C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\""], ["", "lemma comp_sub: \"(l\\<^sup>c) \\<cdot>\\<^sub>l \\<sigma>=(l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> =\n    (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c", "by (cases l) auto"], ["", "lemma compls_subls: \"(L\\<^sup>C) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>=(L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\\<^sup>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> =\n    (L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\\<^sup>C", "using comp_sub"], ["proof (prove)\nusing this:\n  ?l\\<^sup>c \\<cdot>\\<^sub>l ?\\<sigma> =\n  (?l \\<cdot>\\<^sub>l ?\\<sigma>)\\<^sup>c\n\ngoal (1 subgoal):\n 1. L\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> =\n    (L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\\<^sup>C", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>\\<And>l \\<sigma>.\n                   l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> =\n                   (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c;\n        l \\<in> L\\<rbrakk>\n       \\<Longrightarrow> (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c\n                         \\<in> L\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "apply (metis image_eqI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subls_union: \"(L\\<^sub>1 \\<union> L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<union> (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L\\<^sub>1 \\<union> L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> =\n    (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<union>\n    (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "by auto"], ["", "(* \n  Alternative: apply a substitution that is a bijection between the set of variables in C1 and some other set.\n *)"], ["", "definition var_renaming_of :: \"fterm clause \\<Rightarrow> fterm clause \\<Rightarrow> bool\" where\n  \"var_renaming_of C\\<^sub>1 C\\<^sub>2 \\<longleftrightarrow> instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 C\\<^sub>2 \\<and> instance_of\\<^sub>l\\<^sub>s C\\<^sub>2 C\\<^sub>1\""], ["", "subsection \\<open>The Empty Substitution\\<close>"], ["", "abbreviation \\<epsilon> :: \"substitution\" where\n  \"\\<epsilon> \\<equiv> Var\""], ["", "lemma empty_subt: \"(t :: fterm) \\<cdot>\\<^sub>t \\<epsilon> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<epsilon> = t", "by (induction t) (auto simp add: map_idI)"], ["", "lemma empty_subts: \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts", "using empty_subt"], ["proof (prove)\nusing this:\n  ?t \\<cdot>\\<^sub>t \\<epsilon> = ?t\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts", "by auto"], ["", "lemma empty_subl: \"l \\<cdot>\\<^sub>l \\<epsilon> = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<epsilon> = l", "using empty_subts"], ["proof (prove)\nusing this:\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ?ts\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<epsilon> = l", "by (cases l) auto"], ["", "lemma empty_subls: \"L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = L", "using empty_subl"], ["proof (prove)\nusing this:\n  ?l \\<cdot>\\<^sub>l \\<epsilon> = ?l\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = L", "by auto"], ["", "lemma instance_of\\<^sub>t_self: \"instance_of\\<^sub>t t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t t", "unfolding instance_of\\<^sub>t_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. t = t \\<cdot>\\<^sub>t \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. t = t \\<cdot>\\<^sub>t ?\\<sigma>", "show \"t = t \\<cdot>\\<^sub>t \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t \\<cdot>\\<^sub>t \\<epsilon>", "using empty_subt"], ["proof (prove)\nusing this:\n  ?t \\<cdot>\\<^sub>t \\<epsilon> = ?t\n\ngoal (1 subgoal):\n 1. t = t \\<cdot>\\<^sub>t \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  t = t \\<cdot>\\<^sub>t \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>t\\<^sub>s_self: \"instance_of\\<^sub>t\\<^sub>s ts ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts ts", "unfolding instance_of\\<^sub>t\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. ts = ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts = ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>", "show \"ts = ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts = ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon>", "using empty_subts"], ["proof (prove)\nusing this:\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ?ts\n\ngoal (1 subgoal):\n 1. ts = ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  ts = ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>l_self: \"instance_of\\<^sub>l l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l l", "unfolding instance_of\\<^sub>l_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. l = l \\<cdot>\\<^sub>l \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. l = l \\<cdot>\\<^sub>l ?\\<sigma>", "show \"l = l \\<cdot>\\<^sub>l \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = l \\<cdot>\\<^sub>l \\<epsilon>", "using empty_subl"], ["proof (prove)\nusing this:\n  ?l \\<cdot>\\<^sub>l \\<epsilon> = ?l\n\ngoal (1 subgoal):\n 1. l = l \\<cdot>\\<^sub>l \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  l = l \\<cdot>\\<^sub>l \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>l\\<^sub>s_self: \"instance_of\\<^sub>l\\<^sub>s L L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L L", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. L = L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. L = L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>", "show \"L = L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L = L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon>", "using empty_subls"], ["proof (prove)\nusing this:\n  ?L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = ?L\n\ngoal (1 subgoal):\n 1. L = L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  L = L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Substitutions and Ground Terms\\<close>"], ["", "lemma ground_sub: \n  assumes \"ground\\<^sub>t t\"\n  shows \"t \\<cdot>\\<^sub>t \\<sigma> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma> = t", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>t t\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma> = t", "by (induction t) (auto simp add: map_idI)"], ["", "lemma ground_subs: \n  assumes \"ground\\<^sub>t\\<^sub>s ts \"\n  shows \" ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma> = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma> = ts", "using assms ground_sub"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  ground\\<^sub>t ?t \\<Longrightarrow> ?t \\<cdot>\\<^sub>t ?\\<sigma> = ?t\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma> = ts", "by (simp add: map_idI)"], ["", "lemma ground\\<^sub>l_subs: \n  assumes \"ground\\<^sub>l l \"\n  shows \" l \\<cdot>\\<^sub>l \\<sigma> = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l", "using assms ground_subs"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\n  ground\\<^sub>t\\<^sub>s ?ts \\<Longrightarrow>\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma> = ?ts\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l", "by (cases l) auto"], ["", "lemma ground\\<^sub>l\\<^sub>s_subls:\n  assumes ground: \"ground\\<^sub>l\\<^sub>s L\"\n  shows \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "assume l_L: \"l \\<in> L\""], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "then"], ["proof (chain)\npicking this:\n  l \\<in> L", "have \"ground\\<^sub>l l\""], ["proof (prove)\nusing this:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l", "using ground"], ["proof (prove)\nusing this:\n  l \\<in> L\n  ground\\<^sub>l\\<^sub>s L\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l l\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l", "have \"l = l \\<cdot>\\<^sub>l \\<sigma>\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\n\ngoal (1 subgoal):\n 1. l = l \\<cdot>\\<^sub>l \\<sigma>", "using ground\\<^sub>l_subs"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\n  ground\\<^sub>l ?l \\<Longrightarrow> ?l \\<cdot>\\<^sub>l ?\\<sigma> = ?l\n\ngoal (1 subgoal):\n 1. l = l \\<cdot>\\<^sub>l \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "moreover"], ["proof (state)\nthis:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "then"], ["proof (chain)\npicking this:\n  l = l \\<cdot>\\<^sub>l \\<sigma>", "have \"l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "using l_L"], ["proof (prove)\nusing this:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "ultimately"], ["proof (chain)\npicking this:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n  l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "have \"l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  l = l \\<cdot>\\<^sub>l \\<sigma>\n  l \\<cdot>\\<^sub>l \\<sigma> \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "}"], ["proof (state)\nthis:\n  ?l2 \\<in> L \\<Longrightarrow> ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "moreover"], ["proof (state)\nthis:\n  ?l2 \\<in> L \\<Longrightarrow> ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "{"], ["proof (state)\nthis:\n  ?l2 \\<in> L \\<Longrightarrow> ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "assume l_L: \"l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (state)\nthis:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "then"], ["proof (chain)\npicking this:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "obtain l' where l'_p: \"l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\""], ["proof (prove)\nusing this:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "then"], ["proof (chain)\npicking this:\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l", "have \"l' = l\""], ["proof (prove)\nusing this:\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\n\ngoal (1 subgoal):\n 1. l' = l", "using ground ground\\<^sub>l_subs"], ["proof (prove)\nusing this:\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\n  ground\\<^sub>l\\<^sub>s L\n  ground\\<^sub>l ?l \\<Longrightarrow> ?l \\<cdot>\\<^sub>l ?\\<sigma> = ?l\n\ngoal (1 subgoal):\n 1. l' = l", "by auto"], ["proof (state)\nthis:\n  l' = l\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "from l_L l'_p this"], ["proof (chain)\npicking this:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\n  l' = l", "have \"l \\<in> L\""], ["proof (prove)\nusing this:\n  l \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  l' \\<in> L \\<and> l' \\<cdot>\\<^sub>l \\<sigma> = l\n  l' = l\n\ngoal (1 subgoal):\n 1. l \\<in> L", "by auto"], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "}"], ["proof (state)\nthis:\n  ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> \\<Longrightarrow> ?l2 \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "ultimately"], ["proof (chain)\npicking this:\n  ?l2 \\<in> L \\<Longrightarrow> ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> \\<Longrightarrow> ?l2 \\<in> L", "show ?thesis"], ["proof (prove)\nusing this:\n  ?l2 \\<in> L \\<Longrightarrow> ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  ?l2 \\<in> L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> \\<Longrightarrow> ?l2 \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L", "by auto"], ["proof (state)\nthis:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = L\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Composition\\<close>"], ["", "definition composition :: \"substitution \\<Rightarrow> substitution \\<Rightarrow> substitution\"  (infixl \"\\<cdot>\" 55) where\n  \"(\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x = (\\<sigma>\\<^sub>1 x) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["", "lemma composition_conseq2t:  \"(t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 = t \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n    t \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n 2. \\<And>x.\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       \\<epsilon> x \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n 2. \\<And>x.\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       \\<epsilon> x \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "have \"((Var x) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 = (\\<sigma>\\<^sub>1 x) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n    \\<sigma>\\<^sub>2 =\n    \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n 2. \\<And>x.\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       \\<epsilon> x \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "also"], ["proof (state)\nthis:\n  \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n 2. \\<And>x.\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       \\<epsilon> x \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "have \" ... = (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n    (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x", "unfolding composition_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n    \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  \\<sigma>\\<^sub>1 x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n  (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n 2. \\<And>x.\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       \\<epsilon> x \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x", "show ?case"], ["proof (prove)\nusing this:\n  \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) x\n\ngoal (1 subgoal):\n 1. \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n    \\<sigma>\\<^sub>2 =\n    \\<epsilon> x \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  \\<epsilon> x \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "case (Fun t ts)"], ["proof (state)\nthis:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n  ?x2aa \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n           \\<sigma>\\<^sub>2 =\n           x2aa \\<cdot>\\<^sub>t\n           (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)) \\<Longrightarrow>\n       Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n       \\<sigma>\\<^sub>2 =\n       Fun x1 x2a \\<cdot>\\<^sub>t\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "then"], ["proof (chain)\npicking this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n  ?x2aa \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "show ?case"], ["proof (prove)\nusing this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n  ?x2aa \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. Fun t ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n    \\<sigma>\\<^sub>2 =\n    Fun t ts \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "unfolding composition_def"], ["proof (prove)\nusing this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2 =\n  ?x2aa \\<cdot>\\<^sub>t\n  (\\<lambda>a. \\<sigma>\\<^sub>1 a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. Fun t ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n    \\<sigma>\\<^sub>2 =\n    Fun t ts \\<cdot>\\<^sub>t\n    (\\<lambda>a. \\<sigma>\\<^sub>1 a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  Fun t ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>2 =\n  Fun t ts \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma composition_conseq2ts: \"(ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2 = ts \\<cdot>\\<^sub>t\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\\<^sub>s\n    \\<sigma>\\<^sub>2 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "using composition_conseq2t"], ["proof (prove)\nusing this:\n  ?t \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2 =\n  ?t \\<cdot>\\<^sub>t (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\\<^sub>s\n    \\<sigma>\\<^sub>2 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "by auto"], ["", "lemma composition_conseq2l: \"(l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2 = l \\<cdot>\\<^sub>l (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2 =\n    l \\<cdot>\\<^sub>l (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "using composition_conseq2t"], ["proof (prove)\nusing this:\n  ?t \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2 =\n  ?t \\<cdot>\\<^sub>t (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2 =\n    l \\<cdot>\\<^sub>l (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "by (cases l) auto"], ["", "lemma composition_conseq2ls: \"(L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2 = L \\<cdot>\\<^sub>l\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>\\<^sub>2 =\n    L \\<cdot>\\<^sub>l\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "using composition_conseq2l"], ["proof (prove)\nusing this:\n  ?l \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>2 =\n  ?l \\<cdot>\\<^sub>l (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>\\<^sub>2 =\n    L \\<cdot>\\<^sub>l\\<^sub>s (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>\\<And>l \\<sigma>\\<^sub>1 \\<sigma>\\<^sub>2.\n                   l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\n                   \\<sigma>\\<^sub>2 =\n                   l \\<cdot>\\<^sub>l\n                   (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2);\n        l \\<in> L\\<rbrakk>\n       \\<Longrightarrow> l \\<cdot>\\<^sub>l\n                         (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2)\n                         \\<in> L \\<cdot>\\<^sub>l\\<^sub>s\n                               \\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n                               \\<sigma>\\<^sub>2", "apply (metis imageI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma composition_assoc: \"\\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3) = (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) \\<cdot> \\<sigma>\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3) =\n    \\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<sigma>\\<^sub>1 \\<cdot>\n        (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3))\n        x =\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3)\n        x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<sigma>\\<^sub>1 \\<cdot>\n        (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3))\n        x =\n       (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3)\n        x", "show \"(\\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3)) x = ((\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2) \\<cdot> \\<sigma>\\<^sub>3) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3))\n     x =\n    (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3) x", "by (simp only: composition_def composition_conseq2t)"], ["proof (state)\nthis:\n  (\\<sigma>\\<^sub>1 \\<cdot> (\\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3)) x =\n  (\\<sigma>\\<^sub>1 \\<cdot> \\<sigma>\\<^sub>2 \\<cdot> \\<sigma>\\<^sub>3) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_comp1: \"(\\<sigma> \\<cdot> \\<epsilon>) = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<cdot> \\<epsilon> = \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (\\<sigma> \\<cdot> \\<epsilon>) x = \\<sigma> x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (\\<sigma> \\<cdot> \\<epsilon>) x = \\<sigma> x", "show \"(\\<sigma> \\<cdot> \\<epsilon>) x = \\<sigma> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<cdot> \\<epsilon>) x = \\<sigma> x", "unfolding composition_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> x \\<cdot>\\<^sub>t \\<epsilon> = \\<sigma> x", "using empty_subt"], ["proof (prove)\nusing this:\n  ?t \\<cdot>\\<^sub>t \\<epsilon> = ?t\n\ngoal (1 subgoal):\n 1. \\<sigma> x \\<cdot>\\<^sub>t \\<epsilon> = \\<sigma> x", "by auto"], ["proof (state)\nthis:\n  (\\<sigma> \\<cdot> \\<epsilon>) x = \\<sigma> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_comp2: \"(\\<epsilon> \\<cdot> \\<sigma>) = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> \\<cdot> \\<sigma> = \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (\\<epsilon> \\<cdot> \\<sigma>) x = \\<sigma> x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (\\<epsilon> \\<cdot> \\<sigma>) x = \\<sigma> x", "show \"(\\<epsilon> \\<cdot> \\<sigma>) x = \\<sigma> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon> \\<cdot> \\<sigma>) x = \\<sigma> x", "unfolding composition_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma> = \\<sigma> x", "by simp"], ["proof (state)\nthis:\n  (\\<epsilon> \\<cdot> \\<sigma>) x = \\<sigma> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>t_trans : \n  assumes t\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>2\"\n  assumes t\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>t t\\<^sub>2 t\\<^sub>3\"\n  shows \"instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "from t\\<^sub>1\\<^sub>2"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>2", "obtain \\<sigma>\\<^sub>1\\<^sub>2 where \"t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        t\\<^sub>1 =\n        t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>t_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        t\\<^sub>1 =\n        t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "from t\\<^sub>2\\<^sub>3"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>t t\\<^sub>2 t\\<^sub>3", "obtain \\<sigma>\\<^sub>2\\<^sub>3 where \"t\\<^sub>2 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>t t\\<^sub>2 t\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        t\\<^sub>2 =\n        t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>t_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. t\\<^sub>2 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        t\\<^sub>2 =\n        t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t\\<^sub>2 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\n  t\\<^sub>2 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3", "have \"t\\<^sub>1 = (t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3) \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  t\\<^sub>1 = t\\<^sub>2 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1\\<^sub>2\n  t\\<^sub>2 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. t\\<^sub>1 =\n    t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\n    \\<sigma>\\<^sub>1\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>1\\<^sub>2", "have \"t\\<^sub>1 = t\\<^sub>3 \\<cdot>\\<^sub>t (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\""], ["proof (prove)\nusing this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. t\\<^sub>1 =\n    t\\<^sub>3 \\<cdot>\\<^sub>t\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "using composition_conseq2t"], ["proof (prove)\nusing this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\n  \\<sigma>\\<^sub>1\\<^sub>2\n  ?t \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2 =\n  ?t \\<cdot>\\<^sub>t (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. t\\<^sub>1 =\n    t\\<^sub>3 \\<cdot>\\<^sub>t\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3", "unfolding instance_of\\<^sub>t_def"], ["proof (prove)\nusing this:\n  t\\<^sub>1 =\n  t\\<^sub>3 \\<cdot>\\<^sub>t\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. t\\<^sub>1 = t\\<^sub>3 \\<cdot>\\<^sub>t \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>t t\\<^sub>1 t\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>t\\<^sub>s_trans : \n  assumes ts\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>2\"\n  assumes ts\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>2 ts\\<^sub>3\"\n  shows \"instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "from ts\\<^sub>1\\<^sub>2"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>2", "obtain \\<sigma>\\<^sub>1\\<^sub>2 where \"ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        ts\\<^sub>1 =\n        ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s\n        \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>t\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        ts\\<^sub>1 =\n        ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s\n        \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "from ts\\<^sub>2\\<^sub>3"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>t\\<^sub>s ts\\<^sub>2 ts\\<^sub>3", "obtain \\<sigma>\\<^sub>2\\<^sub>3 where \"ts\\<^sub>2 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>t\\<^sub>s ts\\<^sub>2 ts\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        ts\\<^sub>2 =\n        ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n        \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>t\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     ts\\<^sub>2 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        ts\\<^sub>2 =\n        ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n        \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ts\\<^sub>2 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n  ts\\<^sub>2 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3", "have \"ts\\<^sub>1 = (ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3) \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  ts\\<^sub>1 = ts\\<^sub>2 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n  ts\\<^sub>2 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. ts\\<^sub>1 =\n    ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n    \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n    \\<sigma>\\<^sub>1\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2", "have \"ts\\<^sub>1 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\""], ["proof (prove)\nusing this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. ts\\<^sub>1 =\n    ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "using composition_conseq2ts"], ["proof (prove)\nusing this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>t\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. ts\\<^sub>1 =\n    ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3", "unfolding instance_of\\<^sub>t\\<^sub>s_def"], ["proof (prove)\nusing this:\n  ts\\<^sub>1 =\n  ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       ts\\<^sub>1 = ts\\<^sub>3 \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>t\\<^sub>s ts\\<^sub>1 ts\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>l_trans : \n  assumes l\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>2\"\n  assumes l\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>l l\\<^sub>2 l\\<^sub>3\"\n  shows \"instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "from l\\<^sub>1\\<^sub>2"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>2", "obtain \\<sigma>\\<^sub>1\\<^sub>2 where \"l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        l\\<^sub>1 =\n        l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        l\\<^sub>1 =\n        l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "from l\\<^sub>2\\<^sub>3"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l l\\<^sub>2 l\\<^sub>3", "obtain \\<sigma>\\<^sub>2\\<^sub>3 where \"l\\<^sub>2 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l l\\<^sub>2 l\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        l\\<^sub>2 =\n        l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. l\\<^sub>2 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        l\\<^sub>2 =\n        l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\n  l\\<^sub>2 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3", "have \"l\\<^sub>1 = (l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3) \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1\\<^sub>2\n  l\\<^sub>2 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 =\n    l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\n    \\<sigma>\\<^sub>1\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\n  \\<sigma>\\<^sub>1\\<^sub>2", "have \"l\\<^sub>1 = l\\<^sub>3 \\<cdot>\\<^sub>l (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 =\n    l\\<^sub>3 \\<cdot>\\<^sub>l\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "using composition_conseq2l"], ["proof (prove)\nusing this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\n  \\<sigma>\\<^sub>1\\<^sub>2\n  ?l \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>2 =\n  ?l \\<cdot>\\<^sub>l (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 =\n    l\\<^sub>3 \\<cdot>\\<^sub>l\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3", "unfolding instance_of\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 =\n  l\\<^sub>3 \\<cdot>\\<^sub>l\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. l\\<^sub>1 = l\\<^sub>3 \\<cdot>\\<^sub>l \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l l\\<^sub>1 l\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma instance_of\\<^sub>l\\<^sub>s_trans : \n  assumes L\\<^sub>1\\<^sub>2: \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>2\"\n  assumes L\\<^sub>2\\<^sub>3: \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>2 L\\<^sub>3\"\n  shows \"instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "from L\\<^sub>1\\<^sub>2"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>2", "obtain \\<sigma>\\<^sub>1\\<^sub>2 where \"L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        L\\<^sub>1 =\n        L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n        \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>1\\<^sub>2.\n        L\\<^sub>1 =\n        L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n        \\<sigma>\\<^sub>1\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "from L\\<^sub>2\\<^sub>3"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s L\\<^sub>2 L\\<^sub>3", "obtain \\<sigma>\\<^sub>2\\<^sub>3 where \"L\\<^sub>2 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s L\\<^sub>2 L\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        L\\<^sub>2 =\n        L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n        \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. L\\<^sub>2 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>\\<^sub>2\\<^sub>3.\n        L\\<^sub>2 =\n        L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n        \\<sigma>\\<^sub>2\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  L\\<^sub>2 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n  L\\<^sub>2 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3", "have \"L\\<^sub>1 = (L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\""], ["proof (prove)\nusing this:\n  L\\<^sub>1 = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1\\<^sub>2\n  L\\<^sub>2 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\\<^sub>3\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 =\n    L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>\\<^sub>1\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2", "have \"L\\<^sub>1 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\""], ["proof (prove)\nusing this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 =\n    L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "using composition_conseq2ls"], ["proof (prove)\nusing this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>2\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\\<^sub>1\\<^sub>2\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?L \\<cdot>\\<^sub>l\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. L\\<^sub>1 =\n    L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "then"], ["proof (chain)\npicking this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  L\\<^sub>1 =\n  L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<sigma>\\<^sub>2\\<^sub>3 \\<cdot> \\<sigma>\\<^sub>1\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       L\\<^sub>1 = L\\<^sub>3 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s L\\<^sub>1 L\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Merging substitutions\\<close>"], ["", "lemma project_sub:\n  assumes inst_C:\"C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\" \n  assumes L'sub: \"L' \\<subseteq> C'\"\n  shows \"\\<exists>L \\<subseteq> C. L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and> (C-L) \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "let ?L = \"{l \\<in> C. \\<exists>l' \\<in> L'. l \\<cdot>\\<^sub>l lmbd = l'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "have \"?L \\<subseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'}\n    \\<subseteq> C", "by auto"], ["proof (state)\nthis:\n  {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<subseteq> C\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "moreover"], ["proof (state)\nthis:\n  {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<subseteq> C\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "have \"?L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l \\<in> C.\n     \\<exists>l'\\<in>L'.\n        l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n    lmbd =\n    L'", "proof (rule Orderings.order_antisym; rule Set.subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "fix l'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "assume l'L: \"l' \\<in> L'\""], ["proof (state)\nthis:\n  l' \\<in> L'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "from inst_C"], ["proof (chain)\npicking this:\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'", "have \"{l \\<cdot>\\<^sub>l lmbd|l. l \\<in> C} = C'\""], ["proof (prove)\nusing this:\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\n\ngoal (1 subgoal):\n 1. {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'", "unfolding subls_def2"], ["proof (prove)\nusing this:\n  {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'\n\ngoal (1 subgoal):\n 1. {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'", "by -"], ["proof (state)\nthis:\n  {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "then"], ["proof (chain)\npicking this:\n  {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'", "have \"\\<exists>l. l' = l \\<cdot>\\<^sub>l lmbd \\<and> l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'\""], ["proof (prove)\nusing this:\n  {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l' = l \\<cdot>\\<^sub>l lmbd \\<and>\n       l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'", "using L'sub l'L"], ["proof (prove)\nusing this:\n  {l \\<cdot>\\<^sub>l lmbd |l. l \\<in> C} = C'\n  L' \\<subseteq> C'\n  l' \\<in> L'\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l' = l \\<cdot>\\<^sub>l lmbd \\<and>\n       l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'", "by auto"], ["proof (state)\nthis:\n  \\<exists>l.\n     l' = l \\<cdot>\\<^sub>l lmbd \\<and>\n     l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "then"], ["proof (chain)\npicking this:\n  \\<exists>l.\n     l' = l \\<cdot>\\<^sub>l lmbd \\<and>\n     l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'", "have \" l' \\<in> {l \\<in> C. l \\<cdot>\\<^sub>l lmbd \\<in> L'} \\<cdot>\\<^sub>l\\<^sub>s lmbd\""], ["proof (prove)\nusing this:\n  \\<exists>l.\n     l' = l \\<cdot>\\<^sub>l lmbd \\<and>\n     l \\<in> C \\<and> l \\<cdot>\\<^sub>l lmbd \\<in> L'\n\ngoal (1 subgoal):\n 1. l' \\<in> {l \\<in> C.\n              l \\<cdot>\\<^sub>l lmbd \\<in> L'} \\<cdot>\\<^sub>l\\<^sub>s\n             lmbd", "by auto"], ["proof (state)\nthis:\n  l' \\<in> {l \\<in> C.\n            l \\<cdot>\\<^sub>l lmbd \\<in> L'} \\<cdot>\\<^sub>l\\<^sub>s\n           lmbd\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'\n 2. \\<And>x.\n       x \\<in> L' \\<Longrightarrow>\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd", "then"], ["proof (chain)\npicking this:\n  l' \\<in> {l \\<in> C.\n            l \\<cdot>\\<^sub>l lmbd \\<in> L'} \\<cdot>\\<^sub>l\\<^sub>s\n           lmbd", "show \" l' \\<in> {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s lmbd\""], ["proof (prove)\nusing this:\n  l' \\<in> {l \\<in> C.\n            l \\<cdot>\\<^sub>l lmbd \\<in> L'} \\<cdot>\\<^sub>l\\<^sub>s\n           lmbd\n\ngoal (1 subgoal):\n 1. l' \\<in> {l \\<in> C.\n              \\<exists>l'\\<in>L'.\n                 l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n             lmbd", "by auto"], ["proof (state)\nthis:\n  l' \\<in> {l \\<in> C.\n            \\<exists>l'\\<in>L'.\n               l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n           lmbd\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {l \\<in> C.\n                \\<exists>l'\\<in>L'.\n                   l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n               lmbd \\<Longrightarrow>\n       x \\<in> L'", "qed auto"], ["proof (state)\nthis:\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  L'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "moreover"], ["proof (state)\nthis:\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  L'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "have \"(C-?L) \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C -\n    {l \\<in> C.\n     \\<exists>l'\\<in>L'.\n        l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n    lmbd =\n    C' - L'", "using inst_C"], ["proof (prove)\nusing this:\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\n\ngoal (1 subgoal):\n 1. C -\n    {l \\<in> C.\n     \\<exists>l'\\<in>L'.\n        l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n    lmbd =\n    C' - L'", "by auto"], ["proof (state)\nthis:\n  C -\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  C' - L'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "ultimately"], ["proof (chain)\npicking this:\n  {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<subseteq> C\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  L'\n  C -\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  C' - L'", "show ?thesis"], ["proof (prove)\nusing this:\n  {l \\<in> C. \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<subseteq> C\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  L'\n  C -\n  {l \\<in> C.\n   \\<exists>l'\\<in>L'. l \\<cdot>\\<^sub>l lmbd = l'} \\<cdot>\\<^sub>l\\<^sub>s\n  lmbd =\n  C' - L'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<subseteq>C.\n       L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n       C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'", "by blast"], ["proof (state)\nthis:\n  \\<exists>L\\<subseteq>C.\n     L \\<cdot>\\<^sub>l\\<^sub>s lmbd = L' \\<and>\n     C - L \\<cdot>\\<^sub>l\\<^sub>s lmbd = C' - L'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma relevant_vars_subt:\n  assumes \"\\<forall>x \\<in> vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \" t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a;\n                    \\<forall>x\\<in>vars\\<^sub>t x2aa.\n                       \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n                   \\<Longrightarrow> x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                                     x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2;\n        \\<forall>x\\<in>vars\\<^sub>t (Fun x1 x2a).\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                         Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n 2. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "case (Fun f ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2aa \\<in> set ts;\n   \\<forall>x\\<in>vars\\<^sub>t ?x2aa.\n      \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n  \\<Longrightarrow> ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                    ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n  \\<forall>x\\<in>vars\\<^sub>t (Fun f ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a;\n                    \\<forall>x\\<in>vars\\<^sub>t x2aa.\n                       \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n                   \\<Longrightarrow> x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                                     x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2;\n        \\<forall>x\\<in>vars\\<^sub>t (Fun x1 x2a).\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                         Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n 2. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "have f: \"\\<forall>t. t \\<in> set ts \\<longrightarrow> vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> set ts \\<longrightarrow>\n       vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts", "by (induction ts) auto"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> set ts \\<longrightarrow>\n     vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a;\n                    \\<forall>x\\<in>vars\\<^sub>t x2aa.\n                       \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n                   \\<Longrightarrow> x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                                     x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2;\n        \\<forall>x\\<in>vars\\<^sub>t (Fun x1 x2a).\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                         Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n 2. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "have \"\\<forall>t\\<in>set ts. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts.\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "assume tints: \"t \\<in> set ts\""], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "have \"\\<forall>x \\<in> vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "using f Fun(2)"], ["proof (prove)\nusing this:\n  t \\<in> set ts\n  \\<forall>t.\n     t \\<in> set ts \\<longrightarrow>\n     vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\n  \\<forall>x\\<in>vars\\<^sub>t (Fun f ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "show \"t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "using Fun tints"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<lbrakk>?x2aa \\<in> set ts;\n   \\<forall>x\\<in>vars\\<^sub>t ?x2aa.\n      \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n  \\<Longrightarrow> ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                    ?x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n  \\<forall>x\\<in>vars\\<^sub>t (Fun f ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a;\n                    \\<forall>x\\<in>vars\\<^sub>t x2aa.\n                       \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n                   \\<Longrightarrow> x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                                     x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2;\n        \\<forall>x\\<in>vars\\<^sub>t (Fun x1 x2a).\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                         Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n 2. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "have \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 = ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<And>x2aa.\n                   \\<lbrakk>x2aa \\<in> set x2a;\n                    \\<forall>x\\<in>vars\\<^sub>t x2aa.\n                       \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n                   \\<Longrightarrow> x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                                     x2aa \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2;\n        \\<forall>x\\<in>vars\\<^sub>t (Fun x1 x2a).\n           \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\\<rbrakk>\n       \\<Longrightarrow> Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n                         Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n 2. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. Fun f ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n    Fun f ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  Fun f ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n  Fun f ts \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x\\<in>vars\\<^sub>t (\\<epsilon> x).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       \\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "qed auto"], ["", "lemma relevant_vars_subts: (* similar to above proof *)\n  assumes asm: \"\\<forall>x \\<in> vars\\<^sub>t\\<^sub>s ts. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \"ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 = ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "have f: \"\\<forall>t. t \\<in> set ts \\<longrightarrow> vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       t \\<in> set ts \\<longrightarrow>\n       vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts", "by (induction ts) auto"], ["proof (state)\nthis:\n  \\<forall>t.\n     t \\<in> set ts \\<longrightarrow>\n     vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "have \"\\<forall>t\\<in>set ts. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts.\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "assume tints: \"t \\<in> set ts\""], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "have \"\\<forall>x \\<in> vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "using f asm"], ["proof (prove)\nusing this:\n  t \\<in> set ts\n  \\<forall>t.\n     t \\<in> set ts \\<longrightarrow>\n     vars\\<^sub>t t \\<subseteq> vars\\<^sub>t\\<^sub>s ts\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s ts.\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set ts \\<Longrightarrow>\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 =\n       t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "show \"t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "using relevant_vars_subt tints"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t t. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>t ?t.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?t \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>1 =\n  ?t \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set ts.\n     t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>1 = t \\<cdot>\\<^sub>t \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n    ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>1 =\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma relevant_vars_subl:\n  assumes \"\\<forall>x \\<in> vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \"\n  shows \"l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Pos x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n 2. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Neg x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "case (Pos p ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>l (Pos p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Pos x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n 2. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Neg x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>l (Pos p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l (Pos p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "using relevant_vars_subts"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l (Pos p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s ?ts.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>1 =\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "unfolding vars\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s (get_terms (Pos p ts)).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s ?ts.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>1 =\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n  Pos p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Neg x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Neg x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "case (Neg p ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>l (Neg p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<forall>x\\<in>vars\\<^sub>l (Neg x1 x2).\n          \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x \\<Longrightarrow>\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>l (Neg p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l (Neg p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "using relevant_vars_subts"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l (Neg p ts).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s ?ts.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>1 =\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "unfolding vars\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s (get_terms (Neg p ts)).\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>t\\<^sub>s ?ts.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>1 =\n  ?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n    Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n  Neg p ts \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma relevant_vars_subls: (* in many ways a mirror of relevant_vars_subts  *)\n  assumes asm: \"\\<forall>x \\<in> vars\\<^sub>l\\<^sub>s L. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\"\n  shows \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 = L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n    L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n    L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2", "have f: \"\\<forall>l. l \\<in> L \\<longrightarrow> vars\\<^sub>l l \\<subseteq> vars\\<^sub>l\\<^sub>s L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       l \\<in> L \\<longrightarrow>\n       vars\\<^sub>l l \\<subseteq> vars\\<^sub>l\\<^sub>s L", "unfolding vars\\<^sub>l\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       l \\<in> L \\<longrightarrow>\n       vars\\<^sub>l l \\<subseteq> \\<Union> (vars\\<^sub>l ` L)", "by auto"], ["proof (state)\nthis:\n  \\<forall>l.\n     l \\<in> L \\<longrightarrow>\n     vars\\<^sub>l l \\<subseteq> vars\\<^sub>l\\<^sub>s L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n    L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2", "have \"\\<forall>l \\<in> L. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>L.\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "assume linls: \"l\\<in>L\""], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  l \\<in> L", "have \"\\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\""], ["proof (prove)\nusing this:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "using f asm"], ["proof (prove)\nusing this:\n  l \\<in> L\n  \\<forall>l.\n     l \\<in> L \\<longrightarrow>\n     vars\\<^sub>l l \\<subseteq> vars\\<^sub>l\\<^sub>s L\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s L.\n     \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 =\n       l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x", "show \"l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "using relevant_vars_subl linls"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l l. \\<sigma>\\<^sub>1 x = \\<sigma>\\<^sub>2 x\n  \\<forall>x\\<in>vars\\<^sub>l ?l.\n     ?\\<sigma>\\<^sub>1 x = ?\\<sigma>\\<^sub>2 x \\<Longrightarrow>\n  ?l \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>1 =\n  ?l \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>2\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L.\n     l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n    L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>L.\n     l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>L.\n     l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>1 = l \\<cdot>\\<^sub>l \\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n    L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2", "by (meson image_cong)"], ["proof (state)\nthis:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>1 =\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma merge_sub:\n  assumes dist: \"vars\\<^sub>l\\<^sub>s C \\<inter> vars\\<^sub>l\\<^sub>s D = {}\"\n  assumes CC': \"C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\"\n  assumes DD': \"D \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = D'\"\n  shows \"\\<exists>\\<eta>. C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and> D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "let ?\\<eta> = \"\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "have \" \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C. ?\\<eta> x = lmbd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n       (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = lmbd x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = lmbd x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = lmbd x", "have \"C \\<cdot>\\<^sub>l\\<^sub>s ?\\<eta> = C \\<cdot>\\<^sub>l\\<^sub>s lmbd\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = lmbd x\n\ngoal (1 subgoal):\n 1. C \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    C \\<cdot>\\<^sub>l\\<^sub>s lmbd", "using relevant_vars_subls[of C ?\\<eta> lmbd]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = lmbd x\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s C.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n     lmbd x \\<Longrightarrow>\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd\n\ngoal (1 subgoal):\n 1. C \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    C \\<cdot>\\<^sub>l\\<^sub>s lmbd", "by auto"], ["proof (state)\nthis:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "then"], ["proof (chain)\npicking this:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd", "have \"C \\<cdot>\\<^sub>l\\<^sub>s ?\\<eta> = C'\""], ["proof (prove)\nusing this:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd\n\ngoal (1 subgoal):\n 1. C \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    C'", "using CC'"], ["proof (prove)\nusing this:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd\n  C \\<cdot>\\<^sub>l\\<^sub>s lmbd = C'\n\ngoal (1 subgoal):\n 1. C \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    C'", "by auto"], ["proof (state)\nthis:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "moreover"], ["proof (state)\nthis:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "have \" \\<forall>x \\<in> vars\\<^sub>l\\<^sub>s D. ?\\<eta> x = \\<mu> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n       (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n       \\<mu> x", "using dist"], ["proof (prove)\nusing this:\n  vars\\<^sub>l\\<^sub>s C \\<inter> vars\\<^sub>l\\<^sub>s D = {}\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n       (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n       \\<mu> x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = \\<mu> x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = \\<mu> x", "have \"D \\<cdot>\\<^sub>l\\<^sub>s ?\\<eta> = D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = \\<mu> x\n\ngoal (1 subgoal):\n 1. D \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>", "using relevant_vars_subls[of D ?\\<eta> \\<mu>]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) = \\<mu> x\n  \\<forall>x\\<in>vars\\<^sub>l\\<^sub>s D.\n     (if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n     \\<mu> x \\<Longrightarrow>\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. D \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>", "by auto"], ["proof (state)\nthis:\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "then"], ["proof (chain)\npicking this:\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>", "have \"D \\<cdot>\\<^sub>l\\<^sub>s ?\\<eta> = D'\""], ["proof (prove)\nusing this:\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. D \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    D'", "using DD'"], ["proof (prove)\nusing this:\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu>\n  D \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = D'\n\ngoal (1 subgoal):\n 1. D \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x.\n        if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n    D'", "by auto"], ["proof (state)\nthis:\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "ultimately"], ["proof (chain)\npicking this:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C'\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D'", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  C'\n  D \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. if x \\<in> vars\\<^sub>l\\<^sub>s C then lmbd x else \\<mu> x) =\n  D'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<eta>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n       D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<eta>.\n     C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C' \\<and>\n     D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = D'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Standardizing apart\\<close>"], ["", "abbreviation std\\<^sub>1 :: \"fterm clause \\<Rightarrow> fterm clause\" where\n  \"std\\<^sub>1 C \\<equiv> C \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (''1'' @ x))\""], ["", "abbreviation std\\<^sub>2 :: \"fterm clause \\<Rightarrow> fterm clause\" where\n  \"std\\<^sub>2 C \\<equiv> C \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (''2'' @ x))\""], ["", "lemma std_apart_apart'': \n  assumes \"x \\<in> vars\\<^sub>t  (t \\<cdot>\\<^sub>t (\\<lambda>x::char list. Var (y @ x)))\"\n  shows \"\\<exists>x'. x = y@x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>t (t \\<cdot>\\<^sub>t (\\<lambda>x. \\<epsilon> (y @ x)))\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "by (induction t) auto"], ["", "lemma std_apart_apart':\n  assumes \"x \\<in> vars\\<^sub>l (l \\<cdot>\\<^sub>l (\\<lambda>x. Var  (y@x)))\" \n  shows \"\\<exists>x'. x = y@x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l (l \\<cdot>\\<^sub>l (\\<lambda>x. \\<epsilon> (y @ x)))\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "unfolding vars\\<^sub>l_def"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>t\\<^sub>s\n           (get_terms (l \\<cdot>\\<^sub>l (\\<lambda>x. \\<epsilon> (y @ x))))\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "using std_apart_apart''"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>t\\<^sub>s\n           (get_terms (l \\<cdot>\\<^sub>l (\\<lambda>x. \\<epsilon> (y @ x))))\n  ?x \\<in> vars\\<^sub>t\n            (?t \\<cdot>\\<^sub>t\n             (\\<lambda>x. \\<epsilon> (?y @ x))) \\<Longrightarrow>\n  \\<exists>x'. ?x = ?y @ x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = y @ x'", "by (cases l) auto"], ["", "lemma std_apart_apart: \"vars\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1) \\<inter> vars\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "assume xin: \"x \\<in> vars\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1) \\<inter> vars\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2)\""], ["proof (state)\nthis:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n          vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "from xin"], ["proof (chain)\npicking this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n          vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"x \\<in> vars\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n          vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. x \\<in> vars\\<^sub>l\\<^sub>s\n             (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n              (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by auto"], ["proof (state)\nthis:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "then"], ["proof (chain)\npicking this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have \"\\<exists>x'. x=''1'' @ x'\""], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''1'' @ x'", "using std_apart_apart'[of x _ \"''1''\"]"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  x \\<in> vars\\<^sub>l\n           (?l \\<cdot>\\<^sub>l\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n  \\<exists>x'. x = ''1'' @ x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''1'' @ x'", "unfolding vars\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           (vars\\<^sub>l `\n            (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''1'' @ x))))\n  x \\<in> vars\\<^sub>l\n           (?l \\<cdot>\\<^sub>l\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n  \\<exists>x'. x = ''1'' @ x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''1'' @ x'", "by auto"], ["proof (state)\nthis:\n  \\<exists>x'. x = ''1'' @ x'\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "moreover"], ["proof (state)\nthis:\n  \\<exists>x'. x = ''1'' @ x'\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "from xin"], ["proof (chain)\npicking this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n          vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"x \\<in> vars\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n          vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. x \\<in> vars\\<^sub>l\\<^sub>s\n             (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n              (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by auto"], ["proof (state)\nthis:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "then"], ["proof (chain)\npicking this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"\\<exists>x'. x= ''2'' @x' \""], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''2'' @ x'", "using std_apart_apart'[of x _ \"''2''\"]"], ["proof (prove)\nusing this:\n  x \\<in> vars\\<^sub>l\\<^sub>s\n           (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  x \\<in> vars\\<^sub>l\n           (?l \\<cdot>\\<^sub>l\n            (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n  \\<exists>x'. x = ''2'' @ x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''2'' @ x'", "unfolding vars\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union>\n           (vars\\<^sub>l `\n            (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''2'' @ x))))\n  x \\<in> vars\\<^sub>l\n           (?l \\<cdot>\\<^sub>l\n            (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n  \\<exists>x'. x = ''2'' @ x'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x = ''2'' @ x'", "by auto"], ["proof (state)\nthis:\n  \\<exists>x'. x = ''2'' @ x'\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>x'. x = ''1'' @ x'\n  \\<exists>x'. x = ''2'' @ x'", "have \"False\""], ["proof (prove)\nusing this:\n  \\<exists>x'. x = ''1'' @ x'\n  \\<exists>x'. x = ''2'' @ x'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "then"], ["proof (chain)\npicking this:\n  False", "have \"x \\<in> {}\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. x \\<in> {}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {}\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n        vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n  ?x2 \\<in> {}\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "then"], ["proof (chain)\npicking this:\n  ?x2\n  \\<in> vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n        vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n  ?x2 \\<in> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n        vars\\<^sub>l\\<^sub>s\n         (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n  ?x2 \\<in> {}\n\ngoal (1 subgoal):\n 1. vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n    vars\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n    {}", "by auto"], ["proof (state)\nthis:\n  vars\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n  vars\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std_apart_instance_of\\<^sub>l\\<^sub>s1: \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have empty: \"(\\<lambda>x. Var (''1''@x)) \\<cdot> (\\<lambda>x. Var (tl x)) = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    \\<epsilon>", "using composition_def"], ["proof (prove)\nusing this:\n  (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2) ?x =\n  ?\\<sigma>\\<^sub>1 ?x \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  \\<epsilon>\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have \"C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1", "using empty_subls"], ["proof (prove)\nusing this:\n  ?L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = ?L\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1", "have \"C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s ((\\<lambda>x. Var (''1''@x)) \\<cdot> (\\<lambda>x. Var (tl x))) = C\\<^sub>1\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n     (\\<lambda>x. \\<epsilon> (tl x))) =\n    C\\<^sub>1", "using empty"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C\\<^sub>1\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  \\<epsilon>\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n     (\\<lambda>x. \\<epsilon> (tl x))) =\n    C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C\\<^sub>1\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C\\<^sub>1", "have \"(C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (''1''@x))) \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (tl x)) = C\\<^sub>1\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C\\<^sub>1\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    C\\<^sub>1", "using composition_conseq2ls"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C\\<^sub>1\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?L \\<cdot>\\<^sub>l\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C\\<^sub>1\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C\\<^sub>1", "have \"C\\<^sub>1 = (std\\<^sub>1 C\\<^sub>1) \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (tl x))\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C\\<^sub>1\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 =\n    C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x))", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 =\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 =\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))", "show \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 =\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 =\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C\\<^sub>1 =\n       C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n       \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std_apart_instance_of\\<^sub>l\\<^sub>s2: \"instance_of\\<^sub>l\\<^sub>s C2 (std\\<^sub>2 C2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have empty: \"(\\<lambda>x. Var (''2''@x)) \\<cdot> (\\<lambda>x. Var (tl x)) = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    \\<epsilon>", "using composition_def"], ["proof (prove)\nusing this:\n  (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2) ?x =\n  ?\\<sigma>\\<^sub>1 ?x \\<cdot>\\<^sub>t ?\\<sigma>\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  \\<epsilon>\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2", "using empty_subls"], ["proof (prove)\nusing this:\n  ?L \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = ?L\n\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2", "by auto"], ["proof (state)\nthis:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2", "have \"C2 \\<cdot>\\<^sub>l\\<^sub>s ((\\<lambda>x. Var (''2''@x)) \\<cdot> (\\<lambda>x. Var (tl x))) = C2\""], ["proof (prove)\nusing this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2\n\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s\n    ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n     (\\<lambda>x. \\<epsilon> (tl x))) =\n    C2", "using empty"], ["proof (prove)\nusing this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s \\<epsilon> = C2\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  \\<epsilon>\n\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s\n    ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n     (\\<lambda>x. \\<epsilon> (tl x))) =\n    C2", "by auto"], ["proof (state)\nthis:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C2", "have \"(C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (''2''@x))) \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (tl x)) = C2\""], ["proof (prove)\nusing this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C2\n\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    C2", "using composition_conseq2ls"], ["proof (prove)\nusing this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  ((\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\n   (\\<lambda>x. \\<epsilon> (tl x))) =\n  C2\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?L \\<cdot>\\<^sub>l\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. C2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x)) =\n    C2", "by auto"], ["proof (state)\nthis:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C2", "have \"C2 = (std\\<^sub>2 C2) \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. Var (tl x))\""], ["proof (prove)\nusing this:\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x)) =\n  C2\n\ngoal (1 subgoal):\n 1. C2 =\n    C2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (tl x))", "by auto"], ["proof (state)\nthis:\n  C2 =\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "then"], ["proof (chain)\npicking this:\n  C2 =\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))", "show \"instance_of\\<^sub>l\\<^sub>s C2 (std\\<^sub>2 C2)\""], ["proof (prove)\nusing this:\n  C2 =\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C2\n     (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C2 =\n  C2 \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<lambda>x. \\<epsilon> (tl x))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C2 =\n       C2 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n       \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C2\n   (C2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Unifiers\\<close>"], ["", "definition unifier\\<^sub>t\\<^sub>s :: \"substitution \\<Rightarrow> fterm set \\<Rightarrow> bool\" where\n  \"unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<longleftrightarrow> (\\<exists>t'. \\<forall>t \\<in> ts. t \\<cdot>\\<^sub>t \\<sigma> = t')\""], ["", "definition unifier\\<^sub>l\\<^sub>s :: \"substitution \\<Rightarrow> fterm literal set \\<Rightarrow> bool\" where\n  \"unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<longleftrightarrow> (\\<exists>l'. \\<forall>l \\<in> L. l \\<cdot>\\<^sub>l \\<sigma> = l')\""], ["", "lemma unif_sub:\n  assumes unif: \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\"\n  assumes nonempty: \"L \\<noteq> {}\"\n  shows \"\\<exists>l. subls L \\<sigma> = {subl l \\<sigma>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "from nonempty"], ["proof (chain)\npicking this:\n  L \\<noteq> {}", "obtain l where \"l \\<in> L\""], ["proof (prove)\nusing this:\n  L \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>l. l \\<in> L \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "from unif this"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n  l \\<in> L", "have \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "by auto"], ["proof (state)\nthis:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "then"], ["proof (chain)\npicking this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "show ?thesis"], ["proof (prove)\nusing this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "by auto"], ["proof (state)\nthis:\n  \\<exists>l.\n     L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unifiert_def2: (*  (\\<lambda>t. sub t \\<sigma>) ` ts could have some nice notation maybe *)\n  assumes L_elem: \"ts \\<noteq> {}\"\n  shows \"unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<longleftrightarrow> (\\<exists>l. (\\<lambda>t. sub t \\<sigma>) ` ts ={l})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts =\n    (\\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<Longrightarrow>\n    \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n 2. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "assume unif: \"unifier\\<^sub>t\\<^sub>s \\<sigma> ts\""], ["proof (state)\nthis:\n  unifier\\<^sub>t\\<^sub>s \\<sigma> ts\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<Longrightarrow>\n    \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n 2. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "from L_elem"], ["proof (chain)\npicking this:\n  ts \\<noteq> {}", "obtain t where \"t \\<in> ts\""], ["proof (prove)\nusing this:\n  ts \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t. t \\<in> ts \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  t \\<in> ts\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<Longrightarrow>\n    \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n 2. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "then"], ["proof (chain)\npicking this:\n  t \\<in> ts", "have \"(\\<lambda>t. sub t \\<sigma>) ` ts = {t \\<cdot>\\<^sub>t \\<sigma>}\""], ["proof (prove)\nusing this:\n  t \\<in> ts\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n    {t \\<cdot>\\<^sub>t \\<sigma>}", "using unif"], ["proof (prove)\nusing this:\n  t \\<in> ts\n  unifier\\<^sub>t\\<^sub>s \\<sigma> ts\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n    {t \\<cdot>\\<^sub>t \\<sigma>}", "unfolding unifier\\<^sub>t\\<^sub>s_def"], ["proof (prove)\nusing this:\n  t \\<in> ts\n  \\<exists>t'. \\<forall>t\\<in>ts. t \\<cdot>\\<^sub>t \\<sigma> = t'\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n    {t \\<cdot>\\<^sub>t \\<sigma>}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n  {t \\<cdot>\\<^sub>t \\<sigma>}\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<Longrightarrow>\n    \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n 2. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n  {t \\<cdot>\\<^sub>t \\<sigma>}", "show \"\\<exists>l. (\\<lambda>t. sub t \\<sigma>) ` ts = {l}\""], ["proof (prove)\nusing this:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n  {t \\<cdot>\\<^sub>t \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "assume \"\\<exists>l. (\\<lambda>t. sub t \\<sigma>) ` ts ={l}\""], ["proof (state)\nthis:\n  \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "then"], ["proof (chain)\npicking this:\n  \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}", "obtain l where \"(\\<lambda>t. sub t \\<sigma>) ` ts = {l}\""], ["proof (prove)\nusing this:\n  \\<exists>l. (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts =\n        {l} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}", "have \"\\<forall>l' \\<in> ts. l' \\<cdot>\\<^sub>t \\<sigma> = l\""], ["proof (prove)\nusing this:\n  (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l}\n\ngoal (1 subgoal):\n 1. \\<forall>l'\\<in>ts. l' \\<cdot>\\<^sub>t \\<sigma> = l", "by auto"], ["proof (state)\nthis:\n  \\<forall>l'\\<in>ts. l' \\<cdot>\\<^sub>t \\<sigma> = l\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>) ` ts = {l} \\<Longrightarrow>\n    unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "then"], ["proof (chain)\npicking this:\n  \\<forall>l'\\<in>ts. l' \\<cdot>\\<^sub>t \\<sigma> = l", "show \"unifier\\<^sub>t\\<^sub>s \\<sigma> ts\""], ["proof (prove)\nusing this:\n  \\<forall>l'\\<in>ts. l' \\<cdot>\\<^sub>t \\<sigma> = l\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>t\\<^sub>s \\<sigma> ts", "unfolding unifier\\<^sub>t\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<forall>l'\\<in>ts. l' \\<cdot>\\<^sub>t \\<sigma> = l\n\ngoal (1 subgoal):\n 1. \\<exists>t'. \\<forall>t\\<in>ts. t \\<cdot>\\<^sub>t \\<sigma> = t'", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>t\\<^sub>s \\<sigma> ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unifier\\<^sub>l\\<^sub>s_def2: \n  assumes L_elem: \"L \\<noteq> {}\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<longleftrightarrow> (\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L =\n    (\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n 2. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "assume unif: \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\""], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n 2. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "from L_elem"], ["proof (chain)\npicking this:\n  L \\<noteq> {}", "obtain l where \"l \\<in> L\""], ["proof (prove)\nusing this:\n  L \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>l. l \\<in> L \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n 2. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "then"], ["proof (chain)\npicking this:\n  l \\<in> L", "have \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\""], ["proof (prove)\nusing this:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "using unif"], ["proof (prove)\nusing this:\n  l \\<in> L\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  l \\<in> L\n  \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "by auto"], ["proof (state)\nthis:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n 2. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "then"], ["proof (chain)\npicking this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}", "show \"\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\""], ["proof (prove)\nusing this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l \\<cdot>\\<^sub>l \\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "assume \"\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> ={l}\""], ["proof (state)\nthis:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "then"], ["proof (chain)\npicking this:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}", "obtain l where \"L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\""], ["proof (prove)\nusing this:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "then"], ["proof (chain)\npicking this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}", "have \"\\<forall>l' \\<in> L. l' \\<cdot>\\<^sub>l \\<sigma> = l\""], ["proof (prove)\nusing this:\n  L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l}\n\ngoal (1 subgoal):\n 1. \\<forall>l'\\<in>L. l' \\<cdot>\\<^sub>l \\<sigma> = l", "by auto"], ["proof (state)\nthis:\n  \\<forall>l'\\<in>L. l' \\<cdot>\\<^sub>l \\<sigma> = l\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma> = {l} \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "then"], ["proof (chain)\npicking this:\n  \\<forall>l'\\<in>L. l' \\<cdot>\\<^sub>l \\<sigma> = l", "show \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\""], ["proof (prove)\nusing this:\n  \\<forall>l'\\<in>L. l' \\<cdot>\\<^sub>l \\<sigma> = l\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<forall>l'\\<in>L. l' \\<cdot>\\<^sub>l \\<sigma> = l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ground\\<^sub>l\\<^sub>s_unif_singleton:\n  assumes ground\\<^sub>l\\<^sub>s: \"ground\\<^sub>l\\<^sub>s L\" \n  assumes unif: \"unifier\\<^sub>l\\<^sub>s \\<sigma>' L\"\n  assumes empt: \"L \\<noteq> {}\"\n  shows \"\\<exists>l. L = {l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. L = {l}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. L = {l}", "from unif empt"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>' L\n  L \\<noteq> {}", "have \"\\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>' L\n  L \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}", "using unif_sub"], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>' L\n  L \\<noteq> {}\n  \\<lbrakk>unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L; ?L \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l.\n                       ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> =\n                       {l \\<cdot>\\<^sub>l ?\\<sigma>}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L = {l}", "then"], ["proof (chain)\npicking this:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}\n\ngoal (1 subgoal):\n 1. \\<exists>l. L = {l}", "using ground\\<^sub>l\\<^sub>s_subls ground\\<^sub>l\\<^sub>s"], ["proof (prove)\nusing this:\n  \\<exists>l. L \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>' = {l}\n  ground\\<^sub>l\\<^sub>s ?L \\<Longrightarrow>\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> = ?L\n  ground\\<^sub>l\\<^sub>s L\n\ngoal (1 subgoal):\n 1. \\<exists>l. L = {l}", "by auto"], ["proof (state)\nthis:\n  \\<exists>l. L = {l}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition unifiablets :: \"fterm set \\<Rightarrow> bool\" where\n  \"unifiablets fs \\<longleftrightarrow> (\\<exists>\\<sigma>. unifier\\<^sub>t\\<^sub>s \\<sigma> fs)\""], ["", "definition unifiablels :: \"fterm literal set \\<Rightarrow> bool\" where\n  \"unifiablels L \\<longleftrightarrow> (\\<exists>\\<sigma>. unifier\\<^sub>l\\<^sub>s \\<sigma> L)\""], ["", "lemma unifier_comp[simp]: \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<longleftrightarrow> unifier\\<^sub>l\\<^sub>s \\<sigma> L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) =\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "assume \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)\""], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "then"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "obtain l'' where l''_p: \"\\<forall>l \\<in> L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l''\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<forall>l\\<in>L\\<^sup>C.\n           l \\<cdot>\\<^sub>l \\<sigma> = l'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>l'. \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<forall>l\\<in>L\\<^sup>C.\n           l \\<cdot>\\<^sub>l \\<sigma> = l'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l''\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "obtain l' where \"(l')\\<^sup>c = l''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'. l'\\<^sup>c = l'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using comp_exi2[of l'']"], ["proof (prove)\nusing this:\n  \\<exists>l. l'' = l\\<^sup>c\n\ngoal (1 subgoal):\n 1. (\\<And>l'. l'\\<^sup>c = l'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l'\\<^sup>c = l''\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "from this l''_p"], ["proof (chain)\npicking this:\n  l'\\<^sup>c = l''\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l''", "have l'_p:\"\\<forall>l \\<in> L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = (l')\\<^sup>c\""], ["proof (prove)\nusing this:\n  l'\\<^sup>c = l''\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l''\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "have \"\\<forall>l \\<in> L. l \\<cdot>\\<^sub>l \\<sigma> = l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "assume \"l\\<in>L\""], ["proof (state)\nthis:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "then"], ["proof (chain)\npicking this:\n  l \\<in> L", "have \"l\\<^sup>c \\<in> L\\<^sup>C\""], ["proof (prove)\nusing this:\n  l \\<in> L\n\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<in> L\\<^sup>C", "by auto"], ["proof (state)\nthis:\n  l\\<^sup>c \\<in> L\\<^sup>C\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>c \\<in> L\\<^sup>C", "have \"(l\\<^sup>c) \\<cdot>\\<^sub>l \\<sigma> = (l')\\<^sup>c\""], ["proof (prove)\nusing this:\n  l\\<^sup>c \\<in> L\\<^sup>C\n\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "using l'_p"], ["proof (prove)\nusing this:\n  l\\<^sup>c \\<in> L\\<^sup>C\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "have \"(l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = (l')\\<^sup>c\""], ["proof (prove)\nusing this:\n  l\\<^sup>c \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l'\\<^sup>c", "by (cases l) auto"], ["proof (state)\nthis:\n  (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> L \\<Longrightarrow> l \\<cdot>\\<^sub>l \\<sigma> = l'", "then"], ["proof (chain)\npicking this:\n  (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l'\\<^sup>c", "show \"l \\<cdot>\\<^sub>l \\<sigma> = l'\""], ["proof (prove)\nusing this:\n  (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l'", "using cancel_comp2"], ["proof (prove)\nusing this:\n  (l \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l'\\<^sup>c\n  ?l\\<^sub>1\\<^sup>c = ?l\\<^sub>2\\<^sup>c \\<Longrightarrow>\n  ?l\\<^sub>1 = ?l\\<^sub>2\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l'", "by blast"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (2 subgoals):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C) \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\n 2. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'", "show \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "assume \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\""], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "then"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L", "obtain l' where l'_p: \"\\<forall>l \\<in> L. l \\<cdot>\\<^sub>l \\<sigma> = l'\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "have \"\\<forall>l \\<in> L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = (l')\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L\\<^sup>C \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L\\<^sup>C \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "assume \"l \\<in> L\\<^sup>C\""], ["proof (state)\nthis:\n  l \\<in> L\\<^sup>C\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L\\<^sup>C \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "then"], ["proof (chain)\npicking this:\n  l \\<in> L\\<^sup>C", "have \"l\\<^sup>c \\<in> L\""], ["proof (prove)\nusing this:\n  l \\<in> L\\<^sup>C\n\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<in> L", "using cancel_comp1"], ["proof (prove)\nusing this:\n  l \\<in> L\\<^sup>C\n  ?l\\<^sup>c\\<^sup>c = ?l\n\ngoal (1 subgoal):\n 1. l\\<^sup>c \\<in> L", "by (metis image_iff)"], ["proof (state)\nthis:\n  l\\<^sup>c \\<in> L\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> L\\<^sup>C \\<Longrightarrow>\n       l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>c \\<in> L", "show \"l \\<cdot>\\<^sub>l \\<sigma> = (l')\\<^sup>c\""], ["proof (prove)\nusing this:\n  l\\<^sup>c \\<in> L\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "using l'_p comp_sub cancel_comp1"], ["proof (prove)\nusing this:\n  l\\<^sup>c \\<in> L\n  \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n  ?l\\<^sup>c \\<cdot>\\<^sub>l ?\\<sigma> =\n  (?l \\<cdot>\\<^sub>l ?\\<sigma>)\\<^sup>c\n  ?l\\<^sup>c\\<^sup>c = ?l\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "by metis"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<Longrightarrow>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c", "show \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'\\<^sup>c\n\ngoal (1 subgoal):\n 1. \\<exists>l'. \\<forall>l\\<in>L\\<^sup>C. l \\<cdot>\\<^sub>l \\<sigma> = l'", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sup>C)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unifier_sub1: \n  assumes \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\"\n  assumes \"L' \\<subseteq> L\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L'", "using assms"], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\n  L' \\<subseteq> L\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L'", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>l'. \\<forall>l\\<in>L. l \\<cdot>\\<^sub>l \\<sigma> = l'\n  L' \\<subseteq> L\n\ngoal (1 subgoal):\n 1. \\<exists>l'. \\<forall>l\\<in>L'. l \\<cdot>\\<^sub>l \\<sigma> = l'", "by auto"], ["", "lemma unifier_sub2: \n  assumes asm: \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2)\"\n  shows \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and> unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "have \"L\\<^sub>1 \\<subseteq> (L\\<^sub>1 \\<union> L\\<^sub>2) \\<and> L\\<^sub>2 \\<subseteq> (L\\<^sub>1 \\<union> L\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L\\<^sub>1 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2 \\<and>\n    L\\<^sub>2 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  L\\<^sub>1 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "from this asm"], ["proof (chain)\npicking this:\n  L\\<^sub>1 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  L\\<^sub>1 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2)\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "using unifier_sub1"], ["proof (prove)\nusing this:\n  L\\<^sub>1 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<subseteq> L\\<^sub>1 \\<union> L\\<^sub>2\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2)\n  \\<lbrakk>unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L; ?L' \\<subseteq> ?L\\<rbrakk>\n  \\<Longrightarrow> unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L'\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n    unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>1 \\<and>\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Most General Unifiers\\<close>"], ["", "definition mgu\\<^sub>t\\<^sub>s :: \"substitution \\<Rightarrow> fterm set \\<Rightarrow> bool\" where\n  \"mgu\\<^sub>t\\<^sub>s \\<sigma> ts \\<longleftrightarrow> unifier\\<^sub>t\\<^sub>s \\<sigma> ts \\<and> (\\<forall>u. unifier\\<^sub>t\\<^sub>s u ts \\<longrightarrow> (\\<exists>i. u = \\<sigma> \\<cdot> i))\""], ["", "definition mgu\\<^sub>l\\<^sub>s :: \"substitution \\<Rightarrow> fterm literal set \\<Rightarrow> bool\" where\n  \"mgu\\<^sub>l\\<^sub>s \\<sigma> L \\<longleftrightarrow> unifier\\<^sub>l\\<^sub>s \\<sigma> L \\<and> (\\<forall>u. unifier\\<^sub>l\\<^sub>s u L \\<longrightarrow> (\\<exists>i. u = \\<sigma> \\<cdot> i))\""], ["", "section \\<open>Resolution\\<close>"], ["", "definition applicable :: \"   fterm clause \\<Rightarrow> fterm clause \n                          \\<Rightarrow> fterm literal set \\<Rightarrow> fterm literal set \n                          \\<Rightarrow> substitution \\<Rightarrow> bool\" where\n  \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> \\<longleftrightarrow> \n       C\\<^sub>1 \\<noteq> {} \\<and> C\\<^sub>2 \\<noteq> {} \\<and> L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}\n     \\<and> vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 = {} \n     \\<and> L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and> L\\<^sub>2 \\<subseteq> C\\<^sub>2 \n     \\<and> mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\""], ["", "definition mresolution :: \"   fterm clause \\<Rightarrow> fterm clause \n                          \\<Rightarrow> fterm literal set \\<Rightarrow> fterm literal set \n                          \\<Rightarrow> substitution \\<Rightarrow> fterm clause\" where\n  \"mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> = ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)- (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)) \\<union> ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) - (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>))\""], ["", "definition resolution :: \"   fterm clause \\<Rightarrow> fterm clause \n                          \\<Rightarrow> fterm literal set \\<Rightarrow> fterm literal set \n                          \\<Rightarrow> substitution \\<Rightarrow> fterm clause\" where\n  \"resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> = ((C\\<^sub>1 - L\\<^sub>1) \\<union> (C\\<^sub>2 - L\\<^sub>2)) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["", "inductive mresolution_step :: \"fterm clause set \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  mresolution_rule:\n    \"C\\<^sub>1 \\<in> Cs \\<Longrightarrow> C\\<^sub>2 \\<in> Cs \\<Longrightarrow> applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> \\<Longrightarrow> \n       mresolution_step Cs (Cs \\<union> {mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>})\"\n| standardize_apart:\n    \"C \\<in> Cs \\<Longrightarrow> var_renaming_of C C' \\<Longrightarrow> mresolution_step Cs (Cs \\<union> {C'})\""], ["", "inductive resolution_step :: \"fterm clause set \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  resolution_rule: \n    \"C\\<^sub>1 \\<in> Cs \\<Longrightarrow> C\\<^sub>2 \\<in> Cs \\<Longrightarrow> applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> \\<Longrightarrow> \n       resolution_step Cs (Cs \\<union> {resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>})\"\n| standardize_apart: (* renaming *)\n    \"C \\<in> Cs \\<Longrightarrow> var_renaming_of C C' \\<Longrightarrow> resolution_step Cs (Cs \\<union> {C'})\""], ["", "definition mresolution_deriv :: \"fterm clause set \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"mresolution_deriv = rtranclp mresolution_step\""], ["", "definition resolution_deriv :: \"fterm clause set \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"resolution_deriv = rtranclp resolution_step\""], ["", "section \\<open>Soundness\\<close>"], ["", "definition evalsub :: \"'u var_denot \\<Rightarrow> 'u fun_denot \\<Rightarrow> substitution \\<Rightarrow> 'u var_denot\" where\n  \"evalsub E F \\<sigma> = eval\\<^sub>t E F \\<circ> \\<sigma>\""], ["", "lemma substitutiont: \"eval\\<^sub>t E F (t \\<cdot>\\<^sub>t \\<sigma>) = eval\\<^sub>t (evalsub E F \\<sigma>) F t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E F (t \\<cdot>\\<^sub>t \\<sigma>) =\n    eval\\<^sub>t (evalsub E F \\<sigma>) F t", "apply (induction t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t E F (x2aa \\<cdot>\\<^sub>t \\<sigma>) =\n           eval\\<^sub>t (evalsub E F \\<sigma>) F x2aa) \\<Longrightarrow>\n       eval\\<^sub>t E F (Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>) =\n       eval\\<^sub>t (evalsub E F \\<sigma>) F (Fun x1 x2a)\n 2. \\<And>x.\n       eval\\<^sub>t E F (\\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>) =\n       eval\\<^sub>t (evalsub E F \\<sigma>) F (\\<epsilon> x)", "unfolding evalsub_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t E F (x2aa \\<cdot>\\<^sub>t \\<sigma>) =\n           eval\\<^sub>t (eval\\<^sub>t E F \\<circ> \\<sigma>) F\n            x2aa) \\<Longrightarrow>\n       eval\\<^sub>t E F (Fun x1 x2a \\<cdot>\\<^sub>t \\<sigma>) =\n       eval\\<^sub>t (eval\\<^sub>t E F \\<circ> \\<sigma>) F (Fun x1 x2a)\n 2. \\<And>x.\n       eval\\<^sub>t E F (\\<epsilon> x \\<cdot>\\<^sub>t \\<sigma>) =\n       eval\\<^sub>t (eval\\<^sub>t E F \\<circ> \\<sigma>) F (\\<epsilon> x)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t E F (x2aa \\<cdot>\\<^sub>t \\<sigma>) =\n           eval\\<^sub>t (\\<lambda>a. eval\\<^sub>t E F (\\<sigma> a)) F\n            x2aa) \\<Longrightarrow>\n       F x1\n        (map (eval\\<^sub>t E F \\<circ>\n              (\\<lambda>t. t \\<cdot>\\<^sub>t \\<sigma>))\n          x2a) =\n       F x1\n        (eval\\<^sub>t\\<^sub>s (\\<lambda>a. eval\\<^sub>t E F (\\<sigma> a)) F\n          x2a)", "apply (metis (mono_tags, lifting) comp_apply map_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma substitutionts: \"eval\\<^sub>t\\<^sub>s E F (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>) = eval\\<^sub>t\\<^sub>s (evalsub E F \\<sigma>) F ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E F (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>) =\n    eval\\<^sub>t\\<^sub>s (evalsub E F \\<sigma>) F ts", "using substitutiont"], ["proof (prove)\nusing this:\n  eval\\<^sub>t ?E ?F (?t \\<cdot>\\<^sub>t ?\\<sigma>) =\n  eval\\<^sub>t (evalsub ?E ?F ?\\<sigma>) ?F ?t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E F (ts \\<cdot>\\<^sub>t\\<^sub>s \\<sigma>) =\n    eval\\<^sub>t\\<^sub>s (evalsub E F \\<sigma>) F ts", "by auto"], ["", "lemma substitution: \"eval\\<^sub>l E F G (l \\<cdot>\\<^sub>l \\<sigma>) \\<longleftrightarrow> eval\\<^sub>l (evalsub E F \\<sigma>) F G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G (l \\<cdot>\\<^sub>l \\<sigma>) =\n    eval\\<^sub>l (evalsub E F \\<sigma>) F G l", "apply (induction l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Neg x1 x2)", "using substitutionts"], ["proof (prove)\nusing this:\n  eval\\<^sub>t\\<^sub>s ?E ?F (?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>) =\n  eval\\<^sub>t\\<^sub>s (evalsub ?E ?F ?\\<sigma>) ?F ?ts\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Pos x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Neg x1 x2)", "apply (metis eval\\<^sub>l.simps(1) subl.simps(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Neg x1 x2)", "using substitutionts"], ["proof (prove)\nusing this:\n  eval\\<^sub>t\\<^sub>s ?E ?F (?ts \\<cdot>\\<^sub>t\\<^sub>s ?\\<sigma>) =\n  eval\\<^sub>t\\<^sub>s (evalsub ?E ?F ?\\<sigma>) ?F ?ts\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E F G (Neg x1 x2 \\<cdot>\\<^sub>l \\<sigma>) =\n       eval\\<^sub>l (evalsub E F \\<sigma>) F G (Neg x1 x2)", "apply (metis eval\\<^sub>l.simps(2) subl.simps(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subst_sound:\n assumes asm: \"eval\\<^sub>c F G C\"\n shows \"eval\\<^sub>c F G (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "unfolding eval\\<^sub>c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E.\n       Bex (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) (eval\\<^sub>l E F G)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) (eval\\<^sub>l E F G)", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) (eval\\<^sub>l E F G)", "from asm"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C", "have \"\\<forall>E'. \\<exists>l \\<in> C. eval\\<^sub>l E' F G l\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. \\<forall>E'. \\<exists>l\\<in>C. eval\\<^sub>l E' F G l", "using eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n  eval\\<^sub>c ?F ?G ?C =\n  (\\<forall>E. \\<exists>l\\<in>?C. eval\\<^sub>l E ?F ?G l)\n\ngoal (1 subgoal):\n 1. \\<forall>E'. \\<exists>l\\<in>C. eval\\<^sub>l E' F G l", "by blast"], ["proof (state)\nthis:\n  \\<forall>E'. \\<exists>l\\<in>C. eval\\<^sub>l E' F G l\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) (eval\\<^sub>l E F G)", "then"], ["proof (chain)\npicking this:\n  \\<forall>E'. \\<exists>l\\<in>C. eval\\<^sub>l E' F G l", "have \"\\<exists>l \\<in> C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l\""], ["proof (prove)\nusing this:\n  \\<forall>E'. \\<exists>l\\<in>C. eval\\<^sub>l E' F G l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex (C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) (eval\\<^sub>l E F G)", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l", "show \"\\<exists>l \\<in> C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>. eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>. eval\\<^sub>l E F G l", "using substitution"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l (evalsub E F \\<sigma>) F G l\n  eval\\<^sub>l ?E ?F ?G (?l \\<cdot>\\<^sub>l ?\\<sigma>) =\n  eval\\<^sub>l (evalsub ?E ?F ?\\<sigma>) ?F ?G ?l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>. eval\\<^sub>l E F G l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>. eval\\<^sub>l E F G l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simple_resolution_sound:\n  assumes C\\<^sub>1sat:  \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes C\\<^sub>2sat:  \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes l\\<^sub>1inc\\<^sub>1: \"l\\<^sub>1 \\<in> C\\<^sub>1\"\n  assumes l\\<^sub>2inc\\<^sub>2: \"l\\<^sub>2 \\<in> C\\<^sub>2\"\n  assumes comp: \"l\\<^sub>1\\<^sup>c = l\\<^sub>2\"\n  shows \"eval\\<^sub>c F G ((C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))", "have \"\\<forall>E. \\<exists>l \\<in> (((C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}))). eval\\<^sub>l E F G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E.\n       \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                      (C\\<^sub>2 - {l\\<^sub>2}).\n          eval\\<^sub>l E F G l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                      (C\\<^sub>2 - {l\\<^sub>2}).\n          eval\\<^sub>l E F G l", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                      (C\\<^sub>2 - {l\\<^sub>2}).\n          eval\\<^sub>l E F G l", "have \"eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2", "using comp"], ["proof (prove)\nusing this:\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2", "by (cases l\\<^sub>1) auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                      (C\\<^sub>2 - {l\\<^sub>2}).\n          eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2", "show \"\\<exists>l \\<in> (((C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}))). eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  eval\\<^sub>l E F G l\\<^sub>1 \\<or> eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l\n 2. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "assume \"eval\\<^sub>l E F G l\\<^sub>1\""], ["proof (state)\nthis:\n  eval\\<^sub>l E F G l\\<^sub>1\n\ngoal (2 subgoals):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l\n 2. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E F G l\\<^sub>1", "have \"\\<not>eval\\<^sub>l E F G l\\<^sub>2\""], ["proof (prove)\nusing this:\n  eval\\<^sub>l E F G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>l E F G l\\<^sub>2", "using comp"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E F G l\\<^sub>1\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>l E F G l\\<^sub>2", "by (cases l\\<^sub>1) auto"], ["proof (state)\nthis:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (2 subgoals):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l\n 2. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>2", "have \"\\<exists>l\\<^sub>2'\\<in> C\\<^sub>2. l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'\""], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n       l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'", "using l\\<^sub>2inc\\<^sub>2 C\\<^sub>2sat"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>2\n  l\\<^sub>2 \\<in> C\\<^sub>2\n  eval\\<^sub>c F G C\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n       l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>2\n  l\\<^sub>2 \\<in> C\\<^sub>2\n  \\<forall>E. Bex C\\<^sub>2 (eval\\<^sub>l E F G)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n       l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n     l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'\n\ngoal (2 subgoals):\n 1. eval\\<^sub>l E F G l\\<^sub>1 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l\n 2. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n     l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'", "show \"\\<exists>l\\<in>(C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}). eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<^sub>2'\\<in>C\\<^sub>2.\n     l\\<^sub>2' \\<noteq> l\\<^sub>2 \\<and> eval\\<^sub>l E F G l\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}).\n     eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "assume \"eval\\<^sub>l E F G l\\<^sub>2\""], ["proof (state)\nthis:\n  eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "(* Symmetric *)"], ["proof (state)\nthis:\n  eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E F G l\\<^sub>2", "have \"\\<not>eval\\<^sub>l E F G l\\<^sub>1\""], ["proof (prove)\nusing this:\n  eval\\<^sub>l E F G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>l E F G l\\<^sub>1", "using comp"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E F G l\\<^sub>2\n  l\\<^sub>1\\<^sup>c = l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>l E F G l\\<^sub>1", "by (cases l\\<^sub>1) auto"], ["proof (state)\nthis:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>1", "have \"\\<exists>l\\<^sub>1'\\<in> C\\<^sub>1. l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'\""], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n       l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'", "using l\\<^sub>1inc\\<^sub>1 C\\<^sub>1sat"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>1\n  l\\<^sub>1 \\<in> C\\<^sub>1\n  eval\\<^sub>c F G C\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n       l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>l E F G l\\<^sub>1\n  l\\<^sub>1 \\<in> C\\<^sub>1\n  \\<forall>E. Bex C\\<^sub>1 (eval\\<^sub>l E F G)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n       l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n     l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E F G l\\<^sub>2 \\<Longrightarrow>\n    \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n     l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'", "show \"\\<exists>l\\<in>(C\\<^sub>1 - {l\\<^sub>1}) \\<union> (C\\<^sub>2 - {l\\<^sub>2}). eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<^sub>1'\\<in>C\\<^sub>1.\n     l\\<^sub>1' \\<noteq> l\\<^sub>1 \\<and> eval\\<^sub>l E F G l\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                   (C\\<^sub>2 - {l\\<^sub>2}).\n       eval\\<^sub>l E F G l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}).\n     eval\\<^sub>l E F G l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}).\n     eval\\<^sub>l E F G l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>E.\n     \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                    (C\\<^sub>2 - {l\\<^sub>2}).\n        eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))", "then"], ["proof (chain)\npicking this:\n  \\<forall>E.\n     \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                    (C\\<^sub>2 - {l\\<^sub>2}).\n        eval\\<^sub>l E F G l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>E.\n     \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                    (C\\<^sub>2 - {l\\<^sub>2}).\n        eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<forall>E.\n     \\<exists>l\\<in>C\\<^sub>1 - {l\\<^sub>1} \\<union>\n                    (C\\<^sub>2 - {l\\<^sub>2}).\n        eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<forall>E.\n       Bex (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))\n        (eval\\<^sub>l E F G)", "by simp"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (C\\<^sub>1 - {l\\<^sub>1} \\<union> (C\\<^sub>2 - {l\\<^sub>2}))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mresolution_sound:\n  assumes sat\\<^sub>1: \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes sat\\<^sub>2: \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\"\n  shows \"eval\\<^sub>c F G (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from sat\\<^sub>1"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C\\<^sub>1", "have sat\\<^sub>1\\<sigma>: \"eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "using subst_sound"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from sat\\<^sub>2"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C\\<^sub>2", "have sat\\<^sub>2\\<sigma>: \"eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "using subst_sound"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>2\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from appl"], ["proof (chain)\npicking this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "obtain l\\<^sub>1 where l\\<^sub>1_p: \"l\\<^sub>1 \\<in> L\\<^sub>1\""], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>1.\n        l\\<^sub>1 \\<in> L\\<^sub>1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>1.\n        l\\<^sub>1 \\<in> L\\<^sub>1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from l\\<^sub>1_p appl"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have \"l\\<^sub>1 \\<in> C\\<^sub>1\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<in> C\\<^sub>1", "unfolding applicable_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<in> C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<in> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> C\\<^sub>1", "have inc\\<^sub>1\\<sigma>: \"l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n    \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from l\\<^sub>1_p"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> L\\<^sub>1", "have unified\\<^sub>1: \"l\\<^sub>1 \\<in> (L\\<^sub>1 \\<union> (L\\<^sub>2\\<^sup>C))\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from l\\<^sub>1_p appl"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have l\\<^sub>1\\<sigma>isl\\<^sub>1\\<sigma>: \"{l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} = L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n    L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "unfolding mgu\\<^sub>l\\<^sub>s_def unifier\\<^sub>l\\<^sub>s_def applicable_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  (\\<exists>l'.\n      \\<forall>l\\<in>L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C.\n         l \\<cdot>\\<^sub>l \\<sigma> = l') \\<and>\n  (\\<forall>u.\n      (\\<exists>l'.\n          \\<forall>l\\<in>L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C.\n             l \\<cdot>\\<^sub>l u = l') \\<longrightarrow>\n      (\\<exists>i. u = \\<sigma> \\<cdot> i))\n\ngoal (1 subgoal):\n 1. {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n    L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from appl"], ["proof (chain)\npicking this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "obtain l\\<^sub>2 where l\\<^sub>2_p: \"l\\<^sub>2 \\<in> L\\<^sub>2\""], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>2.\n        l\\<^sub>2 \\<in> L\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>2.\n        l\\<^sub>2 \\<in> L\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2 \\<in> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from l\\<^sub>2_p appl"], ["proof (chain)\npicking this:\n  l\\<^sub>2 \\<in> L\\<^sub>2\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have \"l\\<^sub>2 \\<in> C\\<^sub>2\""], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> L\\<^sub>2\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 \\<in> C\\<^sub>2", "unfolding applicable_def"], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> L\\<^sub>2\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 \\<in> C\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2 \\<in> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>2 \\<in> C\\<^sub>2", "have inc\\<^sub>2\\<sigma>: \"l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma> \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n    \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from l\\<^sub>2_p"], ["proof (chain)\npicking this:\n  l\\<^sub>2 \\<in> L\\<^sub>2", "have unified\\<^sub>2: \"l\\<^sub>2\\<^sup>c \\<in> (L\\<^sub>1 \\<union> (L\\<^sub>2\\<^sup>C))\""], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2\\<^sup>c \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from unified\\<^sub>1 unified\\<^sub>2 appl"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  l\\<^sub>2\\<^sup>c \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have \"l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> = (l\\<^sub>2\\<^sup>c) \\<cdot>\\<^sub>l \\<sigma>\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  l\\<^sub>2\\<^sup>c \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n    l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>", "unfolding mgu\\<^sub>l\\<^sub>s_def unifier\\<^sub>l\\<^sub>s_def applicable_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  l\\<^sub>2\\<^sup>c \\<in> L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  (\\<exists>l'.\n      \\<forall>l\\<in>L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C.\n         l \\<cdot>\\<^sub>l \\<sigma> = l') \\<and>\n  (\\<forall>u.\n      (\\<exists>l'.\n          \\<forall>l\\<in>L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C.\n             l \\<cdot>\\<^sub>l u = l') \\<longrightarrow>\n      (\\<exists>i. u = \\<sigma> \\<cdot> i))\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n    l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n  l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n  l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>", "have comp: \"(l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c = l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n  l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n    l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>", "using comp_sub comp_swap"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma> =\n  l\\<^sub>2\\<^sup>c \\<cdot>\\<^sub>l \\<sigma>\n  ?l\\<^sup>c \\<cdot>\\<^sub>l ?\\<sigma> =\n  (?l \\<cdot>\\<^sub>l ?\\<sigma>)\\<^sup>c\n  (?l\\<^sub>1\\<^sup>c = ?l\\<^sub>2) = (?l\\<^sub>1 = ?l\\<^sub>2\\<^sup>c)\n\ngoal (1 subgoal):\n 1. (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n    l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>", "by auto"], ["proof (state)\nthis:\n  (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from appl"], ["proof (chain)\npicking this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have \"unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)\""], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)", "using unifier_sub2"], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma>\n   (?L\\<^sub>1 \\<union> ?L\\<^sub>2) \\<Longrightarrow>\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L\\<^sub>1 \\<and>\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L\\<^sub>2\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)", "unfolding mgu\\<^sub>l\\<^sub>s_def applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and>\n  L\\<^sub>2 \\<noteq> {} \\<and>\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {} \\<and>\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  unifier\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C) \\<and>\n  (\\<forall>u.\n      unifier\\<^sub>l\\<^sub>s u\n       (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C) \\<longrightarrow>\n      (\\<exists>i. u = \\<sigma> \\<cdot> i))\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma>\n   (?L\\<^sub>1 \\<union> ?L\\<^sub>2) \\<Longrightarrow>\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L\\<^sub>1 \\<and>\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L\\<^sub>2\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)", "by blast"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)", "have \"unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from this l\\<^sub>2_p"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2\n  l\\<^sub>2 \\<in> L\\<^sub>2", "have l\\<^sub>2\\<sigma>isl\\<^sub>2\\<sigma>: \"{l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} = L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma> L\\<^sub>2\n  l\\<^sub>2 \\<in> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n    L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "unfolding unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>l'. \\<forall>l\\<in>L\\<^sub>2. l \\<cdot>\\<^sub>l \\<sigma> = l'\n  l\\<^sub>2 \\<in> L\\<^sub>2\n\ngoal (1 subgoal):\n 1. {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n    L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from sat\\<^sub>1\\<sigma> sat\\<^sub>2\\<sigma> inc\\<^sub>1\\<sigma> inc\\<^sub>2\\<sigma> comp"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>", "have \"eval\\<^sub>c F G ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) - {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union> ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) - {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n      {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n      ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n       {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))", "using simple_resolution_sound[of F G \"C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\" \"C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\" \"l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\" \" l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\"]"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n  \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n  l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n  \\<lbrakk>eval\\<^sub>c F G (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>);\n   eval\\<^sub>c F G (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>);\n   l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>\n   \\<in> C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>;\n   l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\n   \\<in> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>;\n   (l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>)\\<^sup>c =\n   l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c F G\n                     ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n                      {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n                      ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n                       {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n      {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n      ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n       {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n    {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n    ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n     {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from this l\\<^sub>1\\<sigma>isl\\<^sub>1\\<sigma> l\\<^sub>2\\<sigma>isl\\<^sub>2\\<sigma>"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G\n   ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n    {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n    ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n     {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\n  {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n    {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n    ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n     {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\n  {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "unfolding mresolution_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n    {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} \\<union>\n    ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n     {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>}))\n  {l\\<^sub>1 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n  {l\\<^sub>2 \\<cdot>\\<^sub>l \\<sigma>} =\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     ((C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n      (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<union>\n      ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n       (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma resolution_superset: \"mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma> \\<subseteq> resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n    \\<subseteq> resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "unfolding mresolution_def resolution_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n    (L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<union>\n    ((C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) -\n     (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>))\n    \\<subseteq> C\\<^sub>1 - L\\<^sub>1 \\<union>\n                (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n                \\<sigma>", "by auto"], ["", "lemma superset_sound:\n  assumes sup: \"C \\<subseteq> C'\"\n  assumes sat: \"eval\\<^sub>c F G C\"\n  shows \"eval\\<^sub>c F G C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "have \"\\<forall>E. \\<exists>l \\<in> C'. eval\\<^sub>l E F G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "from sat"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C", "have \"\\<forall>E. \\<exists>l \\<in> C. eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<forall>E. Bex C (eval\\<^sub>l E F G)\n\ngoal (1 subgoal):\n 1. \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l", "by -"], ["proof (state)\nthis:\n  \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<And>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l", "have \"\\<exists>l \\<in> C . eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E F G l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<And>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>C. eval\\<^sub>l E F G l", "show \"\\<exists>l \\<in> C'. eval\\<^sub>l E F G l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "using sup"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n  C \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C'. eval\\<^sub>l E F G l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "then"], ["proof (chain)\npicking this:\n  \\<forall>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l", "show \"eval\\<^sub>c F G C'\""], ["proof (prove)\nusing this:\n  \\<forall>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<forall>E. \\<exists>l\\<in>C'. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<forall>E. Bex C' (eval\\<^sub>l E F G)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem resolution_sound:\n  assumes sat\\<^sub>1: \"eval\\<^sub>c F G C\\<^sub>1\"\n  assumes sat\\<^sub>2: \"eval\\<^sub>c F G C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\"\n  shows \"eval\\<^sub>c F G (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "from sat\\<^sub>1 sat\\<^sub>2 appl"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C\\<^sub>1\n  eval\\<^sub>c F G C\\<^sub>2\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>", "have \"eval\\<^sub>c F G (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1\n  eval\\<^sub>c F G C\\<^sub>2\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "using mresolution_sound"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1\n  eval\\<^sub>c F G C\\<^sub>2\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>\n  \\<lbrakk>eval\\<^sub>c ?F ?G ?C\\<^sub>1; eval\\<^sub>c ?F ?G ?C\\<^sub>2;\n   applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c ?F ?G\n                     (mresolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1\n                       ?L\\<^sub>2 ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "using superset_sound resolution_superset"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\n  \\<lbrakk>?C \\<subseteq> ?C'; eval\\<^sub>c ?F ?G ?C\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c ?F ?G ?C'\n  mresolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma>\n  \\<subseteq> resolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2\n               ?\\<sigma>\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)", "by metis"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mstep_sound: \n  assumes \"mresolution_step Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "using assms"], ["proof (prove)\nusing this:\n  mresolution_step Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "proof (induction rule: mresolution_step.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "case (mresolution_rule C\\<^sub>1 Cs C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs", "have \"eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "have \"eval\\<^sub>c F G (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "using mresolution_sound mresolution_rule"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n  \\<lbrakk>eval\\<^sub>c ?F ?G ?C\\<^sub>1; eval\\<^sub>c ?F ?G ?C\\<^sub>2;\n   applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c ?F ?G\n                     (mresolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1\n                       ?L\\<^sub>2 ?\\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {mresolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G\n     (Cs \\<union>\n      {mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})", "using mresolution_rule"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G\n     (Cs \\<union>\n      {mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. Ball\n     (Cs \\<union>\n      {mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})\n     (eval\\<^sub>c F G)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G\n   (Cs \\<union>\n    {mresolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "case (standardize_apart C Cs C')"], ["proof (state)\nthis:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs", "have \"eval\\<^sub>c F G C\""], ["proof (prove)\nusing this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C", "have \"eval\\<^sub>c F G C'\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "using subst_sound standardize_apart"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "unfolding var_renaming_of_def instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  C \\<in> Cs\n  (\\<exists>\\<sigma>. C = C' \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<and>\n  (\\<exists>\\<sigma>. C' = C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "by metis"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C'\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C'", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "using standardize_apart"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n  C \\<in> Cs\n  var_renaming_of C C'\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. Ball (Cs \\<union> {C'}) (eval\\<^sub>c F G)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem step_sound: \n  assumes \"resolution_step Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "using assms"], ["proof (prove)\nusing this:\n  resolution_step Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "proof (induction rule: resolution_step.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "case (resolution_rule C\\<^sub>1 Cs C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs", "have \"eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2", "have \"eval\\<^sub>c F G (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "using resolution_sound resolution_rule"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\\<^sub>1 \\<and> eval\\<^sub>c F G C\\<^sub>2\n  \\<lbrakk>eval\\<^sub>c ?F ?G ?C\\<^sub>1; eval\\<^sub>c ?F ?G ?C\\<^sub>2;\n   applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c ?F ?G\n                     (resolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2\n                       ?\\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G\n     (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<And>C\\<^sub>1 Cs C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>.\n       \\<lbrakk>C\\<^sub>1 \\<in> Cs; C\\<^sub>2 \\<in> Cs;\n        applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<sigma>;\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G\n                          (Cs \\<union>\n                           {resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1\n                             L\\<^sub>2 \\<sigma>})\n 2. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G\n     (Cs \\<union>\n      {resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})", "using resolution_rule"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G\n     (Cs \\<union>\n      {resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G\n   (resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>)\n  C\\<^sub>1 \\<in> Cs\n  C\\<^sub>2 \\<in> Cs\n  applicable C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. Ball\n     (Cs \\<union>\n      {resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})\n     (eval\\<^sub>c F G)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G\n   (Cs \\<union>\n    {resolution C\\<^sub>1 C\\<^sub>2 l\\<^sub>1 l\\<^sub>2 \\<sigma>})\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "case (standardize_apart C Cs C')"], ["proof (state)\nthis:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs", "have \"eval\\<^sub>c F G C\""], ["proof (prove)\nusing this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C \\<in> Cs\n  var_renaming_of C C'\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C", "have \"eval\\<^sub>c F G C'\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "using subst_sound standardize_apart"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "unfolding var_renaming_of_def instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C\n  eval\\<^sub>c ?F ?G ?C \\<Longrightarrow>\n  eval\\<^sub>c ?F ?G (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  C \\<in> Cs\n  (\\<exists>\\<sigma>. C = C' \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<and>\n  (\\<exists>\\<sigma>. C' = C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G C'", "by metis"], ["proof (state)\nthis:\n  eval\\<^sub>c F G C'\n\ngoal (1 subgoal):\n 1. \\<And>C Cs C'.\n       \\<lbrakk>C \\<in> Cs; var_renaming_of C C';\n        eval\\<^sub>c\\<^sub>s F G Cs\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c F G C'", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "using standardize_apart"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n  C \\<in> Cs\n  var_renaming_of C C'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c F G C'\n  C \\<in> Cs\n  var_renaming_of C C'\n  Ball Cs (eval\\<^sub>c F G)\n\ngoal (1 subgoal):\n 1. Ball (Cs \\<union> {C'}) (eval\\<^sub>c F G)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G (Cs \\<union> {C'})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mderivation_sound: \n  assumes \"mresolution_deriv Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"eval\\<^sub>c\\<^sub>s F G Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "using assms"], ["proof (prove)\nusing this:\n  mresolution_deriv Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "unfolding mresolution_deriv_def"], ["proof (prove)\nusing this:\n  mresolution_step\\<^sup>*\\<^sup>* Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "proof (induction rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n       eval\\<^sub>c\\<^sub>s F G a\n 2. \\<And>a b c.\n       \\<lbrakk>mresolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        mresolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "case rtrancl_refl"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n       eval\\<^sub>c\\<^sub>s F G a\n 2. \\<And>a b c.\n       \\<lbrakk>mresolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        mresolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c\\<^sub>s F G a_", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G a_", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>mresolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        mresolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>mresolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        mresolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "case (rtrancl_into_rtrancl Cs\\<^sub>1 Cs\\<^sub>2 Cs\\<^sub>3)"], ["proof (state)\nthis:\n  mresolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  mresolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>mresolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        mresolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "then"], ["proof (chain)\npicking this:\n  mresolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  mresolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  mresolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  mresolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3", "using mstep_sound"], ["proof (prove)\nusing this:\n  mresolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  mresolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n  \\<lbrakk>mresolution_step ?Cs ?Cs';\n   eval\\<^sub>c\\<^sub>s ?F ?G ?Cs\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c\\<^sub>s ?F ?G ?Cs'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem derivation_sound: \n  assumes \"resolution_deriv Cs Cs'\"\n  assumes \"eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows\"eval\\<^sub>c\\<^sub>s F G Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "using assms"], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "unfolding resolution_deriv_def"], ["proof (prove)\nusing this:\n  resolution_step\\<^sup>*\\<^sup>* Cs Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs'", "proof (induction rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n       eval\\<^sub>c\\<^sub>s F G a\n 2. \\<And>a b c.\n       \\<lbrakk>resolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        resolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "case rtrancl_refl"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n       eval\\<^sub>c\\<^sub>s F G a\n 2. \\<And>a b c.\n       \\<lbrakk>resolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        resolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c\\<^sub>s F G a_", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G a_", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G a_\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>resolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        resolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>resolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        resolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "case (rtrancl_into_rtrancl Cs\\<^sub>1 Cs\\<^sub>2 Cs\\<^sub>3)"], ["proof (state)\nthis:\n  resolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  resolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>resolution_step\\<^sup>*\\<^sup>* a b;\n        eval\\<^sub>c\\<^sub>s F G a \\<Longrightarrow>\n        eval\\<^sub>c\\<^sub>s F G b;\n        resolution_step b c; eval\\<^sub>c\\<^sub>s F G a\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>c\\<^sub>s F G c", "then"], ["proof (chain)\npicking this:\n  resolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  resolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1", "show ?case"], ["proof (prove)\nusing this:\n  resolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  resolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3", "using step_sound"], ["proof (prove)\nusing this:\n  resolution_step\\<^sup>*\\<^sup>* Cs\\<^sub>1 Cs\\<^sub>2\n  resolution_step Cs\\<^sub>2 Cs\\<^sub>3\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1 \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>2\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>1\n  \\<lbrakk>resolution_step ?Cs ?Cs'; eval\\<^sub>c\\<^sub>s ?F ?G ?Cs\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c\\<^sub>s ?F ?G ?Cs'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem derivation_sound_refute: \n  assumes deriv: \"resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\"\n  shows \"\\<not>eval\\<^sub>c\\<^sub>s F G Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "from deriv"], ["proof (chain)\npicking this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow> eval\\<^sub>c\\<^sub>s F G Cs'\""], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow>\n    eval\\<^sub>c\\<^sub>s F G Cs'", "using derivation_sound"], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n  \\<lbrakk>resolution_deriv ?Cs ?Cs';\n   eval\\<^sub>c\\<^sub>s ?F ?G ?Cs\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c\\<^sub>s ?F ?G ?Cs'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow>\n    eval\\<^sub>c\\<^sub>s F G Cs'", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow> eval\\<^sub>c\\<^sub>s F G Cs'\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "moreover"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow> eval\\<^sub>c\\<^sub>s F G Cs'\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "from deriv"], ["proof (chain)\npicking this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\""], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. Ball Cs' (eval\\<^sub>c F G) \\<longrightarrow> eval\\<^sub>c F G {}", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "moreover"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}", "have \"eval\\<^sub>c F G {} \\<longrightarrow> False\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c F G {} \\<longrightarrow> False", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow>\n  (\\<forall>E. Bex {} (eval\\<^sub>l E F G))\n\ngoal (1 subgoal):\n 1. (\\<forall>E. Bex {} (eval\\<^sub>l E F G)) \\<longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c F G {} \\<longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "ultimately"], ["proof (chain)\npicking this:\n  eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow> eval\\<^sub>c\\<^sub>s F G Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\n  eval\\<^sub>c F G {} \\<longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>c\\<^sub>s F G Cs \\<longrightarrow> eval\\<^sub>c\\<^sub>s F G Cs'\n  eval\\<^sub>c\\<^sub>s F G Cs' \\<longrightarrow> eval\\<^sub>c F G {}\n  eval\\<^sub>c F G {} \\<longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "by auto"], ["proof (state)\nthis:\n  \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Herbrand Interpretations\\<close>"], ["", "text \\<open>@{const HFun} is the Herbrand function denotation in which terms are mapped to themselves.\\<close>"], ["", "term HFun"], ["", "lemma eval_ground\\<^sub>t: \n  assumes \"ground\\<^sub>t t\"\n  shows \"(eval\\<^sub>t E HFun t) = hterm_of_fterm t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun t = hterm_of_fterm t", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>t t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun t = hterm_of_fterm t", "by (induction t) auto"], ["", "lemma eval_ground\\<^sub>t\\<^sub>s: \n  assumes \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"(eval\\<^sub>t\\<^sub>s E HFun ts) = hterms_of_fterms ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E HFun ts = hterms_of_fterms ts", "unfolding hterms_of_fterms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E HFun ts = map hterm_of_fterm ts", "using assms eval_ground\\<^sub>t"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  ground\\<^sub>t ?t \\<Longrightarrow>\n  eval\\<^sub>t ?E HFun ?t = hterm_of_fterm ?t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E HFun ts = map hterm_of_fterm ts", "by (induction ts) auto"], ["", "lemma eval\\<^sub>l_ground\\<^sub>t\\<^sub>s:\n  assumes asm: \"ground\\<^sub>t\\<^sub>s ts\"\n  shows \"eval\\<^sub>l E HFun G (Pos P ts) \\<longleftrightarrow> G P (hterms_of_fterms ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "have \"eval\\<^sub>l E HFun G (Pos P ts) = G P (eval\\<^sub>t\\<^sub>s E HFun ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (eval\\<^sub>t\\<^sub>s E HFun ts)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos P ts) = G P (eval\\<^sub>t\\<^sub>s E HFun ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "also"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos P ts) = G P (eval\\<^sub>t\\<^sub>s E HFun ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "have \"... = G P (hterms_of_fterms ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G P (eval\\<^sub>t\\<^sub>s E HFun ts) = G P (hterms_of_fterms ts)", "using asm eval_ground\\<^sub>t\\<^sub>s"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s ts\n  ground\\<^sub>t\\<^sub>s ?ts \\<Longrightarrow>\n  eval\\<^sub>t\\<^sub>s ?E HFun ?ts = hterms_of_fterms ?ts\n\ngoal (1 subgoal):\n 1. G P (eval\\<^sub>t\\<^sub>s E HFun ts) = G P (hterms_of_fterms ts)", "by simp"], ["proof (state)\nthis:\n  G P (eval\\<^sub>t\\<^sub>s E HFun ts) = G P (hterms_of_fterms ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "finally"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos P ts) = G P (hterms_of_fterms ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Partial Interpretations\\<close>"], ["", "type_synonym partial_pred_denot = \"bool list\""], ["", "definition falsifies\\<^sub>l :: \"partial_pred_denot \\<Rightarrow> fterm literal \\<Rightarrow> bool\" where\n  \"falsifies\\<^sub>l G l \\<longleftrightarrow>\n        ground\\<^sub>l l\n     \\<and> (let i = nat_of_fatom (get_atom l) in\n          i < length G \\<and> G ! i = (\\<not>sign l)\n        )\""], ["", "text \\<open>A ground clause is falsified if it is actually ground and all its literals are falsified.\\<close>"], ["", "abbreviation falsifies\\<^sub>g :: \"partial_pred_denot \\<Rightarrow> fterm clause \\<Rightarrow> bool\" where\n  \"falsifies\\<^sub>g G C \\<equiv> ground\\<^sub>l\\<^sub>s C \\<and> (\\<forall>l \\<in> C. falsifies\\<^sub>l G l)\""], ["", "abbreviation falsifies\\<^sub>c :: \"partial_pred_denot \\<Rightarrow> fterm clause \\<Rightarrow> bool\" where\n  \"falsifies\\<^sub>c G C \\<equiv> (\\<exists>C'. instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g G C')\""], ["", "abbreviation falsifies\\<^sub>c\\<^sub>s :: \"partial_pred_denot \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"falsifies\\<^sub>c\\<^sub>s G Cs \\<equiv> (\\<exists>C \\<in> Cs. falsifies\\<^sub>c G C)\""], ["", "abbreviation extend :: \"(nat \\<Rightarrow> partial_pred_denot) \\<Rightarrow> hterm pred_denot\" where\n  \"extend f P ts \\<equiv> (\n     let n = nat_of_hatom (P, ts) in\n       f (Suc n) ! n\n     )\""], ["", "fun sub_of_denot :: \"hterm var_denot \\<Rightarrow> substitution\" where\n  \"sub_of_denot E = fterm_of_hterm \\<circ> E\""], ["", "lemma ground_sub_of_denott: \"ground\\<^sub>t (t \\<cdot>\\<^sub>t (sub_of_denot E))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>t (t \\<cdot>\\<^sub>t sub_of_denot E)", "by (induction t) (auto simp add: ground_fterm_of_hterm)"], ["", "lemma ground_sub_of_denotts: \"ground\\<^sub>t\\<^sub>s (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)", "using ground_sub_of_denott"], ["proof (prove)\nusing this:\n  ground\\<^sub>t (?t \\<cdot>\\<^sub>t sub_of_denot ?E)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)", "by simp"], ["", "lemma ground_sub_of_denotl: \"ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "have \"ground\\<^sub>t\\<^sub>s (subs (get_terms l) (sub_of_denot E))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s\n     (get_terms l \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)", "using ground_sub_of_denotts"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s (?ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot ?E)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s\n     (get_terms l \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>t\\<^sub>s\n   (get_terms l \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>t\\<^sub>s\n   (get_terms l \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)", "show ?thesis"], ["proof (prove)\nusing this:\n  ground\\<^sub>t\\<^sub>s\n   (get_terms l \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "by (cases l)  auto"], ["proof (state)\nthis:\n  ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_of_denot_equivx: \"eval\\<^sub>t E HFun (sub_of_denot E x) = E x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "have \"ground\\<^sub>t (sub_of_denot E x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>t (sub_of_denot E x)", "using ground_fterm_of_hterm"], ["proof (prove)\nusing this:\n  ground\\<^sub>t (fterm_of_hterm ?t)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t (sub_of_denot E x)", "by simp"], ["proof (state)\nthis:\n  ground\\<^sub>t (sub_of_denot E x)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>t (sub_of_denot E x)", "have \"eval\\<^sub>t E HFun (sub_of_denot E x) = hterm_of_fterm (sub_of_denot E x)\""], ["proof (prove)\nusing this:\n  ground\\<^sub>t (sub_of_denot E x)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) =\n    hterm_of_fterm (sub_of_denot E x)", "using eval_ground\\<^sub>t(1)"], ["proof (prove)\nusing this:\n  ground\\<^sub>t (sub_of_denot E x)\n  ground\\<^sub>t ?t \\<Longrightarrow>\n  eval\\<^sub>t ?E HFun ?t = hterm_of_fterm ?t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) =\n    hterm_of_fterm (sub_of_denot E x)", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t E HFun (sub_of_denot E x) = hterm_of_fterm (sub_of_denot E x)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "also"], ["proof (state)\nthis:\n  eval\\<^sub>t E HFun (sub_of_denot E x) = hterm_of_fterm (sub_of_denot E x)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "have \"... = hterm_of_fterm (fterm_of_hterm (E x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hterm_of_fterm (sub_of_denot E x) =\n    hterm_of_fterm (fterm_of_hterm (E x))", "by auto"], ["proof (state)\nthis:\n  hterm_of_fterm (sub_of_denot E x) = hterm_of_fterm (fterm_of_hterm (E x))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "also"], ["proof (state)\nthis:\n  hterm_of_fterm (sub_of_denot E x) = hterm_of_fterm (fterm_of_hterm (E x))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "have \"... = E x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hterm_of_fterm (fterm_of_hterm (E x)) = E x", "by auto"], ["proof (state)\nthis:\n  hterm_of_fterm (fterm_of_hterm (E x)) = E x\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "finally"], ["proof (chain)\npicking this:\n  eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>t E HFun (sub_of_denot E x) = E x\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (sub_of_denot E x) = E x", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t E HFun (sub_of_denot E x) = E x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_of_denot_equivt:\n    \"eval\\<^sub>t E HFun (t \\<cdot>\\<^sub>t (sub_of_denot E)) = eval\\<^sub>t E HFun t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (t \\<cdot>\\<^sub>t sub_of_denot E) =\n    eval\\<^sub>t E HFun t", "using sub_of_denot_equivx"], ["proof (prove)\nusing this:\n  eval\\<^sub>t ?E HFun (sub_of_denot ?E ?x) = ?E ?x\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t E HFun (t \\<cdot>\\<^sub>t sub_of_denot E) =\n    eval\\<^sub>t E HFun t", "by (induction t) auto"], ["", "lemma sub_of_denot_equivts: \"eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s (sub_of_denot E)) = eval\\<^sub>t\\<^sub>s E HFun ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E HFun\n     (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E) =\n    eval\\<^sub>t\\<^sub>s E HFun ts", "using sub_of_denot_equivt"], ["proof (prove)\nusing this:\n  eval\\<^sub>t ?E HFun (?t \\<cdot>\\<^sub>t sub_of_denot ?E) =\n  eval\\<^sub>t ?E HFun ?t\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t\\<^sub>s E HFun\n     (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E) =\n    eval\\<^sub>t\\<^sub>s E HFun ts", "by simp"], ["", "lemma sub_of_denot_equivl: \"eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<longleftrightarrow> eval\\<^sub>l E HFun G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) =\n    eval\\<^sub>l E HFun G l", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "case (Pos p ts)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \"eval\\<^sub>l E HFun G ((Pos p ts) \\<cdot>\\<^sub>l sub_of_denot E) \\<longleftrightarrow> G p (eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s (sub_of_denot E)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n    G p (eval\\<^sub>t\\<^sub>s E HFun\n          (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  G p (eval\\<^sub>t\\<^sub>s E HFun\n        (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "also"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  G p (eval\\<^sub>t\\<^sub>s E HFun\n        (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \" ... \\<longleftrightarrow> G p (eval\\<^sub>t\\<^sub>s E HFun ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G p (eval\\<^sub>t\\<^sub>s E HFun\n          (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)) =\n    G p (eval\\<^sub>t\\<^sub>s E HFun ts)", "using sub_of_denot_equivts[of E ts]"], ["proof (prove)\nusing this:\n  eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E) =\n  eval\\<^sub>t\\<^sub>s E HFun ts\n\ngoal (1 subgoal):\n 1. G p (eval\\<^sub>t\\<^sub>s E HFun\n          (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)) =\n    G p (eval\\<^sub>t\\<^sub>s E HFun ts)", "by metis"], ["proof (state)\nthis:\n  G p (eval\\<^sub>t\\<^sub>s E HFun\n        (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)) =\n  G p (eval\\<^sub>t\\<^sub>s E HFun ts)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "also"], ["proof (state)\nthis:\n  G p (eval\\<^sub>t\\<^sub>s E HFun\n        (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)) =\n  G p (eval\\<^sub>t\\<^sub>s E HFun ts)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \" ... \\<longleftrightarrow> eval\\<^sub>l E HFun G (Pos p ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G p (eval\\<^sub>t\\<^sub>s E HFun ts) = eval\\<^sub>l E HFun G (Pos p ts)", "by simp"], ["proof (state)\nthis:\n  G p (eval\\<^sub>t\\<^sub>s E HFun ts) = eval\\<^sub>l E HFun G (Pos p ts)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Pos x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Pos x1 x2)\n 2. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "finally"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Pos p ts)", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Pos p ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n    eval\\<^sub>l E HFun G (Pos p ts)", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Pos p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Pos p ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "case (Neg p ts)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \"eval\\<^sub>l E HFun G ((Neg p ts) \\<cdot>\\<^sub>l sub_of_denot E) \\<longleftrightarrow> \\<not>G p (eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s (sub_of_denot E)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n    (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                  (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "also"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E)))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \" ... \\<longleftrightarrow> \\<not>G p (eval\\<^sub>t\\<^sub>s E HFun ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                  (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))) =\n    (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts))", "using sub_of_denot_equivts[of E ts]"], ["proof (prove)\nusing this:\n  eval\\<^sub>t\\<^sub>s E HFun (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E) =\n  eval\\<^sub>t\\<^sub>s E HFun ts\n\ngoal (1 subgoal):\n 1. (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                  (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))) =\n    (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts))", "by metis"], ["proof (state)\nthis:\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))) =\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "also"], ["proof (state)\nthis:\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun\n                (ts \\<cdot>\\<^sub>t\\<^sub>s sub_of_denot E))) =\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "have \" ... = eval\\<^sub>l E HFun G (Neg p ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts)) =\n    eval\\<^sub>l E HFun G (Neg p ts)", "by simp"], ["proof (state)\nthis:\n  (\\<not> G p (eval\\<^sub>t\\<^sub>s E HFun ts)) =\n  eval\\<^sub>l E HFun G (Neg p ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       eval\\<^sub>l E HFun G (Neg x1 x2 \\<cdot>\\<^sub>l sub_of_denot E) =\n       eval\\<^sub>l E HFun G (Neg x1 x2)", "finally"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Neg p ts)", "show ?case"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Neg p ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n    eval\\<^sub>l E HFun G (Neg p ts)", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun G (Neg p ts \\<cdot>\\<^sub>l sub_of_denot E) =\n  eval\\<^sub>l E HFun G (Neg p ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Under an Herbrand interpretation, an environment is equivalent to a substitution.\\<close>"], ["", "lemma sub_of_denot_equiv_ground': \n  \"eval\\<^sub>l E HFun G l = eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<and> ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G l =\n    eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<and>\n    ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "using sub_of_denot_equivl ground_sub_of_denotl"], ["proof (prove)\nusing this:\n  eval\\<^sub>l ?E HFun ?G (?l \\<cdot>\\<^sub>l sub_of_denot ?E) =\n  eval\\<^sub>l ?E HFun ?G ?l\n  ground\\<^sub>l (?l \\<cdot>\\<^sub>l sub_of_denot ?E)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun G l =\n    eval\\<^sub>l E HFun G (l \\<cdot>\\<^sub>l sub_of_denot E) \\<and>\n    ground\\<^sub>l (l \\<cdot>\\<^sub>l sub_of_denot E)", "by auto"], ["", "text \\<open>Under an Herbrand interpretation, an environment is similar to a substitution - also for partial interpretations.\\<close>"], ["", "lemma partial_equiv_subst:\n  assumes \"falsifies\\<^sub>c G (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>)\"\n  shows \"falsifies\\<^sub>c G C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>)", "obtain C' where C'_p: \"instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and> falsifies\\<^sub>g G C'\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        instance_of\\<^sub>l\\<^sub>s C'\n         (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n        falsifies\\<^sub>g G C' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n  falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n  falsifies\\<^sub>g G C'", "have \"instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n  falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  (\\<exists>\\<sigma>.\n      C' =\n      C \\<cdot>\\<^sub>l\\<^sub>s \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n      \\<sigma>) \\<and>\n  falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C \\<cdot>\\<^sub>l\\<^sub>s \\<tau> = C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C", "have \"instance_of\\<^sub>l\\<^sub>s C' C\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C' C", "using C'_p instance_of\\<^sub>l\\<^sub>s_trans"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) C\n  instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n  falsifies\\<^sub>g G C'\n  \\<lbrakk>instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>2;\n   instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>2 ?L\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C' C", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C' C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C' C", "show ?thesis"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "using C'_p"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C\n  instance_of\\<^sub>l\\<^sub>s C' (C \\<cdot>\\<^sub>l\\<^sub>s \\<tau>) \\<and>\n  falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c G C\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Under an Herbrand interpretation, an environment is equivalent to a substitution.\\<close>"], ["", "lemma sub_of_denot_equiv_ground:\n  \"((\\<exists>l \\<in> C. eval\\<^sub>l E HFun G l) \\<longleftrightarrow> (\\<exists>l \\<in> C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E. eval\\<^sub>l E HFun G l))\n           \\<and> ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l\\<in>C. eval\\<^sub>l E HFun G l) =\n    (\\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n        eval\\<^sub>l E HFun G l) \\<and>\n    ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "using sub_of_denot_equiv_ground'"], ["proof (prove)\nusing this:\n  eval\\<^sub>l ?E HFun ?G ?l =\n  eval\\<^sub>l ?E HFun ?G (?l \\<cdot>\\<^sub>l sub_of_denot ?E) \\<and>\n  ground\\<^sub>l (?l \\<cdot>\\<^sub>l sub_of_denot ?E)\n\ngoal (1 subgoal):\n 1. (\\<exists>l\\<in>C. eval\\<^sub>l E HFun G l) =\n    (\\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n        eval\\<^sub>l E HFun G l) \\<and>\n    ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "by auto"], ["", "lemma std\\<^sub>1_falsifies: \"falsifies\\<^sub>c G C\\<^sub>1 \\<longleftrightarrow> falsifies\\<^sub>c G (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C\\<^sub>1 =\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>1 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "assume asm: \"falsifies\\<^sub>c G C\\<^sub>1\""], ["proof (state)\nthis:\n  falsifies\\<^sub>c G C\\<^sub>1\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>1 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G C\\<^sub>1", "obtain Cg where \"instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1  \\<and> falsifies\\<^sub>g G Cg\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G C\\<^sub>1\n\ngoal (1 subgoal):\n 1. (\\<And>Cg.\n        instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and>\n        falsifies\\<^sub>g G Cg \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>1 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>1 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg", "have \"instance_of\\<^sub>l\\<^sub>s Cg (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "using std_apart_instance_of\\<^sub>l\\<^sub>s1 instance_of\\<^sub>l\\<^sub>s_trans"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s ?C\\<^sub>1\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  \\<lbrakk>instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>2;\n   instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>2 ?L\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by blast"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>1 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "show \"falsifies\\<^sub>c G (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "assume asm: \"falsifies\\<^sub>c G (std\\<^sub>1 C\\<^sub>1)\""], ["proof (state)\nthis:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have inst: \"instance_of\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1) C\\<^sub>1\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     C\\<^sub>1", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>C'.\n     (\\<exists>\\<sigma>.\n         C' =\n         C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n         (\\<lambda>x. \\<epsilon> (''1'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n         \\<sigma>) \\<and>\n     falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)) =\n       C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "from asm"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "obtain Cg where \"instance_of\\<^sub>l\\<^sub>s Cg (std\\<^sub>1 C\\<^sub>1)  \\<and> falsifies\\<^sub>g G Cg\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. (\\<And>Cg.\n        instance_of\\<^sub>l\\<^sub>s Cg\n         (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n        falsifies\\<^sub>g G Cg \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg", "have \"instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1", "using inst instance_of\\<^sub>l\\<^sub>s_trans"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1\n  \\<lbrakk>instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>2;\n   instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>2 ?L\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1", "by blast"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>1", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1", "show \"falsifies\\<^sub>c G C\\<^sub>1\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c G C\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std\\<^sub>2_falsifies: \"falsifies\\<^sub>c G C\\<^sub>2 \\<longleftrightarrow> falsifies\\<^sub>c G (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C\\<^sub>2 =\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>2 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "assume asm: \"falsifies\\<^sub>c G C\\<^sub>2\""], ["proof (state)\nthis:\n  falsifies\\<^sub>c G C\\<^sub>2\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>2 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G C\\<^sub>2", "obtain Cg where \"instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2  \\<and> falsifies\\<^sub>g G Cg\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G C\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>Cg.\n        instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and>\n        falsifies\\<^sub>g G Cg \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>2 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>2 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg", "have \"instance_of\\<^sub>l\\<^sub>s Cg (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using std_apart_instance_of\\<^sub>l\\<^sub>s2 instance_of\\<^sub>l\\<^sub>s_trans"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s ?C2.0\n   (?C2.0 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  \\<lbrakk>instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>2;\n   instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>2 ?L\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by blast"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (2 subgoals):\n 1. falsifies\\<^sub>c G C\\<^sub>2 \\<Longrightarrow>\n    falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n 2. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "show \"falsifies\\<^sub>c G (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2 \\<and> falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "assume asm: \"falsifies\\<^sub>c G (std\\<^sub>2 C\\<^sub>2)\""], ["proof (state)\nthis:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have inst: \"instance_of\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2) C\\<^sub>2\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     C\\<^sub>2", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<exists>C'.\n     (\\<exists>\\<sigma>.\n         C' =\n         C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n         (\\<lambda>x. \\<epsilon> (''2'' @ x)) \\<cdot>\\<^sub>l\\<^sub>s\n         \\<sigma>) \\<and>\n     falsifies\\<^sub>g G C'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x)) =\n       C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "from asm"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "obtain Cg where \"instance_of\\<^sub>l\\<^sub>s Cg (std\\<^sub>2 C\\<^sub>2)  \\<and> falsifies\\<^sub>g G Cg\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c G\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. (\\<And>Cg.\n        instance_of\\<^sub>l\\<^sub>s Cg\n         (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n        falsifies\\<^sub>g G Cg \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg", "have \"instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2", "using inst instance_of\\<^sub>l\\<^sub>s_trans"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2\n  \\<lbrakk>instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>2;\n   instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>2 ?L\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> instance_of\\<^sub>l\\<^sub>s ?L\\<^sub>1 ?L\\<^sub>3\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<Longrightarrow>\n    falsifies\\<^sub>c G C\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2", "show \"falsifies\\<^sub>c G C\\<^sub>2\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s Cg\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g G Cg\n  instance_of\\<^sub>l\\<^sub>s Cg C\\<^sub>2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c G C\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c G C\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std\\<^sub>1_renames: \"var_renaming_of C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "using std_apart_instance_of\\<^sub>l\\<^sub>s1"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s ?C\\<^sub>1\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have \"instance_of\\<^sub>l\\<^sub>s (std\\<^sub>1 C\\<^sub>1) C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     C\\<^sub>1", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)) =\n       C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1", "show \"var_renaming_of C\\<^sub>1 (std\\<^sub>1 C\\<^sub>1)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "unfolding var_renaming_of_def"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   C\\<^sub>1\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>1\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n    instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     C\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  var_renaming_of C\\<^sub>1\n   (C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std\\<^sub>2_renames: \"var_renaming_of C\\<^sub>2 (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>2 (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using std_apart_instance_of\\<^sub>l\\<^sub>s2"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s ?C2.0\n   (?C2.0 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have \"instance_of\\<^sub>l\\<^sub>s (std\\<^sub>2 C\\<^sub>2) C\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     C\\<^sub>2", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x)) =\n       C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2", "show \"var_renaming_of C\\<^sub>2 (std\\<^sub>2 C\\<^sub>2)\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2\n\ngoal (1 subgoal):\n 1. var_renaming_of C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "unfolding var_renaming_of_def"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  instance_of\\<^sub>l\\<^sub>s\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   C\\<^sub>2\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s C\\<^sub>2\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n    instance_of\\<^sub>l\\<^sub>s\n     (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     C\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  var_renaming_of C\\<^sub>2\n   (C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Semantic Trees\\<close>"], ["", "abbreviation closed_branch :: \"partial_pred_denot \\<Rightarrow> tree \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"closed_branch G T Cs \\<equiv> branch G T \\<and> falsifies\\<^sub>c\\<^sub>s G Cs\""], ["", "abbreviation(input) open_branch :: \"partial_pred_denot \\<Rightarrow> tree \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"open_branch G T Cs \\<equiv> branch G T \\<and> \\<not>falsifies\\<^sub>c\\<^sub>s G Cs\""], ["", "definition closed_tree :: \"tree \\<Rightarrow> fterm clause set \\<Rightarrow> bool\" where\n  \"closed_tree T Cs \\<longleftrightarrow> anybranch T (\\<lambda>b. closed_branch b T Cs) \n                  \\<and> anyinternal T (\\<lambda>p. \\<not>falsifies\\<^sub>c\\<^sub>s p Cs)\""], ["", "section \\<open>Herbrand's Theorem\\<close>"], ["", "lemma maximum:\n  assumes asm: \"finite C\"\n  shows \"\\<exists>n :: nat. \\<forall>l \\<in> C. f l \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. \\<forall>l\\<in>C. f l \\<le> n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>C. f l \\<le> ?n", "from asm"], ["proof (chain)\npicking this:\n  finite C", "show \"\\<forall>l\\<in>C. f l \\<le> (Max (f ` C))\""], ["proof (prove)\nusing this:\n  finite C\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>C. f l \\<le> Max (f ` C)", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>C. f l \\<le> Max (f ` C)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extend_preserves_model: (* only for ground *)\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\" \n  assumes C_ground: \"ground\\<^sub>l\\<^sub>s C\"\n  assumes C_sat: \"\\<not>falsifies\\<^sub>c (f (Suc n)) C\"\n  assumes n_max: \"\\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\"\n  shows \"eval\\<^sub>c HFun (extend f) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "let ?F = \"HFun\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "let ?G = \"extend f\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "from C_sat"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C", "have \"\\<forall>C'. (\\<not>instance_of\\<^sub>l\\<^sub>s C' C \\<or> \\<not>falsifies\\<^sub>g (f (Suc n)) C')\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C\n\ngoal (1 subgoal):\n 1. \\<forall>C'.\n       \\<not> instance_of\\<^sub>l\\<^sub>s C' C \\<or>\n       \\<not> falsifies\\<^sub>g (f (Suc n)) C'", "by auto"], ["proof (state)\nthis:\n  \\<forall>C'.\n     \\<not> instance_of\\<^sub>l\\<^sub>s C' C \\<or>\n     \\<not> falsifies\\<^sub>g (f (Suc n)) C'\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  \\<forall>C'.\n     \\<not> instance_of\\<^sub>l\\<^sub>s C' C \\<or>\n     \\<not> falsifies\\<^sub>g (f (Suc n)) C'", "have \"\\<not>falsifies\\<^sub>g (f (Suc n)) C\""], ["proof (prove)\nusing this:\n  \\<forall>C'.\n     \\<not> instance_of\\<^sub>l\\<^sub>s C' C \\<or>\n     \\<not> falsifies\\<^sub>g (f (Suc n)) C'\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g (f (Suc n)) C", "using instance_of\\<^sub>l\\<^sub>s_self"], ["proof (prove)\nusing this:\n  \\<forall>C'.\n     \\<not> instance_of\\<^sub>l\\<^sub>s C' C \\<or>\n     \\<not> falsifies\\<^sub>g (f (Suc n)) C'\n  instance_of\\<^sub>l\\<^sub>s ?L ?L\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g (f (Suc n)) C", "by auto"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>g (f (Suc n)) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>g (f (Suc n)) C", "obtain l where l_p: \"l\\<in>C \\<and> \\<not>falsifies\\<^sub>l (f (Suc n)) l\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>g (f (Suc n)) C\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        l \\<in> C \\<and>\n        \\<not> falsifies\\<^sub>l (f (Suc n)) l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using C_ground"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>g (f (Suc n)) C\n  ground\\<^sub>l\\<^sub>s C\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        l \\<in> C \\<and>\n        \\<not> falsifies\\<^sub>l (f (Suc n)) l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "let ?i = \"nat_of_fatom (get_atom l)\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "from l_p"], ["proof (chain)\npicking this:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l", "have i_n: \"?i \\<le> n\""], ["proof (prove)\nusing this:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) \\<le> n", "using n_max"], ["proof (prove)\nusing this:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) \\<le> n", "by auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l) \\<le> n", "have j_n: \"?i < length (f (Suc n))\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) < length (f (Suc n))", "using f_infpath infpath_length[of f]"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l) \\<le> n\n  wf_infpath f\n  wf_infpath f \\<Longrightarrow> length (f ?n) = ?n\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) < length (f (Suc n))", "by auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "have \"eval\\<^sub>l E HFun (extend f) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun (extend f) l", "proof (cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "case (Pos P ts)"], ["proof (state)\nthis:\n  l = Pos P ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "from Pos l_p C_ground"], ["proof (chain)\npicking this:\n  l = Pos P ts\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  ground\\<^sub>l\\<^sub>s C", "have ts_ground: \"ground\\<^sub>t\\<^sub>s ts\""], ["proof (prove)\nusing this:\n  l = Pos P ts\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  ground\\<^sub>l\\<^sub>s C\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s ts", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>t\\<^sub>s ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "have \"\\<not>falsifies\\<^sub>l (f (Suc n)) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>l (f (Suc n)) l", "using l_p"], ["proof (prove)\nusing this:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>l (f (Suc n)) l", "by auto"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l", "have \"f (Suc n) ! ?i = True\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = True", "using j_n Pos ts_ground empty_subts[of ts]"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  l = Pos P ts\n  ground\\<^sub>t\\<^sub>s ts\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = True", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<not> (ground\\<^sub>l l \\<and>\n          (let i = nat_of_fatom (get_atom l)\n           in i < length (f (Suc n)) \\<and>\n              f (Suc n) ! i = (\\<not> sign l)))\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  l = Pos P ts\n  ground\\<^sub>t\\<^sub>s ts\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = True", "by auto"], ["proof (state)\nthis:\n  f (Suc n) ! nat_of_fatom (get_atom l) = True\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "moreover"], ["proof (state)\nthis:\n  f (Suc n) ! nat_of_fatom (get_atom l) = True\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "have \"f (Suc ?i) ! ?i = f (Suc n) ! ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n    f (Suc n) ! nat_of_fatom (get_atom l)", "using f_infpath i_n j_n infpath_length[of f] ith_in_extension[of f]"], ["proof (prove)\nusing this:\n  wf_infpath f\n  nat_of_fatom (get_atom l) \\<le> n\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  wf_infpath f \\<Longrightarrow> length (f ?n) = ?n\n  \\<lbrakk>wf_infpath f; ?i < length (f ?n\\<^sub>1);\n   ?n\\<^sub>1 \\<le> ?n\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> f ?n\\<^sub>1 ! ?i = f ?n\\<^sub>2 ! ?i\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n    f (Suc n) ! nat_of_fatom (get_atom l)", "by simp"], ["proof (state)\nthis:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "ultimately"], ["proof (chain)\npicking this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = True\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)", "have \"f (Suc ?i) ! ?i = True\""], ["proof (prove)\nusing this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = True\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True", "using Pos"], ["proof (prove)\nusing this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = True\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n  l = Pos P ts\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True", "by auto"], ["proof (state)\nthis:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True", "have \"?G P (hterms_of_fterms ts)\""], ["proof (prove)\nusing this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True\n\ngoal (1 subgoal):\n 1. extend f P (hterms_of_fterms ts)", "using Pos"], ["proof (prove)\nusing this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = True\n  l = Pos P ts\n\ngoal (1 subgoal):\n 1. extend f P (hterms_of_fterms ts)", "by (simp add: nat_of_fatom_def)"], ["proof (state)\nthis:\n  extend f P (hterms_of_fterms ts)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       l = Pos x11 x12 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l\n 2. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  extend f P (hterms_of_fterms ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  extend f P (hterms_of_fterms ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun (extend f) l", "using eval\\<^sub>l_ground\\<^sub>t\\<^sub>s[of ts _ ?G P] ts_ground Pos"], ["proof (prove)\nusing this:\n  extend f P (hterms_of_fterms ts)\n  ground\\<^sub>t\\<^sub>s ts \\<Longrightarrow>\n  eval\\<^sub>l ?E HFun (extend f) (Pos P ts) =\n  extend f P (hterms_of_fterms ts)\n  ground\\<^sub>t\\<^sub>s ts\n  l = Pos P ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun (extend f) l", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "case (Neg P ts)"], ["proof (state)\nthis:\n  l = Neg P ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "(* Symmetric *)"], ["proof (state)\nthis:\n  l = Neg P ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "from Neg l_p C_ground"], ["proof (chain)\npicking this:\n  l = Neg P ts\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  ground\\<^sub>l\\<^sub>s C", "have ts_ground: \"ground\\<^sub>t\\<^sub>s ts\""], ["proof (prove)\nusing this:\n  l = Neg P ts\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  ground\\<^sub>l\\<^sub>s C\n\ngoal (1 subgoal):\n 1. ground\\<^sub>t\\<^sub>s ts", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>t\\<^sub>s ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "have \"\\<not>falsifies\\<^sub>l (f (Suc n)) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>l (f (Suc n)) l", "using l_p"], ["proof (prove)\nusing this:\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>l (f (Suc n)) l", "by auto"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l", "have \"f (Suc n) ! ?i = False\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = False", "using j_n Neg ts_ground empty_subts[of ts]"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>l (f (Suc n)) l\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  l = Neg P ts\n  ground\\<^sub>t\\<^sub>s ts\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = False", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  \\<not> (ground\\<^sub>l l \\<and>\n          (let i = nat_of_fatom (get_atom l)\n           in i < length (f (Suc n)) \\<and>\n              f (Suc n) ! i = (\\<not> sign l)))\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  l = Neg P ts\n  ground\\<^sub>t\\<^sub>s ts\n  ts \\<cdot>\\<^sub>t\\<^sub>s \\<epsilon> = ts\n\ngoal (1 subgoal):\n 1. f (Suc n) ! nat_of_fatom (get_atom l) = False", "by auto"], ["proof (state)\nthis:\n  f (Suc n) ! nat_of_fatom (get_atom l) = False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "moreover"], ["proof (state)\nthis:\n  f (Suc n) ! nat_of_fatom (get_atom l) = False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "have \"f (Suc ?i) ! ?i = f (Suc n) ! ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n    f (Suc n) ! nat_of_fatom (get_atom l)", "using f_infpath i_n j_n infpath_length[of f] ith_in_extension[of f]"], ["proof (prove)\nusing this:\n  wf_infpath f\n  nat_of_fatom (get_atom l) \\<le> n\n  nat_of_fatom (get_atom l) < length (f (Suc n))\n  wf_infpath f \\<Longrightarrow> length (f ?n) = ?n\n  \\<lbrakk>wf_infpath f; ?i < length (f ?n\\<^sub>1);\n   ?n\\<^sub>1 \\<le> ?n\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> f ?n\\<^sub>1 ! ?i = f ?n\\<^sub>2 ! ?i\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n    f (Suc n) ! nat_of_fatom (get_atom l)", "by simp"], ["proof (state)\nthis:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "ultimately"], ["proof (chain)\npicking this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = False\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)", "have \"f (Suc ?i) ! ?i = False\""], ["proof (prove)\nusing this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = False\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False", "using Neg"], ["proof (prove)\nusing this:\n  f (Suc n) ! nat_of_fatom (get_atom l) = False\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) =\n  f (Suc n) ! nat_of_fatom (get_atom l)\n  l = Neg P ts\n\ngoal (1 subgoal):\n 1. f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False", "by auto"], ["proof (state)\nthis:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False", "have \"\\<not>?G P (hterms_of_fterms ts)\""], ["proof (prove)\nusing this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False\n\ngoal (1 subgoal):\n 1. \\<not> extend f P (hterms_of_fterms ts)", "using Neg"], ["proof (prove)\nusing this:\n  f (Suc (nat_of_fatom (get_atom l))) ! nat_of_fatom (get_atom l) = False\n  l = Neg P ts\n\ngoal (1 subgoal):\n 1. \\<not> extend f P (hterms_of_fterms ts)", "by (simp add: nat_of_fatom_def)"], ["proof (state)\nthis:\n  \\<not> extend f P (hterms_of_fterms ts)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       l = Neg x21 x22 \\<Longrightarrow> eval\\<^sub>l E HFun (extend f) l", "then"], ["proof (chain)\npicking this:\n  \\<not> extend f P (hterms_of_fterms ts)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> extend f P (hterms_of_fterms ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun (extend f) l", "using Neg eval\\<^sub>l_ground\\<^sub>t\\<^sub>s[of ts _ ?G P] ts_ground"], ["proof (prove)\nusing this:\n  \\<not> extend f P (hterms_of_fterms ts)\n  l = Neg P ts\n  ground\\<^sub>t\\<^sub>s ts \\<Longrightarrow>\n  eval\\<^sub>l ?E HFun (extend f) (Pos P ts) =\n  extend f P (hterms_of_fterms ts)\n  ground\\<^sub>t\\<^sub>s ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l E HFun (extend f) l", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun (extend f) l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>l E HFun (extend f) l", "have \"\\<exists>l \\<in> C. eval\\<^sub>l E HFun (extend f) l\""], ["proof (prove)\nusing this:\n  eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l", "using l_p"], ["proof (prove)\nusing this:\n  eval\\<^sub>l E HFun (extend f) l\n  l \\<in> C \\<and> \\<not> falsifies\\<^sub>l (f (Suc n)) l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "}"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l ?E2 HFun (extend f) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>C. eval\\<^sub>l ?E2 HFun (extend f) l", "have \"eval\\<^sub>c HFun (extend f) C\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l ?E2 HFun (extend f) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C. eval\\<^sub>l ?E2 HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<forall>E. Bex C (eval\\<^sub>l E HFun (extend f))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c HFun (extend f) C", "show ?thesis"], ["proof (prove)\nusing this:\n  eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "using instance_of\\<^sub>l\\<^sub>s_self"], ["proof (prove)\nusing this:\n  eval\\<^sub>c HFun (extend f) C\n  instance_of\\<^sub>l\\<^sub>s ?L ?L\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c HFun (extend f) C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extend_preserves_model2: (* only for ground *)\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\" \n  assumes C_ground: \"ground\\<^sub>l\\<^sub>s C\"\n  assumes fin_c: \"finite C\"\n  assumes model_C: \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) C\"\n  shows C_false: \"eval\\<^sub>c HFun (extend f) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "proof -\n  \\<comment> \\<open>Since C is finite, C has a largest index of a literal.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "obtain n where largest: \"\\<forall>l \\<in> C. nat_of_fatom (get_atom l) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<forall>l\\<in>C.\n           nat_of_fatom (get_atom l) \\<le> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fin_c maximum[of C \"\\<lambda>l. nat_of_fatom (get_atom l)\"]"], ["proof (prove)\nusing this:\n  finite C\n  finite C \\<Longrightarrow>\n  \\<exists>n. \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<forall>l\\<in>C.\n           nat_of_fatom (get_atom l) \\<le> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "moreover"], ["proof (state)\nthis:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n", "have \"\\<not>falsifies\\<^sub>c (f (Suc n)) C\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c (f (Suc n)) C", "using model_C"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c (f (Suc n)) C", "by auto"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "using model_C f_infpath C_ground extend_preserves_model[of f C n ]"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\n  \\<not> falsifies\\<^sub>c (f (Suc n)) C\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n  wf_infpath f\n  ground\\<^sub>l\\<^sub>s C\n  \\<lbrakk>wf_infpath f; ground\\<^sub>l\\<^sub>s C;\n   \\<not> falsifies\\<^sub>c (f (Suc n)) C;\n   \\<forall>l\\<in>C. nat_of_fatom (get_atom l) \\<le> n\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "by blast"], ["proof (state)\nthis:\n  eval\\<^sub>c HFun (extend f) C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extend_infpath: \n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\"\n  assumes model_c: \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) C\"\n  assumes fin_c: \"finite C\"\n  shows \"eval\\<^sub>c HFun (extend f) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "unfolding eval\\<^sub>c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>E. Bex C (eval\\<^sub>l E HFun (extend f))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "let ?G = \"extend f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "let ?\\<sigma> = \"sub_of_denot E\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "from fin_c"], ["proof (chain)\npicking this:\n  finite C", "have fin_c\\<sigma>: \"finite (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\""], ["proof (prove)\nusing this:\n  finite C\n\ngoal (1 subgoal):\n 1. finite (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "by auto"], ["proof (state)\nthis:\n  finite (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "have groundc\\<sigma>: \"ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "using sub_of_denot_equiv_ground"], ["proof (prove)\nusing this:\n  (\\<exists>l\\<in>?C. eval\\<^sub>l ?E HFun ?G l) =\n  (\\<exists>l\\<in>?C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot ?E.\n      eval\\<^sub>l ?E HFun ?G l) \\<and>\n  ground\\<^sub>l\\<^sub>s (?C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot ?E)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "by auto\n\n  \\<comment> \\<open>Here starts the proof\\<close>\n  \\<comment> \\<open>We go from syntactic FO world to syntactic ground world:\\<close>"], ["proof (state)\nthis:\n  ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "from model_c"], ["proof (chain)\npicking this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C", "have \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) (C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<not> falsifies\\<^sub>c (f n)\n               (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "using partial_equiv_subst"], ["proof (prove)\nusing this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n  falsifies\\<^sub>c ?G\n   (?C \\<cdot>\\<^sub>l\\<^sub>s ?\\<tau>) \\<Longrightarrow>\n  falsifies\\<^sub>c ?G ?C\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       \\<not> falsifies\\<^sub>c (f n)\n               (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "by blast\n  \\<comment> \\<open>Then from syntactic ground world to semantic ground world:\\<close>"], ["proof (state)\nthis:\n  \\<forall>n.\n     \\<not> falsifies\\<^sub>c (f n)\n             (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     \\<not> falsifies\\<^sub>c (f n)\n             (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "have \"eval\\<^sub>c HFun ?G (C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<not> falsifies\\<^sub>c (f n)\n             (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "using groundc\\<sigma> f_infpath fin_c\\<sigma> extend_preserves_model2[of f \"C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\"]"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<not> falsifies\\<^sub>c (f n)\n             (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n  ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n  wf_infpath f\n  finite (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n  \\<lbrakk>wf_infpath f;\n   ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E);\n   finite (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E);\n   \\<forall>n.\n      \\<not> falsifies\\<^sub>c (f n)\n              (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c HFun (extend f)\n                     (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "by blast\n  \\<comment> \\<open>Then from semantic ground world to semantic FO world:\\<close>"], ["proof (state)\nthis:\n  eval\\<^sub>c HFun (extend f) (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "then"], ["proof (chain)\npicking this:\n  eval\\<^sub>c HFun (extend f) (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)", "have \"\\<forall>E. \\<exists>l \\<in> (C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>). eval\\<^sub>l E HFun ?G l\""], ["proof (prove)\nusing this:\n  eval\\<^sub>c HFun (extend f) (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<forall>Ea.\n       \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n          eval\\<^sub>l Ea HFun (extend f) l", "unfolding eval\\<^sub>c_def"], ["proof (prove)\nusing this:\n  \\<forall>Ea.\n     Bex (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n      (eval\\<^sub>l Ea HFun (extend f))\n\ngoal (1 subgoal):\n 1. \\<forall>Ea.\n       \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n          eval\\<^sub>l Ea HFun (extend f) l", "by auto"], ["proof (state)\nthis:\n  \\<forall>Ea.\n     \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n        eval\\<^sub>l Ea HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "then"], ["proof (chain)\npicking this:\n  \\<forall>Ea.\n     \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n        eval\\<^sub>l Ea HFun (extend f) l", "have \"\\<exists>l \\<in> (C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>). eval\\<^sub>l E HFun ?G l\""], ["proof (prove)\nusing this:\n  \\<forall>Ea.\n     \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n        eval\\<^sub>l Ea HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n       eval\\<^sub>l E HFun (extend f) l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n     eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<And>E. Bex C (eval\\<^sub>l E HFun (extend f))", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n     eval\\<^sub>l E HFun (extend f) l", "show \"\\<exists>l \\<in> C. eval\\<^sub>l E HFun ?G l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n     eval\\<^sub>l E HFun (extend f) l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l", "using sub_of_denot_equiv_ground[of C E \"extend f\"]"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n     eval\\<^sub>l E HFun (extend f) l\n  (\\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l) =\n  (\\<exists>l\\<in>C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E.\n      eval\\<^sub>l E HFun (extend f) l) \\<and>\n  ground\\<^sub>l\\<^sub>s (C \\<cdot>\\<^sub>l\\<^sub>s sub_of_denot E)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l E HFun (extend f) l\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If we have a infpath of partial models, then we have a model.\\<close>"], ["", "lemma infpath_model:\n  assumes f_infpath: \"wf_infpath (f :: nat \\<Rightarrow> partial_pred_denot)\"\n  assumes model_cs: \"\\<forall>n. \\<not>falsifies\\<^sub>c\\<^sub>s (f n) Cs\" \n  assumes fin_cs: \"finite Cs\"\n  assumes fin_c: \"\\<forall>C \\<in> Cs. finite C\"\n  shows \"eval\\<^sub>c\\<^sub>s HFun (extend f) Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s HFun (extend f) Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s HFun (extend f) Cs", "let ?F = \"HFun\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s HFun (extend f) Cs", "have \"\\<forall>C \\<in> Cs. eval\\<^sub>c ?F (extend f) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>Cs. eval\\<^sub>c HFun (extend f) C", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C. C \\<in> Cs \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C. C \\<in> Cs \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C", "assume asm: \"C \\<in> Cs\""], ["proof (state)\nthis:\n  C \\<in> Cs\n\ngoal (1 subgoal):\n 1. \\<And>C. C \\<in> Cs \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  C \\<in> Cs", "have \"\\<forall>n. \\<not>falsifies\\<^sub>c (f n) C\""], ["proof (prove)\nusing this:\n  C \\<in> Cs\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C", "using model_cs"], ["proof (prove)\nusing this:\n  C \\<in> Cs\n  \\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (f n) Cs\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C", "by auto"], ["proof (state)\nthis:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n\ngoal (1 subgoal):\n 1. \\<And>C. C \\<in> Cs \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C", "show \"eval\\<^sub>c ?F (extend f) C\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "using fin_c asm f_infpath extend_infpath[of f C]"], ["proof (prove)\nusing this:\n  \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C\n  \\<forall>C\\<in>Cs. finite C\n  C \\<in> Cs\n  wf_infpath f\n  \\<lbrakk>wf_infpath f; \\<forall>n. \\<not> falsifies\\<^sub>c (f n) C;\n   finite C\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c HFun (extend f) C", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c HFun (extend f) C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>C\\<in>Cs. eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s HFun (extend f) Cs", "then"], ["proof (chain)\npicking this:\n  \\<forall>C\\<in>Cs. eval\\<^sub>c HFun (extend f) C", "show \"eval\\<^sub>c\\<^sub>s ?F (extend f) Cs\""], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>Cs. eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s HFun (extend f) Cs", "unfolding eval\\<^sub>c\\<^sub>s_def"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>Cs. eval\\<^sub>c HFun (extend f) C\n\ngoal (1 subgoal):\n 1. Ball Cs (eval\\<^sub>c HFun (extend f))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>c\\<^sub>s HFun (extend f) Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "fun deeptree :: \"nat \\<Rightarrow> tree\" where\n  \"deeptree 0 = Leaf\"\n| \"deeptree (Suc n) = Branching (deeptree n) (deeptree n)\""], ["", "lemma branch_length: \n  assumes \"branch b (deeptree n)\"\n  shows \"length b = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length b = n", "using assms"], ["proof (prove)\nusing this:\n  branch b (deeptree n)\n\ngoal (1 subgoal):\n 1. length b = n", "proof (induction n arbitrary: b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b. branch b (deeptree 0) \\<Longrightarrow> length b = 0\n 2. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "case 0"], ["proof (state)\nthis:\n  branch b (deeptree 0)\n\ngoal (2 subgoals):\n 1. \\<And>b. branch b (deeptree 0) \\<Longrightarrow> length b = 0\n 2. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "then"], ["proof (chain)\npicking this:\n  branch b (deeptree 0)", "show ?case"], ["proof (prove)\nusing this:\n  branch b (deeptree 0)\n\ngoal (1 subgoal):\n 1. length b = 0", "using branch_inv_Leaf"], ["proof (prove)\nusing this:\n  branch b (deeptree 0)\n  branch ?b Leaf = (?b = [])\n\ngoal (1 subgoal):\n 1. length b = 0", "by auto"], ["proof (state)\nthis:\n  length b = 0\n\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  branch ?b (deeptree n) \\<Longrightarrow> length ?b = n\n  branch b (deeptree (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "then"], ["proof (chain)\npicking this:\n  branch ?b (deeptree n) \\<Longrightarrow> length ?b = n\n  branch b (deeptree (Suc n))", "have \"branch b (Branching (deeptree n) (deeptree n))\""], ["proof (prove)\nusing this:\n  branch ?b (deeptree n) \\<Longrightarrow> length ?b = n\n  branch b (deeptree (Suc n))\n\ngoal (1 subgoal):\n 1. branch b (Branching (deeptree n) (deeptree n))", "by auto"], ["proof (state)\nthis:\n  branch b (Branching (deeptree n) (deeptree n))\n\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "then"], ["proof (chain)\npicking this:\n  branch b (Branching (deeptree n) (deeptree n))", "obtain a b' where p: \"b = a#b'\\<and> branch b' (deeptree n)\""], ["proof (prove)\nusing this:\n  branch b (Branching (deeptree n) (deeptree n))\n\ngoal (1 subgoal):\n 1. (\\<And>a b'.\n        b = a # b' \\<and> branch b' (deeptree n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using branch_inv_Branching[of b]"], ["proof (prove)\nusing this:\n  branch b (Branching (deeptree n) (deeptree n))\n  branch b (Branching ?l ?r) =\n  (\\<exists>a b'.\n      b = a # b' \\<and>\n      (a \\<longrightarrow> branch b' ?l) \\<and>\n      (\\<not> a \\<longrightarrow> branch b' ?r))\n\ngoal (1 subgoal):\n 1. (\\<And>a b'.\n        b = a # b' \\<and> branch b' (deeptree n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b = a # b' \\<and> branch b' (deeptree n)\n\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "then"], ["proof (chain)\npicking this:\n  b = a # b' \\<and> branch b' (deeptree n)", "have \"length b' = n\""], ["proof (prove)\nusing this:\n  b = a # b' \\<and> branch b' (deeptree n)\n\ngoal (1 subgoal):\n 1. length b' = n", "using Suc"], ["proof (prove)\nusing this:\n  b = a # b' \\<and> branch b' (deeptree n)\n  branch ?b (deeptree n) \\<Longrightarrow> length ?b = n\n  branch b (deeptree (Suc n))\n\ngoal (1 subgoal):\n 1. length b' = n", "by auto"], ["proof (state)\nthis:\n  length b' = n\n\ngoal (1 subgoal):\n 1. \\<And>n b.\n       \\<lbrakk>\\<And>b.\n                   branch b (deeptree n) \\<Longrightarrow> length b = n;\n        branch b (deeptree (Suc n))\\<rbrakk>\n       \\<Longrightarrow> length b = Suc n", "then"], ["proof (chain)\npicking this:\n  length b' = n", "show ?case"], ["proof (prove)\nusing this:\n  length b' = n\n\ngoal (1 subgoal):\n 1. length b = Suc n", "using p"], ["proof (prove)\nusing this:\n  length b' = n\n  b = a # b' \\<and> branch b' (deeptree n)\n\ngoal (1 subgoal):\n 1. length b = Suc n", "by auto"], ["proof (state)\nthis:\n  length b = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinity:\n  assumes inj: \"\\<forall>n :: nat. undiago (diago n) = n\" \n  assumes all_tree: \"\\<forall>n :: nat. (diago n) \\<in> tree\"\n  shows \"\\<not>finite tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite tree", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite tree", "from inj all_tree"], ["proof (chain)\npicking this:\n  \\<forall>n. undiago (diago n) = n\n  \\<forall>n. diago n \\<in> tree", "have \"\\<forall>n. n = undiago (diago n) \\<and> (diago n) \\<in> tree\""], ["proof (prove)\nusing this:\n  \\<forall>n. undiago (diago n) = n\n  \\<forall>n. diago n \\<in> tree\n\ngoal (1 subgoal):\n 1. \\<forall>n. n = undiago (diago n) \\<and> diago n \\<in> tree", "by auto"], ["proof (state)\nthis:\n  \\<forall>n. n = undiago (diago n) \\<and> diago n \\<in> tree\n\ngoal (1 subgoal):\n 1. infinite tree", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. n = undiago (diago n) \\<and> diago n \\<in> tree", "have \"\\<forall>n. \\<exists>ds. n = undiago ds \\<and> ds \\<in> tree\""], ["proof (prove)\nusing this:\n  \\<forall>n. n = undiago (diago n) \\<and> diago n \\<in> tree\n\ngoal (1 subgoal):\n 1. \\<forall>n. \\<exists>ds. n = undiago ds \\<and> ds \\<in> tree", "by auto"], ["proof (state)\nthis:\n  \\<forall>n. \\<exists>ds. n = undiago ds \\<and> ds \\<in> tree\n\ngoal (1 subgoal):\n 1. infinite tree", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. \\<exists>ds. n = undiago ds \\<and> ds \\<in> tree", "have \"undiago ` tree = (UNIV :: nat set)\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<exists>ds. n = undiago ds \\<and> ds \\<in> tree\n\ngoal (1 subgoal):\n 1. undiago ` tree = UNIV", "by auto"], ["proof (state)\nthis:\n  undiago ` tree = UNIV\n\ngoal (1 subgoal):\n 1. infinite tree", "then"], ["proof (chain)\npicking this:\n  undiago ` tree = UNIV", "have \"\\<not>finite tree\""], ["proof (prove)\nusing this:\n  undiago ` tree = UNIV\n\ngoal (1 subgoal):\n 1. infinite tree", "by (metis finite_imageI infinite_UNIV_nat)"], ["proof (state)\nthis:\n  infinite tree\n\ngoal (1 subgoal):\n 1. infinite tree", "then"], ["proof (chain)\npicking this:\n  infinite tree", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite tree\n\ngoal (1 subgoal):\n 1. infinite tree", "by auto"], ["proof (state)\nthis:\n  infinite tree\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma longer_falsifies\\<^sub>l:\n  assumes \"falsifies\\<^sub>l ds l\"\n  shows \"falsifies\\<^sub>l (ds@d) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "let ?i = \"nat_of_fatom (get_atom l)\""], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l ds l", "have i_p: \"ground\\<^sub>l l \\<and>  ?i < length ds \\<and> ds ! ?i = (\\<not>sign l)\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l ds l\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    nat_of_fatom (get_atom l) < length ds \\<and>\n    ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  (let i = nat_of_fatom (get_atom l)\n   in i < length ds \\<and> ds ! i = (\\<not> sign l))\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    nat_of_fatom (get_atom l) < length ds \\<and>\n    ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "by meson"], ["proof (state)\nthis:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "moreover"], ["proof (state)\nthis:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "from i_p"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "have \"?i < length (ds@d)\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) < length (ds @ d)", "by auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) < length (ds @ d)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "moreover"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) < length (ds @ d)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "from i_p"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "have \"(ds@d) ! ?i = (\\<not>sign l)\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "ultimately"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length (ds @ d)\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "show ?thesis"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length (ds @ d)\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length ds \\<and>\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length (ds @ d)\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    (let i = nat_of_fatom (get_atom l)\n     in i < length (ds @ d) \\<and> (ds @ d) ! i = (\\<not> sign l))", "by simp"], ["proof (state)\nthis:\n  falsifies\\<^sub>l (ds @ d) l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma longer_falsifies\\<^sub>g:\n  assumes \"falsifies\\<^sub>g ds C\"\n  shows \"falsifies\\<^sub>g (ds @ d) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "assume \"l\\<in>C\""], ["proof (state)\nthis:\n  l \\<in> C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "then"], ["proof (chain)\npicking this:\n  l \\<in> C", "have \"falsifies\\<^sub>l (ds @ d) l\""], ["proof (prove)\nusing this:\n  l \\<in> C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "using assms longer_falsifies\\<^sub>l"], ["proof (prove)\nusing this:\n  l \\<in> C\n  falsifies\\<^sub>g ds C\n  falsifies\\<^sub>l ?ds ?l \\<Longrightarrow> falsifies\\<^sub>l (?ds @ ?d) ?l\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (ds @ d) l", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l (ds @ d) l\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "}"], ["proof (state)\nthis:\n  ?l2 \\<in> C \\<Longrightarrow> falsifies\\<^sub>l (ds @ d) ?l2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "then"], ["proof (chain)\npicking this:\n  ?l2 \\<in> C \\<Longrightarrow> falsifies\\<^sub>l (ds @ d) ?l2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?l2 \\<in> C \\<Longrightarrow> falsifies\\<^sub>l (ds @ d) ?l2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "using assms"], ["proof (prove)\nusing this:\n  ?l2 \\<in> C \\<Longrightarrow> falsifies\\<^sub>l (ds @ d) ?l2\n  falsifies\\<^sub>g ds C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>g (ds @ d) C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma longer_falsifies\\<^sub>c:\n  assumes \"falsifies\\<^sub>c ds C\"\n  shows \"falsifies\\<^sub>c (ds @ d) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c ds C", "obtain C' where \"instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c ds C\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        instance_of\\<^sub>l\\<^sub>s C' C \\<and>\n        falsifies\\<^sub>g ds C' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "moreover"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'", "have \"falsifies\\<^sub>g (ds @ d) C'\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C'", "using longer_falsifies\\<^sub>g"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n  falsifies\\<^sub>g ?ds ?C \\<Longrightarrow> falsifies\\<^sub>g (?ds @ ?d) ?C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (ds @ d) C'", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>g (ds @ d) C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "ultimately"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n  falsifies\\<^sub>g (ds @ d) C'", "show ?thesis"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g ds C'\n  falsifies\\<^sub>g (ds @ d) C'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c (ds @ d) C\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We use this so that we can apply K?nig's lemma.\\<close>"], ["", "lemma longer_falsifies:  \n  assumes \"falsifies\\<^sub>c\\<^sub>s ds Cs\"\n  shows \"falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c\\<^sub>s ds Cs", "obtain C where \"C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c\\<^sub>s ds Cs\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        C \\<in> Cs \\<and> falsifies\\<^sub>c ds C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "moreover"], ["proof (state)\nthis:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "then"], ["proof (chain)\npicking this:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C", "have \"falsifies\\<^sub>c (ds @ d) C\""], ["proof (prove)\nusing this:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "using longer_falsifies\\<^sub>c[of C ds d]"], ["proof (prove)\nusing this:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n  falsifies\\<^sub>c ds C \\<Longrightarrow> falsifies\\<^sub>c (ds @ d) C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (ds @ d) C", "by blast"], ["proof (state)\nthis:\n  falsifies\\<^sub>c (ds @ d) C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "ultimately"], ["proof (chain)\npicking this:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n  falsifies\\<^sub>c (ds @ d) C", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<in> Cs \\<and> falsifies\\<^sub>c ds C\n  falsifies\\<^sub>c (ds @ d) C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If all finite semantic trees have an open branch, then the set of clauses has a model.\\<close>"], ["", "theorem herbrand':\n  assumes openb: \"\\<forall>T. \\<exists>G. open_branch G T Cs\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "proof -\n  \\<comment> \\<open>Show T infinite:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "let ?tree = \"{G. \\<not>falsifies\\<^sub>c\\<^sub>s G Cs}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "let ?undiag = length"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "let ?diag = \"(\\<lambda>l. SOME b. open_branch b (deeptree l) Cs) :: nat \\<Rightarrow> partial_pred_denot\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "from openb"], ["proof (chain)\npicking this:\n  \\<forall>T.\n     \\<exists>G. branch G T \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s G Cs", "have diag_open: \"\\<forall>l. open_branch (?diag l) (deeptree l) Cs\""], ["proof (prove)\nusing this:\n  \\<forall>T.\n     \\<exists>G. branch G T \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s G Cs\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       branch\n        (SOME b.\n            branch b (deeptree l) \\<and>\n            \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n        (deeptree l) \\<and>\n       \\<not> falsifies\\<^sub>c\\<^sub>s\n               (SOME b.\n                   branch b (deeptree l) \\<and>\n                   \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n               Cs", "using someI_ex[of \"\\<lambda>b. open_branch b (deeptree _) Cs\"]"], ["proof (prove)\nusing this:\n  \\<forall>T.\n     \\<exists>G. branch G T \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s G Cs\n  \\<exists>x.\n     branch x (deeptree ?uu4) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s x Cs \\<Longrightarrow>\n  branch\n   (SOME x.\n       branch x (deeptree ?uu4) \\<and>\n       \\<not> falsifies\\<^sub>c\\<^sub>s x Cs)\n   (deeptree ?uu4) \\<and>\n  \\<not> falsifies\\<^sub>c\\<^sub>s\n          (SOME x.\n              branch x (deeptree ?uu4) \\<and>\n              \\<not> falsifies\\<^sub>c\\<^sub>s x Cs)\n          Cs\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       branch\n        (SOME b.\n            branch b (deeptree l) \\<and>\n            \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n        (deeptree l) \\<and>\n       \\<not> falsifies\\<^sub>c\\<^sub>s\n               (SOME b.\n                   branch b (deeptree l) \\<and>\n                   \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n               Cs", "by auto"], ["proof (state)\nthis:\n  \\<forall>l.\n     branch\n      (SOME b.\n          branch b (deeptree l) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      (deeptree l) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s\n             (SOME b.\n                 branch b (deeptree l) \\<and>\n                 \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n             Cs\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "then"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     branch\n      (SOME b.\n          branch b (deeptree l) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      (deeptree l) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s\n             (SOME b.\n                 branch b (deeptree l) \\<and>\n                 \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n             Cs", "have \"\\<forall>n. ?undiag (?diag n) = n\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     branch\n      (SOME b.\n          branch b (deeptree l) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      (deeptree l) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s\n             (SOME b.\n                 branch b (deeptree l) \\<and>\n                 \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n             Cs\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       length\n        (SOME b.\n            branch b (deeptree n) \\<and>\n            \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n       n", "using branch_length"], ["proof (prove)\nusing this:\n  \\<forall>l.\n     branch\n      (SOME b.\n          branch b (deeptree l) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      (deeptree l) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s\n             (SOME b.\n                 branch b (deeptree l) \\<and>\n                 \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n             Cs\n  branch ?b (deeptree ?n) \\<Longrightarrow> length ?b = ?n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       length\n        (SOME b.\n            branch b (deeptree n) \\<and>\n            \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n       n", "by auto"], ["proof (state)\nthis:\n  \\<forall>n.\n     length\n      (SOME b.\n          branch b (deeptree n) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n     n\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "moreover"], ["proof (state)\nthis:\n  \\<forall>n.\n     length\n      (SOME b.\n          branch b (deeptree n) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n     n\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "have \"\\<forall>n. (?diag n) \\<in> ?tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (SOME b.\n           branch b (deeptree n) \\<and>\n           \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n       \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "using diag_open"], ["proof (prove)\nusing this:\n  \\<forall>l.\n     branch\n      (SOME b.\n          branch b (deeptree l) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      (deeptree l) \\<and>\n     \\<not> falsifies\\<^sub>c\\<^sub>s\n             (SOME b.\n                 branch b (deeptree l) \\<and>\n                 \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n             Cs\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (SOME b.\n           branch b (deeptree n) \\<and>\n           \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n       \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "by auto"], ["proof (state)\nthis:\n  \\<forall>n.\n     (SOME b.\n         branch b (deeptree n) \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n     \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     length\n      (SOME b.\n          branch b (deeptree n) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n     n\n  \\<forall>n.\n     (SOME b.\n         branch b (deeptree n) \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n     \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "have \"\\<not>finite ?tree\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     length\n      (SOME b.\n          branch b (deeptree n) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n     n\n  \\<forall>n.\n     (SOME b.\n         branch b (deeptree n) \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n     \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "using infinity[of _ \"\\<lambda>n. SOME b. open_branch b (_ n) Cs\"]"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     length\n      (SOME b.\n          branch b (deeptree n) \\<and>\n          \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n     n\n  \\<forall>n.\n     (SOME b.\n         branch b (deeptree n) \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n     \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n  \\<lbrakk>\\<forall>n.\n              ?undiago\n               (SOME b.\n                   branch b (?uu4 n) \\<and>\n                   \\<not> falsifies\\<^sub>c\\<^sub>s b Cs) =\n              n;\n   \\<forall>n.\n      (SOME b.\n          branch b (?uu4 n) \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s b Cs)\n      \\<in> ?tree\\<rbrakk>\n  \\<Longrightarrow> infinite ?tree\n\ngoal (1 subgoal):\n 1. infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "by simp\n  \\<comment> \\<open>Get infinite path:\\<close>"], ["proof (state)\nthis:\n  infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "moreover"], ["proof (state)\nthis:\n  infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "have \"\\<forall>ds d. \\<not>falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow> \\<not>falsifies\\<^sub>c\\<^sub>s ds Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ds d.\n       \\<not> falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow>\n       \\<not> falsifies\\<^sub>c\\<^sub>s ds Cs", "using longer_falsifies[of Cs]"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c\\<^sub>s ?ds Cs \\<Longrightarrow>\n  falsifies\\<^sub>c\\<^sub>s (?ds @ ?d) Cs\n\ngoal (1 subgoal):\n 1. \\<forall>ds d.\n       \\<not> falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow>\n       \\<not> falsifies\\<^sub>c\\<^sub>s ds Cs", "by blast"], ["proof (state)\nthis:\n  \\<forall>ds d.\n     \\<not> falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow>\n     \\<not> falsifies\\<^sub>c\\<^sub>s ds Cs\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "then"], ["proof (chain)\npicking this:\n  \\<forall>ds d.\n     \\<not> falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow>\n     \\<not> falsifies\\<^sub>c\\<^sub>s ds Cs", "have \"(\\<forall>ds d. ds @ d \\<in> ?tree \\<longrightarrow> ds \\<in> ?tree)\""], ["proof (prove)\nusing this:\n  \\<forall>ds d.\n     \\<not> falsifies\\<^sub>c\\<^sub>s (ds @ d) Cs \\<longrightarrow>\n     \\<not> falsifies\\<^sub>c\\<^sub>s ds Cs\n\ngoal (1 subgoal):\n 1. wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "by auto"], ["proof (state)\nthis:\n  wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "ultimately"], ["proof (chain)\npicking this:\n  infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n  wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}", "have \"\\<exists>c. wf_infpath c \\<and> (\\<forall>n. c n \\<in> ?tree)\""], ["proof (prove)\nusing this:\n  infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n  wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       wf_infpath c \\<and>\n       (\\<forall>n. c n \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})", "using konig[of ?tree]"], ["proof (prove)\nusing this:\n  infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n  wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\n  \\<lbrakk>infinite {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs};\n   wf_tree {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       wf_infpath c \\<and>\n                       (\\<forall>n.\n                           c n\n                           \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       wf_infpath c \\<and>\n       (\\<forall>n. c n \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})", "by blast"], ["proof (state)\nthis:\n  \\<exists>c.\n     wf_infpath c \\<and>\n     (\\<forall>n. c n \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "then"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     wf_infpath c \\<and>\n     (\\<forall>n. c n \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})", "have \"\\<exists>G. wf_infpath G \\<and> (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     wf_infpath c \\<and>\n     (\\<forall>n. c n \\<in> {G. \\<not> falsifies\\<^sub>c\\<^sub>s G Cs})\n\ngoal (1 subgoal):\n 1. \\<exists>G.\n       wf_infpath G \\<and>\n       (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)", "by auto\n  \\<comment> \\<open>Apply above infpath lemma:\\<close>"], ["proof (state)\nthis:\n  \\<exists>G.\n     wf_infpath G \\<and>\n     (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "then"], ["proof (chain)\npicking this:\n  \\<exists>G.\n     wf_infpath G \\<and>\n     (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)", "show \"\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs\""], ["proof (prove)\nusing this:\n  \\<exists>G.\n     wf_infpath G \\<and>\n     (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "using infpath_model finite_cs"], ["proof (prove)\nusing this:\n  \\<exists>G.\n     wf_infpath G \\<and>\n     (\\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (G n) Cs)\n  \\<lbrakk>wf_infpath ?f;\n   \\<forall>n. \\<not> falsifies\\<^sub>c\\<^sub>s (?f n) ?Cs; finite ?Cs;\n   \\<forall>C\\<in>?Cs. finite C\\<rbrakk>\n  \\<Longrightarrow> eval\\<^sub>c\\<^sub>s HFun (extend ?f) ?Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs", "by auto"], ["proof (state)\nthis:\n  \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shorter_falsifies\\<^sub>l:\n  assumes \"falsifies\\<^sub>l (ds@d) l\"\n  assumes \"nat_of_fatom (get_atom l) < length ds\"\n  shows \"falsifies\\<^sub>l ds l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "let ?i = \"nat_of_fatom (get_atom l)\""], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l (ds @ d) l\n  nat_of_fatom (get_atom l) < length ds", "have i_p: \"ground\\<^sub>l l \\<and>  ?i < length (ds@d) \\<and> (ds@d) ! ?i = (\\<not>sign l)\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l (ds @ d) l\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n    (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  (let i = nat_of_fatom (get_atom l)\n   in i < length (ds @ d) \\<and> (ds @ d) ! i = (\\<not> sign l))\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n    (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "by meson"], ["proof (state)\nthis:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "moreover"], ["proof (state)\nthis:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "have \"?i < length ds\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) < length ds", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  falsifies\\<^sub>l (ds @ d) l\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l) < length ds", "by auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "moreover"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "then"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l) < length ds", "have \"ds ! ?i = (\\<not>sign l)\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "using i_p nth_append[of ds d ?i]"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l) < length ds\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  (ds @ d) ! nat_of_fatom (get_atom l) =\n  (if nat_of_fatom (get_atom l) < length ds\n   then ds ! nat_of_fatom (get_atom l)\n   else d ! (nat_of_fatom (get_atom l) - length ds))\n\ngoal (1 subgoal):\n 1. ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "by auto"], ["proof (state)\nthis:\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "ultimately"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length ds\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)", "show ?thesis"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length ds\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "using assms"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length ds\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  falsifies\\<^sub>l (ds @ d) l\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l ds l", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  nat_of_fatom (get_atom l) < length (ds @ d) \\<and>\n  (ds @ d) ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  nat_of_fatom (get_atom l) < length ds\n  ds ! nat_of_fatom (get_atom l) = (\\<not> sign l)\n  ground\\<^sub>l l \\<and>\n  (let i = nat_of_fatom (get_atom l)\n   in i < length (ds @ d) \\<and> (ds @ d) ! i = (\\<not> sign l))\n  nat_of_fatom (get_atom l) < length ds\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l \\<and>\n    (let i = nat_of_fatom (get_atom l)\n     in i < length ds \\<and> ds ! i = (\\<not> sign l))", "by simp"], ["proof (state)\nthis:\n  falsifies\\<^sub>l ds l\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem herbrand'_contra:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>G. \\<not>eval\\<^sub>c\\<^sub>s HFun G Cs\"\n  shows \"\\<exists>T. \\<forall>G. branch G T \\<longrightarrow> closed_branch G T Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)", "from finite_cs unsat"], ["proof (chain)\npicking this:\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs", "have \"(\\<forall>T. \\<exists>G. open_branch G T Cs) \\<longrightarrow> (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)\""], ["proof (prove)\nusing this:\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n\ngoal (1 subgoal):\n 1. (\\<forall>T.\n        \\<exists>G.\n           branch G T \\<and>\n           \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n    (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)", "using herbrand'"], ["proof (prove)\nusing this:\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n  \\<lbrakk>\\<forall>T.\n              \\<exists>G.\n                 branch G T \\<and> \\<not> falsifies\\<^sub>c\\<^sub>s G ?Cs;\n   finite ?Cs; \\<forall>C\\<in>?Cs. finite C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>G. eval\\<^sub>c\\<^sub>s HFun G ?Cs\n\ngoal (1 subgoal):\n 1. (\\<forall>T.\n        \\<exists>G.\n           branch G T \\<and>\n           \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n    (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>T.\n      \\<exists>G.\n         branch G T \\<and>\n         \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n  (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)", "then"], ["proof (chain)\npicking this:\n  (\\<forall>T.\n      \\<exists>G.\n         branch G T \\<and>\n         \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n  (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>T.\n      \\<exists>G.\n         branch G T \\<and>\n         \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n  (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)", "using unsat"], ["proof (prove)\nusing this:\n  (\\<forall>T.\n      \\<exists>G.\n         branch G T \\<and>\n         \\<not> falsifies\\<^sub>c\\<^sub>s G Cs) \\<longrightarrow>\n  (\\<exists>G. eval\\<^sub>c\\<^sub>s HFun G Cs)\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n\ngoal (1 subgoal):\n 1. \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>T. anybranch T (\\<lambda>G. closed_branch G T Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem herbrand:\n  assumes unsat: \"\\<forall>G. \\<not>eval\\<^sub>c\\<^sub>s HFun G Cs\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>T. closed_tree T Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T. closed_tree T Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T. closed_tree T Cs", "from unsat finite_cs"], ["proof (chain)\npicking this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C", "obtain T where \"anybranch T (\\<lambda>b. closed_branch b T Cs)\""], ["proof (prove)\nusing this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        anybranch T (\\<lambda>p. closed_branch p T Cs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using herbrand'_contra[of Cs]"], ["proof (prove)\nusing this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<lbrakk>finite Cs; \\<forall>C\\<in>Cs. finite C;\n   \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T.\n                       anybranch T (\\<lambda>G. closed_branch G T Cs)\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        anybranch T (\\<lambda>p. closed_branch p T Cs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  anybranch T (\\<lambda>p. closed_branch p T Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T. closed_tree T Cs", "then"], ["proof (chain)\npicking this:\n  anybranch T (\\<lambda>p. closed_branch p T Cs)", "have \"\\<exists>T. anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and> anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\""], ["proof (prove)\nusing this:\n  anybranch T (\\<lambda>p. closed_branch p T Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n       anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)", "using cutoff_branch_internal[of T \"\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs\"]"], ["proof (prove)\nusing this:\n  anybranch T (\\<lambda>p. closed_branch p T Cs)\n  anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<Longrightarrow>\n  \\<exists>T'.\n     anyinternal T'\n      (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n     anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n       anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>T.\n     anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n     anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T. closed_tree T Cs", "then"], ["proof (chain)\npicking this:\n  \\<exists>T.\n     anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n     anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n     anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T. closed_tree T Cs", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     anybranch T (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p Cs) \\<and>\n     anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n       anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)", "by auto"], ["proof (state)\nthis:\n  \\<exists>T. closed_tree T Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}