{"file_name": "/home/qj213/afp-2021-10-22/thys/Resolution_FOL/Completeness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Resolution_FOL", "problem_names": ["lemma lifting:\n  assumes fin: \"finite C\\<^sub>1 \\<and> finite C\\<^sub>2\"\n  assumes apart: \"vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 = {}\"\n  assumes inst: \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1' C\\<^sub>1 \\<and> instance_of\\<^sub>l\\<^sub>s C\\<^sub>2' C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\"\n  shows \"\\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>. applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n                instance_of\\<^sub>l\\<^sub>s (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>) (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\"", "lemma falsifies\\<^sub>g_empty:\n  assumes \"falsifies\\<^sub>g [] C\"\n  shows \"C = {}\"", "lemma falsifies\\<^sub>c\\<^sub>s_empty:\n  assumes \"falsifies\\<^sub>c [] C\"\n  shows \"C = {}\"", "lemma complements_do_not_falsify':\n  assumes l1C1': \"l\\<^sub>1 \\<in> C\\<^sub>1'\"\n  assumes l\\<^sub>2C1': \"l\\<^sub>2 \\<in> C\\<^sub>1'\"\n  assumes comp: \"l\\<^sub>1 = l\\<^sub>2\\<^sup>c\"\n  assumes falsif: \"falsifies\\<^sub>g G C\\<^sub>1'\"\n  shows \"False\"", "lemma complements_do_not_falsify:\n  assumes l1C1': \"l\\<^sub>1 \\<in> C\\<^sub>1'\"\n  assumes l\\<^sub>2C1': \"l\\<^sub>2 \\<in> C\\<^sub>1'\"\n  assumes fals: \"falsifies\\<^sub>g G C\\<^sub>1'\"\n  shows \"l\\<^sub>1 \\<noteq> l\\<^sub>2\\<^sup>c\"", "lemma other_falsified:\n  assumes C1'_p: \"ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and> falsifies\\<^sub>g (B@[d]) C\\<^sub>1'\" \n  assumes l_p: \"l \\<in> C\\<^sub>1'\" \"nat_of_fatom (get_atom l) = length B\"\n  assumes other: \"lo \\<in> C\\<^sub>1'\" \"lo \\<noteq> l\"\n  shows \"falsifies\\<^sub>l B lo\"", "theorem completeness':\n  assumes \"closed_tree T Cs\"\n  assumes \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\"", "theorem completeness:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::hterm fun_denot) (G::hterm pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\"", "lemma eval\\<^sub>t_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows\"eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) t = b_of_a (eval\\<^sub>t E F t)\"", "lemma eval\\<^sub>t\\<^sub>s_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"G_conv b_of_a G p (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) = G p (eval\\<^sub>t\\<^sub>s E F ts)\"", "lemma eval\\<^sub>l_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l = eval\\<^sub>l E F G l\"", "lemma eval\\<^sub>c_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C\"", "lemma eval\\<^sub>c\\<^sub>s_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>c\\<^sub>s (F_conv b_of_a F) (G_conv b_of_a G) Cs \\<longleftrightarrow> eval\\<^sub>c\\<^sub>s F G Cs\"", "lemma countably_inf_bij:\n  assumes inf_a_uni: \"infinite (UNIV :: ('a ::countable) set)\"\n  assumes inf_b_uni: \"infinite (UNIV :: ('b ::countable) set)\"\n  shows \"\\<exists>b_of_a :: 'a \\<Rightarrow> 'b. bij b_of_a\"", "lemma infinite_hterms: \"infinite (UNIV :: hterm set)\"", "theorem completeness_countable:\n  assumes inf_uni: \"infinite (UNIV :: ('u :: countable) set)\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::'u fun_denot) (G::'u pred_denot). \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\"", "theorem completeness_nat:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::nat fun_denot) (G::nat pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], "translations": [["", "lemma lifting:\n  assumes fin: \"finite C\\<^sub>1 \\<and> finite C\\<^sub>2\"\n  assumes apart: \"vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 = {}\"\n  assumes inst: \"instance_of\\<^sub>l\\<^sub>s C\\<^sub>1' C\\<^sub>1 \\<and> instance_of\\<^sub>l\\<^sub>s C\\<^sub>2' C\\<^sub>2\"\n  assumes appl: \"applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\"\n  shows \"\\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>. applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n                instance_of\\<^sub>l\\<^sub>s (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>) (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "proof -\n  \\<comment> \\<open>Obtaining the subsets we resolve upon:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "let ?R\\<^sub>1' = \"C\\<^sub>1' - L\\<^sub>1'\" and ?R\\<^sub>2' = \"C\\<^sub>2' - L\\<^sub>2'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "from inst"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1' C\\<^sub>1 \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2' C\\<^sub>2", "obtain \\<gamma> \\<mu> where \"C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = C\\<^sub>2'\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1' C\\<^sub>1 \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2' C\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma> \\<mu>.\n        C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n        C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> =\n        C\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  (\\<exists>\\<sigma>.\n      C\\<^sub>1' = C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<and>\n  (\\<exists>\\<sigma>.\n      C\\<^sub>2' = C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma> \\<mu>.\n        C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n        C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> =\n        C\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = C\\<^sub>2'", "obtain \\<eta> where \\<eta>_p: \"C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and> C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<eta>.\n        C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n        C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using apart merge_sub"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<gamma> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<mu> = C\\<^sub>2'\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {}\n  \\<lbrakk>vars\\<^sub>l\\<^sub>s ?C \\<inter> vars\\<^sub>l\\<^sub>s ?D = {};\n   ?C \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C';\n   ?D \\<cdot>\\<^sub>l\\<^sub>s ?\\<mu> = ?D'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<eta>.\n                       ?C \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = ?C' \\<and>\n                       ?D \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = ?D'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<eta>.\n        C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n        C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "from \\<eta>_p"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'", "obtain L\\<^sub>1 where L\\<^sub>1_p: \"L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and> L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and> (C\\<^sub>1 - L\\<^sub>1) \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = ?R\\<^sub>1'\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>1.\n        L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n        L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n        C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>1' - L\\<^sub>1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using appl project_sub"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  \\<lbrakk>?C \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C';\n   ?L' \\<subseteq> ?C'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L\\<subseteq>?C.\n                       L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?L' \\<and>\n                       ?C - L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C' - ?L'\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>1.\n        L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n        L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n        C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>1' - L\\<^sub>1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  \\<lbrakk>?C \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C';\n   ?L' \\<subseteq> ?C'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L\\<subseteq>?C.\n                       L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?L' \\<and>\n                       ?C - L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C' - ?L'\n  applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  (?C\\<^sub>1 \\<noteq> {} \\<and>\n   ?C\\<^sub>2 \\<noteq> {} \\<and>\n   ?L\\<^sub>1 \\<noteq> {} \\<and>\n   ?L\\<^sub>2 \\<noteq> {} \\<and>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>1 \\<inter>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>2 =\n   {} \\<and>\n   ?L\\<^sub>1 \\<subseteq> ?C\\<^sub>1 \\<and>\n   ?L\\<^sub>2 \\<subseteq> ?C\\<^sub>2 \\<and>\n   mgu\\<^sub>l\\<^sub>s ?\\<sigma> (?L\\<^sub>1 \\<union> ?L\\<^sub>2\\<^sup>C))\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>1.\n        L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n        L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n        C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>1' - L\\<^sub>1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "let ?R\\<^sub>1 = \"C\\<^sub>1 - L\\<^sub>1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "from \\<eta>_p"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'", "obtain L\\<^sub>2 where L\\<^sub>2_p: \"L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and> L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and> (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = ?R\\<^sub>2'\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>2.\n        L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n        L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n        C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>2' - L\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using appl project_sub"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  \\<lbrakk>?C \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C';\n   ?L' \\<subseteq> ?C'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L\\<subseteq>?C.\n                       L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?L' \\<and>\n                       ?C - L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C' - ?L'\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>2.\n        L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n        L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n        C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>2' - L\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  \\<lbrakk>?C \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C';\n   ?L' \\<subseteq> ?C'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L\\<subseteq>?C.\n                       L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?L' \\<and>\n                       ?C - L \\<cdot>\\<^sub>l\\<^sub>s ?lmbd = ?C' - ?L'\n  applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  (?C\\<^sub>1 \\<noteq> {} \\<and>\n   ?C\\<^sub>2 \\<noteq> {} \\<and>\n   ?L\\<^sub>1 \\<noteq> {} \\<and>\n   ?L\\<^sub>2 \\<noteq> {} \\<and>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>1 \\<inter>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>2 =\n   {} \\<and>\n   ?L\\<^sub>1 \\<subseteq> ?C\\<^sub>1 \\<and>\n   ?L\\<^sub>2 \\<subseteq> ?C\\<^sub>2 \\<and>\n   mgu\\<^sub>l\\<^sub>s ?\\<sigma> (?L\\<^sub>1 \\<union> ?L\\<^sub>2\\<^sup>C))\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>2.\n        L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n        L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n        C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n        C\\<^sub>2' - L\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "let ?R\\<^sub>2 = \"C\\<^sub>2 - L\\<^sub>2\"\n\n  \\<comment> \\<open>Obtaining substitutions:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "from appl"], ["proof (chain)\npicking this:\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>", "have \"mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)\""], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)", "using applicable_def"], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  (?C\\<^sub>1 \\<noteq> {} \\<and>\n   ?C\\<^sub>2 \\<noteq> {} \\<and>\n   ?L\\<^sub>1 \\<noteq> {} \\<and>\n   ?L\\<^sub>2 \\<noteq> {} \\<and>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>1 \\<inter>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>2 =\n   {} \\<and>\n   ?L\\<^sub>1 \\<subseteq> ?C\\<^sub>1 \\<and>\n   ?L\\<^sub>2 \\<subseteq> ?C\\<^sub>2 \\<and>\n   mgu\\<^sub>l\\<^sub>s ?\\<sigma> (?L\\<^sub>1 \\<union> ?L\\<^sub>2\\<^sup>C))\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)", "by auto"], ["proof (state)\nthis:\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)", "have \"mgu\\<^sub>l\\<^sub>s \\<sigma> ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union> (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)\""], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma>\n     ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n      (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)", "using L\\<^sub>1_p L\\<^sub>2_p"], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma> (L\\<^sub>1' \\<union> L\\<^sub>2'\\<^sup>C)\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma>\n     ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n      (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)", "by auto"], ["proof (state)\nthis:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)", "have \"mgu\\<^sub>l\\<^sub>s \\<sigma> ((L\\<^sub>1  \\<union> L\\<^sub>2\\<^sup>C) \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\""], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma>\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "using compls_subls subls_union"], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   ((L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\\<^sup>C)\n  ?L\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> =\n  (?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\\<^sup>C\n  ?L\\<^sub>1 \\<union> ?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> =\n  (?L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>) \\<union>\n  (?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. mgu\\<^sub>l\\<^sub>s \\<sigma>\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "by auto"], ["proof (state)\nthis:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "have \"unifier\\<^sub>l\\<^sub>s \\<sigma> ((L\\<^sub>1  \\<union> L\\<^sub>2\\<^sup>C) \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\""], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma>\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "using mgu\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n  mgu\\<^sub>l\\<^sub>s ?\\<sigma> ?L =\n  (unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L \\<and>\n   (\\<forall>u.\n       unifier\\<^sub>l\\<^sub>s u ?L \\<longrightarrow>\n       (\\<exists>i. u = ?\\<sigma> \\<cdot> i)))\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s \\<sigma>\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)", "have \\<eta>\\<sigma>uni: \"unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>) (L\\<^sub>1  \\<union> L\\<^sub>2\\<^sup>C)\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)", "using unifier\\<^sub>l\\<^sub>s_def composition_conseq2l"], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s \\<sigma>\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)\n  unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L =\n  (\\<exists>l'. \\<forall>l\\<in>?L. l \\<cdot>\\<^sub>l ?\\<sigma> = l')\n  ?l \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l ?\\<sigma>\\<^sub>2 =\n  ?l \\<cdot>\\<^sub>l (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n     (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)", "by auto"], ["proof (state)\nthis:\n  unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)", "obtain \\<tau> where \\<tau>_p: \"mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1  \\<union> L\\<^sub>2\\<^sup>C)\""], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        mgu\\<^sub>l\\<^sub>s \\<tau>\n         (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using unification fin L\\<^sub>1_p L\\<^sub>2_p"], ["proof (prove)\nusing this:\n  unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n  \\<lbrakk>finite ?L; unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<theta>. mgu\\<^sub>l\\<^sub>s \\<theta> ?L\n  finite C\\<^sub>1 \\<and> finite C\\<^sub>2\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        mgu\\<^sub>l\\<^sub>s \\<tau>\n         (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson finite_UnI finite_imageI rev_finite_subset)"], ["proof (state)\nthis:\n  mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)", "obtain \\<phi> where \\<phi>_p: \"\\<tau> \\<cdot> \\<phi> = \\<eta> \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<tau> \\<cdot> \\<phi> = \\<eta> \\<cdot> \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<eta>\\<sigma>uni mgu\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n  unifier\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\n   (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n  mgu\\<^sub>l\\<^sub>s ?\\<sigma> ?L =\n  (unifier\\<^sub>l\\<^sub>s ?\\<sigma> ?L \\<and>\n   (\\<forall>u.\n       unifier\\<^sub>l\\<^sub>s u ?L \\<longrightarrow>\n       (\\<exists>i. u = ?\\<sigma> \\<cdot> i)))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<tau> \\<cdot> \\<phi> = \\<eta> \\<cdot> \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto\n\n  \\<comment> \\<open>Showing that we have the desired resolvent:\\<close>"], ["proof (state)\nthis:\n  \\<tau> \\<cdot> \\<phi> = \\<eta> \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "let ?C = \"((C\\<^sub>1 - L\\<^sub>1)  \\<union> (C\\<^sub>2 - L\\<^sub>2)) \\<cdot>\\<^sub>l\\<^sub>s \\<tau>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "have \"?C \\<cdot>\\<^sub>l\\<^sub>s \\<phi>  = (?R\\<^sub>1 \\<union> ?R\\<^sub>2 ) \\<cdot>\\<^sub>l\\<^sub>s (\\<tau> \\<cdot> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n    \\<phi> =\n    C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<tau> \\<cdot> \\<phi>)", "using subls_union composition_conseq2ls"], ["proof (prove)\nusing this:\n  ?L\\<^sub>1 \\<union> ?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> =\n  (?L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>) \\<union>\n  (?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?L \\<cdot>\\<^sub>l\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n    \\<phi> =\n    C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<tau> \\<cdot> \\<phi>)", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<tau> \\<cdot> \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "also"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<tau> \\<cdot> \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "have \"... = (?R\\<^sub>1 \\<union> ?R\\<^sub>2 ) \\<cdot>\\<^sub>l\\<^sub>s (\\<eta> \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<tau> \\<cdot> \\<phi>) =\n    C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<eta> \\<cdot> \\<sigma>)", "using \\<phi>_p"], ["proof (prove)\nusing this:\n  \\<tau> \\<cdot> \\<phi> = \\<eta> \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<tau> \\<cdot> \\<phi>) =\n    C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<eta> \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<tau> \\<cdot> \\<phi>) =\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<eta> \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "also"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<tau> \\<cdot> \\<phi>) =\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<eta> \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "have \"... = ((?R\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union> (?R\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>)) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<eta> \\<cdot> \\<sigma>) =\n    (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n     \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>", "using subls_union composition_conseq2ls"], ["proof (prove)\nusing this:\n  ?L\\<^sub>1 \\<union> ?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma> =\n  (?L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>) \\<union>\n  (?L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>)\n  ?L \\<cdot>\\<^sub>l\\<^sub>s ?\\<sigma>\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\\<^sub>2 =\n  ?L \\<cdot>\\<^sub>l\\<^sub>s (?\\<sigma>\\<^sub>1 \\<cdot> ?\\<sigma>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<eta> \\<cdot> \\<sigma>) =\n    (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n     \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<eta> \\<cdot> \\<sigma>) =\n  (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n  (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n   \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "also"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  (\\<eta> \\<cdot> \\<sigma>) =\n  (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n  (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n   \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "have \"... = (?R\\<^sub>1' \\<union> ?R\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n     \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma> =\n    C\\<^sub>1' - L\\<^sub>1' \\<union>\n    (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>", "using \\<eta>_p L\\<^sub>1_p L\\<^sub>2_p"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n    (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n     \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma> =\n    C\\<^sub>1' - L\\<^sub>1' \\<union>\n    (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>", "by auto"], ["proof (state)\nthis:\n  (C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta>) \\<union>\n  (C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n   \\<eta>) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "finally"], ["proof (chain)\npicking this:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>", "have \"?C \\<cdot>\\<^sub>l\\<^sub>s \\<phi> = ((C\\<^sub>1' - L\\<^sub>1') \\<union> (C\\<^sub>2' - L\\<^sub>2')) \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 - L\\<^sub>1 \\<union>\n    (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n    \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n    \\<phi> =\n    C\\<^sub>1' - L\\<^sub>1' \\<union>\n    (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n    \\<sigma>", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>", "have ins: \"instance_of\\<^sub>l\\<^sub>s (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>) (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "using resolution_def instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 - L\\<^sub>1 \\<union>\n  (C\\<^sub>2 - L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  \\<tau> \\<cdot>\\<^sub>l\\<^sub>s\n  \\<phi> =\n  C\\<^sub>1' - L\\<^sub>1' \\<union>\n  (C\\<^sub>2' - L\\<^sub>2') \\<cdot>\\<^sub>l\\<^sub>s\n  \\<sigma>\n  resolution ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  ?C\\<^sub>1 - ?L\\<^sub>1 \\<union>\n  (?C\\<^sub>2 - ?L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n  ?\\<sigma>\n  instance_of\\<^sub>l\\<^sub>s ?C\\<^sub>1 ?C\\<^sub>2 =\n  (\\<exists>\\<sigma>.\n      ?C\\<^sub>1 = ?C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>)\n\ngoal (1 subgoal):\n 1. instance_of\\<^sub>l\\<^sub>s\n     (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n     (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "by metis\n\n  \\<comment> \\<open>Showing that the resolution rule is applicable:\\<close>"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n   (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "have \"C\\<^sub>1' \\<noteq> {} \\<and> C\\<^sub>2' \\<noteq> {} \\<and> L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1' \\<noteq> {} \\<and>\n    C\\<^sub>2' \\<noteq> {} \\<and>\n    L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}", "using appl applicable_def"], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>\n  applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  (?C\\<^sub>1 \\<noteq> {} \\<and>\n   ?C\\<^sub>2 \\<noteq> {} \\<and>\n   ?L\\<^sub>1 \\<noteq> {} \\<and>\n   ?L\\<^sub>2 \\<noteq> {} \\<and>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>1 \\<inter>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>2 =\n   {} \\<and>\n   ?L\\<^sub>1 \\<subseteq> ?C\\<^sub>1 \\<and>\n   ?L\\<^sub>2 \\<subseteq> ?C\\<^sub>2 \\<and>\n   mgu\\<^sub>l\\<^sub>s ?\\<sigma> (?L\\<^sub>1 \\<union> ?L\\<^sub>2\\<^sup>C))\n\ngoal (1 subgoal):\n 1. C\\<^sub>1' \\<noteq> {} \\<and>\n    C\\<^sub>2' \\<noteq> {} \\<and>\n    L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1' \\<noteq> {} \\<and>\n  C\\<^sub>2' \\<noteq> {} \\<and>\n  L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1' \\<noteq> {} \\<and>\n  C\\<^sub>2' \\<noteq> {} \\<and>\n  L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}", "have \"C\\<^sub>1 \\<noteq> {} \\<and> C\\<^sub>2 \\<noteq> {} \\<and> L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  C\\<^sub>1' \\<noteq> {} \\<and>\n  C\\<^sub>2' \\<noteq> {} \\<and>\n  L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<noteq> {} \\<and>\n    C\\<^sub>2 \\<noteq> {} \\<and>\n    L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}", "using \\<eta>_p L\\<^sub>1_p L\\<^sub>2_p"], ["proof (prove)\nusing this:\n  C\\<^sub>1' \\<noteq> {} \\<and>\n  C\\<^sub>2' \\<noteq> {} \\<and>\n  L\\<^sub>1' \\<noteq> {} \\<and> L\\<^sub>2' \\<noteq> {}\n  C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>1' \\<and>\n  C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = C\\<^sub>2'\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n\ngoal (1 subgoal):\n 1. C\\<^sub>1 \\<noteq> {} \\<and>\n    C\\<^sub>2 \\<noteq> {} \\<and>\n    L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "then"], ["proof (chain)\npicking this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}", "have appli: \"applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>\""], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>", "using apart L\\<^sub>1_p L\\<^sub>2_p \\<tau>_p applicable_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1 \\<noteq> {} \\<and>\n  C\\<^sub>2 \\<noteq> {} \\<and>\n  L\\<^sub>1 \\<noteq> {} \\<and> L\\<^sub>2 \\<noteq> {}\n  vars\\<^sub>l\\<^sub>s C\\<^sub>1 \\<inter> vars\\<^sub>l\\<^sub>s C\\<^sub>2 =\n  {}\n  L\\<^sub>1 \\<subseteq> C\\<^sub>1 \\<and>\n  L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>1' \\<and>\n  C\\<^sub>1 - L\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>1' - L\\<^sub>1'\n  L\\<^sub>2 \\<subseteq> C\\<^sub>2 \\<and>\n  L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> = L\\<^sub>2' \\<and>\n  C\\<^sub>2 - L\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s \\<eta> =\n  C\\<^sub>2' - L\\<^sub>2'\n  mgu\\<^sub>l\\<^sub>s \\<tau> (L\\<^sub>1 \\<union> L\\<^sub>2\\<^sup>C)\n  applicable ?C\\<^sub>1 ?C\\<^sub>2 ?L\\<^sub>1 ?L\\<^sub>2 ?\\<sigma> =\n  (?C\\<^sub>1 \\<noteq> {} \\<and>\n   ?C\\<^sub>2 \\<noteq> {} \\<and>\n   ?L\\<^sub>1 \\<noteq> {} \\<and>\n   ?L\\<^sub>2 \\<noteq> {} \\<and>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>1 \\<inter>\n   vars\\<^sub>l\\<^sub>s ?C\\<^sub>2 =\n   {} \\<and>\n   ?L\\<^sub>1 \\<subseteq> ?C\\<^sub>1 \\<and>\n   ?L\\<^sub>2 \\<subseteq> ?C\\<^sub>2 \\<and>\n   mgu\\<^sub>l\\<^sub>s ?\\<sigma> (?L\\<^sub>1 \\<union> ?L\\<^sub>2\\<^sup>C))\n\ngoal (1 subgoal):\n 1. applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>", "by auto"], ["proof (state)\nthis:\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "from ins appli"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n   (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n   (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\n  applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n       applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n       instance_of\\<^sub>l\\<^sub>s\n        (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n        (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n     applicable C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n     instance_of\\<^sub>l\\<^sub>s\n      (resolution C\\<^sub>1' C\\<^sub>2' L\\<^sub>1' L\\<^sub>2' \\<sigma>)\n      (resolution C\\<^sub>1 C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Completeness\\<close>"], ["", "lemma falsifies\\<^sub>g_empty:\n  assumes \"falsifies\\<^sub>g [] C\"\n  shows \"C = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C = {}", "have \"\\<forall>l \\<in> C. False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>C. False", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> C \\<Longrightarrow> False", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> C \\<Longrightarrow> False", "assume \"l\\<in>C\""], ["proof (state)\nthis:\n  l \\<in> C\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  l \\<in> C", "have \"falsifies\\<^sub>l [] l\""], ["proof (prove)\nusing this:\n  l \\<in> C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l [] l", "using assms"], ["proof (prove)\nusing this:\n  l \\<in> C\n  falsifies\\<^sub>g [] C\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l [] l", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l [] l\n\ngoal (1 subgoal):\n 1. \\<And>l. l \\<in> C \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l [] l", "show False"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l [] l\n\ngoal (1 subgoal):\n 1. False", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l \\<and>\n  (let i = nat_of_fatom (get_atom l)\n   in i < length [] \\<and> [] ! i = (\\<not> sign l))\n\ngoal (1 subgoal):\n 1. False", "by (cases l) auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>C. False\n\ngoal (1 subgoal):\n 1. C = {}", "then"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>C. False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>C. False\n\ngoal (1 subgoal):\n 1. C = {}", "by auto"], ["proof (state)\nthis:\n  C = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma falsifies\\<^sub>c\\<^sub>s_empty:\n  assumes \"falsifies\\<^sub>c [] C\"\n  shows \"C = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C = {}", "from assms"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c [] C", "obtain C' where C'_p: \"instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c [] C\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        instance_of\\<^sub>l\\<^sub>s C' C \\<and>\n        falsifies\\<^sub>g [] C' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'\n\ngoal (1 subgoal):\n 1. C = {}", "then"], ["proof (chain)\npicking this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'", "have \"C'= {}\""], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'\n\ngoal (1 subgoal):\n 1. C' = {}", "using falsifies\\<^sub>g_empty"], ["proof (prove)\nusing this:\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'\n  falsifies\\<^sub>g [] ?C \\<Longrightarrow> ?C = {}\n\ngoal (1 subgoal):\n 1. C' = {}", "by auto"], ["proof (state)\nthis:\n  C' = {}\n\ngoal (1 subgoal):\n 1. C = {}", "then"], ["proof (chain)\npicking this:\n  C' = {}", "show \"C = {}\""], ["proof (prove)\nusing this:\n  C' = {}\n\ngoal (1 subgoal):\n 1. C = {}", "using C'_p"], ["proof (prove)\nusing this:\n  C' = {}\n  instance_of\\<^sub>l\\<^sub>s C' C \\<and> falsifies\\<^sub>g [] C'\n\ngoal (1 subgoal):\n 1. C = {}", "unfolding instance_of\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  C' = {}\n  (\\<exists>\\<sigma>. C' = C \\<cdot>\\<^sub>l\\<^sub>s \\<sigma>) \\<and>\n  falsifies\\<^sub>g [] C'\n\ngoal (1 subgoal):\n 1. C = {}", "by auto"], ["proof (state)\nthis:\n  C = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complements_do_not_falsify':\n  assumes l1C1': \"l\\<^sub>1 \\<in> C\\<^sub>1'\"\n  assumes l\\<^sub>2C1': \"l\\<^sub>2 \\<in> C\\<^sub>1'\"\n  assumes comp: \"l\\<^sub>1 = l\\<^sub>2\\<^sup>c\"\n  assumes falsif: \"falsifies\\<^sub>g G C\\<^sub>1'\"\n  shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases l\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "case (Pos p ts)"], ["proof (state)\nthis:\n  l\\<^sub>1 = Pos p ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "let ?i1 = \"nat_of_fatom (p, ts)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  falsifies\\<^sub>g G C\\<^sub>1'", "have gr: \"ground\\<^sub>l l\\<^sub>1\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  (\\<forall>l\\<in>C\\<^sub>1'.\n      ground\\<^sub>l l \\<and>\n      (let i = nat_of_fatom (get_atom l)\n       in i < length G \\<and> G ! i = (\\<not> sign l)))\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l\\<^sub>1", "have Neg: \"l\\<^sub>2 = Neg p ts\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 = Neg p ts", "using comp Pos"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  l\\<^sub>1 = Pos p ts\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 = Neg p ts", "by (cases l\\<^sub>2) auto"], ["proof (state)\nthis:\n  l\\<^sub>2 = Neg p ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from falsif"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g G C\\<^sub>1'", "have \"falsifies\\<^sub>l G l\\<^sub>1\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>1", "using l1C1'"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l G l\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l G l\\<^sub>1", "have \"G ! ?i1 = False\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "using l1C1' Pos"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>1\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = Pos p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1 \\<and>\n  (let i = nat_of_fatom (get_atom l\\<^sub>1)\n   in i < length G \\<and> G ! i = (\\<not> sign l\\<^sub>1))\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = Pos p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "by (induction \"Pos p ts\") auto"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = False\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = False\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "let ?i2 = \"nat_of_fatom (get_atom l\\<^sub>2)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from falsif"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g G C\\<^sub>1'", "have \"falsifies\\<^sub>l G l\\<^sub>2\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>2", "using l\\<^sub>2C1'"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l G l\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l G l\\<^sub>2", "have \"G ! ?i2 = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>2 \\<and>\n  (let i = nat_of_fatom (get_atom l\\<^sub>2)\n   in i < length G \\<and> G ! i = (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "by meson"], ["proof (state)\nthis:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "have \"G ! ?i1 = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "using Pos Neg comp"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n  l\\<^sub>1 = Pos p ts\n  l\\<^sub>2 = Neg p ts\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "have \"G ! ?i1 = True\""], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = True", "using Neg"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n  l\\<^sub>2 = Neg p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = True", "by auto"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = True\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12. l\\<^sub>1 = Pos x11 x12 \\<Longrightarrow> False\n 2. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (p, ts) = False\n  G ! nat_of_fatom (p, ts) = True", "show ?thesis"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = False\n  G ! nat_of_fatom (p, ts) = True\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "case (Neg p ts)"], ["proof (state)\nthis:\n  l\\<^sub>1 = Neg p ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "let ?i1 = \"nat_of_fatom (p,ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  falsifies\\<^sub>g G C\\<^sub>1'", "have gr: \"ground\\<^sub>l l\\<^sub>1\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  (\\<forall>l\\<in>C\\<^sub>1'.\n      ground\\<^sub>l l \\<and>\n      (let i = nat_of_fatom (get_atom l)\n       in i < length G \\<and> G ! i = (\\<not> sign l)))\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ground\\<^sub>l l\\<^sub>1", "have Pos: \"l\\<^sub>2 = Pos p ts\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 = Pos p ts", "using comp Neg"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n  l\\<^sub>1 = Neg p ts\n\ngoal (1 subgoal):\n 1. l\\<^sub>2 = Pos p ts", "by (cases l\\<^sub>2) auto"], ["proof (state)\nthis:\n  l\\<^sub>2 = Pos p ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from falsif"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g G C\\<^sub>1'", "have \"falsifies\\<^sub>l G l\\<^sub>1\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>1", "using l1C1'"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l G l\\<^sub>1", "have \"G ! ?i1 = True\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>1\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = True", "using l1C1' Neg"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>1\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = Neg p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = True", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>1 \\<and>\n  (let i = nat_of_fatom (get_atom l\\<^sub>1)\n   in i < length G \\<and> G ! i = (\\<not> sign l\\<^sub>1))\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>1 = Neg p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = True", "by (metis get_atom.simps(2) literal.disc(2))"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = True\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = True\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "let ?i2 = \"nat_of_fatom (get_atom l\\<^sub>2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "from falsif"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g G C\\<^sub>1'", "have \"falsifies\\<^sub>l G l\\<^sub>2\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>2", "using l\\<^sub>2C1'"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g G C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l G l\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l G l\\<^sub>2", "have \"G ! ?i2 = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l G l\\<^sub>2\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l l\\<^sub>2 \\<and>\n  (let i = nat_of_fatom (get_atom l\\<^sub>2)\n   in i < length G \\<and> G ! i = (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "by meson"], ["proof (state)\nthis:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)", "have \"G ! ?i1 = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "using Pos Neg comp"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2)\n  l\\<^sub>2 = Pos p ts\n  l\\<^sub>1 = Neg p ts\n  l\\<^sub>1 = l\\<^sub>2\\<^sup>c\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)", "have \"G ! ?i1 = False\""], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "using Pos"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n  l\\<^sub>2 = Pos p ts\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "using literal.disc(1)"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = (\\<not> sign l\\<^sub>2)\n  l\\<^sub>2 = Pos p ts\n  sign (Pos ?x11.0 ?x12.0)\n\ngoal (1 subgoal):\n 1. G ! nat_of_fatom (p, ts) = False", "by blast"], ["proof (state)\nthis:\n  G ! nat_of_fatom (p, ts) = False\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. l\\<^sub>1 = Neg x21 x22 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  G ! nat_of_fatom (p, ts) = True\n  G ! nat_of_fatom (p, ts) = False", "show ?thesis"], ["proof (prove)\nusing this:\n  G ! nat_of_fatom (p, ts) = True\n  G ! nat_of_fatom (p, ts) = False\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complements_do_not_falsify:\n  assumes l1C1': \"l\\<^sub>1 \\<in> C\\<^sub>1'\"\n  assumes l\\<^sub>2C1': \"l\\<^sub>2 \\<in> C\\<^sub>1'\"\n  assumes fals: \"falsifies\\<^sub>g G C\\<^sub>1'\"\n  shows \"l\\<^sub>1 \\<noteq> l\\<^sub>2\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<noteq> l\\<^sub>2\\<^sup>c", "using assms complements_do_not_falsify'"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1'\n  l\\<^sub>2 \\<in> C\\<^sub>1'\n  falsifies\\<^sub>g G C\\<^sub>1'\n  \\<lbrakk>?l\\<^sub>1 \\<in> ?C\\<^sub>1'; ?l\\<^sub>2 \\<in> ?C\\<^sub>1';\n   ?l\\<^sub>1 = ?l\\<^sub>2\\<^sup>c;\n   falsifies\\<^sub>g ?G ?C\\<^sub>1'\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. l\\<^sub>1 \\<noteq> l\\<^sub>2\\<^sup>c", "by blast"], ["", "lemma other_falsified:\n  assumes C1'_p: \"ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and> falsifies\\<^sub>g (B@[d]) C\\<^sub>1'\" \n  assumes l_p: \"l \\<in> C\\<^sub>1'\" \"nat_of_fatom (get_atom l) = length B\"\n  assumes other: \"lo \\<in> C\\<^sub>1'\" \"lo \\<noteq> l\"\n  shows \"falsifies\\<^sub>l B lo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "let ?i = \"nat_of_fatom (get_atom lo)\""], ["proof (state)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "have ground_l\\<^sub>2: \"ground\\<^sub>l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l l", "using l_p C1'_p"], ["proof (prove)\nusing this:\n  l \\<in> C\\<^sub>1'\n  nat_of_fatom (get_atom l) = length B\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l", "by auto\n  \\<comment> \\<open>They are, of course, also ground:\\<close>"], ["proof (state)\nthis:\n  ground\\<^sub>l l\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "have ground_lo: \"ground\\<^sub>l lo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l lo", "using C1'_p other"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'\n  lo \\<in> C\\<^sub>1'\n  lo \\<noteq> l\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l lo", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "from C1'_p"], ["proof (chain)\npicking this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'", "have \"falsifies\\<^sub>g (B@[d]) (C\\<^sub>1' - {l})\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g (B @ [d]) (C\\<^sub>1' - {l})", "by auto\n  \\<comment> \\<open>And indeed, falsified by @{term \"B@[d]\"}:\\<close>"], ["proof (state)\nthis:\n  falsifies\\<^sub>g (B @ [d]) (C\\<^sub>1' - {l})\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g (B @ [d]) (C\\<^sub>1' - {l})", "have loB\\<^sub>2: \"falsifies\\<^sub>l (B@[d]) lo\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g (B @ [d]) (C\\<^sub>1' - {l})\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (B @ [d]) lo", "using other"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g (B @ [d]) (C\\<^sub>1' - {l})\n  lo \\<in> C\\<^sub>1'\n  lo \\<noteq> l\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l (B @ [d]) lo", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>l (B @ [d]) lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>l (B @ [d]) lo", "have \"?i < length (B @ [d])\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>l (B @ [d]) lo\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) < length (B @ [d])", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  ground\\<^sub>l lo \\<and>\n  (let i = nat_of_fatom (get_atom lo)\n   in i < length (B @ [d]) \\<and> (B @ [d]) ! i = (\\<not> sign lo))\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) < length (B @ [d])", "by meson\n  \\<comment> \\<open>And they have numbers in the range of @{term \"B@[d]\"}, i.e. less than @{term \"length B + 1\"}:\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) < length (B @ [d])\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom lo) < length (B @ [d])", "have \"nat_of_fatom (get_atom lo) < length B + 1\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) < length (B @ [d])\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) < length B + 1", "using undiag_diag_fatom"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) < length (B @ [d])\n  nat_of_fatom (fatom_of_nat ?n) = ?n\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) < length B + 1", "by (cases lo) auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) < length B + 1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "moreover"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) < length B + 1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "have l_lo: \"l\\<noteq>lo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> lo", "using other"], ["proof (prove)\nusing this:\n  lo \\<in> C\\<^sub>1'\n  lo \\<noteq> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> lo", "by auto\n  \\<comment> \\<open>The are not the complement of @{term l }, since then the clause could not be falsified:\\<close>"], ["proof (state)\nthis:\n  l \\<noteq> lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "have lc_lo: \"lo \\<noteq> l\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lo \\<noteq> l\\<^sup>c", "using C1'_p l_p other complements_do_not_falsify[of lo C\\<^sub>1' l \"(B@[d])\"]"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'\n  l \\<in> C\\<^sub>1'\n  nat_of_fatom (get_atom l) = length B\n  lo \\<in> C\\<^sub>1'\n  lo \\<noteq> l\n  \\<lbrakk>lo \\<in> C\\<^sub>1'; l \\<in> C\\<^sub>1';\n   falsifies\\<^sub>g (B @ [d]) C\\<^sub>1'\\<rbrakk>\n  \\<Longrightarrow> lo \\<noteq> l\\<^sup>c\n\ngoal (1 subgoal):\n 1. lo \\<noteq> l\\<^sup>c", "by auto"], ["proof (state)\nthis:\n  lo \\<noteq> l\\<^sup>c\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "from l_lo lc_lo"], ["proof (chain)\npicking this:\n  l \\<noteq> lo\n  lo \\<noteq> l\\<^sup>c", "have \"get_atom l \\<noteq> get_atom lo\""], ["proof (prove)\nusing this:\n  l \\<noteq> lo\n  lo \\<noteq> l\\<^sup>c\n\ngoal (1 subgoal):\n 1. get_atom l \\<noteq> get_atom lo", "using sign_comp_atom"], ["proof (prove)\nusing this:\n  l \\<noteq> lo\n  lo \\<noteq> l\\<^sup>c\n  (sign ?l\\<^sub>1 \\<noteq> sign ?l\\<^sub>2 \\<and>\n   get_atom ?l\\<^sub>1 = get_atom ?l\\<^sub>2) =\n  (?l\\<^sub>2 = ?l\\<^sub>1\\<^sup>c)\n\ngoal (1 subgoal):\n 1. get_atom l \\<noteq> get_atom lo", "by metis"], ["proof (state)\nthis:\n  get_atom l \\<noteq> get_atom lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  get_atom l \\<noteq> get_atom lo", "have \"nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)\""], ["proof (prove)\nusing this:\n  get_atom l \\<noteq> get_atom lo\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)", "using nat_of_fatom_bij ground_lo ground_l\\<^sub>2 ground\\<^sub>l_ground_fatom"], ["proof (prove)\nusing this:\n  get_atom l \\<noteq> get_atom lo\n  bij_betw nat_of_fatom ground_fatoms UNIV\n  ground\\<^sub>l lo\n  ground\\<^sub>l l\n  ground\\<^sub>l ?l \\<Longrightarrow> get_atom ?l \\<in> ground_fatoms\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)", "unfolding bij_betw_def inj_on_def"], ["proof (prove)\nusing this:\n  get_atom l \\<noteq> get_atom lo\n  (\\<forall>x\\<in>ground_fatoms.\n      \\<forall>y\\<in>ground_fatoms.\n         nat_of_fatom x = nat_of_fatom y \\<longrightarrow> x = y) \\<and>\n  nat_of_fatom ` ground_fatoms = UNIV\n  ground\\<^sub>l lo\n  ground\\<^sub>l l\n  ground\\<^sub>l ?l \\<Longrightarrow> get_atom ?l \\<in> ground_fatoms\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)", "by metis\n  \\<comment> \\<open>Therefore they have different numbers:\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)", "have \"nat_of_fatom (get_atom lo) \\<noteq> length B\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) \\<noteq> length B", "using l_p"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) \\<noteq> nat_of_fatom (get_atom l)\n  l \\<in> C\\<^sub>1'\n  nat_of_fatom (get_atom l) = length B\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) \\<noteq> length B", "by auto"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) \\<noteq> length B\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "ultimately \n  \\<comment> \\<open>So their numbers are in the range of @{term B}:\\<close>"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom lo) < length B + 1\n  nat_of_fatom (get_atom lo) \\<noteq> length B", "have \"nat_of_fatom (get_atom lo) < length B\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) < length B + 1\n  nat_of_fatom (get_atom lo) \\<noteq> length B\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom lo) < length B", "by auto\n  \\<comment> \\<open>So we did not need the last index of @{term \"B@[d]\"} to falsify them, i.e. @{term B} suffices:\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom lo) < length B\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "then"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom lo) < length B", "show \"falsifies\\<^sub>l B lo\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) < length B\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "using loB\\<^sub>2 shorter_falsifies\\<^sub>l"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom lo) < length B\n  falsifies\\<^sub>l (B @ [d]) lo\n  \\<lbrakk>falsifies\\<^sub>l (?ds @ ?d) ?l;\n   nat_of_fatom (get_atom ?l) < length ?ds\\<rbrakk>\n  \\<Longrightarrow> falsifies\\<^sub>l ?ds ?l\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>l B lo", "by blast"], ["proof (state)\nthis:\n  falsifies\\<^sub>l B lo\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem completeness':\n  assumes \"closed_tree T Cs\"\n  assumes \"\\<forall>C\\<in>Cs. finite C\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "using assms"], ["proof (prove)\nusing this:\n  closed_tree T Cs\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "proof (induction T arbitrary: Cs rule: measure_induct_rule[of treesize])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "fix T :: tree"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "fix Cs :: \"fterm clause set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "assume ih: \"\\<And>T' Cs. treesize T' < treesize T \\<Longrightarrow> closed_tree T' Cs \\<Longrightarrow> \n                            \\<forall>C\\<in>Cs. finite C \\<Longrightarrow> \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (state)\nthis:\n  \\<lbrakk>treesize ?T' < treesize T; closed_tree ?T' ?Cs;\n   \\<forall>C\\<in>?Cs. finite C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs'.\n                       resolution_deriv ?Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "assume clo: \"closed_tree T Cs\""], ["proof (state)\nthis:\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "assume finite_Cs: \"\\<forall>C\\<in>Cs. finite C\""], ["proof (state)\nthis:\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "{ \\<comment> \\<open>Base case:\\<close>"], ["proof (state)\nthis:\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "assume \"treesize T = 0\""], ["proof (state)\nthis:\n  treesize T = 0\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  treesize T = 0", "have \"T=Leaf\""], ["proof (prove)\nusing this:\n  treesize T = 0\n\ngoal (1 subgoal):\n 1. T = Leaf", "using treesize_Leaf"], ["proof (prove)\nusing this:\n  treesize T = 0\n  treesize ?T = 0 \\<Longrightarrow> ?T = Leaf\n\ngoal (1 subgoal):\n 1. T = Leaf", "by auto"], ["proof (state)\nthis:\n  T = Leaf\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  T = Leaf", "have \"closed_branch [] Leaf Cs\""], ["proof (prove)\nusing this:\n  T = Leaf\n\ngoal (1 subgoal):\n 1. closed_branch [] Leaf Cs", "using branch_inv_Leaf clo"], ["proof (prove)\nusing this:\n  T = Leaf\n  branch ?b Leaf = (?b = [])\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. closed_branch [] Leaf Cs", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  T = Leaf\n  branch ?b Leaf = (?b = [])\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. closed_branch [] Leaf Cs", "by auto"], ["proof (state)\nthis:\n  closed_branch [] Leaf Cs\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  closed_branch [] Leaf Cs", "have \"falsifies\\<^sub>c\\<^sub>s [] Cs\""], ["proof (prove)\nusing this:\n  closed_branch [] Leaf Cs\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c\\<^sub>s [] Cs", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c\\<^sub>s [] Cs\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c\\<^sub>s [] Cs", "have \"{} \\<in> Cs\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c\\<^sub>s [] Cs\n\ngoal (1 subgoal):\n 1. {} \\<in> Cs", "using falsifies\\<^sub>c\\<^sub>s_empty"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c\\<^sub>s [] Cs\n  falsifies\\<^sub>c [] ?C \\<Longrightarrow> ?C = {}\n\ngoal (1 subgoal):\n 1. {} \\<in> Cs", "by auto"], ["proof (state)\nthis:\n  {} \\<in> Cs\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  {} \\<in> Cs", "have \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\nusing this:\n  {} \\<in> Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "unfolding resolution_deriv_def"], ["proof (prove)\nusing this:\n  {} \\<in> Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_step\\<^sup>*\\<^sup>* Cs Cs' \\<and> {} \\<in> Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "}"], ["proof (state)\nthis:\n  treesize T = 0 \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  treesize T = 0 \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "{ \\<comment> \\<open>Induction case:\\<close>"], ["proof (state)\nthis:\n  treesize T = 0 \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "assume \"treesize T > 0\""], ["proof (state)\nthis:\n  0 < treesize T\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  0 < treesize T", "have \"\\<exists>l r. T=Branching l r\""], ["proof (prove)\nusing this:\n  0 < treesize T\n\ngoal (1 subgoal):\n 1. \\<exists>l r. T = Branching l r", "by (cases T) auto\n    \n    \\<comment> \\<open>Finding sibling branches and their corresponding clauses:\\<close>"], ["proof (state)\nthis:\n  \\<exists>l r. T = Branching l r\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<exists>l r. T = Branching l r", "obtain B where b_p: \"internal B T \\<and> branch (B@[True]) T \\<and> branch (B@[False]) T\""], ["proof (prove)\nusing this:\n  \\<exists>l r. T = Branching l r\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        internal B T \\<and>\n        branch (B @ [True]) T \\<and>\n        branch (B @ [False]) T \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using internal_branch[of _ \"[]\" _ T] Branching_Leaf_Leaf_Tree"], ["proof (prove)\nusing this:\n  \\<exists>l r. T = Branching l r\n  branch (?ds1.0 @ [] @ [?d]) T \\<Longrightarrow> internal ?ds1.0 T\n  ?T = Branching ?T1.0 ?T2.0 \\<Longrightarrow>\n  \\<exists>B. branch (B @ [True]) ?T \\<and> branch (B @ [False]) ?T\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        internal B T \\<and>\n        branch (B @ [True]) T \\<and>\n        branch (B @ [False]) T \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?B\\<^sub>1 = \"B@[True]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?B\\<^sub>2 = \"B@[False]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain C\\<^sub>1o where C\\<^sub>1o_p: \"C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c ?B\\<^sub>1 C\\<^sub>1o\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>1o.\n        C\\<^sub>1o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using b_p clo"], ["proof (prove)\nusing this:\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>1o.\n        C\\<^sub>1o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>1o.\n        C\\<^sub>1o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain C\\<^sub>2o where C\\<^sub>2o_p: \"C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c ?B\\<^sub>2 C\\<^sub>2o\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>2o.\n        C\\<^sub>2o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using b_p clo"], ["proof (prove)\nusing this:\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>2o.\n        C\\<^sub>2o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>2o.\n        C\\<^sub>2o \\<in> Cs \\<and>\n        falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis\n\n    \\<comment> \\<open>Standardizing the clauses apart:\\<close>"], ["proof (state)\nthis:\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?C\\<^sub>1 = \"std\\<^sub>1 C\\<^sub>1o\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?C\\<^sub>2 = \"std\\<^sub>2 C\\<^sub>2o\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have C\\<^sub>1_p: \"falsifies\\<^sub>c ?B\\<^sub>1 ?C\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (B @ [True])\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "using std\\<^sub>1_falsifies C\\<^sub>1o_p"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c ?G ?C\\<^sub>1 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (B @ [True])\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c (B @ [True])\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have C\\<^sub>2_p: \"falsifies\\<^sub>c ?B\\<^sub>2 ?C\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (B @ [False])\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using std\\<^sub>2_falsifies C\\<^sub>2o_p"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c ?G ?C\\<^sub>2 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c (B @ [False])\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c (B @ [False])\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have fin: \"finite ?C\\<^sub>1 \\<and> finite ?C\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n    finite\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using C\\<^sub>1o_p C\\<^sub>2o_p finite_Cs"], ["proof (prove)\nusing this:\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n  \\<forall>C\\<in>Cs. finite C\n\ngoal (1 subgoal):\n 1. finite\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n    finite\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by auto\n\n    \\<comment> \\<open>We go down to the ground world.\\<close>\n    \\<comment> \\<open>Finding the falsifying ground instance @{term C\\<^sub>1'} of @{term ?C\\<^sub>1}, and proving properties about it:\\<close>\n    \n    \\<comment> \\<open>@{term C\\<^sub>1'} is falsified by @{term ?B\\<^sub>1}:\\<close>"], ["proof (state)\nthis:\n  finite\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  finite\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>1_p"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c (B @ [True])\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "obtain C\\<^sub>1' where C\\<^sub>1'_p: \"ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and> instance_of\\<^sub>l\\<^sub>s C\\<^sub>1' ?C\\<^sub>1 \\<and> falsifies\\<^sub>g ?B\\<^sub>1 C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c (B @ [True])\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>1'.\n        ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n        instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n         (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n        falsifies\\<^sub>g (B @ [True]) C\\<^sub>1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"\\<not>falsifies\\<^sub>c B C\\<^sub>1o\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>1o", "using C\\<^sub>1o_p b_p clo"], ["proof (prove)\nusing this:\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>1o", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>1o", "by metis"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>1o\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>1o", "have \"\\<not>falsifies\\<^sub>c B ?C\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>1o\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "using std\\<^sub>1_falsifies"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>1o\n  falsifies\\<^sub>c ?G ?C\\<^sub>1 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "using prod.exhaust_sel"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>1o\n  falsifies\\<^sub>c ?G ?C\\<^sub>1 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "by blast\n    \\<comment> \\<open>@{term C\\<^sub>1'} is not falsified by @{term B}:\\<close>"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x)))", "have l_B: \"\\<not>falsifies\\<^sub>g B C\\<^sub>1'\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g B C\\<^sub>1'", "using C\\<^sub>1'_p"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g B C\\<^sub>1'", "by auto\n\n    \\<comment> \\<open>@{term C\\<^sub>1'} contains a literal @{term l\\<^sub>1} that is falsified by @{term ?B\\<^sub>1}, but not @{term B}:\\<close>"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>g B C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>1'_p l_B"], ["proof (chain)\npicking this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  \\<not> falsifies\\<^sub>g B C\\<^sub>1'", "obtain l\\<^sub>1 where l\\<^sub>1_p: \"l\\<^sub>1 \\<in> C\\<^sub>1' \\<and> falsifies\\<^sub>l (B@[True]) l\\<^sub>1 \\<and> \\<not>(falsifies\\<^sub>l B l\\<^sub>1)\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  \\<not> falsifies\\<^sub>g B C\\<^sub>1'\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>1.\n        l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n        falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n        \\<not> falsifies\\<^sub>l B l\\<^sub>1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?i = \"nat_of_fatom (get_atom l\\<^sub>1)\"\n\n    \\<comment> \\<open>@{term l\\<^sub>1} is of course ground:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have ground_l\\<^sub>1: \"ground\\<^sub>l l\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "using C\\<^sub>1'_p l\\<^sub>1_p"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>1_p"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1", "have \"\\<not>(?i < length B \\<and> B ! ?i = (\\<not>sign l\\<^sub>1))\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))", "using ground_l\\<^sub>1"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  (ground\\<^sub>l l\\<^sub>1 \\<and>\n   (let i = nat_of_fatom (get_atom l\\<^sub>1)\n    in i < length (B @ [True]) \\<and>\n       (B @ [True]) ! i = (\\<not> sign l\\<^sub>1))) \\<and>\n  \\<not> (ground\\<^sub>l l\\<^sub>1 \\<and>\n          (let i = nat_of_fatom (get_atom l\\<^sub>1)\n           in i < length B \\<and> B ! i = (\\<not> sign l\\<^sub>1)))\n  ground\\<^sub>l l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))", "by meson"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))", "have \"\\<not>(?i < length B \\<and> (B@[True]) ! ?i = (\\<not>sign l\\<^sub>1))\""], ["proof (prove)\nusing this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n            (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n            (\\<not> sign l\\<^sub>1))", "by (metis nth_append) \\<comment> \\<open>Not falsified by @{term B}.\\<close>"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n          (\\<not> sign l\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n          (\\<not> sign l\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>1_p"], ["proof (chain)\npicking this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1", "have \"?i < length (B @ [True]) \\<and> (B @ [True]) ! ?i = (\\<not>sign l\\<^sub>1)\""], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>1) < length (B @ [True]) \\<and>\n    (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n    (\\<not> sign l\\<^sub>1)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  (ground\\<^sub>l l\\<^sub>1 \\<and>\n   (let i = nat_of_fatom (get_atom l\\<^sub>1)\n    in i < length (B @ [True]) \\<and>\n       (B @ [True]) ! i = (\\<not> sign l\\<^sub>1))) \\<and>\n  \\<not> (ground\\<^sub>l l\\<^sub>1 \\<and>\n          (let i = nat_of_fatom (get_atom l\\<^sub>1)\n           in i < length B \\<and> B ! i = (\\<not> sign l\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>1) < length (B @ [True]) \\<and>\n    (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n    (\\<not> sign l\\<^sub>1)", "by meson"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>1) < length (B @ [True]) \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n          (\\<not> sign l\\<^sub>1))\n  nat_of_fatom (get_atom l\\<^sub>1) < length (B @ [True]) \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)", "have l\\<^sub>1_sign_no: \"?i = length B \\<and> (B @ [True]) ! ?i = (\\<not>sign l\\<^sub>1)\""], ["proof (prove)\nusing this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>1) < length B \\<and>\n          (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n          (\\<not> sign l\\<^sub>1))\n  nat_of_fatom (get_atom l\\<^sub>1) < length (B @ [True]) \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n    (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) =\n    (\\<not> sign l\\<^sub>1)", "by auto\n\n    \\<comment> \\<open>@{term l\\<^sub>1} is negative:\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>1_sign_no"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)", "have l\\<^sub>1_sign: \"sign l\\<^sub>1 = False\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)\n\ngoal (1 subgoal):\n 1. sign l\\<^sub>1 = False", "by auto"], ["proof (state)\nthis:\n  sign l\\<^sub>1 = False\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>1_sign_no"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)", "have l\\<^sub>1_no: \"nat_of_fatom (get_atom l\\<^sub>1) = length B\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B \\<and>\n  (B @ [True]) ! nat_of_fatom (get_atom l\\<^sub>1) = (\\<not> sign l\\<^sub>1)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>1) = length B", "by auto\n\n    \\<comment> \\<open>All the other literals in @{term C\\<^sub>1'} must be falsified by B, since they are falsified by @{term ?B\\<^sub>1}, but not @{term l\\<^sub>1}.\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>1'_p l\\<^sub>1_no l\\<^sub>1_p"], ["proof (chain)\npicking this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1", "have B_C\\<^sub>1'l\\<^sub>1: \"falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})", "(* This should be a lemma *)"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})", "using other_falsified"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n  \\<lbrakk>ground\\<^sub>l\\<^sub>s ?C\\<^sub>1' \\<and>\n           falsifies\\<^sub>g (?B @ [?d]) ?C\\<^sub>1';\n   ?l \\<in> ?C\\<^sub>1'; nat_of_fatom (get_atom ?l) = length ?B;\n   ?lo \\<in> ?C\\<^sub>1'; ?lo \\<noteq> ?l\\<rbrakk>\n  \\<Longrightarrow> falsifies\\<^sub>l ?B ?lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})", "by blast\n\n    \\<comment> \\<open>We do the same exercise for @{term ?C\\<^sub>2}, @{term C\\<^sub>2'}, @{term ?B\\<^sub>2}, @{term l\\<^sub>2}:\\<close>"], ["proof (state)\nthis:\n  falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>2_p"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>c (B @ [False])\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "obtain C\\<^sub>2' where C\\<^sub>2'_p: \"ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and> instance_of\\<^sub>l\\<^sub>s C\\<^sub>2' ?C\\<^sub>2 \\<and> falsifies\\<^sub>g ?B\\<^sub>2 C\\<^sub>2'\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>c (B @ [False])\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. (\\<And>C\\<^sub>2'.\n        ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n        instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n         (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n        falsifies\\<^sub>g (B @ [False]) C\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"\\<not>falsifies\\<^sub>c B C\\<^sub>2o\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>2o", "using C\\<^sub>2o_p b_p clo"], ["proof (prove)\nusing this:\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>2o", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B C\\<^sub>2o", "by metis"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>2o\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>2o", "have \"\\<not>falsifies\\<^sub>c B ?C\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>2o\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using std\\<^sub>2_falsifies"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>2o\n  falsifies\\<^sub>c ?G ?C\\<^sub>2 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "using prod.exhaust_sel"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B C\\<^sub>2o\n  falsifies\\<^sub>c ?G ?C\\<^sub>2 =\n  falsifies\\<^sub>c ?G\n   (?C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  (?prod = (fst ?prod, snd ?prod) \\<Longrightarrow> ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>c B\n            (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "by blast"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''2'' @ x)))", "have l_B: \"\\<not>falsifies\\<^sub>g B C\\<^sub>2'\""], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g B C\\<^sub>2'", "using C\\<^sub>2'_p"], ["proof (prove)\nusing this:\n  \\<not> falsifies\\<^sub>c B\n          (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<not> falsifies\\<^sub>g B C\\<^sub>2'", "by auto (* I already had something called l_B... I could give it a new name *)\n    \n    \\<comment> \\<open>@{term C\\<^sub>2'} contains a literal @{term l\\<^sub>2} that is falsified by @{term ?B\\<^sub>2}, but not B:\\<close>"], ["proof (state)\nthis:\n  \\<not> falsifies\\<^sub>g B C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>2'_p l_B"], ["proof (chain)\npicking this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  \\<not> falsifies\\<^sub>g B C\\<^sub>2'", "obtain l\\<^sub>2 where l\\<^sub>2_p: \"l\\<^sub>2 \\<in> C\\<^sub>2' \\<and> falsifies\\<^sub>l (B@[False]) l\\<^sub>2 \\<and> \\<not>falsifies\\<^sub>l B l\\<^sub>2\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  \\<not> falsifies\\<^sub>g B C\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>l\\<^sub>2.\n        l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n        falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n        \\<not> falsifies\\<^sub>l B l\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "let ?i = \"nat_of_fatom (get_atom l\\<^sub>2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have ground_l\\<^sub>2: \"ground\\<^sub>l l\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>2", "using C\\<^sub>2'_p l\\<^sub>2_p"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n\ngoal (1 subgoal):\n 1. ground\\<^sub>l l\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  ground\\<^sub>l l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>2_p"], ["proof (chain)\npicking this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2", "have \"\\<not>(?i < length B \\<and> B ! ?i = (\\<not>sign l\\<^sub>2))\""], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))", "using ground_l\\<^sub>2"], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n  ground\\<^sub>l l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  (ground\\<^sub>l l\\<^sub>2 \\<and>\n   (let i = nat_of_fatom (get_atom l\\<^sub>2)\n    in i < length (B @ [False]) \\<and>\n       (B @ [False]) ! i = (\\<not> sign l\\<^sub>2))) \\<and>\n  \\<not> (ground\\<^sub>l l\\<^sub>2 \\<and>\n          (let i = nat_of_fatom (get_atom l\\<^sub>2)\n           in i < length B \\<and> B ! i = (\\<not> sign l\\<^sub>2)))\n  ground\\<^sub>l l\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n            B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))", "by meson"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))", "have \"\\<not>(?i < length B \\<and> (B@[False]) ! ?i = (\\<not>sign l\\<^sub>2))\""], ["proof (prove)\nusing this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          B ! nat_of_fatom (get_atom l\\<^sub>2) = (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n            (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n            (\\<not> sign l\\<^sub>2))", "by (metis nth_append) \\<comment> \\<open>Not falsified by @{term B}.\\<close>"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n          (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n          (\\<not> sign l\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>2_p"], ["proof (chain)\npicking this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2", "have \"?i < length (B @ [False]) \\<and> (B @ [False]) ! ?i = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>2) < length (B @ [False]) \\<and>\n    (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n    (\\<not> sign l\\<^sub>2)", "unfolding falsifies\\<^sub>l_def"], ["proof (prove)\nusing this:\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  (ground\\<^sub>l l\\<^sub>2 \\<and>\n   (let i = nat_of_fatom (get_atom l\\<^sub>2)\n    in i < length (B @ [False]) \\<and>\n       (B @ [False]) ! i = (\\<not> sign l\\<^sub>2))) \\<and>\n  \\<not> (ground\\<^sub>l l\\<^sub>2 \\<and>\n          (let i = nat_of_fatom (get_atom l\\<^sub>2)\n           in i < length B \\<and> B ! i = (\\<not> sign l\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>2) < length (B @ [False]) \\<and>\n    (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n    (\\<not> sign l\\<^sub>2)", "by meson"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>2) < length (B @ [False]) \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n          (\\<not> sign l\\<^sub>2))\n  nat_of_fatom (get_atom l\\<^sub>2) < length (B @ [False]) \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)", "have l\\<^sub>2_sign_no: \"?i = length B \\<and> (B @ [False]) ! ?i = (\\<not>sign l\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<not> (nat_of_fatom (get_atom l\\<^sub>2) < length B \\<and>\n          (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n          (\\<not> sign l\\<^sub>2))\n  nat_of_fatom (get_atom l\\<^sub>2) < length (B @ [False]) \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n    (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n    (\\<not> sign l\\<^sub>2)", "by auto\n\n    \\<comment> \\<open>@{term l\\<^sub>2} is negative:\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>2_sign_no"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)", "have l\\<^sub>2_sign: \"sign l\\<^sub>2 = True\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. sign l\\<^sub>2 = True", "by auto"], ["proof (state)\nthis:\n  sign l\\<^sub>2 = True\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from l\\<^sub>2_sign_no"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)", "have l\\<^sub>2_no: \"nat_of_fatom (get_atom l\\<^sub>2) = length B\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B \\<and>\n  (B @ [False]) ! nat_of_fatom (get_atom l\\<^sub>2) =\n  (\\<not> sign l\\<^sub>2)\n\ngoal (1 subgoal):\n 1. nat_of_fatom (get_atom l\\<^sub>2) = length B", "by auto\n\n    \\<comment> \\<open>All the other literals in @{term C\\<^sub>2'} must be falsified by B, since they are falsified by \n          @{term ?B\\<^sub>2}, but not @{term l\\<^sub>2}.\\<close>"], ["proof (state)\nthis:\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from C\\<^sub>2'_p l\\<^sub>2_no l\\<^sub>2_p"], ["proof (chain)\npicking this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2", "have B_C\\<^sub>2'l\\<^sub>2: \"falsifies\\<^sub>g B (C\\<^sub>2' - {l\\<^sub>2})\""], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B (C\\<^sub>2' - {l\\<^sub>2})", "using other_falsified"], ["proof (prove)\nusing this:\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n  \\<lbrakk>ground\\<^sub>l\\<^sub>s ?C\\<^sub>1' \\<and>\n           falsifies\\<^sub>g (?B @ [?d]) ?C\\<^sub>1';\n   ?l \\<in> ?C\\<^sub>1'; nat_of_fatom (get_atom ?l) = length ?B;\n   ?lo \\<in> ?C\\<^sub>1'; ?lo \\<noteq> ?l\\<rbrakk>\n  \\<Longrightarrow> falsifies\\<^sub>l ?B ?lo\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B (C\\<^sub>2' - {l\\<^sub>2})", "by blast\n\n    \\<comment> \\<open>Proving some properties about @{term C\\<^sub>1'} and @{term C\\<^sub>2'}, @{term l\\<^sub>1} and @{term l\\<^sub>2}, as well as \n          the resolvent of @{term C\\<^sub>1'} and @{term C\\<^sub>2'}:\\<close>"], ["proof (state)\nthis:\n  falsifies\\<^sub>g B (C\\<^sub>2' - {l\\<^sub>2})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have l\\<^sub>2cisl\\<^sub>1: \"l\\<^sub>2\\<^sup>c = l\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "(* Could perhaps be a lemma *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "from l\\<^sub>1_no l\\<^sub>2_no ground_l\\<^sub>1 ground_l\\<^sub>2"], ["proof (chain)\npicking this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  ground\\<^sub>l l\\<^sub>1\n  ground\\<^sub>l l\\<^sub>2", "have \"get_atom l\\<^sub>1 = get_atom l\\<^sub>2\""], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  ground\\<^sub>l l\\<^sub>1\n  ground\\<^sub>l l\\<^sub>2\n\ngoal (1 subgoal):\n 1. get_atom l\\<^sub>1 = get_atom l\\<^sub>2", "using nat_of_fatom_bij ground\\<^sub>l_ground_fatom"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  ground\\<^sub>l l\\<^sub>1\n  ground\\<^sub>l l\\<^sub>2\n  bij_betw nat_of_fatom ground_fatoms UNIV\n  ground\\<^sub>l ?l \\<Longrightarrow> get_atom ?l \\<in> ground_fatoms\n\ngoal (1 subgoal):\n 1. get_atom l\\<^sub>1 = get_atom l\\<^sub>2", "unfolding bij_betw_def inj_on_def"], ["proof (prove)\nusing this:\n  nat_of_fatom (get_atom l\\<^sub>1) = length B\n  nat_of_fatom (get_atom l\\<^sub>2) = length B\n  ground\\<^sub>l l\\<^sub>1\n  ground\\<^sub>l l\\<^sub>2\n  (\\<forall>x\\<in>ground_fatoms.\n      \\<forall>y\\<in>ground_fatoms.\n         nat_of_fatom x = nat_of_fatom y \\<longrightarrow> x = y) \\<and>\n  nat_of_fatom ` ground_fatoms = UNIV\n  ground\\<^sub>l ?l \\<Longrightarrow> get_atom ?l \\<in> ground_fatoms\n\ngoal (1 subgoal):\n 1. get_atom l\\<^sub>1 = get_atom l\\<^sub>2", "by metis"], ["proof (state)\nthis:\n  get_atom l\\<^sub>1 = get_atom l\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "then"], ["proof (chain)\npicking this:\n  get_atom l\\<^sub>1 = get_atom l\\<^sub>2", "show \"l\\<^sub>2\\<^sup>c = l\\<^sub>1\""], ["proof (prove)\nusing this:\n  get_atom l\\<^sub>1 = get_atom l\\<^sub>2\n\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "using l\\<^sub>1_sign l\\<^sub>2_sign"], ["proof (prove)\nusing this:\n  get_atom l\\<^sub>1 = get_atom l\\<^sub>2\n  sign l\\<^sub>1 = False\n  sign l\\<^sub>2 = True\n\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "using sign_comp_atom"], ["proof (prove)\nusing this:\n  get_atom l\\<^sub>1 = get_atom l\\<^sub>2\n  sign l\\<^sub>1 = False\n  sign l\\<^sub>2 = True\n  (sign ?l\\<^sub>1 \\<noteq> sign ?l\\<^sub>2 \\<and>\n   get_atom ?l\\<^sub>1 = get_atom ?l\\<^sub>2) =\n  (?l\\<^sub>2 = ?l\\<^sub>1\\<^sup>c)\n\ngoal (1 subgoal):\n 1. l\\<^sub>2\\<^sup>c = l\\<^sub>1", "by metis"], ["proof (state)\nthis:\n  l\\<^sub>2\\<^sup>c = l\\<^sub>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l\\<^sub>2\\<^sup>c = l\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} Resolution.\\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>", "unfolding applicable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. C\\<^sub>1' \\<noteq> {} \\<and>\n    C\\<^sub>2' \\<noteq> {} \\<and>\n    {l\\<^sub>1} \\<noteq> {} \\<and>\n    {l\\<^sub>2} \\<noteq> {} \\<and>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>1' \\<inter>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>2' =\n    {} \\<and>\n    {l\\<^sub>1} \\<subseteq> C\\<^sub>1' \\<and>\n    {l\\<^sub>2} \\<subseteq> C\\<^sub>2' \\<and>\n    mgu\\<^sub>l\\<^sub>s \\<epsilon>\n     ({l\\<^sub>1} \\<union> {l\\<^sub>2}\\<^sup>C)", "using l\\<^sub>1_p l\\<^sub>2_p C\\<^sub>1'_p ground\\<^sub>l\\<^sub>s_vars\\<^sub>l\\<^sub>s l\\<^sub>2cisl\\<^sub>1 empty_comp2"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  ground\\<^sub>l\\<^sub>s ?L \\<Longrightarrow> vars\\<^sub>l\\<^sub>s ?L = {}\n  l\\<^sub>2\\<^sup>c = l\\<^sub>1\n  \\<epsilon> \\<cdot> ?\\<sigma> = ?\\<sigma>\n\ngoal (1 subgoal):\n 1. C\\<^sub>1' \\<noteq> {} \\<and>\n    C\\<^sub>2' \\<noteq> {} \\<and>\n    {l\\<^sub>1} \\<noteq> {} \\<and>\n    {l\\<^sub>2} \\<noteq> {} \\<and>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>1' \\<inter>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>2' =\n    {} \\<and>\n    {l\\<^sub>1} \\<subseteq> C\\<^sub>1' \\<and>\n    {l\\<^sub>2} \\<subseteq> C\\<^sub>2' \\<and>\n    mgu\\<^sub>l\\<^sub>s \\<epsilon>\n     ({l\\<^sub>1} \\<union> {l\\<^sub>2}\\<^sup>C)", "unfolding mgu\\<^sub>l\\<^sub>s_def unifier\\<^sub>l\\<^sub>s_def"], ["proof (prove)\nusing this:\n  l\\<^sub>1 \\<in> C\\<^sub>1' \\<and>\n  falsifies\\<^sub>l (B @ [True]) l\\<^sub>1 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>1\n  l\\<^sub>2 \\<in> C\\<^sub>2' \\<and>\n  falsifies\\<^sub>l (B @ [False]) l\\<^sub>2 \\<and>\n  \\<not> falsifies\\<^sub>l B l\\<^sub>2\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  ground\\<^sub>l\\<^sub>s ?L \\<Longrightarrow> vars\\<^sub>l\\<^sub>s ?L = {}\n  l\\<^sub>2\\<^sup>c = l\\<^sub>1\n  \\<epsilon> \\<cdot> ?\\<sigma> = ?\\<sigma>\n\ngoal (1 subgoal):\n 1. C\\<^sub>1' \\<noteq> {} \\<and>\n    C\\<^sub>2' \\<noteq> {} \\<and>\n    {l\\<^sub>1} \\<noteq> {} \\<and>\n    {l\\<^sub>2} \\<noteq> {} \\<and>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>1' \\<inter>\n    vars\\<^sub>l\\<^sub>s C\\<^sub>2' =\n    {} \\<and>\n    {l\\<^sub>1} \\<subseteq> C\\<^sub>1' \\<and>\n    {l\\<^sub>2} \\<subseteq> C\\<^sub>2' \\<and>\n    (\\<exists>l'.\n        \\<forall>l\\<in>{l\\<^sub>1} \\<union> {l\\<^sub>2}\\<^sup>C.\n           l \\<cdot>\\<^sub>l \\<epsilon> = l') \\<and>\n    (\\<forall>u.\n        (\\<exists>l'.\n            \\<forall>l\\<in>{l\\<^sub>1} \\<union> {l\\<^sub>2}\\<^sup>C.\n               l \\<cdot>\\<^sub>l u = l') \\<longrightarrow>\n        (\\<exists>i. u = \\<epsilon> \\<cdot> i))", "by auto\n    \\<comment> \\<open>Lifting to get a resolvent of @{term ?C\\<^sub>1} and @{term ?C\\<^sub>2}:\\<close>"], ["proof (state)\nthis:\n  applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>", "obtain L\\<^sub>1 L\\<^sub>2 \\<tau> where L\\<^sub>1L\\<^sub>2\\<tau>_p: \"applicable ?C\\<^sub>1 ?C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>  \\<and> instance_of\\<^sub>l\\<^sub>s (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} Resolution.\\<epsilon>) (resolution ?C\\<^sub>1 ?C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>)\""], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n        applicable\n         (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n         (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n         L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n        instance_of\\<^sub>l\\<^sub>s\n         (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2}\n           \\<epsilon>)\n         (resolution\n           (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n           (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n           L\\<^sub>1 L\\<^sub>2 \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using std_apart_apart C\\<^sub>1'_p C\\<^sub>2'_p lifting[of ?C\\<^sub>1 ?C\\<^sub>2 C\\<^sub>1' C\\<^sub>2' \"{l\\<^sub>1}\" \"{l\\<^sub>2}\" Resolution.\\<epsilon>] fin"], ["proof (prove)\nusing this:\n  applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>\n  vars\\<^sub>l\\<^sub>s\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n  vars\\<^sub>l\\<^sub>s\n   (?C\\<^sub>2 \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n  {}\n  ground\\<^sub>l\\<^sub>s C\\<^sub>1' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [True]) C\\<^sub>1'\n  ground\\<^sub>l\\<^sub>s C\\<^sub>2' \\<and>\n  instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''2'' @ x))) \\<and>\n  falsifies\\<^sub>g (B @ [False]) C\\<^sub>2'\n  \\<lbrakk>finite\n            (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n           finite\n            (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n             (\\<lambda>x. \\<epsilon> (''2'' @ x)));\n   vars\\<^sub>l\\<^sub>s\n    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<inter>\n   vars\\<^sub>l\\<^sub>s\n    (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))) =\n   {};\n   instance_of\\<^sub>l\\<^sub>s C\\<^sub>1'\n    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n   instance_of\\<^sub>l\\<^sub>s C\\<^sub>2'\n    (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x)));\n   applicable C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2}\n    \\<epsilon>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n                       applicable\n                        (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n                        (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n                        L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n                       instance_of\\<^sub>l\\<^sub>s\n                        (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1}\n                          {l\\<^sub>2} \\<epsilon>)\n                        (resolution\n                          (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                           (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n                          (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                           (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n                          L\\<^sub>1 L\\<^sub>2 \\<tau>)\n  finite\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  finite\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. (\\<And>L\\<^sub>1 L\\<^sub>2 \\<tau>.\n        applicable\n         (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n         (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n         L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n        instance_of\\<^sub>l\\<^sub>s\n         (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2}\n           \\<epsilon>)\n         (resolution\n           (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n           (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n            (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n           L\\<^sub>1 L\\<^sub>2 \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto\n\n\n    \\<comment> \\<open>Defining the clause to be derived, the new clausal form and the new tree:\\<close>\n    \\<comment> \\<open>We name the resolvent @{term C}.\\<close>"], ["proof (state)\nthis:\n  applicable\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n   (resolution\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     L\\<^sub>1 L\\<^sub>2 \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain C where C_p: \"C = resolution ?C\\<^sub>1 ?C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        C =\n        resolution\n         (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n         (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n         L\\<^sub>1 L\\<^sub>2 \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C =\n  resolution\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain CsNext where CsNext_p: \"CsNext = Cs \\<union> {?C\\<^sub>1, ?C\\<^sub>2, C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>CsNext.\n        CsNext =\n        Cs \\<union>\n        {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n         (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n         C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n         (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n         C} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CsNext =\n  Cs \\<union>\n  {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n   C}\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain T'' where T''_p: \"T'' = delete B T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T''. T'' = delete B T \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto \n        \\<comment> \\<open>Here we delete the two branch children @{term ?B\\<^sub>1} and @{term ?B\\<^sub>2} of @{term B}.\\<close>\n    \n    \\<comment> \\<open>Our new clause is falsified by the branch @{term B} of our new tree:\\<close>"], ["proof (state)\nthis:\n  T'' = delete B T\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"falsifies\\<^sub>g B ((C\\<^sub>1' - {l\\<^sub>1}) \\<union> (C\\<^sub>2' - {l\\<^sub>2}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B\n     (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))", "using B_C\\<^sub>1'l\\<^sub>1 B_C\\<^sub>2'l\\<^sub>2"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g B (C\\<^sub>1' - {l\\<^sub>1})\n  falsifies\\<^sub>g B (C\\<^sub>2' - {l\\<^sub>2})\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B\n     (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))", "by cases auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>g B\n   (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g B\n   (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))", "have \"falsifies\\<^sub>g B (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} Resolution.\\<epsilon>)\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g B\n   (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B\n     (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)", "unfolding resolution_def empty_subls"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g B\n   (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>g B\n     (C\\<^sub>1' - {l\\<^sub>1} \\<union> (C\\<^sub>2' - {l\\<^sub>2}))", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>g B\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  falsifies\\<^sub>g B\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)", "have falsifies_C: \"falsifies\\<^sub>c B C\""], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g B\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c B C", "using C_p L\\<^sub>1L\\<^sub>2\\<tau>_p"], ["proof (prove)\nusing this:\n  falsifies\\<^sub>g B\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n  C =\n  resolution\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau>\n  applicable\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n   (resolution\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     L\\<^sub>1 L\\<^sub>2 \\<tau>)\n\ngoal (1 subgoal):\n 1. falsifies\\<^sub>c B C", "by auto"], ["proof (state)\nthis:\n  falsifies\\<^sub>c B C\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have T''_smaller: \"treesize T'' < treesize T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treesize T'' < treesize T", "using treezise_delete T''_p b_p"], ["proof (prove)\nusing this:\n  internal ?p ?T \\<Longrightarrow> treesize (delete ?p ?T) < treesize ?T\n  T'' = delete B T\n  internal B T \\<and> branch (B @ [True]) T \\<and> branch (B @ [False]) T\n\ngoal (1 subgoal):\n 1. treesize T'' < treesize T", "by auto"], ["proof (state)\nthis:\n  treesize T'' < treesize T\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have T''_bran: \"anybranch T'' (\\<lambda>b. closed_branch b T'' CsNext)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. anybranch T'' (\\<lambda>p. closed_branch p T'' CsNext)", "proof (rule allI; rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. branch p T'' \\<Longrightarrow> closed_branch p T'' CsNext", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p. branch p T'' \\<Longrightarrow> closed_branch p T'' CsNext", "assume br: \"branch b T''\""], ["proof (state)\nthis:\n  branch b T''\n\ngoal (1 subgoal):\n 1. \\<And>p. branch p T'' \\<Longrightarrow> closed_branch p T'' CsNext", "from br"], ["proof (chain)\npicking this:\n  branch b T''", "have \"b = B \\<or> branch b T\""], ["proof (prove)\nusing this:\n  branch b T''\n\ngoal (1 subgoal):\n 1. b = B \\<or> branch b T", "using branch_delete T''_p"], ["proof (prove)\nusing this:\n  branch b T''\n  branch ?p (delete ?ds ?T) \\<Longrightarrow> branch ?p ?T \\<or> ?p = ?ds\n  T'' = delete B T\n\ngoal (1 subgoal):\n 1. b = B \\<or> branch b T", "by auto"], ["proof (state)\nthis:\n  b = B \\<or> branch b T\n\ngoal (1 subgoal):\n 1. \\<And>p. branch p T'' \\<Longrightarrow> closed_branch p T'' CsNext", "then"], ["proof (chain)\npicking this:\n  b = B \\<or> branch b T", "show \"closed_branch b T'' CsNext\""], ["proof (prove)\nusing this:\n  b = B \\<or> branch b T\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. b = B \\<Longrightarrow> closed_branch b T'' CsNext\n 2. branch b T \\<Longrightarrow> closed_branch b T'' CsNext", "assume \"b=B\""], ["proof (state)\nthis:\n  b = B\n\ngoal (2 subgoals):\n 1. b = B \\<Longrightarrow> closed_branch b T'' CsNext\n 2. branch b T \\<Longrightarrow> closed_branch b T'' CsNext", "then"], ["proof (chain)\npicking this:\n  b = B", "show \"closed_branch b T'' CsNext\""], ["proof (prove)\nusing this:\n  b = B\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "using falsifies_C br CsNext_p"], ["proof (prove)\nusing this:\n  b = B\n  falsifies\\<^sub>c B C\n  branch b T''\n  CsNext =\n  Cs \\<union>\n  {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n   C}\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "by auto"], ["proof (state)\nthis:\n  closed_branch b T'' CsNext\n\ngoal (1 subgoal):\n 1. branch b T \\<Longrightarrow> closed_branch b T'' CsNext", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. branch b T \\<Longrightarrow> closed_branch b T'' CsNext", "assume \"branch b T\""], ["proof (state)\nthis:\n  branch b T\n\ngoal (1 subgoal):\n 1. branch b T \\<Longrightarrow> closed_branch b T'' CsNext", "then"], ["proof (chain)\npicking this:\n  branch b T", "show \"closed_branch b T'' CsNext\""], ["proof (prove)\nusing this:\n  branch b T\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "using clo br T''_p CsNext_p"], ["proof (prove)\nusing this:\n  branch b T\n  closed_tree T Cs\n  branch b T''\n  T'' = delete B T\n  CsNext =\n  Cs \\<union>\n  {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n   C}\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  branch b T\n  anybranch T (\\<lambda>p. closed_branch p T Cs) \\<and>\n  anyinternal T (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p Cs)\n  branch b T''\n  T'' = delete B T\n  CsNext =\n  Cs \\<union>\n  {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n   C}\n\ngoal (1 subgoal):\n 1. closed_branch b T'' CsNext", "by auto"], ["proof (state)\nthis:\n  closed_branch b T'' CsNext\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  closed_branch b T'' CsNext\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  anybranch T'' (\\<lambda>p. closed_branch p T'' CsNext)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  anybranch T'' (\\<lambda>p. closed_branch p T'' CsNext)", "have T''_bran2: \"anybranch T'' (\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext)\""], ["proof (prove)\nusing this:\n  anybranch T'' (\\<lambda>p. closed_branch p T'' CsNext)\n\ngoal (1 subgoal):\n 1. anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)", "by auto (* replace T''_bran with this maybe? *)\n\n    \\<comment> \\<open>We cut the tree even smaller to ensure only the branches are falsified, i.e. it is a closed tree:\\<close>"], ["proof (state)\nthis:\n  anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "obtain T' where T'_p: \"T' = cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T'.\n        T' =\n        cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) []\n         T'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T' = cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have T'_smaller: \"treesize T' < treesize T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treesize T' < treesize T", "using treesize_cutoff[of \"\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext\" \"[]\" T''] T''_smaller"], ["proof (prove)\nusing this:\n  treesize (cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T'')\n  \\<le> treesize T''\n  treesize T'' < treesize T\n\ngoal (1 subgoal):\n 1. treesize T' < treesize T", "unfolding T'_p"], ["proof (prove)\nusing this:\n  treesize (cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T'')\n  \\<le> treesize T''\n  treesize T'' < treesize T\n\ngoal (1 subgoal):\n 1. treesize\n     (cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T'')\n    < treesize T", "by auto"], ["proof (state)\nthis:\n  treesize T' < treesize T\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from T''_bran2"], ["proof (chain)\npicking this:\n  anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)", "have \"anybranch T' (\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext)\""], ["proof (prove)\nusing this:\n  anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)", "using cutoff_branch[of T'' \"\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext\"] T'_p"], ["proof (prove)\nusing this:\n  anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n  anybranch T''\n   (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext) \\<Longrightarrow>\n  anybranch (cutoff (\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext) [] T'')\n   (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n  T' = cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T''\n\ngoal (1 subgoal):\n 1. anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)", "by auto"], ["proof (state)\nthis:\n  anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)", "have T'_bran: \"anybranch T' (\\<lambda>b. closed_branch b T' CsNext)\""], ["proof (prove)\nusing this:\n  anybranch T' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. anybranch T' (\\<lambda>p. closed_branch p T' CsNext)", "by auto"], ["proof (state)\nthis:\n  anybranch T' (\\<lambda>p. closed_branch p T' CsNext)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have T'_intr: \"anyinternal T' (\\<lambda>p. \\<not>falsifies\\<^sub>c\\<^sub>s p CsNext)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)", "using T'_p cutoff_internal[of T'' \"\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext\"] T''_bran2"], ["proof (prove)\nusing this:\n  T' = cutoff (\\<lambda>G. falsifies\\<^sub>c\\<^sub>s G CsNext) [] T''\n  anybranch T''\n   (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext) \\<Longrightarrow>\n  anyinternal\n   (cutoff (\\<lambda>b. falsifies\\<^sub>c\\<^sub>s b CsNext) [] T'')\n   (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)\n  anybranch T'' (\\<lambda>p. falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)", "by blast"], ["proof (state)\nthis:\n  anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have T'_closed: \"closed_tree T' CsNext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed_tree T' CsNext", "using T'_bran T'_intr"], ["proof (prove)\nusing this:\n  anybranch T' (\\<lambda>p. closed_branch p T' CsNext)\n  anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. closed_tree T' CsNext", "unfolding closed_tree_def"], ["proof (prove)\nusing this:\n  anybranch T' (\\<lambda>p. closed_branch p T' CsNext)\n  anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)\n\ngoal (1 subgoal):\n 1. anybranch T' (\\<lambda>p. closed_branch p T' CsNext) \\<and>\n    anyinternal T' (\\<lambda>p. \\<not> falsifies\\<^sub>c\\<^sub>s p CsNext)", "by auto"], ["proof (state)\nthis:\n  closed_tree T' CsNext\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have finite_CsNext: \"\\<forall>C\\<in>CsNext. finite C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>CsNext. finite C", "unfolding CsNext_p C_p resolution_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>Cs \\<union>\n                   {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                    (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                    C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                    (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n                    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                     (\\<lambda>x. \\<epsilon> (''1'' @ x))) -\n                    L\\<^sub>1 \\<union>\n                    ((C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                      (\\<lambda>x. \\<epsilon> (''2'' @ x))) -\n                     L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n                    \\<tau>}.\n       finite C", "using finite_Cs fin"], ["proof (prove)\nusing this:\n  \\<forall>C\\<in>Cs. finite C\n  finite\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n    (\\<lambda>x. \\<epsilon> (''1'' @ x))) \\<and>\n  finite\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n\ngoal (1 subgoal):\n 1. \\<forall>C\\<in>Cs \\<union>\n                   {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                    (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                    C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                    (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n                    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                     (\\<lambda>x. \\<epsilon> (''1'' @ x))) -\n                    L\\<^sub>1 \\<union>\n                    ((C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                      (\\<lambda>x. \\<epsilon> (''2'' @ x))) -\n                     L\\<^sub>2) \\<cdot>\\<^sub>l\\<^sub>s\n                    \\<tau>}.\n       finite C", "by auto\n\n    \\<comment> \\<open>By induction hypothesis we get a resolution derivation of @{term \"{}\"} from our new clausal form:\\<close>"], ["proof (state)\nthis:\n  \\<forall>C\\<in>CsNext. finite C\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from T'_smaller T'_closed"], ["proof (chain)\npicking this:\n  treesize T' < treesize T\n  closed_tree T' CsNext", "have \"\\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\""], ["proof (prove)\nusing this:\n  treesize T' < treesize T\n  closed_tree T' CsNext\n\ngoal (1 subgoal):\n 1. \\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''", "using ih[of T' CsNext] finite_CsNext"], ["proof (prove)\nusing this:\n  treesize T' < treesize T\n  closed_tree T' CsNext\n  \\<lbrakk>treesize T' < treesize T; closed_tree T' CsNext;\n   \\<forall>C\\<in>CsNext. finite C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs'.\n                       resolution_deriv CsNext Cs' \\<and> {} \\<in> Cs'\n  \\<forall>C\\<in>CsNext. finite C\n\ngoal (1 subgoal):\n 1. \\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''", "by blast"], ["proof (state)\nthis:\n  \\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''", "obtain Cs'' where Cs''_p: \"resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\""], ["proof (prove)\nusing this:\n  \\<exists>Cs''. resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. (\\<And>Cs''.\n        resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "{ \\<comment> \\<open>Proving that we can actually derive the new clausal form:\\<close>"], ["proof (state)\nthis:\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"resolution_step Cs (Cs \\<union> {?C\\<^sub>1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resolution_step Cs\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))})", "using std\\<^sub>1_renames standardize_apart C\\<^sub>1o_p"], ["proof (prove)\nusing this:\n  var_renaming_of ?C\\<^sub>1\n   (?C\\<^sub>1 \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n  \\<lbrakk>?C \\<in> ?Cs; var_renaming_of ?C ?C'\\<rbrakk>\n  \\<Longrightarrow> resolution_step ?Cs (?Cs \\<union> {?C'})\n  C\\<^sub>1o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [True]) C\\<^sub>1o\n\ngoal (1 subgoal):\n 1. resolution_step Cs\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))})", "by (metis Un_insert_right)"], ["proof (state)\nthis:\n  resolution_step Cs\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  resolution_step Cs\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"resolution_step (Cs \\<union> {?C\\<^sub>1}) (Cs \\<union> {?C\\<^sub>1} \\<union> {?C\\<^sub>2})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))} \\<union>\n      {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})", "using std\\<^sub>2_renames[of C\\<^sub>2o] standardize_apart[of C\\<^sub>2o _ ?C\\<^sub>2] C\\<^sub>2o_p"], ["proof (prove)\nusing this:\n  var_renaming_of C\\<^sub>2o\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n  \\<lbrakk>C\\<^sub>2o \\<in> ?Cs;\n   var_renaming_of C\\<^sub>2o\n    (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x)))\\<rbrakk>\n  \\<Longrightarrow> resolution_step ?Cs\n                     (?Cs \\<union>\n                      {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  C\\<^sub>2o \\<in> Cs \\<and> falsifies\\<^sub>c (B @ [False]) C\\<^sub>2o\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))} \\<union>\n      {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})", "by auto"], ["proof (state)\nthis:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))} \\<union>\n    {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))} \\<union>\n    {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})", "have \"resolution_step (Cs \\<union> {?C\\<^sub>1}) (Cs \\<union> {?C\\<^sub>1,?C\\<^sub>2})\""], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))} \\<union>\n    {C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})", "by (simp add: insert_commute)"], ["proof (state)\nthis:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "moreover"], ["proof (state)\nthis:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})", "have \"resolution_step (Cs \\<union> {?C\\<^sub>1,?C\\<^sub>2}) (Cs \\<union> {?C\\<^sub>1,?C\\<^sub>2} \\<union> {C})\""], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n      {C})", "using L\\<^sub>1L\\<^sub>2\\<tau>_p resolution_rule[of ?C\\<^sub>1 \"Cs \\<union> {?C\\<^sub>1,?C\\<^sub>2}\" ?C\\<^sub>2 L\\<^sub>1 L\\<^sub>2 \\<tau> ]"], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  applicable\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n   (resolution\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     L\\<^sub>1 L\\<^sub>2 \\<tau>)\n  \\<lbrakk>C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x))\n           \\<in> Cs \\<union>\n                 {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                  (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                  C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                  (\\<lambda>x. \\<epsilon> (''2'' @ x))};\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x))\n   \\<in> Cs \\<union>\n         {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n          C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))};\n   applicable\n    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n    (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n    L\\<^sub>1 L\\<^sub>2 \\<tau>\\<rbrakk>\n  \\<Longrightarrow> resolution_step\n                     (Cs \\<union>\n                      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n                     (Cs \\<union>\n                      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n                      {resolution\n                        (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n                        (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n                        L\\<^sub>1 L\\<^sub>2 \\<tau>})\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n      {C})", "using C_p"], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  applicable\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau> \\<and>\n  instance_of\\<^sub>l\\<^sub>s\n   (resolution C\\<^sub>1' C\\<^sub>2' {l\\<^sub>1} {l\\<^sub>2} \\<epsilon>)\n   (resolution\n     (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n     (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n      (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n     L\\<^sub>1 L\\<^sub>2 \\<tau>)\n  \\<lbrakk>C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n           (\\<lambda>x. \\<epsilon> (''1'' @ x))\n           \\<in> Cs \\<union>\n                 {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                  (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                  C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                  (\\<lambda>x. \\<epsilon> (''2'' @ x))};\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x))\n   \\<in> Cs \\<union>\n         {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n          C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n          (\\<lambda>x. \\<epsilon> (''2'' @ x))};\n   applicable\n    (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n    (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n    L\\<^sub>1 L\\<^sub>2 \\<tau>\\<rbrakk>\n  \\<Longrightarrow> resolution_step\n                     (Cs \\<union>\n                      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n                     (Cs \\<union>\n                      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n                       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                       (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n                      {resolution\n                        (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n                        (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n                         (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n                        L\\<^sub>1 L\\<^sub>2 \\<tau>})\n  C =\n  resolution\n   (C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)))\n   (C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)))\n   L\\<^sub>1 L\\<^sub>2 \\<tau>\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n      {C})", "by auto"], ["proof (state)\nthis:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n    {C})\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n    {C})", "have \"resolution_step (Cs \\<union> {?C\\<^sub>1,?C\\<^sub>2}) CsNext\""], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n    {C})\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n     CsNext", "using CsNext_p"], ["proof (prove)\nusing this:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))} \\<union>\n    {C})\n  CsNext =\n  Cs \\<union>\n  {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n   C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s (\\<lambda>x. \\<epsilon> (''2'' @ x)),\n   C}\n\ngoal (1 subgoal):\n 1. resolution_step\n     (Cs \\<union>\n      {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n       C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n       (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n     CsNext", "by (simp add:  Un_commute)"], ["proof (state)\nthis:\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   CsNext\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "ultimately"], ["proof (chain)\npicking this:\n  resolution_step Cs\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   CsNext", "have \"resolution_deriv Cs CsNext\""], ["proof (prove)\nusing this:\n  resolution_step Cs\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   CsNext\n\ngoal (1 subgoal):\n 1. resolution_deriv Cs CsNext", "unfolding resolution_deriv_def"], ["proof (prove)\nusing this:\n  resolution_step Cs\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x))})\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n  resolution_step\n   (Cs \\<union>\n    {C\\<^sub>1o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''1'' @ x)),\n     C\\<^sub>2o \\<cdot>\\<^sub>l\\<^sub>s\n     (\\<lambda>x. \\<epsilon> (''2'' @ x))})\n   CsNext\n\ngoal (1 subgoal):\n 1. resolution_step\\<^sup>*\\<^sup>* Cs CsNext", "by auto"], ["proof (state)\nthis:\n  resolution_deriv Cs CsNext\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "}\n    \\<comment> \\<open>Combining the two derivations, we get the desired derivation from @{term Cs} of @{term \"{}\"}:\\<close>"], ["proof (state)\nthis:\n  resolution_deriv Cs CsNext\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "ultimately"], ["proof (chain)\npicking this:\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n  resolution_deriv Cs CsNext", "have \"resolution_deriv Cs Cs''\""], ["proof (prove)\nusing this:\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n  resolution_deriv Cs CsNext\n\ngoal (1 subgoal):\n 1. resolution_deriv Cs Cs''", "unfolding resolution_deriv_def"], ["proof (prove)\nusing this:\n  resolution_step\\<^sup>*\\<^sup>* CsNext Cs'' \\<and> {} \\<in> Cs''\n  resolution_step\\<^sup>*\\<^sup>* Cs CsNext\n\ngoal (1 subgoal):\n 1. resolution_step\\<^sup>*\\<^sup>* Cs Cs''", "by auto"], ["proof (state)\nthis:\n  resolution_deriv Cs Cs''\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  resolution_deriv Cs Cs''", "have \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs''\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "using Cs''_p"], ["proof (prove)\nusing this:\n  resolution_deriv Cs Cs''\n  resolution_deriv CsNext Cs'' \\<and> {} \\<in> Cs''\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "}"], ["proof (state)\nthis:\n  0 < treesize T \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<And>x Cs.\n       \\<lbrakk>\\<And>y Cs.\n                   \\<lbrakk>treesize y < treesize x; closed_tree y Cs;\n                    Ball Cs finite\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>Cs'.\n  resolution_deriv Cs Cs' \\<and> {} \\<in> Cs';\n        closed_tree x Cs; Ball Cs finite\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cs'.\n                            resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "ultimately"], ["proof (chain)\npicking this:\n  treesize T = 0 \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n  0 < treesize T \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "show \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\nusing this:\n  treesize T = 0 \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n  0 < treesize T \\<Longrightarrow>\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem completeness:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::hterm fun_denot) (G::hterm pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "from unsat"], ["proof (chain)\npicking this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "have \"\\<forall>(G::hterm pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s HFun G Cs\""], ["proof (prove)\nusing this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs", "by auto"], ["proof (state)\nthis:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs", "obtain T where \"closed_tree T Cs\""], ["proof (prove)\nusing this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n\ngoal (1 subgoal):\n 1. (\\<And>T. closed_tree T Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using herbrand assms"], ["proof (prove)\nusing this:\n  \\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G Cs\n  \\<lbrakk>\\<forall>G. \\<not> eval\\<^sub>c\\<^sub>s HFun G ?Cs; finite ?Cs;\n   \\<forall>C\\<in>?Cs. finite C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T. closed_tree T ?Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. (\\<And>T. closed_tree T Cs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  closed_tree T Cs", "show \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\nusing this:\n  closed_tree T Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "using completeness' assms"], ["proof (prove)\nusing this:\n  closed_tree T Cs\n  \\<lbrakk>closed_tree ?T ?Cs; \\<forall>C\\<in>?Cs. finite C\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs'.\n                       resolution_deriv ?Cs Cs' \\<and> {} \\<in> Cs'\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal:\nNo subgoals!", "qed"], ["", "definition E_conv :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a var_denot \\<Rightarrow> 'b var_denot\" where\n  \"E_conv b_of_a E \\<equiv> \\<lambda>x. (b_of_a (E x))\""], ["", "definition F_conv :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a fun_denot \\<Rightarrow> 'b fun_denot\" where\n  \"F_conv b_of_a F \\<equiv> \\<lambda>f bs. b_of_a (F f (map (inv b_of_a) bs))\""], ["", "definition G_conv :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a pred_denot \\<Rightarrow> 'b pred_denot\" where\n  \"G_conv b_of_a G \\<equiv> \\<lambda>p bs. (G p (map (inv b_of_a) bs))\""], ["", "lemma eval\\<^sub>t_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows\"eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) t = b_of_a (eval\\<^sub>t E F t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) t =\n    b_of_a (eval\\<^sub>t E F t)", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) x2aa =\n           b_of_a (eval\\<^sub>t E F x2aa)) \\<Longrightarrow>\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun x1 x2a) =\n       b_of_a (eval\\<^sub>t E F (Fun x1 x2a))\n 2. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) ?x2aa =\n  b_of_a (eval\\<^sub>t E F ?x2aa)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) x2aa =\n           b_of_a (eval\\<^sub>t E F x2aa)) \\<Longrightarrow>\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun x1 x2a) =\n       b_of_a (eval\\<^sub>t E F (Fun x1 x2a))\n 2. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "then"], ["proof (chain)\npicking this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) ?x2aa =\n  b_of_a (eval\\<^sub>t E F ?x2aa)", "have \"map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F)) ts = eval\\<^sub>t\\<^sub>s E F ts\""], ["proof (prove)\nusing this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) ?x2aa =\n  b_of_a (eval\\<^sub>t E F ?x2aa)\n\ngoal (1 subgoal):\n 1. map (inv b_of_a \\<circ>\n         eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n     ts =\n    eval\\<^sub>t\\<^sub>s E F ts", "unfolding E_conv_def F_conv_def"], ["proof (prove)\nusing this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  eval\\<^sub>t (\\<lambda>a. b_of_a (E a))\n   (\\<lambda>a b. b_of_a (F a (map (inv b_of_a) b))) ?x2aa =\n  b_of_a (eval\\<^sub>t E F ?x2aa)\n\ngoal (1 subgoal):\n 1. map (inv b_of_a \\<circ>\n         eval\\<^sub>t (\\<lambda>x. b_of_a (E x))\n          (\\<lambda>f bs. b_of_a (F f (map (inv b_of_a) bs))))\n     ts =\n    eval\\<^sub>t\\<^sub>s E F ts", "using assms bij_is_inj"], ["proof (prove)\nusing this:\n  ?x2aa \\<in> set ts \\<Longrightarrow>\n  eval\\<^sub>t (\\<lambda>a. b_of_a (E a))\n   (\\<lambda>a b. b_of_a (F a (map (inv b_of_a) b))) ?x2aa =\n  b_of_a (eval\\<^sub>t E F ?x2aa)\n  bij b_of_a\n  bij ?f \\<Longrightarrow> inj ?f\n\ngoal (1 subgoal):\n 1. map (inv b_of_a \\<circ>\n         eval\\<^sub>t (\\<lambda>x. b_of_a (E x))\n          (\\<lambda>f bs. b_of_a (F f (map (inv b_of_a) bs))))\n     ts =\n    eval\\<^sub>t\\<^sub>s E F ts", "by fastforce"], ["proof (state)\nthis:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) x2aa =\n           b_of_a (eval\\<^sub>t E F x2aa)) \\<Longrightarrow>\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun x1 x2a) =\n       b_of_a (eval\\<^sub>t E F (Fun x1 x2a))\n 2. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "then"], ["proof (chain)\npicking this:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts", "have \"b_of_a (F f (map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) ((F_conv b_of_a F))) ts)) = b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))\""], ["proof (prove)\nusing this:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts\n\ngoal (1 subgoal):\n 1. b_of_a\n     (F f (map (inv b_of_a \\<circ>\n                eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n            ts)) =\n    b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))", "by metis"], ["proof (state)\nthis:\n  b_of_a\n   (F f (map (inv b_of_a \\<circ>\n              eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n          ts)) =\n  b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2a.\n       (\\<And>x2aa.\n           x2aa \\<in> set x2a \\<Longrightarrow>\n           eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) x2aa =\n           b_of_a (eval\\<^sub>t E F x2aa)) \\<Longrightarrow>\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun x1 x2a) =\n       b_of_a (eval\\<^sub>t E F (Fun x1 x2a))\n 2. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "then"], ["proof (chain)\npicking this:\n  b_of_a\n   (F f (map (inv b_of_a \\<circ>\n              eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n          ts)) =\n  b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))", "show ?case"], ["proof (prove)\nusing this:\n  b_of_a\n   (F f (map (inv b_of_a \\<circ>\n              eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n          ts)) =\n  b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun f ts) =\n    b_of_a (eval\\<^sub>t E F (Fun f ts))", "using assms"], ["proof (prove)\nusing this:\n  b_of_a\n   (F f (map (inv b_of_a \\<circ>\n              eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n          ts)) =\n  b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun f ts) =\n    b_of_a (eval\\<^sub>t E F (Fun f ts))", "unfolding E_conv_def F_conv_def"], ["proof (prove)\nusing this:\n  b_of_a\n   (F f (map (inv b_of_a \\<circ>\n              eval\\<^sub>t (\\<lambda>x. b_of_a (E x))\n               (\\<lambda>f bs. b_of_a (F f (map (inv b_of_a) bs))))\n          ts)) =\n  b_of_a (F f (eval\\<^sub>t\\<^sub>s E F ts))\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t (\\<lambda>a. b_of_a (E a))\n     (\\<lambda>a b. b_of_a (F a (map (inv b_of_a) b))) (Fun f ts) =\n    b_of_a (eval\\<^sub>t E F (Fun f ts))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (Fun f ts) =\n  b_of_a (eval\\<^sub>t E F (Fun f ts))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "case (Var x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x.\n       eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n       b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n    b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "using assms"], ["proof (prove)\nusing this:\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n    b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "unfolding E_conv_def"], ["proof (prove)\nusing this:\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. eval\\<^sub>t (\\<lambda>a. b_of_a (E a)) (F_conv b_of_a F)\n     (\\<epsilon> x) =\n    b_of_a (eval\\<^sub>t E F (\\<epsilon> x))", "by auto"], ["proof (state)\nthis:\n  eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) (\\<epsilon> x) =\n  b_of_a (eval\\<^sub>t E F (\\<epsilon> x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval\\<^sub>t\\<^sub>s_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"G_conv b_of_a G p (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) = G p (eval\\<^sub>t\\<^sub>s E F ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G_conv b_of_a G p\n     (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n    G p (eval\\<^sub>t\\<^sub>s E F ts)", "using assms"], ["proof (prove)\nusing this:\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. G_conv b_of_a G p\n     (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n    G p (eval\\<^sub>t\\<^sub>s E F ts)", "using eval\\<^sub>t_bij"], ["proof (prove)\nusing this:\n  bij b_of_a\n  bij ?b_of_a \\<Longrightarrow>\n  eval\\<^sub>t (E_conv ?b_of_a ?E) (F_conv ?b_of_a ?F) ?t =\n  ?b_of_a (eval\\<^sub>t ?E ?F ?t)\n\ngoal (1 subgoal):\n 1. G_conv b_of_a G p\n     (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n    G p (eval\\<^sub>t\\<^sub>s E F ts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>bij b_of_a;\n     \\<And>b_of_a E F t.\n        bij b_of_a \\<Longrightarrow>\n        eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) t =\n        b_of_a (eval\\<^sub>t E F t)\\<rbrakk>\n    \\<Longrightarrow> G_conv b_of_a G p\n                       (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E)\n                         (F_conv b_of_a F) ts) =\n                      G p (eval\\<^sub>t\\<^sub>s E F ts)", "have \"map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F)) ts = eval\\<^sub>t\\<^sub>s E F ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (inv b_of_a \\<circ>\n         eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n     ts =\n    eval\\<^sub>t\\<^sub>s E F ts", "using eval\\<^sub>t_bij assms bij_is_inj"], ["proof (prove)\nusing this:\n  bij ?b_of_a \\<Longrightarrow>\n  eval\\<^sub>t (E_conv ?b_of_a ?E) (F_conv ?b_of_a ?F) ?t =\n  ?b_of_a (eval\\<^sub>t ?E ?F ?t)\n  bij b_of_a\n  bij ?f \\<Longrightarrow> inj ?f\n\ngoal (1 subgoal):\n 1. map (inv b_of_a \\<circ>\n         eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n     ts =\n    eval\\<^sub>t\\<^sub>s E F ts", "by fastforce"], ["proof (state)\nthis:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bij b_of_a;\n     \\<And>b_of_a E F t.\n        bij b_of_a \\<Longrightarrow>\n        eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F) t =\n        b_of_a (eval\\<^sub>t E F t)\\<rbrakk>\n    \\<Longrightarrow> G_conv b_of_a G p\n                       (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E)\n                         (F_conv b_of_a F) ts) =\n                      G p (eval\\<^sub>t\\<^sub>s E F ts)", "then"], ["proof (chain)\npicking this:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts", "show ?thesis"], ["proof (prove)\nusing this:\n  map (inv b_of_a \\<circ> eval\\<^sub>t (E_conv b_of_a E) (F_conv b_of_a F))\n   ts =\n  eval\\<^sub>t\\<^sub>s E F ts\n\ngoal (1 subgoal):\n 1. G_conv b_of_a G p\n     (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n    G p (eval\\<^sub>t\\<^sub>s E F ts)", "by (metis (no_types) G_conv_def map_map)"], ["proof (state)\nthis:\n  G_conv b_of_a G p\n   (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n  G p (eval\\<^sub>t\\<^sub>s E F ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval\\<^sub>l_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l = eval\\<^sub>l E F G l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n    eval\\<^sub>l E F G l", "using assms eval\\<^sub>t\\<^sub>s_bij"], ["proof (prove)\nusing this:\n  bij b_of_a\n  bij ?b_of_a \\<Longrightarrow>\n  G_conv ?b_of_a ?G ?p\n   (eval\\<^sub>t\\<^sub>s (E_conv ?b_of_a ?E) (F_conv ?b_of_a ?F) ?ts) =\n  ?G ?p (eval\\<^sub>t\\<^sub>s ?E ?F ?ts)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n    eval\\<^sub>l E F G l", "proof (cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Pos x11 x12\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l\n 2. \\<And>x21 x22.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Neg x21 x22\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l", "case (Pos p ts)"], ["proof (state)\nthis:\n  l = Pos p ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Pos x11 x12\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l\n 2. \\<And>x21 x22.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Neg x21 x22\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  l = Pos p ts", "show ?thesis"], ["proof (prove)\nusing this:\n  l = Pos p ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n    eval\\<^sub>l E F G l", "by (simp add: eval\\<^sub>t\\<^sub>s_bij assms)"], ["proof (state)\nthis:\n  eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n  eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Neg x21 x22\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Neg x21 x22\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l", "case (Neg p ts)"], ["proof (state)\nthis:\n  l = Neg p ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>bij b_of_a;\n        \\<And>b_of_a G p E F ts.\n           bij b_of_a \\<Longrightarrow>\n           G_conv b_of_a G p\n            (eval\\<^sub>t\\<^sub>s (E_conv b_of_a E) (F_conv b_of_a F) ts) =\n           G p (eval\\<^sub>t\\<^sub>s E F ts);\n        l = Neg x21 x22\\<rbrakk>\n       \\<Longrightarrow> eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F)\n                          (G_conv b_of_a G) l =\n                         eval\\<^sub>l E F G l", "then"], ["proof (chain)\npicking this:\n  l = Neg p ts", "show ?thesis"], ["proof (prove)\nusing this:\n  l = Neg p ts\n\ngoal (1 subgoal):\n 1. eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n    eval\\<^sub>l E F G l", "by (simp add: eval\\<^sub>t\\<^sub>s_bij assms)"], ["proof (state)\nthis:\n  eval\\<^sub>l (E_conv b_of_a E) (F_conv b_of_a F) (G_conv b_of_a G) l =\n  eval\\<^sub>l E F G l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval\\<^sub>c_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "fix E :: \"char list \\<Rightarrow> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "assume bij_b_of_a: \"bij b_of_a\""], ["proof (state)\nthis:\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "assume C_sat: \"\\<forall>E :: char list \\<Rightarrow> 'a. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\""], ["proof (state)\nthis:\n  \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "have E_p: \"E = E_conv b_of_a (E_conv (inv b_of_a) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E = E_conv b_of_a (E_conv (inv b_of_a) E)", "unfolding E_conv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. E = (\\<lambda>x. b_of_a (inv b_of_a (E x)))", "using bij_b_of_a"], ["proof (prove)\nusing this:\n  bij b_of_a\n\ngoal (1 subgoal):\n 1. E = (\\<lambda>x. b_of_a (inv b_of_a (E x)))", "using bij_betw_inv_into_right"], ["proof (prove)\nusing this:\n  bij b_of_a\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?a' \\<in> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f (inv_into ?A ?f ?a') = ?a'\n\ngoal (1 subgoal):\n 1. E = (\\<lambda>x. b_of_a (inv b_of_a (E x)))", "by fastforce"], ["proof (state)\nthis:\n  E = E_conv b_of_a (E_conv (inv b_of_a) E)\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "have \"\\<exists>l\\<in>C. eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E)) (F_conv b_of_a F) (G_conv b_of_a G) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C.\n       eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E))\n        (F_conv b_of_a F) (G_conv b_of_a G) l", "using eval\\<^sub>l_bij bij_b_of_a C_sat"], ["proof (prove)\nusing this:\n  bij ?b_of_a \\<Longrightarrow>\n  eval\\<^sub>l (E_conv ?b_of_a ?E) (F_conv ?b_of_a ?F) (G_conv ?b_of_a ?G)\n   ?l =\n  eval\\<^sub>l ?E ?F ?G ?l\n  bij b_of_a\n  \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C.\n       eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E))\n        (F_conv b_of_a F) (G_conv b_of_a G) l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C.\n     eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E)) (F_conv b_of_a F)\n      (G_conv b_of_a G) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>C.\n     eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E)) (F_conv b_of_a F)\n      (G_conv b_of_a G) l", "have \"\\<exists>l\\<in>C. eval\\<^sub>l E (F_conv b_of_a F) (G_conv b_of_a G) l\""], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C.\n     eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E)) (F_conv b_of_a F)\n      (G_conv b_of_a G) l\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E (F_conv b_of_a F) (G_conv b_of_a G) l", "using E_p"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>C.\n     eval\\<^sub>l (E_conv b_of_a (E_conv (inv b_of_a) E)) (F_conv b_of_a F)\n      (G_conv b_of_a G) l\n  E = E_conv b_of_a (E_conv (inv b_of_a) E)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>C. eval\\<^sub>l E (F_conv b_of_a F) (G_conv b_of_a G) l", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<in>C. eval\\<^sub>l E (F_conv b_of_a F) (G_conv b_of_a G) l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "}"], ["proof (state)\nthis:\n  \\<lbrakk>bij b_of_a;\n   \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l\\<in>C.\n                       eval\\<^sub>l ?E2 (F_conv b_of_a F) (G_conv b_of_a G)\n                        l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>bij b_of_a;\n   \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l\\<in>C.\n                       eval\\<^sub>l ?E2 (F_conv b_of_a F) (G_conv b_of_a G)\n                        l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>bij b_of_a;\n   \\<forall>E. \\<exists>l\\<in>C. eval\\<^sub>l E F G l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l\\<in>C.\n                       eval\\<^sub>l ?E2 (F_conv b_of_a F) (G_conv b_of_a G)\n                        l\n\ngoal (1 subgoal):\n 1. eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C", "by (meson eval\\<^sub>l_bij assms eval\\<^sub>c_def)"], ["proof (state)\nthis:\n  eval\\<^sub>c (F_conv b_of_a F) (G_conv b_of_a G) C = eval\\<^sub>c F G C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval\\<^sub>c\\<^sub>s_bij:\n  assumes \"bij (b_of_a::'a \\<Rightarrow> 'b)\"\n  shows \"eval\\<^sub>c\\<^sub>s (F_conv b_of_a F) (G_conv b_of_a G) Cs \\<longleftrightarrow> eval\\<^sub>c\\<^sub>s F G Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval\\<^sub>c\\<^sub>s (F_conv b_of_a F) (G_conv b_of_a G) Cs =\n    eval\\<^sub>c\\<^sub>s F G Cs", "by (meson eval\\<^sub>c_bij assms eval\\<^sub>c\\<^sub>s_def)"], ["", "lemma countably_inf_bij:\n  assumes inf_a_uni: \"infinite (UNIV :: ('a ::countable) set)\"\n  assumes inf_b_uni: \"infinite (UNIV :: ('b ::countable) set)\"\n  shows \"\\<exists>b_of_a :: 'a \\<Rightarrow> 'b. bij b_of_a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "let ?S = \"UNIV :: (('a::countable)) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"countable ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable UNIV", "by auto"], ["proof (state)\nthis:\n  countable UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "moreover"], ["proof (state)\nthis:\n  countable UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"infinite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "using inf_a_uni"], ["proof (prove)\nusing this:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by auto"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "ultimately"], ["proof (chain)\npicking this:\n  countable UNIV\n  infinite UNIV", "obtain nat_of_a where QWER: \"bij (nat_of_a :: 'a \\<Rightarrow> nat)\""], ["proof (prove)\nusing this:\n  countable UNIV\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>nat_of_a.\n        bij nat_of_a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using countableE_infinite[of ?S]"], ["proof (prove)\nusing this:\n  countable UNIV\n  infinite UNIV\n  \\<lbrakk>countable UNIV; infinite UNIV;\n   \\<And>e. bij e \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>nat_of_a.\n        bij nat_of_a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij nat_of_a\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "let ?T = \"UNIV :: (('b::countable)) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"countable ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable UNIV", "by auto"], ["proof (state)\nthis:\n  countable UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "moreover"], ["proof (state)\nthis:\n  countable UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"infinite ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "using inf_b_uni"], ["proof (prove)\nusing this:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by auto"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "ultimately"], ["proof (chain)\npicking this:\n  countable UNIV\n  infinite UNIV", "obtain nat_of_b where TYUI: \"bij (nat_of_b :: 'b \\<Rightarrow> nat)\""], ["proof (prove)\nusing this:\n  countable UNIV\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>nat_of_b.\n        bij nat_of_b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using countableE_infinite[of ?T]"], ["proof (prove)\nusing this:\n  countable UNIV\n  infinite UNIV\n  \\<lbrakk>countable UNIV; infinite UNIV;\n   \\<And>e. bij e \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>nat_of_b.\n        bij nat_of_b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij nat_of_b\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "let ?b_of_a = \"\\<lambda>a. (inv nat_of_b) (nat_of_a a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have bij_nat_of_b: \"\\<forall>n. nat_of_b (inv nat_of_b n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. nat_of_b (inv nat_of_b n) = n", "using TYUI bij_betw_inv_into_right"], ["proof (prove)\nusing this:\n  bij nat_of_b\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?a' \\<in> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f (inv_into ?A ?f ?a') = ?a'\n\ngoal (1 subgoal):\n 1. \\<forall>n. nat_of_b (inv nat_of_b n) = n", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>n. nat_of_b (inv nat_of_b n) = n\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"\\<forall>a. inv nat_of_a (nat_of_a a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. inv nat_of_a (nat_of_a a) = a", "by (meson QWER UNIV_I bij_betw_inv_into_left)"], ["proof (state)\nthis:\n  \\<forall>a. inv nat_of_a (nat_of_a a) = a\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "then"], ["proof (chain)\npicking this:\n  \\<forall>a. inv nat_of_a (nat_of_a a) = a", "have \"inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\""], ["proof (prove)\nusing this:\n  \\<forall>a. inv nat_of_a (nat_of_a a) = a\n\ngoal (1 subgoal):\n 1. inj (\\<lambda>a. inv nat_of_b (nat_of_a a))", "using bij_nat_of_b injI"], ["proof (prove)\nusing this:\n  \\<forall>a. inv nat_of_a (nat_of_a a) = a\n  \\<forall>n. nat_of_b (inv nat_of_b n) = n\n  (\\<And>x y. ?f x = ?f y \\<Longrightarrow> x = y) \\<Longrightarrow> inj ?f\n\ngoal (1 subgoal):\n 1. inj (\\<lambda>a. inv nat_of_b (nat_of_a a))", "by (metis (no_types))"], ["proof (state)\nthis:\n  inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "moreover"], ["proof (state)\nthis:\n  inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "have \"range (\\<lambda>a. inv nat_of_b (nat_of_a a)) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. surj (\\<lambda>a. inv nat_of_b (nat_of_a a))", "by (metis QWER TYUI bij_def image_image inj_imp_surj_inv)"], ["proof (state)\nthis:\n  surj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "ultimately"], ["proof (chain)\npicking this:\n  inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n  surj (\\<lambda>a. inv nat_of_b (nat_of_a a))", "have \"bij ?b_of_a\""], ["proof (prove)\nusing this:\n  inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n  surj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. bij (\\<lambda>a. inv nat_of_b (nat_of_a a))", "unfolding bij_def"], ["proof (prove)\nusing this:\n  inj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n  surj (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. inj (\\<lambda>a. inv nat_of_b (nat_of_a a)) \\<and>\n    surj (\\<lambda>a. inv nat_of_b (nat_of_a a))", "by auto"], ["proof (state)\nthis:\n  bij (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "then"], ["proof (chain)\npicking this:\n  bij (\\<lambda>a. inv nat_of_b (nat_of_a a))", "show ?thesis"], ["proof (prove)\nusing this:\n  bij (\\<lambda>a. inv nat_of_b (nat_of_a a))\n\ngoal (1 subgoal):\n 1. \\<exists>b_of_a. bij b_of_a", "by auto"], ["proof (state)\nthis:\n  \\<exists>b_of_a. bij b_of_a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_hterms: \"infinite (UNIV :: hterm set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite UNIV", "let ?diago = \"\\<lambda>n. HFun (string_of_nat n) []\""], ["proof (state)\ngoal (1 subgoal):\n 1. infinite UNIV", "let ?undiago = \"\\<lambda>a. nat_of_string (case a of HFun f ts \\<Rightarrow> f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. infinite UNIV", "have \"\\<forall>n. ?undiago (?diago n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       nat_of_string\n        (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n       n", "using nat_of_string_string_of_nat"], ["proof (prove)\nusing this:\n  nat_of_string (string_of_nat ?n) = ?n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       nat_of_string\n        (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n       n", "by auto"], ["proof (state)\nthis:\n  \\<forall>n.\n     nat_of_string\n      (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n     n\n\ngoal (1 subgoal):\n 1. infinite UNIV", "moreover"], ["proof (state)\nthis:\n  \\<forall>n.\n     nat_of_string\n      (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n     n\n\ngoal (1 subgoal):\n 1. infinite UNIV", "have \"\\<forall>n. ?diago n \\<in> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV", "by auto"], ["proof (state)\nthis:\n  \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     nat_of_string\n      (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n     n\n  \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV", "show \"infinite (UNIV :: hterm set)\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     nat_of_string\n      (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n     n\n  \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "using infinity[of ?undiago ?diago UNIV]"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     nat_of_string\n      (case HFun (string_of_nat n) [] of HFun f ts \\<Rightarrow> f) =\n     n\n  \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV\n  \\<lbrakk>\\<forall>n.\n              nat_of_string\n               (case HFun (string_of_nat n) [] of\n                HFun f ts \\<Rightarrow> f) =\n              n;\n   \\<forall>n. HFun (string_of_nat n) [] \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by simp"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem completeness_countable:\n  assumes inf_uni: \"infinite (UNIV :: ('u :: countable) set)\"\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::'u fun_denot) (G::'u pred_denot). \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "have \"\\<forall>(F::hterm fun_denot) (G::hterm pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s F G Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "proof (rule; rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "fix F :: \"hterm fun_denot\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "fix G :: \"hterm pred_denot\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "obtain u_of_hterm :: \"hterm \\<Rightarrow> 'u\" where p_u_of_hterm: \"bij u_of_hterm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u_of_hterm.\n        bij u_of_hterm \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using countably_inf_bij inf_uni infinite_hterms"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite UNIV; infinite UNIV\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b_of_a. bij b_of_a\n  infinite UNIV\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>u_of_hterm.\n        bij u_of_hterm \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bij u_of_hterm\n\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "let ?F = \"F_conv u_of_hterm F\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "let ?G = \"G_conv u_of_hterm G\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "have \"\\<not> eval\\<^sub>c\\<^sub>s ?F ?G Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G)\n            Cs", "using unsat"], ["proof (prove)\nusing this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G)\n            Cs", "by auto"], ["proof (state)\nthis:\n  \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G) Cs\n\ngoal (1 subgoal):\n 1. \\<And>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "then"], ["proof (chain)\npicking this:\n  \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G) Cs", "show \"\\<not> eval\\<^sub>c\\<^sub>s F G Cs\""], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G) Cs\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "using eval\\<^sub>c\\<^sub>s_bij"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G) Cs\n  bij ?b_of_a \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s (F_conv ?b_of_a ?F) (G_conv ?b_of_a ?G) ?Cs =\n  eval\\<^sub>c\\<^sub>s ?F ?G ?Cs\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "using p_u_of_hterm"], ["proof (prove)\nusing this:\n  \\<not> eval\\<^sub>c\\<^sub>s (F_conv u_of_hterm F) (G_conv u_of_hterm G) Cs\n  bij ?b_of_a \\<Longrightarrow>\n  eval\\<^sub>c\\<^sub>s (F_conv ?b_of_a ?F) (G_conv ?b_of_a ?G) ?Cs =\n  eval\\<^sub>c\\<^sub>s ?F ?G ?Cs\n  bij u_of_hterm\n\ngoal (1 subgoal):\n 1. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "by auto"], ["proof (state)\nthis:\n  \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "then"], ["proof (chain)\npicking this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs", "show \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\nusing this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "using finite_cs completeness"], ["proof (prove)\nusing this:\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<lbrakk>finite ?Cs; \\<forall>C\\<in>?Cs. finite C;\n   \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G ?Cs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs'.\n                       resolution_deriv ?Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem completeness_nat:\n  assumes finite_cs: \"finite Cs\" \"\\<forall>C\\<in>Cs. finite C\"\n  assumes unsat: \"\\<forall>(F::nat fun_denot) (G::nat pred_denot) . \\<not>eval\\<^sub>c\\<^sub>s F G Cs\"\n  shows \"\\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "using assms completeness_countable"], ["proof (prove)\nusing this:\n  finite Cs\n  \\<forall>C\\<in>Cs. finite C\n  \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G Cs\n  \\<lbrakk>infinite UNIV; finite ?Cs; \\<forall>C\\<in>?Cs. finite C;\n   \\<forall>F G. \\<not> eval\\<^sub>c\\<^sub>s F G ?Cs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs'.\n                       resolution_deriv ?Cs Cs' \\<and> {} \\<in> Cs'\n\ngoal (1 subgoal):\n 1. \\<exists>Cs'. resolution_deriv Cs Cs' \\<and> {} \\<in> Cs'", "by blast"], ["", "end \\<comment> \\<open>unification locale\\<close>"], ["", "end"]]}