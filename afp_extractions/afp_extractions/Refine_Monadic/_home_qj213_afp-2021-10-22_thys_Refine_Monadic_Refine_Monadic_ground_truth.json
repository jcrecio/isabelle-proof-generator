{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic/Refine_Monadic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic", "problem_names": ["theorem REC_annot_rule[refine_vcg]:\n    assumes M: \"trimono body\"\n    and P: \"pre x\"\n    and S: \"\\<And>f x. \\<lbrakk>\\<And>x. pre x \\<Longrightarrow> f x \\<le> SPEC (post x); pre x\\<rbrakk> \n            \\<Longrightarrow> body f x \\<le> SPEC (post x)\"\n    and C: \"\\<And>r. post x r \\<Longrightarrow> \\<Phi> r\"\n    shows \"REC_annot pre post body x \\<le> SPEC \\<Phi>\""], "translations": [["", "theorem REC_annot_rule[refine_vcg]:\n    assumes M: \"trimono body\"\n    and P: \"pre x\"\n    and S: \"\\<And>f x. \\<lbrakk>\\<And>x. pre x \\<Longrightarrow> f x \\<le> SPEC (post x); pre x\\<rbrakk> \n            \\<Longrightarrow> body f x \\<le> SPEC (post x)\"\n    and C: \"\\<And>r. post x r \\<Longrightarrow> \\<Phi> r\"\n    shows \"REC_annot pre post body x \\<le> SPEC \\<Phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. REC_annot pre post body x \\<le> SPEC \\<Phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. REC_annot pre post body x \\<le> SPEC \\<Phi>", "from \\<open>trimono body\\<close>"], ["proof (chain)\npicking this:\n  trimono body", "have [refine_mono]:\n      \"\\<And>f g x xa. (\\<And>x. flat_ge (f x) (g x)) \\<Longrightarrow> flat_ge (body f x) (body g x)\"\n      \"\\<And>f g x xa. (\\<And>x. f x \\<le> g x) \\<Longrightarrow> body f x \\<le> body g x\""], ["proof (prove)\nusing this:\n  trimono body\n\ngoal (1 subgoal):\n 1. (\\<And>f g x xa.\n        (\\<And>x. flat_ge (f x) (g x)) \\<Longrightarrow>\n        flat_ge (body f x) (body g x)) &&&\n    (\\<And>f g x xa.\n        (\\<And>x. f x \\<le> g x) \\<Longrightarrow> body f x \\<le> body g x)", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f g x xa.\n       \\<lbrakk>\\<And>x. flat_ge (f x) (g x); trimono body\\<rbrakk>\n       \\<Longrightarrow> flat_ge (body f x) (body g x)\n 2. \\<And>f g x xa.\n       \\<lbrakk>\\<And>x. f x \\<le> g x; trimono body\\<rbrakk>\n       \\<Longrightarrow> body f x \\<le> body g x", "unfolding trimono_def monotone_def fun_ord_def mono_def le_fun_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f g x xa.\n       \\<lbrakk>\\<And>x. flat_ge (f x) (g x);\n        (\\<forall>x y.\n            (\\<forall>xa. flat_ge (x xa) (y xa)) \\<longrightarrow>\n            (\\<forall>xa. flat_ge (body x xa) (body y xa))) \\<and>\n        (\\<forall>x y.\n            (\\<forall>xa. x xa \\<le> y xa) \\<longrightarrow>\n            (\\<forall>xa. body x xa \\<le> body y xa))\\<rbrakk>\n       \\<Longrightarrow> flat_ge (body f x) (body g x)\n 2. \\<And>f g x xa.\n       \\<lbrakk>\\<And>x. f x \\<le> g x;\n        (\\<forall>x y.\n            (\\<forall>xa. flat_ge (x xa) (y xa)) \\<longrightarrow>\n            (\\<forall>xa. flat_ge (body x xa) (body y xa))) \\<and>\n        (\\<forall>x y.\n            (\\<forall>xa. x xa \\<le> y xa) \\<longrightarrow>\n            (\\<forall>xa. body x xa \\<le> body y xa))\\<rbrakk>\n       \\<Longrightarrow> body f x \\<le> body g x", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<And>x. flat_ge (?f x) (?g x)) \\<Longrightarrow>\n  flat_ge (body ?f ?x) (body ?g ?x)\n  (\\<And>x. ?f x \\<le> ?g x) \\<Longrightarrow> body ?f ?x \\<le> body ?g ?x\n\ngoal (1 subgoal):\n 1. REC_annot pre post body x \\<le> SPEC \\<Phi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. REC_annot pre post body x \\<le> SPEC \\<Phi>", "unfolding REC_annot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. REC (\\<lambda>D x.\n            ASSERT (pre x) \\<bind>\n            (\\<lambda>_.\n                body D x \\<bind>\n                (\\<lambda>r.\n                    ASSERT (post x r) \\<bind> (\\<lambda>_. RETURN r))))\n     x\n    \\<le> SPEC \\<Phi>", "apply (rule order_trans[where y=\"SPEC (post x)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. REC (\\<lambda>D x.\n            ASSERT (pre x) \\<bind>\n            (\\<lambda>_.\n                body D x \\<bind>\n                (\\<lambda>r.\n                    ASSERT (post x r) \\<bind> (\\<lambda>_. RETURN r))))\n     x\n    \\<le> SPEC (post x)\n 2. SPEC (post x) \\<le> SPEC \\<Phi>", "apply (refine_rcg \n        refine_vcg \n        REC_rule[where pre=pre and M=\"\\<lambda>x. SPEC (post x)\"]\n        order_trans[OF S]\n      )"], ["proof (prove)\ngoal (3 subgoals):\n 1. pre x\n 2. \\<And>f x xa.\n       \\<lbrakk>\\<And>x. pre x \\<Longrightarrow> f x \\<le> SPEC (post x);\n        pre x;\n        f \\<le> REC (\\<lambda>D x.\n                        ASSERT (pre x) \\<bind>\n                        (\\<lambda>_.\n                            body D x \\<bind>\n                            (\\<lambda>r.\n                                ASSERT (post x r) \\<bind>\n                                (\\<lambda>_. RETURN r))));\n        pre x; pre xa\\<rbrakk>\n       \\<Longrightarrow> f xa \\<le> SPEC (post xa)\n 3. SPEC (post x) \\<le> SPEC \\<Phi>", "apply fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f x xa.\n       \\<lbrakk>\\<And>x. pre x \\<Longrightarrow> f x \\<le> SPEC (post x);\n        pre x;\n        f \\<le> REC (\\<lambda>D x.\n                        ASSERT (pre x) \\<bind>\n                        (\\<lambda>_.\n                            body D x \\<bind>\n                            (\\<lambda>r.\n                                ASSERT (post x r) \\<bind>\n                                (\\<lambda>_. RETURN r))));\n        pre x; pre xa\\<rbrakk>\n       \\<Longrightarrow> f xa \\<le> SPEC (post xa)\n 2. SPEC (post x) \\<le> SPEC \\<Phi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. SPEC (post x) \\<le> SPEC \\<Phi>", "using C"], ["proof (prove)\nusing this:\n  post x ?r \\<Longrightarrow> \\<Phi> ?r\n\ngoal (1 subgoal):\n 1. SPEC (post x) \\<le> SPEC \\<Phi>", "apply (auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  REC_annot pre post body x \\<le> SPEC \\<Phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Syntax Sugar\\<close>"], ["", "locale Refine_Monadic_Syntax begin"], ["", "notation SPEC (binder \"spec \" 10)"], ["", "notation ASSERT (\"assert\")"], ["", "notation RETURN (\"return\")"], ["", "notation FOREACH (\"foreach\")"], ["", "notation WHILE (\"while\")"], ["", "notation WHILET (\"while\\<^sub>T\")"], ["", "notation WHILEI (\"while\\<^bsup>_\\<^esup>\")"], ["", "notation WHILET (\"while\\<^sub>T\")"], ["", "notation WHILEIT (\"while\\<^sub>T\\<^bsup>_\\<^esup>\")"], ["", "notation RECT (binder \"rec\\<^sub>T \" 10)"], ["", "notation REC (binder \"rec \" 10)"], ["", "notation SELECT (binder \"select \" 10)"], ["", "end"], ["", "end"]]}