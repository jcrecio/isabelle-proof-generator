{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic/examples/Breadth_First_Search.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic", "problem_names": ["lemma\n    shows connI[intro]: \"dist v d v' \\<Longrightarrow> conn v v'\"\n      and connI_id[intro]: \"conn v v\"\n      and connI_succ[intro]: \"conn v v' \\<Longrightarrow> v'' \\<in> succ v' \\<Longrightarrow> conn v v''\"", "lemma min_distI2: \n    \"\\<lbrakk> conn v v' ; \\<And>d. \\<lbrakk> dist v d v'; \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d' \\<rbrakk> \\<Longrightarrow> Q d \\<rbrakk> \n      \\<Longrightarrow> Q (min_dist v v')\"", "lemma min_distI_eq:\n    \"\\<lbrakk> dist v d v'; \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d' \\<rbrakk> \\<Longrightarrow> min_dist v v' = d\"", "lemma dist_z_iff[simp]: \"dist v 0 v' \\<longleftrightarrow> v'=v\"", "lemma min_dist_z[simp]: \"min_dist v v = 0\"", "lemma min_dist_z_iff[simp]: \"conn v v' \\<Longrightarrow> min_dist v v' = 0 \\<longleftrightarrow> v'=v\"", "lemma min_dist_is_dist: \"conn v v' \\<Longrightarrow> dist v (min_dist v v') v'\"", "lemma min_dist_minD: \"dist v d v' \\<Longrightarrow> min_dist v v' \\<le> d\"", "lemma min_dist_succ: \n    \"\\<lbrakk> conn v v'; v'' \\<in> succ v' \\<rbrakk> \\<Longrightarrow> min_dist v v'' \\<le> Suc (min_dist v v') \"", "lemma min_dist_suc:\n    assumes c: \"conn v v'\" \"min_dist v v' = Suc d\"\n    shows \"\\<exists>v''. conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d\"", "lemma min_dist_less:\n    assumes \"conn src v\" \"min_dist src v = d\" and \"d' < d\"\n    shows \"\\<exists>v'. conn src v' \\<and> min_dist src v' = d'\"", "lemma invar_succ_step:\n    assumes \"bfs_invar' src dst (False, V, C, N, d)\"\n    assumes \"v\\<in>C\"\n    assumes \"v\\<noteq>dst\"\n    shows \"bfs_invar' src dst \n            (False, V \\<union> succ v, C - {v}, N \\<union> (succ v - V), d)\"", "lemma invar_empty_step: \n    assumes \"bfs_invar' src dst (False, V, {}, N, d)\"\n    shows \"bfs_invar' src dst (False, V, N, {}, Suc d)\"", "lemma invar_init: \"bfs_invar src dst (False, {src}, {src}, {}, 0)\"", "lemma invar_break: \n    assumes \"bfs_invar src dst (False, V, C, N, d)\"\n    assumes \"dst\\<in>C\"\n    shows \"bfs_invar src dst (True, {}, {}, {}, d)\"", "lemma invar_final_succeed:\n    assumes \"bfs_invar' src dst (True, V, C, N, d)\"  \n    shows \"min_dist src dst = d\"", "lemma invar_final_fail: \n    assumes C: \"conn src dst\" \\<comment> \\<open>There is a path between \n      @{text \"src\"} and @{text \"dst\"}.\\<close>\n    assumes INV: \"bfs_invar' src dst (False, V, {}, {}, d)\"\n    shows False", "theorem bfs_correct: \"bfs src dst \\<le> bfs_spec src dst\""], "translations": [["", "lemma\n    shows connI[intro]: \"dist v d v' \\<Longrightarrow> conn v v'\"\n      and connI_id[intro]: \"conn v v\"\n      and connI_succ[intro]: \"conn v v' \\<Longrightarrow> v'' \\<in> succ v' \\<Longrightarrow> conn v v''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dist v d v' \\<Longrightarrow> conn v v') &&&\n    conn v v &&&\n    (\\<lbrakk>conn v v'; v'' \\<in> succ v'\\<rbrakk>\n     \\<Longrightarrow> conn v v'')", "by (auto simp: conn_def intro: dist_suc dist_z)"], ["", "lemma min_distI2: \n    \"\\<lbrakk> conn v v' ; \\<And>d. \\<lbrakk> dist v d v'; \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d' \\<rbrakk> \\<Longrightarrow> Q d \\<rbrakk> \n      \\<Longrightarrow> Q (min_dist v v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conn v v';\n     \\<And>d.\n        \\<lbrakk>dist v d v';\n         \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d'\\<rbrakk>\n        \\<Longrightarrow> Q d\\<rbrakk>\n    \\<Longrightarrow> Q (min_dist v v')", "unfolding min_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conn v v';\n     \\<And>d.\n        \\<lbrakk>dist v d v';\n         \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d'\\<rbrakk>\n        \\<Longrightarrow> Q d\\<rbrakk>\n    \\<Longrightarrow> Q (LEAST d. dist v d v')", "by (rule LeastI2_wellorder[where Q=Q and a=\"SOME d. dist v d v'\"])\n       (auto simp: conn_def intro: someI)"], ["", "lemma min_distI_eq:\n    \"\\<lbrakk> dist v d v'; \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d' \\<rbrakk> \\<Longrightarrow> min_dist v v' = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dist v d v';\n     \\<And>d'. dist v d' v' \\<Longrightarrow> d \\<le> d'\\<rbrakk>\n    \\<Longrightarrow> min_dist v v' = d", "by (force intro: min_distI2 simp: conn_def)"], ["", "text \\<open>Two nodes are connected by a path of length \\<open>0\\<close>, \n    iff they are equal.\\<close>"], ["", "lemma dist_z_iff[simp]: \"dist v 0 v' \\<longleftrightarrow> v'=v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist v 0 v' = (v' = v)", "by (auto elim: dist.cases intro: dist.intros)"], ["", "text \\<open>The same holds for \\<open>min_dist\\<close>, i.e., \n    the shortest path between two nodes has length \\<open>0\\<close>, \n    iff these nodes are equal.\\<close>"], ["", "lemma min_dist_z[simp]: \"min_dist v v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_dist v v = 0", "by (rule min_distI2) (auto intro: dist_z)"], ["", "lemma min_dist_z_iff[simp]: \"conn v v' \\<Longrightarrow> min_dist v v' = 0 \\<longleftrightarrow> v'=v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conn v v' \\<Longrightarrow> (min_dist v v' = 0) = (v' = v)", "by (rule min_distI2) (auto intro: dist_z)"], ["", "lemma min_dist_is_dist: \"conn v v' \\<Longrightarrow> dist v (min_dist v v') v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conn v v' \\<Longrightarrow> dist v (min_dist v v') v'", "by (auto intro: min_distI2)"], ["", "lemma min_dist_minD: \"dist v d v' \\<Longrightarrow> min_dist v v' \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist v d v' \\<Longrightarrow> min_dist v v' \\<le> d", "by (auto intro: min_distI2)"], ["", "text \\<open>We also provide introduction and destruction rules for the\n    pattern \\<open>min_dist v v' = Suc d\\<close>.\n\\<close>"], ["", "lemma min_dist_succ: \n    \"\\<lbrakk> conn v v'; v'' \\<in> succ v' \\<rbrakk> \\<Longrightarrow> min_dist v v'' \\<le> Suc (min_dist v v') \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conn v v'; v'' \\<in> succ v'\\<rbrakk>\n    \\<Longrightarrow> min_dist v v'' \\<le> Suc (min_dist v v')", "by (rule min_distI2[where v'=v'])\n       (auto elim: dist.cases intro!: min_dist_minD dist_suc)"], ["", "lemma min_dist_suc:\n    assumes c: \"conn v v'\" \"min_dist v v' = Suc d\"\n    shows \"\\<exists>v''. conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v''.\n       conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>v''.\n       conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d", "from min_dist_is_dist[OF c(1)]"], ["proof (chain)\npicking this:\n  dist v (min_dist v v') v'", "have \"min_dist v v' = Suc d \\<longrightarrow> ?thesis\""], ["proof (prove)\nusing this:\n  dist v (min_dist v v') v'\n\ngoal (1 subgoal):\n 1. min_dist v v' = Suc d \\<longrightarrow>\n    (\\<exists>v''.\n        conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>min_dist v v' = 0; v' = v\\<rbrakk>\n    \\<Longrightarrow> min_dist v v' = Suc d \\<longrightarrow>\n                      (\\<exists>v''.\n                          conn v v'' \\<and>\n                          v' \\<in> succ v'' \\<and> min_dist v v'' = d)\n 2. \\<And>da vh.\n       \\<lbrakk>min_dist v v' = Suc da; dist v da vh;\n        v' \\<in> succ vh\\<rbrakk>\n       \\<Longrightarrow> min_dist v v' = Suc d \\<longrightarrow>\n                         (\\<exists>v''.\n                             conn v v'' \\<and>\n                             v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "case (dist_suc d' v'')"], ["proof (state)\nthis:\n  min_dist v v' = Suc d'\n  dist v d' v''\n  v' \\<in> succ v''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>min_dist v v' = 0; v' = v\\<rbrakk>\n    \\<Longrightarrow> min_dist v v' = Suc d \\<longrightarrow>\n                      (\\<exists>v''.\n                          conn v v'' \\<and>\n                          v' \\<in> succ v'' \\<and> min_dist v v'' = d)\n 2. \\<And>da vh.\n       \\<lbrakk>min_dist v v' = Suc da; dist v da vh;\n        v' \\<in> succ vh\\<rbrakk>\n       \\<Longrightarrow> min_dist v v' = Suc d \\<longrightarrow>\n                         (\\<exists>v''.\n                             conn v v'' \\<and>\n                             v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "then"], ["proof (chain)\npicking this:\n  min_dist v v' = Suc d'\n  dist v d' v''\n  v' \\<in> succ v''", "show ?thesis"], ["proof (prove)\nusing this:\n  min_dist v v' = Suc d'\n  dist v d' v''\n  v' \\<in> succ v''\n\ngoal (1 subgoal):\n 1. min_dist v v' = Suc d \\<longrightarrow>\n    (\\<exists>v''.\n        conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "using min_dist_succ[of v v'' v'] min_dist_minD[of v d v'']"], ["proof (prove)\nusing this:\n  min_dist v v' = Suc d'\n  dist v d' v''\n  v' \\<in> succ v''\n  \\<lbrakk>conn v v''; v' \\<in> succ v''\\<rbrakk>\n  \\<Longrightarrow> min_dist v v' \\<le> Suc (min_dist v v'')\n  dist v d v'' \\<Longrightarrow> min_dist v v'' \\<le> d\n\ngoal (1 subgoal):\n 1. min_dist v v' = Suc d \\<longrightarrow>\n    (\\<exists>v''.\n        conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "by (auto simp: connI)"], ["proof (state)\nthis:\n  min_dist v v' = Suc d \\<longrightarrow>\n  (\\<exists>v''.\n      conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>min_dist v v' = 0; v' = v\\<rbrakk>\n    \\<Longrightarrow> min_dist v v' = Suc d \\<longrightarrow>\n                      (\\<exists>v''.\n                          conn v v'' \\<and>\n                          v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "qed simp"], ["proof (state)\nthis:\n  min_dist v v' = Suc d \\<longrightarrow>\n  (\\<exists>v''.\n      conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)\n\ngoal (1 subgoal):\n 1. \\<exists>v''.\n       conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d", "with c"], ["proof (chain)\npicking this:\n  conn v v'\n  min_dist v v' = Suc d\n  min_dist v v' = Suc d \\<longrightarrow>\n  (\\<exists>v''.\n      conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)", "show ?thesis"], ["proof (prove)\nusing this:\n  conn v v'\n  min_dist v v' = Suc d\n  min_dist v v' = Suc d \\<longrightarrow>\n  (\\<exists>v''.\n      conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d)\n\ngoal (1 subgoal):\n 1. \\<exists>v''.\n       conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d", "by simp"], ["proof (state)\nthis:\n  \\<exists>v''.\n     conn v v'' \\<and> v' \\<in> succ v'' \\<and> min_dist v v'' = d\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n    If there is a node with a shortest path of length \\<open>d\\<close>, \n    then, for any \\<open>d'<d\\<close>, there is also a node with a shortest path\n    of length \\<open>d'\\<close>.\n\\<close>"], ["", "lemma min_dist_less:\n    assumes \"conn src v\" \"min_dist src v = d\" and \"d' < d\"\n    shows \"\\<exists>v'. conn src v' \\<and> min_dist src v' = d'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'. conn src v' \\<and> min_dist src v' = d'", "using assms"], ["proof (prove)\nusing this:\n  conn src v\n  min_dist src v = d\n  d' < d\n\ngoal (1 subgoal):\n 1. \\<exists>v'. conn src v' \\<and> min_dist src v' = d'", "proof (induct d arbitrary: v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>conn src v; min_dist src v = 0; d' < 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            conn src v' \\<and> min_dist src v' = d'\n 2. \\<And>d v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>conn src v; min_dist src v = d; d' < d\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'.\n  conn src v' \\<and> min_dist src v' = d';\n        conn src v; min_dist src v = Suc d; d' < Suc d\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            conn src v' \\<and> min_dist src v' = d'", "case (Suc d)"], ["proof (state)\nthis:\n  \\<lbrakk>conn src ?v; min_dist src ?v = d; d' < d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'. conn src v' \\<and> min_dist src v' = d'\n  conn src v\n  min_dist src v = Suc d\n  d' < Suc d\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>conn src v; min_dist src v = 0; d' < 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            conn src v' \\<and> min_dist src v' = d'\n 2. \\<And>d v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>conn src v; min_dist src v = d; d' < d\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>v'.\n  conn src v' \\<and> min_dist src v' = d';\n        conn src v; min_dist src v = Suc d; d' < Suc d\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            conn src v' \\<and> min_dist src v' = d'", "with min_dist_suc[of src v]"], ["proof (chain)\npicking this:\n  \\<lbrakk>conn src v; min_dist src v = Suc ?d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v''.\n                       conn src v'' \\<and>\n                       v \\<in> succ v'' \\<and> min_dist src v'' = ?d\n  \\<lbrakk>conn src ?v; min_dist src ?v = d; d' < d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'. conn src v' \\<and> min_dist src v' = d'\n  conn src v\n  min_dist src v = Suc d\n  d' < Suc d", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>conn src v; min_dist src v = Suc ?d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v''.\n                       conn src v'' \\<and>\n                       v \\<in> succ v'' \\<and> min_dist src v'' = ?d\n  \\<lbrakk>conn src ?v; min_dist src ?v = d; d' < d\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'. conn src v' \\<and> min_dist src v' = d'\n  conn src v\n  min_dist src v = Suc d\n  d' < Suc d\n\ngoal (1 subgoal):\n 1. \\<exists>v'. conn src v' \\<and> min_dist src v' = d'", "by (cases \"d' = d\") auto"], ["proof (state)\nthis:\n  \\<exists>v'. conn src v' \\<and> min_dist src v' = d'\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>conn src v; min_dist src v = 0; d' < 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'.\n                            conn src v' \\<and> min_dist src v' = d'", "qed auto"], ["", "text \\<open>\n    Lemma \\<open>min_dist_less\\<close> can be weakened to \\<open>d'\\<le>d\\<close>.\n\\<close>"], ["", "corollary min_dist_le:\n    assumes c: \"conn src v\" and d': \"d' \\<le> min_dist src v\"\n    shows \"\\<exists>v'. conn src v' \\<and> min_dist src v' = d'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'. conn src v' \\<and> min_dist src v' = d'", "using min_dist_less[OF c, of \"min_dist src v\" d'] d' c"], ["proof (prove)\nusing this:\n  \\<lbrakk>min_dist src v = min_dist src v; d' < min_dist src v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'. conn src v' \\<and> min_dist src v' = d'\n  d' \\<le> min_dist src v\n  conn src v\n\ngoal (1 subgoal):\n 1. \\<exists>v'. conn src v' \\<and> min_dist src v' = d'", "by (auto simp: le_less)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "text \\<open>\n    In our framework, it is convenient to annotate the invariants and \n    auxiliary assertions into the program. Thus, we have to define the\n    invariants first.\n\\<close>"], ["", "text \\<open>\n    The invariant for the outer loop is split into two parts:\n    The first part already holds before \n    the \\<open>if C={}\\<close> check, the second part only holds again \n    at the end of the loop body.\n\\<close>"], ["", "text \\<open>\n    The first part of the invariant, \\<open>bfs_invar'\\<close>,\n    intuitively states the following:\n    If the loop is not {\\em break}ed, then we have:\n    \\begin{itemize}\n      \\item The next-node set \\<open>N\\<close> is a subset of \\<open>V\\<close>, and\n        the destination node is not contained into \\<open>V-(C\\<union>N)\\<close>,\n      \\item all nodes in the current-node set \\<open>C\\<close> have a shortest\n        path of length \\<open>d\\<close>,\n      \\item all nodes in the next-node set \\<open>N\\<close> have a shortest path\n        of length \\<open>d+1\\<close>,\n      \\item all nodes in the visited set \\<open>V\\<close> have a shortest path\n        of length at most \\<open>d+1\\<close>,\n      \\item all nodes with a path shorter than \\<open>d\\<close> are already in \n        \\<open>V\\<close>, and\n      \\item all nodes with a shortest path of length \\<open>d+1\\<close> are either\n        in the next-node set \\<open>N\\<close>, or they are undiscovered successors\n        of a node in the current-node set.\n    \\end{itemize}\n    \n    If the loop has been {\\em break}ed, \\<open>d\\<close> is the distance of the\n    shortest path between \\<open>src\\<close> and \\<open>dst\\<close>.\n\\<close>"], ["", "definition \"bfs_invar' src dst \\<sigma> \\<equiv> let (f,V,C,N,d)=\\<sigma> in\n    (\\<not>f \\<longrightarrow> (\n      N \\<subseteq> V \\<and> dst \\<notin> V - (C \\<union> N) \\<and>\n      (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n      (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n      (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n      (\\<forall>v. conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V) \\<and>\n      (\\<forall>v. conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N \\<union> ((\\<Union>(succ`C)) - V))\n    )) \\<and> (\n    f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d\n    )\""], ["", "text \\<open>\n    The second part of the invariant, \\<open>empty_assm\\<close>, just states \n    that \\<open>C\\<close> can only be empty if \\<open>N\\<close> is also empty.\n\\<close>"], ["", "definition \"empty_assm \\<sigma> \\<equiv> let (f,V,C,N,d)=\\<sigma> in\n    C={} \\<longrightarrow> N={}\""], ["", "text \\<open>\n    Finally, we define the invariant of the outer loop, \\<open>bfs_invar\\<close>, \n    as the conjunction of both parts:\n\\<close>"], ["", "definition \"bfs_invar src dst \\<sigma> \\<equiv> bfs_invar' src dst \\<sigma> \\<and> \n    empty_assm \\<sigma>\""], ["", "text \\<open>\n    The invariant of the inner foreach-loop states that\n    the successors that have already been processed (\\<open>succ v - it\\<close>),\n    have been added to \\<open>V\\<close> and have also been added to \n    \\<open>N'\\<close> if they are not in \\<open>V\\<close>.\n\\<close>"], ["", "definition \"FE_invar V N v it \\<sigma> \\<equiv> let (V',N')=\\<sigma> in \n    V'=V \\<union> (succ v - it) \\<and>\n    N'=N \\<union> ((succ v - it) - V)\""], ["", "subsection \\<open>Algorithm\\<close>"], ["", "text \\<open>\n    The following algorithm is a straightforward transcription of the \n    algorithm given in the assignment to the monadic style featured by our \n    framework.\n    We briefly explain the (mainly syntactic) differences:\n    \\begin{itemize}\n      \\item The initialization of the variables occur after the loop in\n          our formulation. This is just a syntactic difference, as our loop\n          construct has the form \\<open>WHILEI I c f \\<sigma>\\<^sub>0\\<close>, where \\<open>\\<sigma>\\<^sub>0\\<close>\n          is the initial state, and \\<open>I\\<close> is the loop invariant;\n      \\item We translated the textual specification \n        {\\em remove one vertex \\<open>v\\<close> from \\<open>C\\<close>} as accurately as\n        possible: The statement \\<open>v \\<leftarrow> SPEC (\\<lambda>v. v\\<in>C)\\<close> \n        nondeterministically assigns a node from \\<open>C\\<close> to \\<open>v\\<close>, \n        that is then removed in the next statement;\n      \\item In our monad, we have no notion of loop-breaking (yet). Hence we\n        added an additional boolean variable \\<open>f\\<close> that indicates that\n        the loop shall terminate. The \\<open>RETURN\\<close>-statements used in our\n        program are the return-operator of the monad, and must not be mixed up\n        with the return-statement given in the original program, that is \n        modeled by breaking the loop. The if-statement after the loop takes\n        care to return the right value;\n      \\item We added an else-branch to the if-statement that checks\n        whether we reached the destination node;\n      \\item We added an assertion of the first part of the invariant to the\n        program text, moreover, we annotated invariants at the loops.\n        We also added an assertion \\<open>w\\<notin>N\\<close> into the inner loop. This\n        is merely an optimization, that will allow us to implement the\n        insert operation more efficiently;\n      \\item Each conditional branch in the loop body ends with a \n        \\<open>RETURN\\<close>-statement. This is required by the monadic style;\n      \\item Failure is modeled by an option-datatype. The result \n        \\<open>Some d\\<close> means that the integer \\<open>d\\<close> is returned,\n        the result \\<open>None\\<close> means that a failure is returned.\n    \\end{itemize}\n\\<close>"], ["", "text_raw \\<open>\\clearpage\\<close>"], ["", "definition bfs :: \"'vertex \\<Rightarrow> 'vertex \\<Rightarrow> \n    (nat option nres)\"\n    where \"bfs src dst \\<equiv> do {\n    (f,_,_,_,d) \\<leftarrow> WHILEI (bfs_invar src dst) (\\<lambda>(f,V,C,N,d). f=False \\<and> C\\<noteq>{})\n      (\\<lambda>(f,V,C,N,d). do {\n        v \\<leftarrow> SPEC (\\<lambda>v. v\\<in>C); let C = C-{v};\n        if v=dst then RETURN (True,{},{},{},d)\n        else do {\n          (V,N) \\<leftarrow> FOREACHi (FE_invar V N v) (succ v) (\\<lambda>w (V,N). \n            if (w\\<notin>V) then do { \n              ASSERT (w\\<notin>N);\n              RETURN (insert w V, insert w N) \n            } else RETURN (V,N)\n          ) (V,N);\n          ASSERT (bfs_invar' src dst (f,V,C,N,d));\n          if (C={}) then do {\n            let C=N; \n            let N={}; \n            let d=d+1;\n            RETURN (f,V,C,N,d)\n          } else RETURN (f,V,C,N,d)\n        }\n      })\n      (False,{src},{src},{},0::nat);\n    if f then RETURN (Some d) else RETURN None\n    }\""], ["", "subsection \"Verification Tasks\""], ["", "text \\<open>\n    In order to make the proof more readable, we have extracted the\n    difficult verification conditions and proved them in separate lemmas.\n    The other verification conditions are proved automatically by Isabelle/HOL\n    during the proof of the main theorem.\n\n    Due to the timing constraints of the competition, the verification \n    conditions are mostly proved in Isabelle's apply-style, that is faster\n    to write for the experienced user, but harder to read by a human.\n\n    Exemplarily, we formulated the last proof in the proof language \n    {\\em Isar}, that allows one to write human-readable proofs and verify\n    them with Isabelle/HOL.\n\\<close>"], ["", "text \\<open>\n    The first part of the invariant is preserved if we take a node from \n    \\<open>C\\<close>, and add its successors that are not in \\<open>V\\<close> to \n    \\<open>N\\<close>.\n    This is the verification condition for the assertion after the \n    foreach-loop.\n\\<close>"], ["", "lemma invar_succ_step:\n    assumes \"bfs_invar' src dst (False, V, C, N, d)\"\n    assumes \"v\\<in>C\"\n    assumes \"v\\<noteq>dst\"\n    shows \"bfs_invar' src dst \n            (False, V \\<union> succ v, C - {v}, N \\<union> (succ v - V), d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bfs_invar' src dst\n     (False, V \\<union> succ v, C - {v}, N \\<union> (succ v - V), d)", "using assms"], ["proof (prove)\nusing this:\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst\n\ngoal (1 subgoal):\n 1. bfs_invar' src dst\n     (False, V \\<union> succ v, C - {v}, N \\<union> (succ v - V), d)", "proof (simp (no_asm_use) add: bfs_invar'_def, intro conjI, goal_cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N \\<union> (succ v - V).\n                         conn src v \\<and> min_dist src v = Suc d\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V \\<union> succ v.\n                         conn src v \\<and> min_dist src v \\<le> Suc d\n 8. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 9. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "case 6"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst\n\ngoal (9 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N \\<union> (succ v - V).\n                         conn src v \\<and> min_dist src v = Suc d\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V \\<union> succ v.\n                         conn src v \\<and> min_dist src v \\<le> Suc d\n 8. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 9. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>N \\<union> (succ v - V).\n       conn src v \\<and> min_dist src v = Suc d", "by (metis Un_iff Diff_iff connI_succ le_SucE min_dist_succ)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>N \\<union> (succ v - V).\n     conn src v \\<and> min_dist src v = Suc d\n\ngoal (8 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V \\<union> succ v.\n                         conn src v \\<and> min_dist src v \\<le> Suc d\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 8. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V \\<union> succ v.\n                         conn src v \\<and> min_dist src v \\<le> Suc d\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 8. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "case 7"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst\n\ngoal (8 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V \\<union> succ v.\n                         conn src v \\<and> min_dist src v \\<le> Suc d\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 8. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> C \\<or> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n      v \\<in> N \\<or>\n      (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V)\n  v \\<in> C\n  v \\<noteq> dst\n  bfs_invar' src dst (False, V, C, N, d)\n  v \\<in> C\n  v \\<noteq> dst\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V \\<union> succ v.\n       conn src v \\<and> min_dist src v \\<le> Suc d", "by (metis Un_iff connI_succ min_dist_succ)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V \\<union> succ v.\n     conn src v \\<and> min_dist src v \\<le> Suc d\n\ngoal (7 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> V \\<union> succ v\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> succ v - V \\<subseteq> V \\<union> succ v\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> V \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or> dst \\<in> N\n 4. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> succ v \\<longrightarrow>\n                      dst \\<in> C \\<and> dst \\<noteq> v \\<or>\n                      dst \\<in> N \\<or> dst \\<notin> V\n 5. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>C - {v}.\n                         conn src v \\<and> min_dist src v = d\n 6. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va \\<le> d \\<longrightarrow>\n                         va \\<in> V \\<or> va \\<in> succ v\n 7. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow>\n              dst \\<in> C \\<or> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N \\<or>\n                 (\\<exists>x\\<in>C. v \\<in> succ x) \\<and> v \\<notin> V);\n     v \\<in> C; v \\<noteq> dst; bfs_invar' src dst (False, V, C, N, d);\n     v \\<in> C; v \\<noteq> dst\\<rbrakk>\n    \\<Longrightarrow> \\<forall>va.\n                         conn src va \\<and>\n                         min_dist src va = Suc d \\<longrightarrow>\n                         va \\<in> N \\<or>\n                         va \\<in> succ v \\<and> va \\<notin> V \\<or>\n                         (\\<exists>x\\<in>C - {v}. va \\<in> succ x) \\<and>\n                         va \\<notin> V \\<and> va \\<notin> succ v", "qed blast+"], ["", "text \\<open>\n    The first part of the invariant is preserved if the \n    \\<open>if C={}\\<close>-statement is executed.\n    This is the verification condition for the \n    loop-invariant. Note that preservation of the second part of the \n    invariant is proven easily inside the main proof.\n\\<close>"], ["", "lemma invar_empty_step: \n    assumes \"bfs_invar' src dst (False, V, {}, N, d)\"\n    shows \"bfs_invar' src dst (False, V, N, {}, Suc d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bfs_invar' src dst (False, V, N, {}, Suc d)", "using assms"], ["proof (prove)\nusing this:\n  bfs_invar' src dst (False, V, {}, N, d)\n\ngoal (1 subgoal):\n 1. bfs_invar' src dst (False, V, N, {}, Suc d)", "proof (simp (no_asm_use) add: bfs_invar'_def, intro conjI impI allI, goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V.\n                         conn src v \\<and> min_dist src v \\<le> Suc (Suc d)\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V\n 5. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 6. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "case 3"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n\ngoal (6 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>V.\n                         conn src v \\<and> min_dist src v \\<le> Suc (Suc d)\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V\n 5. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 6. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc (Suc d)", "by (metis le_SucI)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc (Suc d)\n\ngoal (5 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 5. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 5. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "case 4"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ \\<le> Suc d\n\ngoal (5 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 5. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ \\<le> Suc d", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ \\<le> Suc d\n\ngoal (1 subgoal):\n 1. v_ \\<in> V", "by (metis le_SucE subsetD)"], ["proof (state)\nthis:\n  v_ \\<in> V\n\ngoal (4 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "case (5 v)"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v \\<and> min_dist src v = Suc (Suc d)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>N. v \\<in> succ x\n 4. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v \\<and> min_dist src v = Suc (Suc d)", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v \\<and> min_dist src v = Suc (Suc d)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>N. v \\<in> succ x", "using min_dist_suc[of src v \"Suc d\"]"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v \\<and> min_dist src v = Suc (Suc d)\n  \\<lbrakk>conn src v; min_dist src v = Suc (Suc d)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v''.\n                       conn src v'' \\<and>\n                       v \\<in> succ v'' \\<and> min_dist src v'' = Suc d\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>N. v \\<in> succ x", "by metis"], ["proof (state)\nthis:\n  \\<exists>x\\<in>N. v \\<in> succ x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "case 6"], ["proof (state)\nthis:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ = Suc (Suc d)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d\n 3. \\<And>v.\n       \\<lbrakk>N \\<subseteq> V \\<and>\n                (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n                (\\<forall>v\\<in>N.\n                    conn src v \\<and> min_dist src v = Suc d) \\<and>\n                (\\<forall>v\\<in>V.\n                    conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v \\<le> d \\<longrightarrow>\n                    v \\<in> V) \\<and>\n                (\\<forall>v.\n                    conn src v \\<and>\n                    min_dist src v = Suc d \\<longrightarrow>\n                    v \\<in> N);\n        bfs_invar' src dst (False, V, {}, N, d);\n        conn src v \\<and> min_dist src v = Suc (Suc d)\\<rbrakk>\n       \\<Longrightarrow> v \\<notin> V", "then"], ["proof (chain)\npicking this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ = Suc (Suc d)", "show ?case"], ["proof (prove)\nusing this:\n  N \\<subseteq> V \\<and>\n  (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n  (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n  (\\<forall>v\\<in>V. conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n      v \\<in> V) \\<and>\n  (\\<forall>v.\n      conn src v \\<and> min_dist src v = Suc d \\<longrightarrow> v \\<in> N)\n  bfs_invar' src dst (False, V, {}, N, d)\n  conn src v_ \\<and> min_dist src v_ = Suc (Suc d)\n\ngoal (1 subgoal):\n 1. v_ \\<notin> V", "by (metis Suc_n_not_le_n)"], ["proof (state)\nthis:\n  v_ \\<notin> V\n\ngoal (2 subgoals):\n 1. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d); dst \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dst \\<in> N\n 2. \\<lbrakk>N \\<subseteq> V \\<and>\n             (dst \\<in> V \\<longrightarrow> dst \\<in> N) \\<and>\n             (\\<forall>v\\<in>N.\n                 conn src v \\<and> min_dist src v = Suc d) \\<and>\n             (\\<forall>v\\<in>V.\n                 conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                 v \\<in> V) \\<and>\n             (\\<forall>v.\n                 conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                 v \\<in> N);\n     bfs_invar' src dst (False, V, {}, N, d)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>N.\n                         conn src v \\<and> min_dist src v = Suc d", "qed blast+"], ["", "text \\<open>The invariant holds initially.\\<close>"], ["", "lemma invar_init: \"bfs_invar src dst (False, {src}, {src}, {}, 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bfs_invar src dst (False, {src}, {src}, {}, 0)", "by (auto simp: bfs_invar_def bfs_invar'_def empty_assm_def)\n       (metis min_dist_suc min_dist_z_iff)"], ["", "text \\<open>The invariant is preserved if we break the loop.\\<close>"], ["", "lemma invar_break: \n    assumes \"bfs_invar src dst (False, V, C, N, d)\"\n    assumes \"dst\\<in>C\"\n    shows \"bfs_invar src dst (True, {}, {}, {}, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bfs_invar src dst (True, {}, {}, {}, d)", "using assms"], ["proof (prove)\nusing this:\n  bfs_invar src dst (False, V, C, N, d)\n  dst \\<in> C\n\ngoal (1 subgoal):\n 1. bfs_invar src dst (True, {}, {}, {}, d)", "unfolding bfs_invar_def bfs_invar'_def empty_assm_def"], ["proof (prove)\nusing this:\n  (let (f, V, C, N, d) = (False, V, C, N, d)\n   in (\\<not> f \\<longrightarrow>\n       N \\<subseteq> V \\<and>\n       dst \\<notin> V - (C \\<union> N) \\<and>\n       (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n       (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n       (\\<forall>v\\<in>V.\n           conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n       (\\<forall>v.\n           conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n           v \\<in> V) \\<and>\n       (\\<forall>v.\n           conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n           v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n      (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d)) \\<and>\n  (let (f, V, C, N, d) = (False, V, C, N, d)\n   in C = {} \\<longrightarrow> N = {})\n  dst \\<in> C\n\ngoal (1 subgoal):\n 1. (let (f, V, C, N, d) = (True, {}, {}, {}, d)\n     in (\\<not> f \\<longrightarrow>\n         N \\<subseteq> V \\<and>\n         dst \\<notin> V - (C \\<union> N) \\<and>\n         (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n         (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n         (\\<forall>v\\<in>V.\n             conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n         (\\<forall>v.\n             conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n             v \\<in> V) \\<and>\n         (\\<forall>v.\n             conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n             v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n        (f \\<longrightarrow>\n         conn src dst \\<and> min_dist src dst = d)) \\<and>\n    (let (f, V, C, N, d) = (True, {}, {}, {}, d)\n     in C = {} \\<longrightarrow> N = {})", "by auto"], ["", "text \\<open>If we have {\\em break}ed the loop, the invariant implies\n    that we, indeed, returned the shortest path.\\<close>"], ["", "lemma invar_final_succeed:\n    assumes \"bfs_invar' src dst (True, V, C, N, d)\"  \n    shows \"min_dist src dst = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_dist src dst = d", "using assms"], ["proof (prove)\nusing this:\n  bfs_invar' src dst (True, V, C, N, d)\n\ngoal (1 subgoal):\n 1. min_dist src dst = d", "unfolding bfs_invar'_def"], ["proof (prove)\nusing this:\n  let (f, V, C, N, d) = (True, V, C, N, d)\n  in (\\<not> f \\<longrightarrow>\n      N \\<subseteq> V \\<and>\n      dst \\<notin> V - (C \\<union> N) \\<and>\n      (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n      (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n      (\\<forall>v\\<in>V.\n          conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n          v \\<in> V) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n          v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n     (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d)\n\ngoal (1 subgoal):\n 1. min_dist src dst = d", "by auto"], ["", "text \\<open>If the loop terminated normally, there is no path between \n    \\<open>src\\<close> and \\<open>dst\\<close>. \n\n    The lemma is formulated as deriving a contradiction from the fact\n    that there is a path and the loop terminated normally.\n\n    Note the proof language {\\em Isar} that was used here.\n    It allows one to write human-readable proofs in a theorem prover.\n\\<close>"], ["", "lemma invar_final_fail: \n    assumes C: \"conn src dst\" \\<comment> \\<open>There is a path between \n      @{text \"src\"} and @{text \"dst\"}.\\<close>\n    assumes INV: \"bfs_invar' src dst (False, V, {}, {}, d)\"\n    shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "txt \\<open>We make a case-distinction whether \\<open>d'\\<le>d\\<close>:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have \"min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst", "by auto"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>Due to the invariant, any node with a path of \n        length at most \\<open>d\\<close> is contained in \\<open>V\\<close>\n\\<close>"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. False", "from INV"], ["proof (chain)\npicking this:\n  bfs_invar' src dst (False, V, {}, {}, d)", "have \"\\<forall>v. conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v\\<in>V\""], ["proof (prove)\nusing this:\n  bfs_invar' src dst (False, V, {}, {}, d)\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V", "unfolding bfs_invar'_def"], ["proof (prove)\nusing this:\n  let (f, V, C, N, d) = (False, V, {}, {}, d)\n  in (\\<not> f \\<longrightarrow>\n      N \\<subseteq> V \\<and>\n      dst \\<notin> V - (C \\<union> N) \\<and>\n      (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n      (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n      (\\<forall>v\\<in>V.\n          conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n          v \\<in> V) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n          v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n     (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d)\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V", "by auto"], ["proof (state)\nthis:\n  \\<forall>v.\n     conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>v.\n     conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>This applies in the first case, hence we obtain that \n        \\<open>dst\\<in>V\\<close>\\<close>"], ["proof (state)\nthis:\n  \\<forall>v.\n     conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V\n\ngoal (1 subgoal):\n 1. False", "assume A: \"min_dist src dst \\<le> d\""], ["proof (state)\nthis:\n  min_dist src dst \\<le> d\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d\n\ngoal (1 subgoal):\n 1. False", "from C"], ["proof (chain)\npicking this:\n  conn src dst", "have \"dist src (min_dist src dst) dst\""], ["proof (prove)\nusing this:\n  conn src dst\n\ngoal (1 subgoal):\n 1. dist src (min_dist src dst) dst", "by (blast intro: min_dist_is_dist)"], ["proof (state)\nthis:\n  dist src (min_dist src dst) dst\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>v.\n     conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V\n  min_dist src dst \\<le> d\n  dist src (min_dist src dst) dst", "have \"dst\\<in>V\""], ["proof (prove)\nusing this:\n  \\<forall>v.\n     conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow> v \\<in> V\n  min_dist src dst \\<le> d\n  dist src (min_dist src dst) dst\n\ngoal (1 subgoal):\n 1. dst \\<in> V", "by blast"], ["proof (state)\nthis:\n  dst \\<in> V\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>However, as \\<open>C\\<close> and \\<open>N\\<close> are empty, the invariant\n        also implies that \\<open>dst\\<close> is not in \\<open>V\\<close>:\\<close>"], ["proof (state)\nthis:\n  dst \\<in> V\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  dst \\<in> V\n\ngoal (1 subgoal):\n 1. False", "from INV"], ["proof (chain)\npicking this:\n  bfs_invar' src dst (False, V, {}, {}, d)", "have \"dst\\<notin>V\""], ["proof (prove)\nusing this:\n  bfs_invar' src dst (False, V, {}, {}, d)\n\ngoal (1 subgoal):\n 1. dst \\<notin> V", "unfolding bfs_invar'_def"], ["proof (prove)\nusing this:\n  let (f, V, C, N, d) = (False, V, {}, {}, d)\n  in (\\<not> f \\<longrightarrow>\n      N \\<subseteq> V \\<and>\n      dst \\<notin> V - (C \\<union> N) \\<and>\n      (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n      (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n      (\\<forall>v\\<in>V.\n          conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n          v \\<in> V) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n          v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n     (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d)\n\ngoal (1 subgoal):\n 1. dst \\<notin> V", "by auto"], ["proof (state)\nthis:\n  dst \\<notin> V\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>This yields a contradiction:\\<close>"], ["proof (state)\nthis:\n  dst \\<notin> V\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  dst \\<in> V\n  dst \\<notin> V", "have False"], ["proof (prove)\nusing this:\n  dst \\<in> V\n  dst \\<notin> V\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>In the case \\<open>d+1 \\<le> d'\\<close>, we also obtain a node\n        that has a shortest path of length \\<open>d+1\\<close>:\\<close>"], ["proof (state)\nthis:\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "assume \"d+1 \\<le> min_dist src dst\""], ["proof (state)\nthis:\n  d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. False", "with min_dist_le[OF C]"], ["proof (chain)\npicking this:\n  ?d' \\<le> min_dist src dst \\<Longrightarrow>\n  \\<exists>v'. conn src v' \\<and> min_dist src v' = ?d'\n  d + 1 \\<le> min_dist src dst", "obtain v' where \n        \"conn src v'\" \"min_dist src v' = d + 1\""], ["proof (prove)\nusing this:\n  ?d' \\<le> min_dist src dst \\<Longrightarrow>\n  \\<exists>v'. conn src v' \\<and> min_dist src v' = ?d'\n  d + 1 \\<le> min_dist src dst\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>conn src v'; min_dist src v' = d + 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  conn src v'\n  min_dist src v' = d + 1\n\ngoal (1 subgoal):\n 1. False", "txt \\<open>However, the invariant states that such nodes are either in\n        \\<open>N\\<close> or are successors of \\<open>C\\<close>. As \\<open>N\\<close> \n        and \\<open>C\\<close> are both empty, we again get a contradiction.\\<close>"], ["proof (state)\nthis:\n  conn src v'\n  min_dist src v' = d + 1\n\ngoal (1 subgoal):\n 1. False", "with INV"], ["proof (chain)\npicking this:\n  bfs_invar' src dst (False, V, {}, {}, d)\n  conn src v'\n  min_dist src v' = d + 1", "have False"], ["proof (prove)\nusing this:\n  bfs_invar' src dst (False, V, {}, {}, d)\n  conn src v'\n  min_dist src v' = d + 1\n\ngoal (1 subgoal):\n 1. False", "unfolding bfs_invar'_def"], ["proof (prove)\nusing this:\n  let (f, V, C, N, d) = (False, V, {}, {}, d)\n  in (\\<not> f \\<longrightarrow>\n      N \\<subseteq> V \\<and>\n      dst \\<notin> V - (C \\<union> N) \\<and>\n      (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n      (\\<forall>v\\<in>N. conn src v \\<and> min_dist src v = Suc d) \\<and>\n      (\\<forall>v\\<in>V.\n          conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n          v \\<in> V) \\<and>\n      (\\<forall>v.\n          conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n          v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n     (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d)\n  conn src v'\n  min_dist src v' = d + 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  d + 1 \\<le> min_dist src dst \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n  d + 1 \\<le> min_dist src dst \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  min_dist src dst \\<le> d \\<or> d + 1 \\<le> min_dist src dst\n  min_dist src dst \\<le> d \\<Longrightarrow> False\n  d + 1 \\<le> min_dist src dst \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n    Finally, we prove our algorithm correct:\n    The following theorem solves both verification tasks.\n\n    Note that a proposition of the form \\<open>S \\<sqsubseteq> SPEC \\<Phi>\\<close> states partial \n    correctness in our framework, i.e., \\<open>S\\<close> refines the \n    specification \\<open>\\<Phi>\\<close>.\n\n    The actual specification that we prove here\n    precisely reflects the two verification tasks: {\\em If the algorithm fails,\n    there is no path between \\<open>src\\<close> and \\<open>dst\\<close>, otherwise\n    it returns the length of the shortest path.}\n\n    The proof of this theorem first applies the verification condition \n    generator (\\<open>apply (intro refine_vcg)\\<close>), and then uses the\n    lemmas proved beforehand to discharge the verification conditions.\n    During the \\<open>auto\\<close>-methods, some trivial verification conditions,\n    e.g., those concerning the invariant of the inner loop, are discharged\n    automatically.\n    During the proof, we gradually unfold the definition of the loop\n    invariant.\n\\<close>"], ["", "definition \"bfs_spec src dst \\<equiv> SPEC (\n    \\<lambda>r. case r of None \\<Rightarrow> \\<not> conn src dst\n              | Some d \\<Rightarrow> conn src dst \\<and> min_dist src dst = d)\""], ["", "theorem bfs_correct: \"bfs src dst \\<le> bfs_spec src dst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bfs src dst \\<le> bfs_spec src dst", "unfolding bfs_def bfs_spec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^bsup>bfs_invar src dst\\<^esup>\n     (\\<lambda>(f, V, C, N, d). f = False \\<and> C \\<noteq> {})\n     (\\<lambda>(f, V, C, N, d).\n         SPEC (\\<lambda>v. v \\<in> C) \\<bind>\n         (\\<lambda>v.\n             let C = C - {v}\n             in if v = dst then RETURN (True, {}, {}, {}, d)\n                else FOREACH\\<^bsup>FE_invar V N v\\<^esup> (succ v)\n                      (\\<lambda>w (V, N).\n                          if w \\<notin> V\n                          then ASSERT (w \\<notin> N) \\<bind>\n                               (\\<lambda>_. RETURN (insert w V, insert w N))\n                          else RETURN (V, N))\n                      (V, N) \\<bind>\n                     (\\<lambda>(V, N).\n                         ASSERT (bfs_invar' src dst (f, V, C, N, d)) \\<bind>\n                         (\\<lambda>_.\n                             if C = {}\n                             then let C = N; N = {}; d = d + 1\n                                  in RETURN (f, V, C, N, d)\n                             else RETURN (f, V, C, N, d)))))\n     (False, {src}, {src}, {}, 0) \\<bind>\n    (\\<lambda>(f, uu_, uu_, uu_, d).\n        if f then RETURN (Some d) else RETURN None)\n    \\<le> SPEC\n           (\\<lambda>r.\n               case r of None \\<Rightarrow> \\<not> conn src dst\n               | Some d \\<Rightarrow>\n                   conn src dst \\<and> min_dist src dst = d)", "apply (intro refine_vcg)"], ["proof (prove)\ngoal (12 subgoals):\n 1. bfs_invar src dst (False, {src}, {src}, {}, 0)\n 2. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x = dst\\<rbrakk>\n       \\<Longrightarrow> bfs_invar src dst (True, {}, {}, {}, bc)\n 3. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst\\<rbrakk>\n       \\<Longrightarrow> finite (succ x)\n 4. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst\\<rbrakk>\n       \\<Longrightarrow> FE_invar aa ac x (succ x) (aa, ac)\n 5. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        FE_invar aa ac x it \\<sigma>; \\<sigma> = (ad, bd);\n        xa \\<notin> ad\\<rbrakk>\n       \\<Longrightarrow> xa \\<notin> bd\n 6. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        FE_invar aa ac x it \\<sigma>; \\<sigma> = (ad, bd); xa \\<notin> ad;\n        xa \\<notin> bd\\<rbrakk>\n       \\<Longrightarrow> FE_invar aa ac x (it - {xa})\n                          (insert xa ad, insert xa bd)\n 7. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        FE_invar aa ac x it \\<sigma>; \\<sigma> = (ad, bd);\n        \\<not> xa \\<notin> ad\\<rbrakk>\n       \\<Longrightarrow> FE_invar aa ac x (it - {xa}) (ad, bd)\n 8. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; FE_invar aa ac x {} \\<sigma>;\n        \\<sigma> = (ad, bd)\\<rbrakk>\n       \\<Longrightarrow> bfs_invar' src dst (a, ad, ab - {x}, bd, bc)\n 9. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; FE_invar aa ac x {} \\<sigma>; \\<sigma> = (ad, bd);\n        bfs_invar' src dst (a, ad, ab - {x}, bd, bc); ab - {x} = {}\\<rbrakk>\n       \\<Longrightarrow> bfs_invar src dst (a, ad, bd, {}, bc + 1)\n 10. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n        \\<lbrakk>bfs_invar src dst s;\n         case s of\n         (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n         s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n         x \\<noteq> dst; FE_invar aa ac x {} \\<sigma>; \\<sigma> = (ad, bd);\n         bfs_invar' src dst (a, ad, ab - {x}, bd, bc);\n         ab - {x} \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> bfs_invar src dst (a, ad, ab - {x}, bd, bc)\nA total of 12 subgoals...", "unfolding FE_invar_def"], ["proof (prove)\ngoal (12 subgoals):\n 1. bfs_invar src dst (False, {src}, {src}, {}, 0)\n 2. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x = dst\\<rbrakk>\n       \\<Longrightarrow> bfs_invar src dst (True, {}, {}, {}, bc)\n 3. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst\\<rbrakk>\n       \\<Longrightarrow> finite (succ x)\n 4. \\<And>s a b aa ba ab bb ac bc x.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst\\<rbrakk>\n       \\<Longrightarrow> let (V', N') = (aa, ac)\n                         in V' = aa \\<union> (succ x - succ x) \\<and>\n                            N' = ac \\<union> (succ x - succ x - aa)\n 5. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        let (V', N') = \\<sigma>\n        in V' = aa \\<union> (succ x - it) \\<and>\n           N' = ac \\<union> (succ x - it - aa);\n        \\<sigma> = (ad, bd); xa \\<notin> ad\\<rbrakk>\n       \\<Longrightarrow> xa \\<notin> bd\n 6. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        let (V', N') = \\<sigma>\n        in V' = aa \\<union> (succ x - it) \\<and>\n           N' = ac \\<union> (succ x - it - aa);\n        \\<sigma> = (ad, bd); xa \\<notin> ad; xa \\<notin> bd\\<rbrakk>\n       \\<Longrightarrow> let (V', N') = (insert xa ad, insert xa bd)\n                         in V' = aa \\<union> (succ x - (it - {xa})) \\<and>\n                            N' = ac \\<union> (succ x - (it - {xa}) - aa)\n 7. \\<And>s a b aa ba ab bb ac bc x xa it \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        let (V', N') = \\<sigma>\n        in V' = aa \\<union> (succ x - it) \\<and>\n           N' = ac \\<union> (succ x - it - aa);\n        \\<sigma> = (ad, bd); \\<not> xa \\<notin> ad\\<rbrakk>\n       \\<Longrightarrow> let (V', N') = (ad, bd)\n                         in V' = aa \\<union> (succ x - (it - {xa})) \\<and>\n                            N' = ac \\<union> (succ x - (it - {xa}) - aa)\n 8. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst;\n        let (V', N') = \\<sigma>\n        in V' = aa \\<union> (succ x - {}) \\<and>\n           N' = ac \\<union> (succ x - {} - aa);\n        \\<sigma> = (ad, bd)\\<rbrakk>\n       \\<Longrightarrow> bfs_invar' src dst (a, ad, ab - {x}, bd, bc)\n 9. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n       \\<lbrakk>bfs_invar src dst s;\n        case s of\n        (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n        s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n        x \\<noteq> dst;\n        let (V', N') = \\<sigma>\n        in V' = aa \\<union> (succ x - {}) \\<and>\n           N' = ac \\<union> (succ x - {} - aa);\n        \\<sigma> = (ad, bd); bfs_invar' src dst (a, ad, ab - {x}, bd, bc);\n        ab - {x} = {}\\<rbrakk>\n       \\<Longrightarrow> bfs_invar src dst (a, ad, bd, {}, bc + 1)\n 10. \\<And>s a b aa ba ab bb ac bc x \\<sigma> ad bd.\n        \\<lbrakk>bfs_invar src dst s;\n         case s of\n         (f, V, C, N, d) \\<Rightarrow> f = False \\<and> C \\<noteq> {};\n         s = (a, b); b = (aa, ba); ba = (ab, bb); bb = (ac, bc); x \\<in> ab;\n         x \\<noteq> dst;\n         let (V', N') = \\<sigma>\n         in V' = aa \\<union> (succ x - {}) \\<and>\n            N' = ac \\<union> (succ x - {} - aa);\n         \\<sigma> = (ad, bd); bfs_invar' src dst (a, ad, ab - {x}, bd, bc);\n         ab - {x} \\<noteq> {}\\<rbrakk>\n        \\<Longrightarrow> bfs_invar src dst (a, ad, ab - {x}, bd, bc)\nA total of 12 subgoals...", "apply (auto simp: \n      intro: invar_init invar_break )"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb.\n       \\<lbrakk>bfs_invar src dst (False, aaa, aba, aca, bca); x \\<in> aba;\n        x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x; xa \\<notin> aaa;\n        \\<not> ad; xa \\<in> aca; xb \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>bfs_invar src dst (False, aaa, aba, aca, bca); x \\<in> aba;\n        x \\<noteq> dst; \\<not> ad;\n        \\<not> bfs_invar' src dst\n                (False, aaa \\<union> succ x, aba - {x},\n                 aca \\<union> (succ x - aaa), bca);\n        xa \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>bfs_invar src dst (False, aaa, aba, aca, bca); x \\<in> aba;\n        x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, {}, aca \\<union> (succ x - aaa), bca);\n        aba \\<subseteq> {x}; \\<not> ad;\n        \\<not> bfs_invar src dst\n                (False, aaa \\<union> succ x, aca \\<union> (succ x - aaa),\n                 {}, Suc bca);\n        xa \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>ad aaa aba aca bca x xa xb.\n       \\<lbrakk>bfs_invar src dst (False, aaa, aba, aca, bca); x \\<in> aba;\n        x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, aba - {x},\n          aca \\<union> (succ x - aaa), bca);\n        \\<not> bfs_invar src dst\n                (False, aaa \\<union> succ x, aba - {x},\n                 aca \\<union> (succ x - aaa), bca);\n        xa \\<in> aba; \\<not> ad; xa \\<noteq> x; xb \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>bfs_invar src dst (True, aaa, aba, aca, bca); ad\\<rbrakk>\n       \\<Longrightarrow> conn src dst\n 6. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>bfs_invar src dst (True, aaa, aba, aca, bca); ad\\<rbrakk>\n       \\<Longrightarrow> min_dist src dst = bca\n 7. \\<And>ad aaa aca bca.\n       \\<lbrakk>bfs_invar src dst (False, aaa, {}, aca, bca); \\<not> ad;\n        conn src dst\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding bfs_invar_def"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb.\n       \\<lbrakk>bfs_invar' src dst (False, aaa, aba, aca, bca) \\<and>\n                empty_assm (False, aaa, aba, aca, bca);\n        x \\<in> aba; x \\<noteq> dst; xa \\<in> it; it \\<subseteq> succ x;\n        xa \\<notin> aaa; \\<not> ad; xa \\<in> aca; xb \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>bfs_invar' src dst (False, aaa, aba, aca, bca) \\<and>\n                empty_assm (False, aaa, aba, aca, bca);\n        x \\<in> aba; x \\<noteq> dst; \\<not> ad;\n        \\<not> bfs_invar' src dst\n                (False, aaa \\<union> succ x, aba - {x},\n                 aca \\<union> (succ x - aaa), bca);\n        xa \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>bfs_invar' src dst (False, aaa, aba, aca, bca) \\<and>\n                empty_assm (False, aaa, aba, aca, bca);\n        x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, {}, aca \\<union> (succ x - aaa), bca);\n        aba \\<subseteq> {x}; \\<not> ad;\n        \\<not> (bfs_invar' src dst\n                 (False, aaa \\<union> succ x, aca \\<union> (succ x - aaa),\n                  {}, Suc bca) \\<and>\n                empty_assm\n                 (False, aaa \\<union> succ x, aca \\<union> (succ x - aaa),\n                  {}, Suc bca));\n        xa \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>ad aaa aba aca bca x xa xb.\n       \\<lbrakk>bfs_invar' src dst (False, aaa, aba, aca, bca) \\<and>\n                empty_assm (False, aaa, aba, aca, bca);\n        x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, aba - {x},\n          aca \\<union> (succ x - aaa), bca);\n        \\<not> (bfs_invar' src dst\n                 (False, aaa \\<union> succ x, aba - {x},\n                  aca \\<union> (succ x - aaa), bca) \\<and>\n                empty_assm\n                 (False, aaa \\<union> succ x, aba - {x},\n                  aca \\<union> (succ x - aaa), bca));\n        xa \\<in> aba; \\<not> ad; xa \\<noteq> x; xb \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>bfs_invar' src dst (True, aaa, aba, aca, bca) \\<and>\n                empty_assm (True, aaa, aba, aca, bca);\n        ad\\<rbrakk>\n       \\<Longrightarrow> conn src dst\n 6. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>bfs_invar' src dst (True, aaa, aba, aca, bca) \\<and>\n                empty_assm (True, aaa, aba, aca, bca);\n        ad\\<rbrakk>\n       \\<Longrightarrow> min_dist src dst = bca\n 7. \\<And>ad aaa aca bca.\n       \\<lbrakk>bfs_invar' src dst (False, aaa, {}, aca, bca) \\<and>\n                empty_assm (False, aaa, {}, aca, bca);\n        \\<not> ad; conn src dst\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp: \n      intro: invar_succ_step invar_empty_step invar_final_succeed)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst; xa \\<in> it;\n        it \\<subseteq> succ x; xa \\<notin> aaa; \\<not> ad; xa \\<in> aca;\n        xb \\<in> aba; bfs_invar' src dst (False, aaa, aba, aca, bca);\n        empty_assm (False, aaa, aba, aca, bca)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, {}, aca \\<union> (succ x - aaa), bca);\n        aba \\<subseteq> {x}; \\<not> ad; xa \\<in> aba;\n        bfs_invar' src dst (False, aaa, aba, aca, bca);\n        empty_assm (False, aaa, aba, aca, bca);\n        \\<not> empty_assm\n                (False, aaa \\<union> succ x, aca \\<union> (succ x - aaa),\n                 {}, Suc bca)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba aca bca x xa xb.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, aba - {x},\n          aca \\<union> (succ x - aaa), bca);\n        \\<not> empty_assm\n                (False, aaa \\<union> succ x, aba - {x},\n                 aca \\<union> (succ x - aaa), bca);\n        xa \\<in> aba; \\<not> ad; xa \\<noteq> x; xb \\<in> aba;\n        bfs_invar' src dst (False, aaa, aba, aca, bca);\n        empty_assm (False, aaa, aba, aca, bca)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>ad; bfs_invar' src dst (True, aaa, aba, aca, bca);\n        empty_assm (True, aaa, aba, aca, bca)\\<rbrakk>\n       \\<Longrightarrow> conn src dst\n 5. \\<And>ad aaa aca bca.\n       \\<lbrakk>\\<not> ad; conn src dst;\n        bfs_invar' src dst (False, aaa, {}, aca, bca);\n        empty_assm (False, aaa, {}, aca, bca)\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding empty_assm_def"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst; xa \\<in> it;\n        it \\<subseteq> succ x; xa \\<notin> aaa; \\<not> ad; xa \\<in> aca;\n        xb \\<in> aba; bfs_invar' src dst (False, aaa, aba, aca, bca);\n        let (f, V, C, N, d) = (False, aaa, aba, aca, bca)\n        in C = {} \\<longrightarrow> N = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x xa.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, {}, aca \\<union> (succ x - aaa), bca);\n        aba \\<subseteq> {x}; \\<not> ad; xa \\<in> aba;\n        bfs_invar' src dst (False, aaa, aba, aca, bca);\n        let (f, V, C, N, d) = (False, aaa, aba, aca, bca)\n        in C = {} \\<longrightarrow> N = {};\n        \\<not> (let (f, V, C, N, d) =\n                      (False, aaa \\<union> succ x,\n                       aca \\<union> (succ x - aaa), {}, Suc bca)\n                in C = {} \\<longrightarrow> N = {})\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba aca bca x xa xb.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst;\n        bfs_invar' src dst\n         (False, aaa \\<union> succ x, aba - {x},\n          aca \\<union> (succ x - aaa), bca);\n        \\<not> (let (f, V, C, N, d) =\n                      (False, aaa \\<union> succ x, aba - {x},\n                       aca \\<union> (succ x - aaa), bca)\n                in C = {} \\<longrightarrow> N = {});\n        xa \\<in> aba; \\<not> ad; xa \\<noteq> x; xb \\<in> aba;\n        bfs_invar' src dst (False, aaa, aba, aca, bca);\n        let (f, V, C, N, d) = (False, aaa, aba, aca, bca)\n        in C = {} \\<longrightarrow> N = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>ad aaa aba aca bca.\n       \\<lbrakk>ad; bfs_invar' src dst (True, aaa, aba, aca, bca);\n        let (f, V, C, N, d) = (True, aaa, aba, aca, bca)\n        in C = {} \\<longrightarrow> N = {}\\<rbrakk>\n       \\<Longrightarrow> conn src dst\n 5. \\<And>ad aaa aca bca.\n       \\<lbrakk>\\<not> ad; conn src dst;\n        bfs_invar' src dst (False, aaa, {}, aca, bca);\n        let (f, V, C, N, d) = (False, aaa, {}, aca, bca)\n        in C = {} \\<longrightarrow> N = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto intro: invar_final_fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb xc.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst; xa \\<in> it;\n        it \\<subseteq> succ x; xa \\<notin> aaa; \\<not> ad; xa \\<in> aca;\n        xb \\<in> aba; bfs_invar' src dst (False, aaa, aba, aca, bca);\n        xc \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x.\n       \\<lbrakk>ad; bfs_invar' src dst (True, aaa, aba, aca, bca);\n        \\<not> conn src dst; x \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba bca.\n       \\<lbrakk>ad; bfs_invar' src dst (True, aaa, aba, {}, bca)\\<rbrakk>\n       \\<Longrightarrow> conn src dst", "unfolding bfs_invar'_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ad aaa aba aca bca x xa it xb xc.\n       \\<lbrakk>x \\<in> aba; x \\<noteq> dst; xa \\<in> it;\n        it \\<subseteq> succ x; xa \\<notin> aaa; \\<not> ad; xa \\<in> aca;\n        xb \\<in> aba;\n        let (f, V, C, N, d) = (False, aaa, aba, aca, bca)\n        in (\\<not> f \\<longrightarrow>\n            N \\<subseteq> V \\<and>\n            dst \\<notin> V - (C \\<union> N) \\<and>\n            (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n            (\\<forall>v\\<in>N.\n                conn src v \\<and> min_dist src v = Suc d) \\<and>\n            (\\<forall>v\\<in>V.\n                conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                v \\<in> V) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n           (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d);\n        xc \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ad aaa aba aca bca x.\n       \\<lbrakk>ad;\n        let (f, V, C, N, d) = (True, aaa, aba, aca, bca)\n        in (\\<not> f \\<longrightarrow>\n            N \\<subseteq> V \\<and>\n            dst \\<notin> V - (C \\<union> N) \\<and>\n            (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n            (\\<forall>v\\<in>N.\n                conn src v \\<and> min_dist src v = Suc d) \\<and>\n            (\\<forall>v\\<in>V.\n                conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                v \\<in> V) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n           (f \\<longrightarrow> conn src dst \\<and> min_dist src dst = d);\n        \\<not> conn src dst; x \\<in> aba\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>ad aaa aba bca.\n       \\<lbrakk>ad;\n        let (f, V, C, N, d) = (True, aaa, aba, {}, bca)\n        in (\\<not> f \\<longrightarrow>\n            N \\<subseteq> V \\<and>\n            dst \\<notin> V - (C \\<union> N) \\<and>\n            (\\<forall>v\\<in>C. conn src v \\<and> min_dist src v = d) \\<and>\n            (\\<forall>v\\<in>N.\n                conn src v \\<and> min_dist src v = Suc d) \\<and>\n            (\\<forall>v\\<in>V.\n                conn src v \\<and> min_dist src v \\<le> Suc d) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v \\<le> d \\<longrightarrow>\n                v \\<in> V) \\<and>\n            (\\<forall>v.\n                conn src v \\<and> min_dist src v = Suc d \\<longrightarrow>\n                v \\<in> N \\<union> (\\<Union> (succ ` C) - V))) \\<and>\n           (f \\<longrightarrow>\n            conn src dst \\<and> min_dist src dst = d)\\<rbrakk>\n       \\<Longrightarrow> conn src dst", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}