{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic/Refine_Det.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic", "problem_names": ["lemma sup_dres_addsimps[simp]:\n    \"sup x dFAILi = dFAILi\"\n    \"sup x dSUCCEEDi = x\"", "lemma inf_dres_addsimps[simp]:\n    \"inf x dSUCCEEDi = dSUCCEEDi\"\n    \"inf dSUCCEEDi x = dSUCCEEDi\"\n    \"inf x dFAILi = x\"\n    \"inf (dRETURN v) x \\<noteq> dFAILi\"", "lemma less_eq_dres_split_conv: \n    \"a\\<le>b \\<longleftrightarrow> (case (a,b) of \n        (dSUCCEEDi,_) \\<Rightarrow> True \n      | (_,dFAILi) \\<Rightarrow> True\n      | (dRETURN (a::'a), dRETURN b) \\<Rightarrow> a=b\n      | _ \\<Rightarrow> False\n    )\"", "lemma inf_dres_split_conv: \n    \"inf a b = (case (a,b) of \n      (dFAILi,x) \\<Rightarrow> x\n    | (x,dFAILi) \\<Rightarrow> x\n    | (dRETURN a, dRETURN b) \\<Rightarrow> (if a=b then dRETURN b else dSUCCEEDi)\n    | _ \\<Rightarrow> dSUCCEEDi)\"", "lemma sup_dres_split_conv: \n    \"sup a b = (case (a,b) of \n      (dSUCCEEDi,x) \\<Rightarrow> x\n    | (x,dSUCCEEDi) \\<Rightarrow> x\n    | (dRETURN a, dRETURN b) \\<Rightarrow> (if a=b then dRETURN b else dFAILi)\n    | _ \\<Rightarrow> dFAILi)\"", "lemma dres_cases[cases type, case_names dSUCCEED dRETURN dFAIL]:\n  obtains \"x=dSUCCEED\" | r where \"x=dRETURN r\" | \"x=dFAIL\"", "lemmas [simp] = dres.case(1,2)[folded top_dres_def bot_dres_def]", "lemma dres_order_simps[simp]:\n  \"x\\<le>dSUCCEED \\<longleftrightarrow> x=dSUCCEED\" \n  \"dFAIL\\<le>x \\<longleftrightarrow> x=dFAIL\"\n  \"dRETURN r \\<noteq> dFAIL\"\n  \"dRETURN r \\<noteq> dSUCCEED\"\n  \"dFAIL \\<noteq> dRETURN r\"\n  \"dSUCCEED \\<noteq> dRETURN r\"\n  \"dFAIL\\<noteq>dSUCCEED\"\n  \"dSUCCEED\\<noteq>dFAIL\"\n  \"x=y \\<Longrightarrow> inf (dRETURN x) (dRETURN y) = dRETURN y\"\n  \"x\\<noteq>y \\<Longrightarrow> inf (dRETURN x) (dRETURN y) = dSUCCEED\"\n  \"x=y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dRETURN y\"\n  \"x\\<noteq>y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dFAIL\"", "lemma dres_Sup_cases:\n  obtains \"S\\<subseteq>{dSUCCEED}\" and \"Sup S = dSUCCEED\"\n  | \"dFAIL\\<in>S\" and \"Sup S = dFAIL\"\n  | a b where \"a\\<noteq>b\" \"dRETURN a\\<in>S\" \"dRETURN b\\<in>S\" \"dFAIL\\<notin>S\" \"Sup S = dFAIL\"\n  | a where \"S \\<subseteq> {dSUCCEED, dRETURN a}\" \"dRETURN a\\<in>S\" \"Sup S = dRETURN a\"", "lemma dres_Inf_cases:\n  obtains \"S\\<subseteq>{dFAIL}\" and \"Inf S = dFAIL\"\n  | \"dSUCCEED\\<in>S\" and \"Inf S = dSUCCEED\"\n  | a b where \"a\\<noteq>b\" \"dRETURN a\\<in>S\" \"dRETURN b\\<in>S\" \"dSUCCEED\\<notin>S\" \"Inf S = dSUCCEED\"\n  | a where \"S \\<subseteq> {dFAIL, dRETURN a}\" \"dRETURN a\\<in>S\" \"Inf S = dRETURN a\"", "lemma dres_chain_eq_res:\n  \"is_chain M \\<Longrightarrow> \n    dRETURN r \\<in> M \\<Longrightarrow> dRETURN s \\<in> M \\<Longrightarrow> r=s\"", "lemma dres_Sup_chain_cases:\n  assumes CHAIN: \"is_chain M\"\n  obtains \"M \\<subseteq> {dSUCCEED}\" \"Sup M = dSUCCEED\"\n  | r where \"M \\<subseteq> {dSUCCEED,dRETURN r}\" \"dRETURN r\\<in>M\" \"Sup M = dRETURN r\"\n  | \"dFAIL\\<in>M\" \"Sup M = dFAIL\"", "lemma dres_Inf_chain_cases:\n  assumes CHAIN: \"is_chain M\"\n  obtains \"M \\<subseteq> {dFAIL}\" \"Inf M = dFAIL\"\n  | r where \"M \\<subseteq> {dFAIL,dRETURN r}\" \"dRETURN r\\<in>M\" \"Inf M = dRETURN r\"\n  | \"dSUCCEED\\<in>M\" \"Inf M = dSUCCEED\"", "lemma dres_internal_simps[simp]:\n  \"dSUCCEEDi = dSUCCEED\"\n  \"dFAILi = dFAIL\"", "lemma [code]:\n  \"dbind (dRETURN x) f = f x\"\n  \"dbind (dSUCCEEDi) f = dSUCCEEDi\"\n  \"dbind (dFAILi) f = dFAILi\"", "lemma dres_monad1[simp]: \"dbind (dRETURN x) f = f x\"", "lemma dres_monad2[simp]: \"dbind M dRETURN = M\"", "lemma dres_monad3[simp]: \"dbind (dbind M f) g = dbind M (\\<lambda>x. dbind (f x) g)\"", "lemmas dres_monad_laws = dres_monad1 dres_monad2 dres_monad3", "lemma dbind_mono[refine_mono]:\n  \"\\<lbrakk> M \\<le> M'; \\<And>x. dRETURN x \\<le> M \\<Longrightarrow> f x \\<le> f' x \\<rbrakk> \\<Longrightarrow> dbind M f \\<le> dbind M' f'\"\n  \"\\<lbrakk> flat_ge M M'; \\<And>x. flat_ge (f x) (f' x) \\<rbrakk> \\<Longrightarrow> flat_ge (dbind M f) (dbind M' f')\"", "lemma dbind_mono1[simp, intro!]: \"mono dbind\"", "lemma dbind_mono2[simp, intro!]: \"mono (dbind M)\"", "lemma dr_mono_bind:\n  assumes MA: \"mono A\" and MB: \"\\<And>s. mono (B s)\"\n  shows \"mono (\\<lambda>F s. dbind (A F s) (\\<lambda>s'. B s F s'))\"", "lemma dr_mono_bind': \"mono (\\<lambda>F s. dbind (f s) F)\"", "lemmas dr_mono = mono_if dr_mono_bind dr_mono_bind' mono_const mono_id", "lemma [refine_mono]:\n  \"dbind dSUCCEED f = dSUCCEED\"\n  \"dbind dFAIL f = dFAIL\"", "lemmas [code] = \n  dres_while.WHILEIT_unfold\n  dres_while.WHILEI_unfold\n  dres_while.WHILET_unfold\n  dres_while.WHILE_unfold", "lemma dres_ne_bot_basic[refine_transfer]:\n  \"dFAIL \\<noteq> dSUCCEED\"\n  \"\\<And>x. dRETURN x \\<noteq> dSUCCEED\"\n  \"\\<And>m f. \\<lbrakk> m\\<noteq>dSUCCEED; \\<And>x. f x \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> dbind m f \\<noteq> dSUCCEED\"\n  \"\\<And>\\<Phi>. dASSERT \\<Phi> \\<noteq> dSUCCEED\"\n  \"\\<And>b m1 m2. \\<lbrakk> m1\\<noteq>dSUCCEED; m2\\<noteq>dSUCCEED \\<rbrakk> \\<Longrightarrow> If b m1 m2 \\<noteq> dSUCCEED\"\n  \"\\<And>x f. \\<lbrakk> \\<And>x. f x\\<noteq>dSUCCEED \\<rbrakk> \\<Longrightarrow> Let x f \\<noteq> dSUCCEED\"\n  \"\\<And>g p. \\<lbrakk> \\<And>x1 x2. g x1 x2 \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_prod g p \\<noteq> dSUCCEED\"\n  \"\\<And>fn fs x. \n    \\<lbrakk> fn\\<noteq>dSUCCEED; \\<And>v. fs v \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_option fn fs x \\<noteq> dSUCCEED\"\n  \"\\<And>fn fc x. \n    \\<lbrakk> fn\\<noteq>dSUCCEED; \\<And>x xs. fc x xs \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_list fn fc x \\<noteq> dSUCCEED\"", "lemma dres_ne_bot_RECT[refine_transfer]:\n  assumes A: \"\\<And>f x. \\<lbrakk> \\<And>x. f x \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> B f x \\<noteq> dSUCCEED\"\n  shows \"RECT B x \\<noteq> dSUCCEED\"", "lemma dres_ne_bot_dWHILEIT[refine_transfer]:\n  assumes \"\\<And>x. f x \\<noteq> dSUCCEED\" \n  shows \"dWHILEIT I b f s \\<noteq> dSUCCEED\"", "lemma dres_ne_bot_dWHILET[refine_transfer]:\n  assumes \"\\<And>x. f x \\<noteq> dSUCCEED\" \n  shows \"dWHILET b f s \\<noteq> dSUCCEED\""], "translations": [["", "lemma sup_dres_addsimps[simp]:\n    \"sup x dFAILi = dFAILi\"\n    \"sup x dSUCCEEDi = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup x dFAILi = dFAILi &&& sup x dSUCCEEDi = x", "apply (case_tac [!] x)"], ["proof (prove)\ngoal (6 subgoals):\n 1. x = dSUCCEEDi \\<Longrightarrow> sup x dFAILi = dFAILi\n 2. x = dFAILi \\<Longrightarrow> sup x dFAILi = dFAILi\n 3. \\<And>x3. x = dRETURN x3 \\<Longrightarrow> sup x dFAILi = dFAILi\n 4. x = dSUCCEEDi \\<Longrightarrow> sup x dSUCCEEDi = x\n 5. x = dFAILi \\<Longrightarrow> sup x dSUCCEEDi = x\n 6. \\<And>x3. x = dRETURN x3 \\<Longrightarrow> sup x dSUCCEEDi = x", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun inf_dres where\n    \"inf dFAILi x = x\" |\n    \"inf x dFAILi = x\" |\n    \"inf (dRETURN a) (dRETURN b) = (if a=b then dRETURN b else dSUCCEEDi)\" |\n    \"inf dSUCCEEDi _ = dSUCCEEDi\" | \n    \"inf _ dSUCCEEDi = dSUCCEEDi\""], ["", "lemma inf_dres_addsimps[simp]:\n    \"inf x dSUCCEEDi = dSUCCEEDi\"\n    \"inf dSUCCEEDi x = dSUCCEEDi\"\n    \"inf x dFAILi = x\"\n    \"inf (dRETURN v) x \\<noteq> dFAILi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inf x dSUCCEEDi = dSUCCEEDi &&& inf dSUCCEEDi x = dSUCCEEDi) &&&\n    inf x dFAILi = x &&& inf (dRETURN v) x \\<noteq> dFAILi", "apply (case_tac [!] x)"], ["proof (prove)\ngoal (12 subgoals):\n 1. x = dSUCCEEDi \\<Longrightarrow> inf x dSUCCEEDi = dSUCCEEDi\n 2. x = dFAILi \\<Longrightarrow> inf x dSUCCEEDi = dSUCCEEDi\n 3. \\<And>x3. x = dRETURN x3 \\<Longrightarrow> inf x dSUCCEEDi = dSUCCEEDi\n 4. x = dSUCCEEDi \\<Longrightarrow> inf dSUCCEEDi x = dSUCCEEDi\n 5. x = dFAILi \\<Longrightarrow> inf dSUCCEEDi x = dSUCCEEDi\n 6. \\<And>x3. x = dRETURN x3 \\<Longrightarrow> inf dSUCCEEDi x = dSUCCEEDi\n 7. x = dSUCCEEDi \\<Longrightarrow> inf x dFAILi = x\n 8. x = dFAILi \\<Longrightarrow> inf x dFAILi = x\n 9. \\<And>x3. x = dRETURN x3 \\<Longrightarrow> inf x dFAILi = x\n 10. x = dSUCCEEDi \\<Longrightarrow> inf (dRETURN v) x \\<noteq> dFAILi\nA total of 12 subgoals...", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"Sup_dres S \\<equiv> \n    if S\\<subseteq>{dSUCCEEDi} then dSUCCEEDi \n    else if dFAILi\\<in>S then dFAILi\n    else if \\<exists>a b. a\\<noteq>b \\<and> dRETURN a\\<in>S \\<and> dRETURN b\\<in>S then dFAILi\n    else dRETURN (THE x. dRETURN x \\<in> S)\""], ["", "definition \"Inf_dres S \\<equiv> \n    if S\\<subseteq>{dFAILi} then dFAILi \n    else if dSUCCEEDi\\<in>S then dSUCCEEDi\n    else if \\<exists>a b. a\\<noteq>b \\<and> dRETURN a\\<in>S \\<and> dRETURN b\\<in>S then dSUCCEEDi\n    else dRETURN (THE x. dRETURN x \\<in> S)\""], ["", "fun less_eq_dres where\n    \"less_eq_dres dSUCCEEDi _ \\<longleftrightarrow> True\" |\n    \"less_eq_dres _ dFAILi \\<longleftrightarrow> True\" |\n    \"less_eq_dres (dRETURN (a::'a)) (dRETURN b) \\<longleftrightarrow> a=b\" |\n    \"less_eq_dres _ _ \\<longleftrightarrow> False\""], ["", "definition less_dres where \"less_dres (a::'a dres) b \\<longleftrightarrow> a\\<le>b \\<and> \\<not> b\\<le>a\""], ["", "lemma less_eq_dres_split_conv: \n    \"a\\<le>b \\<longleftrightarrow> (case (a,b) of \n        (dSUCCEEDi,_) \\<Rightarrow> True \n      | (_,dFAILi) \\<Rightarrow> True\n      | (dRETURN (a::'a), dRETURN b) \\<Rightarrow> a=b\n      | _ \\<Rightarrow> False\n    )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<le> b) =\n    (case (a, b) of (dSUCCEEDi, xa) \\<Rightarrow> True\n     | (dFAILi, dFAILi) \\<Rightarrow> True | (dFAILi, _) \\<Rightarrow> False\n     | (dRETURN aa, dSUCCEEDi) \\<Rightarrow> False\n     | (dRETURN aa, dFAILi) \\<Rightarrow> True\n     | (dRETURN aa, dRETURN b) \\<Rightarrow> aa = b)", "by (auto split: dres.split)"], ["", "lemma inf_dres_split_conv: \n    \"inf a b = (case (a,b) of \n      (dFAILi,x) \\<Rightarrow> x\n    | (x,dFAILi) \\<Rightarrow> x\n    | (dRETURN a, dRETURN b) \\<Rightarrow> (if a=b then dRETURN b else dSUCCEEDi)\n    | _ \\<Rightarrow> dSUCCEEDi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf a b =\n    (case (a, b) of (dSUCCEEDi, dSUCCEEDi) \\<Rightarrow> dSUCCEEDi\n     | (dSUCCEEDi, _) \\<Rightarrow> dSUCCEEDi\n     | (dFAILi, xa) \\<Rightarrow> xa\n     | (dRETURN aa, dSUCCEEDi) \\<Rightarrow> dSUCCEEDi\n     | (dRETURN aa, dFAILi) \\<Rightarrow> dRETURN aa\n     | (dRETURN aa, dRETURN b) \\<Rightarrow>\n         if aa = b then dRETURN b else dSUCCEEDi)", "by (auto split: dres.split)"], ["", "lemma sup_dres_split_conv: \n    \"sup a b = (case (a,b) of \n      (dSUCCEEDi,x) \\<Rightarrow> x\n    | (x,dSUCCEEDi) \\<Rightarrow> x\n    | (dRETURN a, dRETURN b) \\<Rightarrow> (if a=b then dRETURN b else dFAILi)\n    | _ \\<Rightarrow> dFAILi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup a b =\n    (case (a, b) of (dSUCCEEDi, xa) \\<Rightarrow> xa\n     | (dFAILi, dSUCCEEDi) \\<Rightarrow> dFAILi\n     | (dFAILi, _) \\<Rightarrow> dFAILi\n     | (dRETURN aa, dSUCCEEDi) \\<Rightarrow> dRETURN aa\n     | (dRETURN aa, dFAILi) \\<Rightarrow> dFAILi\n     | (dRETURN aa, dRETURN b) \\<Rightarrow>\n         if aa = b then dRETURN b else dFAILi)", "by (auto split: dres.split)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a dres, complete_lattice_class)", "apply intro_classes"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. inf x y \\<le> x\n 6. \\<And>x y. inf x y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 8. \\<And>x y. x \\<le> sup x y\n 9. \\<And>y x. y \\<le> sup x y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> sup y z \\<le> x\nA total of 16 subgoals...", "supply less_eq_dres_split_conv[simp] less_dres_def[simp] dres.splits[split]"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. inf x y \\<le> x\n 6. \\<And>x y. inf x y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 8. \\<And>x y. x \\<le> sup x y\n 9. \\<And>y x. y \\<le> sup x y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> sup y z \\<le> x\nA total of 16 subgoals...", "supply inf_dres_split_conv[simp] sup_dres_split_conv[simp] if_splits[split]"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. inf x y \\<le> x\n 6. \\<And>x y. inf x y \\<le> y\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 8. \\<And>x y. x \\<le> sup x y\n 9. \\<And>y x. y \\<le> sup x y\n 10. \\<And>y x z.\n        \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n        \\<Longrightarrow> sup y z \\<le> x\nA total of 16 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x_ < y_) = (x_ \\<le> y_ \\<and> \\<not> y_ \\<le> x_)", "by auto"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. inf x y \\<le> x\n 5. \\<And>x y. inf x y \\<le> y\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 7. \\<And>x y. x \\<le> sup x y\n 8. \\<And>y x. y \\<le> sup x y\n 9. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 10. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\nA total of 15 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<le> x_", "by auto"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. inf x y \\<le> x\n 4. \\<And>x y. inf x y \\<le> y\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 6. \\<And>x y. x \\<le> sup x y\n 7. \\<And>y x. y \\<le> sup x y\n 8. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 9. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 10. \\<And>A z.\n        (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n        z \\<le> Inf A\nA total of 14 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x_ \\<le> y_; y_ \\<le> z_\\<rbrakk> \\<Longrightarrow> x_ \\<le> z_", "by auto"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 2. \\<And>x y. inf x y \\<le> x\n 3. \\<And>x y. inf x y \\<le> y\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 5. \\<And>x y. x \\<le> sup x y\n 6. \\<And>y x. y \\<le> sup x y\n 7. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 8. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 9. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 10. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\nA total of 13 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x_ \\<le> y_; y_ \\<le> x_\\<rbrakk> \\<Longrightarrow> x_ = y_", "by auto"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x y. inf x y \\<le> x\n 2. \\<And>x y. inf x y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 4. \\<And>x y. x \\<le> sup x y\n 5. \\<And>y x. y \\<le> sup x y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 7. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 8. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 9. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 10. \\<And>A z.\n        (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n        Sup A \\<le> z\nA total of 12 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. inf x_ y_ \\<le> x_", "by auto"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x y. inf x y \\<le> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 3. \\<And>x y. x \\<le> sup x y\n 4. \\<And>y x. y \\<le> sup x y\n 5. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 6. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 7. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 8. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 9. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 10. Inf {} = top\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. inf x_ y_ \\<le> y_", "by auto"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> inf y z\n 2. \\<And>x y. x \\<le> sup x y\n 3. \\<And>y x. y \\<le> sup x y\n 4. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 5. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 6. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 7. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 8. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 9. Inf {} = top\n 10. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x_ \\<le> y_; x_ \\<le> z_\\<rbrakk>\n    \\<Longrightarrow> x_ \\<le> inf y_ z_", "by auto"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y. x \\<le> sup x y\n 2. \\<And>y x. y \\<le> sup x y\n 3. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 4. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 5. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 6. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 7. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 8. Inf {} = top\n 9. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<le> sup x_ y_", "by auto"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y x. y \\<le> sup x y\n 2. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 3. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 4. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 5. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 6. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 7. Inf {} = top\n 8. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. y_ \\<le> sup x_ y_", "by auto"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sup y z \\<le> x\n 2. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 3. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 4. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 5. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 6. Inf {} = top\n 7. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y_ \\<le> x_; z_ \\<le> x_\\<rbrakk>\n    \\<Longrightarrow> sup y_ z_ \\<le> x_", "by auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x A. x \\<in> A \\<Longrightarrow> Inf A \\<le> x\n 2. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 3. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 4. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 5. Inf {} = top\n 6. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<in> A_ \\<Longrightarrow> Inf A_ \\<le> x_", "by (auto simp: Inf_dres_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Inf A\n 2. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 3. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 4. Inf {} = top\n 5. Sup {} = bot", "subgoal for A z"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n    z \\<le> Inf A", "apply (clarsimp simp: Inf_dres_def; safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dFAILi of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dFAILi; a \\<noteq> b; dRETURN a \\<in> A; dRETURN b \\<in> A;\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 2. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dFAILi of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dFAILi;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 3. \\<And>x3 a b x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3; a \\<noteq> b; dRETURN a \\<in> A; dRETURN b \\<in> A;\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 4. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x3 \\<noteq> (THE x. dRETURN x \\<in> A);\n        x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                x \\<in> A \\<Longrightarrow>\n                case dFAILi of dSUCCEEDi \\<Rightarrow> True\n                | dFAILi \\<Rightarrow>\n                    case x of dFAILi \\<Rightarrow> True\n                    | _ \\<Rightarrow> False\n                | dRETURN aa \\<Rightarrow>\n                    case x of dSUCCEEDi \\<Rightarrow> False\n                    | dFAILi \\<Rightarrow> True\n                    | dRETURN x \\<Rightarrow> aa = x;\n     z = dFAILi; a_ \\<noteq> b_; dRETURN a_ \\<in> A; dRETURN b_ \\<in> A;\n     dSUCCEEDi \\<notin> A; x_ \\<in> A; x_ \\<notin> {}\\<rbrakk>\n    \\<Longrightarrow> x_ = dFAILi", "by force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dFAILi of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dFAILi;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 2. \\<And>x3 a b x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3; a \\<noteq> b; dRETURN a \\<in> A; dRETURN b \\<in> A;\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 3. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x3 \\<noteq> (THE x. dRETURN x \\<in> A);\n        x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                x \\<in> A \\<Longrightarrow>\n                case dFAILi of dSUCCEEDi \\<Rightarrow> True\n                | dFAILi \\<Rightarrow>\n                    case x of dFAILi \\<Rightarrow> True\n                    | _ \\<Rightarrow> False\n                | dRETURN aa \\<Rightarrow>\n                    case x of dSUCCEEDi \\<Rightarrow> False\n                    | dFAILi \\<Rightarrow> True\n                    | dRETURN x \\<Rightarrow> aa = x;\n     z = dFAILi;\n     \\<forall>a.\n        dRETURN a \\<in> A \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n     dSUCCEEDi \\<notin> A; x_ \\<in> A; x_ \\<notin> {}\\<rbrakk>\n    \\<Longrightarrow> x_ = dFAILi", "by force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x3 a b x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3; a \\<noteq> b; dRETURN a \\<in> A; dRETURN b \\<in> A;\n        dSUCCEEDi \\<notin> A; x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi\n 2. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x3 \\<noteq> (THE x. dRETURN x \\<in> A);\n        x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi", "subgoal premises prems"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ = dFAILi", "using prems(2-)"], ["proof (prove)\nusing this:\n  z = dRETURN x3_\n  a_ \\<noteq> b_\n  dRETURN a_ \\<in> A\n  dRETURN b_ \\<in> A\n  dSUCCEEDi \\<notin> A\n  x_ \\<in> A\n  x_ \\<notin> {}\n\ngoal (1 subgoal):\n 1. x_ = dFAILi", "apply (drule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z = dRETURN x3_; a_ \\<noteq> b_; dRETURN b_ \\<in> A;\n     dSUCCEEDi \\<notin> A; x_ \\<in> A; x_ \\<notin> {};\n     case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN a_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN a_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dFAILi", "apply (drule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z = dRETURN x3_; a_ \\<noteq> b_; dSUCCEEDi \\<notin> A;\n     x_ \\<in> A; x_ \\<notin> {};\n     case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN a_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN a_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True | dRETURN x \\<Rightarrow> aa = x;\n     case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN b_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN b_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dFAILi", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A \\<Longrightarrow>\n                   case dRETURN x3 of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case x of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case x of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n        dSUCCEEDi \\<notin> A; x3 \\<noteq> (THE x. dRETURN x \\<in> A);\n        x \\<in> A; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dFAILi", "subgoal premises prems"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ = dFAILi", "using prems(2-)"], ["proof (prove)\nusing this:\n  z = dRETURN x3_\n  \\<forall>a.\n     dRETURN a \\<in> A \\<longrightarrow>\n     (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A)\n  dSUCCEEDi \\<notin> A\n  x3_ \\<noteq> (THE x. dRETURN x \\<in> A)\n  x_ \\<in> A\n  x_ \\<notin> {}\n\ngoal (1 subgoal):\n 1. x_ = dFAILi", "apply (frule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z = dRETURN x3_;\n     \\<forall>a.\n        dRETURN a \\<in> A \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A);\n     dSUCCEEDi \\<notin> A; x3_ \\<noteq> (THE x. dRETURN x \\<in> A);\n     x_ \\<in> A; x_ \\<notin> {};\n     case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case x_ of dFAILi \\<Rightarrow> True | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case x_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dFAILi", "by (auto; metis the_equality)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> Sup A\n 2. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 3. Inf {} = top\n 4. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<in> A_ \\<Longrightarrow> x_ \\<le> Sup A_", "by (auto simp: Sup_dres_def; metis the_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n       Sup A \\<le> z\n 2. Inf {} = top\n 3. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A_ \\<Longrightarrow> x \\<le> z_) \\<Longrightarrow>\n    Sup A_ \\<le> z_", "apply (clarsimp simp: Sup_dres_def; safe)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dSUCCEEDi of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dSUCCEEDi of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dSUCCEEDi; x \\<in> A_; x \\<notin> {}; a \\<noteq> b;\n        dRETURN a \\<in> A_; dRETURN b \\<in> A_\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 2. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dSUCCEEDi of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dSUCCEEDi of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dSUCCEEDi;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 3. \\<And>x3 x a b.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3; x \\<in> A_; x \\<notin> {}; a \\<noteq> b;\n        dRETURN a \\<in> A_; dRETURN b \\<in> A_\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 4. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<in> A_; x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 5. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3;\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi", "apply force"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dSUCCEEDi of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dSUCCEEDi of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dSUCCEEDi;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 2. \\<And>x3 x a b.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3; x \\<in> A_; x \\<notin> {}; a \\<noteq> b;\n        dRETURN a \\<in> A_; dRETURN b \\<in> A_\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 3. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<in> A_; x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 4. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3;\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x3 x a b.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3; x \\<in> A_; x \\<notin> {}; a \\<noteq> b;\n        dRETURN a \\<in> A_; dRETURN b \\<in> A_\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 2. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<in> A_; x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 3. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3;\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi", "subgoal premises prems"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ = dSUCCEEDi", "using prems(2-)"], ["proof (prove)\nusing this:\n  z_ = dRETURN x3_\n  x_ \\<in> A_\n  x_ \\<notin> {}\n  a_ \\<noteq> b_\n  dRETURN a_ \\<in> A_\n  dRETURN b_ \\<in> A_\n\ngoal (1 subgoal):\n 1. x_ = dSUCCEEDi", "apply (drule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z_ = dRETURN x3_; x_ \\<notin> {}; a_ \\<noteq> b_;\n     dRETURN a_ \\<in> A_; dRETURN b_ \\<in> A_;\n     case x_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dSUCCEEDi", "apply (drule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z_ = dRETURN x3_; x_ \\<notin> {}; a_ \\<noteq> b_;\n     dRETURN b_ \\<in> A_;\n     case x_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True | dRETURN x \\<Rightarrow> aa = x;\n     case dRETURN a_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dSUCCEEDi", "apply (drule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z_ = dRETURN x3_; x_ \\<notin> {}; a_ \\<noteq> b_;\n     case x_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True | dRETURN x \\<Rightarrow> aa = x;\n     case dRETURN a_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True | dRETURN x \\<Rightarrow> aa = x;\n     case dRETURN b_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dSUCCEEDi", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<in> A_; x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi\n 2. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3;\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x3 x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> A_ \\<Longrightarrow>\n                   case x of dSUCCEEDi \\<Rightarrow> True\n                   | dFAILi \\<Rightarrow>\n                       case dRETURN x3 of dFAILi \\<Rightarrow> True\n                       | _ \\<Rightarrow> False\n                   | dRETURN aa \\<Rightarrow>\n                       case dRETURN x3 of dSUCCEEDi \\<Rightarrow> False\n                       | dFAILi \\<Rightarrow> True\n                       | dRETURN x \\<Rightarrow> aa = x;\n        z_ = dRETURN x3;\n        \\<forall>a.\n           dRETURN a \\<in> A_ \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n        dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3;\n        x \\<in> A_; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEEDi", "subgoal premises prems"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ = dSUCCEEDi", "using prems(2-)"], ["proof (prove)\nusing this:\n  z_ = dRETURN x3_\n  \\<forall>a.\n     dRETURN a \\<in> A_ \\<longrightarrow>\n     (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_)\n  dFAILi \\<notin> A_\n  (THE x. dRETURN x \\<in> A_) \\<noteq> x3_\n  x_ \\<in> A_\n  x_ \\<notin> {}\n\ngoal (1 subgoal):\n 1. x_ = dSUCCEEDi", "apply (frule_tac prems(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z_ = dRETURN x3_;\n     \\<forall>a.\n        dRETURN a \\<in> A_ \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> A_);\n     dFAILi \\<notin> A_; (THE x. dRETURN x \\<in> A_) \\<noteq> x3_;\n     x_ \\<in> A_; x_ \\<notin> {};\n     case x_ of dSUCCEEDi \\<Rightarrow> True\n     | dFAILi \\<Rightarrow>\n         case dRETURN x3_ of dFAILi \\<Rightarrow> True\n         | _ \\<Rightarrow> False\n     | dRETURN aa \\<Rightarrow>\n         case dRETURN x3_ of dSUCCEEDi \\<Rightarrow> False\n         | dFAILi \\<Rightarrow> True\n         | dRETURN x \\<Rightarrow> aa = x\\<rbrakk>\n    \\<Longrightarrow> x_ = dSUCCEEDi", "by (auto; metis the_equality)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. Inf {} = top\n 2. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf {} = top", "by (auto simp: Inf_dres_def top_dres_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup {} = bot", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup {} = bot", "by (auto simp: Sup_dres_def bot_dres_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "abbreviation \"dSUCCEED \\<equiv> (bot::'a dres)\""], ["", "abbreviation \"dFAIL \\<equiv> (top::'a dres)\""], ["", "lemma dres_cases[cases type, case_names dSUCCEED dRETURN dFAIL]:\n  obtains \"x=dSUCCEED\" | r where \"x=dRETURN r\" | \"x=dFAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = dSUCCEED \\<Longrightarrow> thesis;\n     \\<And>r. x = dRETURN r \\<Longrightarrow> thesis;\n     x = dFAIL \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding bot_dres_def top_dres_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = dSUCCEEDi \\<Longrightarrow> thesis;\n     \\<And>r. x = dRETURN r \\<Longrightarrow> thesis;\n     x = dFAILi \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases x) auto"], ["", "lemmas [simp] = dres.case(1,2)[folded top_dres_def bot_dres_def]"], ["", "lemma dres_order_simps[simp]:\n  \"x\\<le>dSUCCEED \\<longleftrightarrow> x=dSUCCEED\" \n  \"dFAIL\\<le>x \\<longleftrightarrow> x=dFAIL\"\n  \"dRETURN r \\<noteq> dFAIL\"\n  \"dRETURN r \\<noteq> dSUCCEED\"\n  \"dFAIL \\<noteq> dRETURN r\"\n  \"dSUCCEED \\<noteq> dRETURN r\"\n  \"dFAIL\\<noteq>dSUCCEED\"\n  \"dSUCCEED\\<noteq>dFAIL\"\n  \"x=y \\<Longrightarrow> inf (dRETURN x) (dRETURN y) = dRETURN y\"\n  \"x\\<noteq>y \\<Longrightarrow> inf (dRETURN x) (dRETURN y) = dSUCCEED\"\n  \"x=y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dRETURN y\"\n  \"x\\<noteq>y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dFAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((x \\<le> dSUCCEED) = (x = dSUCCEED) &&&\n      (dFAIL \\<le> x) = (x = dFAIL) &&& dRETURN r \\<noteq> dFAIL) &&&\n     dRETURN r \\<noteq> dSUCCEED &&&\n     dFAIL \\<noteq> dRETURN r &&& dSUCCEED \\<noteq> dRETURN r) &&&\n    (dFAIL \\<noteq> dSUCCEED &&&\n     dSUCCEED \\<noteq> dFAIL &&&\n     (x = y \\<Longrightarrow> inf (dRETURN x) (dRETURN y) = dRETURN y)) &&&\n    (x \\<noteq> y \\<Longrightarrow>\n     inf (dRETURN x) (dRETURN y) = dSUCCEED) &&&\n    (x = y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dRETURN y) &&&\n    (x \\<noteq> y \\<Longrightarrow> sup (dRETURN x) (dRETURN y) = dFAIL)", "apply (simp_all add: bot_unique top_unique)"], ["proof (prove)\ngoal (8 subgoals):\n 1. dRETURN r \\<noteq> dFAIL\n 2. dRETURN r \\<noteq> dSUCCEED\n 3. dFAIL \\<noteq> dRETURN r\n 4. dSUCCEED \\<noteq> dRETURN r\n 5. dFAIL \\<noteq> dSUCCEED\n 6. dSUCCEED \\<noteq> dFAIL\n 7. x \\<noteq> y \\<Longrightarrow> dSUCCEEDi = dSUCCEED\n 8. x \\<noteq> y \\<Longrightarrow> dFAILi = dFAIL", "apply (simp_all add: bot_dres_def top_dres_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dres_Sup_cases:\n  obtains \"S\\<subseteq>{dSUCCEED}\" and \"Sup S = dSUCCEED\"\n  | \"dFAIL\\<in>S\" and \"Sup S = dFAIL\"\n  | a b where \"a\\<noteq>b\" \"dRETURN a\\<in>S\" \"dRETURN b\\<in>S\" \"dFAIL\\<notin>S\" \"Sup S = dFAIL\"\n  | a where \"S \\<subseteq> {dSUCCEED, dRETURN a}\" \"dRETURN a\\<in>S\" \"Sup S = dRETURN a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>S \\<subseteq> {dSUCCEED}; Sup S = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> S; Sup S = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S;\n         dFAIL \\<notin> S; Sup S = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>S \\<subseteq> {dSUCCEED, dRETURN a}; dRETURN a \\<in> S;\n         Sup S = dRETURN a\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>S \\<subseteq> {dSUCCEED}; Sup S = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> S; Sup S = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S;\n         dFAIL \\<notin> S; Sup S = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>S \\<subseteq> {dSUCCEED, dRETURN a}; dRETURN a \\<in> S;\n         Sup S = dRETURN a\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "apply (cases \"S\\<subseteq>{dSUCCEED}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. S \\<subseteq> {dSUCCEED} \\<Longrightarrow> thesis\n 2. \\<not> S \\<subseteq> {dSUCCEED} \\<Longrightarrow> thesis", "apply (rule that(1), assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. S \\<subseteq> {dSUCCEED} \\<Longrightarrow> Sup S = dSUCCEED\n 2. \\<not> S \\<subseteq> {dSUCCEED} \\<Longrightarrow> thesis", "apply (simp add: Sup_dres_def bot_dres_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> {dSUCCEED} \\<Longrightarrow> thesis", "apply (cases \"dFAIL\\<in>S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule that(2), assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<in> S\\<rbrakk>\n    \\<Longrightarrow> Sup S = dFAIL\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (simp add: Sup_dres_def bot_dres_def top_dres_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"\\<exists>a b. a\\<noteq>b \\<and> dRETURN a\\<in>S \\<and> dRETURN b\\<in>S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<exists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule that(3), assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Sup S = dFAIL\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: Sup_dres_def bot_dres_def top_dres_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"\\<exists>a. dRETURN a \\<in> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<exists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule_tac a=a in that(4)) []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> S \\<subseteq> {dSUCCEED, dRETURN a}\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 3. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Sup S = dRETURN a\n 4. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x xa.\n       \\<lbrakk>dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S; x \\<in> S; x \\<noteq> dSUCCEED; xa \\<in> S;\n        xa \\<noteq> dSUCCEED\\<rbrakk>\n       \\<Longrightarrow> xa = dRETURN a\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 3. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Sup S = dRETURN a\n 4. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (case_tac xa, auto) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Sup S = dRETURN a\n 3. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Sup S = dRETURN a\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: Sup_dres_def bot_dres_def top_dres_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dSUCCEED}; dFAIL \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dFAIL \\<notin> S; \\<forall>a. dRETURN a \\<notin> S;\n        \\<not> thesis; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x = dSUCCEED", "apply (case_tac x, auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dres_Inf_cases:\n  obtains \"S\\<subseteq>{dFAIL}\" and \"Inf S = dFAIL\"\n  | \"dSUCCEED\\<in>S\" and \"Inf S = dSUCCEED\"\n  | a b where \"a\\<noteq>b\" \"dRETURN a\\<in>S\" \"dRETURN b\\<in>S\" \"dSUCCEED\\<notin>S\" \"Inf S = dSUCCEED\"\n  | a where \"S \\<subseteq> {dFAIL, dRETURN a}\" \"dRETURN a\\<in>S\" \"Inf S = dRETURN a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>S \\<subseteq> {dFAIL}; Inf S = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> S; Inf S = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S;\n         dSUCCEED \\<notin> S; Inf S = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>S \\<subseteq> {dFAIL, dRETURN a}; dRETURN a \\<in> S;\n         Inf S = dRETURN a\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>S \\<subseteq> {dFAIL}; Inf S = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> S; Inf S = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S;\n         dSUCCEED \\<notin> S; Inf S = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>S \\<subseteq> {dFAIL, dRETURN a}; dRETURN a \\<in> S;\n         Inf S = dRETURN a\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "apply (cases \"S\\<subseteq>{dFAIL}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. S \\<subseteq> {dFAIL} \\<Longrightarrow> thesis\n 2. \\<not> S \\<subseteq> {dFAIL} \\<Longrightarrow> thesis", "apply (rule that(1), assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. S \\<subseteq> {dFAIL} \\<Longrightarrow> Inf S = dFAIL\n 2. \\<not> S \\<subseteq> {dFAIL} \\<Longrightarrow> thesis", "apply (simp add: Inf_dres_def top_dres_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> {dFAIL} \\<Longrightarrow> thesis", "apply (cases \"dSUCCEED\\<in>S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule that(2), assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<in> S\\<rbrakk>\n    \\<Longrightarrow> Inf S = dSUCCEED\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (simp add: Inf_dres_def bot_dres_def top_dres_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"\\<exists>a b. a\\<noteq>b \\<and> dRETURN a\\<in>S \\<and> dRETURN b\\<in>S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<exists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule that(3), assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        a \\<noteq> b; dRETURN a \\<in> S; dRETURN b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Inf S = dSUCCEED\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: Inf_dres_def bot_dres_def top_dres_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<nexists>a b.\n        a \\<noteq> b \\<and>\n        dRETURN a \\<in> S \\<and> dRETURN b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (cases \"\\<exists>a. dRETURN a \\<in> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<exists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule_tac a=a in that(4)) []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> S \\<subseteq> {dFAIL, dRETURN a}\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 3. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Inf S = dRETURN a\n 4. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x xa.\n       \\<lbrakk>dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S; x \\<in> S; x \\<noteq> dFAIL; xa \\<in> S;\n        xa \\<noteq> dFAIL\\<rbrakk>\n       \\<Longrightarrow> xa = dRETURN a\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 3. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Inf S = dRETURN a\n 4. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (case_tac xa, auto) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> dRETURN a \\<in> S\n 2. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Inf S = dRETURN a\n 3. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n        \\<forall>a.\n           dRETURN a \\<in> S \\<longrightarrow>\n           (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n        dRETURN a \\<in> S\\<rbrakk>\n       \\<Longrightarrow> Inf S = dRETURN a\n 2. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: Inf_dres_def bot_dres_def top_dres_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> S \\<subseteq> {dFAIL}; dSUCCEED \\<notin> S;\n     \\<forall>a.\n        dRETURN a \\<in> S \\<longrightarrow>\n        (\\<forall>b. a = b \\<or> dRETURN b \\<notin> S);\n     \\<nexists>a. dRETURN a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>dSUCCEED \\<notin> S; \\<forall>a. dRETURN a \\<notin> S;\n        \\<not> thesis; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x = dFAIL", "apply (case_tac x, auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dres_chain_eq_res:\n  \"is_chain M \\<Longrightarrow> \n    dRETURN r \\<in> M \\<Longrightarrow> dRETURN s \\<in> M \\<Longrightarrow> r=s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_chain M; dRETURN r \\<in> M; dRETURN s \\<in> M\\<rbrakk>\n    \\<Longrightarrow> r = s", "by (metis chainD less_eq_dres.simps(4))"], ["", "lemma dres_Sup_chain_cases:\n  assumes CHAIN: \"is_chain M\"\n  obtains \"M \\<subseteq> {dSUCCEED}\" \"Sup M = dSUCCEED\"\n  | r where \"M \\<subseteq> {dSUCCEED,dRETURN r}\" \"dRETURN r\\<in>M\" \"Sup M = dRETURN r\"\n  | \"dFAIL\\<in>M\" \"Sup M = dFAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n         Sup M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule dres_Sup_cases[of M])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n         Sup M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n         Sup M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n    \\<Longrightarrow> thesis\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n            Sup M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        a \\<noteq> b; dRETURN a \\<in> M; dRETURN b \\<in> M;\n        dFAIL \\<notin> M; Sup M = dFAIL\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>a.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n            Sup M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        M \\<subseteq> {dSUCCEED, dRETURN a}; dRETURN a \\<in> M;\n        Sup M = dRETURN a\\<rbrakk>\n       \\<Longrightarrow> thesis", "using dres_chain_eq_res[OF CHAIN]"], ["proof (prove)\nusing this:\n  \\<lbrakk>dRETURN ?r \\<in> M; dRETURN ?s \\<in> M\\<rbrakk>\n  \\<Longrightarrow> ?r = ?s\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n         Sup M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n         Sup M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n    \\<Longrightarrow> thesis\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n            Sup M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        a \\<noteq> b; dRETURN a \\<in> M; dRETURN b \\<in> M;\n        dFAIL \\<notin> M; Sup M = dFAIL\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>a.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dSUCCEED}; Sup M = dSUCCEED\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dSUCCEED, dRETURN r}; dRETURN r \\<in> M;\n            Sup M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dFAIL \\<in> M; Sup M = dFAIL\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        M \\<subseteq> {dSUCCEED, dRETURN a}; dRETURN a \\<in> M;\n        Sup M = dRETURN a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["", "lemma dres_Inf_chain_cases:\n  assumes CHAIN: \"is_chain M\"\n  obtains \"M \\<subseteq> {dFAIL}\" \"Inf M = dFAIL\"\n  | r where \"M \\<subseteq> {dFAIL,dRETURN r}\" \"dRETURN r\\<in>M\" \"Inf M = dRETURN r\"\n  | \"dSUCCEED\\<in>M\" \"Inf M = dSUCCEED\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n         Inf M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rule dres_Inf_cases[of M])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n         Inf M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n         Inf M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n    \\<Longrightarrow> thesis\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n            Inf M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        a \\<noteq> b; dRETURN a \\<in> M; dRETURN b \\<in> M;\n        dSUCCEED \\<notin> M; Inf M = dSUCCEED\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>a.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n            Inf M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        M \\<subseteq> {dFAIL, dRETURN a}; dRETURN a \\<in> M;\n        Inf M = dRETURN a\\<rbrakk>\n       \\<Longrightarrow> thesis", "using dres_chain_eq_res[OF CHAIN]"], ["proof (prove)\nusing this:\n  \\<lbrakk>dRETURN ?r \\<in> M; dRETURN ?s \\<in> M\\<rbrakk>\n  \\<Longrightarrow> ?r = ?s\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n         Inf M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>r.\n        \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n         Inf M = dRETURN r\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n    \\<Longrightarrow> thesis\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n            Inf M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        a \\<noteq> b; dRETURN a \\<in> M; dRETURN b \\<in> M;\n        dSUCCEED \\<notin> M; Inf M = dSUCCEED\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>a.\n       \\<lbrakk>\\<lbrakk>M \\<subseteq> {dFAIL}; Inf M = dFAIL\\<rbrakk>\n                \\<Longrightarrow> thesis;\n        \\<And>r.\n           \\<lbrakk>M \\<subseteq> {dFAIL, dRETURN r}; dRETURN r \\<in> M;\n            Inf M = dRETURN r\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<lbrakk>dSUCCEED \\<in> M; Inf M = dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        M \\<subseteq> {dFAIL, dRETURN a}; dRETURN a \\<in> M;\n        Inf M = dRETURN a\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["", "lemma dres_internal_simps[simp]:\n  \"dSUCCEEDi = dSUCCEED\"\n  \"dFAILi = dFAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dSUCCEEDi = dSUCCEED &&& dFAILi = dFAIL", "unfolding top_dres_def bot_dres_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dSUCCEEDi = dSUCCEEDi &&& dFAILi = dFAILi", "by auto"], ["", "subsubsection \\<open>Monad Operations\\<close>"], ["", "function dbind where \n  \"dbind dFAIL _ = dFAIL\"\n| \"dbind dSUCCEED _ = dSUCCEED\"\n| \"dbind (dRETURN x) f = f x\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>uu_. x = (dFAIL, uu_) \\<Longrightarrow> P;\n        \\<And>uv_. x = (dSUCCEED, uv_) \\<Longrightarrow> P;\n        \\<And>xa f. x = (dRETURN xa, f) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>uu_ uua_.\n       (dFAIL, uu_) = (dFAIL, uua_) \\<Longrightarrow> dFAIL = dFAIL\n 3. \\<And>uu_ uv_.\n       (dFAIL, uu_) = (dSUCCEED, uv_) \\<Longrightarrow> dFAIL = dSUCCEED\n 4. \\<And>uu_ x f.\n       (dFAIL, uu_) = (dRETURN x, f) \\<Longrightarrow> dFAIL = f x\n 5. \\<And>uv_ uva_.\n       (dSUCCEED, uv_) = (dSUCCEED, uva_) \\<Longrightarrow>\n       dSUCCEED = dSUCCEED\n 6. \\<And>uv_ x f.\n       (dSUCCEED, uv_) = (dRETURN x, f) \\<Longrightarrow> dSUCCEED = f x\n 7. \\<And>x f xa fa.\n       (dRETURN x, f) = (dRETURN xa, fa) \\<Longrightarrow> f x = fa xa", "unfolding bot_dres_def top_dres_def"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>uu_. x = (dFAILi, uu_) \\<Longrightarrow> P;\n        \\<And>uv_. x = (dSUCCEEDi, uv_) \\<Longrightarrow> P;\n        \\<And>xa f. x = (dRETURN xa, f) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>uu_ uua_.\n       (dFAILi, uu_) = (dFAILi, uua_) \\<Longrightarrow> dFAILi = dFAILi\n 3. \\<And>uu_ uv_.\n       (dFAILi, uu_) = (dSUCCEEDi, uv_) \\<Longrightarrow> dFAILi = dSUCCEEDi\n 4. \\<And>uu_ x f.\n       (dFAILi, uu_) = (dRETURN x, f) \\<Longrightarrow> dFAILi = f x\n 5. \\<And>uv_ uva_.\n       (dSUCCEEDi, uv_) = (dSUCCEEDi, uva_) \\<Longrightarrow>\n       dSUCCEEDi = dSUCCEEDi\n 6. \\<And>uv_ x f.\n       (dSUCCEEDi, uv_) = (dRETURN x, f) \\<Longrightarrow> dSUCCEEDi = f x\n 7. \\<And>x f xa fa.\n       (dRETURN x, f) = (dRETURN xa, fa) \\<Longrightarrow> f x = fa xa", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All dbind_dom", "by lexicographic_order"], ["", "adhoc_overloading\n  Monad_Syntax.bind dbind"], ["", "lemma [code]:\n  \"dbind (dRETURN x) f = f x\"\n  \"dbind (dSUCCEEDi) f = dSUCCEEDi\"\n  \"dbind (dFAILi) f = dFAILi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dRETURN x \\<bind> f = f x &&&\n    dSUCCEEDi \\<bind> f = dSUCCEEDi &&& dFAILi \\<bind> f = dFAILi", "by simp_all"], ["", "lemma dres_monad1[simp]: \"dbind (dRETURN x) f = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dRETURN x \\<bind> f = f x", "by (simp)"], ["", "lemma dres_monad2[simp]: \"dbind M dRETURN = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<bind> dRETURN = M", "apply (cases M)"], ["proof (prove)\ngoal (3 subgoals):\n 1. M = dSUCCEED \\<Longrightarrow> M \\<bind> dRETURN = M\n 2. \\<And>r. M = dRETURN r \\<Longrightarrow> M \\<bind> dRETURN = M\n 3. M = dFAIL \\<Longrightarrow> M \\<bind> dRETURN = M", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dres_monad3[simp]: \"dbind (dbind M f) g = dbind M (\\<lambda>x. dbind (f x) g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<bind> f \\<bind> g = M \\<bind> (\\<lambda>x. f x \\<bind> g)", "apply (cases M)"], ["proof (prove)\ngoal (3 subgoals):\n 1. M = dSUCCEED \\<Longrightarrow>\n    M \\<bind> f \\<bind> g = M \\<bind> (\\<lambda>x. f x \\<bind> g)\n 2. \\<And>r.\n       M = dRETURN r \\<Longrightarrow>\n       M \\<bind> f \\<bind> g = M \\<bind> (\\<lambda>x. f x \\<bind> g)\n 3. M = dFAIL \\<Longrightarrow>\n    M \\<bind> f \\<bind> g = M \\<bind> (\\<lambda>x. f x \\<bind> g)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas dres_monad_laws = dres_monad1 dres_monad2 dres_monad3"], ["", "lemma dbind_mono[refine_mono]:\n  \"\\<lbrakk> M \\<le> M'; \\<And>x. dRETURN x \\<le> M \\<Longrightarrow> f x \\<le> f' x \\<rbrakk> \\<Longrightarrow> dbind M f \\<le> dbind M' f'\"\n  \"\\<lbrakk> flat_ge M M'; \\<And>x. flat_ge (f x) (f' x) \\<rbrakk> \\<Longrightarrow> flat_ge (dbind M f) (dbind M' f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>M \\<le> M';\n      \\<And>x. dRETURN x \\<le> M \\<Longrightarrow> f x \\<le> f' x\\<rbrakk>\n     \\<Longrightarrow> M \\<bind> f \\<le> M' \\<bind> f') &&&\n    (\\<lbrakk>flat_ge M M'; \\<And>x. flat_ge (f x) (f' x)\\<rbrakk>\n     \\<Longrightarrow> flat_ge (M \\<bind> f) (M' \\<bind> f'))", "apply (cases M, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>dRETURN r \\<le> M'; f r \\<le> f' r; M = dRETURN r\\<rbrakk>\n       \\<Longrightarrow> f r \\<le> M' \\<bind> f'\n 2. \\<lbrakk>flat_ge M M'; \\<And>x. flat_ge (f x) (f' x)\\<rbrakk>\n    \\<Longrightarrow> flat_ge (M \\<bind> f) (M' \\<bind> f')", "apply (cases M', simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>flat_ge M M'; \\<And>x. flat_ge (f x) (f' x)\\<rbrakk>\n    \\<Longrightarrow> flat_ge (M \\<bind> f) (M' \\<bind> f')", "apply (cases M, simp_all add: flat_ord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>dRETURN r = M'; \\<And>x. f x = dFAIL \\<or> f x = f' x;\n        M = M'\\<rbrakk>\n       \\<Longrightarrow> M' \\<bind> f = dFAIL \\<or>\n                         M' \\<bind> f = M' \\<bind> f'", "apply (cases M', simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dbind_mono1[simp, intro!]: \"mono dbind\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<bind>)", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> (\\<bind>) x \\<le> (\\<bind>) y", "apply (rule le_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       x \\<le> y \\<Longrightarrow> x \\<bind> xa \\<le> y \\<bind> xa", "apply (rule dbind_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa. x \\<le> y \\<Longrightarrow> x \\<le> y\n 2. \\<And>x y xa xb.\n       \\<lbrakk>x \\<le> y; dRETURN xb \\<le> x\\<rbrakk>\n       \\<Longrightarrow> xa xb \\<le> xa xb", "by auto"], ["", "lemma dbind_mono2[simp, intro!]: \"mono (dbind M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ((\\<bind>) M)", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> M \\<bind> x \\<le> M \\<bind> y", "apply (rule dbind_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. x \\<le> y \\<Longrightarrow> M \\<le> M\n 2. \\<And>x y xa.\n       \\<lbrakk>x \\<le> y; dRETURN xa \\<le> M\\<rbrakk>\n       \\<Longrightarrow> x xa \\<le> y xa", "by (auto dest: le_funD)"], ["", "lemma dr_mono_bind:\n  assumes MA: \"mono A\" and MB: \"\\<And>s. mono (B s)\"\n  shows \"mono (\\<lambda>F s. dbind (A F s) (\\<lambda>s'. B s F s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>F s. A F s \\<bind> B s F)", "apply (rule monoI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow>\n       (\\<lambda>s. A x s \\<bind> B s x)\n       \\<le> (\\<lambda>s. A y s \\<bind> B s y)", "apply (rule le_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       x \\<le> y \\<Longrightarrow>\n       A x xa \\<bind> B xa x \\<le> A y xa \\<bind> B xa y", "apply (rule dbind_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa. x \\<le> y \\<Longrightarrow> A x xa \\<le> A y xa\n 2. \\<And>x y xa xb.\n       \\<lbrakk>x \\<le> y; dRETURN xb \\<le> A x xa\\<rbrakk>\n       \\<Longrightarrow> B xa x xb \\<le> B xa y xb", "apply (auto dest: monoD[OF MA, THEN le_funD]) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa xb.\n       \\<lbrakk>x \\<le> y; dRETURN xb \\<le> A x xa\\<rbrakk>\n       \\<Longrightarrow> B xa x xb \\<le> B xa y xb", "apply (auto dest: monoD[OF MB, THEN le_funD]) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dr_mono_bind': \"mono (\\<lambda>F s. dbind (f s) F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>F s. f s \\<bind> F)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow>\n       (\\<lambda>s. f s \\<bind> x) \\<le> (\\<lambda>s. f s \\<bind> y)", "apply (rule le_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       x \\<le> y \\<Longrightarrow> f xa \\<bind> x \\<le> f xa \\<bind> y", "apply (rule dbind_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa. x \\<le> y \\<Longrightarrow> f xa \\<le> f xa\n 2. \\<And>x y xa xb.\n       \\<lbrakk>x \\<le> y; dRETURN xb \\<le> f xa\\<rbrakk>\n       \\<Longrightarrow> x xb \\<le> y xb", "apply (auto dest: le_funD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* TODO: Replace by monotonicity prover! *)"], ["", "lemmas dr_mono = mono_if dr_mono_bind dr_mono_bind' mono_const mono_id"], ["", "lemma [refine_mono]:\n  \"dbind dSUCCEED f = dSUCCEED\"\n  \"dbind dFAIL f = dFAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dSUCCEED \\<bind> f = dSUCCEED &&& dFAIL \\<bind> f = dFAIL", "by (simp_all)"], ["", "definition \"dASSERT \\<equiv> iASSERT dRETURN\""], ["", "definition \"dASSUME \\<equiv> iASSUME dRETURN\""], ["", "interpretation dres_assert: generic_Assert dbind dRETURN dASSERT dASSUME"], ["proof (prove)\ngoal (1 subgoal):\n 1. generic_Assert (\\<bind>) dRETURN dASSERT dASSUME", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f. dSUCCEED \\<bind> f = dSUCCEED\n 2. \\<And>f. dFAIL \\<bind> f = dFAIL\n 3. \\<And>u f. dRETURN u \\<bind> f = f u\n 4. dASSERT \\<equiv> iASSERT dRETURN\n 5. dASSUME \\<equiv> iASSUME dRETURN", "by (auto simp: dASSERT_def dASSUME_def)"], ["", "definition \"dWHILEIT \\<equiv> iWHILEIT dbind dRETURN\""], ["", "definition \"dWHILEI \\<equiv> iWHILEI dbind dRETURN\""], ["", "definition \"dWHILET \\<equiv> iWHILET dbind dRETURN\""], ["", "definition \"dWHILE \\<equiv> iWHILE dbind dRETURN\""], ["", "interpretation dres_while: generic_WHILE dbind dRETURN\n  dWHILEIT dWHILEI dWHILET dWHILE"], ["proof (prove)\ngoal (1 subgoal):\n 1. generic_WHILE (\\<bind>) dRETURN dWHILEIT dWHILEI dWHILET dWHILE", "apply unfold_locales"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x f. dRETURN x \\<bind> f = f x\n 2. \\<And>M. M \\<bind> dRETURN = M\n 3. \\<And>M f g.\n       M \\<bind> f \\<bind> g = M \\<bind> (\\<lambda>x. f x \\<bind> g)\n 4. \\<And>m m' f f'.\n       \\<lbrakk>flat_ge m m'; \\<And>x. flat_ge (f x) (f' x)\\<rbrakk>\n       \\<Longrightarrow> flat_ge (m \\<bind> f) (m' \\<bind> f')\n 5. \\<And>m m' f f'.\n       \\<lbrakk>m \\<le> m'; \\<And>x. f x \\<le> f' x\\<rbrakk>\n       \\<Longrightarrow> m \\<bind> f \\<le> m' \\<bind> f'\n 6. dWHILEIT \\<equiv> iWHILEIT (\\<bind>) dRETURN\n 7. dWHILEI \\<equiv> iWHILEI (\\<bind>) dRETURN\n 8. dWHILET \\<equiv> iWHILET (\\<bind>) dRETURN\n 9. dWHILE \\<equiv> iWHILE (\\<bind>) dRETURN", "apply (auto simp: dWHILEIT_def dWHILEI_def dWHILET_def dWHILE_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m m' f f'.\n       \\<lbrakk>flat_ge m m'; \\<And>x. flat_ge (f x) (f' x)\\<rbrakk>\n       \\<Longrightarrow> flat_ge (m \\<bind> f) (m' \\<bind> f')\n 2. \\<And>m m' f f'.\n       \\<lbrakk>m \\<le> m'; \\<And>x. f x \\<le> f' x\\<rbrakk>\n       \\<Longrightarrow> m \\<bind> f \\<le> m' \\<bind> f'", "apply refine_mono+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas [code] = \n  dres_while.WHILEIT_unfold\n  dres_while.WHILEI_unfold\n  dres_while.WHILET_unfold\n  dres_while.WHILE_unfold"], ["", "text \\<open>\n  Syntactic criteria to prove \\<open>s \\<noteq> dSUCCEED\\<close>\n\\<close>"], ["", "lemma dres_ne_bot_basic[refine_transfer]:\n  \"dFAIL \\<noteq> dSUCCEED\"\n  \"\\<And>x. dRETURN x \\<noteq> dSUCCEED\"\n  \"\\<And>m f. \\<lbrakk> m\\<noteq>dSUCCEED; \\<And>x. f x \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> dbind m f \\<noteq> dSUCCEED\"\n  \"\\<And>\\<Phi>. dASSERT \\<Phi> \\<noteq> dSUCCEED\"\n  \"\\<And>b m1 m2. \\<lbrakk> m1\\<noteq>dSUCCEED; m2\\<noteq>dSUCCEED \\<rbrakk> \\<Longrightarrow> If b m1 m2 \\<noteq> dSUCCEED\"\n  \"\\<And>x f. \\<lbrakk> \\<And>x. f x\\<noteq>dSUCCEED \\<rbrakk> \\<Longrightarrow> Let x f \\<noteq> dSUCCEED\"\n  \"\\<And>g p. \\<lbrakk> \\<And>x1 x2. g x1 x2 \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_prod g p \\<noteq> dSUCCEED\"\n  \"\\<And>fn fs x. \n    \\<lbrakk> fn\\<noteq>dSUCCEED; \\<And>v. fs v \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_option fn fs x \\<noteq> dSUCCEED\"\n  \"\\<And>fn fc x. \n    \\<lbrakk> fn\\<noteq>dSUCCEED; \\<And>x xs. fc x xs \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> case_list fn fc x \\<noteq> dSUCCEED\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((dFAIL \\<noteq> dSUCCEED &&&\n      (\\<And>x. dRETURN x \\<noteq> dSUCCEED)) &&&\n     (\\<And>m f.\n         \\<lbrakk>m \\<noteq> dSUCCEED;\n          \\<And>x. f x \\<noteq> dSUCCEED\\<rbrakk>\n         \\<Longrightarrow> m \\<bind> f \\<noteq> dSUCCEED) &&&\n     (\\<And>\\<Phi>. dASSERT \\<Phi> \\<noteq> dSUCCEED)) &&&\n    ((\\<And>b m1 m2.\n         \\<lbrakk>m1 \\<noteq> dSUCCEED; m2 \\<noteq> dSUCCEED\\<rbrakk>\n         \\<Longrightarrow> (if b then m1 else m2) \\<noteq> dSUCCEED) &&&\n     (\\<And>x f.\n         (\\<And>x. f x \\<noteq> dSUCCEED) \\<Longrightarrow>\n         Let x f \\<noteq> dSUCCEED)) &&&\n    (\\<And>g p.\n        (\\<And>x1 x2. g x1 x2 \\<noteq> dSUCCEED) \\<Longrightarrow>\n        (case p of (x, xa) \\<Rightarrow> g x xa) \\<noteq> dSUCCEED) &&&\n    (\\<And>fn fs x.\n        \\<lbrakk>fn \\<noteq> dSUCCEED;\n         \\<And>v. fs v \\<noteq> dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> (case x of None \\<Rightarrow> fn\n                           | Some x \\<Rightarrow> fs x) \\<noteq>\n                          dSUCCEED) &&&\n    (\\<And>fn fc x.\n        \\<lbrakk>fn \\<noteq> dSUCCEED;\n         \\<And>x xs. fc x xs \\<noteq> dSUCCEED\\<rbrakk>\n        \\<Longrightarrow> (case x of [] \\<Rightarrow> fn\n                           | x # xa \\<Rightarrow> fc x xa) \\<noteq>\n                          dSUCCEED)", "apply (auto split: prod.split option.split list.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m f.\n       \\<lbrakk>m \\<noteq> dSUCCEED; \\<And>x. f x \\<noteq> dSUCCEED;\n        m \\<bind> f = dSUCCEED\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<Phi>. dASSERT \\<Phi> = dSUCCEED \\<Longrightarrow> False", "apply (case_tac m, auto) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<Phi>. dASSERT \\<Phi> = dSUCCEED \\<Longrightarrow> False", "apply (case_tac \\<Phi>, auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dres_ne_bot_RECT[refine_transfer]:\n  assumes A: \"\\<And>f x. \\<lbrakk> \\<And>x. f x \\<noteq> dSUCCEED \\<rbrakk> \\<Longrightarrow> B f x \\<noteq> dSUCCEED\"\n  shows \"RECT B x \\<noteq> dSUCCEED\""], ["proof (prove)\ngoal (1 subgoal):\n 1. REC\\<^sub>T B x \\<noteq> dSUCCEED", "unfolding RECT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if trimono B then flatf_gfp B x else dFAIL) \\<noteq> dSUCCEED", "apply (split if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (trimono B \\<longrightarrow> flatf_gfp B x \\<noteq> dSUCCEED) \\<and>\n    (\\<not> trimono B \\<longrightarrow> dFAIL \\<noteq> dSUCCEED)", "apply (intro impI conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. trimono B \\<Longrightarrow> flatf_gfp B x \\<noteq> dSUCCEED\n 2. \\<not> trimono B \\<Longrightarrow> dFAIL \\<noteq> dSUCCEED", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. trimono B \\<Longrightarrow> flatf_gfp B x \\<noteq> dSUCCEED", "apply (rule flatf_fp_induct_pointwise[where pre=\"\\<lambda>_ _. True\" and B=B and b=top and post=\"\\<lambda>_ _ m. m\\<noteq>dSUCCEED\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>trimono B; True\\<rbrakk>\n       \\<Longrightarrow> dFAIL \\<noteq> dSUCCEED\n 2. trimono B \\<Longrightarrow> flatf_mono dFAIL B\n 3. trimono B \\<Longrightarrow> True\n 4. \\<And>f a x.\n       \\<lbrakk>trimono B;\n        \\<And>a' x'. True \\<Longrightarrow> f x' \\<noteq> dSUCCEED; True;\n        flatf_ord dFAIL f (flatf_gfp B)\\<rbrakk>\n       \\<Longrightarrow> B f x \\<noteq> dSUCCEED", "apply (simp_all add: trimonoD A)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dres_ne_bot_dWHILEIT[refine_transfer]:\n  assumes \"\\<And>x. f x \\<noteq> dSUCCEED\" \n  shows \"dWHILEIT I b f s \\<noteq> dSUCCEED\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dWHILEIT I b f s \\<noteq> dSUCCEED", "using assms"], ["proof (prove)\nusing this:\n  f ?x \\<noteq> dSUCCEED\n\ngoal (1 subgoal):\n 1. dWHILEIT I b f s \\<noteq> dSUCCEED", "unfolding dWHILEIT_def iWHILEIT_def WHILEI_body_def"], ["proof (prove)\nusing this:\n  f ?x \\<noteq> dSUCCEED\n\ngoal (1 subgoal):\n 1. REC\\<^sub>T\n     (\\<lambda>W s.\n         if I s then if b s then f s \\<bind> W else dRETURN s else dFAIL)\n     s \\<noteq>\n    dSUCCEED", "apply refine_transfer"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dres_ne_bot_dWHILET[refine_transfer]:\n  assumes \"\\<And>x. f x \\<noteq> dSUCCEED\" \n  shows \"dWHILET b f s \\<noteq> dSUCCEED\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dWHILET b f s \\<noteq> dSUCCEED", "using assms"], ["proof (prove)\nusing this:\n  f ?x \\<noteq> dSUCCEED\n\ngoal (1 subgoal):\n 1. dWHILET b f s \\<noteq> dSUCCEED", "unfolding dWHILET_def iWHILET_def iWHILEIT_def WHILEI_body_def"], ["proof (prove)\nusing this:\n  f ?x \\<noteq> dSUCCEED\n\ngoal (1 subgoal):\n 1. REC\\<^sub>T\n     (\\<lambda>W s.\n         if True then if b s then f s \\<bind> W else dRETURN s else dFAIL)\n     s \\<noteq>\n    dSUCCEED", "apply refine_transfer"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}