{"file_name": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic/examples/WordRefine.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Refine_Monadic", "problem_names": ["lemma word_nat_RELEATES[refine_dref_RELATES]: \n  \"RELATES word_nat_rel\"", "lemma [simp, relator_props]: \n  \"single_valued word_nat_rel\"", "lemma [simp]: \"single_valuedp (\\<lambda>c a. a = unat c)\"", "lemma [simp, relator_props]: \"single_valued (converse word_nat_rel)\"", "lemmas [refine_hsimp] = \n  word_less_nat_alt word_le_nat_alt unat_sub iffD1[OF unat_add_lem]", "lemma \"y0>0 \\<Longrightarrow> test x0 y0 \\<le> SPEC (\\<lambda>S. S={y0 .. y0 + x0 - 1})\"\n  \\<comment> \\<open>Choosen pre-condition to get least trouble when proving\\<close>", "lemma test_impl_refine: \n  assumes \"x'+y'<2^LENGTH(32)\"\n  assumes \"(x,x')\\<in>word_nat_rel\" \n  assumes \"(y,y')\\<in>word_nat_rel\" \n  shows \"test_impl x y \\<le> \\<Down>(\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')\""], "translations": [["", "lemma word_nat_RELEATES[refine_dref_RELATES]: \n  \"RELATES word_nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RELATES word_nat_rel", "by (simp add: RELATES_def)"], ["", "lemma [simp, relator_props]: \n  \"single_valued word_nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued word_nat_rel", "unfolding word_nat_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (br unat (\\<lambda>_. True))", "by blast"], ["", "lemma [simp]: \"single_valuedp (\\<lambda>c a. a = unat c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valuedp (\\<lambda>c a. a = unat c)", "by (rule single_valuedpI) blast"], ["", "lemma [simp, relator_props]: \"single_valued (converse word_nat_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (word_nat_rel\\<inverse>)", "by (auto intro: injI)"], ["", "lemmas [refine_hsimp] = \n  word_less_nat_alt word_le_nat_alt unat_sub iffD1[OF unat_add_lem]"], ["", "subsection \\<open>Example\\<close>"], ["", "type_synonym word32 = \"32 word\""], ["", "definition test :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat set nres\" where \"test x0 y0 \\<equiv> do {\n  let S={};\n  (S,_,_) \\<leftarrow> WHILE (\\<lambda>(S,x,y). x>0) (\\<lambda>(S,x,y). do {\n    let S=S\\<union>{y};\n    let x=x - 1;\n    ASSERT (y<x0+y0);\n    let y=y + 1;\n    RETURN (S,x,y)\n  }) (S,x0,y0);\n  RETURN S\n}\""], ["", "lemma \"y0>0 \\<Longrightarrow> test x0 y0 \\<le> SPEC (\\<lambda>S. S={y0 .. y0 + x0 - 1})\"\n  \\<comment> \\<open>Choosen pre-condition to get least trouble when proving\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y0 \\<Longrightarrow>\n    test x0 y0 \\<le> SPEC (\\<lambda>S. S = {y0..y0 + x0 - 1})", "unfolding test_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y0 \\<Longrightarrow>\n    (let S = {}\n     in WHILE (\\<lambda>(S, x, y). 0 < x)\n         (\\<lambda>(S, x, y).\n             let S = S \\<union> {y}; x = x - 1\n             in ASSERT (y < x0 + y0) \\<bind>\n                (\\<lambda>_. let y = y + 1 in RETURN (S, x, y)))\n         (S, x0, y0) \\<bind>\n        (\\<lambda>(S, uu_, uu_). RETURN S))\n    \\<le> SPEC (\\<lambda>S. S = {y0..y0 + x0 - 1})", "apply (intro WHILE_rule[where I=\"\\<lambda>(S,x,y). \n    x+y=x0+y0 \\<and> x\\<le>x0 \\<and>\n    S={y0 .. y0 + (x0-x) - 1}\"] \n    refine_vcg)"], ["proof (prove)\ngoal (4 subgoals):\n 1. 0 < y0 \\<Longrightarrow>\n    case ({}, x0, y0) of\n    (S, xa, y) \\<Rightarrow>\n      xa + y = x0 + y0 \\<and>\n      xa \\<le> x0 \\<and> S = {y0..y0 + (x0 - xa) - 1}\n 2. \\<And>s a b aa ba.\n       \\<lbrakk>0 < y0;\n        case s of\n        (S, xa, y) \\<Rightarrow>\n          xa + y = x0 + y0 \\<and>\n          xa \\<le> x0 \\<and> S = {y0..y0 + (x0 - xa) - 1};\n        case s of (S, xa, y) \\<Rightarrow> 0 < xa; s = (a, b);\n        b = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> ba < x0 + y0\n 3. \\<And>s a b aa ba.\n       \\<lbrakk>0 < y0;\n        case s of\n        (S, xa, y) \\<Rightarrow>\n          xa + y = x0 + y0 \\<and>\n          xa \\<le> x0 \\<and> S = {y0..y0 + (x0 - xa) - 1};\n        case s of (S, xa, y) \\<Rightarrow> 0 < xa; s = (a, b); b = (aa, ba);\n        ba < x0 + y0\\<rbrakk>\n       \\<Longrightarrow> case (a \\<union> {ba}, aa - 1, ba + 1) of\n                         (S, xa, y) \\<Rightarrow>\n                           xa + y = x0 + y0 \\<and>\n                           xa \\<le> x0 \\<and> S = {y0..y0 + (x0 - xa) - 1}\n 4. \\<And>s a b aa ba.\n       \\<lbrakk>0 < y0;\n        case s of\n        (S, xa, y) \\<Rightarrow>\n          xa + y = x0 + y0 \\<and>\n          xa \\<le> x0 \\<and> S = {y0..y0 + (x0 - xa) - 1};\n        \\<not> (case s of (S, xa, y) \\<Rightarrow> 0 < xa); s = (a, b);\n        b = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> a = {y0..y0 + x0 - 1}", "by auto"], ["", "definition test_impl :: \"word32 \\<Rightarrow> word32 \\<Rightarrow> word32 set nres\" where \n  \"test_impl x y \\<equiv> do {\n    let S={};\n    (S,_,_) \\<leftarrow> WHILE (\\<lambda>(S,x,y). x>0) (\\<lambda>(S,x,y). do {\n      let S=S\\<union>{y}; \n      let x=x - 1;\n      let y=y + 1;\n      RETURN (S,x,y)\n    }) (S,x,y);\n    RETURN S\n  }\""], ["", "lemma test_impl_refine: \n  assumes \"x'+y'<2^LENGTH(32)\"\n  assumes \"(x,x')\\<in>word_nat_rel\" \n  assumes \"(y,y')\\<in>word_nat_rel\" \n  shows \"test_impl x y \\<le> \\<Down>(\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_impl x y\n    \\<le> \\<Down> (\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. test_impl x y\n    \\<le> \\<Down> (\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')", "from assms"], ["proof (chain)\npicking this:\n  x' + y' < 2 ^ LENGTH(32)\n  (x, x') \\<in> word_nat_rel\n  (y, y') \\<in> word_nat_rel", "show ?thesis"], ["proof (prove)\nusing this:\n  x' + y' < 2 ^ LENGTH(32)\n  (x, x') \\<in> word_nat_rel\n  (y, y') \\<in> word_nat_rel\n\ngoal (1 subgoal):\n 1. test_impl x y\n    \\<le> \\<Down> (\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')", "unfolding test_impl_def test_def"], ["proof (prove)\nusing this:\n  x' + y' < 2 ^ LENGTH(32)\n  (x, x') \\<in> word_nat_rel\n  (y, y') \\<in> word_nat_rel\n\ngoal (1 subgoal):\n 1. (let S = {}\n     in WHILE (\\<lambda>(S, x, y). 0 < x)\n         (\\<lambda>(S, x, y).\n             let S = S \\<union> {y}; x = x - 1; y = y + 1\n             in RETURN (S, x, y))\n         (S, x, y) \\<bind>\n        (\\<lambda>(S, uu_, uu_). RETURN S))\n    \\<le> \\<Down> (\\<langle>word_nat_rel\\<rangle>set_rel)\n           (let S = {}\n            in WHILE (\\<lambda>(S, x, y). 0 < x)\n                (\\<lambda>(S, x, y).\n                    let S = S \\<union> {y}; x = x - 1\n                    in ASSERT (y < x' + y') \\<bind>\n                       (\\<lambda>_. let y = y + 1 in RETURN (S, x, y)))\n                (S, x', y') \\<bind>\n               (\\<lambda>(S, uu_, uu_). RETURN S))", "apply (refine_rcg)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n     (y, y') \\<in> word_nat_rel\\<rbrakk>\n    \\<Longrightarrow> (({}, x, y), {}, x', y') \\<in> ?R'4\n 2. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel; (xa, x'a) \\<in> ?R'4; x2 = (x1a, x2a);\n        xa = (x1, x2); x2b = (x1c, x2c); x'a = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> (0 < x1a) = (0 < x1c)\n 3. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel; (xa, x'a) \\<in> ?R'4;\n        case xa of (S, xa, y) \\<Rightarrow> 0 < xa;\n        case x'a of (S, xa, y) \\<Rightarrow> 0 < xa; x2 = (x1a, x2a);\n        x'a = (x1, x2); x2b = (x1c, x2c); xa = (x1b, x2b);\n        x2a < x' + y'\\<rbrakk>\n       \\<Longrightarrow> ((x1b \\<union> {x2c}, x1c - 1, x2c + 1),\n                          x1 \\<union> {x2a}, x1a - 1, x2a + 1)\n                         \\<in> ?R'4\n 4. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel; (xa, x'a) \\<in> ?R'4; x2 = (x1a, x2a);\n        x'a = (x1, x2); x2b = (x1c, x2c); xa = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> (x1b, x1)\n                         \\<in> \\<langle>word_nat_rel\\<rangle>set_rel", "apply (refine_dref_type)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n     (y, y') \\<in> word_nat_rel\\<rbrakk>\n    \\<Longrightarrow> (({}, x, y), {}, x', y')\n                      \\<in> \\<langle>word_nat_rel\\<rangle>set_rel \\<times>\\<^sub>r\n                            word_nat_rel \\<times>\\<^sub>r word_nat_rel\n 2. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel;\n        (xa, x'a)\n        \\<in> \\<langle>word_nat_rel\\<rangle>set_rel \\<times>\\<^sub>r\n              word_nat_rel \\<times>\\<^sub>r word_nat_rel;\n        x2 = (x1a, x2a); xa = (x1, x2); x2b = (x1c, x2c);\n        x'a = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> (0 < x1a) = (0 < x1c)\n 3. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel;\n        (xa, x'a)\n        \\<in> \\<langle>word_nat_rel\\<rangle>set_rel \\<times>\\<^sub>r\n              word_nat_rel \\<times>\\<^sub>r word_nat_rel;\n        case xa of (S, xa, y) \\<Rightarrow> 0 < xa;\n        case x'a of (S, xa, y) \\<Rightarrow> 0 < xa; x2 = (x1a, x2a);\n        x'a = (x1, x2); x2b = (x1c, x2c); xa = (x1b, x2b);\n        x2a < x' + y'\\<rbrakk>\n       \\<Longrightarrow> ((x1b \\<union> {x2c}, x1c - 1, x2c + 1),\n                          x1 \\<union> {x2a}, x1a - 1, x2a + 1)\n                         \\<in> \\<langle>word_nat_rel\\<rangle>set_rel \\<times>\\<^sub>r\n                               word_nat_rel \\<times>\\<^sub>r word_nat_rel\n 4. \\<And>xa x'a x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>x' + y' < 2 ^ LENGTH(32); (x, x') \\<in> word_nat_rel;\n        (y, y') \\<in> word_nat_rel;\n        (xa, x'a)\n        \\<in> \\<langle>word_nat_rel\\<rangle>set_rel \\<times>\\<^sub>r\n              word_nat_rel \\<times>\\<^sub>r word_nat_rel;\n        x2 = (x1a, x2a); x'a = (x1, x2); x2b = (x1c, x2c);\n        xa = (x1b, x2b)\\<rbrakk>\n       \\<Longrightarrow> (x1b, x1)\n                         \\<in> \\<langle>word_nat_rel\\<rangle>set_rel", "apply (auto simp: refine_hsimp refine_rel_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  test_impl x y\n  \\<le> \\<Down> (\\<langle>word_nat_rel\\<rangle>set_rel) (test x' y')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}