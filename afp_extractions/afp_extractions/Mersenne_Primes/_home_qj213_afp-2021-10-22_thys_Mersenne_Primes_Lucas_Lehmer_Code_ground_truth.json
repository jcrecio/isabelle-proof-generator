{"file_name": "/home/qj213/afp-2021-10-22/thys/Mersenne_Primes/Lucas_Lehmer_Code.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Mersenne_Primes", "problem_names": ["lemma cong_mersenne_number_int:\n  fixes k :: int\n  shows \"[k mod 2 ^ n + k div 2 ^ n = k] (mod (2 ^ n - 1))\"", "lemma mersenne_mod_code [code]:\n  \"mersenne_mod k n = (k AND ((1 << n) - 1)) + (k >> n)\"", "lemma cong_mersenne_mod: \"[mersenne_mod k n = k] (mod (2 ^ n - 1))\"", "lemma mersenne_mod_nonneg [simp]: \"k \\<ge> 0 \\<Longrightarrow> mersenne_mod k n \\<ge> 0\"", "lemma mersenne_mod_less:\n  assumes \"k \\<le> 2 ^ m\" \"m \\<ge> n\"\n  shows   \"mersenne_mod k n < 2 ^ n + 2 ^ (m - n)\"", "lemma mersenne_mod_less':\n  assumes \"k \\<le> 5 * 2 ^ n\"\n  shows   \"mersenne_mod k n < 2 ^ n + 5\"", "lemma cong_mersenne_mod2: \"[mersenne_mod2 k n = k] (mod (2 ^ n - 1))\"", "lemma mersenne_mod2_nonneg [simp]: \"k \\<ge> 0 \\<Longrightarrow> mersenne_mod2 k n \\<ge> 0\"", "lemma mersenne_mod2_less:\n  assumes \"n > 2\" and \"k \\<le> 2 ^ (2 * n + 2)\"\n  shows   \"mersenne_mod2 k n < 2 ^ n + 5\"", "lemma mersenne_mod_nonneg_strong:\n  assumes \"a > -(2 ^ p) + 1\"\n  shows   \"mersenne_mod a p \\<ge> 0\"", "lemma mersenne_mod2_nonneg_strong:\n  assumes \"a > -(2 ^ p) + 1\"\n  shows   \"mersenne_mod2 a p \\<ge> 0\"", "lemma gen_lucas_lehmer_sequence''_correct:\n  assumes \"[a = a'] (mod (2 ^ p - 1))\"\n  shows   \"[gen_lucas_lehmer_sequence'' p a n = gen_lucas_lehmer_sequence a' n] (mod (2 ^ p - 1))\"", "lemma gen_lucas_lehmer_sequence''_bounds:\n  assumes \"a \\<ge> 0\" \"a < 2 ^ p + 5\" \"p > 2\"\n  shows   \"gen_lucas_lehmer_sequence'' p a n \\<in> {0..<2 ^ p + 5}\"", "lemmas [code del] = lucas_lehmer_test_code_arithmetic", "lemma lucas_lehmer_test_code [code]:\n  \"lucas_lehmer_test p =\n     (2 < p \\<and> (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2) in x = 0 \\<or> x = (1 << p) - 1))\"", "lemma \"prime (2 ^ 521 - 1 :: nat)\"", "lemma \"prime (2 ^ 4253 - 1 :: nat)\""], "translations": [["", "lemma cong_mersenne_number_int:\n  fixes k :: int\n  shows \"[k mod 2 ^ n + k div 2 ^ n = k] (mod (2 ^ n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "have \"k = (2 ^ n - 1 + 1) * (k div 2 ^ n) + (k mod 2 ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = (2 ^ n - 1 + 1) * (k div 2 ^ n) + k mod 2 ^ n", "by simp"], ["proof (state)\nthis:\n  k = (2 ^ n - 1 + 1) * (k div 2 ^ n) + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "also"], ["proof (state)\nthis:\n  k = (2 ^ n - 1 + 1) * (k div 2 ^ n) + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "have \"[\\<dots> = (0 + 1) * (k div 2 ^ n) + (k mod 2 ^ n)] (mod (2 ^ n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [(2 ^ n - 1 + 1) * (k div 2 ^ n) +\n     k mod 2 ^ n = (0 + 1) * (k div 2 ^ n) + k mod 2 ^ n] (mod 2 ^ n - 1)", "by (intro cong_add cong_mult cong_refl) (auto simp: cong_def)"], ["proof (state)\nthis:\n  [(2 ^ n - 1 + 1) * (k div 2 ^ n) +\n   k mod 2 ^ n = (0 + 1) * (k div 2 ^ n) + k mod 2 ^ n] (mod 2 ^ n - 1)\n\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "finally"], ["proof (chain)\npicking this:\n  [k = (0 + 1) * (k div 2 ^ n) + k mod 2 ^ n] (mod 2 ^ n - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  [k = (0 + 1) * (k div 2 ^ n) + k mod 2 ^ n] (mod 2 ^ n - 1)\n\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "by (simp add: cong_sym add_ac)"], ["proof (state)\nthis:\n  [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We encapsulate a single reduction step in the following operation. Note, however,\n  that the result is not, in general, the same as $k\\ \\text{mod}\\ (2^n - 1)$. Multiple \n  reductions might be required in order to reduce it below $2^n$, and a multiple of $2 ^ n - 1$\n  can be reduced to $2 ^ n - 1$, which is invariant to further reduction steps.\n\\<close>"], ["", "definition mersenne_mod :: \"int \\<Rightarrow> nat \\<Rightarrow> int\" where\n  \"mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\""], ["", "lemma mersenne_mod_code [code]:\n  \"mersenne_mod k n = (k AND ((1 << n) - 1)) + (k >> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n = (k AND (1 << n) - 1) + (k >> n)", "by (simp add: mersenne_mod_def shiftr_int_def shiftl_int_def AND_mod)"], ["", "lemma cong_mersenne_mod: \"[mersenne_mod k n = k] (mod (2 ^ n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [mersenne_mod k n = k] (mod 2 ^ n - 1)", "unfolding mersenne_mod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [k mod 2 ^ n + k div 2 ^ n = k] (mod 2 ^ n - 1)", "by (rule cong_mersenne_number_int)"], ["", "lemma mersenne_mod_nonneg [simp]: \"k \\<ge> 0 \\<Longrightarrow> mersenne_mod k n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> k \\<Longrightarrow> 0 \\<le> mersenne_mod k n", "unfolding mersenne_mod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> k \\<Longrightarrow> 0 \\<le> k mod 2 ^ n + k div 2 ^ n", "by (intro add_nonneg_nonneg) (simp_all add: pos_imp_zdiv_nonneg_iff)"], ["", "lemma mersenne_mod_less:\n  assumes \"k \\<le> 2 ^ m\" \"m \\<ge> n\"\n  shows   \"mersenne_mod k n < 2 ^ n + 2 ^ (m - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n", "by (simp add: mersenne_mod_def)"], ["proof (state)\nthis:\n  mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "also"], ["proof (state)\nthis:\n  mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"k mod 2 ^ n < 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k mod 2 ^ n < 2 ^ n", "by simp"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "also"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "{"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod (2 ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n", "by (intro add_mono) auto"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "also"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"\\<dots> = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k", "by (subst mult.commute) auto"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "also"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"\\<dots> \\<le> 2 ^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> 2 ^ m", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> 2 ^ m\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. k \\<le> 2 ^ m", "by simp"], ["proof (state)\nthis:\n  k \\<le> 2 ^ m\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "also"], ["proof (state)\nthis:\n  k \\<le> 2 ^ m\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "have \"\\<dots> = 2 ^ (m - n) * 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ m = 2 ^ (m - n) * 2 ^ n", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> 2 ^ m\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. 2 ^ m = 2 ^ (m - n) * 2 ^ n", "by (simp flip: power_add)"], ["proof (state)\nthis:\n  2 ^ m = 2 ^ (m - n) * 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>k div 2 ^ n * 2 ^ n + 0 \\<in> UNIV; k \\<in> UNIV;\n   2 ^ m \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> k div 2 ^ n * 2 ^ n + 0 \\<le> 2 ^ (m - n) * 2 ^ n", "have \"k div 2 ^ n \\<le> 2 ^ (m - n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>k div 2 ^ n * 2 ^ n + 0 \\<in> UNIV; k \\<in> UNIV;\n   2 ^ m \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> k div 2 ^ n * 2 ^ n + 0 \\<le> 2 ^ (m - n) * 2 ^ n\n\ngoal (1 subgoal):\n 1. k div 2 ^ n \\<le> 2 ^ (m - n)", "by simp"], ["proof (state)\nthis:\n  k div 2 ^ n \\<le> 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "}"], ["proof (state)\nthis:\n  k div 2 ^ n \\<le> 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x < y \\<Longrightarrow> x + k div 2 ^ n < y + k div 2 ^ n;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 2 ^ n + x \\<le> 2 ^ n + y\\<rbrakk>\n  \\<Longrightarrow> mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x < y \\<Longrightarrow> x + k div 2 ^ n < y + k div 2 ^ n;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 2 ^ n + x \\<le> 2 ^ n + y\\<rbrakk>\n  \\<Longrightarrow> mersenne_mod k n < 2 ^ n + 2 ^ (m - n)\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (m - n)", "by simp"], ["proof (state)\nthis:\n  mersenne_mod k n < 2 ^ n + 2 ^ (m - n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mersenne_mod_less':\n  assumes \"k \\<le> 5 * 2 ^ n\"\n  shows   \"mersenne_mod k n < 2 ^ n + 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "have \"mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n", "by (simp add: mersenne_mod_def)"], ["proof (state)\nthis:\n  mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "also"], ["proof (state)\nthis:\n  mersenne_mod k n = k mod 2 ^ n + k div 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "have \"k mod 2 ^ n < 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k mod 2 ^ n < 2 ^ n", "by simp"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "also"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "{"], ["proof (state)\nthis:\n  k mod 2 ^ n < 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "have \"k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod (2 ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n", "by (intro add_mono) auto"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "also"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + 0 \\<le> k div 2 ^ n * 2 ^ n + k mod 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "have \"\\<dots> = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k", "by (subst mult.commute) auto"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "also"], ["proof (state)\nthis:\n  k div 2 ^ n * 2 ^ n + k mod 2 ^ n = k\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "have \"\\<dots> \\<le> 5 * 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> 5 * 2 ^ n", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> 5 * 2 ^ n\n\ngoal (1 subgoal):\n 1. k \\<le> 5 * 2 ^ n", "by simp"], ["proof (state)\nthis:\n  k \\<le> 5 * 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>k div 2 ^ n * 2 ^ n + 0 \\<in> UNIV; k \\<in> UNIV;\n   5 * 2 ^ n \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> k div 2 ^ n * 2 ^ n + 0 \\<le> 5 * 2 ^ n", "have \"k div 2 ^ n \\<le> 5\""], ["proof (prove)\nusing this:\n  \\<lbrakk>k div 2 ^ n * 2 ^ n + 0 \\<in> UNIV; k \\<in> UNIV;\n   5 * 2 ^ n \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> k div 2 ^ n * 2 ^ n + 0 \\<le> 5 * 2 ^ n\n\ngoal (1 subgoal):\n 1. k div 2 ^ n \\<le> 5", "by simp"], ["proof (state)\nthis:\n  k div 2 ^ n \\<le> 5\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "}"], ["proof (state)\nthis:\n  k div 2 ^ n \\<le> 5\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x < y \\<Longrightarrow> x + k div 2 ^ n < y + k div 2 ^ n;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 2 ^ n + x \\<le> 2 ^ n + y\\<rbrakk>\n  \\<Longrightarrow> mersenne_mod k n < 2 ^ n + 5", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x < y \\<Longrightarrow> x + k div 2 ^ n < y + k div 2 ^ n;\n   \\<And>x y. x \\<le> y \\<Longrightarrow> 2 ^ n + x \\<le> 2 ^ n + y\\<rbrakk>\n  \\<Longrightarrow> mersenne_mod k n < 2 ^ n + 5\n\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 5", "by simp"], ["proof (state)\nthis:\n  mersenne_mod k n < 2 ^ n + 5\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  It turns out that for our use case, a single reduction is not enough to reduce\n  the number in question enough (or at least I was unable to prove that it is). We\n  therefore perform two reduction steps, which is enough to guarantee that our numbers\n  are below $2^n + 4$ before and after every step in the Lucas--Lehmer sequence.\n\n  Whether one or two reductions are performed is not very important anyway, since the\n  dominant step is the squaring anyway.\n\\<close>"], ["", "definition mersenne_mod2 :: \"int \\<Rightarrow> nat \\<Rightarrow> int\" where\n  \"mersenne_mod2 k n = mersenne_mod (mersenne_mod k n) n\""], ["", "lemma cong_mersenne_mod2: \"[mersenne_mod2 k n = k] (mod (2 ^ n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [mersenne_mod2 k n = k] (mod 2 ^ n - 1)", "unfolding mersenne_mod2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [mersenne_mod (mersenne_mod k n) n = k] (mod 2 ^ n - 1)", "by (rule cong_trans) (rule cong_mersenne_mod)+"], ["", "lemma mersenne_mod2_nonneg [simp]: \"k \\<ge> 0 \\<Longrightarrow> mersenne_mod2 k n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> k \\<Longrightarrow> 0 \\<le> mersenne_mod2 k n", "unfolding mersenne_mod2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> k \\<Longrightarrow> 0 \\<le> mersenne_mod (mersenne_mod k n) n", "by simp"], ["", "lemma mersenne_mod2_less:\n  assumes \"n > 2\" and \"k \\<le> 2 ^ (2 * n + 2)\"\n  shows   \"mersenne_mod2 k n < 2 ^ n + 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "from assms"], ["proof (chain)\npicking this:\n  2 < n\n  k \\<le> 2 ^ (2 * n + 2)", "have \"2 ^ 3 \\<le> (2 ^ n :: int)\""], ["proof (prove)\nusing this:\n  2 < n\n  k \\<le> 2 ^ (2 * n + 2)\n\ngoal (1 subgoal):\n 1. 2 ^ 3 \\<le> 2 ^ n", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  2 ^ 3 \\<le> 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "hence \"2 ^ n \\<ge> (8 :: int)\""], ["proof (prove)\nusing this:\n  2 ^ 3 \\<le> 2 ^ n\n\ngoal (1 subgoal):\n 1. 8 \\<le> 2 ^ n", "by simp"], ["proof (state)\nthis:\n  8 \\<le> 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "have \"mersenne_mod k n < 2 ^ n + 2 ^ (2 * n + 2 - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mersenne_mod k n < 2 ^ n + 2 ^ (2 * n + 2 - n)", "by (rule mersenne_mod_less) (use assms in auto)"], ["proof (state)\nthis:\n  mersenne_mod k n < 2 ^ n + 2 ^ (2 * n + 2 - n)\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "also"], ["proof (state)\nthis:\n  mersenne_mod k n < 2 ^ n + 2 ^ (2 * n + 2 - n)\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "have \"\\<dots> \\<le> 5 * 2 ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ n + 2 ^ (2 * n + 2 - n) \\<le> 5 * 2 ^ n", "by (simp add: power_add)"], ["proof (state)\nthis:\n  2 ^ n + 2 ^ (2 * n + 2 - n) \\<le> 5 * 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "finally"], ["proof (chain)\npicking this:\n  mersenne_mod k n < 5 * 2 ^ n", "have \"mersenne_mod (mersenne_mod k n) n < 2 ^ n + 5\""], ["proof (prove)\nusing this:\n  mersenne_mod k n < 5 * 2 ^ n\n\ngoal (1 subgoal):\n 1. mersenne_mod (mersenne_mod k n) n < 2 ^ n + 5", "by (intro mersenne_mod_less') auto"], ["proof (state)\nthis:\n  mersenne_mod (mersenne_mod k n) n < 2 ^ n + 5\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "thus ?thesis"], ["proof (prove)\nusing this:\n  mersenne_mod (mersenne_mod k n) n < 2 ^ n + 5\n\ngoal (1 subgoal):\n 1. mersenne_mod2 k n < 2 ^ n + 5", "by (simp add: mersenne_mod2_def)"], ["proof (state)\nthis:\n  mersenne_mod2 k n < 2 ^ n + 5\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Since we subtract 2 at one point, the intermediate results can become negative. This\n  is not a problem since our reduction modulo $2 ^ p - 1$ happens to make them positive again\n  immediately.\n\\<close>"], ["", "lemma mersenne_mod_nonneg_strong:\n  assumes \"a > -(2 ^ p) + 1\"\n  shows   \"mersenne_mod a p \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> mersenne_mod a p", "proof (cases \"a < 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "case True"], ["proof (state)\nthis:\n  a < 0\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "have \"eucl_rel_int a (2 ^ p) (- 1, a + 2 ^ p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eucl_rel_int a (2 ^ p) (- 1, a + 2 ^ p)", "using assms True"], ["proof (prove)\nusing this:\n  - (2 ^ p) + 1 < a\n  a < 0\n\ngoal (1 subgoal):\n 1. eucl_rel_int a (2 ^ p) (- 1, a + 2 ^ p)", "by (auto simp: eucl_rel_int_iff)"], ["proof (state)\nthis:\n  eucl_rel_int a (2 ^ p) (- 1, a + 2 ^ p)\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "hence \"a div 2 ^ p = -1\" and \"a mod 2 ^ p = a + 2 ^ p\""], ["proof (prove)\nusing this:\n  eucl_rel_int a (2 ^ p) (- 1, a + 2 ^ p)\n\ngoal (1 subgoal):\n 1. a div 2 ^ p = - 1 &&& a mod 2 ^ p = a + 2 ^ p", "by (simp_all add: div_int_unique mod_int_unique)"], ["proof (state)\nthis:\n  a div 2 ^ p = - 1\n  a mod 2 ^ p = a + 2 ^ p\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "hence \"mersenne_mod a p = a + 2 ^ p - 1\""], ["proof (prove)\nusing this:\n  a div 2 ^ p = - 1\n  a mod 2 ^ p = a + 2 ^ p\n\ngoal (1 subgoal):\n 1. mersenne_mod a p = a + 2 ^ p - 1", "by (simp add: mersenne_mod_def)"], ["proof (state)\nthis:\n  mersenne_mod a p = a + 2 ^ p - 1\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "also"], ["proof (state)\nthis:\n  mersenne_mod a p = a + 2 ^ p - 1\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "have \"\\<dots> > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < a + 2 ^ p - 1", "using assms"], ["proof (prove)\nusing this:\n  - (2 ^ p) + 1 < a\n\ngoal (1 subgoal):\n 1. 0 < a + 2 ^ p - 1", "by simp"], ["proof (state)\nthis:\n  0 < a + 2 ^ p - 1\n\ngoal (2 subgoals):\n 1. a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p\n 2. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "finally"], ["proof (chain)\npicking this:\n  0 < mersenne_mod a p", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < mersenne_mod a p\n\ngoal (1 subgoal):\n 1. 0 \\<le> mersenne_mod a p", "by simp"], ["proof (state)\nthis:\n  0 \\<le> mersenne_mod a p\n\ngoal (1 subgoal):\n 1. \\<not> a < 0 \\<Longrightarrow> 0 \\<le> mersenne_mod a p", "qed auto"], ["", "lemma mersenne_mod2_nonneg_strong:\n  assumes \"a > -(2 ^ p) + 1\"\n  shows   \"mersenne_mod2 a p \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> mersenne_mod2 a p", "unfolding mersenne_mod2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> mersenne_mod (mersenne_mod a p) p", "by (rule mersenne_mod_nonneg, rule mersenne_mod_nonneg_strong) (use assms in auto)"], ["", "subsection \\<open>Efficient code for the Lucas--Lehmer sequence\\<close>"], ["", "primrec gen_lucas_lehmer_sequence'' :: \"nat \\<Rightarrow> int \\<Rightarrow> nat \\<Rightarrow> int\" where\n  \"gen_lucas_lehmer_sequence'' p a 0 = a\"\n| \"gen_lucas_lehmer_sequence'' p a (Suc n) =\n     gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a ^ 2 - 2) p) n\""], ["", "lemma gen_lucas_lehmer_sequence''_correct:\n  assumes \"[a = a'] (mod (2 ^ p - 1))\"\n  shows   \"[gen_lucas_lehmer_sequence'' p a n = gen_lucas_lehmer_sequence a' n] (mod (2 ^ p - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [gen_lucas_lehmer_sequence'' p a\n      n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1)", "using assms"], ["proof (prove)\nusing this:\n  [a = a'] (mod 2 ^ p - 1)\n\ngoal (1 subgoal):\n 1. [gen_lucas_lehmer_sequence'' p a\n      n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1)", "proof (induction n arbitrary: a a')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "case (Suc n)"], ["proof (state)\nthis:\n  [?a = ?a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n  [gen_lucas_lehmer_sequence'' p ?a\n    n = gen_lucas_lehmer_sequence ?a' n] (mod 2 ^ p - 1)\n  [a = a'] (mod 2 ^ p - 1)\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "have \"[mersenne_mod2 (a ^ 2 - 2) p = a ^ 2 - 2] (mod (2 ^ p - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [mersenne_mod2 (a\\<^sup>2 - 2) p = a\\<^sup>2 - 2] (mod 2 ^ p - 1)", "by (rule cong_mersenne_mod2)"], ["proof (state)\nthis:\n  [mersenne_mod2 (a\\<^sup>2 - 2) p = a\\<^sup>2 - 2] (mod 2 ^ p - 1)\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "also"], ["proof (state)\nthis:\n  [mersenne_mod2 (a\\<^sup>2 - 2) p = a\\<^sup>2 - 2] (mod 2 ^ p - 1)\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "have \"[a ^ 2 - 2 = a' ^ 2 - 2] (mod (2 ^ p - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a\\<^sup>2 - 2 = a'\\<^sup>2 - 2] (mod 2 ^ p - 1)", "by (intro cong_pow cong_diff Suc.prems cong_refl)"], ["proof (state)\nthis:\n  [a\\<^sup>2 - 2 = a'\\<^sup>2 - 2] (mod 2 ^ p - 1)\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "finally"], ["proof (chain)\npicking this:\n  [mersenne_mod2 (a\\<^sup>2 - 2) p = a'\\<^sup>2 - 2] (mod 2 ^ p - 1)", "have \"[gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n =\n                 gen_lucas_lehmer_sequence (a'\\<^sup>2 - 2) n] (mod 2 ^ p - 1)\""], ["proof (prove)\nusing this:\n  [mersenne_mod2 (a\\<^sup>2 - 2) p = a'\\<^sup>2 - 2] (mod 2 ^ p - 1)\n\ngoal (1 subgoal):\n 1. [gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p)\n      n = gen_lucas_lehmer_sequence (a'\\<^sup>2 - 2) n] (mod 2 ^ p - 1)", "by (rule Suc.IH)"], ["proof (state)\nthis:\n  [gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p)\n    n = gen_lucas_lehmer_sequence (a'\\<^sup>2 - 2) n] (mod 2 ^ p - 1)\n\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)\n 2. \\<And>n a a'.\n       \\<lbrakk>\\<And>a a'.\n                   [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n                   [gen_lucas_lehmer_sequence'' p a\n                     n = gen_lucas_lehmer_sequence a' n] (mod 2 ^ p - 1);\n        [a = a'] (mod 2 ^ p - 1)\\<rbrakk>\n       \\<Longrightarrow> [gen_lucas_lehmer_sequence'' p a\n                           (Suc n) = gen_lucas_lehmer_sequence a'\n(Suc n)] (mod 2 ^ p - 1)", "thus ?case"], ["proof (prove)\nusing this:\n  [gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p)\n    n = gen_lucas_lehmer_sequence (a'\\<^sup>2 - 2) n] (mod 2 ^ p - 1)\n\ngoal (1 subgoal):\n 1. [gen_lucas_lehmer_sequence'' p a\n      (Suc n) = gen_lucas_lehmer_sequence a' (Suc n)] (mod 2 ^ p - 1)", "by (auto simp del: gen_lucas_lehmer_sequence.simps simp: gen_lucas_lehmer_sequence_Suc')"], ["proof (state)\nthis:\n  [gen_lucas_lehmer_sequence'' p a\n    (Suc n) = gen_lucas_lehmer_sequence a' (Suc n)] (mod 2 ^ p - 1)\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       [a = a'] (mod 2 ^ p - 1) \\<Longrightarrow>\n       [gen_lucas_lehmer_sequence'' p a\n         0 = gen_lucas_lehmer_sequence a' 0] (mod 2 ^ p - 1)", "qed auto"], ["", "lemma gen_lucas_lehmer_sequence''_bounds:\n  assumes \"a \\<ge> 0\" \"a < 2 ^ p + 5\" \"p > 2\"\n  shows   \"gen_lucas_lehmer_sequence'' p a n \\<in> {0..<2 ^ p + 5}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p a n \\<in> {0..<2 ^ p + 5}", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> a\n  a < 2 ^ p + 5\n  2 < p\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p a n \\<in> {0..<2 ^ p + 5}", "proof (induction n arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?a; ?a < 2 ^ p + 5; 2 < p\\<rbrakk>\n  \\<Longrightarrow> gen_lucas_lehmer_sequence'' p ?a n \\<in> {0..<2 ^ p + 5}\n  0 \\<le> a\n  a < 2 ^ p + 5\n  2 < p\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "from Suc.prems"], ["proof (chain)\npicking this:\n  0 \\<le> a\n  a < 2 ^ p + 5\n  2 < p", "have \"a ^ 2 < (2 ^ p + 5) ^ 2\""], ["proof (prove)\nusing this:\n  0 \\<le> a\n  a < 2 ^ p + 5\n  2 < p\n\ngoal (1 subgoal):\n 1. a\\<^sup>2 < (2 ^ p + 5)\\<^sup>2", "by (intro power_strict_mono Suc.prems) auto"], ["proof (state)\nthis:\n  a\\<^sup>2 < (2 ^ p + 5)\\<^sup>2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "also"], ["proof (state)\nthis:\n  a\\<^sup>2 < (2 ^ p + 5)\\<^sup>2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "have \"\\<dots> \\<le> (2 ^ (p + 1)) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 ^ p + 5)\\<^sup>2 \\<le> (2 ^ (p + 1))\\<^sup>2", "using power_increasing[of 3 p \"2 :: int\"] \\<open>p > 2\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>3 \\<le> p; 1 \\<le> 2\\<rbrakk> \\<Longrightarrow> 2 ^ 3 \\<le> 2 ^ p\n  2 < p\n\ngoal (1 subgoal):\n 1. (2 ^ p + 5)\\<^sup>2 \\<le> (2 ^ (p + 1))\\<^sup>2", "by (intro power_mono) auto"], ["proof (state)\nthis:\n  (2 ^ p + 5)\\<^sup>2 \\<le> (2 ^ (p + 1))\\<^sup>2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "finally"], ["proof (chain)\npicking this:\n  a\\<^sup>2 < (2 ^ (p + 1))\\<^sup>2", "have \"a ^ 2 - 2 < 2 ^ (2 * p + 2)\""], ["proof (prove)\nusing this:\n  a\\<^sup>2 < (2 ^ (p + 1))\\<^sup>2\n\ngoal (1 subgoal):\n 1. a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)", "by (simp flip: power_mult mult_ac)"], ["proof (state)\nthis:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "moreover"], ["proof (state)\nthis:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "{"], ["proof (state)\nthis:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "from \\<open>p > 2\\<close>"], ["proof (chain)\npicking this:\n  2 < p", "have \"(2 ^ p) \\<ge> (2 ^ 3 :: int)\""], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. 2 ^ 3 \\<le> 2 ^ p", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  2 ^ 3 \\<le> 2 ^ p\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "hence \"-(2 ^ p) + 1 < (-2 :: int)\""], ["proof (prove)\nusing this:\n  2 ^ 3 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. - (2 ^ p) + 1 < - 2", "by simp"], ["proof (state)\nthis:\n  - (2 ^ p) + 1 < - 2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "also"], ["proof (state)\nthis:\n  - (2 ^ p) + 1 < - 2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "have \"-2 \\<le> a ^ 2 - 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 2 \\<le> a\\<^sup>2 - 2", "by simp"], ["proof (state)\nthis:\n  - 2 \\<le> a\\<^sup>2 - 2\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "finally"], ["proof (chain)\npicking this:\n  - (2 ^ p) + 1 < a\\<^sup>2 - 2", "have \"mersenne_mod2 (a ^ 2 - 2) p \\<ge> 0\""], ["proof (prove)\nusing this:\n  - (2 ^ p) + 1 < a\\<^sup>2 - 2\n\ngoal (1 subgoal):\n 1. 0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p", "by (rule mersenne_mod2_nonneg_strong)"], ["proof (state)\nthis:\n  0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "}"], ["proof (state)\nthis:\n  0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "ultimately"], ["proof (chain)\npicking this:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n  0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p", "have \"gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n \\<in> {0..<2 ^ p + 5}\""], ["proof (prove)\nusing this:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n  0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n\n    \\<in> {0..<2 ^ p + 5}", "using \\<open>p > 2\\<close>"], ["proof (prove)\nusing this:\n  a\\<^sup>2 - 2 < 2 ^ (2 * p + 2)\n  0 \\<le> mersenne_mod2 (a\\<^sup>2 - 2) p\n  2 < p\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n\n    \\<in> {0..<2 ^ p + 5}", "by (intro Suc.IH mersenne_mod2_less) auto"], ["proof (state)\nthis:\n  gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n\n  \\<in> {0..<2 ^ p + 5}\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}\n 2. \\<And>n a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n                   \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a n\n                                     \\<in> {0..<2 ^ p + 5};\n        0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a (Suc n)\n                         \\<in> {0..<2 ^ p + 5}", "thus ?case"], ["proof (prove)\nusing this:\n  gen_lucas_lehmer_sequence'' p (mersenne_mod2 (a\\<^sup>2 - 2) p) n\n  \\<in> {0..<2 ^ p + 5}\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p a (Suc n) \\<in> {0..<2 ^ p + 5}", "by simp"], ["proof (state)\nthis:\n  gen_lucas_lehmer_sequence'' p a (Suc n) \\<in> {0..<2 ^ p + 5}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>0 \\<le> a; a < 2 ^ p + 5; 2 < p\\<rbrakk>\n       \\<Longrightarrow> gen_lucas_lehmer_sequence'' p a 0\n                         \\<in> {0..<2 ^ p + 5}", "qed auto"], ["", "subsection \\<open>Code for the Lucas--Lehmer test\\<close>"], ["", "lemmas [code del] = lucas_lehmer_test_code_arithmetic"], ["", "lemma lucas_lehmer_test_code [code]:\n  \"lucas_lehmer_test p =\n     (2 < p \\<and> (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2) in x = 0 \\<or> x = (1 << p) - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lucas_lehmer_test p =\n    (2 < p \\<and>\n     (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n      in x = 0 \\<or> x = (1 << p) - 1))", "unfolding lucas_lehmer_test_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 < p \\<and> 2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (2 < p \\<and>\n     (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n      in x = 0 \\<or> x = (1 << p) - 1))", "proof (rule conj_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "assume \"p > 2\""], ["proof (state)\nthis:\n  2 < p\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "define x where \"x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\""], ["proof (state)\nthis:\n  x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "from \\<open>p > 2\\<close>"], ["proof (chain)\npicking this:\n  2 < p", "have \"2 ^ 3 \\<le> (2 ^ p :: int)\""], ["proof (prove)\nusing this:\n  2 < p\n\ngoal (1 subgoal):\n 1. 2 ^ 3 \\<le> 2 ^ p", "by (intro power_increasing) auto"], ["proof (state)\nthis:\n  2 ^ 3 \\<le> 2 ^ p\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "hence \"2 ^ p \\<ge> (8 :: int)\""], ["proof (prove)\nusing this:\n  2 ^ 3 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. 8 \\<le> 2 ^ p", "by simp"], ["proof (state)\nthis:\n  8 \\<le> 2 ^ p\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "hence bounds: \"x \\<in> {0..<2 ^ p + 5}\""], ["proof (prove)\nusing this:\n  8 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. x \\<in> {0..<2 ^ p + 5}", "unfolding x_def"], ["proof (prove)\nusing this:\n  8 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p 4 (p - 2) \\<in> {0..<2 ^ p + 5}", "using \\<open>p > 2\\<close>"], ["proof (prove)\nusing this:\n  8 \\<le> 2 ^ p\n  2 < p\n\ngoal (1 subgoal):\n 1. gen_lucas_lehmer_sequence'' p 4 (p - 2) \\<in> {0..<2 ^ p + 5}", "by (intro gen_lucas_lehmer_sequence''_bounds) auto"], ["proof (state)\nthis:\n  x \\<in> {0..<2 ^ p + 5}\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "have \"2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2) \\<longleftrightarrow> 2 ^ p - 1 dvd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) = (2 ^ p - 1 dvd x)", "unfolding x_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence'' p 4 (p - 2))", "by (intro cong_dvd_iff cong_sym[OF gen_lucas_lehmer_sequence''_correct]) auto"], ["proof (state)\nthis:\n  (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) = (2 ^ p - 1 dvd x)\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "also"], ["proof (state)\nthis:\n  (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) = (2 ^ p - 1 dvd x)\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "have \"\\<dots> \\<longleftrightarrow> x \\<in> {0, 2 ^ p - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 ^ p - 1 dvd x) = (x \\<in> {0, 2 ^ p - 1})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "assume \"2 ^ p - 1 dvd x\""], ["proof (state)\nthis:\n  2 ^ p - 1 dvd x\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "then"], ["proof (chain)\npicking this:\n  2 ^ p - 1 dvd x", "obtain k where k: \"x = (2 ^ p - 1) * k\""], ["proof (prove)\nusing this:\n  2 ^ p - 1 dvd x\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        x = (2 ^ p - 1) * k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = (2 ^ p - 1) * k\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "have \"k \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> k", "using bounds \\<open>2 ^ p \\<ge> 8\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {0..<2 ^ p + 5}\n  8 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. 0 \\<le> k", "by (auto simp: k zero_le_mult_iff)"], ["proof (state)\nthis:\n  0 \\<le> k\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "moreover"], ["proof (state)\nthis:\n  0 \\<le> k\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "{"], ["proof (state)\nthis:\n  0 \\<le> k\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "have \"x < 2 ^ p + 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < 2 ^ p + 5", "using bounds"], ["proof (prove)\nusing this:\n  x \\<in> {0..<2 ^ p + 5}\n\ngoal (1 subgoal):\n 1. x < 2 ^ p + 5", "by simp"], ["proof (state)\nthis:\n  x < 2 ^ p + 5\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "also"], ["proof (state)\nthis:\n  x < 2 ^ p + 5\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "have \"\\<dots> \\<le> (2 ^ p - 1) * 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ p + 5 \\<le> (2 ^ p - 1) * 2", "using \\<open>2 ^ p \\<ge> 8\\<close>"], ["proof (prove)\nusing this:\n  8 \\<le> 2 ^ p\n\ngoal (1 subgoal):\n 1. 2 ^ p + 5 \\<le> (2 ^ p - 1) * 2", "by simp"], ["proof (state)\nthis:\n  2 ^ p + 5 \\<le> (2 ^ p - 1) * 2\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "finally"], ["proof (chain)\npicking this:\n  x < (2 ^ p - 1) * 2", "have \"(2 ^ p - 1) * k < (2 ^ p - 1) * 2\""], ["proof (prove)\nusing this:\n  x < (2 ^ p - 1) * 2\n\ngoal (1 subgoal):\n 1. (2 ^ p - 1) * k < (2 ^ p - 1) * 2", "unfolding k"], ["proof (prove)\nusing this:\n  (2 ^ p - 1) * k < (2 ^ p - 1) * 2\n\ngoal (1 subgoal):\n 1. (2 ^ p - 1) * k < (2 ^ p - 1) * 2", "."], ["proof (state)\nthis:\n  (2 ^ p - 1) * k < (2 ^ p - 1) * 2\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "hence \"k < 2\""], ["proof (prove)\nusing this:\n  (2 ^ p - 1) * k < (2 ^ p - 1) * 2\n\ngoal (1 subgoal):\n 1. k < 2", "by (subst (asm) mult_less_cancel_left) auto"], ["proof (state)\nthis:\n  k < 2\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "}"], ["proof (state)\nthis:\n  k < 2\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<le> k\n  k < 2", "have \"k = 0 \\<or> k = 1\""], ["proof (prove)\nusing this:\n  0 \\<le> k\n  k < 2\n\ngoal (1 subgoal):\n 1. k = 0 \\<or> k = 1", "by auto"], ["proof (state)\nthis:\n  k = 0 \\<or> k = 1\n\ngoal (2 subgoals):\n 1. 2 ^ p - 1 dvd x \\<Longrightarrow> x \\<in> {0, 2 ^ p - 1}\n 2. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "thus \"x \\<in> {0, 2 ^ p - 1}\""], ["proof (prove)\nusing this:\n  k = 0 \\<or> k = 1\n\ngoal (1 subgoal):\n 1. x \\<in> {0, 2 ^ p - 1}", "using k"], ["proof (prove)\nusing this:\n  k = 0 \\<or> k = 1\n  x = (2 ^ p - 1) * k\n\ngoal (1 subgoal):\n 1. x \\<in> {0, 2 ^ p - 1}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {0, 2 ^ p - 1}\n\ngoal (1 subgoal):\n 1. x \\<in> {0, 2 ^ p - 1} \\<Longrightarrow> 2 ^ p - 1 dvd x", "qed auto"], ["proof (state)\nthis:\n  (2 ^ p - 1 dvd x) = (x \\<in> {0, 2 ^ p - 1})\n\ngoal (2 subgoals):\n 1. (2 < p) = (2 < p)\n 2. 2 < p \\<Longrightarrow>\n    (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = gen_lucas_lehmer_sequence'' p 4 (p - 2)\n     in x = 0 \\<or> x = (1 << p) - 1)", "finally"], ["proof (chain)\npicking this:\n  (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n  (x \\<in> {0, 2 ^ p - 1})", "show \"(2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n                ((let x = x in x = 0 \\<or> x = (1 << p) - 1))\""], ["proof (prove)\nusing this:\n  (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n  (x \\<in> {0, 2 ^ p - 1})\n\ngoal (1 subgoal):\n 1. (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n    (let x = x in x = 0 \\<or> x = (1 << p) - 1)", "by (simp add: shiftl_int_def Let_def)"], ["proof (state)\nthis:\n  (2 ^ p - 1 dvd gen_lucas_lehmer_sequence 4 (p - 2)) =\n  (let x = x in x = 0 \\<or> x = (1 << p) - 1)\n\ngoal (1 subgoal):\n 1. (2 < p) = (2 < p)", "qed auto"], ["", "subsection \\<open>Examples\\<close>"], ["", "text \\<open>\n  Note that for some reason, the clever bit-arithmetic version of the Lucas--Lehmer test is \n  actually much slower than the one using integer arithmetic when using PolyML, and even more so \n  when using the built-in evaluator in Isabelle (which also uses PolyML with a slightly different \n  setup).\n\n  I do not quite know why this is the case, but it is likely because of inefficient implementations\n  of bit arithmetic operations in PolyML and/or the code generator setup for it.\n\n  When running with GHC, the bit-arithmetic version is \\<^emph>\\<open>much\\<close> faster.\n\\<close>"], ["", "value \"filter mersenne_prime [0..<100]\""], ["", "lemma \"prime (2 ^ 521 - 1 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (2 ^ 521 - 1)", "by (subst lucas_lehmer_correct') eval"], ["", "lemma \"prime (2 ^ 4253 - 1 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (2 ^ 4253 - 1)", "by (subst lucas_lehmer_correct') eval"], ["", "end"]]}