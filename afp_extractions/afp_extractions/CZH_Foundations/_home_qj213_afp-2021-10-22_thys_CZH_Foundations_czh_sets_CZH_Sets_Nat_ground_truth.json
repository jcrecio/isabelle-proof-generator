{"file_name": "/home/qj213/afp-2021-10-22/thys/CZH_Foundations/czh_sets/CZH_Sets_Nat.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CZH_Foundations", "problem_names": ["lemma ord_of_nat_plus[nat_omega_simps]: \"a\\<^sub>\\<nat> + b\\<^sub>\\<nat> = (a + b)\\<^sub>\\<nat>\"", "lemma ord_of_nat_times[nat_omega_simps]: \"a\\<^sub>\\<nat> * b\\<^sub>\\<nat> = (a * b)\\<^sub>\\<nat>\"", "lemma ord_of_nat_succ[nat_omega_simps]: \"succ (a\\<^sub>\\<nat>) = (Suc a)\\<^sub>\\<nat>\"", "lemmas [nat_omega_simps] = nat_cadd_eq_add", "lemma ord_of_nat_csucc[nat_omega_simps]: \"csucc (a\\<^sub>\\<nat>) = succ (a\\<^sub>\\<nat>)\"", "lemma ord_of_nat_succ_vempty[nat_omega_simps]: \"succ 0 = 1\\<^sub>\\<nat>\"", "lemma ord_of_nat_vone[nat_omega_simps]: \"1 = 1\\<^sub>\\<nat>\"", "lemma cr_omega_right_total[transfer_rule]: \"right_total cr_omega\"", "lemma cr_omega_bi_unqie[transfer_rule]: \"bi_unique cr_omega\"", "lemma omega_transfer_domain_rule[transfer_domain_rule]: \n  \"Domainp cr_omega = (\\<lambda>x. x \\<in>\\<^sub>\\<circ> \\<omega>)\"", "lemma omega_transfer[transfer_rule]: \n  \"(rel_set cr_omega) (elts \\<omega>) (UNIV::nat set)\"", "lemma omega_of_real_transfer[transfer_rule]: \"cr_omega (ord_of_nat a) a\"", "lemma omega_succ_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega) succ Suc\"", "lemma omega_plus_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega ===> cr_omega) (+) (+)\"", "lemma omega_mult_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega ===> cr_omega) (*) (*)\"", "lemma ord_of_nat_card_transfer[transfer_rule]:\n  includes lifting_syntax\n  shows \"(rel_set (=) ===> cr_omega) (\\<lambda>x. ord_of_nat (card x)) card\"", "lemma ord_of_nat_vempty: \"0 = 0\\<^sub>\\<nat>\"", "lemma set_vzero_eq_ord_of_nat_vone: \"set {0} = 1\\<^sub>\\<nat>\"", "lemma vone_in_omega[simp]: \"1 \\<in>\\<^sub>\\<circ> \\<omega>\"", "lemma nat_of_omega:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" \n  obtains m where \"n = m\\<^sub>\\<nat>\"", "lemma omega_prev:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"0 \\<in>\\<^sub>\\<circ> n\"\n  obtains k where \"n = succ k\"", "lemma omega_vplus_commutative:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<omega>\" and \"b \\<in>\\<^sub>\\<circ> \\<omega>\" \n  shows \"a + b = b + a\"", "lemma omega_vinetrsection[intro]:\n  assumes \"m \\<in>\\<^sub>\\<circ> \\<omega>\" and \"n \\<in>\\<^sub>\\<circ> \\<omega>\"\n  shows \"m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>\"", "lemma omega_induct_all[consumes 1, case_names step]:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"\\<And>x. \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<omega>; \\<And>y. y \\<in>\\<^sub>\\<circ> x \\<Longrightarrow> P y\\<rbrakk> \\<Longrightarrow> P x\" \n  shows \"P n\"", "lemma omega_induct[consumes 1, case_names 0 succ]:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"P 0\" and \"\\<And>n. \\<lbrakk> n \\<in>\\<^sub>\\<circ> \\<omega>; P n \\<rbrakk> \\<Longrightarrow> P (succ n)\" \n  shows \"P n\"", "lemma in_succE:\n  assumes \"a \\<in>\\<^sub>\\<circ> succ n\" and \"\\<And>a. a \\<in>\\<^sub>\\<circ> n \\<Longrightarrow> P a\" and \"P n\"\n  shows \"P a\"", "lemma two: \"2\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>}\"", "lemma three: \"3\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>}\"", "lemma four: \"4\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>, 3\\<^sub>\\<nat>}\"", "lemma two_vdiff_zero[simp]: \"set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {0} = set {1\\<^sub>\\<nat>}\"", "lemma two_vdiff_one[simp]: \"set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {1\\<^sub>\\<nat>} = set {0}\""], "translations": [["", "lemma ord_of_nat_plus[nat_omega_simps]: \"a\\<^sub>\\<nat> + b\\<^sub>\\<nat> = (a + b)\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>\\<nat> + b\\<^sub>\\<nat> = (a + b)\\<^sub>\\<nat>", "by (induct b) (simp_all add: plus_V_succ_right)"], ["", "lemma ord_of_nat_times[nat_omega_simps]: \"a\\<^sub>\\<nat> * b\\<^sub>\\<nat> = (a * b)\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>\\<nat> * b\\<^sub>\\<nat> = (a * b)\\<^sub>\\<nat>", "by (induct b) (simp_all add: mult_succ nat_omega_simps)"], ["", "lemma ord_of_nat_succ[nat_omega_simps]: \"succ (a\\<^sub>\\<nat>) = (Suc a)\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ (a\\<^sub>\\<nat>) = Suc a\\<^sub>\\<nat>", "by auto"], ["", "lemmas [nat_omega_simps] = nat_cadd_eq_add"], ["", "lemma ord_of_nat_csucc[nat_omega_simps]: \"csucc (a\\<^sub>\\<nat>) = succ (a\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. csucc (a\\<^sub>\\<nat>) = ZFC_in_HOL.succ (a\\<^sub>\\<nat>)", "using finite_csucc"], ["proof (prove)\nusing this:\n  ?a \\<in>\\<^sub>\\<circ> \\<omega> \\<Longrightarrow>\n  csucc ?a = ZFC_in_HOL.succ ?a\n\ngoal (1 subgoal):\n 1. csucc (a\\<^sub>\\<nat>) = ZFC_in_HOL.succ (a\\<^sub>\\<nat>)", "by blast"], ["", "lemma ord_of_nat_succ_vempty[nat_omega_simps]: \"succ 0 = 1\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ 0 = 1\\<^sub>\\<nat>", "by auto"], ["", "lemma ord_of_nat_vone[nat_omega_simps]: \"1 = 1\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = 1\\<^sub>\\<nat>", "by auto"], ["", "subsubsection\\<open>Transfer\\<close>"], ["", "definition cr_omega :: \"V \\<Rightarrow> nat \\<Rightarrow> bool\"\n  where \"cr_omega a b \\<longleftrightarrow> (a = ord_of_nat b)\""], ["", "text\\<open>Transfer setup.\\<close>"], ["", "lemma cr_omega_right_total[transfer_rule]: \"right_total cr_omega\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_total cr_omega", "unfolding cr_omega_def right_total_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. \\<exists>x. x = y\\<^sub>\\<nat>", "by simp"], ["", "lemma cr_omega_bi_unqie[transfer_rule]: \"bi_unique cr_omega\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bi_unique cr_omega", "unfolding cr_omega_def bi_unique_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y z.\n        x = y\\<^sub>\\<nat> \\<longrightarrow>\n        x = z\\<^sub>\\<nat> \\<longrightarrow> y = z) \\<and>\n    (\\<forall>x y z.\n        x = z\\<^sub>\\<nat> \\<longrightarrow>\n        y = z\\<^sub>\\<nat> \\<longrightarrow> x = y)", "by (simp add: inj_eq inj_ord_of_nat)"], ["", "lemma omega_transfer_domain_rule[transfer_domain_rule]: \n  \"Domainp cr_omega = (\\<lambda>x. x \\<in>\\<^sub>\\<circ> \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp cr_omega = (\\<lambda>x. x \\<in>\\<^sub>\\<circ> \\<omega>)", "unfolding cr_omega_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp (\\<lambda>a b. a = b\\<^sub>\\<nat>) =\n    (\\<lambda>x. x \\<in>\\<^sub>\\<circ> \\<omega>)", "by (auto simp: elts_\\<omega>)"], ["", "lemma omega_transfer[transfer_rule]: \n  \"(rel_set cr_omega) (elts \\<omega>) (UNIV::nat set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set cr_omega (elts \\<omega>) UNIV", "unfolding cr_omega_def rel_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>elts \\<omega>.\n        \\<exists>b\\<in>UNIV. x = b\\<^sub>\\<nat>) \\<and>\n    (\\<forall>y\\<in>UNIV. \\<exists>x\\<in>elts \\<omega>. x = y\\<^sub>\\<nat>)", "by (simp add: elts_\\<omega>)"], ["", "lemma omega_of_real_transfer[transfer_rule]: \"cr_omega (ord_of_nat a) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cr_omega (a\\<^sub>\\<nat>) a", "unfolding cr_omega_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>\\<nat> = a\\<^sub>\\<nat>", "by auto"], ["", "text\\<open>Operations.\\<close>"], ["", "lemma omega_succ_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega) succ Suc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr_omega ===> cr_omega) ZFC_in_HOL.succ Suc", "proof(intro rel_funI, unfold cr_omega_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x = y\\<^sub>\\<nat> \\<Longrightarrow>\n       ZFC_in_HOL.succ x = Suc y\\<^sub>\\<nat>", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x = y\\<^sub>\\<nat> \\<Longrightarrow>\n       ZFC_in_HOL.succ x = Suc y\\<^sub>\\<nat>", "assume prems: \"x = y\\<^sub>\\<nat>\""], ["proof (state)\nthis:\n  x = y\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x = y\\<^sub>\\<nat> \\<Longrightarrow>\n       ZFC_in_HOL.succ x = Suc y\\<^sub>\\<nat>", "show \"succ x = Suc y\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ x = Suc y\\<^sub>\\<nat>", "unfolding prems ord_of_nat_succ[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.succ (y\\<^sub>\\<nat>) = ZFC_in_HOL.succ (y\\<^sub>\\<nat>)", ".."], ["proof (state)\nthis:\n  ZFC_in_HOL.succ x = Suc y\\<^sub>\\<nat>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma omega_plus_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega ===> cr_omega) (+) (+)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr_omega ===> cr_omega ===> cr_omega) (+) (+)", "by (intro rel_funI, unfold cr_omega_def) (simp add: nat_omega_simps)"], ["", "lemma omega_mult_transfer[transfer_rule]: \n  includes lifting_syntax\n  shows \"(cr_omega ===> cr_omega ===> cr_omega) (*) (*)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cr_omega ===> cr_omega ===> cr_omega) (*) (*)", "by (intro rel_funI, unfold cr_omega_def) (simp add: nat_omega_simps)"], ["", "lemma ord_of_nat_card_transfer[transfer_rule]:\n  includes lifting_syntax\n  shows \"(rel_set (=) ===> cr_omega) (\\<lambda>x. ord_of_nat (card x)) card\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set (=) ===> cr_omega) (\\<lambda>x. card x\\<^sub>\\<nat>) card", "by (intro rel_funI) (simp add: cr_omega_def rel_set_eq)"], ["", "subsection\\<open>Elementary results\\<close>"], ["", "lemma ord_of_nat_vempty: \"0 = 0\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0\\<^sub>\\<nat>", "by auto"], ["", "lemma set_vzero_eq_ord_of_nat_vone: \"set {0} = 1\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set {0} = 1\\<^sub>\\<nat>", "by (metis elts_1 set_of_elts ord_of_nat_vone)"], ["", "lemma vone_in_omega[simp]: \"1 \\<in>\\<^sub>\\<circ> \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in>\\<^sub>\\<circ> \\<omega>", "unfolding \\<omega>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<in>\\<^sub>\\<circ> set (range ord_of_nat)", "by force"], ["", "lemma nat_of_omega:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" \n  obtains m where \"n = m\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. n = m\\<^sub>\\<nat> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  n \\<in>\\<^sub>\\<circ> \\<omega>\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = m\\<^sub>\\<nat> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<omega>_def"], ["proof (prove)\nusing this:\n  n \\<in>\\<^sub>\\<circ> set (range ord_of_nat)\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = m\\<^sub>\\<nat> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["", "lemma omega_prev:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"0 \\<in>\\<^sub>\\<circ> n\"\n  obtains k where \"n = succ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        n = ZFC_in_HOL.succ k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        n = ZFC_in_HOL.succ k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms nat_of_omega"], ["proof (chain)\npicking this:\n  n \\<in>\\<^sub>\\<circ> \\<omega>\n  0 \\<in>\\<^sub>\\<circ> n\n  \\<lbrakk>?n \\<in>\\<^sub>\\<circ> \\<omega>;\n   \\<And>m. ?n = m\\<^sub>\\<nat> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain m where \"n = m\\<^sub>\\<nat>\""], ["proof (prove)\nusing this:\n  n \\<in>\\<^sub>\\<circ> \\<omega>\n  0 \\<in>\\<^sub>\\<circ> n\n  \\<lbrakk>?n \\<in>\\<^sub>\\<circ> \\<omega>;\n   \\<And>m. ?n = m\\<^sub>\\<nat> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = m\\<^sub>\\<nat> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n = m\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        n = ZFC_in_HOL.succ k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms(2)"], ["proof (chain)\npicking this:\n  0 \\<in>\\<^sub>\\<circ> n\n  n = m\\<^sub>\\<nat>", "obtain m' where \"m = Suc m'\""], ["proof (prove)\nusing this:\n  0 \\<in>\\<^sub>\\<circ> n\n  n = m\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. (\\<And>m'. m = Suc m' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding less_V_def"], ["proof (prove)\nusing this:\n  0 \\<in>\\<^sub>\\<circ> n\n  n = m\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. (\\<And>m'. m = Suc m' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: gr0_implies_Suc)"], ["proof (state)\nthis:\n  m = Suc m'\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        n = ZFC_in_HOL.succ k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  n = ZFC_in_HOL.succ ?k \\<Longrightarrow> thesis\n  m = Suc m'", "show ?thesis"], ["proof (prove)\nusing this:\n  n = ZFC_in_HOL.succ ?k \\<Longrightarrow> thesis\n  m = Suc m'\n\ngoal (1 subgoal):\n 1. thesis", "unfolding \\<open>n = m\\<^sub>\\<nat>\\<close>"], ["proof (prove)\nusing this:\n  m\\<^sub>\\<nat> = ZFC_in_HOL.succ ?k \\<Longrightarrow> thesis\n  m = Suc m'\n\ngoal (1 subgoal):\n 1. thesis", "using ord_of_nat.simps(2)"], ["proof (prove)\nusing this:\n  m\\<^sub>\\<nat> = ZFC_in_HOL.succ ?k \\<Longrightarrow> thesis\n  m = Suc m'\n  Suc ?n\\<^sub>\\<nat> = ZFC_in_HOL.succ (?n\\<^sub>\\<nat>)\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma omega_vplus_commutative:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<omega>\" and \"b \\<in>\\<^sub>\\<circ> \\<omega>\" \n  shows \"a + b = b + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + b = b + a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<omega>\n  b \\<in>\\<^sub>\\<circ> \\<omega>\n\ngoal (1 subgoal):\n 1. a + b = b + a", "by (metis Groups.add_ac(2) nat_of_omega ord_of_nat_plus)"], ["", "lemma omega_vinetrsection[intro]:\n  assumes \"m \\<in>\\<^sub>\\<circ> \\<omega>\" and \"n \\<in>\\<^sub>\\<circ> \\<omega>\"\n  shows \"m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>", "from nat_into_Ord[OF assms(1)] nat_into_Ord[OF assms(2)] Ord_linear_le"], ["proof (chain)\npicking this:\n  Ord m\n  Ord n\n  \\<lbrakk>Ord ?k; Ord ?l;\n   ?k \\<subseteq>\\<^sub>\\<circ> ?l \\<Longrightarrow> ?thesis;\n   ?l \\<subseteq>\\<^sub>\\<circ> ?k \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "consider \"m \\<subseteq>\\<^sub>\\<circ> n\" | \"n \\<subseteq>\\<^sub>\\<circ> m\""], ["proof (prove)\nusing this:\n  Ord m\n  Ord n\n  \\<lbrakk>Ord ?k; Ord ?l;\n   ?k \\<subseteq>\\<^sub>\\<circ> ?l \\<Longrightarrow> ?thesis;\n   ?l \\<subseteq>\\<^sub>\\<circ> ?k \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<subseteq>\\<^sub>\\<circ> n \\<Longrightarrow> thesis;\n     n \\<subseteq>\\<^sub>\\<circ> m \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>m \\<subseteq>\\<^sub>\\<circ> n \\<Longrightarrow> ?thesis;\n   n \\<subseteq>\\<^sub>\\<circ> m \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>m \\<subseteq>\\<^sub>\\<circ> n \\<Longrightarrow> ?thesis;\n   n \\<subseteq>\\<^sub>\\<circ> m \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>m \\<subseteq>\\<^sub>\\<circ> n \\<Longrightarrow> ?thesis;\n   n \\<subseteq>\\<^sub>\\<circ> m \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>", "by cases (simp_all add: assms inf.absorb1 inf.absorb2)"], ["proof (state)\nthis:\n  m \\<inter>\\<^sub>\\<circ> n \\<in>\\<^sub>\\<circ> \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Induction\\<close>"], ["", "lemma omega_induct_all[consumes 1, case_names step]:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"\\<And>x. \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<omega>; \\<And>y. y \\<in>\\<^sub>\\<circ> x \\<Longrightarrow> P y\\<rbrakk> \\<Longrightarrow> P x\" \n  shows \"P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n", "using assms"], ["proof (prove)\nusing this:\n  n \\<in>\\<^sub>\\<circ> \\<omega>\n  \\<lbrakk>?x \\<in>\\<^sub>\\<circ> \\<omega>;\n   \\<And>y. y \\<in>\\<^sub>\\<circ> ?x \\<Longrightarrow> P y\\<rbrakk>\n  \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. P n", "by (metis Ord_\\<omega> Ord_induct Ord_linear Ord_trans nat_into_Ord)"], ["", "lemma omega_induct[consumes 1, case_names 0 succ]:\n  assumes \"n \\<in>\\<^sub>\\<circ> \\<omega>\" and \"P 0\" and \"\\<And>n. \\<lbrakk> n \\<in>\\<^sub>\\<circ> \\<omega>; P n \\<rbrakk> \\<Longrightarrow> P (succ n)\" \n  shows \"P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n", "using assms(1,3)"], ["proof (prove)\nusing this:\n  n \\<in>\\<^sub>\\<circ> \\<omega>\n  \\<lbrakk>?n \\<in>\\<^sub>\\<circ> \\<omega>; P ?n\\<rbrakk>\n  \\<Longrightarrow> P (ZFC_in_HOL.succ ?n)\n\ngoal (1 subgoal):\n 1. P n", "proof(induct rule: omega_induct_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<omega>;\n        \\<And>y.\n           \\<lbrakk>y \\<in>\\<^sub>\\<circ> x;\n            \\<And>n.\n               \\<lbrakk>n \\<in>\\<^sub>\\<circ> \\<omega>; P n\\<rbrakk>\n               \\<Longrightarrow> P (ZFC_in_HOL.succ n)\\<rbrakk>\n           \\<Longrightarrow> P y;\n        \\<And>n.\n           \\<lbrakk>n \\<in>\\<^sub>\\<circ> \\<omega>; P n\\<rbrakk>\n           \\<Longrightarrow> P (ZFC_in_HOL.succ n)\\<rbrakk>\n       \\<Longrightarrow> P x", "case (step x)"], ["proof (state)\nthis:\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  \\<lbrakk>?y \\<in>\\<^sub>\\<circ> x;\n   \\<And>n.\n      \\<lbrakk>n \\<in>\\<^sub>\\<circ> \\<omega>; P n\\<rbrakk>\n      \\<Longrightarrow> P (ZFC_in_HOL.succ n)\\<rbrakk>\n  \\<Longrightarrow> P ?y\n  \\<lbrakk>?n \\<in>\\<^sub>\\<circ> \\<omega>; P ?n\\<rbrakk>\n  \\<Longrightarrow> P (ZFC_in_HOL.succ ?n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<omega>;\n        \\<And>y.\n           \\<lbrakk>y \\<in>\\<^sub>\\<circ> x;\n            \\<And>n.\n               \\<lbrakk>n \\<in>\\<^sub>\\<circ> \\<omega>; P n\\<rbrakk>\n               \\<Longrightarrow> P (ZFC_in_HOL.succ n)\\<rbrakk>\n           \\<Longrightarrow> P y;\n        \\<And>n.\n           \\<lbrakk>n \\<in>\\<^sub>\\<circ> \\<omega>; P n\\<rbrakk>\n           \\<Longrightarrow> P (ZFC_in_HOL.succ n)\\<rbrakk>\n       \\<Longrightarrow> P x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "proof(cases \\<open>x = 0\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> P x\n 2. x \\<noteq> 0 \\<Longrightarrow> P x", "case True"], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> P x\n 2. x \\<noteq> 0 \\<Longrightarrow> P x", "with assms(2)"], ["proof (chain)\npicking this:\n  P 0\n  x = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  P 0\n  x = 0\n\ngoal (1 subgoal):\n 1. P x", "by simp"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "with step(1)"], ["proof (chain)\npicking this:\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  x \\<noteq> 0", "have \"0 \\<in>\\<^sub>\\<circ> x\""], ["proof (prove)\nusing this:\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<in>\\<^sub>\\<circ> x", "by (simp add: mem_0_Ord)"], ["proof (state)\nthis:\n  0 \\<in>\\<^sub>\\<circ> x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "with \\<open>x \\<in>\\<^sub>\\<circ> \\<omega>\\<close>"], ["proof (chain)\npicking this:\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  0 \\<in>\\<^sub>\\<circ> x", "obtain y where x_def: \"x = succ y\""], ["proof (prove)\nusing this:\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  0 \\<in>\\<^sub>\\<circ> x\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        x = ZFC_in_HOL.succ y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim omega_prev)"], ["proof (state)\nthis:\n  x = ZFC_in_HOL.succ y\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "with elts_succ step.hyps(1)"], ["proof (chain)\npicking this:\n  elts (ZFC_in_HOL.succ ?x) = insert ?x (elts ?x)\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  x = ZFC_in_HOL.succ y", "have \"y \\<in>\\<^sub>\\<circ> \\<omega>\""], ["proof (prove)\nusing this:\n  elts (ZFC_in_HOL.succ ?x) = insert ?x (elts ?x)\n  x \\<in>\\<^sub>\\<circ> \\<omega>\n  x = ZFC_in_HOL.succ y\n\ngoal (1 subgoal):\n 1. y \\<in>\\<^sub>\\<circ> \\<omega>", "by (blast intro: Ord_trans)"], ["proof (state)\nthis:\n  y \\<in>\\<^sub>\\<circ> \\<omega>\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "have \"y \\<in>\\<^sub>\\<circ> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in>\\<^sub>\\<circ> x", "by (simp add: \\<open>x = succ y\\<close>)"], ["proof (state)\nthis:\n  y \\<in>\\<^sub>\\<circ> x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "have \"P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P y", "by (auto intro: step.prems step.hyps(2)[OF \\<open>y \\<in>\\<^sub>\\<circ> x\\<close>])"], ["proof (state)\nthis:\n  P y\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> P x", "from step.prems[OF \\<open>y \\<in>\\<^sub>\\<circ> \\<omega>\\<close> \\<open>P y\\<close>, folded x_def]"], ["proof (chain)\npicking this:\n  P x", "show \"P x\""], ["proof (prove)\nusing this:\n  P x\n\ngoal (1 subgoal):\n 1. P x", "."], ["proof (state)\nthis:\n  P x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Methods\\<close>"], ["", "text\\<open>\nThe following methods provide an infrastructure for working with goals of the \nform \\<open>a \\<in>\\<^sub>\\<circ> n\\<^sub>\\<nat> \\<Longrightarrow> P a\\<close>.\n\\<close>"], ["", "lemma in_succE:\n  assumes \"a \\<in>\\<^sub>\\<circ> succ n\" and \"\\<And>a. a \\<in>\\<^sub>\\<circ> n \\<Longrightarrow> P a\" and \"P n\"\n  shows \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> ZFC_in_HOL.succ n\n  ?a \\<in>\\<^sub>\\<circ> n \\<Longrightarrow> P ?a\n  P n\n\ngoal (1 subgoal):\n 1. P a", "by auto"], ["", "method Suc_of_numeral =\n  (\n    unfold numeral.simps add.assoc,\n    use nothing in \\<open>unfold Suc_eq_plus1_left[symmetric], unfold One_nat_def\\<close>\n  )"], ["", "method succ_of_numeral = \n  (\n    Suc_of_numeral, \n    use nothing in \\<open>unfold ord_of_nat_succ[symmetric] ord_of_nat_zero\\<close>\n  )"], ["", "method numeral_of_succ =\n  (\n    unfold nat_omega_simps, \n    use nothing in \n      \\<open>\n        unfold numeral.simps[symmetric] Suc_numeral add_num_simps,\n        (unfold numerals(1))?\n      \\<close>\n  )"], ["", "method elim_in_succ =\n  (\n    (\n      elim in_succE; \n      use nothing in \\<open>(unfold triv_forall_equality)?; (numeral_of_succ)?\\<close>\n    ), \n    simp\n  )"], ["", "method elim_in_numeral = (succ_of_numeral, use nothing in \\<open>elim_in_succ\\<close>)"], ["", "subsection\\<open>Auxiliary\\<close>"], ["", "lemma two: \"2\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>}", "by force"], ["", "lemma three: \"3\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>}", "by force"], ["", "lemma four: \"4\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>, 3\\<^sub>\\<nat>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4\\<^sub>\\<nat> = set {0, 1\\<^sub>\\<nat>, 2\\<^sub>\\<nat>, 3\\<^sub>\\<nat>}", "by force"], ["", "lemma two_vdiff_zero[simp]: \"set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {0} = set {1\\<^sub>\\<nat>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {0} = set {1\\<^sub>\\<nat>}", "by auto"], ["", "lemma two_vdiff_one[simp]: \"set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {1\\<^sub>\\<nat>} = set {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set {0, 1\\<^sub>\\<nat>} -\\<^sub>\\<circ> set {1\\<^sub>\\<nat>} = set {0}", "by auto"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}