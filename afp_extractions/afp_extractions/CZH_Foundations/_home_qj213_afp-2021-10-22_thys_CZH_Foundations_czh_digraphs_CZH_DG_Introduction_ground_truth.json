{"file_name": "/home/qj213/afp-2021-10-22/thys/CZH_Foundations/czh_digraphs/CZH_DG_Introduction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CZH_Foundations", "problem_names": ["lemma (in semilattice_sup) sup_commute':\n  shows \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b = b' \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<squnion> b = b' \\<squnion> a\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<squnion> b' = b \\<squnion> a\"", "lemma (in semilattice_inf) inf_commute':\n  shows \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b = b' \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<sqinter> b = b' \\<sqinter> a\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<sqinter> b' = b \\<sqinter> a\"", "lemmas [V_cs_simps] =\n  if_P \n  if_not_P\n  inf.absorb1\n  inf.absorb2\n  sup.absorb1\n  sup.absorb2\n  add_0_right \n  add_0", "lemmas [V_cs_intros] = \n  sup_commute' \n  inf_commute' \n  sup.commute\n  inf.commute", "lemma if3_0[V_cs_simps]: \"if3 a b c 0 = a\"", "lemma if3_1[V_cs_simps]: \"if3 a b c (1\\<^sub>\\<nat>) = b\"", "lemma if3_2[V_cs_simps]: \"if3 a b c (2\\<^sub>\\<nat>) = c\"", "lemma vinsertI1':\n  assumes \"x' = x\"\n  shows \"x \\<in>\\<^sub>\\<circ> vinsert x' A\"", "lemma in_vsingleton[V_cs_intros]:\n  assumes \"f = a\"\n  shows \"f \\<in>\\<^sub>\\<circ> set {a}\"", "lemma a_in_succ_a: \"a \\<in>\\<^sub>\\<circ> succ a\"", "lemma a_in_succ_xI:\n  assumes \"a \\<in>\\<^sub>\\<circ> x\"\n  shows \"a \\<in>\\<^sub>\\<circ> succ x\"", "lemma vone_ne[V_cs_intros]: \"1\\<^sub>\\<nat> \\<noteq> 0\"", "lemmas [V_cs_simps] =\n  vinsert_set_insert_eq\n  beta \n  set_empty\n  vcard_0", "lemmas [V_cs_intros] = \n  mem_not_refl \n  succ_notin_self\n  vset_neq_1  \n  vset_neq_2 \n  nin_vinsertI\n  vinsertI1'\n  vinsertI2\n  vfinite_vinsert\n  vfinite_vsingleton\n  vdisjnt_nin_right\n  vdisjnt_nin_left\n  vunionI1 \n  vunionI2\n  vunion_in_VsetI\n  vintersection_in_VsetI\n  vsubset_reflexive\n  vsingletonI\n  small_insert small_empty\n  Limit_vtimes_in_VsetI \n  Limit_VPow_in_VsetI\n  a_in_succ_a\n  vsubset_vempty", "lemma vtimesI'[V_cs_intros]:\n  assumes \"ab = \\<langle>a, b\\<rangle>\" and \"a \\<in>\\<^sub>\\<circ> A\" and \"b \\<in>\\<^sub>\\<circ> B\" \n  shows \"ab \\<in>\\<^sub>\\<circ> A \\<times>\\<^sub>\\<circ> B\"", "lemma vrange_vcomp_vsubset[V_cs_intros]:\n  assumes \"\\<R>\\<^sub>\\<circ> r \\<subseteq>\\<^sub>\\<circ> B\"\n  shows \"\\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) \\<subseteq>\\<^sub>\\<circ> B\"", "lemma vrange_vconst_on_vsubset[V_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> R\"\n  shows \"\\<R>\\<^sub>\\<circ> (vconst_on A a) \\<subseteq>\\<^sub>\\<circ> R\"", "lemma vrange_vcomp_eq_vrange[V_cs_simps]:\n  assumes \"\\<D>\\<^sub>\\<circ> r = \\<R>\\<^sub>\\<circ> s\"\n  shows \"\\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) = \\<R>\\<^sub>\\<circ> r\"", "lemmas [V_cs_simps] =\n  vdomain_vsingleton\n  vdomain_vlrestriction\n  vdomain_vcomp_vsubset\n  vdomain_vconverse\n  vrange_vconverse\n  vdomain_vconst_on\n  vconverse_vtimes\n  vdomain_VLambda", "lemmas (in vsv) [V_cs_intros] = vsv_axioms", "lemma vpair_app:\n  assumes \"j = a\"\n  shows \"set {\\<langle>a, b\\<rangle>}\\<lparr>j\\<rparr> = b\"", "lemmas [V_cs_simps] =\n  vpair_app\n  vsv.vlrestriction_app\n  vsv_vcomp_at", "lemmas (in vsv) [V_cs_intros] = vsv_vimageI2'", "lemmas [V_cs_intros] =\n  vsv_vsingleton\n  vsv.vsv_vimageI2'\n  vsv_vcomp", "lemmas (in v11) [V_cs_intros] = v11_axioms", "lemma (in v11) v11_vconverse_app_in_vdomain':\n  assumes \"y \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> r\" and \"A = \\<D>\\<^sub>\\<circ> r\"\n  shows \"r\\<inverse>\\<^sub>\\<circ>\\<lparr>y\\<rparr> \\<in>\\<^sub>\\<circ> A\"", "lemmas (in v11) [V_cs_intros] = v11_vconverse_app_in_vdomain'", "lemmas [V_cs_intros] = v11.v11_vconverse_app_in_vdomain'", "lemmas (in v11) [V_cs_simps] = (*only in the context of v11*)\n  v11_app_if_vconverse_app[rotated -2]\n  v11_app_vconverse_app \n  v11_vconverse_app_app", "lemmas [V_cs_simps] = \n  v11.v11_vconverse_app[rotated -1]\n  v11.v11_app_vconverse_app \n  v11.v11_vconverse_app_app", "lemmas [V_cs_intros] =\n  v11D(1)\n  v11.v11_vconverse\n  v11_vcomp", "lemmas [V_cs_simps] = \n  vprojection_app \n  vprojection_vdomain", "lemmas [V_cs_intros] = vprojection_vsv", "lemmas (in vfsequence) [V_cs_intros] = vfsequence_axioms", "lemmas (in vfsequence) [V_cs_simps] = vfsequence_vdomain", "lemmas [V_cs_simps] = vfsequence.vfsequence_vdomain", "lemmas [V_cs_intros] = \n  vfsequence.vfsequence_vcons\n  vfsequence_vempty", "lemmas [V_cs_simps] = \n  vfinite_0_left \n  vfinite_0_right", "lemmas [V_cs_simps] = \n  fconverse_vunion\n  fconverse_ftimes\n  vdomain_fflip", "lemmas [Ord_cs_intros] = \n  Limit_right_Limit_mult\n  Limit_left_Limit_mult\n  Ord_succ_mono\n  Limit_plus_omega_vsubset_Limit\n  Limit_plus_nat_in_Limit", "lemma (in \\<Z>) omega_in_any[V_cs_intros]:\n  assumes \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<omega> \\<in>\\<^sub>\\<circ> \\<beta>\"", "lemma Ord_vsubset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"Ord \\<beta>\" and \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> succ \\<beta>\"", "lemma Ord_in_Vset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"a \\<in>\\<^sub>\\<circ> Vset (succ \\<alpha>)\"", "lemma Ord_vsubset_Vset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"B \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"B \\<subseteq>\\<^sub>\\<circ> Vset (succ \\<alpha>)\"", "lemmas (in \\<Z>) [V_cs_intros] = \n  omega_in_\\<alpha>\n  Ord_\\<alpha>\n  Limit_\\<alpha>", "lemmas [V_cs_intros] =\n  vempty_in_Vset_succ\n  \\<Z>.ord_of_nat_in_Vset\n  Vset_in_mono\n  Limit_vpair_in_VsetI\n  Vset_vsubset_mono \n  Ord_succ\n  Limit_vempty_in_VsetI\n  Limit_insert_in_VsetI\n  vfsequence.vfsequence_Limit_vcons_in_VsetI\n  vfsequence.vfsequence_Ord_vcons_in_Vset_succI\n  Limit_vdoubleton_in_VsetI\n  Limit_omega_in_VsetI\n  Limit_ftimes_in_VsetI", "lemmas [V_cs_simps] =\n  fflip_app\n  vdomain_fflip", "lemmas [nat_omega_simps_extra] = \n  add_num_simps \n  Suc_numeral \n  Suc_1 \n  le_num_simps\n  less_numeral_simps(1,2)\n  less_num_simps \n  less_one\n  nat_omega_simps", "lemmas [omega_of_set] = nat_omega_simps_extra", "lemma set_insert_succ[omega_of_set]:\n  assumes [simp]: \"small b\" and \"set b = a\\<^sub>\\<nat>\"\n  shows \"set (insert (a\\<^sub>\\<nat>) b) = succ (a\\<^sub>\\<nat>)\"", "lemma set_0[omega_of_set]: \"set {0} = succ 0\"", "lemmas [vfsequence_simps] =\n  vfsequence.vfsequence_at_last[rotated]\n  vfsequence.vfsequence_vcard_vcons[rotated]\n  vfsequence.vfsequence_at_not_last[rotated]", "lemmas [vfsequence_intros] = \n  vfsequence.vfsequence_vcons\n  vfsequence_vempty", "lemma [nat_omega_intros]:\n  assumes \"a < b\"\n  shows \"a\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>\"", "lemma [nat_omega_intros]: \n  assumes \"0 < b\"\n  shows \"0 \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>\"", "lemma [nat_omega_intros]:\n  assumes \"a = numeral b\"\n  shows \"(0::nat) < a\"", "lemma nat_le_if_in[nat_omega_intros]:\n  assumes \"x\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> y\\<^sub>\\<nat>\"\n  shows \"x\\<^sub>\\<nat> \\<le> y\\<^sub>\\<nat>\"", "lemma vempty_le_nat[nat_omega_intros]: \"0 \\<le> y\\<^sub>\\<nat>\"", "lemmas [nat_omega_intros] = \n  preorder_class.order_refl\n  preorder_class.eq_refl", "lemma (in \\<Z>) \\<Z>_\\<beta>:\n  assumes \"\\<beta> = \\<alpha>\"\n  shows \"\\<Z> \\<beta>\"", "lemmas (in \\<Z>) [dg_cs_intros] = \\<Z>_\\<beta>"], "translations": [["", "lemma (in semilattice_sup) sup_commute':\n  shows \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b = b' \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<squnion> b = b' \\<squnion> a\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<squnion> b' = b \\<squnion> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>b' = b; a' = a\\<rbrakk>\n      \\<Longrightarrow> a \\<squnion> b = b' \\<squnion> a') &&&\n     (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n      \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a')) &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a' \\<squnion> b = b' \\<squnion> a) &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a \\<squnion> b' = b \\<squnion> a') &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a' \\<squnion> b' = b \\<squnion> a)", "by (auto simp: sup.commute)"], ["", "lemma (in semilattice_inf) inf_commute':\n  shows \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b = b' \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<sqinter> b = b' \\<sqinter> a\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a'\"\n    and \"b' = b \\<Longrightarrow> a' = a \\<Longrightarrow> a' \\<sqinter> b' = b \\<sqinter> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lbrakk>b' = b; a' = a\\<rbrakk>\n      \\<Longrightarrow> a \\<sqinter> b = b' \\<sqinter> a') &&&\n     (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n      \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a')) &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a' \\<sqinter> b = b' \\<sqinter> a) &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a \\<sqinter> b' = b \\<sqinter> a') &&&\n    (\\<lbrakk>b' = b; a' = a\\<rbrakk>\n     \\<Longrightarrow> a' \\<sqinter> b' = b \\<sqinter> a)", "by (auto simp: inf.commute)"], ["", "lemmas [V_cs_simps] =\n  if_P \n  if_not_P\n  inf.absorb1\n  inf.absorb2\n  sup.absorb1\n  sup.absorb2\n  add_0_right \n  add_0"], ["", "lemmas [V_cs_intros] = \n  sup_commute' \n  inf_commute' \n  sup.commute\n  inf.commute"], ["", "subsubsection\\<open>Foundations\\<close>"], ["", "abbreviation (input) if3 :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V\"\n  where \"if3 a b c \\<equiv>\n    (\n      \\<lambda>i. if i = 0 \\<Rightarrow> a\n           | i = 1\\<^sub>\\<nat> \\<Rightarrow> b\n           | otherwise \\<Rightarrow> c\n    )\""], ["", "lemma if3_0[V_cs_simps]: \"if3 a b c 0 = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if []\\<^sub>\\<circ> = []\\<^sub>\\<circ> \\<Rightarrow> a \n      | []\\<^sub>\\<circ> = 1\\<^sub>\\<nat> \\<Rightarrow> b \n      | otherwise \\<Rightarrow> c) =\n    a", "by auto"], ["", "lemma if3_1[V_cs_simps]: \"if3 a b c (1\\<^sub>\\<nat>) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 1\\<^sub>\\<nat> = []\\<^sub>\\<circ> \\<Rightarrow> a \n      | 1\\<^sub>\\<nat> = 1\\<^sub>\\<nat> \\<Rightarrow> b \n      | otherwise \\<Rightarrow> c) =\n    b", "by auto"], ["", "lemma if3_2[V_cs_simps]: \"if3 a b c (2\\<^sub>\\<nat>) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 2\\<^sub>\\<nat> = []\\<^sub>\\<circ> \\<Rightarrow> a \n      | 2\\<^sub>\\<nat> = 1\\<^sub>\\<nat> \\<Rightarrow> b \n      | otherwise \\<Rightarrow> c) =\n    c", "by auto"], ["", "lemma vinsertI1':\n  assumes \"x' = x\"\n  shows \"x \\<in>\\<^sub>\\<circ> vinsert x' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>\\<circ> vinsert x' A", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in>\\<^sub>\\<circ> vinsert x A", "by (rule vinsertI1)"], ["", "lemma in_vsingleton[V_cs_intros]:\n  assumes \"f = a\"\n  shows \"f \\<in>\\<^sub>\\<circ> set {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set {a}", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set {a}", "by simp"], ["", "lemma a_in_succ_a: \"a \\<in>\\<^sub>\\<circ> succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> ZFC_in_HOL.succ a", "by simp"], ["", "lemma a_in_succ_xI:\n  assumes \"a \\<in>\\<^sub>\\<circ> x\"\n  shows \"a \\<in>\\<^sub>\\<circ> succ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> ZFC_in_HOL.succ x", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> x\n\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> ZFC_in_HOL.succ x", "by simp"], ["", "lemma vone_ne[V_cs_intros]: \"1\\<^sub>\\<nat> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>\\<nat> \\<noteq> []\\<^sub>\\<circ>", "by clarsimp"], ["", "lemmas [V_cs_simps] =\n  vinsert_set_insert_eq\n  beta \n  set_empty\n  vcard_0"], ["", "lemmas [V_cs_intros] = \n  mem_not_refl \n  succ_notin_self\n  vset_neq_1  \n  vset_neq_2 \n  nin_vinsertI\n  vinsertI1'\n  vinsertI2\n  vfinite_vinsert\n  vfinite_vsingleton\n  vdisjnt_nin_right\n  vdisjnt_nin_left\n  vunionI1 \n  vunionI2\n  vunion_in_VsetI\n  vintersection_in_VsetI\n  vsubset_reflexive\n  vsingletonI\n  small_insert small_empty\n  Limit_vtimes_in_VsetI \n  Limit_VPow_in_VsetI\n  a_in_succ_a\n  vsubset_vempty"], ["", "subsubsection\\<open>Binary relations\\<close>"], ["", "lemma vtimesI'[V_cs_intros]:\n  assumes \"ab = \\<langle>a, b\\<rangle>\" and \"a \\<in>\\<^sub>\\<circ> A\" and \"b \\<in>\\<^sub>\\<circ> B\" \n  shows \"ab \\<in>\\<^sub>\\<circ> A \\<times>\\<^sub>\\<circ> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab \\<in>\\<^sub>\\<circ> A \\<times>\\<^sub>\\<circ> B", "using assms"], ["proof (prove)\nusing this:\n  ab = \\<langle>a, b\\<rangle>\n  a \\<in>\\<^sub>\\<circ> A\n  b \\<in>\\<^sub>\\<circ> B\n\ngoal (1 subgoal):\n 1. ab \\<in>\\<^sub>\\<circ> A \\<times>\\<^sub>\\<circ> B", "by simp"], ["", "lemma vrange_vcomp_vsubset[V_cs_intros]:\n  assumes \"\\<R>\\<^sub>\\<circ> r \\<subseteq>\\<^sub>\\<circ> B\"\n  shows \"\\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) \\<subseteq>\\<^sub>\\<circ> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s)\n    \\<subseteq>\\<^sub>\\<circ> B", "using assms"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>\\<circ> r \\<subseteq>\\<^sub>\\<circ> B\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s)\n    \\<subseteq>\\<^sub>\\<circ> B", "by auto"], ["", "lemma vrange_vconst_on_vsubset[V_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> R\"\n  shows \"\\<R>\\<^sub>\\<circ> (vconst_on A a) \\<subseteq>\\<^sub>\\<circ> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (vconst_on A a) \\<subseteq>\\<^sub>\\<circ> R", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> R\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (vconst_on A a) \\<subseteq>\\<^sub>\\<circ> R", "by auto"], ["", "lemma vrange_vcomp_eq_vrange[V_cs_simps]:\n  assumes \"\\<D>\\<^sub>\\<circ> r = \\<R>\\<^sub>\\<circ> s\"\n  shows \"\\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) = \\<R>\\<^sub>\\<circ> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) = \\<R>\\<^sub>\\<circ> r", "using assms"], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ> r = \\<R>\\<^sub>\\<circ> s\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (r \\<circ>\\<^sub>\\<circ> s) = \\<R>\\<^sub>\\<circ> r", "by (metis vimage_vdomain vrange_vcomp)"], ["", "lemmas [V_cs_simps] =\n  vdomain_vsingleton\n  vdomain_vlrestriction\n  vdomain_vcomp_vsubset\n  vdomain_vconverse\n  vrange_vconverse\n  vdomain_vconst_on\n  vconverse_vtimes\n  vdomain_VLambda"], ["", "subsubsection\\<open>Single-valued functions\\<close>"], ["", "lemmas (in vsv) [V_cs_intros] = vsv_axioms"], ["", "lemma vpair_app:\n  assumes \"j = a\"\n  shows \"set {\\<langle>a, b\\<rangle>}\\<lparr>j\\<rparr> = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<langle>a, b\\<rangle>}\\<lparr>j\\<rparr> = b", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<langle>a, b\\<rangle>}\\<lparr>a\\<rparr> = b", "by simp"], ["", "lemmas [V_cs_simps] =\n  vpair_app\n  vsv.vlrestriction_app\n  vsv_vcomp_at"], ["", "lemmas (in vsv) [V_cs_intros] = vsv_vimageI2'"], ["", "lemmas [V_cs_intros] =\n  vsv_vsingleton\n  vsv.vsv_vimageI2'\n  vsv_vcomp"], ["", "subsubsection\\<open>Injective single-valued functions\\<close>"], ["", "lemmas (in v11) [V_cs_intros] = v11_axioms"], ["", "lemma (in v11) v11_vconverse_app_in_vdomain':\n  assumes \"y \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> r\" and \"A = \\<D>\\<^sub>\\<circ> r\"\n  shows \"r\\<inverse>\\<^sub>\\<circ>\\<lparr>y\\<rparr> \\<in>\\<^sub>\\<circ> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<inverse>\\<^sub>\\<circ>\\<lparr>y\\<rparr> \\<in>\\<^sub>\\<circ> A", "using assms(1)"], ["proof (prove)\nusing this:\n  y \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> r\n\ngoal (1 subgoal):\n 1. r\\<inverse>\\<^sub>\\<circ>\\<lparr>y\\<rparr> \\<in>\\<^sub>\\<circ> A", "unfolding assms(2)"], ["proof (prove)\nusing this:\n  y \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> r\n\ngoal (1 subgoal):\n 1. r\\<inverse>\\<^sub>\\<circ>\\<lparr>y\\<rparr>\n    \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> r", "by (rule v11_vconverse_app_in_vdomain)"], ["", "lemmas (in v11) [V_cs_intros] = v11_vconverse_app_in_vdomain'"], ["", "lemmas [V_cs_intros] = v11.v11_vconverse_app_in_vdomain'"], ["", "lemmas (in v11) [V_cs_simps] = (*only in the context of v11*)\n  v11_app_if_vconverse_app[rotated -2]\n  v11_app_vconverse_app \n  v11_vconverse_app_app"], ["", "lemmas [V_cs_simps] = \n  v11.v11_vconverse_app[rotated -1]\n  v11.v11_app_vconverse_app \n  v11.v11_vconverse_app_app"], ["", "lemmas [V_cs_intros] =\n  v11D(1)\n  v11.v11_vconverse\n  v11_vcomp"], ["", "subsubsection\\<open>Operations on indexed families of sets\\<close>"], ["", "lemmas [V_cs_simps] = \n  vprojection_app \n  vprojection_vdomain"], ["", "lemmas [V_cs_intros] = vprojection_vsv"], ["", "subsubsection\\<open>Finite sequences\\<close>"], ["", "lemmas (in vfsequence) [V_cs_intros] = vfsequence_axioms"], ["", "lemmas (in vfsequence) [V_cs_simps] = vfsequence_vdomain"], ["", "lemmas [V_cs_simps] = vfsequence.vfsequence_vdomain"], ["", "lemmas [V_cs_intros] = \n  vfsequence.vfsequence_vcons\n  vfsequence_vempty"], ["", "lemmas [V_cs_simps] = \n  vfinite_0_left \n  vfinite_0_right"], ["", "subsubsection\\<open>Binary relation as a finite sequence\\<close>"], ["", "lemmas [V_cs_simps] = \n  fconverse_vunion\n  fconverse_ftimes\n  vdomain_fflip"], ["", "subsubsection\\<open>Ordinals\\<close>"], ["", "lemmas [Ord_cs_intros] = \n  Limit_right_Limit_mult\n  Limit_left_Limit_mult\n  Ord_succ_mono\n  Limit_plus_omega_vsubset_Limit\n  Limit_plus_nat_in_Limit"], ["", "subsubsection\\<open>von Neumann hierarchy\\<close>"], ["", "lemma (in \\<Z>) omega_in_any[V_cs_intros]:\n  assumes \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<omega> \\<in>\\<^sub>\\<circ> \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<in>\\<^sub>\\<circ> \\<beta>", "using assms"], ["proof (prove)\nusing this:\n  \\<alpha> \\<subseteq>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<in>\\<^sub>\\<circ> \\<beta>", "by auto"], ["", "lemma Ord_vsubset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"Ord \\<beta>\" and \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<alpha> \\<subseteq>\\<^sub>\\<circ> succ \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<subseteq>\\<^sub>\\<circ> ZFC_in_HOL.succ \\<beta>", "by (metis Ord_linear_le Ord_succ assms(1) assms(2) assms(3) leD succ_le_iff)"], ["", "lemma Ord_in_Vset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"a \\<in>\\<^sub>\\<circ> Vset (succ \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)", "by (auto simp: Ord_Vset_in_Vset_succI)"], ["", "lemma Ord_vsubset_Vset_succ[V_cs_intros]:\n  assumes \"Ord \\<alpha>\" and \"B \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"B \\<subseteq>\\<^sub>\\<circ> Vset (succ \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)", "by (intro vsubsetI) \n    (auto simp: assms Vset_trans Ord_vsubset_in_Vset_succI)"], ["", "lemmas (in \\<Z>) [V_cs_intros] = \n  omega_in_\\<alpha>\n  Ord_\\<alpha>\n  Limit_\\<alpha>"], ["", "lemmas [V_cs_intros] =\n  vempty_in_Vset_succ\n  \\<Z>.ord_of_nat_in_Vset\n  Vset_in_mono\n  Limit_vpair_in_VsetI\n  Vset_vsubset_mono \n  Ord_succ\n  Limit_vempty_in_VsetI\n  Limit_insert_in_VsetI\n  vfsequence.vfsequence_Limit_vcons_in_VsetI\n  vfsequence.vfsequence_Ord_vcons_in_Vset_succI\n  Limit_vdoubleton_in_VsetI\n  Limit_omega_in_VsetI\n  Limit_ftimes_in_VsetI"], ["", "subsubsection\\<open>\\<open>n\\<close>-ary operations\\<close>"], ["", "lemmas [V_cs_simps] =\n  fflip_app\n  vdomain_fflip"], ["", "subsubsection\\<open>Countable ordinals as a set\\<close>"], ["", "named_theorems omega_of_set"], ["", "named_theorems nat_omega_simps_extra"], ["", "lemmas [nat_omega_simps_extra] = \n  add_num_simps \n  Suc_numeral \n  Suc_1 \n  le_num_simps\n  less_numeral_simps(1,2)\n  less_num_simps \n  less_one\n  nat_omega_simps"], ["", "lemmas [omega_of_set] = nat_omega_simps_extra"], ["", "lemma set_insert_succ[omega_of_set]:\n  assumes [simp]: \"small b\" and \"set b = a\\<^sub>\\<nat>\"\n  shows \"set (insert (a\\<^sub>\\<nat>) b) = succ (a\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set (insert (a\\<^sub>\\<nat>) b) =\n    ZFC_in_HOL.succ (a\\<^sub>\\<nat>)", "unfolding assms(2)[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set (insert (ZFC_in_HOL.set b) b) =\n    ZFC_in_HOL.succ (ZFC_in_HOL.set b)", "by auto"], ["", "lemma set_0[omega_of_set]: \"set {0} = succ 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {[]\\<^sub>\\<circ>} = ZFC_in_HOL.succ []\\<^sub>\\<circ>", "by auto"], ["", "subsubsection\\<open>Sequences\\<close>"], ["", "named_theorems vfsequence_simps"], ["", "named_theorems vfsequence_intros"], ["", "lemmas [vfsequence_simps] =\n  vfsequence.vfsequence_at_last[rotated]\n  vfsequence.vfsequence_vcard_vcons[rotated]\n  vfsequence.vfsequence_at_not_last[rotated]"], ["", "lemmas [vfsequence_intros] = \n  vfsequence.vfsequence_vcons\n  vfsequence_vempty"], ["", "subsubsection\\<open>Further numerals\\<close>"], ["", "named_theorems nat_omega_intros"], ["", "lemma [nat_omega_intros]:\n  assumes \"a < b\"\n  shows \"a\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>", "using assms"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. a\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>", "by simp"], ["", "lemma [nat_omega_intros]: \n  assumes \"0 < b\"\n  shows \"0 \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. []\\<^sub>\\<circ> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>", "using assms"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. []\\<^sub>\\<circ> \\<in>\\<^sub>\\<circ> b\\<^sub>\\<nat>", "by auto"], ["", "lemma [nat_omega_intros]:\n  assumes \"a = numeral b\"\n  shows \"(0::nat) < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < a", "using assms"], ["proof (prove)\nusing this:\n  a = numeral b\n\ngoal (1 subgoal):\n 1. 0 < a", "by auto"], ["", "lemma nat_le_if_in[nat_omega_intros]:\n  assumes \"x\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> y\\<^sub>\\<nat>\"\n  shows \"x\\<^sub>\\<nat> \\<le> y\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sub>\\<nat> \\<subseteq>\\<^sub>\\<circ> y\\<^sub>\\<nat>", "using assms"], ["proof (prove)\nusing this:\n  x\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> y\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. x\\<^sub>\\<nat> \\<subseteq>\\<^sub>\\<circ> y\\<^sub>\\<nat>", "by auto"], ["", "lemma vempty_le_nat[nat_omega_intros]: \"0 \\<le> y\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. []\\<^sub>\\<circ> \\<subseteq>\\<^sub>\\<circ> y\\<^sub>\\<nat>", "by auto"], ["", "lemmas [nat_omega_intros] = \n  preorder_class.order_refl\n  preorder_class.eq_refl"], ["", "subsubsection\\<open>Generally available foundational results\\<close>"], ["", "lemma (in \\<Z>) \\<Z>_\\<beta>:\n  assumes \"\\<beta> = \\<alpha>\"\n  shows \"\\<Z> \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<alpha>", "by auto"], ["", "lemmas (in \\<Z>) [dg_cs_intros] = \\<Z>_\\<beta>"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}