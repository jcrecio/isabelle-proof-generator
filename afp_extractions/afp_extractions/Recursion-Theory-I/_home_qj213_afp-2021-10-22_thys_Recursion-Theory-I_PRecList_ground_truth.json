{"file_name": "/home/qj213/afp-2021-10-22/thys/Recursion-Theory-I/PRecList.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Recursion-Theory-I", "problem_names": ["lemma c_len_1: \"c_len u = (case u of 0 \\<Rightarrow> 0 | Suc v \\<Rightarrow> c_fst(v)+1)\"", "lemma c_len_is_pr: \"c_len \\<in> PrimRec1\"", "lemma [simp]: \"c_len 0 = 0\"", "lemma c_len_2: \"u \\<noteq> 0 \\<Longrightarrow> c_len u = c_fst(u-(1::nat))+1\"", "lemma c_len_3: \"u>0 \\<Longrightarrow> c_len u > 0\"", "lemma c_len_4: \"c_len u = 0 \\<Longrightarrow> u = 0\"", "lemma c_len_5: \"c_len u > 0 \\<Longrightarrow> u > 0\"", "lemma c_fold_0: \"ls \\<noteq> [] \\<Longrightarrow> c_fold (x#ls) = c_pair x (c_fold ls)\"", "lemma c_fold_1: \"c_unfold 1 (c_fold [x]) = [x]\"", "lemma c_fold_2: \"c_fold (c_unfold 1 u) = u\"", "lemma c_unfold_1: \"c_unfold 1 u = [u]\"", "lemma c_unfold_2: \"c_unfold (Suc 1) u = (c_fst u) # (c_unfold 1 (c_snd u))\"", "lemma c_unfold_3: \"c_unfold (Suc 1) u = [c_fst u, c_snd u]\"", "lemma c_unfold_4: \"k > 0 \\<Longrightarrow> c_unfold (Suc k) u = (c_fst u) # (c_unfold k (c_snd u))\"", "lemma c_unfold_4_1: \"k > 0 \\<Longrightarrow> c_unfold (Suc k) u \\<noteq> []\"", "lemma two: \"(2::nat) = Suc 1\"", "lemma c_unfold_5: \"c_unfold 2 u = [c_fst u, c_snd u]\"", "lemma c_unfold_6: \"k>0 \\<Longrightarrow> c_unfold k u \\<noteq> []\"", "lemma th_lm_1: \"k=1 \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold k u) = u)\"", "lemma th_lm_2: \"\\<lbrakk>k>0; (\\<forall> u. c_fold (c_unfold k u) = u)\\<rbrakk> \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold (Suc k) u) = u)\"", "lemma th_lm_3: \"(\\<forall> u. c_fold (c_unfold (Suc k) u) = u)\\<Longrightarrow> (\\<forall> u. c_fold (c_unfold (Suc (Suc k)) u) = u)\"", "theorem th_1: \"\\<forall> u. c_fold (c_unfold (Suc k) u) = u\"", "theorem th_2: \"k > 0 \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold k u) = u)\"", "lemma c_fold_3: \"c_unfold 2 (c_fold [x, y]) = [x, y]\"", "theorem c_unfold_len: \"ALL u. length (c_unfold k u) = k\"", "lemma th_3_lm_0: \"\\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1; ls1 = aa # list\\<rbrakk> \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\"", "lemma th_3_lm_1: \"\\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1\\<rbrakk> \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\"", "lemma th_3_lm_2: \"c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\"", "theorem th_3: \"c_unfold (length ls) (c_fold ls) = ls\"", "lemma nat_to_list_of_pos: \"u>0 \\<Longrightarrow> nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\"", "theorem list_to_nat_th [simp]: \"list_to_nat (nat_to_list u) = u\"", "theorem nat_to_list_th [simp]: \"nat_to_list (list_to_nat ls) = ls\"", "lemma [simp]: \"list_to_nat [] = 0\"", "lemma [simp]: \"nat_to_list 0 = []\"", "theorem c_len_th_1: \"c_len (list_to_nat ls) = length ls\"", "theorem \"length (nat_to_list u) = c_len u\"", "lemma [simp]: \"c_hd 0 = 0\"", "lemma c_hd_aux0: \"c_len u = 1 \\<Longrightarrow> nat_to_list u = [c_snd (u-(1::nat))]\"", "lemma c_hd_aux1: \"c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u-(1::nat))\"", "lemma c_hd_aux2: \"c_len u > 1 \\<Longrightarrow> c_hd u = c_fst (c_snd (u-(1::nat)))\"", "lemma c_hd_aux3: \"u > 0 \\<Longrightarrow> c_hd u = (if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat))))\"", "lemma c_hd_aux4: \"c_hd u = (if u=0 then 0 else (if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat)))))\"", "lemma c_hd_is_pr: \"c_hd \\<in> PrimRec1\"", "lemma [simp]: \"c_tl 0 = 0\"", "lemma c_tl_eq_tl: \"c_tl (list_to_nat ls) = list_to_nat (tl ls)\"", "lemma tl_eq_c_tl: \"tl (nat_to_list x) = nat_to_list (c_tl x)\"", "lemma c_tl_aux1: \"c_len u = 1 \\<Longrightarrow> c_tl u = 0\"", "lemma c_tl_aux2: \"c_len u > 1 \\<Longrightarrow> c_tl u = (c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1\"", "lemma c_tl_aux3: \"c_tl u = (sgn1 ((c_len u) - 1))*((c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1)\" (is \"_ = ?R\")", "lemma c_tl_less: \"u > 0 \\<Longrightarrow> c_tl u < u\"", "lemma c_tl_le: \"c_tl u \\<le> u\"", "theorem c_tl_is_pr: \"c_tl \\<in> PrimRec1\"", "lemma c_cons_aux1: \"c_cons x 0 = (c_pair 0 x) + 1\"", "lemma c_cons_aux2: \"u > 0 \\<Longrightarrow> c_cons x u = (c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1\"", "lemma c_cons_aux3: \"c_cons = (\\<lambda> x u. (sgn2 u)*((c_pair 0 x)+1) + (sgn1 u)*((c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1))\"", "lemma c_cons_pos: \"c_cons x u > 0\"", "theorem c_cons_is_pr: \"c_cons \\<in> PrimRec2\"", "lemma c_drop_at_0 [simp]: \"c_drop 0 x = x\"", "lemma c_drop_at_Suc: \"c_drop (Suc y) x = c_tl (c_drop y x)\"", "theorem c_drop_is_pr: \"c_drop \\<in> PrimRec2\"", "lemma c_tl_c_drop: \"c_tl (c_drop y x) = c_drop y (c_tl x)\"", "lemma c_drop_at_Suc1: \"c_drop (Suc y) x = c_drop y (c_tl x)\"", "lemma c_drop_df: \"\\<forall> ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\"", "lemma c_nth_is_pr: \"c_nth \\<in> PrimRec2\"", "lemma c_nth_at_0: \"c_nth x 0 = c_hd x\"", "lemma c_hd_c_cons [simp]: \"c_hd (c_cons x y) = x\"", "lemma c_tl_c_cons [simp]: \"c_tl (c_cons x y) = y\"", "lemma c_f_list_at_0: \"c_f_list f 0 x = c_cons (f 0 x) 0\"", "lemma c_f_list_at_Suc: \"c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\"", "lemma c_f_list_is_pr: \"f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2\"", "lemma c_f_list_to_f_0: \"f y x = c_hd (c_f_list f y x)\"", "lemma c_f_list_to_f: \"f = (\\<lambda> y x. c_hd (c_f_list f y x))\"", "lemma c_f_list_f_is_pr: \"c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2\"", "lemma c_f_list_lm_1: \"c_nth (c_cons x y) (Suc z) = c_nth y z\"", "lemma c_f_list_lm_2: \" z < Suc n \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\"", "lemma c_f_list_nth: \"z \\<le> y \\<longrightarrow> c_nth (c_f_list f y x) (y-z) = f z x\"", "theorem th_pr_rec: \"\\<lbrakk> g \\<in> PrimRec1; h \\<in> PrimRec3; (\\<forall> x. (f 0 x) = (g x)); (\\<forall> x y. (f (Suc y) x) = h y (f y x) x) \\<rbrakk> \\<Longrightarrow> f \\<in> PrimRec2\"", "theorem th_rec: \"\\<lbrakk> g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3; (\\<forall> x y. \\<alpha> y x \\<le> y); (\\<forall> x. (f 0 x) = (g x)); (\\<forall> x y. (f (Suc y) x) = h y (f (\\<alpha> y x) x) x) \\<rbrakk> \\<Longrightarrow> f \\<in> PrimRec2\"", "lemma c_assoc_have_key_lm_1: \"y \\<noteq> 0 \\<Longrightarrow> c_assoc_have_key y x = (if c_fst (c_hd y) = x then 0 else c_assoc_have_key (c_tl y) x)\"", "theorem c_assoc_have_key_is_pr: \"c_assoc_have_key \\<in> PrimRec2\"", "lemma c_assoc_value_lm_1: \"y \\<noteq> 0 \\<Longrightarrow> c_assoc_value y x = (if c_fst (c_hd y) = x then c_snd (c_hd y) else c_assoc_value (c_tl y) x)\"", "theorem c_assoc_value_is_pr: \"c_assoc_value \\<in> PrimRec2\"", "lemma c_assoc_lm_1: \"c_assoc_have_key (c_cons (c_pair x y) z) x = 0\"", "lemma c_assoc_lm_2: \"c_assoc_value (c_cons (c_pair x y) z) x = y\"", "lemma c_assoc_lm_3: \"x1 \\<noteq> x \\<Longrightarrow> c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1\"", "lemma c_assoc_lm_4: \"x1 \\<noteq> x \\<Longrightarrow> c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1\""], "translations": [["", "lemma c_len_1: \"c_len u = (case u of 0 \\<Rightarrow> 0 | Suc v \\<Rightarrow> c_fst(v)+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u =\n    (case u of 0 \\<Rightarrow> 0 | Suc v \\<Rightarrow> c_fst v + 1)", "by (unfold c_len_def, cases u, auto)"], ["", "lemma c_len_is_pr: \"c_len \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len \\<in> PrimRec1", "unfolding c_len_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u. sgn1 u * (c_fst (u - 1) + 1)) \\<in> PrimRec1", "by prec"], ["", "lemma [simp]: \"c_len 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len 0 = 0", "by (simp add: c_len_def)"], ["", "lemma c_len_2: \"u \\<noteq> 0 \\<Longrightarrow> c_len u = c_fst(u-(1::nat))+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> c_len u = c_fst (u - 1) + 1", "by (simp add: c_len_def)"], ["", "lemma c_len_3: \"u>0 \\<Longrightarrow> c_len u > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> 0 < c_len u", "by (simp add: c_len_2)"], ["", "lemma c_len_4: \"c_len u = 0 \\<Longrightarrow> u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 0 \\<Longrightarrow> u = 0", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c_len u = 0; ?P\\<rbrakk> \\<Longrightarrow> u = 0\n 2. \\<lbrakk>c_len u = 0; \\<not> ?P\\<rbrakk> \\<Longrightarrow> u = 0", "assume A1: \"u = 0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c_len u = 0; ?P\\<rbrakk> \\<Longrightarrow> u = 0\n 2. \\<lbrakk>c_len u = 0; \\<not> ?P\\<rbrakk> \\<Longrightarrow> u = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. u = 0", "by simp"], ["proof (state)\nthis:\n  u = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_len u = 0; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> u = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_len u = 0; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> u = 0", "assume A1: \"c_len u = 0\" and A2: \"u \\<noteq> 0\""], ["proof (state)\nthis:\n  c_len u = 0\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_len u = 0; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> u = 0", "from A2"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have \"c_len u > 0\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (simp add: c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_len u = 0; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> u = 0", "from A1 this"], ["proof (chain)\npicking this:\n  c_len u = 0\n  0 < c_len u", "show \"u=0\""], ["proof (prove)\nusing this:\n  c_len u = 0\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. u = 0", "by simp"], ["proof (state)\nthis:\n  u = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_len_5: \"c_len u > 0 \\<Longrightarrow> u > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c_len u \\<Longrightarrow> 0 < u", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < c_len u; ?P\\<rbrakk> \\<Longrightarrow> 0 < u\n 2. \\<lbrakk>0 < c_len u; \\<not> ?P\\<rbrakk> \\<Longrightarrow> 0 < u", "assume A1: \"c_len u > 0\" and A2: \"u=0\""], ["proof (state)\nthis:\n  0 < c_len u\n  u = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < c_len u; ?P\\<rbrakk> \\<Longrightarrow> 0 < u\n 2. \\<lbrakk>0 < c_len u; \\<not> ?P\\<rbrakk> \\<Longrightarrow> 0 < u", "from A2"], ["proof (chain)\npicking this:\n  u = 0", "have \"c_len u = 0\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. c_len u = 0", "by simp"], ["proof (state)\nthis:\n  c_len u = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < c_len u; ?P\\<rbrakk> \\<Longrightarrow> 0 < u\n 2. \\<lbrakk>0 < c_len u; \\<not> ?P\\<rbrakk> \\<Longrightarrow> 0 < u", "from A1 this"], ["proof (chain)\npicking this:\n  0 < c_len u\n  c_len u = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c_len u\n  c_len u = 0\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 < u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 < u", "assume A1: \"u \\<noteq> 0\""], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; u \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 < u", "from A1"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "show \"u>0\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal:\nNo subgoals!", "qed"], ["", "fun c_fold :: \"nat list \\<Rightarrow> nat\" where\n    \"c_fold [] = 0\"\n  | \"c_fold [x] = x\"\n  | \"c_fold (x#ls) = c_pair x (c_fold ls)\""], ["", "lemma c_fold_0: \"ls \\<noteq> [] \\<Longrightarrow> c_fold (x#ls) = c_pair x (c_fold ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "assume A1: \"ls \\<noteq> []\""], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "then"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S1: \"ls = (hd ls)#(tl ls)\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls = hd ls # tl ls", "by simp"], ["proof (state)\nthis:\n  ls = hd ls # tl ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "then"], ["proof (chain)\npicking this:\n  ls = hd ls # tl ls", "have S2: \"x#ls = x#(hd ls)#(tl ls)\""], ["proof (prove)\nusing this:\n  ls = hd ls # tl ls\n\ngoal (1 subgoal):\n 1. x # ls = x # hd ls # tl ls", "by simp"], ["proof (state)\nthis:\n  x # ls = x # hd ls # tl ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "have S3: \"c_fold (x#(hd ls)#(tl ls)) = c_pair x (c_fold ((hd ls)#(tl ls)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fold (x # hd ls # tl ls) = c_pair x (c_fold (hd ls # tl ls))", "by simp"], ["proof (state)\nthis:\n  c_fold (x # hd ls # tl ls) = c_pair x (c_fold (hd ls # tl ls))\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_fold (x # ls) = c_pair x (c_fold ls)", "from S1 S2 S3"], ["proof (chain)\npicking this:\n  ls = hd ls # tl ls\n  x # ls = x # hd ls # tl ls\n  c_fold (x # hd ls # tl ls) = c_pair x (c_fold (hd ls # tl ls))", "show ?thesis"], ["proof (prove)\nusing this:\n  ls = hd ls # tl ls\n  x # ls = x # hd ls # tl ls\n  c_fold (x # hd ls # tl ls) = c_pair x (c_fold (hd ls # tl ls))\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec\n  c_unfold :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat list\"\nwhere\n  \"c_unfold 0 u = []\"\n| \"c_unfold (Suc k) u = (if k = 0 then [u] else ((c_fst u) # (c_unfold k (c_snd u))))\""], ["", "lemma c_fold_1: \"c_unfold 1 (c_fold [x]) = [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold 1 (c_fold [x]) = [x]", "by simp"], ["", "lemma c_fold_2: \"c_fold (c_unfold 1 u) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fold (c_unfold 1 u) = u", "by simp"], ["", "lemma c_unfold_1: \"c_unfold 1 u = [u]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold 1 u = [u]", "by simp"], ["", "lemma c_unfold_2: \"c_unfold (Suc 1) u = (c_fst u) # (c_unfold 1 (c_snd u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold (Suc 1) u = c_fst u # c_unfold 1 (c_snd u)", "by simp"], ["", "lemma c_unfold_3: \"c_unfold (Suc 1) u = [c_fst u, c_snd u]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold (Suc 1) u = [c_fst u, c_snd u]", "by simp"], ["", "lemma c_unfold_4: \"k > 0 \\<Longrightarrow> c_unfold (Suc k) u = (c_fst u) # (c_unfold k (c_snd u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    c_unfold (Suc k) u = c_fst u # c_unfold k (c_snd u)", "by simp"], ["", "lemma c_unfold_4_1: \"k > 0 \\<Longrightarrow> c_unfold (Suc k) u \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold (Suc k) u \\<noteq> []", "by (simp add: c_unfold_4)"], ["", "lemma two: \"(2::nat) = Suc 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 = Suc 1", "by simp"], ["", "lemma c_unfold_5: \"c_unfold 2 u = [c_fst u, c_snd u]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold 2 u = [c_fst u, c_snd u]", "by (simp add: two)"], ["", "lemma c_unfold_6: \"k>0 \\<Longrightarrow> c_unfold k u \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "assume A1: \"k>0\""], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "let ?k1 = \"k-(1::nat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "from A1"], ["proof (chain)\npicking this:\n  0 < k", "have S1: \"k = Suc ?k1\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. k = Suc (k - 1)", "by simp"], ["proof (state)\nthis:\n  k = Suc (k - 1)\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "have S2: \"?k1 = 0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []", "assume A2_1: \"?k1=0\""], ["proof (state)\nthis:\n  k - 1 = 0\n\ngoal (1 subgoal):\n 1. k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []", "from A1 A2_1"], ["proof (chain)\npicking this:\n  0 < k\n  k - 1 = 0", "have S2_1: \"k=1\""], ["proof (prove)\nusing this:\n  0 < k\n  k - 1 = 0\n\ngoal (1 subgoal):\n 1. k = 1", "by simp"], ["proof (state)\nthis:\n  k = 1\n\ngoal (1 subgoal):\n 1. k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []", "from S2_1"], ["proof (chain)\npicking this:\n  k = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  k = 1\n\ngoal (1 subgoal):\n 1. c_unfold k u \\<noteq> []", "by (simp add: c_unfold_1)"], ["proof (state)\nthis:\n  c_unfold k u \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "have S3: \"?k1 > 0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []", "assume A3_1: \"?k1 > 0\""], ["proof (state)\nthis:\n  0 < k - 1\n\ngoal (1 subgoal):\n 1. 0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []", "from A3_1"], ["proof (chain)\npicking this:\n  0 < k - 1", "have S3_1: \"c_unfold (Suc ?k1) u \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < k - 1\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (k - 1)) u \\<noteq> []", "by (rule c_unfold_4_1)"], ["proof (state)\nthis:\n  c_unfold (Suc (k - 1)) u \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []", "from S1 S3_1"], ["proof (chain)\npicking this:\n  k = Suc (k - 1)\n  c_unfold (Suc (k - 1)) u \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  k = Suc (k - 1)\n  c_unfold (Suc (k - 1)) u \\<noteq> []\n\ngoal (1 subgoal):\n 1. c_unfold k u \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  c_unfold k u \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> c_unfold k u \\<noteq> []", "from S2 S3"], ["proof (chain)\npicking this:\n  k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []\n  0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  k - 1 = 0 \\<Longrightarrow> c_unfold k u \\<noteq> []\n  0 < k - 1 \\<Longrightarrow> c_unfold k u \\<noteq> []\n\ngoal (1 subgoal):\n 1. c_unfold k u \\<noteq> []", "by arith"], ["proof (state)\nthis:\n  c_unfold k u \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma th_lm_1: \"k=1 \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold k u) = u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 1 \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "by (simp add: c_fold_2)"], ["", "lemma th_lm_2: \"\\<lbrakk>k>0; (\\<forall> u. c_fold (c_unfold k u) = u)\\<rbrakk> \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold (Suc k) u) = u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n    \\<Longrightarrow> \\<forall>u. c_fold (c_unfold (Suc k) u) = u", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "assume A1: \"k>0\""], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "assume A2: \"\\<forall> u. c_fold (c_unfold k u) = u\""], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold k u) = u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from A1"], ["proof (chain)\npicking this:\n  0 < k", "have S1: \"c_unfold (Suc k) u = (c_fst u) # (c_unfold k (c_snd u))\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. c_unfold (Suc k) u = c_fst u # c_unfold k (c_snd u)", "by (rule c_unfold_4)"], ["proof (state)\nthis:\n  c_unfold (Suc k) u = c_fst u # c_unfold k (c_snd u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "let ?ls = \"c_unfold k (c_snd u)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from A1"], ["proof (chain)\npicking this:\n  0 < k", "have S2: \"?ls \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. c_unfold k (c_snd u) \\<noteq> []", "by (rule c_unfold_6)"], ["proof (state)\nthis:\n  c_unfold k (c_snd u) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from S2"], ["proof (chain)\npicking this:\n  c_unfold k (c_snd u) \\<noteq> []", "have S3: \"c_fold ( (c_fst u) # ?ls) = c_pair (c_fst u) (c_fold ?ls)\""], ["proof (prove)\nusing this:\n  c_unfold k (c_snd u) \\<noteq> []\n\ngoal (1 subgoal):\n 1. c_fold (c_fst u # c_unfold k (c_snd u)) =\n    c_pair (c_fst u) (c_fold (c_unfold k (c_snd u)))", "by (rule c_fold_0)"], ["proof (state)\nthis:\n  c_fold (c_fst u # c_unfold k (c_snd u)) =\n  c_pair (c_fst u) (c_fold (c_unfold k (c_snd u)))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from A2"], ["proof (chain)\npicking this:\n  \\<forall>u. c_fold (c_unfold k u) = u", "have S4: \"c_fold ?ls = c_snd u\""], ["proof (prove)\nusing this:\n  \\<forall>u. c_fold (c_unfold k u) = u\n\ngoal (1 subgoal):\n 1. c_fold (c_unfold k (c_snd u)) = c_snd u", "by simp"], ["proof (state)\nthis:\n  c_fold (c_unfold k (c_snd u)) = c_snd u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from S3 S4"], ["proof (chain)\npicking this:\n  c_fold (c_fst u # c_unfold k (c_snd u)) =\n  c_pair (c_fst u) (c_fold (c_unfold k (c_snd u)))\n  c_fold (c_unfold k (c_snd u)) = c_snd u", "have S5: \"c_fold ( (c_fst u) # ?ls) = c_pair (c_fst u) (c_snd u)\""], ["proof (prove)\nusing this:\n  c_fold (c_fst u # c_unfold k (c_snd u)) =\n  c_pair (c_fst u) (c_fold (c_unfold k (c_snd u)))\n  c_fold (c_unfold k (c_snd u)) = c_snd u\n\ngoal (1 subgoal):\n 1. c_fold (c_fst u # c_unfold k (c_snd u)) = c_pair (c_fst u) (c_snd u)", "by simp"], ["proof (state)\nthis:\n  c_fold (c_fst u # c_unfold k (c_snd u)) = c_pair (c_fst u) (c_snd u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from S5"], ["proof (chain)\npicking this:\n  c_fold (c_fst u # c_unfold k (c_snd u)) = c_pair (c_fst u) (c_snd u)", "have S6: \"c_fold ( (c_fst u) # ?ls) = u\""], ["proof (prove)\nusing this:\n  c_fold (c_fst u # c_unfold k (c_snd u)) = c_pair (c_fst u) (c_snd u)\n\ngoal (1 subgoal):\n 1. c_fold (c_fst u # c_unfold k (c_snd u)) = u", "by simp"], ["proof (state)\nthis:\n  c_fold (c_fst u # c_unfold k (c_snd u)) = u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "from S1 S6"], ["proof (chain)\npicking this:\n  c_unfold (Suc k) u = c_fst u # c_unfold k (c_snd u)\n  c_fold (c_fst u # c_unfold k (c_snd u)) = u", "have S7: \"c_fold (c_unfold (Suc k) u) = u\""], ["proof (prove)\nusing this:\n  c_unfold (Suc k) u = c_fst u # c_unfold k (c_snd u)\n  c_fold (c_fst u # c_unfold k (c_snd u)) = u\n\ngoal (1 subgoal):\n 1. c_fold (c_unfold (Suc k) u) = u", "by simp"], ["proof (state)\nthis:\n  c_fold (c_unfold (Suc k) u) = u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>0 < k; \\<forall>u. c_fold (c_unfold k u) = u\\<rbrakk>\n       \\<Longrightarrow> c_fold (c_unfold (Suc k) u) = u", "thus \"c_fold (c_unfold (Suc k) u) = u\""], ["proof (prove)\nusing this:\n  c_fold (c_unfold (Suc k) u) = u\n\ngoal (1 subgoal):\n 1. c_fold (c_unfold (Suc k) u) = u", "."], ["proof (state)\nthis:\n  c_fold (c_unfold (Suc k) u) = u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma th_lm_3: \"(\\<forall> u. c_fold (c_unfold (Suc k) u) = u)\\<Longrightarrow> (\\<forall> u. c_fold (c_unfold (Suc (Suc k)) u) = u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "assume A1: \"\\<forall> u. c_fold (c_unfold (Suc k) u) = u\""], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold (Suc k) u) = u\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "let ?k1 = \"Suc k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "have S1: \"?k1 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc k", "by simp"], ["proof (state)\nthis:\n  0 < Suc k\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "from S1 A1"], ["proof (chain)\npicking this:\n  0 < Suc k\n  \\<forall>u. c_fold (c_unfold (Suc k) u) = u", "have S2: \"\\<forall> u. c_fold (c_unfold (Suc ?k1) u) = u\""], ["proof (prove)\nusing this:\n  0 < Suc k\n  \\<forall>u. c_fold (c_unfold (Suc k) u) = u\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "by (rule th_lm_2)"], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n    \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "by simp"], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem th_1: \"\\<forall> u. c_fold (c_unfold (Suc k) u) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc k) u) = u", "apply(induct k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>u. c_fold (c_unfold (Suc 0) u) = u\n 2. \\<And>k.\n       \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n       \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "apply(simp add: c_fold_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n       \\<forall>u. c_fold (c_unfold (Suc (Suc k)) u) = u", "apply(rule th_lm_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>u. c_fold (c_unfold (Suc k) u) = u \\<Longrightarrow>\n       \\<forall>u. c_fold (c_unfold (Suc k) u) = u", "apply(assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem th_2: \"k > 0 \\<Longrightarrow> (\\<forall> u. c_fold (c_unfold k u) = u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "assume A1: \"k>0\""], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "let ?k1 = \"k-(1::nat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "from A1"], ["proof (chain)\npicking this:\n  0 < k", "have S1: \"Suc ?k1 = k\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. Suc (k - 1) = k", "by simp"], ["proof (state)\nthis:\n  Suc (k - 1) = k\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "have S2: \"\\<forall> u. c_fold (c_unfold (Suc ?k1) u) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold (Suc (k - 1)) u) = u", "by (rule th_1)"], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold (Suc (k - 1)) u) = u\n\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> \\<forall>u. c_fold (c_unfold k u) = u", "from S1 S2"], ["proof (chain)\npicking this:\n  Suc (k - 1) = k\n  \\<forall>u. c_fold (c_unfold (Suc (k - 1)) u) = u", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc (k - 1) = k\n  \\<forall>u. c_fold (c_unfold (Suc (k - 1)) u) = u\n\ngoal (1 subgoal):\n 1. \\<forall>u. c_fold (c_unfold k u) = u", "by simp"], ["proof (state)\nthis:\n  \\<forall>u. c_fold (c_unfold k u) = u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_fold_3: \"c_unfold 2 (c_fold [x, y]) = [x, y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold 2 (c_fold [x, y]) = [x, y]", "by (simp add: two)"], ["", "theorem c_unfold_len: \"ALL u. length (c_unfold k u) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u. length (c_unfold k u) = k", "apply(induct k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>u. length (c_unfold 0 u) = 0\n 2. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       \\<forall>u. length (c_unfold (Suc k) u) = Suc k", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       \\<forall>u. length (c_unfold (Suc k) u) = Suc k", "apply(subgoal_tac \"n=(0::nat) \\<or> n>0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k;\n        n = 0 \\<or> 0 < n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u. length (c_unfold (Suc k) u) = Suc k\n 2. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       n = 0 \\<or> 0 < n", "apply(drule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; n = 0\\<rbrakk>\n       \\<Longrightarrow> ?R3 k\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; 0 < n\\<rbrakk>\n       \\<Longrightarrow> ?R3 k\n 3. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; ?R3 k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u. length (c_unfold (Suc k) u) = Suc k\n 4. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       n = 0 \\<or> 0 < n", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; ?R3 k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>u. length (c_unfold (Suc k) u) = Suc k\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; n = 0\\<rbrakk>\n       \\<Longrightarrow> ?R3 k\n 3. \\<And>k.\n       \\<lbrakk>\\<forall>u. length (c_unfold k u) = k; 0 < n\\<rbrakk>\n       \\<Longrightarrow> ?R3 k\n 4. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       n = 0 \\<or> 0 < n", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<forall>u. length (c_unfold k u) = k \\<Longrightarrow>\n       n = 0 \\<or> 0 < n", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma th_3_lm_0: \"\\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1; ls1 = aa # list\\<rbrakk> \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "assume A1: \"c_unfold (length ls) (c_fold ls) = ls\""], ["proof (state)\nthis:\n  c_unfold (length ls) (c_fold ls) = ls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "assume A2: \"ls = a # ls1\""], ["proof (state)\nthis:\n  ls = a # ls1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "assume A3: \"ls1 = aa # list\""], ["proof (state)\nthis:\n  ls1 = aa # list\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from A2"], ["proof (chain)\npicking this:\n  ls = a # ls1", "have S1: \"ls \\<noteq> []\""], ["proof (prove)\nusing this:\n  ls = a # ls1\n\ngoal (1 subgoal):\n 1. ls \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S1"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S2: \"c_fold (x#ls) = c_pair x (c_fold ls)\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_fold ls)", "by (rule c_fold_0)"], ["proof (state)\nthis:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "have S3: \"length (x#ls) = Suc (length ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # ls) = Suc (length ls)", "by simp"], ["proof (state)\nthis:\n  length (x # ls) = Suc (length ls)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S3"], ["proof (chain)\npicking this:\n  length (x # ls) = Suc (length ls)", "have S4: \"c_unfold (length (x # ls)) (c_fold (x # ls)) = c_unfold (Suc (length ls)) (c_fold (x # ls))\""], ["proof (prove)\nusing this:\n  length (x # ls) = Suc (length ls)\n\ngoal (1 subgoal):\n 1. c_unfold (length (x # ls)) (c_fold (x # ls)) =\n    c_unfold (Suc (length ls)) (c_fold (x # ls))", "by simp"], ["proof (state)\nthis:\n  c_unfold (length (x # ls)) (c_fold (x # ls)) =\n  c_unfold (Suc (length ls)) (c_fold (x # ls))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from A2"], ["proof (chain)\npicking this:\n  ls = a # ls1", "have S5: \"length ls > 0\""], ["proof (prove)\nusing this:\n  ls = a # ls1\n\ngoal (1 subgoal):\n 1. 0 < length ls", "by simp"], ["proof (state)\nthis:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S5"], ["proof (chain)\npicking this:\n  0 < length ls", "have S6: \"c_unfold (Suc (length ls)) (c_fold (x # ls)) = c_fst (c_fold (x # ls))#(c_unfold (length ls) (c_snd (c_fold (x#ls))))\""], ["proof (prove)\nusing this:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n    c_fst (c_fold (x # ls)) # c_unfold (length ls) (c_snd (c_fold (x # ls)))", "by (rule c_unfold_4)"], ["proof (state)\nthis:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  c_fst (c_fold (x # ls)) # c_unfold (length ls) (c_snd (c_fold (x # ls)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S2"], ["proof (chain)\npicking this:\n  c_fold (x # ls) = c_pair x (c_fold ls)", "have S7: \"c_fst (c_fold (x#ls)) = x\""], ["proof (prove)\nusing this:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_fst (c_fold (x # ls)) = x", "by simp"], ["proof (state)\nthis:\n  c_fst (c_fold (x # ls)) = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S2"], ["proof (chain)\npicking this:\n  c_fold (x # ls) = c_pair x (c_fold ls)", "have S8: \"c_snd (c_fold (x#ls)) = c_fold ls\""], ["proof (prove)\nusing this:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_snd (c_fold (x # ls)) = c_fold ls", "by simp"], ["proof (state)\nthis:\n  c_snd (c_fold (x # ls)) = c_fold ls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S6 S7 S8"], ["proof (chain)\npicking this:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  c_fst (c_fold (x # ls)) # c_unfold (length ls) (c_snd (c_fold (x # ls)))\n  c_fst (c_fold (x # ls)) = x\n  c_snd (c_fold (x # ls)) = c_fold ls", "have S9: \"c_unfold (Suc (length ls)) (c_fold (x # ls)) = x # (c_unfold (length ls) (c_fold ls))\""], ["proof (prove)\nusing this:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  c_fst (c_fold (x # ls)) # c_unfold (length ls) (c_snd (c_fold (x # ls)))\n  c_fst (c_fold (x # ls)) = x\n  c_snd (c_fold (x # ls)) = c_fold ls\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n    x # c_unfold (length ls) (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  x # c_unfold (length ls) (c_fold ls)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from A1"], ["proof (chain)\npicking this:\n  c_unfold (length ls) (c_fold ls) = ls", "have S10: \"x # (c_unfold (length ls) (c_fold ls)) = x # ls\""], ["proof (prove)\nusing this:\n  c_unfold (length ls) (c_fold ls) = ls\n\ngoal (1 subgoal):\n 1. x # c_unfold (length ls) (c_fold ls) = x # ls", "by simp"], ["proof (state)\nthis:\n  x # c_unfold (length ls) (c_fold ls) = x # ls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "from S9 S10"], ["proof (chain)\npicking this:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  x # c_unfold (length ls) (c_fold ls)\n  x # c_unfold (length ls) (c_fold ls) = x # ls", "have S11: \"c_unfold (Suc (length ls)) (c_fold (x # ls)) = (x # ls)\""], ["proof (prove)\nusing this:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) =\n  x # c_unfold (length ls) (c_fold ls)\n  x # c_unfold (length ls) (c_fold ls) = x # ls\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (length ls)) (c_fold (x # ls)) = x # ls", "by simp"], ["proof (state)\nthis:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) = x # ls\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = aa # list\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "thus ?thesis"], ["proof (prove)\nusing this:\n  c_unfold (Suc (length ls)) (c_fold (x # ls)) = x # ls\n\ngoal (1 subgoal):\n 1. c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "by simp"], ["proof (state)\nthis:\n  c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma th_3_lm_1: \"\\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1\\<rbrakk> \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "apply(cases ls1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n     ls1 = []\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\n 2. \\<And>aa list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n        ls1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) =\n                         x # ls", "apply(simp add: c_fold_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = a # ls1;\n        ls1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) =\n                         x # ls", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma th_3_lm_2: \"c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow>\n    c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls", "apply(cases ls)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls; ls = []\\<rbrakk>\n    \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) = x # ls\n 2. \\<And>a list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls;\n        ls = a # list\\<rbrakk>\n       \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) =\n                         x # ls", "apply(simp add: c_fold_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls;\n        ls = a # list\\<rbrakk>\n       \\<Longrightarrow> c_unfold (length (x # ls)) (c_fold (x # ls)) =\n                         x # ls", "apply(rule th_3_lm_1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls;\n        ls = a # list\\<rbrakk>\n       \\<Longrightarrow> c_unfold (length ls) (c_fold ls) = ls\n 2. \\<And>a list.\n       \\<lbrakk>c_unfold (length ls) (c_fold ls) = ls;\n        ls = a # list\\<rbrakk>\n       \\<Longrightarrow> ls = ?a2 a list # ?ls1.2 a list", "apply(assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem th_3: \"c_unfold (length ls) (c_fold ls) = ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_unfold (length ls) (c_fold ls) = ls", "apply(induct ls)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c_unfold (length []) (c_fold []) = []\n 2. \\<And>a ls.\n       c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow>\n       c_unfold (length (a # ls)) (c_fold (a # ls)) = a # ls", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ls.\n       c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow>\n       c_unfold (length (a # ls)) (c_fold (a # ls)) = a # ls", "apply(rule th_3_lm_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ls.\n       c_unfold (length ls) (c_fold ls) = ls \\<Longrightarrow>\n       c_unfold (length ls) (c_fold ls) = ls", "apply(assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  list_to_nat :: \"nat list \\<Rightarrow> nat\" where\n  \"list_to_nat = (\\<lambda> ls. if ls=[] then 0 else (c_pair ((length ls) - 1) (c_fold ls))+1)\""], ["", "definition\n  nat_to_list :: \"nat \\<Rightarrow> nat list\" where\n  \"nat_to_list = (\\<lambda> u. if u=0 then [] else (c_unfold (c_len u) (c_snd (u-(1::nat)))))\""], ["", "lemma nat_to_list_of_pos: \"u>0 \\<Longrightarrow> nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "by (simp add: nat_to_list_def)"], ["", "theorem list_to_nat_th [simp]: \"list_to_nat (nat_to_list u) = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "have S1: \"u=0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "by (simp add: list_to_nat_def nat_to_list_def)"], ["proof (state)\nthis:\n  u = 0 \\<Longrightarrow> list_to_nat (nat_to_list u) = u\n\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "have S2: \"u>0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "assume A1: \"u>0\""], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "define ls where \"ls = nat_to_list u\""], ["proof (state)\nthis:\n  ls = nat_to_list u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from ls_def A1"], ["proof (chain)\npicking this:\n  ls = nat_to_list u\n  0 < u", "have S2_1: \"ls = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  ls = nat_to_list u\n  0 < u\n\ngoal (1 subgoal):\n 1. ls = c_unfold (c_len u) (c_snd (u - 1))", "by (simp add: nat_to_list_def)"], ["proof (state)\nthis:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "let ?k = \"c_len u\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S2_2: \"?k > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (rule c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_1"], ["proof (chain)\npicking this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))", "have S2_3: \"length ls = ?k\""], ["proof (prove)\nusing this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. length ls = c_len u", "by (simp add: c_unfold_len)"], ["proof (state)\nthis:\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_2 S2_3"], ["proof (chain)\npicking this:\n  0 < c_len u\n  length ls = c_len u", "have S2_4: \"length ls > 0\""], ["proof (prove)\nusing this:\n  0 < c_len u\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. 0 < length ls", "by simp"], ["proof (state)\nthis:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_4"], ["proof (chain)\npicking this:\n  0 < length ls", "have S2_5: \"ls \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_5"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S2_6: \"list_to_nat ls = c_pair ((length ls)-(1::nat)) (c_fold ls)+1\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "by (simp add: list_to_nat_def)"], ["proof (state)\nthis:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "have S2_7: \"c_fold ls = c_snd(u-(1::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (u - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (u - 1)", "from S2_1"], ["proof (chain)\npicking this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))", "have S2_7_1: \"c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (u - 1)", "from S2_2 S2_7_1"], ["proof (chain)\npicking this:\n  0 < c_len u\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c_len u\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (u - 1)", "by (simp add: th_2)"], ["proof (state)\nthis:\n  c_fold ls = c_snd (u - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_fold ls = c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "have S2_8: \"(length ls)-(1::nat) = c_fst (u-(1::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ls - 1 = c_fst (u - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length ls - 1 = c_fst (u - 1)", "from S2_3"], ["proof (chain)\npicking this:\n  length ls = c_len u", "have S2_8_1: \"length ls = c_len u\""], ["proof (prove)\nusing this:\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. length ls = c_len u", "by simp"], ["proof (state)\nthis:\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. length ls - 1 = c_fst (u - 1)", "from A1 S2_8_1"], ["proof (chain)\npicking this:\n  0 < u\n  length ls = c_len u", "have S2_8_2: \"length ls = c_fst(u-(1::nat)) + 1\""], ["proof (prove)\nusing this:\n  0 < u\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. length ls = c_fst (u - 1) + 1", "by (simp add: c_len_2)"], ["proof (state)\nthis:\n  length ls = c_fst (u - 1) + 1\n\ngoal (1 subgoal):\n 1. length ls - 1 = c_fst (u - 1)", "from S2_8_2"], ["proof (chain)\npicking this:\n  length ls = c_fst (u - 1) + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  length ls = c_fst (u - 1) + 1\n\ngoal (1 subgoal):\n 1. length ls - 1 = c_fst (u - 1)", "by simp"], ["proof (state)\nthis:\n  length ls - 1 = c_fst (u - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length ls - 1 = c_fst (u - 1)\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_7 S2_8"], ["proof (chain)\npicking this:\n  c_fold ls = c_snd (u - 1)\n  length ls - 1 = c_fst (u - 1)", "have S2_9: \"c_pair ((length ls)-(1::nat)) (c_fold ls) = c_pair (c_fst (u-(1::nat))) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  c_fold ls = c_snd (u - 1)\n  length ls - 1 = c_fst (u - 1)\n\ngoal (1 subgoal):\n 1. c_pair (length ls - 1) (c_fold ls) =\n    c_pair (c_fst (u - 1)) (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  c_pair (length ls - 1) (c_fold ls) =\n  c_pair (c_fst (u - 1)) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_9"], ["proof (chain)\npicking this:\n  c_pair (length ls - 1) (c_fold ls) =\n  c_pair (c_fst (u - 1)) (c_snd (u - 1))", "have S2_10: \"c_pair ((length ls)-(1::nat)) (c_fold ls) = u - (1::nat)\""], ["proof (prove)\nusing this:\n  c_pair (length ls - 1) (c_fold ls) =\n  c_pair (c_fst (u - 1)) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_pair (length ls - 1) (c_fold ls) = u - 1", "by simp"], ["proof (state)\nthis:\n  c_pair (length ls - 1) (c_fold ls) = u - 1\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from S2_6 S2_10"], ["proof (chain)\npicking this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n  c_pair (length ls - 1) (c_fold ls) = u - 1", "have S2_11: \"list_to_nat ls = (u - (1::nat))+1\""], ["proof (prove)\nusing this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n  c_pair (length ls - 1) (c_fold ls) = u - 1\n\ngoal (1 subgoal):\n 1. list_to_nat ls = u - 1 + 1", "by simp"], ["proof (state)\nthis:\n  list_to_nat ls = u - 1 + 1\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S2_12: \"(u - (1::nat))+1 = u\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. u - 1 + 1 = u", "by simp"], ["proof (state)\nthis:\n  u - 1 + 1 = u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "from ls_def S2_11 S2_12"], ["proof (chain)\npicking this:\n  ls = nat_to_list u\n  list_to_nat ls = u - 1 + 1\n  u - 1 + 1 = u", "show ?thesis"], ["proof (prove)\nusing this:\n  ls = nat_to_list u\n  list_to_nat ls = u - 1 + 1\n  u - 1 + 1 = u\n\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "by simp"], ["proof (state)\nthis:\n  list_to_nat (nat_to_list u) = u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u\n\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "from S1 S2"], ["proof (chain)\npicking this:\n  u = 0 \\<Longrightarrow> list_to_nat (nat_to_list u) = u\n  0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u", "show ?thesis"], ["proof (prove)\nusing this:\n  u = 0 \\<Longrightarrow> list_to_nat (nat_to_list u) = u\n  0 < u \\<Longrightarrow> list_to_nat (nat_to_list u) = u\n\ngoal (1 subgoal):\n 1. list_to_nat (nat_to_list u) = u", "by arith"], ["proof (state)\nthis:\n  list_to_nat (nat_to_list u) = u\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem nat_to_list_th [simp]: \"nat_to_list (list_to_nat ls) = ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "have S1: \"ls=[] \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ls = [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "by (simp add: nat_to_list_def list_to_nat_def)"], ["proof (state)\nthis:\n  ls = [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "have S2: \"ls \\<noteq> [] \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "assume A1: \"ls \\<noteq> []\""], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "define u where \"u = list_to_nat ls\""], ["proof (state)\nthis:\n  u = list_to_nat ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from u_def A1"], ["proof (chain)\npicking this:\n  u = list_to_nat ls\n  ls \\<noteq> []", "have S2_1: \"u = (c_pair ((length ls)-(1::nat)) (c_fold ls))+1\""], ["proof (prove)\nusing this:\n  u = list_to_nat ls\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. u = c_pair (length ls - 1) (c_fold ls) + 1", "by (simp add: list_to_nat_def)"], ["proof (state)\nthis:\n  u = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "let ?k = \"length ls\""], ["proof (state)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from A1"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S2_2: \"?k > 0\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length ls", "by simp"], ["proof (state)\nthis:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from S2_1"], ["proof (chain)\npicking this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1", "have S2_3: \"u>0\""], ["proof (prove)\nusing this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from S2_3"], ["proof (chain)\npicking this:\n  0 < u", "have S2_4: \"nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "by (simp add: nat_to_list_def)"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "have S2_5: \"c_len u = length ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = length ls", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_len u = length ls", "from S2_1"], ["proof (chain)\npicking this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1", "have S2_5_1: \"u-(1::nat) = c_pair ((length ls)-(1::nat)) (c_fold ls)\""], ["proof (prove)\nusing this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. u - 1 = c_pair (length ls - 1) (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_len u = length ls", "from S2_5_1"], ["proof (chain)\npicking this:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)", "have S2_5_2: \"c_fst (u-(1::nat)) = (length ls)-(1::nat)\""], ["proof (prove)\nusing this:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_fst (u - 1) = length ls - 1", "by simp"], ["proof (state)\nthis:\n  c_fst (u - 1) = length ls - 1\n\ngoal (1 subgoal):\n 1. c_len u = length ls", "from S2_2 S2_5_2"], ["proof (chain)\npicking this:\n  0 < length ls\n  c_fst (u - 1) = length ls - 1", "have \"c_fst (u-(1::nat))+1 = length ls\""], ["proof (prove)\nusing this:\n  0 < length ls\n  c_fst (u - 1) = length ls - 1\n\ngoal (1 subgoal):\n 1. c_fst (u - 1) + 1 = length ls", "by simp"], ["proof (state)\nthis:\n  c_fst (u - 1) + 1 = length ls\n\ngoal (1 subgoal):\n 1. c_len u = length ls", "from S2_3 this"], ["proof (chain)\npicking this:\n  0 < u\n  c_fst (u - 1) + 1 = length ls", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < u\n  c_fst (u - 1) + 1 = length ls\n\ngoal (1 subgoal):\n 1. c_len u = length ls", "by (simp add: c_len_2)"], ["proof (state)\nthis:\n  c_len u = length ls\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_len u = length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "have S2_6: \"c_snd (u-(1::nat)) = c_fold ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_snd (u - 1) = c_fold ls", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_snd (u - 1) = c_fold ls", "from S2_1"], ["proof (chain)\npicking this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1", "have S2_6_1: \"u-(1::nat) = c_pair ((length ls)-(1::nat)) (c_fold ls)\""], ["proof (prove)\nusing this:\n  u = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. u - 1 = c_pair (length ls - 1) (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_snd (u - 1) = c_fold ls", "from S2_6_1"], ["proof (chain)\npicking this:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)", "show ?thesis"], ["proof (prove)\nusing this:\n  u - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_snd (u - 1) = c_fold ls", "by simp"], ["proof (state)\nthis:\n  c_snd (u - 1) = c_fold ls\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_snd (u - 1) = c_fold ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from S2_4 S2_5 S2_6"], ["proof (chain)\npicking this:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n  c_len u = length ls\n  c_snd (u - 1) = c_fold ls", "have S2_7:\"nat_to_list u = c_unfold (length ls) (c_fold ls)\""], ["proof (prove)\nusing this:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n  c_len u = length ls\n  c_snd (u - 1) = c_fold ls\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (length ls) (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (length ls) (c_fold ls)\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from S2_7"], ["proof (chain)\npicking this:\n  nat_to_list u = c_unfold (length ls) (c_fold ls)", "have \"nat_to_list u = ls\""], ["proof (prove)\nusing this:\n  nat_to_list u = c_unfold (length ls) (c_fold ls)\n\ngoal (1 subgoal):\n 1. nat_to_list u = ls", "by (simp add: th_3)"], ["proof (state)\nthis:\n  nat_to_list u = ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls", "from u_def this"], ["proof (chain)\npicking this:\n  u = list_to_nat ls\n  nat_to_list u = ls", "show ?thesis"], ["proof (prove)\nusing this:\n  u = list_to_nat ls\n  nat_to_list u = ls\n\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "by simp"], ["proof (state)\nthis:\n  nat_to_list (list_to_nat ls) = ls\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "have S3: \"ls = [] \\<or> ls \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ls = [] \\<or> ls \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ls = [] \\<or> ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "from S1 S2 S3"], ["proof (chain)\npicking this:\n  ls = [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n  ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n  ls = [] \\<or> ls \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  ls = [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n  ls \\<noteq> [] \\<Longrightarrow> nat_to_list (list_to_nat ls) = ls\n  ls = [] \\<or> ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. nat_to_list (list_to_nat ls) = ls", "by auto"], ["proof (state)\nthis:\n  nat_to_list (list_to_nat ls) = ls\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]: \"list_to_nat [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_nat [] = 0", "by (simp add: list_to_nat_def)"], ["", "lemma [simp]: \"nat_to_list 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_list 0 = []", "by (simp add: nat_to_list_def)"], ["", "theorem c_len_th_1: \"c_len (list_to_nat ls) = length ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len (list_to_nat ls) = length ls", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> c_len (list_to_nat ls) = length ls\n 2. \\<not> ?P \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "assume \"ls=[]\""], ["proof (state)\nthis:\n  ls = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> c_len (list_to_nat ls) = length ls\n 2. \\<not> ?P \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from this"], ["proof (chain)\npicking this:\n  ls = []", "show ?thesis"], ["proof (prove)\nusing this:\n  ls = []\n\ngoal (1 subgoal):\n 1. c_len (list_to_nat ls) = length ls", "by simp"], ["proof (state)\nthis:\n  c_len (list_to_nat ls) = length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "assume S1: \"ls \\<noteq> []\""], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "then"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S2: \"list_to_nat ls = c_pair ((length ls)-(1::nat)) (c_fold ls)+1\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "by (simp add: list_to_nat_def)"], ["proof (state)\nthis:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "let ?u = \"list_to_nat ls\""], ["proof (state)\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from S2"], ["proof (chain)\npicking this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "have u_not_zero: \"?u > 0\""], ["proof (prove)\nusing this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. 0 < list_to_nat ls", "by simp"], ["proof (state)\nthis:\n  0 < list_to_nat ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from S2"], ["proof (chain)\npicking this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "have S3: \"?u-(1::nat) = c_pair ((length ls)-(1::nat)) (c_fold ls)\""], ["proof (prove)\nusing this:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. list_to_nat ls - 1 = c_pair (length ls - 1) (c_fold ls)", "by simp"], ["proof (state)\nthis:\n  list_to_nat ls - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "then"], ["proof (chain)\npicking this:\n  list_to_nat ls - 1 = c_pair (length ls - 1) (c_fold ls)", "have S4: \"c_fst(?u-(1::nat)) = (length ls)-(1::nat)\""], ["proof (prove)\nusing this:\n  list_to_nat ls - 1 = c_pair (length ls - 1) (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_fst (list_to_nat ls - 1) = length ls - 1", "by simp"], ["proof (state)\nthis:\n  c_fst (list_to_nat ls - 1) = length ls - 1\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from S1 this"], ["proof (chain)\npicking this:\n  ls \\<noteq> []\n  c_fst (list_to_nat ls - 1) = length ls - 1", "have S5: \"c_fst(?u-(1::nat))+1=length ls\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n  c_fst (list_to_nat ls - 1) = length ls - 1\n\ngoal (1 subgoal):\n 1. c_fst (list_to_nat ls - 1) + 1 = length ls", "by simp"], ["proof (state)\nthis:\n  c_fst (list_to_nat ls - 1) + 1 = length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from u_not_zero S5"], ["proof (chain)\npicking this:\n  0 < list_to_nat ls\n  c_fst (list_to_nat ls - 1) + 1 = length ls", "have S6: \"c_len (?u) = length ls\""], ["proof (prove)\nusing this:\n  0 < list_to_nat ls\n  c_fst (list_to_nat ls - 1) + 1 = length ls\n\ngoal (1 subgoal):\n 1. c_len (list_to_nat ls) = length ls", "by (simp add: c_len_2)"], ["proof (state)\nthis:\n  c_len (list_to_nat ls) = length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> [] \\<Longrightarrow> c_len (list_to_nat ls) = length ls", "from S1 S6"], ["proof (chain)\npicking this:\n  ls \\<noteq> []\n  c_len (list_to_nat ls) = length ls", "show ?thesis"], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n  c_len (list_to_nat ls) = length ls\n\ngoal (1 subgoal):\n 1. c_len (list_to_nat ls) = length ls", "by simp"], ["proof (state)\nthis:\n  c_len (list_to_nat ls) = length ls\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem \"length (nat_to_list u) = c_len u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "let ?ls = \"nat_to_list u\""], ["proof (state)\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "have S1: \"u = list_to_nat ?ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = list_to_nat (nat_to_list u)", "by (rule list_to_nat_th [THEN sym])"], ["proof (state)\nthis:\n  u = list_to_nat (nat_to_list u)\n\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "from c_len_th_1"], ["proof (chain)\npicking this:\n  c_len (list_to_nat ?ls) = length ?ls", "have S2: \"length ?ls = c_len (list_to_nat ?ls)\""], ["proof (prove)\nusing this:\n  c_len (list_to_nat ?ls) = length ?ls\n\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len (list_to_nat (nat_to_list u))", "by (rule sym)"], ["proof (state)\nthis:\n  length (nat_to_list u) = c_len (list_to_nat (nat_to_list u))\n\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "from S1 S2"], ["proof (chain)\npicking this:\n  u = list_to_nat (nat_to_list u)\n  length (nat_to_list u) = c_len (list_to_nat (nat_to_list u))", "show ?thesis"], ["proof (prove)\nusing this:\n  u = list_to_nat (nat_to_list u)\n  length (nat_to_list u) = c_len (list_to_nat (nat_to_list u))\n\ngoal (1 subgoal):\n 1. length (nat_to_list u) = c_len u", "by (rule ssubst)"], ["proof (state)\nthis:\n  length (nat_to_list u) = c_len u\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  c_hd :: \"nat \\<Rightarrow> nat\" where\n  \"c_hd = (\\<lambda> u. if u=0 then 0 else hd (nat_to_list u))\""], ["", "definition\n  c_tl :: \"nat \\<Rightarrow> nat\" where\n  \"c_tl = (\\<lambda> u. list_to_nat (tl (nat_to_list u)))\""], ["", "definition\n  c_cons :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"c_cons = (\\<lambda> x u. list_to_nat (x # (nat_to_list u)))\""], ["", "lemma [simp]: \"c_hd 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd 0 = 0", "by (simp add: c_hd_def)"], ["", "lemma c_hd_aux0: \"c_len u = 1 \\<Longrightarrow> nat_to_list u = [c_snd (u-(1::nat))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> nat_to_list u = [c_snd (u - 1)]", "by (simp add: nat_to_list_def c_len_5)"], ["", "lemma c_hd_aux1: \"c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u-(1::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u - 1)", "assume A1: \"c_len u = 1\""], ["proof (state)\nthis:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u - 1)", "then"], ["proof (chain)\npicking this:\n  c_len u = 1", "have S1: \"nat_to_list u = [c_snd (u-(1::nat))]\""], ["proof (prove)\nusing this:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. nat_to_list u = [c_snd (u - 1)]", "by (simp add: nat_to_list_def c_len_5)"], ["proof (state)\nthis:\n  nat_to_list u = [c_snd (u - 1)]\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u - 1)", "from A1"], ["proof (chain)\npicking this:\n  c_len u = 1", "have \"u > 0\""], ["proof (prove)\nusing this:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. 0 < u", "by (simp add: c_len_5)"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_hd u = c_snd (u - 1)", "with S1"], ["proof (chain)\npicking this:\n  nat_to_list u = [c_snd (u - 1)]\n  0 < u", "show ?thesis"], ["proof (prove)\nusing this:\n  nat_to_list u = [c_snd (u - 1)]\n  0 < u\n\ngoal (1 subgoal):\n 1. c_hd u = c_snd (u - 1)", "by (simp add: c_hd_def)"], ["proof (state)\nthis:\n  c_hd u = c_snd (u - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_hd_aux2: \"c_len u > 1 \\<Longrightarrow> c_hd u = c_fst (c_snd (u-(1::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "assume A1: \"c_len u > 1\""], ["proof (state)\nthis:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "let ?k = \"(c_len u) - 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S1: \"c_len u = Suc ?k\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u = Suc (c_len u - 1)", "by simp"], ["proof (state)\nthis:\n  c_len u = Suc (c_len u - 1)\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S2: \"c_len u > 0\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by simp"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S2"], ["proof (chain)\npicking this:\n  0 < c_len u", "have S3: \"u > 0\""], ["proof (prove)\nusing this:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u", "by (rule c_len_5)"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S3"], ["proof (chain)\npicking this:\n  0 < u", "have S4: \"c_hd u = hd (nat_to_list u)\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. c_hd u = hd (nat_to_list u)", "by (simp add: c_hd_def)"], ["proof (state)\nthis:\n  c_hd u = hd (nat_to_list u)\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S3"], ["proof (chain)\npicking this:\n  0 < u", "have S5: \"nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "by (rule nat_to_list_of_pos)"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S1 S5"], ["proof (chain)\npicking this:\n  c_len u = Suc (c_len u - 1)\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "have S6: \"nat_to_list u = c_unfold (Suc ?k) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  c_len u = Suc (c_len u - 1)\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S7: \"?k > 0\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < c_len u - 1", "by simp"], ["proof (state)\nthis:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S7"], ["proof (chain)\npicking this:\n  0 < c_len u - 1", "have S8: \"c_unfold (Suc ?k) (c_snd (u-(1::nat))) = (c_fst (c_snd (u-(1::nat)))) # (c_unfold ?k (c_snd (c_snd (u-(1::nat)))))\""], ["proof (prove)\nusing this:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n    c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by (rule c_unfold_4)"], ["proof (state)\nthis:\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S6 S8"], ["proof (chain)\npicking this:\n  nat_to_list u = c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S9: \"nat_to_list u = (c_fst (c_snd (u-(1::nat)))) # (c_unfold ?k (c_snd (c_snd (u-(1::nat)))))\""], ["proof (prove)\nusing this:\n  nat_to_list u = c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. nat_to_list u =\n    c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  nat_to_list u =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S9"], ["proof (chain)\npicking this:\n  nat_to_list u =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S10: \"hd (nat_to_list u) = c_fst (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  nat_to_list u =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. hd (nat_to_list u) = c_fst (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  hd (nat_to_list u) = c_fst (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow> c_hd u = c_fst (c_snd (u - 1))", "from S4 S10"], ["proof (chain)\npicking this:\n  c_hd u = hd (nat_to_list u)\n  hd (nat_to_list u) = c_fst (c_snd (u - 1))", "show ?thesis"], ["proof (prove)\nusing this:\n  c_hd u = hd (nat_to_list u)\n  hd (nat_to_list u) = c_fst (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_hd u = c_fst (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  c_hd u = c_fst (c_snd (u - 1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_hd_aux3: \"u > 0 \\<Longrightarrow> c_hd u = (if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "assume A1: \"u > 0\""], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have \"c_len u > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (rule c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "then"], ["proof (chain)\npicking this:\n  0 < c_len u", "have S1: \"c_len u = 1 \\<or> c_len u > 1\""], ["proof (prove)\nusing this:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<or> 1 < c_len u", "by arith"], ["proof (state)\nthis:\n  c_len u = 1 \\<or> 1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "let ?tmp = \"if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "have S2: \"c_len u = 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "assume A2_1: \"c_len u = 1\""], ["proof (state)\nthis:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "then"], ["proof (chain)\npicking this:\n  c_len u = 1", "have S2_1: \"c_hd u = c_snd (u-(1::nat))\""], ["proof (prove)\nusing this:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. c_hd u = c_snd (u - 1)", "by (rule c_hd_aux1)"], ["proof (state)\nthis:\n  c_hd u = c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from A2_1"], ["proof (chain)\npicking this:\n  c_len u = 1", "have S2_2: \"?tmp = c_snd(u-(1::nat))\""], ["proof (prove)\nusing this:\n  c_len u = 1\n\ngoal (1 subgoal):\n 1. (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n    c_snd (u - 1)", "by simp"], ["proof (state)\nthis:\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from S2_1 this"], ["proof (chain)\npicking this:\n  c_hd u = c_snd (u - 1)\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_snd (u - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_hd u = c_snd (u - 1)\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_len u = 1 \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "have S3: \"c_len u > 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "assume A3_1: \"c_len u > 1\""], ["proof (state)\nthis:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from A3_1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S3_1: \"c_hd u = c_fst (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_hd u = c_fst (c_snd (u - 1))", "by (rule c_hd_aux2)"], ["proof (state)\nthis:\n  c_hd u = c_fst (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from A3_1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S3_2: \"?tmp = c_fst (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n    c_fst (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_fst (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from S3_1 this"], ["proof (chain)\npicking this:\n  c_hd u = c_fst (c_snd (u - 1))\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_fst (c_snd (u - 1))", "show ?thesis"], ["proof (prove)\nusing this:\n  c_hd u = c_fst (c_snd (u - 1))\n  (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1))) =\n  c_fst (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < c_len u \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "from S1 S2 S3"], ["proof (chain)\npicking this:\n  c_len u = 1 \\<or> 1 < c_len u\n  c_len u = 1 \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  1 < c_len u \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "show ?thesis"], ["proof (prove)\nusing this:\n  c_len u = 1 \\<or> 1 < c_len u\n  c_len u = 1 \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  1 < c_len u \\<Longrightarrow>\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by auto"], ["proof (state)\nthis:\n  c_hd u = (if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_hd_aux4: \"c_hd u = (if u=0 then 0 else (if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n 2. \\<not> ?P \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "assume \"u=0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n 2. \\<not> ?P \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "then"], ["proof (chain)\npicking this:\n  u = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  c_hd u =\n  (if u = 0 then 0\n   else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "assume \"u \\<noteq> 0\""], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have A1: \"u > 0\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "then"], ["proof (chain)\npicking this:\n  0 < u", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. c_hd u =\n    (if u = 0 then 0\n     else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by (simp add: c_hd_aux3)"], ["proof (state)\nthis:\n  c_hd u =\n  (if u = 0 then 0\n   else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_hd_is_pr: \"c_hd \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "have \"c_hd = (%u. (if u=0 then 0 else (if (c_len u) = 1 then c_snd (u-(1::nat)) else c_fst (c_snd (u-(1::nat))))))\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd =\n    (\\<lambda>u.\n        if u = 0 then 0\n        else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))", "by (simp add: c_hd_aux4 ext)"], ["proof (state)\nthis:\n  c_hd =\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "moreover"], ["proof (state)\nthis:\n  c_hd =\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "have \"?R \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u.\n        if u = 0 then 0\n        else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n    \\<in> PrimRec1", "proof (rule if_is_pr)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x. x) \\<in> PrimRec1\n 2. (\\<lambda>x. 0) \\<in> PrimRec1\n 3. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "show \"(\\<lambda> x. x) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x) \\<in> PrimRec1", "by (rule pr_id1_1)"], ["proof (state)\nthis:\n  (\\<lambda>x. x) \\<in> PrimRec1\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. 0) \\<in> PrimRec1\n 2. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. 0) \\<in> PrimRec1\n 2. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "show \"(\\<lambda> x. 0) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 0) \\<in> PrimRec1", "by (rule pr_zero)"], ["proof (state)\nthis:\n  (\\<lambda>x. 0) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "show \"(\\<lambda>x. if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1))) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n    \\<in> PrimRec1", "proof (rule if_eq_is_pr)"], ["proof (state)\ngoal (4 subgoals):\n 1. c_len \\<in> PrimRec1\n 2. (\\<lambda>x. 1) \\<in> PrimRec1\n 3. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n 4. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "show \"c_len \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len \\<in> PrimRec1", "by (rule c_len_is_pr)"], ["proof (state)\nthis:\n  c_len \\<in> PrimRec1\n\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> PrimRec1\n 2. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n 3. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x. 1) \\<in> PrimRec1\n 2. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n 3. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "show \"(\\<lambda> x. 1) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 1) \\<in> PrimRec1", "by (rule const_is_pr)"], ["proof (state)\nthis:\n  (\\<lambda>x. 1) \\<in> PrimRec1\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n 2. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n 2. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "show \"(\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x. c_snd (x - 1)) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "show \"(\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x. c_fst (c_snd (x - 1))) \\<in> PrimRec1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. if c_len x = 1 then c_snd (x - 1) else c_fst (c_snd (x - 1)))\n  \\<in> PrimRec1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "ultimately"], ["proof (chain)\npicking this:\n  c_hd =\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  \\<in> PrimRec1", "show ?thesis"], ["proof (prove)\nusing this:\n  c_hd =\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  (\\<lambda>u.\n      if u = 0 then 0\n      else if c_len u = 1 then c_snd (u - 1) else c_fst (c_snd (u - 1)))\n  \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_hd \\<in> PrimRec1", "by simp"], ["proof (state)\nthis:\n  c_hd \\<in> PrimRec1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]: \"c_tl 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl 0 = 0", "by (simp add: c_tl_def)"], ["", "lemma c_tl_eq_tl: \"c_tl (list_to_nat ls) = list_to_nat (tl ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl (list_to_nat ls) = list_to_nat (tl ls)", "by (simp add: c_tl_def)"], ["", "lemma tl_eq_c_tl: \"tl (nat_to_list x) = nat_to_list (c_tl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (nat_to_list x) = nat_to_list (c_tl x)", "by (simp add: c_tl_def)"], ["", "lemma c_tl_aux1: \"c_len u = 1 \\<Longrightarrow> c_tl u = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow> c_tl u = 0", "by (unfold c_tl_def, simp add: c_hd_aux0)"], ["", "lemma c_tl_aux2: \"c_len u > 1 \\<Longrightarrow> c_tl u = (c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "assume A1: \"c_len u > 1\""], ["proof (state)\nthis:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "let ?k = \"(c_len u) - 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S1: \"c_len u = Suc ?k\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u = Suc (c_len u - 1)", "by simp"], ["proof (state)\nthis:\n  c_len u = Suc (c_len u - 1)\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S2: \"c_len u > 0\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by simp"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S2"], ["proof (chain)\npicking this:\n  0 < c_len u", "have S3: \"u > 0\""], ["proof (prove)\nusing this:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u", "by (rule c_len_5)"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S3"], ["proof (chain)\npicking this:\n  0 < u", "have S4: \"nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "by (rule nat_to_list_of_pos)"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S5: \"?k > 0\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < c_len u - 1", "by simp"], ["proof (state)\nthis:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S5"], ["proof (chain)\npicking this:\n  0 < c_len u - 1", "have S6: \"c_unfold (Suc ?k) (c_snd (u-(1::nat))) = (c_fst (c_snd (u-(1::nat)))) # (c_unfold ?k (c_snd (c_snd (u-(1::nat)))))\""], ["proof (prove)\nusing this:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n    c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by (rule c_unfold_4)"], ["proof (state)\nthis:\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S6"], ["proof (chain)\npicking this:\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S7: \"tl (c_unfold (Suc ?k) (c_snd (u-(1::nat)))) = c_unfold ?k (c_snd (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  c_unfold (Suc (c_len u - 1)) (c_snd (u - 1)) =\n  c_fst (c_snd (u - 1)) # c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. tl (c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))) =\n    c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  tl (c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))) =\n  c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S2 S4 S7"], ["proof (chain)\npicking this:\n  0 < c_len u\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n  tl (c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))) =\n  c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S8: \"tl (nat_to_list u) = c_unfold ?k (c_snd (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  0 < c_len u\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n  tl (c_unfold (Suc (c_len u - 1)) (c_snd (u - 1))) =\n  c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "define ls where \"ls = tl (nat_to_list u)\""], ["proof (state)\nthis:\n  ls = tl (nat_to_list u)\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from ls_def S8"], ["proof (chain)\npicking this:\n  ls = tl (nat_to_list u)\n  tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S9: \"length ls = ?k\""], ["proof (prove)\nusing this:\n  ls = tl (nat_to_list u)\n  tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. length ls = c_len u - 1", "by (simp add: c_unfold_len)"], ["proof (state)\nthis:\n  length ls = c_len u - 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from ls_def"], ["proof (chain)\npicking this:\n  ls = tl (nat_to_list u)", "have S10: \"c_tl u = list_to_nat ls\""], ["proof (prove)\nusing this:\n  ls = tl (nat_to_list u)\n\ngoal (1 subgoal):\n 1. c_tl u = list_to_nat ls", "by (simp add: c_tl_def)"], ["proof (state)\nthis:\n  c_tl u = list_to_nat ls\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S5 S9"], ["proof (chain)\npicking this:\n  0 < c_len u - 1\n  length ls = c_len u - 1", "have S11: \"length ls > 0\""], ["proof (prove)\nusing this:\n  0 < c_len u - 1\n  length ls = c_len u - 1\n\ngoal (1 subgoal):\n 1. 0 < length ls", "by simp"], ["proof (state)\nthis:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S11"], ["proof (chain)\npicking this:\n  0 < length ls", "have S12: \"ls \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S12"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S13: \"list_to_nat ls = (c_pair ((length ls) - 1) (c_fold ls))+1\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "by (simp add: list_to_nat_def)"], ["proof (state)\nthis:\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S10 S13"], ["proof (chain)\npicking this:\n  c_tl u = list_to_nat ls\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1", "have S14: \"c_tl u = (c_pair ((length ls) - 1) (c_fold ls))+1\""], ["proof (prove)\nusing this:\n  c_tl u = list_to_nat ls\n  list_to_nat ls = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. c_tl u = c_pair (length ls - 1) (c_fold ls) + 1", "by simp"], ["proof (state)\nthis:\n  c_tl u = c_pair (length ls - 1) (c_fold ls) + 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S9"], ["proof (chain)\npicking this:\n  length ls = c_len u - 1", "have S15: \"(length ls)-(1::nat) = ?k-(1::nat)\""], ["proof (prove)\nusing this:\n  length ls = c_len u - 1\n\ngoal (1 subgoal):\n 1. length ls - 1 = c_len u - 1 - 1", "by simp"], ["proof (state)\nthis:\n  length ls - 1 = c_len u - 1 - 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S16: \"?k-(1::nat) = c_len u - (2::nat)\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u - 1 - 1 = c_len u - 2", "by arith"], ["proof (state)\nthis:\n  c_len u - 1 - 1 = c_len u - 2\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S15 S16"], ["proof (chain)\npicking this:\n  length ls - 1 = c_len u - 1 - 1\n  c_len u - 1 - 1 = c_len u - 2", "have S17: \"(length ls)-(1::nat) = c_len u - (2::nat)\""], ["proof (prove)\nusing this:\n  length ls - 1 = c_len u - 1 - 1\n  c_len u - 1 - 1 = c_len u - 2\n\ngoal (1 subgoal):\n 1. length ls - 1 = c_len u - 2", "by simp"], ["proof (state)\nthis:\n  length ls - 1 = c_len u - 2\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from ls_def S8"], ["proof (chain)\npicking this:\n  ls = tl (nat_to_list u)\n  tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "have S18: \"ls = c_unfold ?k (c_snd (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  ls = tl (nat_to_list u)\n  tl (nat_to_list u) = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. ls = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  ls = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S5"], ["proof (chain)\npicking this:\n  0 < c_len u - 1", "have S19: \"c_fold (c_unfold ?k (c_snd (c_snd (u-(1::nat))))) = c_snd (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. c_fold (c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))) =\n    c_snd (c_snd (u - 1))", "by (simp add: th_2)"], ["proof (state)\nthis:\n  c_fold (c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))) =\n  c_snd (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S18 S19"], ["proof (chain)\npicking this:\n  ls = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n  c_fold (c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))) =\n  c_snd (c_snd (u - 1))", "have S20: \"c_fold ls = c_snd (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  ls = c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))\n  c_fold (c_unfold (c_len u - 1) (c_snd (c_snd (u - 1)))) =\n  c_snd (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  c_fold ls = c_snd (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 1 < c_len u \\<Longrightarrow>\n    c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "from S14 S17 S20"], ["proof (chain)\npicking this:\n  c_tl u = c_pair (length ls - 1) (c_fold ls) + 1\n  length ls - 1 = c_len u - 2\n  c_fold ls = c_snd (c_snd (u - 1))", "show ?thesis"], ["proof (prove)\nusing this:\n  c_tl u = c_pair (length ls - 1) (c_fold ls) + 1\n  length ls - 1 = c_len u - 2\n  c_fold ls = c_snd (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "by simp"], ["proof (state)\nthis:\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_tl_aux3: \"c_tl u = (sgn1 ((c_len u) - 1))*((c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1)\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "have S1: \"u=0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "by simp"], ["proof (state)\nthis:\n  u = 0 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "have S2: \"u>0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "assume A1: \"u>0\""], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "have S2_1: \"c_len u = 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u = 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "by (simp add: c_tl_aux1)"], ["proof (state)\nthis:\n  c_len u = 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "have S2_2: \"c_len u \\<noteq> 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "assume A2_2_1: \"c_len u \\<noteq> 1\""], ["proof (state)\nthis:\n  c_len u \\<noteq> 1\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S2_2_1: \"c_len u > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (rule c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from A2_2_1 S2_2_1"], ["proof (chain)\npicking this:\n  c_len u \\<noteq> 1\n  0 < c_len u", "have S2_2_2: \"c_len u > 1\""], ["proof (prove)\nusing this:\n  c_len u \\<noteq> 1\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 1 < c_len u", "by arith"], ["proof (state)\nthis:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from this"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S2_2_3: \"c_len u - 1 > 0\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < c_len u - 1", "by simp"], ["proof (state)\nthis:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from this"], ["proof (chain)\npicking this:\n  0 < c_len u - 1", "have S2_2_4: \"sgn1 (c_len u - 1)=1\""], ["proof (prove)\nusing this:\n  0 < c_len u - 1\n\ngoal (1 subgoal):\n 1. sgn1 (c_len u - 1) = 1", "by simp"], ["proof (state)\nthis:\n  sgn1 (c_len u - 1) = 1\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from S2_2_4"], ["proof (chain)\npicking this:\n  sgn1 (c_len u - 1) = 1", "have S2_2_5: \"?R = (c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\nusing this:\n  sgn1 (c_len u - 1) = 1\n\ngoal (1 subgoal):\n 1. sgn1 (c_len u - 1) *\n    (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1) =\n    c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "by simp"], ["proof (state)\nthis:\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1) =\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from S2_2_2"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S2_2_6: \"c_tl u = (c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "by (rule c_tl_aux2)"], ["proof (state)\nthis:\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. c_len u \\<noteq> 1 \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from S2_2_5 S2_2_6"], ["proof (chain)\npicking this:\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1) =\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1) =\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "by simp"], ["proof (state)\nthis:\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_len u \\<noteq> 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from S2_1 S2_2"], ["proof (chain)\npicking this:\n  c_len u = 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n  c_len u \\<noteq> 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_len u = 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n  c_len u \\<noteq> 1 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "by blast"], ["proof (state)\nthis:\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < u \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "from S1 S2"], ["proof (chain)\npicking this:\n  u = 0 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n  0 < u \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  u = 0 \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n  0 < u \\<Longrightarrow>\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. c_tl u =\n    sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)", "by arith"], ["proof (state)\nthis:\n  c_tl u =\n  sgn1 (c_len u - 1) * (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_tl_less: \"u > 0 \\<Longrightarrow> c_tl u < u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> c_tl u < u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> c_tl u < u", "assume A1: \"u > 0\""], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  0 < u", "have S1: \"c_len u > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (rule c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  0 < c_len u", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. c_tl u < u", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < c_len u; ?P1\\<rbrakk> \\<Longrightarrow> c_tl u < u\n 2. \\<lbrakk>0 < c_len u; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> c_tl u < u", "assume \"c_len u = 1\""], ["proof (state)\nthis:\n  c_len u = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < c_len u; ?P1\\<rbrakk> \\<Longrightarrow> c_tl u < u\n 2. \\<lbrakk>0 < c_len u; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> c_tl u < u", "from this A1"], ["proof (chain)\npicking this:\n  c_len u = 1\n  0 < u", "show ?thesis"], ["proof (prove)\nusing this:\n  c_len u = 1\n  0 < u\n\ngoal (1 subgoal):\n 1. c_tl u < u", "by (simp add: c_tl_aux1)"], ["proof (state)\nthis:\n  c_tl u < u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "assume \"\\<not> c_len u = 1\""], ["proof (state)\nthis:\n  c_len u \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "with S1"], ["proof (chain)\npicking this:\n  0 < c_len u\n  c_len u \\<noteq> 1", "have A2: \"c_len u > 1\""], ["proof (prove)\nusing this:\n  0 < c_len u\n  c_len u \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < c_len u", "by simp"], ["proof (state)\nthis:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  1 < c_len u", "have S2: \"c_tl u = (c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\nusing this:\n  1 < c_len u\n\ngoal (1 subgoal):\n 1. c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1", "by (rule c_tl_aux2)"], ["proof (state)\nthis:\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S3: \"c_len u = c_fst(u-(1::nat))+1\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. c_len u = c_fst (u - 1) + 1", "by (simp add: c_len_def)"], ["proof (state)\nthis:\n  c_len u = c_fst (u - 1) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "from A2 S3"], ["proof (chain)\npicking this:\n  1 < c_len u\n  c_len u = c_fst (u - 1) + 1", "have S4: \"c_len u - (2::nat) < c_fst(u-(1::nat))\""], ["proof (prove)\nusing this:\n  1 < c_len u\n  c_len u = c_fst (u - 1) + 1\n\ngoal (1 subgoal):\n 1. c_len u - 2 < c_fst (u - 1)", "by simp"], ["proof (state)\nthis:\n  c_len u - 2 < c_fst (u - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  c_len u - 2 < c_fst (u - 1)", "have S5: \"(c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) < (c_pair (c_fst(u-(1::nat))) (c_snd (c_snd (u-(1::nat)))))\""], ["proof (prove)\nusing this:\n  c_len u - 2 < c_fst (u - 1)\n\ngoal (1 subgoal):\n 1. c_pair (c_len u - 2) (c_snd (c_snd (u - 1)))\n    < c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))", "by (rule c_pair_strict_mono1)"], ["proof (state)\nthis:\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1)))\n  < c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "have S6: \"c_snd (c_snd (u-(1::nat))) \\<le> c_snd (u-(1::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_snd (c_snd (u - 1)) \\<le> c_snd (u - 1)", "by (rule c_snd_le_arg)"], ["proof (state)\nthis:\n  c_snd (c_snd (u - 1)) \\<le> c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  c_snd (c_snd (u - 1)) \\<le> c_snd (u - 1)", "have S7: \"(c_pair (c_fst(u-(1::nat))) (c_snd (c_snd (u-(1::nat))))) \\<le> (c_pair (c_fst(u-(1::nat))) (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  c_snd (c_snd (u - 1)) \\<le> c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n    \\<le> c_pair (c_fst (u - 1)) (c_snd (u - 1))", "by (rule c_pair_mono2)"], ["proof (state)\nthis:\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n  \\<le> c_pair (c_fst (u - 1)) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "then"], ["proof (chain)\npicking this:\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n  \\<le> c_pair (c_fst (u - 1)) (c_snd (u - 1))", "have S8: \"(c_pair (c_fst(u-(1::nat))) (c_snd (c_snd (u-(1::nat))))) \\<le> u-(1::nat)\""], ["proof (prove)\nusing this:\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n  \\<le> c_pair (c_fst (u - 1)) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1))) \\<le> u - 1", "by simp"], ["proof (state)\nthis:\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1))) \\<le> u - 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "with S5"], ["proof (chain)\npicking this:\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1)))\n  < c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1))) \\<le> u - 1", "have \"(c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) < u - (1::nat)\""], ["proof (prove)\nusing this:\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1)))\n  < c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1)))\n  c_pair (c_fst (u - 1)) (c_snd (c_snd (u - 1))) \\<le> u - 1\n\ngoal (1 subgoal):\n 1. c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) < u - 1", "by simp"], ["proof (state)\nthis:\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) < u - 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "with S2"], ["proof (chain)\npicking this:\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) < u - 1", "have \"c_tl u < (u-(1::nat))+1\""], ["proof (prove)\nusing this:\n  c_tl u = c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1\n  c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) < u - 1\n\ngoal (1 subgoal):\n 1. c_tl u < u - 1 + 1", "by simp"], ["proof (state)\nthis:\n  c_tl u < u - 1 + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c_len u; c_len u \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> c_tl u < u", "with A1"], ["proof (chain)\npicking this:\n  0 < u\n  c_tl u < u - 1 + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < u\n  c_tl u < u - 1 + 1\n\ngoal (1 subgoal):\n 1. c_tl u < u", "by simp"], ["proof (state)\nthis:\n  c_tl u < u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_tl u < u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_tl_le: \"c_tl u \\<le> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl u \\<le> u", "proof (cases u)"], ["proof (state)\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> c_tl u \\<le> u\n 2. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "assume \"u=0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> c_tl u \\<le> u\n 2. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "then"], ["proof (chain)\npicking this:\n  u = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. c_tl u \\<le> u", "by simp"], ["proof (state)\nthis:\n  c_tl u \\<le> u\n\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "assume A1: \"u = Suc v\""], ["proof (state)\nthis:\n  u = Suc v\n\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "then"], ["proof (chain)\npicking this:\n  u = Suc v", "have S1: \"u > 0\""], ["proof (prove)\nusing this:\n  u = Suc v\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "then"], ["proof (chain)\npicking this:\n  0 < u", "have S2: \"c_tl u < u\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. c_tl u < u", "by (rule c_tl_less)"], ["proof (state)\nthis:\n  c_tl u < u\n\ngoal (1 subgoal):\n 1. \\<And>nat. u = Suc nat \\<Longrightarrow> c_tl u \\<le> u", "with A1"], ["proof (chain)\npicking this:\n  u = Suc v\n  c_tl u < u", "show \"c_tl u \\<le> u\""], ["proof (prove)\nusing this:\n  u = Suc v\n  c_tl u < u\n\ngoal (1 subgoal):\n 1. c_tl u \\<le> u", "by simp"], ["proof (state)\nthis:\n  c_tl u \\<le> u\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem c_tl_is_pr: \"c_tl \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "have \"c_tl = (\\<lambda> u. (sgn1 ((c_len u) - 1))*((c_pair (c_len u - (2::nat)) (c_snd (c_snd (u-(1::nat))))) + 1))\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl =\n    (\\<lambda>u.\n        sgn1 (c_len u - 1) *\n        (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))", "by (simp add: c_tl_aux3 ext)"], ["proof (state)\nthis:\n  c_tl =\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "moreover"], ["proof (state)\nthis:\n  c_tl =\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "from c_len_is_pr c_pair_is_pr"], ["proof (chain)\npicking this:\n  c_len \\<in> PrimRec1\n  c_pair \\<in> PrimRec2", "have \"?R \\<in> PrimRec1\""], ["proof (prove)\nusing this:\n  c_len \\<in> PrimRec1\n  c_pair \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>u.\n        sgn1 (c_len u - 1) *\n        (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n    \\<in> PrimRec1", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n  \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "ultimately"], ["proof (chain)\npicking this:\n  c_tl =\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n  \\<in> PrimRec1", "show ?thesis"], ["proof (prove)\nusing this:\n  c_tl =\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n  (\\<lambda>u.\n      sgn1 (c_len u - 1) *\n      (c_pair (c_len u - 2) (c_snd (c_snd (u - 1))) + 1))\n  \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_tl \\<in> PrimRec1", "by simp"], ["proof (state)\nthis:\n  c_tl \\<in> PrimRec1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_cons_aux1: \"c_cons x 0 = (c_pair 0 x) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons x 0 = c_pair 0 x + 1", "apply(unfold c_cons_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_nat (x # nat_to_list 0) = c_pair 0 x + 1", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_nat [x] = Suc (c_pair 0 x)", "apply(unfold list_to_nat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if [x] = [] then 0 else c_pair (length [x] - 1) (c_fold [x]) + 1) =\n    Suc (c_pair 0 x)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_cons_aux2: \"u > 0 \\<Longrightarrow> c_cons x u = (c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "assume A1: \"u > 0\""], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S1: \"c_len u > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_len u", "by (rule c_len_3)"], ["proof (state)\nthis:\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from A1"], ["proof (chain)\npicking this:\n  0 < u", "have S2: \"nat_to_list u = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "by (rule nat_to_list_of_pos)"], ["proof (state)\nthis:\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "define ls where \"ls = nat_to_list u\""], ["proof (state)\nthis:\n  ls = nat_to_list u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from ls_def S2"], ["proof (chain)\npicking this:\n  ls = nat_to_list u\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))", "have S3: \"ls = c_unfold (c_len u) (c_snd (u-(1::nat)))\""], ["proof (prove)\nusing this:\n  ls = nat_to_list u\n  nat_to_list u = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. ls = c_unfold (c_len u) (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from S3"], ["proof (chain)\npicking this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))", "have S4: \"length ls = c_len u\""], ["proof (prove)\nusing this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. length ls = c_len u", "by (simp add: c_unfold_len)"], ["proof (state)\nthis:\n  length ls = c_len u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from S4 S1"], ["proof (chain)\npicking this:\n  length ls = c_len u\n  0 < c_len u", "have S5: \"length ls > 0\""], ["proof (prove)\nusing this:\n  length ls = c_len u\n  0 < c_len u\n\ngoal (1 subgoal):\n 1. 0 < length ls", "by simp"], ["proof (state)\nthis:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from S5"], ["proof (chain)\npicking this:\n  0 < length ls", "have S6: \"ls \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < length ls\n\ngoal (1 subgoal):\n 1. ls \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from ls_def"], ["proof (chain)\npicking this:\n  ls = nat_to_list u", "have S7: \"c_cons x u = list_to_nat (x # ls)\""], ["proof (prove)\nusing this:\n  ls = nat_to_list u\n\ngoal (1 subgoal):\n 1. c_cons x u = list_to_nat (x # ls)", "by (simp add: c_cons_def)"], ["proof (state)\nthis:\n  c_cons x u = list_to_nat (x # ls)\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "have S8: \"list_to_nat (x # ls) = (c_pair ((length (x#ls))-(1::nat)) (c_fold (x#ls)))+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_nat (x # ls) =\n    c_pair (length (x # ls) - 1) (c_fold (x # ls)) + 1", "by (simp add: list_to_nat_def)"], ["proof (state)\nthis:\n  list_to_nat (x # ls) = c_pair (length (x # ls) - 1) (c_fold (x # ls)) + 1\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "have S9: \"(length (x#ls))-(1::nat) = length ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # ls) - 1 = length ls", "by simp"], ["proof (state)\nthis:\n  length (x # ls) - 1 = length ls\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from S9 S4 S8"], ["proof (chain)\npicking this:\n  length (x # ls) - 1 = length ls\n  length ls = c_len u\n  list_to_nat (x # ls) = c_pair (length (x # ls) - 1) (c_fold (x # ls)) + 1", "have S10: \"list_to_nat (x # ls) = (c_pair (c_len u) (c_fold (x#ls)))+1\""], ["proof (prove)\nusing this:\n  length (x # ls) - 1 = length ls\n  length ls = c_len u\n  list_to_nat (x # ls) = c_pair (length (x # ls) - 1) (c_fold (x # ls)) + 1\n\ngoal (1 subgoal):\n 1. list_to_nat (x # ls) = c_pair (c_len u) (c_fold (x # ls)) + 1", "by simp"], ["proof (state)\nthis:\n  list_to_nat (x # ls) = c_pair (c_len u) (c_fold (x # ls)) + 1\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "have S11: \"c_fold (x#ls) = c_pair x (c_snd (u-(1::nat)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "from S6"], ["proof (chain)\npicking this:\n  ls \\<noteq> []", "have S11_1: \"c_fold (x#ls) = c_pair x (c_fold ls)\""], ["proof (prove)\nusing this:\n  ls \\<noteq> []\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_fold ls)", "by (rule c_fold_0)"], ["proof (state)\nthis:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "from S3"], ["proof (chain)\npicking this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))", "have S11_2: \"c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u-(1::nat))))\""], ["proof (prove)\nusing this:\n  ls = c_unfold (c_len u) (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))", "by simp"], ["proof (state)\nthis:\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "from S1 S11_2"], ["proof (chain)\npicking this:\n  0 < c_len u\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))", "have S11_3: \"c_fold ls = c_snd (u-(1::nat))\""], ["proof (prove)\nusing this:\n  0 < c_len u\n  c_fold ls = c_fold (c_unfold (c_len u) (c_snd (u - 1)))\n\ngoal (1 subgoal):\n 1. c_fold ls = c_snd (u - 1)", "by (simp add: th_2)"], ["proof (state)\nthis:\n  c_fold ls = c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "from S11_1 S11_3"], ["proof (chain)\npicking this:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n  c_fold ls = c_snd (u - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_fold (x # ls) = c_pair x (c_fold ls)\n  c_fold ls = c_snd (u - 1)\n\ngoal (1 subgoal):\n 1. c_fold (x # ls) = c_pair x (c_snd (u - 1))", "by simp"], ["proof (state)\nthis:\n  c_fold (x # ls) = c_pair x (c_snd (u - 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_fold (x # ls) = c_pair x (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow>\n    c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "from S7 S10 S11"], ["proof (chain)\npicking this:\n  c_cons x u = list_to_nat (x # ls)\n  list_to_nat (x # ls) = c_pair (c_len u) (c_fold (x # ls)) + 1\n  c_fold (x # ls) = c_pair x (c_snd (u - 1))", "show ?thesis"], ["proof (prove)\nusing this:\n  c_cons x u = list_to_nat (x # ls)\n  list_to_nat (x # ls) = c_pair (c_len u) (c_fold (x # ls)) + 1\n  c_fold (x # ls) = c_pair x (c_snd (u - 1))\n\ngoal (1 subgoal):\n 1. c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "by simp"], ["proof (state)\nthis:\n  c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_cons_aux3: \"c_cons = (\\<lambda> x u. (sgn2 u)*((c_pair 0 x)+1) + (sgn1 u)*((c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons =\n    (\\<lambda>x u.\n        sgn2 u * (c_pair 0 x + 1) +\n        sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))", "proof (rule ext, rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x u.\n       c_cons x u =\n       sgn2 u * (c_pair 0 x + 1) +\n       sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "fix x u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x u.\n       c_cons x u =\n       sgn2 u * (c_pair 0 x + 1) +\n       sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "show \"c_cons x u = (sgn2 u)*((c_pair 0 x)+1) + (sgn1 u)*((c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1)\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n 2. \\<not> ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "assume A1: \"u=0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n 2. \\<not> ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "then"], ["proof (chain)\npicking this:\n  u = 0", "have \"?R = (c_pair 0 x)+1\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n    c_pair 0 x + 1", "by simp"], ["proof (state)\nthis:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair 0 x + 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n 2. \\<not> ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "moreover"], ["proof (state)\nthis:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair 0 x + 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n 2. \\<not> ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "from A1"], ["proof (chain)\npicking this:\n  u = 0", "have \"c_cons x u = (c_pair 0 x)+1\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. c_cons x u = c_pair 0 x + 1", "by (simp add: c_cons_aux1)"], ["proof (state)\nthis:\n  c_cons x u = c_pair 0 x + 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n 2. \\<not> ?P \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "ultimately"], ["proof (chain)\npicking this:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair 0 x + 1\n  c_cons x u = c_pair 0 x + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair 0 x + 1\n  c_cons x u = c_pair 0 x + 1\n\ngoal (1 subgoal):\n 1. c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "by simp"], ["proof (state)\nthis:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "assume A1: \"u\\<noteq>0\""], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have S1: \"?R = (c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n    c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "by simp"], ["proof (state)\nthis:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "from A1"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have S2: \"c_cons x u = (c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "by (simp add: c_cons_aux2)"], ["proof (state)\nthis:\n  c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "from S1 S2"], ["proof (chain)\npicking this:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n  c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1", "have \"c_cons x u = ?R\""], ["proof (prove)\nusing this:\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1) =\n  c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n  c_cons x u = c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1\n\ngoal (1 subgoal):\n 1. c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "by simp"], ["proof (state)\nthis:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "then"], ["proof (chain)\npicking this:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n\ngoal (1 subgoal):\n 1. c_cons x u =\n    sgn2 u * (c_pair 0 x + 1) +\n    sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)", "."], ["proof (state)\nthis:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_cons x u =\n  sgn2 u * (c_pair 0 x + 1) +\n  sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_cons_pos: \"c_cons x u > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c_cons x u", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < c_cons x u\n 2. \\<not> ?P \\<Longrightarrow> 0 < c_cons x u", "assume \"u=0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> 0 < c_cons x u\n 2. \\<not> ?P \\<Longrightarrow> 0 < c_cons x u", "then"], ["proof (chain)\npicking this:\n  u = 0", "show \"c_cons x u > 0\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. 0 < c_cons x u", "by (simp add: c_cons_aux1)"], ["proof (state)\nthis:\n  0 < c_cons x u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < c_cons x u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < c_cons x u", "assume \"\\<not> u=0\""], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < c_cons x u", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have \"u>0\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < u", "by simp"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < c_cons x u", "then"], ["proof (chain)\npicking this:\n  0 < u", "show \"c_cons x u > 0\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < c_cons x u", "by (simp add: c_cons_aux2)"], ["proof (state)\nthis:\n  0 < c_cons x u\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem c_cons_is_pr: \"c_cons \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "have \"c_cons = (\\<lambda> x u. (sgn2 u)*((c_pair 0 x)+1) + (sgn1 u)*((c_pair (c_len u) (c_pair x (c_snd (u-(1::nat))))) + 1))\" (is \"_ = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons =\n    (\\<lambda>x u.\n        sgn2 u * (c_pair 0 x + 1) +\n        sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))", "by (simp add: c_cons_aux3)"], ["proof (state)\nthis:\n  c_cons =\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "moreover"], ["proof (state)\nthis:\n  c_cons =\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "from c_pair_is_pr c_len_is_pr"], ["proof (chain)\npicking this:\n  c_pair \\<in> PrimRec2\n  c_len \\<in> PrimRec1", "have \"?R \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_pair \\<in> PrimRec2\n  c_len \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x u.\n        sgn2 u * (c_pair 0 x + 1) +\n        sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n    \\<in> PrimRec2", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n  \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "ultimately"], ["proof (chain)\npicking this:\n  c_cons =\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n  \\<in> PrimRec2", "show ?thesis"], ["proof (prove)\nusing this:\n  c_cons =\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n  (\\<lambda>x u.\n      sgn2 u * (c_pair 0 x + 1) +\n      sgn1 u * (c_pair (c_len u) (c_pair x (c_snd (u - 1))) + 1))\n  \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_cons \\<in> PrimRec2", "by simp"], ["proof (state)\nthis:\n  c_cons \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  c_drop :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"c_drop = PrimRecOp (\\<lambda> x. x) (\\<lambda> x y z. c_tl y)\""], ["", "lemma c_drop_at_0 [simp]: \"c_drop 0 x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_drop 0 x = x", "by (simp add: c_drop_def)"], ["", "lemma c_drop_at_Suc: \"c_drop (Suc y) x = c_tl (c_drop y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_drop (Suc y) x = c_tl (c_drop y x)", "by (simp add: c_drop_def)"], ["", "theorem c_drop_is_pr: \"c_drop \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "have \"(\\<lambda> x. x) \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x) \\<in> PrimRec1", "by (rule pr_id1_1)"], ["proof (state)\nthis:\n  (\\<lambda>x. x) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>x. x) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "from c_tl_is_pr"], ["proof (chain)\npicking this:\n  c_tl \\<in> PrimRec1", "have \"(\\<lambda> x y z. c_tl y) \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  c_tl \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. c_tl y) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x y z. c_tl y) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>x. x) \\<in> PrimRec1\n  (\\<lambda>x y z. c_tl y) \\<in> PrimRec3", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. x) \\<in> PrimRec1\n  (\\<lambda>x y z. c_tl y) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. c_drop \\<in> PrimRec2", "by (simp add: c_drop_def pr_rec)"], ["proof (state)\nthis:\n  c_drop \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_tl_c_drop: \"c_tl (c_drop y x) = c_drop y (c_tl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl (c_drop y x) = c_drop y (c_tl x)", "apply(induct y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c_tl (c_drop 0 x) = c_drop 0 (c_tl x)\n 2. \\<And>y.\n       c_tl (c_drop y x) = c_drop y (c_tl x) \\<Longrightarrow>\n       c_tl (c_drop (Suc y) x) = c_drop (Suc y) (c_tl x)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       c_tl (c_drop y x) = c_drop y (c_tl x) \\<Longrightarrow>\n       c_tl (c_drop (Suc y) x) = c_drop (Suc y) (c_tl x)", "apply(simp add: c_drop_at_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_drop_at_Suc1: \"c_drop (Suc y) x = c_drop y (c_tl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_drop (Suc y) x = c_drop y (c_tl x)", "apply(simp add: c_drop_at_Suc c_tl_c_drop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_drop_df: \"\\<forall> ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>ls. drop 0 ls = nat_to_list (c_drop 0 (list_to_nat ls))\n 2. \\<And>n.\n       \\<forall>ls.\n          drop n ls =\n          nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n       \\<forall>ls.\n          drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "show \"\\<forall> ls. drop 0 ls = nat_to_list (c_drop 0 (list_to_nat ls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ls. drop 0 ls = nat_to_list (c_drop 0 (list_to_nat ls))", "by (simp add: c_drop_def)"], ["proof (state)\nthis:\n  \\<forall>ls. drop 0 ls = nat_to_list (c_drop 0 (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>ls.\n          drop n ls =\n          nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n       \\<forall>ls.\n          drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>ls.\n          drop n ls =\n          nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n       \\<forall>ls.\n          drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>ls.\n          drop n ls =\n          nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n       \\<forall>ls.\n          drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "assume A1: \"\\<forall> ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\""], ["proof (state)\nthis:\n  \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>ls.\n          drop n ls =\n          nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n       \\<forall>ls.\n          drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "then"], ["proof (chain)\npicking this:\n  \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))", "show \"\\<forall> ls. drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))\""], ["proof (prove)\nusing this:\n  \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "fix ls::\"nat list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "have S1: \"drop (Suc n) ls = drop n (tl ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (Suc n) ls = drop n (tl ls)", "by (rule drop_Suc)"], ["proof (state)\nthis:\n  drop (Suc n) ls = drop n (tl ls)\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "from A1"], ["proof (chain)\npicking this:\n  \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))", "have S2: \"drop n (tl ls) = nat_to_list (c_drop n (list_to_nat (tl ls)))\""], ["proof (prove)\nusing this:\n  \\<forall>ls. drop n ls = nat_to_list (c_drop n (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. drop n (tl ls) = nat_to_list (c_drop n (list_to_nat (tl ls)))", "by simp"], ["proof (state)\nthis:\n  drop n (tl ls) = nat_to_list (c_drop n (list_to_nat (tl ls)))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "also"], ["proof (state)\nthis:\n  drop n (tl ls) = nat_to_list (c_drop n (list_to_nat (tl ls)))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "have \"\\<dots> = nat_to_list (c_drop n (c_tl (list_to_nat ls)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_list (c_drop n (list_to_nat (tl ls))) =\n    nat_to_list (c_drop n (c_tl (list_to_nat ls)))", "by  (simp add: c_tl_eq_tl)"], ["proof (state)\nthis:\n  nat_to_list (c_drop n (list_to_nat (tl ls))) =\n  nat_to_list (c_drop n (c_tl (list_to_nat ls)))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "also"], ["proof (state)\nthis:\n  nat_to_list (c_drop n (list_to_nat (tl ls))) =\n  nat_to_list (c_drop n (c_tl (list_to_nat ls)))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "have \"\\<dots> = nat_to_list (c_drop (Suc n) (list_to_nat ls))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_list (c_drop n (c_tl (list_to_nat ls))) =\n    nat_to_list (c_drop (Suc n) (list_to_nat ls))", "by  (simp add: c_drop_at_Suc1)"], ["proof (state)\nthis:\n  nat_to_list (c_drop n (c_tl (list_to_nat ls))) =\n  nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "finally"], ["proof (chain)\npicking this:\n  drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "have \"drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))\""], ["proof (prove)\nusing this:\n  drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "by simp"], ["proof (state)\nthis:\n  drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "with S1"], ["proof (chain)\npicking this:\n  drop (Suc n) ls = drop n (tl ls)\n  drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "have \"drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))\""], ["proof (prove)\nusing this:\n  drop (Suc n) ls = drop n (tl ls)\n  drop n (tl ls) = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "by simp"], ["proof (state)\nthis:\n  drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "}"], ["proof (state)\nthis:\n  drop (Suc n) ?ls2 = nat_to_list (c_drop (Suc n) (list_to_nat ?ls2))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop n ls = nat_to_list (c_drop n (list_to_nat ls)) \\<Longrightarrow>\n    \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "then"], ["proof (chain)\npicking this:\n  drop (Suc n) ?ls2 = nat_to_list (c_drop (Suc n) (list_to_nat ?ls2))", "show ?thesis"], ["proof (prove)\nusing this:\n  drop (Suc n) ?ls2 = nat_to_list (c_drop (Suc n) (list_to_nat ?ls2))\n\ngoal (1 subgoal):\n 1. \\<forall>ls.\n       drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))", "by blast"], ["proof (state)\nthis:\n  \\<forall>ls.\n     drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>ls.\n     drop (Suc n) ls = nat_to_list (c_drop (Suc n) (list_to_nat ls))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  c_nth :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"c_nth = (\\<lambda> x n. c_hd (c_drop n x))\""], ["", "lemma c_nth_is_pr: \"c_nth \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth \\<in> PrimRec2", "proof (unfold c_nth_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x n. c_hd (c_drop n x)) \\<in> PrimRec2", "from c_hd_is_pr c_drop_is_pr"], ["proof (chain)\npicking this:\n  c_hd \\<in> PrimRec1\n  c_drop \\<in> PrimRec2", "show \"(\\<lambda>x n. c_hd (c_drop n x)) \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_hd \\<in> PrimRec1\n  c_drop \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x n. c_hd (c_drop n x)) \\<in> PrimRec2", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x n. c_hd (c_drop n x)) \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_nth_at_0: \"c_nth x 0 = c_hd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth x 0 = c_hd x", "by (simp add: c_nth_def)"], ["", "lemma c_hd_c_cons [simp]: \"c_hd (c_cons x y) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd (c_cons x y) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_hd (c_cons x y) = x", "have \"c_cons x y > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c_cons x y", "by (rule c_cons_pos)"], ["proof (state)\nthis:\n  0 < c_cons x y\n\ngoal (1 subgoal):\n 1. c_hd (c_cons x y) = x", "then"], ["proof (chain)\npicking this:\n  0 < c_cons x y", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c_cons x y\n\ngoal (1 subgoal):\n 1. c_hd (c_cons x y) = x", "by (simp add: c_hd_def c_cons_def)"], ["proof (state)\nthis:\n  c_hd (c_cons x y) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_tl_c_cons [simp]: \"c_tl (c_cons x y) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl (c_cons x y) = y", "by (simp add: c_tl_def c_cons_def)"], ["", "definition\n  c_f_list :: \"(nat \\<Rightarrow> nat \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"c_f_list = (\\<lambda> f.\n    let g = (%x. c_cons (f 0 x) 0); h = (%a b c. c_cons (f (Suc a) c) b) in PrimRecOp g h)\""], ["", "lemma c_f_list_at_0: \"c_f_list f 0 x = c_cons (f 0 x) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f 0 x = c_cons (f 0 x) 0", "by (simp add: c_f_list_def Let_def)"], ["", "lemma c_f_list_at_Suc: \"c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)", "by ((simp add: c_f_list_def Let_def))"], ["", "lemma c_f_list_is_pr: \"f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "assume A1: \"f \\<in> PrimRec2\""], ["proof (state)\nthis:\n  f \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "let ?g = \"(%x. c_cons (f 0 x) 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "from A1 c_cons_is_pr"], ["proof (chain)\npicking this:\n  f \\<in> PrimRec2\n  c_cons \\<in> PrimRec2", "have S1: \"?g \\<in> PrimRec1\""], ["proof (prove)\nusing this:\n  f \\<in> PrimRec2\n  c_cons \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_cons (f 0 x) 0) \\<in> PrimRec1", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x. c_cons (f 0 x) 0) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "let ?h = \"(%a b c. c_cons (f (Suc a) c) b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "from A1 c_cons_is_pr"], ["proof (chain)\npicking this:\n  f \\<in> PrimRec2\n  c_cons \\<in> PrimRec2", "have S2: \"?h \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  f \\<in> PrimRec2\n  c_cons \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>a b c. c_cons (f (Suc a) c) b) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>a b c. c_cons (f (Suc a) c) b) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2 \\<Longrightarrow> c_f_list f \\<in> PrimRec2", "from S1 S2"], ["proof (chain)\npicking this:\n  (\\<lambda>x. c_cons (f 0 x) 0) \\<in> PrimRec1\n  (\\<lambda>a b c. c_cons (f (Suc a) c) b) \\<in> PrimRec3", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. c_cons (f 0 x) 0) \\<in> PrimRec1\n  (\\<lambda>a b c. c_cons (f (Suc a) c) b) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2", "by (simp add: pr_rec c_f_list_def Let_def)"], ["proof (state)\nthis:\n  c_f_list f \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_f_list_to_f_0: \"f y x = c_hd (c_f_list f y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f y x = c_hd (c_f_list f y x)", "apply(induct y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f 0 x = c_hd (c_f_list f 0 x)\n 2. \\<And>y.\n       f y x = c_hd (c_f_list f y x) \\<Longrightarrow>\n       f (Suc y) x = c_hd (c_f_list f (Suc y) x)", "apply(simp add: c_f_list_at_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       f y x = c_hd (c_f_list f y x) \\<Longrightarrow>\n       f (Suc y) x = c_hd (c_f_list f (Suc y) x)", "apply(simp add: c_f_list_at_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_f_list_to_f: \"f = (\\<lambda> y x. c_hd (c_f_list f y x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (\\<lambda>y x. c_hd (c_f_list f y x))", "apply(rule ext, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x. f y x = c_hd (c_f_list f y x)", "apply(rule c_f_list_to_f_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_f_list_f_is_pr: \"c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2", "assume A1: \"c_f_list f \\<in> PrimRec2\""], ["proof (state)\nthis:\n  c_f_list f \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2", "have S1: \"f = (\\<lambda> y x. c_hd (c_f_list f y x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (\\<lambda>y x. c_hd (c_f_list f y x))", "by (rule c_f_list_to_f)"], ["proof (state)\nthis:\n  f = (\\<lambda>y x. c_hd (c_f_list f y x))\n\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2", "from A1 c_hd_is_pr"], ["proof (chain)\npicking this:\n  c_f_list f \\<in> PrimRec2\n  c_hd \\<in> PrimRec1", "have S2: \"(\\<lambda> y x. c_hd (c_f_list f y x)) \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_f_list f \\<in> PrimRec2\n  c_hd \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>y x. c_hd (c_f_list f y x)) \\<in> PrimRec2", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>y x. c_hd (c_f_list f y x)) \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2 \\<Longrightarrow> f \\<in> PrimRec2", "with S1"], ["proof (chain)\npicking this:\n  f = (\\<lambda>y x. c_hd (c_f_list f y x))\n  (\\<lambda>y x. c_hd (c_f_list f y x)) \\<in> PrimRec2", "show ?thesis"], ["proof (prove)\nusing this:\n  f = (\\<lambda>y x. c_hd (c_f_list f y x))\n  (\\<lambda>y x. c_hd (c_f_list f y x)) \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2", "by simp"], ["proof (state)\nthis:\n  f \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_f_list_lm_1: \"c_nth (c_cons x y) (Suc z) = c_nth y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth (c_cons x y) (Suc z) = c_nth y z", "by (simp add: c_nth_def c_drop_at_Suc1)"], ["", "lemma c_f_list_lm_2: \" z < Suc n \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "assume \"z < Suc n\""], ["proof (state)\nthis:\n  z < Suc n\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "then"], ["proof (chain)\npicking this:\n  z < Suc n", "have \"Suc n - z = Suc (n-z)\""], ["proof (prove)\nusing this:\n  z < Suc n\n\ngoal (1 subgoal):\n 1. Suc n - z = Suc (n - z)", "by arith"], ["proof (state)\nthis:\n  Suc n - z = Suc (n - z)\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "then"], ["proof (chain)\npicking this:\n  Suc n - z = Suc (n - z)", "have \"c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f (Suc n) x) (Suc (n - z))\""], ["proof (prove)\nusing this:\n  Suc n - z = Suc (n - z)\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f (Suc n) x) (Suc (n - z))", "by simp"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n  c_nth (c_f_list f (Suc n) x) (Suc (n - z))\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n  c_nth (c_f_list f (Suc n) x) (Suc (n - z))\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "have \"\\<dots> = c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc (n - z)) =\n    c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z))", "by (simp add: c_f_list_at_Suc)"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc (n - z)) =\n  c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z))\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc (n - z)) =\n  c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z))\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "have \"\\<dots> = c_nth (c_f_list f n x) (n - z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z)) =\n    c_nth (c_f_list f n x) (n - z)", "by (simp add: c_f_list_lm_1)"], ["proof (state)\nthis:\n  c_nth (c_cons (f (Suc n) x) (c_f_list f n x)) (Suc (n - z)) =\n  c_nth (c_f_list f n x) (n - z)\n\ngoal (1 subgoal):\n 1. z < Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "finally"], ["proof (chain)\npicking this:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "by simp"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_f_list_nth: \"z \\<le> y \\<longrightarrow> c_nth (c_f_list f y x) (y-z) = f z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> y \\<longrightarrow> c_nth (c_f_list f y x) (y - z) = f z x", "proof (induct y)"], ["proof (state)\ngoal (2 subgoals):\n 1. z \\<le> 0 \\<longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x\n 2. \\<And>y.\n       z \\<le> y \\<longrightarrow>\n       c_nth (c_f_list f y x) (y - z) = f z x \\<Longrightarrow>\n       z \\<le> Suc y \\<longrightarrow>\n       c_nth (c_f_list f (Suc y) x) (Suc y - z) = f z x", "show \"z \\<le> 0 \\<longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "assume \"z \\<le> 0\""], ["proof (state)\nthis:\n  z \\<le> 0\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "then"], ["proof (chain)\npicking this:\n  z \\<le> 0", "have A1: \"z=0\""], ["proof (prove)\nusing this:\n  z \\<le> 0\n\ngoal (1 subgoal):\n 1. z = 0", "by simp"], ["proof (state)\nthis:\n  z = 0\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "then"], ["proof (chain)\npicking this:\n  z = 0", "have \"c_nth (c_f_list f 0 x) (0 - z) = c_nth (c_f_list f 0 x) 0\""], ["proof (prove)\nusing this:\n  z = 0\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f 0 x) (0 - z) = c_nth (c_f_list f 0 x) 0", "by simp"], ["proof (state)\nthis:\n  c_nth (c_f_list f 0 x) (0 - z) = c_nth (c_f_list f 0 x) 0\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f 0 x) (0 - z) = c_nth (c_f_list f 0 x) 0\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "have \"\\<dots> = c_hd (c_f_list f 0 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth (c_f_list f 0 x) 0 = c_hd (c_f_list f 0 x)", "by (simp add: c_nth_at_0)"], ["proof (state)\nthis:\n  c_nth (c_f_list f 0 x) 0 = c_hd (c_f_list f 0 x)\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f 0 x) 0 = c_hd (c_f_list f 0 x)\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "have \"\\<dots> = c_hd (c_cons (f 0 x) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd (c_f_list f 0 x) = c_hd (c_cons (f 0 x) 0)", "by (simp add: c_f_list_at_0)"], ["proof (state)\nthis:\n  c_hd (c_f_list f 0 x) = c_hd (c_cons (f 0 x) 0)\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "also"], ["proof (state)\nthis:\n  c_hd (c_f_list f 0 x) = c_hd (c_cons (f 0 x) 0)\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "have \"\\<dots> = f 0 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd (c_cons (f 0 x) 0) = f 0 x", "by simp"], ["proof (state)\nthis:\n  c_hd (c_cons (f 0 x) 0) = f 0 x\n\ngoal (1 subgoal):\n 1. z \\<le> 0 \\<Longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x", "finally"], ["proof (chain)\npicking this:\n  c_nth (c_f_list f 0 x) (0 - z) = f 0 x", "show \"c_nth (c_f_list f 0 x) (0 - z) = f z x\""], ["proof (prove)\nusing this:\n  c_nth (c_f_list f 0 x) (0 - z) = f 0 x\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f 0 x) (0 - z) = f z x", "by (simp add: A1)"], ["proof (state)\nthis:\n  c_nth (c_f_list f 0 x) (0 - z) = f z x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<le> 0 \\<longrightarrow> c_nth (c_f_list f 0 x) (0 - z) = f z x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       z \\<le> y \\<longrightarrow>\n       c_nth (c_f_list f y x) (y - z) = f z x \\<Longrightarrow>\n       z \\<le> Suc y \\<longrightarrow>\n       c_nth (c_f_list f (Suc y) x) (Suc y - z) = f z x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       z \\<le> y \\<longrightarrow>\n       c_nth (c_f_list f y x) (y - z) = f z x \\<Longrightarrow>\n       z \\<le> Suc y \\<longrightarrow>\n       c_nth (c_f_list f (Suc y) x) (Suc y - z) = f z x", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       z \\<le> y \\<longrightarrow>\n       c_nth (c_f_list f y x) (y - z) = f z x \\<Longrightarrow>\n       z \\<le> Suc y \\<longrightarrow>\n       c_nth (c_f_list f (Suc y) x) (Suc y - z) = f z x", "assume A2: \" z \\<le> n \\<longrightarrow> c_nth (c_f_list f n x) (n - z) = f z x\""], ["proof (state)\nthis:\n  z \\<le> n \\<longrightarrow> c_nth (c_f_list f n x) (n - z) = f z x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       z \\<le> y \\<longrightarrow>\n       c_nth (c_f_list f y x) (y - z) = f z x \\<Longrightarrow>\n       z \\<le> Suc y \\<longrightarrow>\n       c_nth (c_f_list f (Suc y) x) (Suc y - z) = f z x", "show \"z \\<le> Suc n \\<longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> Suc n \\<longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<le> Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "assume A3: \"z \\<le> Suc n\""], ["proof (state)\nthis:\n  z \\<le> Suc n\n\ngoal (1 subgoal):\n 1. z \\<le> Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "show \" z \\<le> Suc n \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> Suc n \\<Longrightarrow>\n    c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<le> Suc n; ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n 2. \\<lbrakk>z \\<le> Suc n; \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "assume AA1: \"z \\<le> n\""], ["proof (state)\nthis:\n  z \\<le> n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<le> Suc n; ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n 2. \\<lbrakk>z \\<le> Suc n; \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "then"], ["proof (chain)\npicking this:\n  z \\<le> n", "have AA2: \"z < Suc n\""], ["proof (prove)\nusing this:\n  z \\<le> n\n\ngoal (1 subgoal):\n 1. z < Suc n", "by simp"], ["proof (state)\nthis:\n  z < Suc n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<le> Suc n; ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n 2. \\<lbrakk>z \\<le> Suc n; \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "from A2 this"], ["proof (chain)\npicking this:\n  z \\<le> n \\<longrightarrow> c_nth (c_f_list f n x) (n - z) = f z x\n  z < Suc n", "have S1: \"c_nth (c_f_list f n x) (n - z) = f z x\""], ["proof (prove)\nusing this:\n  z \\<le> n \\<longrightarrow> c_nth (c_f_list f n x) (n - z) = f z x\n  z < Suc n\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f n x) (n - z) = f z x", "by auto"], ["proof (state)\nthis:\n  c_nth (c_f_list f n x) (n - z) = f z x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<le> Suc n; ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n 2. \\<lbrakk>z \\<le> Suc n; \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "from AA2"], ["proof (chain)\npicking this:\n  z < Suc n", "have \"c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\""], ["proof (prove)\nusing this:\n  z < Suc n\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f n x) (n - z)", "by (rule c_f_list_lm_2)"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<le> Suc n; ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n 2. \\<lbrakk>z \\<le> Suc n; \\<not> ?P\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "with S1"], ["proof (chain)\npicking this:\n  c_nth (c_f_list f n x) (n - z) = f z x\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)", "show \"c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\""], ["proof (prove)\nusing this:\n  c_nth (c_f_list f n x) (n - z) = f z x\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f n x) (n - z)\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "by simp"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "assume \"\\<not> z \\<le> n\""], ["proof (state)\nthis:\n  \\<not> z \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "from A3 this"], ["proof (chain)\npicking this:\n  z \\<le> Suc n\n  \\<not> z \\<le> n", "have S1: \"z = Suc n\""], ["proof (prove)\nusing this:\n  z \\<le> Suc n\n  \\<not> z \\<le> n\n\ngoal (1 subgoal):\n 1. z = Suc n", "by simp"], ["proof (state)\nthis:\n  z = Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "then"], ["proof (chain)\npicking this:\n  z = Suc n", "have S2: \"Suc n - z = 0\""], ["proof (prove)\nusing this:\n  z = Suc n\n\ngoal (1 subgoal):\n 1. Suc n - z = 0", "by simp"], ["proof (state)\nthis:\n  Suc n - z = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "then"], ["proof (chain)\npicking this:\n  Suc n - z = 0", "have \"c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f (Suc n) x) 0\""], ["proof (prove)\nusing this:\n  Suc n - z = 0\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) =\n    c_nth (c_f_list f (Suc n) x) 0", "by simp"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f (Suc n) x) 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = c_nth (c_f_list f (Suc n) x) 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "have \"\\<dots> = c_hd (c_f_list f (Suc n) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) 0 = c_hd (c_f_list f (Suc n) x)", "by (simp add: c_nth_at_0)"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) 0 = c_hd (c_f_list f (Suc n) x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "also"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) 0 = c_hd (c_f_list f (Suc n) x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "have \"\\<dots> = c_hd (c_cons (f (Suc n) x) (c_f_list f n x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd (c_f_list f (Suc n) x) =\n    c_hd (c_cons (f (Suc n) x) (c_f_list f n x))", "by (simp add: c_f_list_at_Suc)"], ["proof (state)\nthis:\n  c_hd (c_f_list f (Suc n) x) = c_hd (c_cons (f (Suc n) x) (c_f_list f n x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "also"], ["proof (state)\nthis:\n  c_hd (c_f_list f (Suc n) x) = c_hd (c_cons (f (Suc n) x) (c_f_list f n x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "have \"\\<dots> = f (Suc n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_hd (c_cons (f (Suc n) x) (c_f_list f n x)) = f (Suc n) x", "by simp"], ["proof (state)\nthis:\n  c_hd (c_cons (f (Suc n) x) (c_f_list f n x)) = f (Suc n) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> Suc n; \\<not> z \\<le> n\\<rbrakk>\n    \\<Longrightarrow> c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "finally"], ["proof (chain)\npicking this:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f (Suc n) x", "show \"c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\""], ["proof (prove)\nusing this:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f (Suc n) x\n\ngoal (1 subgoal):\n 1. c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x", "by (simp add: S1)"], ["proof (state)\nthis:\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<le> Suc n \\<Longrightarrow>\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<le> Suc n \\<longrightarrow>\n  c_nth (c_f_list f (Suc n) x) (Suc n - z) = f z x\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem th_pr_rec: \"\\<lbrakk> g \\<in> PrimRec1; h \\<in> PrimRec3; (\\<forall> x. (f 0 x) = (g x)); (\\<forall> x y. (f (Suc y) x) = h y (f y x) x) \\<rbrakk> \\<Longrightarrow> f \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume g_is_pr: \"g \\<in> PrimRec1\""], ["proof (state)\nthis:\n  g \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume h_is_pr: \"h \\<in> PrimRec3\""], ["proof (state)\nthis:\n  h \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume f_0: \"\\<forall> x. f 0 x = g x\""], ["proof (state)\nthis:\n  \\<forall>x. f 0 x = g x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume f_1: \"\\<forall> x y. (f (Suc y) x) = h y (f y x) x\""], ["proof (state)\nthis:\n  \\<forall>x y. f (Suc y) x = h y (f y x) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "let ?f = \"PrimRecOp g h\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "from g_is_pr h_is_pr"], ["proof (chain)\npicking this:\n  g \\<in> PrimRec1\n  h \\<in> PrimRec3", "have S1: \"?f \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  g \\<in> PrimRec1\n  h \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. PrimRecOp g h \\<in> PrimRec2", "by (rule pr_rec)"], ["proof (state)\nthis:\n  PrimRecOp g h \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "have f_2:\"\\<forall> x. ?f 0 x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. PrimRecOp g h 0 x = g x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. PrimRecOp g h 0 x = g x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "have f_3: \"\\<forall> x y. (?f (Suc y) x) = h y (?f y x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. PrimRecOp g h (Suc y) x = h y (PrimRecOp g h y x) x", "by simp"], ["proof (state)\nthis:\n  \\<forall>x y. PrimRecOp g h (Suc y) x = h y (PrimRecOp g h y x) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "have S2: \"f = ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = PrimRecOp g h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = PrimRecOp g h", "have \"\\<And> x y. f y x = ?f y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. f y x = PrimRecOp g h y x", "apply(induct_tac y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. f 0 x = PrimRecOp g h 0 x\n 2. \\<And>x y n.\n       f n x = PrimRecOp g h n x \\<Longrightarrow>\n       f (Suc n) x = PrimRecOp g h (Suc n) x", "apply(insert f_0 f_1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x. f 0 x = g x;\n        \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n       \\<Longrightarrow> f 0 x = PrimRecOp g h 0 x\n 2. \\<And>x y n.\n       \\<lbrakk>f n x = PrimRecOp g h n x; \\<forall>x. f 0 x = g x;\n        \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n       \\<Longrightarrow> f (Suc n) x = PrimRecOp g h (Suc n) x", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f ?y ?x = PrimRecOp g h ?y ?x\n\ngoal (1 subgoal):\n 1. f = PrimRecOp g h", "then"], ["proof (chain)\npicking this:\n  f ?y ?x = PrimRecOp g h ?y ?x", "show \"f = ?f\""], ["proof (prove)\nusing this:\n  f ?y ?x = PrimRecOp g h ?y ?x\n\ngoal (1 subgoal):\n 1. f = PrimRecOp g h", "by (simp add: ext)"], ["proof (state)\nthis:\n  f = PrimRecOp g h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = PrimRecOp g h\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; h \\<in> PrimRec3; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f y x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "from S1 S2"], ["proof (chain)\npicking this:\n  PrimRecOp g h \\<in> PrimRec2\n  f = PrimRecOp g h", "show ?thesis"], ["proof (prove)\nusing this:\n  PrimRecOp g h \\<in> PrimRec2\n  f = PrimRecOp g h\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2", "by simp"], ["proof (state)\nthis:\n  f \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem th_rec: \"\\<lbrakk> g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3; (\\<forall> x y. \\<alpha> y x \\<le> y); (\\<forall> x. (f 0 x) = (g x)); (\\<forall> x y. (f (Suc y) x) = h y (f (\\<alpha> y x) x) x) \\<rbrakk> \\<Longrightarrow> f \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume g_is_pr: \"g \\<in> PrimRec1\""], ["proof (state)\nthis:\n  g \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume a_is_pr: \"\\<alpha> \\<in> PrimRec2\""], ["proof (state)\nthis:\n  \\<alpha> \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume h_is_pr: \"h \\<in> PrimRec3\""], ["proof (state)\nthis:\n  h \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume a_le: \"(\\<forall> x y. \\<alpha> y x \\<le> y)\""], ["proof (state)\nthis:\n  \\<forall>x y. \\<alpha> y x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume f_0: \"\\<forall> x. f 0 x = g x\""], ["proof (state)\nthis:\n  \\<forall>x. f 0 x = g x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "assume f_1: \"\\<forall> x y. (f (Suc y) x) = h y (f (\\<alpha> y x) x) x\""], ["proof (state)\nthis:\n  \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "let ?g' = \"\\<lambda> x. c_cons (g x) 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "let ?h' = \"\\<lambda> a b c. c_cons (h a (c_nth b (a - (\\<alpha> a c))) c) b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "let ?r = \"c_f_list f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "from g_is_pr c_cons_is_pr"], ["proof (chain)\npicking this:\n  g \\<in> PrimRec1\n  c_cons \\<in> PrimRec2", "have g'_is_pr: \"?g' \\<in> PrimRec1\""], ["proof (prove)\nusing this:\n  g \\<in> PrimRec1\n  c_cons \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c_cons (g x) 0) \\<in> PrimRec1", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x. c_cons (g x) 0) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "from h_is_pr c_cons_is_pr c_nth_is_pr a_is_pr"], ["proof (chain)\npicking this:\n  h \\<in> PrimRec3\n  c_cons \\<in> PrimRec2\n  c_nth \\<in> PrimRec2\n  \\<alpha> \\<in> PrimRec2", "have h'_is_pr: \"?h' \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  h \\<in> PrimRec3\n  c_cons \\<in> PrimRec2\n  c_nth \\<in> PrimRec2\n  \\<alpha> \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. (\\<lambda>a b c. c_cons (h a (c_nth b (a - \\<alpha> a c)) c) b)\n    \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>a b c. c_cons (h a (c_nth b (a - \\<alpha> a c)) c) b)\n  \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "have S1: \"\\<forall> x. ?r 0 x = ?g' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. c_f_list f 0 x = c_cons (g x) 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. c_f_list f 0 x = c_cons (g x) 0", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. c_f_list f 0 x = c_cons (g x) 0", "have \"?r 0 x = c_cons (f 0 x) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f 0 x = c_cons (f 0 x) 0", "by (rule c_f_list_at_0)"], ["proof (state)\nthis:\n  c_f_list f 0 x = c_cons (f 0 x) 0\n\ngoal (1 subgoal):\n 1. \\<And>x. c_f_list f 0 x = c_cons (g x) 0", "with f_0"], ["proof (chain)\npicking this:\n  \\<forall>x. f 0 x = g x\n  c_f_list f 0 x = c_cons (f 0 x) 0", "have \"?r 0 x = c_cons (g x) 0\""], ["proof (prove)\nusing this:\n  \\<forall>x. f 0 x = g x\n  c_f_list f 0 x = c_cons (f 0 x) 0\n\ngoal (1 subgoal):\n 1. c_f_list f 0 x = c_cons (g x) 0", "by simp"], ["proof (state)\nthis:\n  c_f_list f 0 x = c_cons (g x) 0\n\ngoal (1 subgoal):\n 1. \\<And>x. c_f_list f 0 x = c_cons (g x) 0", "then"], ["proof (chain)\npicking this:\n  c_f_list f 0 x = c_cons (g x) 0", "show \"?r 0 x = ?g' x\""], ["proof (prove)\nusing this:\n  c_f_list f 0 x = c_cons (g x) 0\n\ngoal (1 subgoal):\n 1. c_f_list f 0 x = c_cons (g x) 0", "by simp"], ["proof (state)\nthis:\n  c_f_list f 0 x = c_cons (g x) 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x. c_f_list f 0 x = c_cons (g x) 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "have S2: \"\\<forall> x y. ?r (Suc y) x = ?h' y (?r y x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       c_f_list f (Suc y) x =\n       c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n        (c_f_list f y x)", "proof (rule allI, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       c_f_list f (Suc y) x =\n       c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n        (c_f_list f y x)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       c_f_list f (Suc y) x =\n       c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n        (c_f_list f y x)", "show \"?r (Suc y) x = ?h' y (?r y x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "have S2_1: \"?r (Suc y) x = c_cons (f (Suc y) x) (?r y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)", "by (rule c_f_list_at_Suc)"], ["proof (state)\nthis:\n  c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\n\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "with f_1"], ["proof (chain)\npicking this:\n  \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\n  c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)", "have S2_2: \"f (Suc y) x = h y (f (\\<alpha> y x) x) x\""], ["proof (prove)\nusing this:\n  \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\n  c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\n\ngoal (1 subgoal):\n 1. f (Suc y) x = h y (f (\\<alpha> y x) x) x", "by simp"], ["proof (state)\nthis:\n  f (Suc y) x = h y (f (\\<alpha> y x) x) x\n\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "from a_le"], ["proof (chain)\npicking this:\n  \\<forall>x y. \\<alpha> y x \\<le> y", "have S2_3: \"\\<alpha> y x \\<le> y\""], ["proof (prove)\nusing this:\n  \\<forall>x y. \\<alpha> y x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<alpha> y x \\<le> y", "by simp"], ["proof (state)\nthis:\n  \\<alpha> y x \\<le> y\n\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "then"], ["proof (chain)\npicking this:\n  \\<alpha> y x \\<le> y", "have S2_4: \"f (\\<alpha> y x) x = c_nth (?r y x) (y-(\\<alpha> y x))\""], ["proof (prove)\nusing this:\n  \\<alpha> y x \\<le> y\n\ngoal (1 subgoal):\n 1. f (\\<alpha> y x) x = c_nth (c_f_list f y x) (y - \\<alpha> y x)", "by (simp add: c_f_list_nth)"], ["proof (state)\nthis:\n  f (\\<alpha> y x) x = c_nth (c_f_list f y x) (y - \\<alpha> y x)\n\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "from S2_1 S2_2 S2_4"], ["proof (chain)\npicking this:\n  c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\n  f (Suc y) x = h y (f (\\<alpha> y x) x) x\n  f (\\<alpha> y x) x = c_nth (c_f_list f y x) (y - \\<alpha> y x)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_f_list f (Suc y) x = c_cons (f (Suc y) x) (c_f_list f y x)\n  f (Suc y) x = h y (f (\\<alpha> y x) x) x\n  f (\\<alpha> y x) x = c_nth (c_f_list f y x) (y - \\<alpha> y x)\n\ngoal (1 subgoal):\n 1. c_f_list f (Suc y) x =\n    c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n     (c_f_list f y x)", "by simp"], ["proof (state)\nthis:\n  c_f_list f (Suc y) x =\n  c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n   (c_f_list f y x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_f_list f (Suc y) x =\n  c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n   (c_f_list f y x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x y.\n     c_f_list f (Suc y) x =\n     c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n      (c_f_list f y x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "from g'_is_pr h'_is_pr S1 S2"], ["proof (chain)\npicking this:\n  (\\<lambda>x. c_cons (g x) 0) \\<in> PrimRec1\n  (\\<lambda>a b c. c_cons (h a (c_nth b (a - \\<alpha> a c)) c) b)\n  \\<in> PrimRec3\n  \\<forall>x. c_f_list f 0 x = c_cons (g x) 0\n  \\<forall>x y.\n     c_f_list f (Suc y) x =\n     c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n      (c_f_list f y x)", "have S3: \"?r \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. c_cons (g x) 0) \\<in> PrimRec1\n  (\\<lambda>a b c. c_cons (h a (c_nth b (a - \\<alpha> a c)) c) b)\n  \\<in> PrimRec3\n  \\<forall>x. c_f_list f 0 x = c_cons (g x) 0\n  \\<forall>x y.\n     c_f_list f (Suc y) x =\n     c_cons (h y (c_nth (c_f_list f y x) (y - \\<alpha> y x)) x)\n      (c_f_list f y x)\n\ngoal (1 subgoal):\n 1. c_f_list f \\<in> PrimRec2", "by (rule th_pr_rec)"], ["proof (state)\nthis:\n  c_f_list f \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>g \\<in> PrimRec1; \\<alpha> \\<in> PrimRec2; h \\<in> PrimRec3;\n     \\<forall>x y. \\<alpha> y x \\<le> y; \\<forall>x. f 0 x = g x;\n     \\<forall>x y. f (Suc y) x = h y (f (\\<alpha> y x) x) x\\<rbrakk>\n    \\<Longrightarrow> f \\<in> PrimRec2", "then"], ["proof (chain)\npicking this:\n  c_f_list f \\<in> PrimRec2", "show \"f \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_f_list f \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. f \\<in> PrimRec2", "by (rule c_f_list_f_is_pr)"], ["proof (state)\nthis:\n  f \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "declare c_tl_less [termination_simp]"], ["", "fun c_assoc_have_key :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  c_assoc_have_key_df [simp del]: \"c_assoc_have_key y x = (if y = 0 then 1 else\n    (if c_fst (c_hd y) = x then 0 else c_assoc_have_key (c_tl y) x))\""], ["", "lemma c_assoc_have_key_lm_1: \"y \\<noteq> 0 \\<Longrightarrow> c_assoc_have_key y x = (if c_fst (c_hd y) = x then 0 else c_assoc_have_key (c_tl y) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow>\n    c_assoc_have_key y x =\n    (if c_fst (c_hd y) = x then 0 else c_assoc_have_key (c_tl y) x)", "by (simp add: c_assoc_have_key_df)"], ["", "theorem c_assoc_have_key_is_pr: \"c_assoc_have_key \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "let ?h = \"\\<lambda> a b c. if c_fst (c_hd (Suc a)) = c then 0 else b\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "let ?a = \"\\<lambda> y x. c_tl (Suc y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "let ?g = \"\\<lambda> x. (1::nat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "have g_is_pr: \"?g \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 1) \\<in> PrimRec1", "by (rule const_is_pr)"], ["proof (state)\nthis:\n  (\\<lambda>x. 1) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "from c_tl_is_pr"], ["proof (chain)\npicking this:\n  c_tl \\<in> PrimRec1", "have a_is_pr: \"?a \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_tl \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "have h_is_pr: \"?h \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b c. if c_fst (c_hd (Suc a)) = c then 0 else b)\n    \\<in> PrimRec3", "proof (rule if_eq_is_pr3)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\n 2. (\\<lambda>x y z. z) \\<in> PrimRec3\n 3. (\\<lambda>x y z. 0) \\<in> PrimRec3\n 4. (\\<lambda>x y z. y) \\<in> PrimRec3", "from c_fst_is_pr c_hd_is_pr"], ["proof (chain)\npicking this:\n  c_fst \\<in> PrimRec1\n  c_hd \\<in> PrimRec1", "show \"(\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  c_fst \\<in> PrimRec1\n  c_hd \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\n\ngoal (3 subgoals):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3\n 2. (\\<lambda>x y z. 0) \\<in> PrimRec3\n 3. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3\n 2. (\\<lambda>x y z. 0) \\<in> PrimRec3\n 3. (\\<lambda>x y z. y) \\<in> PrimRec3", "show \"(\\<lambda>x y z. z) \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3", "by (rule pr_id3_3)"], ["proof (state)\nthis:\n  (\\<lambda>x y z. z) \\<in> PrimRec3\n\ngoal (2 subgoals):\n 1. (\\<lambda>x y z. 0) \\<in> PrimRec3\n 2. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x y z. 0) \\<in> PrimRec3\n 2. (\\<lambda>x y z. y) \\<in> PrimRec3", "show \"(\\<lambda>x y z. 0) \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. 0) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x y z. 0) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "show \"(\\<lambda>x y z. y) \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "by (rule pr_id3_2)"], ["proof (state)\nthis:\n  (\\<lambda>x y z. y) \\<in> PrimRec3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a b c. if c_fst (c_hd (Suc a)) = c then 0 else b) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "have a_le: \"\\<forall> x y. ?a y x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. c_tl (Suc y) \\<le> y", "proof (rule allI, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. c_tl (Suc y) \\<le> y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. c_tl (Suc y) \\<le> y", "show \"?a y x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "have \"Suc y > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc y", "by simp"], ["proof (state)\nthis:\n  0 < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "then"], ["proof (chain)\npicking this:\n  0 < Suc y", "have \"?a y x < Suc y\""], ["proof (prove)\nusing this:\n  0 < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) < Suc y", "by (rule c_tl_less)"], ["proof (state)\nthis:\n  c_tl (Suc y) < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "then"], ["proof (chain)\npicking this:\n  c_tl (Suc y) < Suc y", "show ?thesis"], ["proof (prove)\nusing this:\n  c_tl (Suc y) < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "by simp"], ["proof (state)\nthis:\n  c_tl (Suc y) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_tl (Suc y) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "have f_0: \"\\<forall> x. c_assoc_have_key 0 x = ?g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. c_assoc_have_key 0 x = 1", "by (simp add: c_assoc_have_key_df)"], ["proof (state)\nthis:\n  \\<forall>x. c_assoc_have_key 0 x = 1\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "have f_1: \"\\<forall> x y. c_assoc_have_key (Suc y) x = ?h y (c_assoc_have_key (?a y x) x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       c_assoc_have_key (Suc y) x =\n       (if c_fst (c_hd (Suc y)) = x then 0\n        else c_assoc_have_key (c_tl (Suc y)) x)", "by (simp add: c_assoc_have_key_df)"], ["proof (state)\nthis:\n  \\<forall>x y.\n     c_assoc_have_key (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then 0\n      else c_assoc_have_key (c_tl (Suc y)) x)\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "from g_is_pr a_is_pr h_is_pr a_le f_0 f_1"], ["proof (chain)\npicking this:\n  (\\<lambda>x. 1) \\<in> PrimRec1\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n  (\\<lambda>a b c. if c_fst (c_hd (Suc a)) = c then 0 else b) \\<in> PrimRec3\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n  \\<forall>x. c_assoc_have_key 0 x = 1\n  \\<forall>x y.\n     c_assoc_have_key (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then 0\n      else c_assoc_have_key (c_tl (Suc y)) x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. 1) \\<in> PrimRec1\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n  (\\<lambda>a b c. if c_fst (c_hd (Suc a)) = c then 0 else b) \\<in> PrimRec3\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n  \\<forall>x. c_assoc_have_key 0 x = 1\n  \\<forall>x y.\n     c_assoc_have_key (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then 0\n      else c_assoc_have_key (c_tl (Suc y)) x)\n\ngoal (1 subgoal):\n 1. c_assoc_have_key \\<in> PrimRec2", "by (rule th_rec)"], ["proof (state)\nthis:\n  c_assoc_have_key \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "fun c_assoc_value :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  c_assoc_value_df [simp del]: \"c_assoc_value y x = (if y = 0 then 0 else\n    (if c_fst (c_hd y) = x then c_snd (c_hd y) else c_assoc_value (c_tl y) x))\""], ["", "lemma c_assoc_value_lm_1: \"y \\<noteq> 0 \\<Longrightarrow> c_assoc_value y x = (if c_fst (c_hd y) = x then c_snd (c_hd y) else c_assoc_value (c_tl y) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow>\n    c_assoc_value y x =\n    (if c_fst (c_hd y) = x then c_snd (c_hd y)\n     else c_assoc_value (c_tl y) x)", "by (simp add: c_assoc_value_df)"], ["", "theorem c_assoc_value_is_pr: \"c_assoc_value \\<in> PrimRec2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "let ?h = \"\\<lambda> a b c. if c_fst (c_hd (Suc a)) = c then c_snd (c_hd (Suc a)) else b\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "let ?a = \"\\<lambda> y x. c_tl (Suc y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "let ?g = \"\\<lambda> x. (0::nat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "have g_is_pr: \"?g \\<in> PrimRec1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 0) \\<in> PrimRec1", "by (rule const_is_pr)"], ["proof (state)\nthis:\n  (\\<lambda>x. 0) \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "from c_tl_is_pr"], ["proof (chain)\npicking this:\n  c_tl \\<in> PrimRec1", "have a_is_pr: \"?a \\<in> PrimRec2\""], ["proof (prove)\nusing this:\n  c_tl \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "have h_is_pr: \"?h \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b c.\n        if c_fst (c_hd (Suc a)) = c then c_snd (c_hd (Suc a)) else b)\n    \\<in> PrimRec3", "proof (rule if_eq_is_pr3)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\n 2. (\\<lambda>x y z. z) \\<in> PrimRec3\n 3. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n 4. (\\<lambda>x y z. y) \\<in> PrimRec3", "from c_fst_is_pr c_hd_is_pr"], ["proof (chain)\npicking this:\n  c_fst \\<in> PrimRec1\n  c_hd \\<in> PrimRec1", "show \"(\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  c_fst \\<in> PrimRec1\n  c_hd \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x y z. c_fst (c_hd (Suc x))) \\<in> PrimRec3\n\ngoal (3 subgoals):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3\n 2. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n 3. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3\n 2. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n 3. (\\<lambda>x y z. y) \\<in> PrimRec3", "show \"(\\<lambda>x y z. z) \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. z) \\<in> PrimRec3", "by (rule pr_id3_3)"], ["proof (state)\nthis:\n  (\\<lambda>x y z. z) \\<in> PrimRec3\n\ngoal (2 subgoals):\n 1. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n 2. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n 2. (\\<lambda>x y z. y) \\<in> PrimRec3", "from c_snd_is_pr c_hd_is_pr"], ["proof (chain)\npicking this:\n  c_snd \\<in> PrimRec1\n  c_hd \\<in> PrimRec1", "show \"(\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\""], ["proof (prove)\nusing this:\n  c_snd \\<in> PrimRec1\n  c_hd \\<in> PrimRec1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3", "by prec"], ["proof (state)\nthis:\n  (\\<lambda>x y z. c_snd (c_hd (Suc x))) \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "show \"(\\<lambda>x y z. y) \\<in> PrimRec3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y z. y) \\<in> PrimRec3", "by (rule pr_id3_2)"], ["proof (state)\nthis:\n  (\\<lambda>x y z. y) \\<in> PrimRec3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a b c.\n      if c_fst (c_hd (Suc a)) = c then c_snd (c_hd (Suc a)) else b)\n  \\<in> PrimRec3\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "have a_le: \"\\<forall> x y. ?a y x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. c_tl (Suc y) \\<le> y", "proof (rule allI, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. c_tl (Suc y) \\<le> y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. c_tl (Suc y) \\<le> y", "show \"?a y x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "have \"Suc y > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc y", "by simp"], ["proof (state)\nthis:\n  0 < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "then"], ["proof (chain)\npicking this:\n  0 < Suc y", "have \"?a y x < Suc y\""], ["proof (prove)\nusing this:\n  0 < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) < Suc y", "by (rule c_tl_less)"], ["proof (state)\nthis:\n  c_tl (Suc y) < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "then"], ["proof (chain)\npicking this:\n  c_tl (Suc y) < Suc y", "show ?thesis"], ["proof (prove)\nusing this:\n  c_tl (Suc y) < Suc y\n\ngoal (1 subgoal):\n 1. c_tl (Suc y) \\<le> y", "by simp"], ["proof (state)\nthis:\n  c_tl (Suc y) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c_tl (Suc y) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "have f_0: \"\\<forall> x. c_assoc_value 0 x = ?g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. c_assoc_value 0 x = 0", "by (simp add: c_assoc_value_df)"], ["proof (state)\nthis:\n  \\<forall>x. c_assoc_value 0 x = 0\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "have f_1: \"\\<forall> x y. c_assoc_value (Suc y) x = ?h y (c_assoc_value (?a y x) x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       c_assoc_value (Suc y) x =\n       (if c_fst (c_hd (Suc y)) = x then c_snd (c_hd (Suc y))\n        else c_assoc_value (c_tl (Suc y)) x)", "by (simp add: c_assoc_value_df)"], ["proof (state)\nthis:\n  \\<forall>x y.\n     c_assoc_value (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then c_snd (c_hd (Suc y))\n      else c_assoc_value (c_tl (Suc y)) x)\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "from g_is_pr a_is_pr h_is_pr a_le f_0 f_1"], ["proof (chain)\npicking this:\n  (\\<lambda>x. 0) \\<in> PrimRec1\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n  (\\<lambda>a b c.\n      if c_fst (c_hd (Suc a)) = c then c_snd (c_hd (Suc a)) else b)\n  \\<in> PrimRec3\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n  \\<forall>x. c_assoc_value 0 x = 0\n  \\<forall>x y.\n     c_assoc_value (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then c_snd (c_hd (Suc y))\n      else c_assoc_value (c_tl (Suc y)) x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. 0) \\<in> PrimRec1\n  (\\<lambda>y x. c_tl (Suc y)) \\<in> PrimRec2\n  (\\<lambda>a b c.\n      if c_fst (c_hd (Suc a)) = c then c_snd (c_hd (Suc a)) else b)\n  \\<in> PrimRec3\n  \\<forall>x y. c_tl (Suc y) \\<le> y\n  \\<forall>x. c_assoc_value 0 x = 0\n  \\<forall>x y.\n     c_assoc_value (Suc y) x =\n     (if c_fst (c_hd (Suc y)) = x then c_snd (c_hd (Suc y))\n      else c_assoc_value (c_tl (Suc y)) x)\n\ngoal (1 subgoal):\n 1. c_assoc_value \\<in> PrimRec2", "by (rule th_rec)"], ["proof (state)\nthis:\n  c_assoc_value \\<in> PrimRec2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_assoc_lm_1: \"c_assoc_have_key (c_cons (c_pair x y) z) x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_assoc_have_key (c_cons (c_pair x y) z) x = 0", "apply(simp add: c_assoc_have_key_df)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c_cons (c_pair x y) z", "apply(simp add: c_cons_pos)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_assoc_lm_2: \"c_assoc_value (c_cons (c_pair x y) z) x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_assoc_value (c_cons (c_pair x y) z) x = y", "apply(simp add: c_assoc_value_df)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons (c_pair x y) z = 0 \\<longrightarrow> y = 0", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons (c_pair x y) z = 0 \\<Longrightarrow> y = 0", "apply(insert c_cons_pos [where x=\"(c_pair x y)\" and u=\"z\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_cons (c_pair x y) z = 0; 0 < c_cons (c_pair x y) z\\<rbrakk>\n    \\<Longrightarrow> y = 0", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma c_assoc_lm_3: \"x1 \\<noteq> x \\<Longrightarrow> c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "assume A1: \"x1 \\<noteq> x\""], ["proof (state)\nthis:\n  x1 \\<noteq> x\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "let ?ls = \"(c_cons (c_pair x y) z)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "have S1: \"?ls \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons (c_pair x y) z \\<noteq> 0", "by (simp add: c_cons_pos)"], ["proof (state)\nthis:\n  c_cons (c_pair x y) z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "then"], ["proof (chain)\npicking this:\n  c_cons (c_pair x y) z \\<noteq> 0", "have S2: \"c_assoc_have_key ?ls x1 = (if c_fst (c_hd ?ls) = x1 then 0 else c_assoc_have_key (c_tl ?ls) x1)\" (is \"_ = ?R\")"], ["proof (prove)\nusing this:\n  c_cons (c_pair x y) z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c_assoc_have_key (c_cons (c_pair x y) z) x1 =\n    (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n     else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1)", "by (rule c_assoc_have_key_lm_1)"], ["proof (state)\nthis:\n  c_assoc_have_key (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1)\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "have S3: \"c_fst (c_hd ?ls) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fst (c_hd (c_cons (c_pair x y) z)) = x", "by simp"], ["proof (state)\nthis:\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "with A1"], ["proof (chain)\npicking this:\n  x1 \\<noteq> x\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x", "have S4: \"\\<not> (c_fst (c_hd ?ls) = x1)\""], ["proof (prove)\nusing this:\n  x1 \\<noteq> x\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x\n\ngoal (1 subgoal):\n 1. c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1", "by simp"], ["proof (state)\nthis:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "from S4"], ["proof (chain)\npicking this:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1", "have S5: \"?R = c_assoc_have_key (c_tl ?ls) x1\""], ["proof (prove)\nusing this:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1\n\ngoal (1 subgoal):\n 1. (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n     else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1) =\n    c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1", "by (rule if_not_P)"], ["proof (state)\nthis:\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "from S2 S5"], ["proof (chain)\npicking this:\n  c_assoc_have_key (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1)\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1", "show ?thesis"], ["proof (prove)\nusing this:\n  c_assoc_have_key (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1)\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1 then 0\n   else c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_have_key (c_tl (c_cons (c_pair x y) z)) x1\n\ngoal (1 subgoal):\n 1. c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1", "by simp"], ["proof (state)\nthis:\n  c_assoc_have_key (c_cons (c_pair x y) z) x1 = c_assoc_have_key z x1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c_assoc_lm_4: \"x1 \\<noteq> x \\<Longrightarrow> c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "assume A1: \"x1 \\<noteq> x\""], ["proof (state)\nthis:\n  x1 \\<noteq> x\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "let ?ls = \"(c_cons (c_pair x y) z)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "have S1: \"?ls \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_cons (c_pair x y) z \\<noteq> 0", "by (simp add: c_cons_pos)"], ["proof (state)\nthis:\n  c_cons (c_pair x y) z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "then"], ["proof (chain)\npicking this:\n  c_cons (c_pair x y) z \\<noteq> 0", "have S2: \"c_assoc_value ?ls x1 = (if c_fst (c_hd ?ls) = x1 then c_snd (c_hd ?ls) else c_assoc_value (c_tl ?ls) x1)\" (is \"_ = ?R\")"], ["proof (prove)\nusing this:\n  c_cons (c_pair x y) z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c_assoc_value (c_cons (c_pair x y) z) x1 =\n    (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n     then c_snd (c_hd (c_cons (c_pair x y) z))\n     else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1)", "by (rule c_assoc_value_lm_1)"], ["proof (state)\nthis:\n  c_assoc_value (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1)\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "have S3: \"c_fst (c_hd ?ls) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_fst (c_hd (c_cons (c_pair x y) z)) = x", "by simp"], ["proof (state)\nthis:\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "with A1"], ["proof (chain)\npicking this:\n  x1 \\<noteq> x\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x", "have S4: \"\\<not> (c_fst (c_hd ?ls) = x1)\""], ["proof (prove)\nusing this:\n  x1 \\<noteq> x\n  c_fst (c_hd (c_cons (c_pair x y) z)) = x\n\ngoal (1 subgoal):\n 1. c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1", "by simp"], ["proof (state)\nthis:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "from S4"], ["proof (chain)\npicking this:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1", "have S5: \"?R = c_assoc_value (c_tl ?ls) x1\""], ["proof (prove)\nusing this:\n  c_fst (c_hd (c_cons (c_pair x y) z)) \\<noteq> x1\n\ngoal (1 subgoal):\n 1. (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n     then c_snd (c_hd (c_cons (c_pair x y) z))\n     else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1) =\n    c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1", "by (rule if_not_P)"], ["proof (state)\nthis:\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1\n\ngoal (1 subgoal):\n 1. x1 \\<noteq> x \\<Longrightarrow>\n    c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "from S2 S5"], ["proof (chain)\npicking this:\n  c_assoc_value (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1)\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1", "show ?thesis"], ["proof (prove)\nusing this:\n  c_assoc_value (c_cons (c_pair x y) z) x1 =\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1)\n  (if c_fst (c_hd (c_cons (c_pair x y) z)) = x1\n   then c_snd (c_hd (c_cons (c_pair x y) z))\n   else c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1) =\n  c_assoc_value (c_tl (c_cons (c_pair x y) z)) x1\n\ngoal (1 subgoal):\n 1. c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1", "by simp"], ["proof (state)\nthis:\n  c_assoc_value (c_cons (c_pair x y) z) x1 = c_assoc_value z x1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}