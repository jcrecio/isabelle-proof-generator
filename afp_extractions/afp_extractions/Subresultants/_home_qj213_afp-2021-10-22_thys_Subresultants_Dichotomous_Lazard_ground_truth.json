{"file_name": "/home/qj213/afp-2021-10-22/thys/Subresultants/Dichotomous_Lazard.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Subresultants", "problem_names": ["lemma power_fract[simp]: \"(Fract a b)^n = Fract (a^n) (b^n)\"", "lemma range_to_fract_dvd_iff: assumes b: \"b \\<noteq> 0\" \n  shows \"Fract a b \\<in> range to_fract \\<longleftrightarrow> b dvd a\"", "lemma Fract_cases_coprime [cases type: fract]:\n  fixes q :: \"'a :: factorial_ring_gcd fract\" \n  obtains (Fract) a b where \"q = Fract a b\" \"b \\<noteq> 0\" \"coprime a b\"", "lemma to_fract_power_le: fixes a :: \"'a :: factorial_ring_gcd fract\"\n  assumes no_fract: \"a * b ^ e \\<in> range to_fract\" \n  and a: \"a \\<in> range to_fract\" \n  and le: \"f \\<le> e\" \nshows \"a * b ^ f \\<in> range to_fract\"", "lemma div_divide_to_fract: assumes \"x \\<in> range to_fract\"\n  and \"x = (y :: 'a :: idom_divide fract) / z\" \n  and \"x' = y' div z'\"\n  and \"y = to_fract y'\" \"z = to_fract z'\"   \n  shows \"x = to_fract x'\"", "lemma dichotomous_Lazard_main: fixes x :: \"'a :: idom_divide\" \n  assumes \"\\<And> i. i \\<le> n \\<Longrightarrow> (to_fract x)^i / (to_fract y)^(i - 1) \\<in> range to_fract\"\n  shows \"to_fract (dichotomous_Lazard x y n) = (to_fract x)^n / (to_fract y)^(n-1)\"", "lemma dichotomous_Lazard: fixes x :: \"'a :: factorial_ring_gcd\" \n  assumes \"(to_fract x)^n / (to_fract y)^(n-1) \\<in> range to_fract\"\n  shows \"to_fract (dichotomous_Lazard x y n) = (to_fract x)^n / (to_fract y)^(n-1)\""], "translations": [["", "lemma power_fract[simp]: \"(Fract a b)^n = Fract (a^n) (b^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b ^ n = Fraction_Field.Fract (a ^ n) (b ^ n)", "by (induct n, auto simp: fract_collapse)"], ["", "lemma range_to_fract_dvd_iff: assumes b: \"b \\<noteq> 0\" \n  shows \"Fract a b \\<in> range to_fract \\<longleftrightarrow> b dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fraction_Field.Fract a b \\<in> range to_fract) = (b dvd a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> Fraction_Field.Fract a b \\<in> range to_fract", "assume \"b dvd a\""], ["proof (state)\nthis:\n  b dvd a\n\ngoal (2 subgoals):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> Fraction_Field.Fract a b \\<in> range to_fract", "then"], ["proof (chain)\npicking this:\n  b dvd a", "obtain c where a: \"a = b * c\""], ["proof (prove)\nusing this:\n  b dvd a\n\ngoal (1 subgoal):\n 1. (\\<And>c. a = b * c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. a = b * k\n\ngoal (1 subgoal):\n 1. (\\<And>c. a = b * c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a = b * c\n\ngoal (2 subgoals):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> Fraction_Field.Fract a b \\<in> range to_fract", "have \"Fract a b = Fract c 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)", "using b"], ["proof (prove)\nusing this:\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)", "unfolding a"], ["proof (prove)\nusing this:\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract (b * c) b = Fraction_Field.Fract c (1::'a)", "by (simp add: eq_fract)"], ["proof (state)\nthis:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n\ngoal (2 subgoals):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> Fraction_Field.Fract a b \\<in> range to_fract", "thus \"Fract a b \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract", "unfolding to_fract_def"], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b\n    \\<in> range (\\<lambda>x. Fraction_Field.Fract x (1::'a))", "by auto"], ["proof (state)\nthis:\n  Fraction_Field.Fract a b \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a", "assume \"Fract a b \\<in> range to_fract\""], ["proof (state)\nthis:\n  Fraction_Field.Fract a b \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a", "then"], ["proof (chain)\npicking this:\n  Fraction_Field.Fract a b \\<in> range to_fract", "obtain c where \"Fract a b = Fract c 1\""], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        Fraction_Field.Fract a b =\n        Fraction_Field.Fract c (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding to_fract_def"], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b\n  \\<in> range (\\<lambda>x. Fraction_Field.Fract x (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        Fraction_Field.Fract a b =\n        Fraction_Field.Fract c (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a", "hence \"a = b * c\""], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n\ngoal (1 subgoal):\n 1. a = b * c", "using b"], ["proof (prove)\nusing this:\n  Fraction_Field.Fract a b = Fraction_Field.Fract c (1::'a)\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a = b * c", "by (simp add: eq_fract)"], ["proof (state)\nthis:\n  a = b * c\n\ngoal (1 subgoal):\n 1. Fraction_Field.Fract a b \\<in> range to_fract \\<Longrightarrow> b dvd a", "thus \"b dvd a\""], ["proof (prove)\nusing this:\n  a = b * c\n\ngoal (1 subgoal):\n 1. b dvd a", ".."], ["proof (state)\nthis:\n  b dvd a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Fract_cases_coprime [cases type: fract]:\n  fixes q :: \"'a :: factorial_ring_gcd fract\" \n  obtains (Fract) a b where \"q = Fract a b\" \"b \\<noteq> 0\" \"coprime a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain a b where q: \"q = Fract a b\" and b0: \"b \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases q, auto)"], ["proof (state)\nthis:\n  q = Fraction_Field.Fract a b\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define g where g: \"g = gcd a b\""], ["proof (state)\nthis:\n  g = gcd a b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define A where A: \"A = a div g\""], ["proof (state)\nthis:\n  A = a div g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define B where B: \"B = b div g\""], ["proof (state)\nthis:\n  B = b div g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have a: \"a = A * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = A * g", "unfolding A g"], ["proof (prove)\ngoal (1 subgoal):\n 1. a = a div gcd a b * gcd a b", "by simp"], ["proof (state)\nthis:\n  a = A * g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have b: \"b = B * g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = B * g", "unfolding B g"], ["proof (prove)\ngoal (1 subgoal):\n 1. b = b div gcd a b * gcd a b", "by simp"], ["proof (state)\nthis:\n  b = B * g\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from b0 b"], ["proof (chain)\npicking this:\n  b \\<noteq> (0::'a)\n  b = B * g", "have 0: \"B \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<noteq> (0::'a)\n  b = B * g\n\ngoal (1 subgoal):\n 1. B \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  B \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have q: \"q = Fract A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = Fraction_Field.Fract A B", "unfolding q a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract (A * g) (B * g) = Fraction_Field.Fract A B", "by (subst eq_fract, auto simp: b0 0 g)"], ["proof (state)\nthis:\n  q = Fraction_Field.Fract A B\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have cop: \"coprime A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime A B", "unfolding A B g"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (a div gcd a b) (b div gcd a b)", "using b0"], ["proof (prove)\nusing this:\n  b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coprime (a div gcd a b) (b div gcd a b)", "by (simp add: div_gcd_coprime)"], ["proof (state)\nthis:\n  coprime A B\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"\\<And>a b. q = Fract a b \\<Longrightarrow> b \\<noteq> 0 \\<Longrightarrow> coprime a b \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  \\<lbrakk>q = Fraction_Field.Fract ?a ?b; ?b \\<noteq> (0::'a);\n   coprime ?a ?b\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>q = Fraction_Field.Fract a b; b \\<noteq> (0::'a);\n         coprime a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this[OF q 0 cop]"], ["proof (chain)\npicking this:\n  thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma to_fract_power_le: fixes a :: \"'a :: factorial_ring_gcd fract\"\n  assumes no_fract: \"a * b ^ e \\<in> range to_fract\" \n  and a: \"a \\<in> range to_fract\" \n  and le: \"f \\<le> e\" \nshows \"a * b ^ f \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "obtain bn bd where b: \"b = Fract bn bd\" and bd: \"bd \\<noteq> 0\" and copb: \"coprime bn bd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bn bd.\n        \\<lbrakk>b = Fraction_Field.Fract bn bd; bd \\<noteq> (0::'a);\n         coprime bn bd\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases b, auto)"], ["proof (state)\nthis:\n  b = Fraction_Field.Fract bn bd\n  bd \\<noteq> (0::'a)\n  coprime bn bd\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "obtain an where a: \"a = Fract an 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>an.\n        a = Fraction_Field.Fract an (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a"], ["proof (prove)\nusing this:\n  a \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. (\\<And>an.\n        a = Fraction_Field.Fract an (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding to_fract_def"], ["proof (prove)\nusing this:\n  a \\<in> range (\\<lambda>x. Fraction_Field.Fract x (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>an.\n        a = Fraction_Field.Fract an (1::'a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a = Fraction_Field.Fract an (1::'a)\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "have id: \"a * b ^ e = Fract (an * bn^e) (bd^e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b ^ e = Fraction_Field.Fract (an * bn ^ e) (bd ^ e)", "unfolding a b power_fract mult_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract (an * bn ^ e) ((1::'a) * bd ^ e) =\n    Fraction_Field.Fract (an * bn ^ e) (bd ^ e)", "by simp"], ["proof (state)\nthis:\n  a * b ^ e = Fraction_Field.Fract (an * bn ^ e) (bd ^ e)\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "have 0: \"bd^e \\<noteq> 0\" for e"], ["proof (prove)\ngoal (1 subgoal):\n 1. bd ^ e \\<noteq> (0::'a)", "using bd"], ["proof (prove)\nusing this:\n  bd \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. bd ^ e \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  bd ^ ?e \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "from no_fract[unfolded id range_to_fract_dvd_iff[OF 0]]"], ["proof (chain)\npicking this:\n  bd ^ e dvd an * bn ^ e", "have dvd: \"bd ^ e dvd an * bn ^ e\""], ["proof (prove)\nusing this:\n  bd ^ e dvd an * bn ^ e\n\ngoal (1 subgoal):\n 1. bd ^ e dvd an * bn ^ e", "."], ["proof (state)\nthis:\n  bd ^ e dvd an * bn ^ e\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "from copb"], ["proof (chain)\npicking this:\n  coprime bn bd", "have copb: \"coprime (bd ^ e) (bn ^ e)\" for e"], ["proof (prove)\nusing this:\n  coprime bn bd\n\ngoal (1 subgoal):\n 1. coprime (bd ^ e) (bn ^ e)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  coprime (bd ^ ?e) (bn ^ ?e)\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "from dvd copb [of e] bd"], ["proof (chain)\npicking this:\n  bd ^ e dvd an * bn ^ e\n  coprime (bd ^ e) (bn ^ e)\n  bd \\<noteq> (0::'a)", "have \"bd ^ e dvd an\""], ["proof (prove)\nusing this:\n  bd ^ e dvd an * bn ^ e\n  coprime (bd ^ e) (bn ^ e)\n  bd \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. bd ^ e dvd an", "by (simp add: coprime_dvd_mult_left_iff)"], ["proof (state)\nthis:\n  bd ^ e dvd an\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "hence \"bd ^ f dvd an\""], ["proof (prove)\nusing this:\n  bd ^ e dvd an\n\ngoal (1 subgoal):\n 1. bd ^ f dvd an", "using le"], ["proof (prove)\nusing this:\n  bd ^ e dvd an\n  f \\<le> e\n\ngoal (1 subgoal):\n 1. bd ^ f dvd an", "by (rule power_le_dvd)"], ["proof (state)\nthis:\n  bd ^ f dvd an\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "hence dvd: \"bd ^ f dvd an * bn ^ f\""], ["proof (prove)\nusing this:\n  bd ^ f dvd an\n\ngoal (1 subgoal):\n 1. bd ^ f dvd an * bn ^ f", "by simp"], ["proof (state)\nthis:\n  bd ^ f dvd an * bn ^ f\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "from le"], ["proof (chain)\npicking this:\n  f \\<le> e", "obtain g where e: \"e = f + g\""], ["proof (prove)\nusing this:\n  f \\<le> e\n\ngoal (1 subgoal):\n 1. (\\<And>g. e = f + g \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using le_Suc_ex"], ["proof (prove)\nusing this:\n  f \\<le> e\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n\ngoal (1 subgoal):\n 1. (\\<And>g. e = f + g \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  e = f + g\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "have id': \"a * b ^ f = Fract (an * bn^f) (bd^f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b ^ f = Fraction_Field.Fract (an * bn ^ f) (bd ^ f)", "unfolding a b power_fract mult_fract"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fraction_Field.Fract (an * bn ^ f) ((1::'a) * bd ^ f) =\n    Fraction_Field.Fract (an * bn ^ f) (bd ^ f)", "by simp"], ["proof (state)\nthis:\n  a * b ^ f = Fraction_Field.Fract (an * bn ^ f) (bd ^ f)\n\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b ^ f \\<in> range to_fract", "unfolding id' range_to_fract_dvd_iff[OF 0]"], ["proof (prove)\ngoal (1 subgoal):\n 1. bd ^ f dvd an * bn ^ f", "by (rule dvd)"], ["proof (state)\nthis:\n  a * b ^ f \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_divide_to_fract: assumes \"x \\<in> range to_fract\"\n  and \"x = (y :: 'a :: idom_divide fract) / z\" \n  and \"x' = y' div z'\"\n  and \"y = to_fract y'\" \"z = to_fract z'\"   \n  shows \"x = to_fract x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = to_fract x'", "proof (cases \"z' = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z' = (0::'a) \\<Longrightarrow> x = to_fract x'\n 2. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "case True"], ["proof (state)\nthis:\n  z' = (0::'a)\n\ngoal (2 subgoals):\n 1. z' = (0::'a) \\<Longrightarrow> x = to_fract x'\n 2. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "thus ?thesis"], ["proof (prove)\nusing this:\n  z' = (0::'a)\n\ngoal (1 subgoal):\n 1. x = to_fract x'", "using assms"], ["proof (prove)\nusing this:\n  z' = (0::'a)\n  x \\<in> range to_fract\n  x = y / z\n  x' = y' div z'\n  y = to_fract y'\n  z = to_fract z'\n\ngoal (1 subgoal):\n 1. x = to_fract x'", "by auto"], ["proof (state)\nthis:\n  x = to_fract x'\n\ngoal (1 subgoal):\n 1. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "case False"], ["proof (state)\nthis:\n  z' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> range to_fract\n  x = y / z\n  x' = y' div z'\n  y = to_fract y'\n  z = to_fract z'", "obtain r where \"to_fract y' / to_fract z' = to_fract r\""], ["proof (prove)\nusing this:\n  x \\<in> range to_fract\n  x = y / z\n  x' = y' div z'\n  y = to_fract y'\n  z = to_fract z'\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        to_fract y' / to_fract z' = to_fract r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  to_fract y' / to_fract z' = to_fract r\n\ngoal (1 subgoal):\n 1. z' \\<noteq> (0::'a) \\<Longrightarrow> x = to_fract x'", "thus ?thesis"], ["proof (prove)\nusing this:\n  to_fract y' / to_fract z' = to_fract r\n\ngoal (1 subgoal):\n 1. x = to_fract x'", "using False assms"], ["proof (prove)\nusing this:\n  to_fract y' / to_fract z' = to_fract r\n  z' \\<noteq> (0::'a)\n  x \\<in> range to_fract\n  x = y / z\n  x' = y' div z'\n  y = to_fract y'\n  z = to_fract z'\n\ngoal (1 subgoal):\n 1. x = to_fract x'", "by (simp add: eq_fract(1) to_fract_def)"], ["proof (state)\nthis:\n  x = to_fract x'\n\ngoal:\nNo subgoals!", "qed"], ["", "declare divmod_nat_def[termination_simp]"], ["", "fun dichotomous_Lazard :: \"'a :: idom_divide \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a\" where\n  \"dichotomous_Lazard x y n = (if n \\<le> 1 then if n = 1 then x else 1 else\n    let (d,r) = Divides.divmod_nat n 2; \n       rec = dichotomous_Lazard x y d;\n       recsq = rec * rec div y in \n    if r = 0 then recsq else recsq * x div y)\""], ["", "lemma dichotomous_Lazard_main: fixes x :: \"'a :: idom_divide\" \n  assumes \"\\<And> i. i \\<le> n \\<Longrightarrow> (to_fract x)^i / (to_fract y)^(i - 1) \\<in> range to_fract\"\n  shows \"to_fract (dichotomous_Lazard x y n) = (to_fract x)^n / (to_fract y)^(n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<le> n \\<Longrightarrow>\n  to_fract x ^ ?i / to_fract y ^ (?i - 1) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "proof (induct x y n rule: dichotomous_Lazard.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y n.\n       \\<lbrakk>\\<And>xa xb ya.\n                   \\<lbrakk>\\<not> n \\<le> 1; xa = divmod_nat n 2;\n                    (xb, ya) = xa;\n                    \\<And>i.\n                       i \\<le> xb \\<Longrightarrow>\n                       to_fract x ^ i / to_fract y ^ (i - 1)\n                       \\<in> range to_fract\\<rbrakk>\n                   \\<Longrightarrow> to_fract (dichotomous_Lazard x y xb) =\n                                     to_fract x ^ xb /\n                                     to_fract y ^ (xb - 1);\n        \\<And>i.\n           i \\<le> n \\<Longrightarrow>\n           to_fract x ^ i / to_fract y ^ (i - 1)\n           \\<in> range to_fract\\<rbrakk>\n       \\<Longrightarrow> to_fract (dichotomous_Lazard x y n) =\n                         to_fract x ^ n / to_fract y ^ (n - 1)", "case (1 x y n)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> n \\<le> 1; ?xa = divmod_nat n 2; (?xb, ?ya) = ?xa;\n   \\<And>i.\n      i \\<le> ?xb \\<Longrightarrow>\n      to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\\<rbrakk>\n  \\<Longrightarrow> to_fract (dichotomous_Lazard x y ?xb) =\n                    to_fract x ^ ?xb / to_fract y ^ (?xb - 1)\n  ?i \\<le> n \\<Longrightarrow>\n  to_fract x ^ ?i / to_fract y ^ (?i - 1) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. \\<And>x y n.\n       \\<lbrakk>\\<And>xa xb ya.\n                   \\<lbrakk>\\<not> n \\<le> 1; xa = divmod_nat n 2;\n                    (xb, ya) = xa;\n                    \\<And>i.\n                       i \\<le> xb \\<Longrightarrow>\n                       to_fract x ^ i / to_fract y ^ (i - 1)\n                       \\<in> range to_fract\\<rbrakk>\n                   \\<Longrightarrow> to_fract (dichotomous_Lazard x y xb) =\n                                     to_fract x ^ xb /\n                                     to_fract y ^ (xb - 1);\n        \\<And>i.\n           i \\<le> n \\<Longrightarrow>\n           to_fract x ^ i / to_fract y ^ (i - 1)\n           \\<in> range to_fract\\<rbrakk>\n       \\<Longrightarrow> to_fract (dichotomous_Lazard x y n) =\n                         to_fract x ^ n / to_fract y ^ (n - 1)", "let ?f = to_fract"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y n.\n       \\<lbrakk>\\<And>xa xb ya.\n                   \\<lbrakk>\\<not> n \\<le> 1; xa = divmod_nat n 2;\n                    (xb, ya) = xa;\n                    \\<And>i.\n                       i \\<le> xb \\<Longrightarrow>\n                       to_fract x ^ i / to_fract y ^ (i - 1)\n                       \\<in> range to_fract\\<rbrakk>\n                   \\<Longrightarrow> to_fract (dichotomous_Lazard x y xb) =\n                                     to_fract x ^ xb /\n                                     to_fract y ^ (xb - 1);\n        \\<And>i.\n           i \\<le> n \\<Longrightarrow>\n           to_fract x ^ i / to_fract y ^ (i - 1)\n           \\<in> range to_fract\\<rbrakk>\n       \\<Longrightarrow> to_fract (dichotomous_Lazard x y n) =\n                         to_fract x ^ n / to_fract y ^ (n - 1)", "consider (0) \"n = 0\" | (1) \"n = 1\" | (n) \"\\<not> n \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     \\<not> n \\<le> 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis1;\n   n = 1 \\<Longrightarrow> ?thesis1;\n   \\<not> n \\<le> 1 \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. \\<And>x y n.\n       \\<lbrakk>\\<And>xa xb ya.\n                   \\<lbrakk>\\<not> n \\<le> 1; xa = divmod_nat n 2;\n                    (xb, ya) = xa;\n                    \\<And>i.\n                       i \\<le> xb \\<Longrightarrow>\n                       to_fract x ^ i / to_fract y ^ (i - 1)\n                       \\<in> range to_fract\\<rbrakk>\n                   \\<Longrightarrow> to_fract (dichotomous_Lazard x y xb) =\n                                     to_fract x ^ xb /\n                                     to_fract y ^ (xb - 1);\n        \\<And>i.\n           i \\<le> n \\<Longrightarrow>\n           to_fract x ^ i / to_fract y ^ (i - 1)\n           \\<in> range to_fract\\<rbrakk>\n       \\<Longrightarrow> to_fract (dichotomous_Lazard x y n) =\n                         to_fract x ^ n / to_fract y ^ (n - 1)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis1;\n   n = 1 \\<Longrightarrow> ?thesis1;\n   \\<not> n \\<le> 1 \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "case n"], ["proof (state)\nthis:\n  \\<not> n \\<le> 1\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "obtain d r where n2: \"Divides.divmod_nat n 2 = (d,r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d r.\n        divmod_nat n 2 = (d, r) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  divmod_nat n 2 = (d, r)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "from divmod_nat_def[of n 2] n2"], ["proof (chain)\npicking this:\n  divmod_nat n 2 = (n div 2, n mod 2)\n  divmod_nat n 2 = (d, r)", "have dr: \"d = n div 2\" \"r = n mod 2\""], ["proof (prove)\nusing this:\n  divmod_nat n 2 = (n div 2, n mod 2)\n  divmod_nat n 2 = (d, r)\n\ngoal (1 subgoal):\n 1. d = n div 2 &&& r = n mod 2", "by auto"], ["proof (state)\nthis:\n  d = n div 2\n  r = n mod 2\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "hence r: \"r = 0 \\<or> r = 1\""], ["proof (prove)\nusing this:\n  d = n div 2\n  r = n mod 2\n\ngoal (1 subgoal):\n 1. r = 0 \\<or> r = 1", "by auto"], ["proof (state)\nthis:\n  r = 0 \\<or> r = 1\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "define rec where \"rec = dichotomous_Lazard x y d\""], ["proof (state)\nthis:\n  rec = dichotomous_Lazard x y d\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?sq = \"rec * rec div y\""], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have res: \"dichotomous_Lazard x y n = (if r = 0 then ?sq else ?sq * x div y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dichotomous_Lazard x y n =\n    (if r = 0 then rec * rec div y else rec * rec div y * x div y)", "unfolding dichotomous_Lazard.simps[of x y n] n2 Let_def rec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n \\<le> 1 then if n = 1 then x else (1::'a)\n     else case (d, r) of\n          (d, r) \\<Rightarrow>\n            if r = 0\n            then dichotomous_Lazard x y d * dichotomous_Lazard x y d div y\n            else dichotomous_Lazard x y d * dichotomous_Lazard x y d div y *\n                 x div\n                 y) =\n    (if r = 0 then dichotomous_Lazard x y d * dichotomous_Lazard x y d div y\n     else dichotomous_Lazard x y d * dichotomous_Lazard x y d div y * x div\n          y)", "using n"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> 1\n\ngoal (1 subgoal):\n 1. (if n \\<le> 1 then if n = 1 then x else (1::'a)\n     else case (d, r) of\n          (d, r) \\<Rightarrow>\n            if r = 0\n            then dichotomous_Lazard x y d * dichotomous_Lazard x y d div y\n            else dichotomous_Lazard x y d * dichotomous_Lazard x y d div y *\n                 x div\n                 y) =\n    (if r = 0 then dichotomous_Lazard x y d * dichotomous_Lazard x y d div y\n     else dichotomous_Lazard x y d * dichotomous_Lazard x y d div y * x div\n          y)", "by auto"], ["proof (state)\nthis:\n  dichotomous_Lazard x y n =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have ndr: \"n = d + d + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = d + d + r", "unfolding dr"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n div 2 + n div 2 + n mod 2", "by presburger"], ["proof (state)\nthis:\n  n = d + d + r\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "from ndr r n"], ["proof (chain)\npicking this:\n  n = d + d + r\n  r = 0 \\<or> r = 1\n  \\<not> n \\<le> 1", "have d0: \"d \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n = d + d + r\n  r = 0 \\<or> r = 1\n  \\<not> n \\<le> 1\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have IH: \"?f rec = ?f x ^ d / ?f y ^ (d - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract rec = to_fract x ^ d / to_fract y ^ (d - 1)", "using 1(1)[OF n refl n2[symmetric] 1(2), folded rec_def] ndr"], ["proof (prove)\nusing this:\n  (\\<And>i. i \\<le> d \\<Longrightarrow> i \\<le> n) \\<Longrightarrow>\n  to_fract rec = to_fract x ^ d / to_fract y ^ (d - 1)\n  n = d + d + r\n\ngoal (1 subgoal):\n 1. to_fract rec = to_fract x ^ d / to_fract y ^ (d - 1)", "by auto"], ["proof (state)\nthis:\n  to_fract rec = to_fract x ^ d / to_fract y ^ (d - 1)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have \"?f (rec * rec) = ?f x ^ d / ?f y ^ (d - 1) * ?f x ^ d / ?f y ^ (d - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (rec * rec) =\n    to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n    to_fract y ^ (d - 1)", "using IH"], ["proof (prove)\nusing this:\n  to_fract rec = to_fract x ^ d / to_fract y ^ (d - 1)\n\ngoal (1 subgoal):\n 1. to_fract (rec * rec) =\n    to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n    to_fract y ^ (d - 1)", "by simp"], ["proof (state)\nthis:\n  to_fract (rec * rec) =\n  to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n  to_fract y ^ (d - 1)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "also"], ["proof (state)\nthis:\n  to_fract (rec * rec) =\n  to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n  to_fract y ^ (d - 1)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have \"\\<dots> = ?f x ^ (d + d) / ?f y ^ (d - 1 + (d - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n    to_fract y ^ (d - 1) =\n    to_fract x ^ (d + d) / to_fract y ^ (d - 1 + (d - 1))", "unfolding power_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n    to_fract y ^ (d - 1) =\n    to_fract x ^ d * to_fract x ^ d /\n    (to_fract y ^ (d - 1) * to_fract y ^ (d - 1))", "by simp"], ["proof (state)\nthis:\n  to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n  to_fract y ^ (d - 1) =\n  to_fract x ^ (d + d) / to_fract y ^ (d - 1 + (d - 1))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "also"], ["proof (state)\nthis:\n  to_fract x ^ d / to_fract y ^ (d - 1) * to_fract x ^ d /\n  to_fract y ^ (d - 1) =\n  to_fract x ^ (d + d) / to_fract y ^ (d - 1 + (d - 1))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have \"d - 1 + (d - 1) = d + d - 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d - 1 + (d - 1) = d + d - 2", "using d0"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d - 1 + (d - 1) = d + d - 2", "by simp"], ["proof (state)\nthis:\n  d - 1 + (d - 1) = d + d - 2\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "finally"], ["proof (chain)\npicking this:\n  to_fract (rec * rec) = to_fract x ^ (d + d) / to_fract y ^ (d + d - 2)", "have id: \"?f (rec * rec) = ?f x ^ (d + d) / ?f y ^ (d + d - 2)\""], ["proof (prove)\nusing this:\n  to_fract (rec * rec) = to_fract x ^ (d + d) / to_fract y ^ (d + d - 2)\n\ngoal (1 subgoal):\n 1. to_fract (rec * rec) = to_fract x ^ (d + d) / to_fract y ^ (d + d - 2)", "."], ["proof (state)\nthis:\n  to_fract (rec * rec) = to_fract x ^ (d + d) / to_fract y ^ (d + d - 2)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?dd = \"(?f x ^ (d + d) / ?f y ^ (d + d - 2)) / ?f y\""], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?d = \"?f x ^ (d + d) / ?f y ^ (d + d - 1)\""], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have dd: \"?dd = ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d) / to_fract y ^ (d + d - 2) / to_fract y =\n    to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)", "using d0"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d) / to_fract y ^ (d + d - 2) / to_fract y =\n    to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)", "by (cases d, auto)"], ["proof (state)\nthis:\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 2) / to_fract y =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have sq: \"?f ?sq = ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y) =\n    to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)", "unfolding dd[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y) =\n    to_fract x ^ (d + d) / to_fract y ^ (d + d - 2) / to_fract y", "proof (rule sym, rule div_divide_to_fract[OF _ refl refl id[symmetric] refl], unfold dd)"], ["proof (state)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d) / to_fract y ^ (d + d - 1) \\<in> range to_fract", "show \"?d \\<in> range ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d) / to_fract y ^ (d + d - 1) \\<in> range to_fract", "by (rule 1(2), insert ndr, auto)"], ["proof (state)\nthis:\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1) \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 3. \\<not> n \\<le> 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "proof (cases \"r = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "case True"], ["proof (state)\nthis:\n  r = 0\n\ngoal (2 subgoals):\n 1. r = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "with res sq"], ["proof (chain)\npicking this:\n  dichotomous_Lazard x y n =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n  r = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  dichotomous_Lazard x y n =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n  r = 0\n\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "unfolding ndr"], ["proof (prove)\nusing this:\n  dichotomous_Lazard x y (d + d + r) =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n  r = 0\n\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y (d + d + r)) =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)", "by auto"], ["proof (state)\nthis:\n  to_fract (dichotomous_Lazard x y n) =\n  to_fract x ^ n / to_fract y ^ (n - 1)\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "case False"], ["proof (state)\nthis:\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "with r"], ["proof (chain)\npicking this:\n  r = 0 \\<or> r = 1\n  r \\<noteq> 0", "have r: \"r = 1\""], ["proof (prove)\nusing this:\n  r = 0 \\<or> r = 1\n  r \\<noteq> 0\n\ngoal (1 subgoal):\n 1. r = 1", "by auto"], ["proof (state)\nthis:\n  r = 1\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?sq' = \"?sq * x div y\""], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "from False res"], ["proof (chain)\npicking this:\n  r \\<noteq> 0\n  dichotomous_Lazard x y n =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)", "have res: \"dichotomous_Lazard x y n = ?sq'\""], ["proof (prove)\nusing this:\n  r \\<noteq> 0\n  dichotomous_Lazard x y n =\n  (if r = 0 then rec * rec div y else rec * rec div y * x div y)\n\ngoal (1 subgoal):\n 1. dichotomous_Lazard x y n = rec * rec div y * x div y", "by simp"], ["proof (state)\nthis:\n  dichotomous_Lazard x y n = rec * rec div y * x div y\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "from sq"], ["proof (chain)\npicking this:\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)", "have id: \"?f (?sq * x) = ?f x ^ (d + d + r) / ?f y ^ (d + d - 1)\""], ["proof (prove)\nusing this:\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y * x) =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1)", "unfolding r"], ["proof (prove)\nusing this:\n  to_fract (rec * rec div y) =\n  to_fract x ^ (d + d) / to_fract y ^ (d + d - 1)\n\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y * x) =\n    to_fract x ^ (d + d + 1) / to_fract y ^ (d + d - 1)", "by simp"], ["proof (state)\nthis:\n  to_fract (rec * rec div y * x) =\n  to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1)\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?dd = \"(?f x ^ (d + d + r) / ?f y ^ (d + d - 1)) / ?f y\""], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "let ?d = \"?f x ^ (d + d + r) / ?f y ^ (d + d + r - 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have dd: \"?dd = ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1) / to_fract y =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)", "using d0"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1) / to_fract y =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)", "unfolding r"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + 1) / to_fract y ^ (d + d - 1) / to_fract y =\n    to_fract x ^ (d + d + 1) / to_fract y ^ (d + d + 1 - 1)", "by (cases d, auto)"], ["proof (state)\nthis:\n  to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1) / to_fract y =\n  to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "have sq': \"?f ?sq' = ?d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y * x div y) =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)", "unfolding dd[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (rec * rec div y * x div y) =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d - 1) / to_fract y", "proof (rule sym, rule div_divide_to_fract[OF _ refl refl id[symmetric] refl], unfold dd)"], ["proof (state)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)\n    \\<in> range to_fract", "show \"?d \\<in> range ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)\n    \\<in> range to_fract", "by (rule 1(2), unfold ndr, auto)"], ["proof (state)\nthis:\n  to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)\n  \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_fract (rec * rec div y * x div y) =\n  to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "unfolding res sq'"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "unfolding ndr"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1) =\n    to_fract x ^ (d + d + r) / to_fract y ^ (d + d + r - 1)", "by simp"], ["proof (state)\nthis:\n  to_fract (dichotomous_Lazard x y n) =\n  to_fract x ^ n / to_fract y ^ (n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_fract (dichotomous_Lazard x y n) =\n  to_fract x ^ n / to_fract y ^ (n - 1)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)\n 2. n = 1 \\<Longrightarrow>\n    to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "qed auto"], ["proof (state)\nthis:\n  to_fract (dichotomous_Lazard x y n) =\n  to_fract x ^ n / to_fract y ^ (n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dichotomous_Lazard: fixes x :: \"'a :: factorial_ring_gcd\" \n  assumes \"(to_fract x)^n / (to_fract y)^(n-1) \\<in> range to_fract\"\n  shows \"to_fract (dichotomous_Lazard x y n) = (to_fract x)^n / (to_fract y)^(n-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract (dichotomous_Lazard x y n) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "proof (rule dichotomous_Lazard_main)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> n \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> n \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "assume i: \"i \\<le> n\""], ["proof (state)\nthis:\n  i \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<le> n \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "show \"to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "case (Suc j)"], ["proof (state)\nthis:\n  i = Suc j\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "have id: \"to_fract x ^ i / to_fract y ^ (i - 1) = to_fract x * (to_fract x / to_fract y) ^ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ i / to_fract y ^ (i - 1) =\n    to_fract x * (to_fract x / to_fract y) ^ j", "unfolding Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ Suc j / to_fract y ^ (Suc j - 1) =\n    to_fract x * (to_fract x / to_fract y) ^ j", "by (simp add: power_divide)"], ["proof (state)\nthis:\n  to_fract x ^ i / to_fract y ^ (i - 1) =\n  to_fract x * (to_fract x / to_fract y) ^ j\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "from Suc i"], ["proof (chain)\npicking this:\n  i = Suc j\n  i \\<le> n", "have \"n \\<noteq> 0\" and j: \"j \\<le> n - 1\""], ["proof (prove)\nusing this:\n  i = Suc j\n  i \\<le> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 &&& j \\<le> n - 1", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> 0\n  j \\<le> n - 1\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "hence idd: \"to_fract x * (to_fract x / to_fract y) ^ (n - 1) = (to_fract x)^n / (to_fract y)^(n-1)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  j \\<le> n - 1\n\ngoal (1 subgoal):\n 1. to_fract x * (to_fract x / to_fract y) ^ (n - 1) =\n    to_fract x ^ n / to_fract y ^ (n - 1)", "by (cases n, auto simp: power_divide)"], ["proof (state)\nthis:\n  to_fract x * (to_fract x / to_fract y) ^ (n - 1) =\n  to_fract x ^ n / to_fract y ^ (n - 1)\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. to_fract x * (to_fract x / to_fract y) ^ j \\<in> range to_fract", "by (rule to_fract_power_le[OF _ _ j], unfold idd, insert assms, auto)"], ["proof (state)\nthis:\n  to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "have \"1 = to_fract 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = to_fract (1::'b)", "by simp"], ["proof (state)\nthis:\n  1 = to_fract (1::?'b1)\n\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "hence \"1 \\<in> range to_fract\""], ["proof (prove)\nusing this:\n  1 = to_fract (1::?'b1)\n\ngoal (1 subgoal):\n 1. 1 \\<in> range to_fract", "by blast"], ["proof (state)\nthis:\n  1 \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow>\n    to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 \\<in> range to_fract\n\ngoal (1 subgoal):\n 1. to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "using 0"], ["proof (prove)\nusing this:\n  1 \\<in> range to_fract\n  i = 0\n\ngoal (1 subgoal):\n 1. to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract", "by auto"], ["proof (state)\nthis:\n  to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  to_fract x ^ i / to_fract y ^ (i - 1) \\<in> range to_fract\n\ngoal:\nNo subgoals!", "qed"], ["", "declare dichotomous_Lazard.simps[simp del]"], ["", "end"]]}