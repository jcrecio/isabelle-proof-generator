{"file_name": "/home/qj213/afp-2021-10-22/thys/Subresultants/Binary_Exponentiation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Subresultants", "problem_names": ["lemma binary_power[simp]: \"binary_power = (^)\"", "lemma binary_power_code_unfold[code_unfold]: \"(^) = binary_power\""], "translations": [["", "lemma binary_power[simp]: \"binary_power = (^)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_power = (^)", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. binary_power x xa = x ^ xa", "fix x n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. binary_power x xa = x ^ xa", "show \"binary_power x n = x ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_power x n = x ^ n", "proof (induct x n rule: binary_power.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       (\\<And>xa xb y.\n           \\<lbrakk>n \\<noteq> 0; xa = divmod_nat n 2; (xb, y) = xa\\<rbrakk>\n           \\<Longrightarrow> binary_power (x * x) xb =\n                             (x * x) ^ xb) \\<Longrightarrow>\n       binary_power x n = x ^ n", "case (1 x n)"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<noteq> 0; ?xa = divmod_nat n 2; (?xb, ?y) = ?xa\\<rbrakk>\n  \\<Longrightarrow> binary_power (x * x) ?xb = (x * x) ^ ?xb\n\ngoal (1 subgoal):\n 1. \\<And>x n.\n       (\\<And>xa xb y.\n           \\<lbrakk>n \\<noteq> 0; xa = divmod_nat n 2; (xb, y) = xa\\<rbrakk>\n           \\<Longrightarrow> binary_power (x * x) xb =\n                             (x * x) ^ xb) \\<Longrightarrow>\n       binary_power x n = x ^ n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_power x n = x ^ n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "note IH = 1[OF False]"], ["proof (state)\nthis:\n  \\<lbrakk>?xa = divmod_nat n 2; (?xb, ?y) = ?xa\\<rbrakk>\n  \\<Longrightarrow> binary_power (x * x) ?xb = (x * x) ^ ?xb\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "obtain d r where n2: \"Divides.divmod_nat n 2 = (d,r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d r.\n        divmod_nat n 2 = (d, r) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  divmod_nat n 2 = (d, r)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "from divmod_nat_def[of n 2] n2"], ["proof (chain)\npicking this:\n  divmod_nat n 2 = (n div 2, n mod 2)\n  divmod_nat n 2 = (d, r)", "have dr: \"d = n div 2\" \"r = n mod 2\""], ["proof (prove)\nusing this:\n  divmod_nat n 2 = (n div 2, n mod 2)\n  divmod_nat n 2 = (d, r)\n\ngoal (1 subgoal):\n 1. d = n div 2 &&& r = n mod 2", "by auto"], ["proof (state)\nthis:\n  d = n div 2\n  r = n mod 2\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "hence r: \"r = 0 \\<or> r = 1\""], ["proof (prove)\nusing this:\n  d = n div 2\n  r = n mod 2\n\ngoal (1 subgoal):\n 1. r = 0 \\<or> r = 1", "by auto"], ["proof (state)\nthis:\n  r = 0 \\<or> r = 1\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "let ?rec = \"binary_power (x * x) d\""], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"binary_power x n = (if r = 0 then ?rec else ?rec * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_power x n =\n    (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x)", "unfolding binary_power.simps[of x n] n2"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if n = 0 then 1::'a\n     else let (d, r) = (d, r); rec = binary_power (x * x) d\n          in if r = 0 then rec else rec * x) =\n    (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x)", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if n = 0 then 1::'a\n     else let (d, r) = (d, r); rec = binary_power (x * x) d\n          in if r = 0 then rec else rec * x) =\n    (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x)", "by auto"], ["proof (state)\nthis:\n  binary_power x n =\n  (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "also"], ["proof (state)\nthis:\n  binary_power x n =\n  (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"\\<dots> = ?rec * x ^ r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x) =\n    binary_power (x * x) d * x ^ r", "using r"], ["proof (prove)\nusing this:\n  r = 0 \\<or> r = 1\n\ngoal (1 subgoal):\n 1. (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x) =\n    binary_power (x * x) d * x ^ r", "by (cases \"r = 0\", auto)"], ["proof (state)\nthis:\n  (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x) =\n  binary_power (x * x) d * x ^ r\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "also"], ["proof (state)\nthis:\n  (if r = 0 then binary_power (x * x) d else binary_power (x * x) d * x) =\n  binary_power (x * x) d * x ^ r\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"?rec = (x * x) ^ d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_power (x * x) d = (x * x) ^ d", "by (rule IH[OF _ refl], simp add: n2)"], ["proof (state)\nthis:\n  binary_power (x * x) d = (x * x) ^ d\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "also"], ["proof (state)\nthis:\n  binary_power (x * x) d = (x * x) ^ d\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"\\<dots> = x ^ (d + d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x * x) ^ d = x ^ (d + d)", "unfolding power_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x * x) ^ d = x ^ d * x ^ d", "using power2_eq_square power_even_eq power_mult"], ["proof (prove)\nusing this:\n  ?a\\<^sup>2 = ?a * ?a\n  ?a ^ (2 * ?n) = (?a ^ ?n)\\<^sup>2\n  ?a ^ (?m * ?n) = (?a ^ ?m) ^ ?n\n\ngoal (1 subgoal):\n 1. (x * x) ^ d = x ^ d * x ^ d", "by auto"], ["proof (state)\nthis:\n  (x * x) ^ d = x ^ (d + d)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "also"], ["proof (state)\nthis:\n  (x * x) ^ d = x ^ (d + d)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"\\<dots> * x ^ r = x ^ (d + d + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (d + d) * x ^ r = x ^ (d + d + r)", "by (simp add: power_add)"], ["proof (state)\nthis:\n  x ^ (d + d) * x ^ r = x ^ (d + d + r)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "also"], ["proof (state)\nthis:\n  x ^ (d + d) * x ^ r = x ^ (d + d + r)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "have \"d + d + r = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d + d + r = n", "unfolding dr"], ["proof (prove)\ngoal (1 subgoal):\n 1. n div 2 + n div 2 + n mod 2 = n", "by presburger"], ["proof (state)\nthis:\n  d + d + r = n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n\n 2. n \\<noteq> 0 \\<Longrightarrow> binary_power x n = x ^ n", "finally"], ["proof (chain)\npicking this:\n  binary_power x n = x ^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  binary_power x n = x ^ n\n\ngoal (1 subgoal):\n 1. binary_power x n = x ^ n", "."], ["proof (state)\nthis:\n  binary_power x n = x ^ n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> binary_power x n = x ^ n", "qed auto"], ["proof (state)\nthis:\n  binary_power x n = x ^ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  binary_power x n = x ^ n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma binary_power_code_unfold[code_unfold]: \"(^) = binary_power\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (^) = binary_power", "by simp"], ["", "declare binary_power.simps[simp del]"], ["", "end"], ["", "end"]]}