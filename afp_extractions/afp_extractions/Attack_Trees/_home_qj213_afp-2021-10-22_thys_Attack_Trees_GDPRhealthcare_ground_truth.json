{"file_name": "/home/qj213/afp-2021-10-22/thys/Attack_Trees/GDPRhealthcare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Attack_Trees", "problem_names": ["lemma step1: \"gdpr_scenario  \\<rightarrow>\\<^sub>n gdpr_scenario'\"", "lemma step1r: \"gdpr_scenario  \\<rightarrow>\\<^sub>n* gdpr_scenario'\"", "lemma step2: \"gdpr_scenario'  \\<rightarrow>\\<^sub>n gdpr_scenario''\"", "lemma step2r: \"gdpr_scenario'  \\<rightarrow>\\<^sub>n* gdpr_scenario''\"", "lemma gdpr_ref: \"[\\<N>\\<^bsub>(Igdpr,sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup> \\<sqsubseteq>\n                  ([\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\"", "lemma att_gdpr: \"\\<turnstile>([\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\"", "lemma gdpr_abs_att: \"\\<turnstile>\\<^sub>V([\\<N>\\<^bsub>(Igdpr,sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\"", "lemma gdpr_att: \"gdpr_Kripke \\<turnstile> EF {x. \\<not>(global_policy' x ''Eve'')}\"", "theorem gdpr_EF: \"gdpr_Kripke \\<turnstile> EF sgdpr\"", "theorem gdpr_AT: \"\\<exists> A. \\<turnstile> A \\<and> attack A = (Igdpr,sgdpr)\"", "theorem gdpr_EF': \"gdpr_Kripke \\<turnstile> EF sgdpr\"", "lemma gdpr_three: \"h \\<in> gdpr_actors \\<Longrightarrow> l \\<in> gdpr_locations \\<Longrightarrow>\n         owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\n         gdpr_Kripke \\<turnstile> AG {x. \\<forall> l \\<in> gdpr_locations. owns (Igraph x) l (Actor h) d }\"", "theorem no_attack_gdpr_three: \n\"h \\<in> gdpr_actors \\<Longrightarrow> l \\<in> gdpr_locations \\<Longrightarrow> \n owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\nattack A = (Igdpr, -{x. \\<forall> l \\<in> gdpr_locations. owns (Igraph x) l (Actor h) d })\n\\<Longrightarrow> \\<not> (\\<turnstile> A)\""], "translations": [["", "lemma step1: \"gdpr_scenario  \\<rightarrow>\\<^sub>n gdpr_scenario'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario \\<rightarrow>\\<^sub>n gdpr_scenario'", "proof (rule_tac l = home and a = \"''Patient''\" and l' = cloud in move)"], ["proof (state)\ngoal (7 subgoals):\n 1. ?G = graphI gdpr_scenario\n 2. ''Patient'' @\\<^bsub>?G\\<^esub> home\n 3. home \\<in> nodes ?G\n 4. cloud \\<in> nodes ?G\n 5. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 6. enables gdpr_scenario cloud (Actor ''Patient'') move\n 7. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"graphI gdpr_scenario = graphI gdpr_scenario\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graphI gdpr_scenario = graphI gdpr_scenario", "by (rule refl)"], ["proof (state)\nthis:\n  graphI gdpr_scenario = graphI gdpr_scenario\n\ngoal (6 subgoals):\n 1. ''Patient'' @\\<^bsub>graphI gdpr_scenario\\<^esub> home\n 2. home \\<in> nodes (graphI gdpr_scenario)\n 3. cloud \\<in> nodes (graphI gdpr_scenario)\n 4. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 5. enables gdpr_scenario cloud (Actor ''Patient'') move\n 6. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. ''Patient'' @\\<^bsub>graphI gdpr_scenario\\<^esub> home\n 2. home \\<in> nodes (graphI gdpr_scenario)\n 3. cloud \\<in> nodes (graphI gdpr_scenario)\n 4. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 5. enables gdpr_scenario cloud (Actor ''Patient'') move\n 6. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"''Patient'' @\\<^bsub>graphI gdpr_scenario\\<^esub> home\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''Patient'' @\\<^bsub>graphI gdpr_scenario\\<^esub> home", "by (simp add: gdpr_scenario_def ex_graph_def ex_loc_ass_def atI_def nodes_def)"], ["proof (state)\nthis:\n  ''Patient'' @\\<^bsub>graphI gdpr_scenario\\<^esub> home\n\ngoal (5 subgoals):\n 1. home \\<in> nodes (graphI gdpr_scenario)\n 2. cloud \\<in> nodes (graphI gdpr_scenario)\n 3. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 4. enables gdpr_scenario cloud (Actor ''Patient'') move\n 5. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. home \\<in> nodes (graphI gdpr_scenario)\n 2. cloud \\<in> nodes (graphI gdpr_scenario)\n 3. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 4. enables gdpr_scenario cloud (Actor ''Patient'') move\n 5. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"home \\<in> nodes (graphI gdpr_scenario)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. home \\<in> nodes (graphI gdpr_scenario)", "by (simp add: gdpr_scenario_def ex_graph_def ex_loc_ass_def atI_def nodes_def, blast)"], ["proof (state)\nthis:\n  home \\<in> nodes (graphI gdpr_scenario)\n\ngoal (4 subgoals):\n 1. cloud \\<in> nodes (graphI gdpr_scenario)\n 2. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 3. enables gdpr_scenario cloud (Actor ''Patient'') move\n 4. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. cloud \\<in> nodes (graphI gdpr_scenario)\n 2. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 3. enables gdpr_scenario cloud (Actor ''Patient'') move\n 4. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"cloud \\<in> nodes (graphI gdpr_scenario)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cloud \\<in> nodes (graphI gdpr_scenario)", "by (simp add: gdpr_scenario_def nodes_def ex_graph_def, blast)"], ["proof (state)\nthis:\n  cloud \\<in> nodes (graphI gdpr_scenario)\n\ngoal (3 subgoals):\n 1. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 2. enables gdpr_scenario cloud (Actor ''Patient'') move\n 3. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n 2. enables gdpr_scenario cloud (Actor ''Patient'') move\n 3. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)", "by (simp add: actors_graph_def gdpr_scenario_def ex_graph_def ex_loc_ass_def nodes_def, blast)"], ["proof (state)\nthis:\n  ''Patient'' \\<in> actors_graph (graphI gdpr_scenario)\n\ngoal (2 subgoals):\n 1. enables gdpr_scenario cloud (Actor ''Patient'') move\n 2. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. enables gdpr_scenario cloud (Actor ''Patient'') move\n 2. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"enables gdpr_scenario cloud (Actor ''Patient'') move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enables gdpr_scenario cloud (Actor ''Patient'') move", "by (simp add: enables_def gdpr_scenario_def ex_graph_def local_policies_def\n                    ex_creds_def ex_locs_def has_def credentials_def)"], ["proof (state)\nthis:\n  enables gdpr_scenario cloud (Actor ''Patient'') move\n\ngoal (1 subgoal):\n 1. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "show \"gdpr_scenario' =\n    Infrastructure (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario)) (delta gdpr_scenario)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario' =\n    Infrastructure\n     (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n     (delta gdpr_scenario)", "apply (simp add: gdpr_scenario'_def ex_graph'_def move_graph_a_def \n                     gdpr_scenario_def ex_graph_def home_def cloud_def hospital_def\n                     ex_loc_ass_def ex_creds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x = Location 3 then {''Patient''}\n        else if x = hospital then {''Doctor'', ''Eve''} else {}) =\n    (\\<lambda>x.\n        if x = Location (Suc 0) then {''Patient''}\n        else if x = hospital then {''Doctor'', ''Eve''} else {})\n    (Location (Suc 0) := {}, Location 3 := {''Patient''})", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (if x = Location 3 then {''Patient''}\n        else if x = hospital then {''Doctor'', ''Eve''} else {}) =\n       ((\\<lambda>x.\n            if x = Location (Suc 0) then {''Patient''}\n            else if x = hospital then {''Doctor'', ''Eve''} else {})\n        (Location (Suc 0) := {}, Location 3 := {''Patient''}))\n        x", "by (simp add: hospital_def)"], ["proof (state)\nthis:\n  gdpr_scenario' =\n  Infrastructure\n   (move_graph_a ''Patient'' home cloud (graphI gdpr_scenario))\n   (delta gdpr_scenario)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step1r: \"gdpr_scenario  \\<rightarrow>\\<^sub>n* gdpr_scenario'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario \\<rightarrow>\\<^sub>n* gdpr_scenario'", "proof (simp add: state_transition_in_refl_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (gdpr_scenario, gdpr_scenario')\n    \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*", "show \" (gdpr_scenario, gdpr_scenario') \\<in> {(x::infrastructure, y::infrastructure). x \\<rightarrow>\\<^sub>n y}\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gdpr_scenario, gdpr_scenario')\n    \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*", "by (insert step1, auto)"], ["proof (state)\nthis:\n  (gdpr_scenario, gdpr_scenario')\n  \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step2: \"gdpr_scenario'  \\<rightarrow>\\<^sub>n gdpr_scenario''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''", "proof (rule_tac l = hospital and a = \"''Eve''\" and l' = cloud in move, rule refl)"], ["proof (state)\ngoal (6 subgoals):\n 1. ''Eve'' @\\<^bsub>graphI gdpr_scenario'\\<^esub> hospital\n 2. hospital \\<in> nodes (graphI gdpr_scenario')\n 3. cloud \\<in> nodes (graphI gdpr_scenario')\n 4. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 5. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 6. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"''Eve'' @\\<^bsub>graphI gdpr_scenario'\\<^esub> hospital\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''Eve'' @\\<^bsub>graphI gdpr_scenario'\\<^esub> hospital", "by (simp add: gdpr_scenario'_def ex_graph'_def hospital_def cloud_def atI_def nodes_def)"], ["proof (state)\nthis:\n  ''Eve'' @\\<^bsub>graphI gdpr_scenario'\\<^esub> hospital\n\ngoal (5 subgoals):\n 1. hospital \\<in> nodes (graphI gdpr_scenario')\n 2. cloud \\<in> nodes (graphI gdpr_scenario')\n 3. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 4. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 5. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. hospital \\<in> nodes (graphI gdpr_scenario')\n 2. cloud \\<in> nodes (graphI gdpr_scenario')\n 3. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 4. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 5. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"hospital \\<in> nodes (graphI gdpr_scenario')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hospital \\<in> nodes (graphI gdpr_scenario')", "by (simp add: gdpr_scenario'_def ex_graph'_def hospital_def cloud_def atI_def nodes_def, blast)"], ["proof (state)\nthis:\n  hospital \\<in> nodes (graphI gdpr_scenario')\n\ngoal (4 subgoals):\n 1. cloud \\<in> nodes (graphI gdpr_scenario')\n 2. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 3. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 4. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. cloud \\<in> nodes (graphI gdpr_scenario')\n 2. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 3. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 4. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"cloud \\<in> nodes (graphI gdpr_scenario')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cloud \\<in> nodes (graphI gdpr_scenario')", "by (simp add: gdpr_scenario'_def nodes_def ex_graph'_def, blast)"], ["proof (state)\nthis:\n  cloud \\<in> nodes (graphI gdpr_scenario')\n\ngoal (3 subgoals):\n 1. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 2. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 3. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n 2. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 3. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')", "by (simp add: actors_graph_def gdpr_scenario'_def ex_graph'_def nodes_def\n                     hospital_def cloud_def, blast)"], ["proof (state)\nthis:\n  ''Eve'' \\<in> actors_graph (graphI gdpr_scenario')\n\ngoal (2 subgoals):\n 1. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 2. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. enables gdpr_scenario' cloud (Actor ''Eve'') move\n 2. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"enables gdpr_scenario' cloud (Actor ''Eve'') move\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enables gdpr_scenario' cloud (Actor ''Eve'') move", "by (simp add: enables_def gdpr_scenario'_def ex_graph_def local_policies_def\n                  ex_creds_def ex_locs_def has_def credentials_def cloud_def sphone_def)"], ["proof (state)\nthis:\n  enables gdpr_scenario' cloud (Actor ''Eve'') move\n\ngoal (1 subgoal):\n 1. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "show \"gdpr_scenario'' =\n    Infrastructure (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario')) (delta gdpr_scenario')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario'' =\n    Infrastructure\n     (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n     (delta gdpr_scenario')", "apply (simp add: gdpr_scenario'_def ex_graph''_def move_graph_a_def gdpr_scenario''_def \n                     ex_graph'_def home_def cloud_def hospital_def ex_creds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x = Location 3 then {''Patient'', ''Eve''}\n        else if x = hospital then {''Doctor''} else {}) =\n    (\\<lambda>x.\n        if x = Location 3 then {''Patient''}\n        else if x = hospital then {''Doctor'', ''Eve''} else {})\n    (Location 2 := {''Doctor'', ''Eve''} - {''Eve''},\n     Location 3 := {''Eve'', ''Patient''})", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (if x = Location 3 then {''Patient'', ''Eve''}\n        else if x = hospital then {''Doctor''} else {}) =\n       ((\\<lambda>x.\n            if x = Location 3 then {''Patient''}\n            else if x = hospital then {''Doctor'', ''Eve''} else {})\n        (Location 2 := {''Doctor'', ''Eve''} - {''Eve''},\n         Location 3 := {''Eve'', ''Patient''}))\n        x", "apply (simp add: hospital_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x = Location 2 \\<longrightarrow>\n        {''Doctor''} = {''Doctor'', ''Eve''} - {''Eve''}) \\<and>\n       (x \\<noteq> Location 2 \\<longrightarrow>\n        x = Location 3 \\<longrightarrow>\n        {''Patient'', ''Eve''} = {''Eve'', ''Patient''})", "by blast"], ["proof (state)\nthis:\n  gdpr_scenario'' =\n  Infrastructure\n   (move_graph_a ''Eve'' hospital cloud (graphI gdpr_scenario'))\n   (delta gdpr_scenario')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step2r: \"gdpr_scenario'  \\<rightarrow>\\<^sub>n* gdpr_scenario''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario' \\<rightarrow>\\<^sub>n* gdpr_scenario''", "proof (simp add: state_transition_in_refl_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (gdpr_scenario', gdpr_scenario'')\n    \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*", "show \"(gdpr_scenario', gdpr_scenario'') \\<in> {(x::infrastructure, y::infrastructure). x \\<rightarrow>\\<^sub>n y}\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (gdpr_scenario', gdpr_scenario'')\n    \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*", "by (insert step2, auto)"], ["proof (state)\nthis:\n  (gdpr_scenario', gdpr_scenario'')\n  \\<in> {(x, y). x \\<rightarrow>\\<^sub>n y}\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Attack example: Eve can get onto cloud and get Patient's data \n   because the policy allows Eve to get on cloud.\n   This attack can easily be fixed by disabling Eve to \"get\"\n   in the policy (just change the \"True\" for cloud to a set with no \n   Eve in it).\n   However, it would not prevent Insider attacks (where Eve is \n   impersonating the Doctor, for example). Insider attacks can\n   be checked using the UasI predicate.\n*)"], ["", "text \\<open>For the Kripke structure\n\n@{text \\<open>gdpr_Kripke \\<equiv> Kripke { I. gdpr_scenario \\<rightarrow>\\<^sub>i* I } {gdpr_scenario}\\<close>}\n\nwe first derive a valid and-attack using the attack tree proof calculus.\n\n@{text \\<open>\"\\<turnstile>[\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>\\<close>}\n\nThe set @{text \\<open>GDPR'\\<close>} (see above) is an intermediate state where Eve accesses the cloud.\\<close>"], ["", "lemma gdpr_ref: \"[\\<N>\\<^bsub>(Igdpr,sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup> \\<sqsubseteq>\n                  ([\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [\\<N>\\<^bsub>(Igdpr,\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup> \\<sqsubseteq> [\\<N>\\<^bsub>(Igdpr,\n                               GDPR')\\<^esub>,\n                  \\<N>\\<^bsub>(GDPR',\n                               sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n sgdpr)\\<^esup>", "proof (rule_tac l = \"[]\" and l' = \"[\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>]\" and\n                  l'' = \"[]\" and si = Igdpr and si' = Igdpr and \n                  si'' = sgdpr and si''' = sgdpr in refI, simp, rule refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR',\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup> =\n    [] @\n    [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] @\n    [] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>", "show \"([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>) =\n    ([] @ [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] @ [] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR',\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup> =\n    [] @\n    [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] @\n    [] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>", "by simp"], ["proof (state)\nthis:\n  [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n   \\<N>\\<^bsub>(GDPR',\n                sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                        sgdpr)\\<^esup> =\n  [] @\n  [\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] @\n  [] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma att_gdpr: \"\\<turnstile>([\\<N>\\<^bsub>(Igdpr,GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR',sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n                 \\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\nsgdpr)\\<^esup>", "proof (subst att_and, simp, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>\n 2. \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\nsgdpr)\\<^esup>", "show \" \\<turnstile>\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>", "apply (simp add: Igdpr_def GDPR'_def att_base)"], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario \\<rightarrow>\\<^sub>i gdpr_scenario'", "using state_transition_infra_def step1"], ["proof (prove)\nusing this:\n  (?i \\<rightarrow>\\<^sub>i ?i') = (?i \\<rightarrow>\\<^sub>n ?i')\n  gdpr_scenario \\<rightarrow>\\<^sub>n gdpr_scenario'\n\ngoal (1 subgoal):\n 1. gdpr_scenario \\<rightarrow>\\<^sub>i gdpr_scenario'", "by blast"], ["proof (state)\nthis:\n  \\<turnstile>\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\nsgdpr)\\<^esup>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\nsgdpr)\\<^esup>", "have \"\\<not> global_policy' gdpr_scenario'' ''Eve''\" \"gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> global_policy' gdpr_scenario'' ''Eve'' &&&\n    gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''", "using step2"], ["proof (prove)\nusing this:\n  gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\n\ngoal (1 subgoal):\n 1. \\<not> global_policy' gdpr_scenario'' ''Eve'' &&&\n    gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''", "by (auto simp: global_policy'_def gdpr_scenario''_def gdpr_actors_def \n                      enables_def local_policies_def cloud_def sphone_def intro!: step2)"], ["proof (state)\nthis:\n  \\<not> global_policy' gdpr_scenario'' ''Eve''\n  gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\n\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\nsgdpr)\\<^esup>", "then"], ["proof (chain)\npicking this:\n  \\<not> global_policy' gdpr_scenario'' ''Eve''\n  gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''", "show \"\\<turnstile>([\\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR', sgdpr)\\<^esup>)\""], ["proof (prove)\nusing this:\n  \\<not> global_policy' gdpr_scenario'' ''Eve''\n  gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\n\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\nsgdpr)\\<^esup>", "apply (subst att_and)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> global_policy' gdpr_scenario'' ''Eve'';\n     gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\\<rbrakk>\n    \\<Longrightarrow> case [\\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] of\n                      [] \\<Rightarrow>\n                        fst (GDPR', sgdpr) \\<subseteq> snd (GDPR', sgdpr)\n                      | [a] \\<Rightarrow>\n                          \\<turnstile>a \\<and> attack a = (GDPR', sgdpr)\n                      | a # ab # list \\<Rightarrow>\n                          \\<turnstile>a \\<and>\n                          fst (attack a) = fst (GDPR', sgdpr) \\<and>\n                          \\<turnstile>ab #\nlist \\<oplus>\\<^sub>\\<and>\\<^bsup>(snd (attack a),\n                                   snd (GDPR', sgdpr))\\<^esup>", "apply (simp add: GDPR'_def sgdpr_def att_base)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> global_policy' gdpr_scenario'' ''Eve'';\n     gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         \\<not> global_policy' x ''Eve'' \\<and>\n                         gdpr_scenario' \\<rightarrow>\\<^sub>i x", "using state_transition_infra_def"], ["proof (prove)\nusing this:\n  (?i \\<rightarrow>\\<^sub>i ?i') = (?i \\<rightarrow>\\<^sub>n ?i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> global_policy' gdpr_scenario'' ''Eve'';\n     gdpr_scenario' \\<rightarrow>\\<^sub>n gdpr_scenario''\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         \\<not> global_policy' x ''Eve'' \\<and>\n                         gdpr_scenario' \\<rightarrow>\\<^sub>i x", "by blast"], ["proof (state)\nthis:\n  \\<turnstile>[\\<N>\\<^bsub>(GDPR',\n                            sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(GDPR',\n                                    sgdpr)\\<^esup>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gdpr_abs_att: \"\\<turnstile>\\<^sub>V([\\<N>\\<^bsub>(Igdpr,sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,sgdpr)\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>V [\\<N>\\<^bsub>(Igdpr,\n sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>", "by (rule ref_valI, rule gdpr_ref, rule att_gdpr)"], ["", "text \\<open>We can then simply apply the Correctness theorem @{text \\<open>AT EF\\<close>} to immediately \n      prove the following CTL statement.\n\n      @{text \\<open>gdpr_Kripke \\<turnstile> EF sgdpr\\<close>}\n\nThis application of the meta-theorem of Correctness of attack trees saves us\nproving the CTL formula tediously by exploring the state space.\\<close>"], ["", "lemma gdpr_att: \"gdpr_Kripke \\<turnstile> EF {x. \\<not>(global_policy' x ''Eve'')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "have a: \" \\<turnstile>([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>[\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n                 \\<N>\\<^bsub>(GDPR',\n                              sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\nsgdpr)\\<^esup>", "by (rule att_gdpr)"], ["proof (state)\nthis:\n  \\<turnstile>[\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n               \\<N>\\<^bsub>(GDPR',\n                            sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                                    sgdpr)\\<^esup>\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "hence \"(Igdpr,sgdpr) = attack ([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>, \\<N>\\<^bsub>(GDPR', sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr, sgdpr)\\<^esup>)\""], ["proof (prove)\nusing this:\n  \\<turnstile>[\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n               \\<N>\\<^bsub>(GDPR',\n                            sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                                    sgdpr)\\<^esup>\n\ngoal (1 subgoal):\n 1. (Igdpr, sgdpr) =\n    attack\n     ([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n       \\<N>\\<^bsub>(GDPR',\n                    sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                            sgdpr)\\<^esup>)", "by simp"], ["proof (state)\nthis:\n  (Igdpr, sgdpr) =\n  attack\n   ([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR',\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup>)\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "hence \"Kripke {s::infrastructure. \\<exists>i::infrastructure\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s} Igdpr \\<turnstile> EF sgdpr\""], ["proof (prove)\nusing this:\n  (Igdpr, sgdpr) =\n  attack\n   ([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR',\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup>)\n\ngoal (1 subgoal):\n 1. Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n     Igdpr \\<turnstile> EF sgdpr", "using ATV_EF gdpr_abs_att"], ["proof (prove)\nusing this:\n  (Igdpr, sgdpr) =\n  attack\n   ([\\<N>\\<^bsub>(Igdpr, GDPR')\\<^esub>,\n     \\<N>\\<^bsub>(GDPR',\n                  sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n                          sgdpr)\\<^esup>)\n  \\<lbrakk>\\<turnstile>\\<^sub>V ?A; (?I, ?s) = attack ?A\\<rbrakk>\n  \\<Longrightarrow> Kripke\n                     {s. \\<exists>i\\<in>?I. i \\<rightarrow>\\<^sub>i* s}\n                     ?I \\<turnstile> EF ?s\n  \\<turnstile>\\<^sub>V [\\<N>\\<^bsub>(Igdpr,\n                                     sgdpr)\\<^esub>] \\<oplus>\\<^sub>\\<and>\\<^bsup>(Igdpr,\n       sgdpr)\\<^esup>\n\ngoal (1 subgoal):\n 1. Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n     Igdpr \\<turnstile> EF sgdpr", "by fastforce"], ["proof (state)\nthis:\n  Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n   Igdpr \\<turnstile> EF sgdpr\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "thus \"gdpr_Kripke \\<turnstile> EF {x::infrastructure. \\<not> global_policy' x ''Eve''}\""], ["proof (prove)\nusing this:\n  Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n   Igdpr \\<turnstile> EF sgdpr\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}", "by (simp add: gdpr_Kripke_def gdpr_states_def Igdpr_def sgdpr_def)"], ["proof (state)\nthis:\n  gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem gdpr_EF: \"gdpr_Kripke \\<turnstile> EF sgdpr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF sgdpr", "using gdpr_att sgdpr_def"], ["proof (prove)\nusing this:\n  gdpr_Kripke \\<turnstile> EF {x. \\<not> global_policy' x ''Eve''}\n  sgdpr \\<equiv> {x. \\<not> global_policy' x ''Eve''}\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF sgdpr", "by blast"], ["", "text \\<open>Similarly, vice-versa, the CTL statement proved in @{text \\<open>gdpr_EF\\<close>}\n    can now be directly translated into Attack Trees using the Completeness \n    Theorem\\footnote{This theorem could easily \n    be proved as a direct instance of @{text \\<open>att_gdpr\\<close>} above but we want to illustrate\n    an alternative proof method using Completeness here.}.\\<close>"], ["", "theorem gdpr_AT: \"\\<exists> A. \\<turnstile> A \\<and> attack A = (Igdpr,sgdpr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)", "have a: \"gdpr_Kripke \\<turnstile> EF sgdpr \""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF sgdpr", "by (rule gdpr_EF)"], ["proof (state)\nthis:\n  gdpr_Kripke \\<turnstile> EF sgdpr\n\ngoal (1 subgoal):\n 1. \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)", "have b: \"Igdpr \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Igdpr \\<noteq> {}", "by (simp add: Igdpr_def)"], ["proof (state)\nthis:\n  Igdpr \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)", "thus \"\\<exists>A::infrastructure attree. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)\""], ["proof (prove)\nusing this:\n  Igdpr \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)", "proof (rule Completeness)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite Igdpr\n 2. Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n     Igdpr \\<turnstile> EF sgdpr", "show \"Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s} Igdpr \\<turnstile> EF sgdpr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n     Igdpr \\<turnstile> EF sgdpr", "using a"], ["proof (prove)\nusing this:\n  gdpr_Kripke \\<turnstile> EF sgdpr\n\ngoal (1 subgoal):\n 1. Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n     Igdpr \\<turnstile> EF sgdpr", "by (simp add: gdpr_Kripke_def Igdpr_def gdpr_states_def)"], ["proof (state)\nthis:\n  Kripke {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n   Igdpr \\<turnstile> EF sgdpr\n\ngoal (1 subgoal):\n 1. finite Igdpr", "qed (auto simp: Igdpr_def)"], ["proof (state)\nthis:\n  \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Conversely, since we have an attack given by rule @{text \\<open>gdpr_AT\\<close>}, we can immediately \n   infer @{text \\<open>EF s\\<close>} using Correctness @{text \\<open>AT_EF\\<close>}\\footnote{Clearly, this theorem is identical\n   to @{text \\<open>gdpr_EF\\<close>} and could thus be inferred from that one but we want to show here an \n   alternative way of proving it using the Correctness theorem @{text \\<open>AT_EF\\<close>}.}.\\<close>"], ["", "theorem gdpr_EF': \"gdpr_Kripke \\<turnstile> EF sgdpr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF sgdpr", "using gdpr_AT"], ["proof (prove)\nusing this:\n  \\<exists>A. \\<turnstile>A \\<and> attack A = (Igdpr, sgdpr)\n\ngoal (1 subgoal):\n 1. gdpr_Kripke \\<turnstile> EF sgdpr", "by (auto simp: gdpr_Kripke_def gdpr_states_def Igdpr_def dest: AT_EF)"], ["", "(* However, when integrating DLM into the model and hence labeling\n   information becomes part of the conditions of the get_data rule this isn't\n   possible any more: gdpr_EF is not true any more *)    \n(** GDPR properties  for the illustration of the DLM labeling **)"], ["", "section \\<open>Data Protection by Design for GDPR compliance\\<close>"], ["", "subsection \\<open>General Data Protection Regulation (GDPR)\\<close>"], ["", "text \\<open>Since 26th May 2018, the GDPR has become mandatory within the European Union and hence \nalso for any supplier of IT products. Breaches of the regulation will be fined with penalties \nof 20 Million EUR. Despite the relatively large size of the document of 209 pages, the technically \nrelevant portion for us is only about 30 pages (Pages 81?111, Chapters I to Chapter III, Section 3). \nIn summary, Chapter III specifies that the controller must give the data subject read access (1) \nto any information, communications, and ?meta-data? of the data, e.g., retention time and purpose. \nIn addition, the system must enable deletion of data (2) and restriction of processing.\nAn invariant condition for data processing resulting from these Articles is that the system functions \nmust preserve any of the access rights of personal data (3).\n\nUsing labeled data, we can now express the essence of Article 4 Paragraph (1): \n?personal data? means any information relating to an identified or identifiable natural \nperson (?data subject?).\n\nThe labels of data must not be changed by processing: we have identified this  as \nan invariant (3) resulting from the GDPR above. This invariant is formalized in \nour Isabelle model by the type definition of functions on labeled data @{text \\<open>label_fun\\<close>}\n(see Section 4.2) that preserve the data labels.\\<close>"], ["", "subsection \\<open>Policy enforcement and privacy preservation\\<close>"], ["", "text \\<open>We can now use the labeled data to encode the privacy constraints of the \n    GDPR in the rules. For example, the get data rule (see Section 4.3) has labelled data \n    @{text \\<open>((Actor a?, as), n)\\<close>} and uses the labeling in the precondition to guarantee \n    that only entitled users can get data.\n\nWe can prove that processing preserves ownership as defined in the initial state for all paths \nglobally (AG) within the Kripke structure and in all locations of the graph.\\<close>"], ["", "(* GDPR three: Processing preserves ownership in any location *)"], ["", "lemma gdpr_three: \"h \\<in> gdpr_actors \\<Longrightarrow> l \\<in> gdpr_locations \\<Longrightarrow>\n         owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\n         gdpr_Kripke \\<turnstile> AG {x. \\<forall> l \\<in> gdpr_locations. owns (Igraph x) l (Actor h) d }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_Kripke \\<turnstile> AG\n          {x. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}", "proof (simp add: gdpr_Kripke_def check_def, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_scenario \\<in> gdpr_states\n 2. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_scenario\n                      \\<in> AG {x. \\<forall>l\\<in>gdpr_locations.\nowns (Igraph x) l (Actor h) d}", "show \"gdpr_scenario \\<in> gdpr_states\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gdpr_scenario \\<in> gdpr_states", "by (simp add: gdpr_states_def state_transition_refl_def)"], ["proof (state)\nthis:\n  gdpr_scenario \\<in> gdpr_states\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_scenario\n                      \\<in> AG {x. \\<forall>l\\<in>gdpr_locations.\nowns (Igraph x) l (Actor h) d}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_scenario\n                      \\<in> AG {x. \\<forall>l\\<in>gdpr_locations.\nowns (Igraph x) l (Actor h) d}", "show \"h \\<in> gdpr_actors \\<Longrightarrow>\n    l \\<in> gdpr_locations \\<Longrightarrow>\n    owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\n    gdpr_scenario \\<in> AG {x::infrastructure. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> gdpr_scenario\n                      \\<in> AG {x. \\<forall>l\\<in>gdpr_locations.\nowns (Igraph x) l (Actor h) d}", "apply (simp add: AG_def gfp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<subseteq>{x.\n      \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}.\n                         x \\<subseteq> AX x \\<and> gdpr_scenario \\<in> x", "apply (rule_tac x = \"{x::infrastructure. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n    \\<Longrightarrow> {x. \\<forall>l\\<in>gdpr_locations.\n                             owns (Igraph x) l (Actor h) d}\n                      \\<subseteq> {x. \\<forall>l\\<in>gdpr_locations.\n   owns (Igraph x) l (Actor h) d} \\<and>\n                      {x. \\<forall>l\\<in>gdpr_locations.\n                             owns (Igraph x) l (Actor h) d}\n                      \\<subseteq> AX {x.\n\\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d} \\<and>\n                      gdpr_scenario\n                      \\<in> {x. \\<forall>l\\<in>gdpr_locations.\n                                   owns (Igraph x) l (Actor h) d}", "by (auto simp: AX_def gdpr_scenario_def owns_def)"], ["proof (state)\nthis:\n  \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n   owns (Igraph gdpr_scenario) l (Actor h) d\\<rbrakk>\n  \\<Longrightarrow> gdpr_scenario\n                    \\<in> AG {x. \\<forall>l\\<in>gdpr_locations.\n                                    owns (Igraph x) l (Actor h) d}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The final application example of Correctness contraposition \n   shows that there is no attack to ownership possible.\nThe proved meta-theory for attack trees can be applied to facilitate the proof. \nThe contraposition of the Correctness property grants that if there is no attack on \n@{text \\<open>(I,\\<not>f)\\<close>}, then @{text \\<open>(EF \\<not>f)\\<close>} does not hold in the Kripke structure. This \nyields the theorem since the @{text \\<open>AG f\\<close>} statement corresponds to @{text \\<open>\\<not>(EF \\<not>f)\\<close>}.\n\\<close>"], ["", "theorem no_attack_gdpr_three: \n\"h \\<in> gdpr_actors \\<Longrightarrow> l \\<in> gdpr_locations \\<Longrightarrow> \n owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\nattack A = (Igdpr, -{x. \\<forall> l \\<in> gdpr_locations. owns (Igraph x) l (Actor h) d })\n\\<Longrightarrow> \\<not> (\\<turnstile> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> \\<not> \\<turnstile>A", "proof (rule_tac I = Igdpr and \n           s = \"-{x::infrastructure. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}\" \n       in contrapos_corr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> \\<not> Kripke\n                              {s. \\<exists>i\\<in>Igdpr.\n                                     i \\<rightarrow>\\<^sub>i* s}\n                              Igdpr \\<turnstile> EF\n            (- {x. \\<forall>l\\<in>gdpr_locations.\n                      owns (Igraph x) l (Actor h) d})\n 2. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> attack A =\n                      (Igdpr,\n                       - {x. \\<forall>l\\<in>gdpr_locations.\n                                owns (Igraph x) l (Actor h) d})", "show \"h \\<in> gdpr_actors \\<Longrightarrow>\n    l \\<in> gdpr_locations \\<Longrightarrow>\n    owns (Igraph gdpr_scenario) l (Actor h) d \\<Longrightarrow>\n    attack A = (Igdpr, - {x::infrastructure. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}) \\<Longrightarrow>\n    \\<not> (Kripke {s::infrastructure. \\<exists>i::infrastructure\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n        Igdpr \\<turnstile> EF (- {x::infrastructure. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> \\<not> Kripke\n                              {s. \\<exists>i\\<in>Igdpr.\n                                     i \\<rightarrow>\\<^sub>i* s}\n                              Igdpr \\<turnstile> EF\n            (- {x. \\<forall>l\\<in>gdpr_locations.\n                      owns (Igraph x) l (Actor h) d})", "apply (rule AG_imp_notnotEF)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> Igdpr \\<noteq> {}\n 2. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> Kripke\n                       {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n                       Igdpr \\<turnstile> AG\n     {x. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}", "apply (simp add: gdpr_Kripke_def Igdpr_def gdpr_states_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> Kripke\n                       {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n                       Igdpr \\<turnstile> AG\n     {x. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}", "using Igdpr_def gdpr_Kripke_def gdpr_states_def gdpr_three"], ["proof (prove)\nusing this:\n  Igdpr \\<equiv> {gdpr_scenario}\n  gdpr_Kripke \\<equiv> Kripke gdpr_states {gdpr_scenario}\n  gdpr_states \\<equiv> {I. gdpr_scenario \\<rightarrow>\\<^sub>i* I}\n  \\<lbrakk>?h \\<in> gdpr_actors; ?l \\<in> gdpr_locations;\n   owns (?Igraph gdpr_scenario) ?l (Actor ?h) ?d\\<rbrakk>\n  \\<Longrightarrow> gdpr_Kripke \\<turnstile> AG\n        {x. \\<forall>l\\<in>gdpr_locations. owns (?Igraph x) l (Actor ?h) ?d}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> Kripke\n                       {s. \\<exists>i\\<in>Igdpr. i \\<rightarrow>\\<^sub>i* s}\n                       Igdpr \\<turnstile> AG\n     {x. \\<forall>l\\<in>gdpr_locations. owns (Igraph x) l (Actor h) d}", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n   owns (Igraph gdpr_scenario) l (Actor h) d;\n   attack A =\n   (Igdpr,\n    - {x. \\<forall>l\\<in>gdpr_locations.\n             owns (Igraph x) l (Actor h) d})\\<rbrakk>\n  \\<Longrightarrow> \\<not> Kripke\n                            {s. \\<exists>i\\<in>Igdpr.\n                                   i \\<rightarrow>\\<^sub>i* s}\n                            Igdpr \\<turnstile> EF\n          (- {x. \\<forall>l\\<in>gdpr_locations.\n                    owns (Igraph x) l (Actor h) d})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> gdpr_actors; l \\<in> gdpr_locations;\n     owns (Igraph gdpr_scenario) l (Actor h) d;\n     attack A =\n     (Igdpr,\n      - {x. \\<forall>l\\<in>gdpr_locations.\n               owns (Igraph x) l (Actor h) d})\\<rbrakk>\n    \\<Longrightarrow> attack A =\n                      (Igdpr,\n                       - {x. \\<forall>l\\<in>gdpr_locations.\n                                owns (Igraph x) l (Actor h) d})", "qed"], ["", "end"], ["", "end"]]}