{"file_name": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework/Calculus.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework", "problem_names": ["lemma entail_set_all_formulas: \"N1 \\<Turnstile> N2 \\<longleftrightarrow> (\\<forall>C \\<in> N2. N1 \\<Turnstile> {C})\"", "lemma entail_union: \"N \\<Turnstile> N1 \\<and> N \\<Turnstile> N2 \\<longleftrightarrow> N \\<Turnstile> N1 \\<union> N2\"", "lemma entail_unions: \"(\\<forall>i \\<in> I. N \\<Turnstile> Ni i) \\<longleftrightarrow> N \\<Turnstile> \\<Union> (Ni ` I)\"", "lemma entail_all_bot: \"(\\<exists>B \\<in> Bot. N \\<Turnstile> {B}) \\<Longrightarrow> \\<forall>B' \\<in> Bot. N \\<Turnstile> {B'}\"", "lemma entails_trans_strong: \"N1 \\<Turnstile> N2 \\<Longrightarrow> N1 \\<union> N2 \\<Turnstile> N3 \\<Longrightarrow> N1 \\<Turnstile> N3\"", "lemma bot_not_empty: \"Bot \\<noteq> {}\"", "lemma intersect_cons_rel_family: \"consequence_relation Bot entails\"", "lemma Inf_if_Inf_from: \"\\<iota> \\<in> Inf_from N \\<Longrightarrow> \\<iota> \\<in> Inf\"", "lemma Inf_if_Inf_between: \"\\<iota> \\<in> Inf_between N M \\<Longrightarrow> \\<iota> \\<in> Inf\"", "lemma Inf_between_alt:\n  \"Inf_between N M = {\\<iota> \\<in> Inf. \\<iota> \\<in> Inf_from (N \\<union> M) \\<and> set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\"", "lemma Inf_from_mono: \"N \\<subseteq> N' \\<Longrightarrow> Inf_from N \\<subseteq> Inf_from N'\"", "lemma Inf_between_mono: \"N \\<subseteq> N' \\<Longrightarrow> M \\<subseteq> M' \\<Longrightarrow> Inf_between N M \\<subseteq> Inf_between N' M'\"", "lemma Inf_between_q_alt:\n  \"Inf_between_q q N M = {\\<iota> \\<in> Inf_q q. \\<iota> \\<in> Inf_from_q q (N \\<union> M) \\<and> set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\"", "lemma Red_I_of_Inf_to_N_subset: \"{\\<iota> \\<in> Inf. concl_of \\<iota> \\<in> N} \\<subseteq> Red_I N\"", "lemma red_concl_to_red_inf:\n  assumes\n    i_in: \"\\<iota> \\<in> Inf\" and\n    concl: \"concl_of \\<iota> \\<in> Red_F N\"\n  shows \"\\<iota> \\<in> Red_I N\"", "lemma Red_I_without_red_F:\n  \"Red_I (N - Red_F N) = Red_I N\"", "lemma saturated_without_red_F:\n  assumes saturated: \"saturated N\"\n  shows \"saturated (N - Red_F N)\"", "lemma gt_Max_notin: \\<open>finite A \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> x > Max A \\<Longrightarrow> x \\<notin> A\\<close>", "lemma equiv_Sup_Liminf:\n  assumes\n    in_Sup: \"C \\<in> Sup_llist Ns\" and\n    not_in_Liminf: \"C \\<notin> Liminf_llist Ns\"\n  shows\n    \"\\<exists>i \\<in> {i. enat (Suc i) < llength Ns}. C \\<in> lnth Ns i - lnth Ns (Suc i)\"", "lemma Red_in_Sup:\n  assumes deriv: \"chain (\\<rhd>) Ns\"\n  shows \"Sup_llist Ns - Liminf_llist Ns \\<subseteq> Red_F (Sup_llist Ns)\"", "lemma Red_I_subset_Liminf:\n  assumes deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)\\<close>", "lemma Red_F_subset_Liminf:\n  assumes deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)\\<close>", "lemma i_in_Liminf_or_Red_F:\n  assumes\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>lnth Ns i \\<subseteq> Red_F (Liminf_llist Ns) \\<union> Liminf_llist Ns\\<close>", "lemma fair_implies_Liminf_saturated:\n  assumes\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    fair: \\<open>fair Ns\\<close>\n  shows \\<open>saturated (Liminf_llist Ns)\\<close>", "lemma dynamically_complete_Liminf:\n  fixes B Ns\n  assumes\n    bot_elem: \\<open>B \\<in> Bot\\<close> and\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    fair: \\<open>fair Ns\\<close> and\n    unsat: \\<open>lhd Ns \\<Turnstile> {B}\\<close>\n  shows \\<open>\\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\\<close>"], "translations": [["", "lemma entail_set_all_formulas: \"N1 \\<Turnstile> N2 \\<longleftrightarrow> (\\<forall>C \\<in> N2. N1 \\<Turnstile> {C})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N1 \\<Turnstile> N2) = (\\<forall>C\\<in>N2. N1 \\<Turnstile> {C})", "by (meson all_formulas_entailed empty_subsetI insert_subset subset_entailed entails_trans)"], ["", "lemma entail_union: \"N \\<Turnstile> N1 \\<and> N \\<Turnstile> N2 \\<longleftrightarrow> N \\<Turnstile> N1 \\<union> N2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N \\<Turnstile> N1 \\<and> N \\<Turnstile> N2) =\n    (N \\<Turnstile> N1 \\<union> N2)", "using entail_set_all_formulas[of N N1] entail_set_all_formulas[of N N2]\n    entail_set_all_formulas[of N \"N1 \\<union> N2\"]"], ["proof (prove)\nusing this:\n  (N \\<Turnstile> N1) = (\\<forall>C\\<in>N1. N \\<Turnstile> {C})\n  (N \\<Turnstile> N2) = (\\<forall>C\\<in>N2. N \\<Turnstile> {C})\n  (N \\<Turnstile> N1 \\<union> N2) =\n  (\\<forall>C\\<in>N1 \\<union> N2. N \\<Turnstile> {C})\n\ngoal (1 subgoal):\n 1. (N \\<Turnstile> N1 \\<and> N \\<Turnstile> N2) =\n    (N \\<Turnstile> N1 \\<union> N2)", "by blast"], ["", "lemma entail_unions: \"(\\<forall>i \\<in> I. N \\<Turnstile> Ni i) \\<longleftrightarrow> N \\<Turnstile> \\<Union> (Ni ` I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>I. N \\<Turnstile> Ni i) =\n    (N \\<Turnstile> \\<Union> (Ni ` I))", "using entail_set_all_formulas[of N \"\\<Union> (Ni ` I)\"] entail_set_all_formulas[of N]\n    Complete_Lattices.UN_ball_bex_simps(2)[of Ni I \"\\<lambda>C. N \\<Turnstile> {C}\", symmetric]"], ["proof (prove)\nusing this:\n  (N \\<Turnstile> \\<Union> (Ni ` I)) =\n  (\\<forall>C\\<in>\\<Union> (Ni ` I). N \\<Turnstile> {C})\n  (N \\<Turnstile> ?N2.0) = (\\<forall>C\\<in>?N2.0. N \\<Turnstile> {C})\n  (\\<forall>a\\<in>I. \\<forall>x\\<in>Ni a. N \\<Turnstile> {x}) =\n  (\\<forall>x\\<in>\\<Union> (Ni ` I). N \\<Turnstile> {x})\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>I. N \\<Turnstile> Ni i) =\n    (N \\<Turnstile> \\<Union> (Ni ` I))", "by meson"], ["", "lemma entail_all_bot: \"(\\<exists>B \\<in> Bot. N \\<Turnstile> {B}) \\<Longrightarrow> \\<forall>B' \\<in> Bot. N \\<Turnstile> {B'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B\\<in>Bot. N \\<Turnstile> {B} \\<Longrightarrow>\n    \\<forall>B'\\<in>Bot. N \\<Turnstile> {B'}", "using bot_entails_all entails_trans"], ["proof (prove)\nusing this:\n  ?B \\<in> Bot \\<Longrightarrow> {?B} \\<Turnstile> ?N1.0\n  \\<lbrakk>?N1.0 \\<Turnstile> ?N2.0; ?N2.0 \\<Turnstile> ?N3.0\\<rbrakk>\n  \\<Longrightarrow> ?N1.0 \\<Turnstile> ?N3.0\n\ngoal (1 subgoal):\n 1. \\<exists>B\\<in>Bot. N \\<Turnstile> {B} \\<Longrightarrow>\n    \\<forall>B'\\<in>Bot. N \\<Turnstile> {B'}", "by blast"], ["", "lemma entails_trans_strong: \"N1 \\<Turnstile> N2 \\<Longrightarrow> N1 \\<union> N2 \\<Turnstile> N3 \\<Longrightarrow> N1 \\<Turnstile> N3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>N1 \\<Turnstile> N2; N1 \\<union> N2 \\<Turnstile> N3\\<rbrakk>\n    \\<Longrightarrow> N1 \\<Turnstile> N3", "by (meson entail_union entails_trans order_refl subset_entailed)"], ["", "end"], ["", "subsection \\<open>Families of Consequence Relations\\<close>"], ["", "locale consequence_relation_family =\n  fixes\n    Bot :: \"'f set\" and\n    Q :: \"'q set\" and\n    entails_q :: \"'q \\<Rightarrow> 'f set \\<Rightarrow> 'f set \\<Rightarrow> bool\"\n  assumes\n    Q_nonempty: \"Q \\<noteq> {}\" and\n    q_cons_rel: \"\\<forall>q \\<in> Q. consequence_relation Bot (entails_q q)\"\nbegin"], ["", "lemma bot_not_empty: \"Bot \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bot \\<noteq> {}", "using Q_nonempty consequence_relation.bot_not_empty consequence_relation_family.q_cons_rel\n    consequence_relation_family_axioms"], ["proof (prove)\nusing this:\n  Q \\<noteq> {}\n  consequence_relation ?Bot ?entails \\<Longrightarrow> ?Bot \\<noteq> {}\n  consequence_relation_family ?Bot ?Q ?entails_q \\<Longrightarrow>\n  \\<forall>q\\<in>?Q. consequence_relation ?Bot (?entails_q q)\n  consequence_relation_family Bot Q entails_q\n\ngoal (1 subgoal):\n 1. Bot \\<noteq> {}", "by blast"], ["", "definition entails :: \"'f set \\<Rightarrow> 'f set \\<Rightarrow> bool\" (infix \"\\<Turnstile>Q\" 50) where\n  \"N1 \\<Turnstile>Q N2 \\<longleftrightarrow> (\\<forall>q \\<in> Q. entails_q q N1 N2)\""], ["", "(* lem:intersection-of-conseq-rel *)"], ["", "lemma intersect_cons_rel_family: \"consequence_relation Bot entails\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_relation Bot (\\<Turnstile>Q)", "unfolding consequence_relation_def entails_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Bot \\<noteq> {} \\<and>\n     (\\<forall>B N1.\n         B \\<in> Bot \\<longrightarrow>\n         (\\<forall>q\\<in>Q. entails_q q {B} N1))) \\<and>\n    (\\<forall>N2 N1.\n        N2 \\<subseteq> N1 \\<longrightarrow>\n        (\\<forall>q\\<in>Q. entails_q q N1 N2)) \\<and>\n    (\\<forall>N2 N1.\n        (\\<forall>C\\<in>N2.\n            \\<forall>q\\<in>Q. entails_q q N1 {C}) \\<longrightarrow>\n        (\\<forall>q\\<in>Q. entails_q q N1 N2)) \\<and>\n    (\\<forall>N1 N2 N3.\n        (\\<forall>q\\<in>Q. entails_q q N1 N2) \\<longrightarrow>\n        (\\<forall>q\\<in>Q. entails_q q N2 N3) \\<longrightarrow>\n        (\\<forall>q\\<in>Q. entails_q q N1 N3))", "by (intro conjI bot_not_empty) (metis consequence_relation_def q_cons_rel)+"], ["", "end"], ["", "subsection \\<open>Inference Systems\\<close>"], ["", "datatype 'f inference =\n  Infer (prems_of: \"'f list\") (concl_of: \"'f\")"], ["", "locale inference_system =\n  fixes\n    Inf :: \\<open>'f inference set\\<close>\nbegin"], ["", "definition Inf_from :: \"'f set \\<Rightarrow> 'f inference set\" where\n  \"Inf_from N = {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N}\""], ["", "definition Inf_between :: \"'f set \\<Rightarrow> 'f set \\<Rightarrow> 'f inference set\" where\n  \"Inf_between N M = Inf_from (N \\<union> M) - Inf_from (N - M)\""], ["", "lemma Inf_if_Inf_from: \"\\<iota> \\<in> Inf_from N \\<Longrightarrow> \\<iota> \\<in> Inf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_from N \\<Longrightarrow> \\<iota> \\<in> Inf", "unfolding Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {\\<iota> \\<in> Inf.\n           set (prems_of \\<iota>) \\<subseteq> N} \\<Longrightarrow>\n    \\<iota> \\<in> Inf", "by simp"], ["", "lemma Inf_if_Inf_between: \"\\<iota> \\<in> Inf_between N M \\<Longrightarrow> \\<iota> \\<in> Inf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_between N M \\<Longrightarrow> \\<iota> \\<in> Inf", "unfolding Inf_between_def Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {\\<iota> \\<in> Inf.\n           set (prems_of \\<iota>) \\<subseteq> N \\<union> M} -\n          {\\<iota> \\<in> Inf.\n           set (prems_of \\<iota>) \\<subseteq> N - M} \\<Longrightarrow>\n    \\<iota> \\<in> Inf", "by simp"], ["", "lemma Inf_between_alt:\n  \"Inf_between N M = {\\<iota> \\<in> Inf. \\<iota> \\<in> Inf_from (N \\<union> M) \\<and> set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_between N M =\n    {\\<iota> \\<in> Inf.\n     \\<iota> \\<in> Inf_from (N \\<union> M) \\<and>\n     set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}", "unfolding Inf_from_def Inf_between_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N \\<union> M} -\n    {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N - M} =\n    {\\<iota> \\<in> Inf.\n     \\<iota>\n     \\<in> {\\<iota> \\<in> Inf.\n            set (prems_of \\<iota>) \\<subseteq> N \\<union> M} \\<and>\n     set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}", "by auto"], ["", "lemma Inf_from_mono: \"N \\<subseteq> N' \\<Longrightarrow> Inf_from N \\<subseteq> Inf_from N'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<subseteq> N' \\<Longrightarrow> Inf_from N \\<subseteq> Inf_from N'", "unfolding Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<subseteq> N' \\<Longrightarrow>\n    {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N}\n    \\<subseteq> {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N'}", "by auto"], ["", "lemma Inf_between_mono: \"N \\<subseteq> N' \\<Longrightarrow> M \\<subseteq> M' \\<Longrightarrow> Inf_between N M \\<subseteq> Inf_between N' M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>N \\<subseteq> N'; M \\<subseteq> M'\\<rbrakk>\n    \\<Longrightarrow> Inf_between N M \\<subseteq> Inf_between N' M'", "unfolding Inf_between_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>N \\<subseteq> N'; M \\<subseteq> M'\\<rbrakk>\n    \\<Longrightarrow> {\\<iota> \\<in> Inf.\n                       \\<iota> \\<in> Inf_from (N \\<union> M) \\<and>\n                       set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\n                      \\<subseteq> {\\<iota> \\<in> Inf.\n                                   \\<iota>\n                                   \\<in> Inf_from (N' \\<union> M') \\<and>\n                                   set (prems_of \\<iota>) \\<inter>\n                                   M' \\<noteq>\n                                   {}}", "using Inf_from_mono[of \"N \\<union> M\" \"N' \\<union> M'\"]"], ["proof (prove)\nusing this:\n  N \\<union> M \\<subseteq> N' \\<union> M' \\<Longrightarrow>\n  Inf_from (N \\<union> M) \\<subseteq> Inf_from (N' \\<union> M')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>N \\<subseteq> N'; M \\<subseteq> M'\\<rbrakk>\n    \\<Longrightarrow> {\\<iota> \\<in> Inf.\n                       \\<iota> \\<in> Inf_from (N \\<union> M) \\<and>\n                       set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\n                      \\<subseteq> {\\<iota> \\<in> Inf.\n                                   \\<iota>\n                                   \\<in> Inf_from (N' \\<union> M') \\<and>\n                                   set (prems_of \\<iota>) \\<inter>\n                                   M' \\<noteq>\n                                   {}}", "by auto"], ["", "end"], ["", "subsection \\<open>Families of Inference Systems\\<close>"], ["", "locale inference_system_family =\n  fixes\n    Q :: \"'q set\" and\n    Inf_q :: \"'q \\<Rightarrow> 'f inference set\"\n  assumes\n    Q_nonempty: \"Q \\<noteq> {}\"\nbegin"], ["", "definition Inf_from_q :: \"'q \\<Rightarrow> 'f set \\<Rightarrow> 'f inference set\" where\n  \"Inf_from_q q = inference_system.Inf_from (Inf_q q)\""], ["", "definition Inf_between_q :: \"'q \\<Rightarrow> 'f set \\<Rightarrow> 'f set \\<Rightarrow> 'f inference set\" where\n  \"Inf_between_q q = inference_system.Inf_between (Inf_q q)\""], ["", "lemma Inf_between_q_alt:\n  \"Inf_between_q q N M = {\\<iota> \\<in> Inf_q q. \\<iota> \\<in> Inf_from_q q (N \\<union> M) \\<and> set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_between_q q N M =\n    {\\<iota> \\<in> Inf_q q.\n     \\<iota> \\<in> Inf_from_q q (N \\<union> M) \\<and>\n     set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}", "unfolding Inf_from_q_def Inf_between_q_def inference_system.Inf_between_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf_q q.\n     \\<iota> \\<in> inference_system.Inf_from (Inf_q q) (N \\<union> M) \\<and>\n     set (prems_of \\<iota>) \\<inter> M \\<noteq> {}} =\n    {\\<iota> \\<in> Inf_q q.\n     \\<iota> \\<in> inference_system.Inf_from (Inf_q q) (N \\<union> M) \\<and>\n     set (prems_of \\<iota>) \\<inter> M \\<noteq> {}}", "by auto"], ["", "end"], ["", "subsection \\<open>Calculi Based on a Single Redundancy Criterion\\<close>"], ["", "locale calculus = inference_system Inf + consequence_relation Bot entails\n  for\n    Bot :: \"'f set\" and\n    Inf :: \\<open>'f inference set\\<close> and\n    entails :: \"'f set \\<Rightarrow> 'f set \\<Rightarrow> bool\" (infix \"\\<Turnstile>\" 50)\n  + fixes\n    Red_I :: \"'f set \\<Rightarrow> 'f inference set\" and\n    Red_F :: \"'f set \\<Rightarrow> 'f set\"\n  assumes\n    Red_I_to_Inf: \"Red_I N \\<subseteq> Inf\" and\n    Red_F_Bot: \"B \\<in> Bot \\<Longrightarrow> N \\<Turnstile> {B} \\<Longrightarrow> N - Red_F N \\<Turnstile> {B}\" and\n    Red_F_of_subset: \"N \\<subseteq> N' \\<Longrightarrow> Red_F N \\<subseteq> Red_F N'\" and\n    Red_I_of_subset: \"N \\<subseteq> N' \\<Longrightarrow> Red_I N \\<subseteq> Red_I N'\" and\n    Red_F_of_Red_F_subset: \"N' \\<subseteq> Red_F N \\<Longrightarrow> Red_F N \\<subseteq> Red_F (N - N')\" and\n    Red_I_of_Red_F_subset: \"N' \\<subseteq> Red_F N \\<Longrightarrow> Red_I N \\<subseteq> Red_I (N - N')\" and\n    Red_I_of_Inf_to_N: \"\\<iota> \\<in> Inf \\<Longrightarrow> concl_of \\<iota> \\<in> N \\<Longrightarrow> \\<iota> \\<in> Red_I N\"\nbegin"], ["", "lemma Red_I_of_Inf_to_N_subset: \"{\\<iota> \\<in> Inf. concl_of \\<iota> \\<in> N} \\<subseteq> Red_I N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf. concl_of \\<iota> \\<in> N} \\<subseteq> Red_I N", "using Red_I_of_Inf_to_N"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<iota> \\<in> Inf; concl_of ?\\<iota> \\<in> ?N\\<rbrakk>\n  \\<Longrightarrow> ?\\<iota> \\<in> Red_I ?N\n\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf. concl_of \\<iota> \\<in> N} \\<subseteq> Red_I N", "by blast"], ["", "(* lem:red-concl-implies-red-inf *)"], ["", "lemma red_concl_to_red_inf:\n  assumes\n    i_in: \"\\<iota> \\<in> Inf\" and\n    concl: \"concl_of \\<iota> \\<in> Red_F N\"\n  shows \"\\<iota> \\<in> Red_I N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "have \"\\<iota> \\<in> Red_I (Red_F N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (Red_F N)", "by (simp add: Red_I_of_Inf_to_N i_in concl)"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I (Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> Red_I (Red_F N)", "have i_in_Red: \"\\<iota> \\<in> Red_I (N \\<union> Red_F N)\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Red_I (Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (N \\<union> Red_F N)", "by (simp add: Red_I_of_Inf_to_N concl i_in)"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I (N \\<union> Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "have red_n_subs: \"Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)", "by (simp add: Red_F_of_subset)"], ["proof (state)\nthis:\n  Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "then"], ["proof (chain)\npicking this:\n  Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)", "have \"\\<iota> \\<in> Red_I ((N \\<union> Red_F N) - (Red_F N - N))\""], ["proof (prove)\nusing this:\n  Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (N \\<union> Red_F N - (Red_F N - N))", "using Red_I_of_Red_F_subset i_in_Red"], ["proof (prove)\nusing this:\n  Red_F N \\<subseteq> Red_F (N \\<union> Red_F N)\n  ?N' \\<subseteq> Red_F ?N \\<Longrightarrow>\n  Red_I ?N \\<subseteq> Red_I (?N - ?N')\n  \\<iota> \\<in> Red_I (N \\<union> Red_F N)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (N \\<union> Red_F N - (Red_F N - N))", "by (meson Diff_subset subsetCE subset_trans)"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I (N \\<union> Red_F N - (Red_F N - N))\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> Red_I (N \\<union> Red_F N - (Red_F N - N))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Red_I (N \\<union> Red_F N - (Red_F N - N))\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I N", "by (metis Diff_cancel Diff_subset Un_Diff Un_Diff_cancel contra_subsetD\n    calculus.Red_I_of_subset calculus_axioms sup_bot.right_neutral)"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I N\n\ngoal:\nNo subgoals!", "qed"], ["", "definition saturated :: \"'f set \\<Rightarrow> bool\" where\n  \"saturated N \\<longleftrightarrow> Inf_from N \\<subseteq> Red_I N\""], ["", "definition reduc_saturated :: \"'f set \\<Rightarrow> bool\" where\n  \"reduc_saturated N \\<longleftrightarrow> Inf_from (N - Red_F N) \\<subseteq> Red_I N\""], ["", "lemma Red_I_without_red_F:\n  \"Red_I (N - Red_F N) = Red_I N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_I (N - Red_F N) = Red_I N", "using Red_I_of_subset [of \"N - Red_F N\" N]\n    and Red_I_of_Red_F_subset [of \"Red_F N\" N]"], ["proof (prove)\nusing this:\n  N - Red_F N \\<subseteq> N \\<Longrightarrow>\n  Red_I (N - Red_F N) \\<subseteq> Red_I N\n  Red_F N \\<subseteq> Red_F N \\<Longrightarrow>\n  Red_I N \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. Red_I (N - Red_F N) = Red_I N", "by blast"], ["", "lemma saturated_without_red_F:\n  assumes saturated: \"saturated N\"\n  shows \"saturated (N - Red_F N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "have \"Inf_from (N - Red_F N) \\<subseteq> Inf_from N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_from (N - Red_F N) \\<subseteq> Inf_from N", "unfolding Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N - Red_F N}\n    \\<subseteq> {\\<iota> \\<in> Inf. set (prems_of \\<iota>) \\<subseteq> N}", "by auto"], ["proof (state)\nthis:\n  Inf_from (N - Red_F N) \\<subseteq> Inf_from N\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "also"], ["proof (state)\nthis:\n  Inf_from (N - Red_F N) \\<subseteq> Inf_from N\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "have \"Inf_from N \\<subseteq> Red_I N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_from N \\<subseteq> Red_I N", "using saturated"], ["proof (prove)\nusing this:\n  saturated N\n\ngoal (1 subgoal):\n 1. Inf_from N \\<subseteq> Red_I N", "unfolding saturated_def"], ["proof (prove)\nusing this:\n  Inf_from N \\<subseteq> Red_I N\n\ngoal (1 subgoal):\n 1. Inf_from N \\<subseteq> Red_I N", "by auto"], ["proof (state)\nthis:\n  Inf_from N \\<subseteq> Red_I N\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "also"], ["proof (state)\nthis:\n  Inf_from N \\<subseteq> Red_I N\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "have \"Red_I N \\<subseteq> Red_I (N - Red_F N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_I N \\<subseteq> Red_I (N - Red_F N)", "using Red_I_of_Red_F_subset"], ["proof (prove)\nusing this:\n  ?N' \\<subseteq> Red_F ?N \\<Longrightarrow>\n  Red_I ?N \\<subseteq> Red_I (?N - ?N')\n\ngoal (1 subgoal):\n 1. Red_I N \\<subseteq> Red_I (N - Red_F N)", "by auto"], ["proof (state)\nthis:\n  Red_I N \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "finally"], ["proof (chain)\npicking this:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)", "have \"Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)\""], ["proof (prove)\nusing this:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)", "by auto"], ["proof (state)\nthis:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "then"], ["proof (chain)\npicking this:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)", "show ?thesis"], ["proof (prove)\nusing this:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. saturated (N - Red_F N)", "unfolding saturated_def"], ["proof (prove)\nusing this:\n  Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)\n\ngoal (1 subgoal):\n 1. Inf_from (N - Red_F N) \\<subseteq> Red_I (N - Red_F N)", "by auto"], ["proof (state)\nthis:\n  saturated (N - Red_F N)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition fair :: \"'f set llist \\<Rightarrow> bool\" where\n  \"fair Ns \\<longleftrightarrow> Inf_from (Liminf_llist Ns) \\<subseteq> Sup_llist (lmap Red_I Ns)\""], ["", "inductive \"derive\" :: \"'f set \\<Rightarrow> 'f set \\<Rightarrow> bool\" (infix \"\\<rhd>\" 50) where\n  derive: \"M - N \\<subseteq> Red_F N \\<Longrightarrow> M \\<rhd> N\""], ["", "lemma gt_Max_notin: \\<open>finite A \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> x > Max A \\<Longrightarrow> x \\<notin> A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; Max A < x\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> A", "by auto"], ["", "lemma equiv_Sup_Liminf:\n  assumes\n    in_Sup: \"C \\<in> Sup_llist Ns\" and\n    not_in_Liminf: \"C \\<notin> Liminf_llist Ns\"\n  shows\n    \"\\<exists>i \\<in> {i. enat (Suc i) < llength Ns}. C \\<in> lnth Ns i - lnth Ns (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "obtain i where C_D_i: \"C \\<in> Sup_upto_llist Ns (enat i)\" and \"enat i < llength Ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>C \\<in> Sup_upto_llist Ns (enat i);\n         enat i < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using elem_Sup_llist_imp_Sup_upto_llist in_Sup"], ["proof (prove)\nusing this:\n  ?x \\<in> Sup_llist ?Xs \\<Longrightarrow>\n  \\<exists>j.\n     enat j < llength ?Xs \\<and> ?x \\<in> Sup_upto_llist ?Xs (enat j)\n  C \\<in> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>C \\<in> Sup_upto_llist Ns (enat i);\n         enat i < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  C \\<in> Sup_upto_llist Ns (enat i)\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "then"], ["proof (chain)\npicking this:\n  C \\<in> Sup_upto_llist Ns (enat i)\n  enat i < llength Ns", "obtain j where j: \"j \\<ge> i \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\""], ["proof (prove)\nusing this:\n  C \\<in> Sup_upto_llist Ns (enat i)\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        i \\<le> j \\<and>\n        enat j < llength Ns \\<and> C \\<notin> lnth Ns j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using not_in_Liminf"], ["proof (prove)\nusing this:\n  C \\<in> Sup_upto_llist Ns (enat i)\n  enat i < llength Ns\n  C \\<notin> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        i \\<le> j \\<and>\n        enat j < llength Ns \\<and> C \\<notin> lnth Ns j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding Sup_upto_llist_def chain_def Liminf_llist_def"], ["proof (prove)\nusing this:\n  C \\<in> \\<Union>\n           (lnth Ns `\n            {ia. enat ia < llength Ns \\<and> enat ia \\<le> enat i})\n  enat i < llength Ns\n  C \\<notin> (\\<Union>i\\<in>{i. enat i < llength Ns}.\n                 \\<Inter>\n                  (lnth Ns ` {j. i \\<le> j \\<and> enat j < llength Ns}))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        i \\<le> j \\<and>\n        enat j < llength Ns \\<and> C \\<notin> lnth Ns j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<le> j \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "obtain k where k: \"C \\<in> lnth Ns k\" \"enat k < llength Ns\" \"k \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>C \\<in> lnth Ns k; enat k < llength Ns; k \\<le> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using C_D_i"], ["proof (prove)\nusing this:\n  C \\<in> Sup_upto_llist Ns (enat i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>C \\<in> lnth Ns k; enat k < llength Ns; k \\<le> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Sup_upto_llist_def"], ["proof (prove)\nusing this:\n  C \\<in> \\<Union>\n           (lnth Ns `\n            {ia. enat ia < llength Ns \\<and> enat ia \\<le> enat i})\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>C \\<in> lnth Ns k; enat k < llength Ns; k \\<le> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C \\<in> lnth Ns k\n  enat k < llength Ns\n  k \\<le> i\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "let ?S = \"{i. i < j \\<and> i \\<ge> k \\<and> C \\<in> lnth Ns i}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "define l where \"l = Max ?S\""], ["proof (state)\nthis:\n  l = Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "have \\<open>k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}", "using k j"], ["proof (prove)\nusing this:\n  C \\<in> lnth Ns k\n  enat k < llength Ns\n  k \\<le> i\n  i \\<le> j \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\n\ngoal (1 subgoal):\n 1. k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}", "by (auto simp: order.order_iff_strict)"], ["proof (state)\nthis:\n  k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "then"], ["proof (chain)\npicking this:\n  k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}", "have nempty: \"{i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  k \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "then"], ["proof (chain)\npicking this:\n  {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}", "have l_prop: \"l < j \\<and> l \\<ge> k \\<and> C \\<in> lnth Ns l\""], ["proof (prove)\nusing this:\n  {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l", "using Max_in[of ?S, OF _ nempty]"], ["proof (prove)\nusing this:\n  {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}\n  finite\n   {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<Longrightarrow>\n  Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n  \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l", "unfolding l_def"], ["proof (prove)\nusing this:\n  {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<noteq> {}\n  finite\n   {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<Longrightarrow>\n  Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n  \\<in> {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} < j \\<and>\n    k \\<le> Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} \\<and>\n    C \\<in> lnth Ns\n             (Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i})", "by auto"], ["proof (state)\nthis:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "then"], ["proof (chain)\npicking this:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l", "have \"C \\<in> lnth Ns l - lnth Ns (Suc l)\""], ["proof (prove)\nusing this:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns l - lnth Ns (Suc l)", "using j gt_Max_notin[OF _ nempty, of \"Suc l\"]"], ["proof (prove)\nusing this:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l\n  i \\<le> j \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\n  \\<lbrakk>finite {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i};\n   Max {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i} < Suc l\\<rbrakk>\n  \\<Longrightarrow> Suc l\n                    \\<notin> {i. i < j \\<and>\n                                 k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns l - lnth Ns (Suc l)", "unfolding l_def[symmetric]"], ["proof (prove)\nusing this:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l\n  i \\<le> j \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\n  \\<lbrakk>finite {i. i < j \\<and> k \\<le> i \\<and> C \\<in> lnth Ns i};\n   l < Suc l\\<rbrakk>\n  \\<Longrightarrow> Suc l\n                    \\<notin> {i. i < j \\<and>\n                                 k \\<le> i \\<and> C \\<in> lnth Ns i}\n\ngoal (1 subgoal):\n 1. C \\<in> lnth Ns l - lnth Ns (Suc l)", "by (auto intro: Suc_lessI)"], ["proof (state)\nthis:\n  C \\<in> lnth Ns l - lnth Ns (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "then"], ["proof (chain)\npicking this:\n  C \\<in> lnth Ns l - lnth Ns (Suc l)", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<in> lnth Ns l - lnth Ns (Suc l)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n       C \\<in> lnth Ns i - lnth Ns (Suc i)", "proof (rule bexI[of _ l])"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<in> {i. enat (Suc i) < llength Ns}", "show \"l \\<in> {i. enat (Suc i) < llength Ns}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> {i. enat (Suc i) < llength Ns}", "using l_prop j"], ["proof (prove)\nusing this:\n  l < j \\<and> k \\<le> l \\<and> C \\<in> lnth Ns l\n  i \\<le> j \\<and> enat j < llength Ns \\<and> C \\<notin> lnth Ns j\n\ngoal (1 subgoal):\n 1. l \\<in> {i. enat (Suc i) < llength Ns}", "by (clarify, metis Suc_leI dual_order.order_iff_strict enat_ord_simps(2) less_trans)"], ["proof (state)\nthis:\n  l \\<in> {i. enat (Suc i) < llength Ns}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n     C \\<in> lnth Ns i - lnth Ns (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:nonpersistent-is-redundant *)"], ["", "lemma Red_in_Sup:\n  assumes deriv: \"chain (\\<rhd>) Ns\"\n  shows \"Sup_llist Ns - Liminf_llist Ns \\<subseteq> Red_F (Sup_llist Ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist Ns - Liminf_llist Ns \\<subseteq> Red_F (Sup_llist Ns)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "assume C_in_subset: \"C \\<in> Sup_llist Ns - Liminf_llist Ns\""], ["proof (state)\nthis:\n  C \\<in> Sup_llist Ns - Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "{"], ["proof (state)\nthis:\n  C \\<in> Sup_llist Ns - Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "fix C i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "assume\n      in_ith_elem: \"C \\<in> lnth Ns i - lnth Ns (Suc i)\" and\n      i: \"enat (Suc i) < llength Ns\""], ["proof (state)\nthis:\n  C \\<in> lnth Ns i - lnth Ns (Suc i)\n  enat (Suc i) < llength Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "have \"lnth Ns i \\<rhd> lnth Ns (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<rhd> lnth Ns (Suc i)", "using i deriv in_ith_elem chain_lnth_rel"], ["proof (prove)\nusing this:\n  enat (Suc i) < llength Ns\n  chain (\\<rhd>) Ns\n  C \\<in> lnth Ns i - lnth Ns (Suc i)\n  \\<lbrakk>chain ?R ?xs; enat (Suc ?j) < llength ?xs\\<rbrakk>\n  \\<Longrightarrow> ?R (lnth ?xs ?j) (lnth ?xs (Suc ?j))\n\ngoal (1 subgoal):\n 1. lnth Ns i \\<rhd> lnth Ns (Suc i)", "by auto"], ["proof (state)\nthis:\n  lnth Ns i \\<rhd> lnth Ns (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  lnth Ns i \\<rhd> lnth Ns (Suc i)", "have \"C \\<in> Red_F (lnth Ns (Suc i))\""], ["proof (prove)\nusing this:\n  lnth Ns i \\<rhd> lnth Ns (Suc i)\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (lnth Ns (Suc i))", "using in_ith_elem derive.cases"], ["proof (prove)\nusing this:\n  lnth Ns i \\<rhd> lnth Ns (Suc i)\n  C \\<in> lnth Ns i - lnth Ns (Suc i)\n  \\<lbrakk>?a1.0 \\<rhd> ?a2.0;\n   \\<And>M N.\n      \\<lbrakk>?a1.0 = M; ?a2.0 = N; M - N \\<subseteq> Red_F N\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (lnth Ns (Suc i))", "by blast"], ["proof (state)\nthis:\n  C \\<in> Red_F (lnth Ns (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  C \\<in> Red_F (lnth Ns (Suc i))", "have \"C \\<in> Red_F (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  C \\<in> Red_F (lnth Ns (Suc i))\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Sup_llist Ns)", "using Red_F_of_subset"], ["proof (prove)\nusing this:\n  C \\<in> Red_F (lnth Ns (Suc i))\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Red_F ?N \\<subseteq> Red_F ?N'\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Sup_llist Ns)", "by (meson contra_subsetD i lnth_subset_Sup_llist)"], ["proof (state)\nthis:\n  C \\<in> Red_F (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?Ca2 \\<in> lnth Ns ?i2 - lnth Ns (Suc ?i2);\n   enat (Suc ?i2) < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?Ca2 \\<in> Red_F (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Sup_llist Ns - Liminf_llist Ns \\<Longrightarrow>\n       x \\<in> Red_F (Sup_llist Ns)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?Ca2 \\<in> lnth Ns ?i2 - lnth Ns (Suc ?i2);\n   enat (Suc ?i2) < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?Ca2 \\<in> Red_F (Sup_llist Ns)", "show \"C \\<in> Red_F (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?Ca2 \\<in> lnth Ns ?i2 - lnth Ns (Suc ?i2);\n   enat (Suc ?i2) < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?Ca2 \\<in> Red_F (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Sup_llist Ns)", "using equiv_Sup_Liminf[of C] C_in_subset"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Ca2 \\<in> lnth Ns ?i2 - lnth Ns (Suc ?i2);\n   enat (Suc ?i2) < llength Ns\\<rbrakk>\n  \\<Longrightarrow> ?Ca2 \\<in> Red_F (Sup_llist Ns)\n  \\<lbrakk>C \\<in> Sup_llist ?Ns; C \\<notin> Liminf_llist ?Ns\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i\\<in>{i. enat (Suc i) < llength ?Ns}.\n                       C \\<in> lnth ?Ns i - lnth ?Ns (Suc i)\n  C \\<in> Sup_llist Ns - Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Sup_llist Ns)", "by fast"], ["proof (state)\nthis:\n  C \\<in> Red_F (Sup_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:redundant-remains-redundant-during-run 1/2 *)"], ["", "lemma Red_I_subset_Liminf:\n  assumes deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "have Sup_in_diff: \\<open>Red_I (Sup_llist Ns) \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_I (Sup_llist Ns)\n    \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))", "using Red_I_of_Red_F_subset[OF Red_in_Sup] deriv"], ["proof (prove)\nusing this:\n  chain (\\<rhd>) ?Ns1 \\<Longrightarrow>\n  Red_I (Sup_llist ?Ns1)\n  \\<subseteq> Red_I (Sup_llist ?Ns1 - (Sup_llist ?Ns1 - Liminf_llist ?Ns1))\n  chain (\\<rhd>) Ns\n\ngoal (1 subgoal):\n 1. Red_I (Sup_llist Ns)\n    \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))", "by auto"], ["proof (state)\nthis:\n  Red_I (Sup_llist Ns)\n  \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "also"], ["proof (state)\nthis:\n  Red_I (Sup_llist Ns)\n  \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "have \\<open>Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns", "by (simp add: Liminf_llist_subset_Sup_llist double_diff)"], ["proof (state)\nthis:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns", "have Red_I_Sup_in_Liminf: \\<open>Red_I (Sup_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)\\<close>"], ["proof (prove)\nusing this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. Red_I (Sup_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)", "using Sup_in_diff"], ["proof (prove)\nusing this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n  Red_I (Sup_llist Ns)\n  \\<subseteq> Red_I (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_I (Sup_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  Red_I (Sup_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "have \\<open>lnth Ns i \\<subseteq> Sup_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> Sup_llist Ns", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "using i"], ["proof (prove)\nusing this:\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "by blast"], ["proof (state)\nthis:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  lnth Ns i \\<subseteq> Sup_llist Ns", "have \"Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)", "using Red_I_of_subset"], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Red_I ?N \\<subseteq> Red_I ?N'\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)", "unfolding Sup_llist_def"], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Red_I ?N \\<subseteq> Red_I ?N'\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i)\n    \\<subseteq> Red_I (\\<Union> (lnth Ns ` {i. enat i < llength Ns}))", "by auto"], ["proof (state)\nthis:\n  Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "using Red_I_Sup_in_Liminf"], ["proof (prove)\nusing this:\n  Red_I (lnth Ns i) \\<subseteq> Red_I (Sup_llist Ns)\n  Red_I (Sup_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  Red_I (lnth Ns i) \\<subseteq> Red_I (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:redundant-remains-redundant-during-run 2/2 *)"], ["", "lemma Red_F_subset_Liminf:\n  assumes deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "have Sup_in_diff: \\<open>Red_F (Sup_llist Ns) \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_F (Sup_llist Ns)\n    \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))", "using Red_F_of_Red_F_subset[OF Red_in_Sup] deriv"], ["proof (prove)\nusing this:\n  chain (\\<rhd>) ?Ns1 \\<Longrightarrow>\n  Red_F (Sup_llist ?Ns1)\n  \\<subseteq> Red_F (Sup_llist ?Ns1 - (Sup_llist ?Ns1 - Liminf_llist ?Ns1))\n  chain (\\<rhd>) Ns\n\ngoal (1 subgoal):\n 1. Red_F (Sup_llist Ns)\n    \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))", "by auto"], ["proof (state)\nthis:\n  Red_F (Sup_llist Ns)\n  \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "also"], ["proof (state)\nthis:\n  Red_F (Sup_llist Ns)\n  \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "have \\<open>Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns", "by (simp add: Liminf_llist_subset_Sup_llist double_diff)"], ["proof (state)\nthis:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns", "have Red_F_Sup_in_Liminf: \\<open>Red_F (Sup_llist Ns) \\<subseteq> Red_F (Liminf_llist Ns)\\<close>"], ["proof (prove)\nusing this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. Red_F (Sup_llist Ns) \\<subseteq> Red_F (Liminf_llist Ns)", "using Sup_in_diff"], ["proof (prove)\nusing this:\n  Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns) = Liminf_llist Ns\n  Red_F (Sup_llist Ns)\n  \\<subseteq> Red_F (Sup_llist Ns - (Sup_llist Ns - Liminf_llist Ns))\n\ngoal (1 subgoal):\n 1. Red_F (Sup_llist Ns) \\<subseteq> Red_F (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  Red_F (Sup_llist Ns) \\<subseteq> Red_F (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "have \\<open>lnth Ns i \\<subseteq> Sup_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> Sup_llist Ns", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "using i"], ["proof (prove)\nusing this:\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "by blast"], ["proof (state)\nthis:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  lnth Ns i \\<subseteq> Sup_llist Ns", "have \"Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)\""], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)", "using Red_F_of_subset"], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> Sup_llist Ns\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Red_F ?N \\<subseteq> Red_F ?N'\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)", "unfolding Sup_llist_def"], ["proof (prove)\nusing this:\n  lnth Ns i \\<subseteq> \\<Union> (lnth Ns ` {i. enat i < llength Ns})\n  ?N \\<subseteq> ?N' \\<Longrightarrow> Red_F ?N \\<subseteq> Red_F ?N'\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i)\n    \\<subseteq> Red_F (\\<Union> (lnth Ns ` {i. enat i < llength Ns}))", "by auto"], ["proof (state)\nthis:\n  Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "using Red_F_Sup_in_Liminf"], ["proof (prove)\nusing this:\n  Red_F (lnth Ns i) \\<subseteq> Red_F (Sup_llist Ns)\n  Red_F (Sup_llist Ns) \\<subseteq> Red_F (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  Red_F (lnth Ns i) \\<subseteq> Red_F (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:N-i-is-persistent-or-redundant *)"], ["", "lemma i_in_Liminf_or_Red_F:\n  assumes\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    i: \\<open>enat i < llength Ns\\<close>\n  shows \\<open>lnth Ns i \\<subseteq> Red_F (Liminf_llist Ns) \\<union> Liminf_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth Ns i \\<subseteq> Red_F (Liminf_llist Ns) \\<union> Liminf_llist Ns", "proof (rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "assume C: \\<open>C \\<in> lnth Ns i\\<close>\n  and C_not_Liminf: \\<open>C \\<notin> Liminf_llist Ns\\<close>"], ["proof (state)\nthis:\n  C \\<in> lnth Ns i\n  C \\<notin> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "have \\<open>C \\<in> Sup_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> Sup_llist Ns", "unfolding Sup_llist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "using C i"], ["proof (prove)\nusing this:\n  C \\<in> lnth Ns i\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> \\<Union> (lnth Ns ` {i. enat i < llength Ns})", "by auto"], ["proof (state)\nthis:\n  C \\<in> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  C \\<in> Sup_llist Ns", "obtain j where j: \\<open>C \\<in> lnth Ns j - lnth Ns (Suc j)\\<close> \\<open>enat (Suc j) < llength Ns\\<close>"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>C \\<in> lnth Ns j - lnth Ns (Suc j);\n         enat (Suc j) < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using equiv_Sup_Liminf[of C Ns] C_not_Liminf"], ["proof (prove)\nusing this:\n  C \\<in> Sup_llist Ns\n  \\<lbrakk>C \\<in> Sup_llist Ns; C \\<notin> Liminf_llist Ns\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i\\<in>{i. enat (Suc i) < llength Ns}.\n                       C \\<in> lnth Ns i - lnth Ns (Suc i)\n  C \\<notin> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>C \\<in> lnth Ns j - lnth Ns (Suc j);\n         enat (Suc j) < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  C \\<in> lnth Ns j - lnth Ns (Suc j)\n  enat (Suc j) < llength Ns\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  C \\<in> lnth Ns j - lnth Ns (Suc j)\n  enat (Suc j) < llength Ns", "have \\<open>C \\<in> Red_F (lnth Ns (Suc j))\\<close>"], ["proof (prove)\nusing this:\n  C \\<in> lnth Ns j - lnth Ns (Suc j)\n  enat (Suc j) < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (lnth Ns (Suc j))", "using deriv"], ["proof (prove)\nusing this:\n  C \\<in> lnth Ns j - lnth Ns (Suc j)\n  enat (Suc j) < llength Ns\n  chain (\\<rhd>) Ns\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (lnth Ns (Suc j))", "by (meson chain_lnth_rel contra_subsetD derive.cases)"], ["proof (state)\nthis:\n  C \\<in> Red_F (lnth Ns (Suc j))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> lnth Ns i; x \\<notin> Liminf_llist Ns\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Red_F (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  C \\<in> Red_F (lnth Ns (Suc j))", "show \\<open>C \\<in> Red_F (Liminf_llist Ns)\\<close>"], ["proof (prove)\nusing this:\n  C \\<in> Red_F (lnth Ns (Suc j))\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Liminf_llist Ns)", "using Red_F_subset_Liminf[of Ns \"Suc j\"] deriv j(2)"], ["proof (prove)\nusing this:\n  C \\<in> Red_F (lnth Ns (Suc j))\n  \\<lbrakk>chain (\\<rhd>) Ns; enat (Suc j) < llength Ns\\<rbrakk>\n  \\<Longrightarrow> Red_F (lnth Ns (Suc j))\n                    \\<subseteq> Red_F (Liminf_llist Ns)\n  chain (\\<rhd>) Ns\n  enat (Suc j) < llength Ns\n\ngoal (1 subgoal):\n 1. C \\<in> Red_F (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  C \\<in> Red_F (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:fairness-implies-saturation *)"], ["", "lemma fair_implies_Liminf_saturated:\n  assumes\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    fair: \\<open>fair Ns\\<close>\n  shows \\<open>saturated (Liminf_llist Ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated (Liminf_llist Ns)", "unfolding saturated_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf_from (Liminf_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Inf_from (Liminf_llist Ns) \\<Longrightarrow>\n       x \\<in> Red_I (Liminf_llist Ns)", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Inf_from (Liminf_llist Ns) \\<Longrightarrow>\n       x \\<in> Red_I (Liminf_llist Ns)", "assume \\<iota>: \\<open>\\<iota> \\<in> Inf_from (Liminf_llist Ns)\\<close>"], ["proof (state)\nthis:\n  \\<iota> \\<in> Inf_from (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Inf_from (Liminf_llist Ns) \\<Longrightarrow>\n       x \\<in> Red_I (Liminf_llist Ns)", "have \\<open>\\<iota> \\<in> Sup_llist (lmap Red_I Ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Sup_llist (lmap Red_I Ns)", "using fair \\<iota>"], ["proof (prove)\nusing this:\n  fair Ns\n  \\<iota> \\<in> Inf_from (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Sup_llist (lmap Red_I Ns)", "unfolding fair_def"], ["proof (prove)\nusing this:\n  Inf_from (Liminf_llist Ns) \\<subseteq> Sup_llist (lmap Red_I Ns)\n  \\<iota> \\<in> Inf_from (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Sup_llist (lmap Red_I Ns)", "by auto"], ["proof (state)\nthis:\n  \\<iota> \\<in> Sup_llist (lmap Red_I Ns)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Inf_from (Liminf_llist Ns) \\<Longrightarrow>\n       x \\<in> Red_I (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> Sup_llist (lmap Red_I Ns)", "obtain i where i: \\<open>enat i < llength Ns\\<close> \\<open>\\<iota> \\<in> Red_I (lnth Ns i)\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Sup_llist (lmap Red_I Ns)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength Ns;\n         \\<iota> \\<in> Red_I (lnth Ns i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding Sup_llist_def"], ["proof (prove)\nusing this:\n  \\<iota>\n  \\<in> \\<Union>\n         (lnth (lmap Red_I Ns) ` {i. enat i < llength (lmap Red_I Ns)})\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>enat i < llength Ns;\n         \\<iota> \\<in> Red_I (lnth Ns i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  enat i < llength Ns\n  \\<iota> \\<in> Red_I (lnth Ns i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Inf_from (Liminf_llist Ns) \\<Longrightarrow>\n       x \\<in> Red_I (Liminf_llist Ns)", "then"], ["proof (chain)\npicking this:\n  enat i < llength Ns\n  \\<iota> \\<in> Red_I (lnth Ns i)", "show \\<open>\\<iota> \\<in> Red_I (Liminf_llist Ns)\\<close>"], ["proof (prove)\nusing this:\n  enat i < llength Ns\n  \\<iota> \\<in> Red_I (lnth Ns i)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (Liminf_llist Ns)", "using deriv i_in_Liminf_or_Red_F[of Ns i] Red_I_subset_Liminf"], ["proof (prove)\nusing this:\n  enat i < llength Ns\n  \\<iota> \\<in> Red_I (lnth Ns i)\n  chain (\\<rhd>) Ns\n  \\<lbrakk>chain (\\<rhd>) Ns; enat i < llength Ns\\<rbrakk>\n  \\<Longrightarrow> lnth Ns i\n                    \\<subseteq> Red_F (Liminf_llist Ns) \\<union>\n                                Liminf_llist Ns\n  \\<lbrakk>chain (\\<rhd>) ?Ns; enat ?i < llength ?Ns\\<rbrakk>\n  \\<Longrightarrow> Red_I (lnth ?Ns ?i) \\<subseteq> Red_I (Liminf_llist ?Ns)\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I (Liminf_llist Ns)", "by blast"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I (Liminf_llist Ns)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale statically_complete_calculus = calculus +\n  assumes statically_complete: \"B \\<in> Bot \\<Longrightarrow> saturated N \\<Longrightarrow> N \\<Turnstile> {B} \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N\"\nbegin"], ["", "lemma dynamically_complete_Liminf:\n  fixes B Ns\n  assumes\n    bot_elem: \\<open>B \\<in> Bot\\<close> and\n    deriv: \\<open>chain (\\<rhd>) Ns\\<close> and\n    fair: \\<open>fair Ns\\<close> and\n    unsat: \\<open>lhd Ns \\<Turnstile> {B}\\<close>\n  shows \\<open>\\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "note lhd_is = lhd_conv_lnth[OF chain_not_lnull[OF deriv]]"], ["proof (state)\nthis:\n  lhd Ns = lnth Ns 0\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have non_empty: \\<open>\\<not> lnull Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull Ns", "using chain_not_lnull[OF deriv]"], ["proof (prove)\nusing this:\n  \\<not> lnull Ns\n\ngoal (1 subgoal):\n 1. \\<not> lnull Ns", "."], ["proof (state)\nthis:\n  \\<not> lnull Ns\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have subs: \\<open>lhd Ns \\<subseteq> Sup_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. lhd Ns \\<subseteq> Sup_llist Ns", "using lhd_subset_Sup_llist[of Ns] non_empty"], ["proof (prove)\nusing this:\n  \\<not> lnull Ns \\<Longrightarrow> lhd Ns \\<subseteq> Sup_llist Ns\n  \\<not> lnull Ns\n\ngoal (1 subgoal):\n 1. lhd Ns \\<subseteq> Sup_llist Ns", "by (simp add: lhd_conv_lnth)"], ["proof (state)\nthis:\n  lhd Ns \\<subseteq> Sup_llist Ns\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have \\<open>Sup_llist Ns \\<Turnstile> {B}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist Ns \\<Turnstile> {B}", "using unsat subset_entailed[OF subs] entails_trans[of \"Sup_llist Ns\" \"lhd Ns\"]"], ["proof (prove)\nusing this:\n  lhd Ns \\<Turnstile> {B}\n  Sup_llist Ns \\<Turnstile> lhd Ns\n  \\<lbrakk>Sup_llist Ns \\<Turnstile> lhd Ns;\n   lhd Ns \\<Turnstile> ?N3.0\\<rbrakk>\n  \\<Longrightarrow> Sup_llist Ns \\<Turnstile> ?N3.0\n\ngoal (1 subgoal):\n 1. Sup_llist Ns \\<Turnstile> {B}", "by auto"], ["proof (state)\nthis:\n  Sup_llist Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "then"], ["proof (chain)\npicking this:\n  Sup_llist Ns \\<Turnstile> {B}", "have Sup_no_Red: \\<open>Sup_llist Ns - Red_F (Sup_llist Ns) \\<Turnstile> {B}\\<close>"], ["proof (prove)\nusing this:\n  Sup_llist Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. Sup_llist Ns - Red_F (Sup_llist Ns) \\<Turnstile> {B}", "using bot_elem Red_F_Bot"], ["proof (prove)\nusing this:\n  Sup_llist Ns \\<Turnstile> {B}\n  B \\<in> Bot\n  \\<lbrakk>?B \\<in> Bot; ?N \\<Turnstile> {?B}\\<rbrakk>\n  \\<Longrightarrow> ?N - Red_F ?N \\<Turnstile> {?B}\n\ngoal (1 subgoal):\n 1. Sup_llist Ns - Red_F (Sup_llist Ns) \\<Turnstile> {B}", "by auto"], ["proof (state)\nthis:\n  Sup_llist Ns - Red_F (Sup_llist Ns) \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have Sup_no_Red_in_Liminf: \\<open>Sup_llist Ns - Red_F (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist Ns - Red_F (Sup_llist Ns) \\<subseteq> Liminf_llist Ns", "using deriv Red_in_Sup"], ["proof (prove)\nusing this:\n  chain (\\<rhd>) Ns\n  chain (\\<rhd>) ?Ns \\<Longrightarrow>\n  Sup_llist ?Ns - Liminf_llist ?Ns \\<subseteq> Red_F (Sup_llist ?Ns)\n\ngoal (1 subgoal):\n 1. Sup_llist Ns - Red_F (Sup_llist Ns) \\<subseteq> Liminf_llist Ns", "by auto"], ["proof (state)\nthis:\n  Sup_llist Ns - Red_F (Sup_llist Ns) \\<subseteq> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have Liminf_entails_Bot: \\<open>Liminf_llist Ns \\<Turnstile> {B}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist Ns \\<Turnstile> {B}", "using Sup_no_Red subset_entailed[OF Sup_no_Red_in_Liminf] entails_trans"], ["proof (prove)\nusing this:\n  Sup_llist Ns - Red_F (Sup_llist Ns) \\<Turnstile> {B}\n  Liminf_llist Ns \\<Turnstile> Sup_llist Ns - Red_F (Sup_llist Ns)\n  \\<lbrakk>?N1.0 \\<Turnstile> ?N2.0; ?N2.0 \\<Turnstile> ?N3.0\\<rbrakk>\n  \\<Longrightarrow> ?N1.0 \\<Turnstile> ?N3.0\n\ngoal (1 subgoal):\n 1. Liminf_llist Ns \\<Turnstile> {B}", "by blast"], ["proof (state)\nthis:\n  Liminf_llist Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "have \\<open>saturated (Liminf_llist Ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated (Liminf_llist Ns)", "using deriv fair fair_implies_Liminf_saturated"], ["proof (prove)\nusing this:\n  chain (\\<rhd>) Ns\n  fair Ns\n  \\<lbrakk>chain (\\<rhd>) ?Ns; fair ?Ns\\<rbrakk>\n  \\<Longrightarrow> saturated (Liminf_llist ?Ns)\n\ngoal (1 subgoal):\n 1. saturated (Liminf_llist Ns)", "unfolding saturated_def"], ["proof (prove)\nusing this:\n  chain (\\<rhd>) Ns\n  fair Ns\n  \\<lbrakk>chain (\\<rhd>) ?Ns; fair ?Ns\\<rbrakk>\n  \\<Longrightarrow> Inf_from (Liminf_llist ?Ns)\n                    \\<subseteq> Red_I (Liminf_llist ?Ns)\n\ngoal (1 subgoal):\n 1. Inf_from (Liminf_llist Ns) \\<subseteq> Red_I (Liminf_llist Ns)", "by auto"], ["proof (state)\nthis:\n  saturated (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "then"], ["proof (chain)\npicking this:\n  saturated (Liminf_llist Ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  saturated (Liminf_llist Ns)\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "using bot_elem statically_complete Liminf_entails_Bot"], ["proof (prove)\nusing this:\n  saturated (Liminf_llist Ns)\n  B \\<in> Bot\n  \\<lbrakk>?B \\<in> Bot; saturated ?N; ?N \\<Turnstile> {?B}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> ?N\n  Liminf_llist Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "by auto"], ["proof (state)\nthis:\n  \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale dynamically_complete_calculus = calculus +\n  assumes\n    dynamically_complete: \"B \\<in> Bot \\<Longrightarrow> chain (\\<rhd>) Ns \\<Longrightarrow> fair Ns \\<Longrightarrow> lhd Ns \\<Turnstile> {B} \\<Longrightarrow>\n      \\<exists>i \\<in> {i. enat i < llength Ns}. \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i\"\nbegin"], ["", "(* lem:dynamic-ref-compl-implies-static *)"], ["", "sublocale statically_complete_calculus"], ["proof (prove)\ngoal (1 subgoal):\n 1. statically_complete_calculus Bot Inf (\\<Turnstile>) Red_I Red_F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "fix B N"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "assume\n    bot_elem: \\<open>B \\<in> Bot\\<close> and\n    saturated_N: \"saturated N\" and\n    refut_N: \"N \\<Turnstile> {B}\""], ["proof (state)\nthis:\n  B \\<in> Bot\n  saturated N\n  N \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "define Ns where \"Ns = LCons N LNil\""], ["proof (state)\nthis:\n  Ns = LCons N LNil\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "have[simp]: \\<open>\\<not> lnull Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull Ns", "by (auto simp: Ns_def)"], ["proof (state)\nthis:\n  \\<not> lnull Ns\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "have deriv_Ns: \\<open>chain (\\<rhd>) Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<rhd>) Ns", "by (simp add: chain.chain_singleton Ns_def)"], ["proof (state)\nthis:\n  chain (\\<rhd>) Ns\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "have liminf_is_N: \"Liminf_llist Ns = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Liminf_llist Ns = N", "by (simp add: Ns_def Liminf_llist_LCons)"], ["proof (state)\nthis:\n  Liminf_llist Ns = N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "have head_Ns: \"N = lhd Ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N = lhd Ns", "by (simp add: Ns_def)"], ["proof (state)\nthis:\n  N = lhd Ns\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "have \"Sup_llist (lmap Red_I Ns) = Red_I N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_llist (lmap Red_I Ns) = Red_I N", "by (simp add: Ns_def)"], ["proof (state)\nthis:\n  Sup_llist (lmap Red_I Ns) = Red_I N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  Sup_llist (lmap Red_I Ns) = Red_I N", "have fair_Ns: \"fair Ns\""], ["proof (prove)\nusing this:\n  Sup_llist (lmap Red_I Ns) = Red_I N\n\ngoal (1 subgoal):\n 1. fair Ns", "using saturated_N"], ["proof (prove)\nusing this:\n  Sup_llist (lmap Red_I Ns) = Red_I N\n  saturated N\n\ngoal (1 subgoal):\n 1. fair Ns", "by (simp add: fair_def saturated_def liminf_is_N)"], ["proof (state)\nthis:\n  fair Ns\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "obtain i B' where B'_is_bot: \\<open>B' \\<in> Bot\\<close> and B'_in: \"B' \\<in> lnth Ns i\" and \\<open>i < llength Ns\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B' i.\n        \\<lbrakk>B' \\<in> Bot; B' \\<in> lnth Ns i;\n         enat i < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using dynamically_complete[of B Ns] bot_elem fair_Ns head_Ns saturated_N deriv_Ns refut_N"], ["proof (prove)\nusing this:\n  \\<lbrakk>B \\<in> Bot; chain (\\<rhd>) Ns; fair Ns;\n   lhd Ns \\<Turnstile> {B}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i\\<in>{i. enat i < llength Ns}.\n                       \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i\n  B \\<in> Bot\n  fair Ns\n  N = lhd Ns\n  saturated N\n  chain (\\<rhd>) Ns\n  N \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. (\\<And>B' i.\n        \\<lbrakk>B' \\<in> Bot; B' \\<in> lnth Ns i;\n         enat i < llength Ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B' \\<in> Bot\n  B' \\<in> lnth Ns i\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  B' \\<in> Bot\n  B' \\<in> lnth Ns i\n  enat i < llength Ns", "have \"i = 0\""], ["proof (prove)\nusing this:\n  B' \\<in> Bot\n  B' \\<in> lnth Ns i\n  enat i < llength Ns\n\ngoal (1 subgoal):\n 1. i = 0", "by (auto simp: Ns_def enat_0_iff)"], ["proof (state)\nthis:\n  i = 0\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot; saturated N; N \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot. B' \\<in> N", "show \\<open>\\<exists>B'\\<in>Bot. B' \\<in> N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> N", "using B'_is_bot B'_in"], ["proof (prove)\nusing this:\n  B' \\<in> Bot\n  B' \\<in> lnth Ns i\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> N", "unfolding \\<open>i = 0\\<close> head_Ns[symmetric] Ns_def"], ["proof (prove)\nusing this:\n  B' \\<in> Bot\n  B' \\<in> lnth (LCons N LNil) 0\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> N", "by auto"], ["proof (state)\nthis:\n  \\<exists>B'\\<in>Bot. B' \\<in> N\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* lem:static-ref-compl-implies-dynamic *)"], ["", "sublocale statically_complete_calculus \\<subseteq> dynamically_complete_calculus"], ["proof (prove)\ngoal (1 subgoal):\n 1. dynamically_complete_calculus Bot Inf (\\<Turnstile>) Red_I Red_F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B Ns.\n       \\<lbrakk>B \\<in> Bot; chain (\\<rhd>) Ns; fair Ns;\n        lhd Ns \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>{i. enat i < llength Ns}.\n                            \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "fix B Ns"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B Ns.\n       \\<lbrakk>B \\<in> Bot; chain (\\<rhd>) Ns; fair Ns;\n        lhd Ns \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>{i. enat i < llength Ns}.\n                            \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "assume\n    \\<open>B \\<in> Bot\\<close> and\n    \\<open>chain (\\<rhd>) Ns\\<close> and\n    \\<open>fair Ns\\<close> and\n    \\<open>lhd Ns \\<Turnstile> {B}\\<close>"], ["proof (state)\nthis:\n  B \\<in> Bot\n  chain (\\<rhd>) Ns\n  fair Ns\n  lhd Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<And>B Ns.\n       \\<lbrakk>B \\<in> Bot; chain (\\<rhd>) Ns; fair Ns;\n        lhd Ns \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>{i. enat i < llength Ns}.\n                            \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "then"], ["proof (chain)\npicking this:\n  B \\<in> Bot\n  chain (\\<rhd>) Ns\n  fair Ns\n  lhd Ns \\<Turnstile> {B}", "have \\<open>\\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\\<close>"], ["proof (prove)\nusing this:\n  B \\<in> Bot\n  chain (\\<rhd>) Ns\n  fair Ns\n  lhd Ns \\<Turnstile> {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "by (rule dynamically_complete_Liminf)"], ["proof (state)\nthis:\n  \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<And>B Ns.\n       \\<lbrakk>B \\<in> Bot; chain (\\<rhd>) Ns; fair Ns;\n        lhd Ns \\<Turnstile> {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>{i. enat i < llength Ns}.\n                            \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "then"], ["proof (chain)\npicking this:\n  \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns", "show \\<open>\\<exists>i\\<in>{i. enat i < llength Ns}. \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>B'\\<in>Bot. B' \\<in> Liminf_llist Ns\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat i < llength Ns}.\n       \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "unfolding Liminf_llist_def"], ["proof (prove)\nusing this:\n  \\<exists>B'\\<in>Bot.\n     B' \\<in> (\\<Union>i\\<in>{i. enat i < llength Ns}.\n                  \\<Inter>\n                   (lnth Ns ` {j. i \\<le> j \\<and> enat j < llength Ns}))\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{i. enat i < llength Ns}.\n       \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<in>{i. enat i < llength Ns}.\n     \\<exists>B'\\<in>Bot. B' \\<in> lnth Ns i\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}