{"file_name": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework/Labeled_Lifting_to_Non_Ground_Calculi.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Saturation_Framework", "problem_names": ["lemma po_on_empty_rel[simp]: \"po_on (\\<lambda>_ _. False) UNIV\"", "lemma labeled_entailment_lifting: \"NL1 \\<Turnstile>\\<G>L NL2 \\<longleftrightarrow> fst ` NL1 \\<Turnstile>\\<G> fst ` NL2\"", "lemma red_inf_impl: \"\\<iota> \\<in> Red_I_\\<G> NL \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\"", "lemma labeled_saturation_lifting: \"saturated NL \\<Longrightarrow> no_labels.saturated (fst ` NL)\"", "lemma stat_ref_comp_to_labeled_sta_ref_comp:\n  assumes static:\n    \"statically_complete_calculus Bot_F Inf_F (\\<Turnstile>\\<G>) no_labels.Red_I_\\<G> no_labels.Red_F_\\<G>\"\n  shows \"statically_complete_calculus Bot_FL Inf_FL (\\<Turnstile>\\<G>L) Red_I_\\<G> Red_F_\\<G>\"", "lemma lifting_q:\n  assumes \"q \\<in> Q\"\n  shows \"labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q) (Red_I_q q)\n    (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q) (\\<lambda>g Cl Cl'. False) Inf_FL\"", "lemma lifted_q:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q) (Red_F_q q)\n    Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)\"", "lemma ord_fam_lifted_q:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q) (Red_I_q q)\n    (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q) (\\<lambda>g Cl Cl'. False)\"", "lemma all_lifted_red_crit:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"calculus Bot_FL Inf_FL (entails_\\<G>_L_q q) (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)\"", "lemma all_lifted_cons_rel:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"consequence_relation Bot_FL (entails_\\<G>_L_q q)\"", "lemma in_Inf_FL_imp_to_F_in_Inf_F: \"\\<iota> \\<in> Inf_FL \\<Longrightarrow> to_F \\<iota> \\<in> Inf_F\"", "lemma in_Inf_from_imp_to_F_in_Inf_from: \"\\<iota> \\<in> Inf_from N \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Inf_from (fst ` N)\"", "lemmas entails_\\<G>_L_def = entails_def", "lemma labeled_entailment_lifting: \"NL1 \\<Turnstile>\\<inter>\\<G>L NL2 \\<longleftrightarrow> fst ` NL1 \\<Turnstile>\\<inter>\\<G> fst ` NL2\"", "lemma red_inf_impl: \"\\<iota> \\<in> Red_I NL \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\"", "lemma labeled_family_saturation_lifting: \"saturated NL \\<Longrightarrow> no_labels.saturated (fst ` NL)\"", "theorem labeled_static_ref:\n  assumes calc: \"statically_complete_calculus Bot_F Inf_F (\\<Turnstile>\\<inter>\\<G>) no_labels.Red_I_\\<G>\n    no_labels.Red_F_\\<G>_empty\"\n  shows \"statically_complete_calculus Bot_FL Inf_FL (\\<Turnstile>\\<inter>\\<G>L) Red_I Red_F\""], "translations": [["", "lemma po_on_empty_rel[simp]: \"po_on (\\<lambda>_ _. False) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. po_on (\\<lambda>_ _. False) UNIV", "unfolding po_on_def irreflp_on_def transp_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>UNIV. \\<not> False) \\<and>\n    (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV. False \\<and> False \\<longrightarrow> False)", "by auto"], ["", "subsection \\<open>Labeled Lifting with a Family of Tiebreaker Orderings\\<close>"], ["", "locale labeled_tiebreaker_lifting = no_labels: tiebreaker_lifting Bot_F Inf_F\n  Bot_G entails_G Inf_G Red_I_G Red_F_G \\<G>_F \\<G>_I Prec_F\n  for\n    Bot_F :: \"'f set\" and\n    Inf_F :: \"'f inference set\" and\n    Bot_G :: \"'g set\" and\n    entails_G :: \"'g set \\<Rightarrow> 'g set \\<Rightarrow> bool\"  (infix \"\\<Turnstile>G\" 50) and\n    Inf_G :: \"'g inference set\" and\n    Red_I_G :: \"'g set \\<Rightarrow> 'g inference set\" and\n    Red_F_G :: \"'g set \\<Rightarrow> 'g set\" and\n    \\<G>_F :: \"'f \\<Rightarrow> 'g set\" and\n    \\<G>_I :: \"'f inference \\<Rightarrow> 'g inference set option\" and\n    Prec_F :: \"'g \\<Rightarrow> 'f \\<Rightarrow> 'f \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)\n  + fixes\n    Inf_FL :: \\<open>('f \\<times> 'l) inference set\\<close>\n  assumes\n    Inf_F_to_Inf_FL: \\<open>\\<iota>\\<^sub>F \\<in> Inf_F \\<Longrightarrow> length (Ll :: 'l list) = length (prems_of \\<iota>\\<^sub>F) \\<Longrightarrow>\n      \\<exists>L0. Infer (zip (prems_of \\<iota>\\<^sub>F) Ll) (concl_of \\<iota>\\<^sub>F, L0) \\<in> Inf_FL\\<close> and\n    Inf_FL_to_Inf_F: \\<open>\\<iota>\\<^sub>F\\<^sub>L \\<in> Inf_FL \\<Longrightarrow> Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L)) (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L)) \\<in> Inf_F\\<close>\nbegin"], ["", "definition to_F :: \\<open>('f \\<times> 'l) inference \\<Rightarrow> 'f inference\\<close> where\n  \\<open>to_F \\<iota>\\<^sub>F\\<^sub>L = Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L)) (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\\<close>"], ["", "abbreviation Bot_FL :: \\<open>('f \\<times> 'l) set\\<close> where\n  \\<open>Bot_FL \\<equiv> Bot_F \\<times> UNIV\\<close>"], ["", "abbreviation \\<G>_F_L :: \\<open>('f \\<times> 'l) \\<Rightarrow> 'g set\\<close> where\n  \\<open>\\<G>_F_L CL \\<equiv> \\<G>_F (fst CL)\\<close>"], ["", "abbreviation \\<G>_I_L :: \\<open>('f \\<times> 'l) inference \\<Rightarrow> 'g inference set option\\<close> where\n  \\<open>\\<G>_I_L \\<iota>\\<^sub>F\\<^sub>L \\<equiv> \\<G>_I (to_F \\<iota>\\<^sub>F\\<^sub>L)\\<close>"], ["", "(* lem:labeled-grounding-function *)"], ["", "sublocale standard_lifting Inf_FL Bot_G Inf_G \"(\\<Turnstile>G)\" Red_I_G Red_F_G Bot_FL \\<G>_F_L \\<G>_I_L"], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G Inf_G (\\<Turnstile>G) Red_I_G Red_F_G\n     Bot_FL \\<G>_F_L \\<G>_I_L", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. Bot_FL \\<noteq> {}\n 2. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}\n 3. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\n 4. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 5. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "show \"Bot_FL \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bot_FL \\<noteq> {}", "using no_labels.Bot_F_not_empty"], ["proof (prove)\nusing this:\n  Bot_F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Bot_FL \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  Bot_FL \\<noteq> {}\n\ngoal (4 subgoals):\n 1. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}\n 2. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\n 3. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 4. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}\n 2. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\n 3. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 4. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "show \"B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}\" for B"], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}", "using no_labels.Bot_map_not_empty"], ["proof (prove)\nusing this:\n  ?B \\<in> Bot_F \\<Longrightarrow> \\<G>_F ?B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  ?B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L ?B \\<noteq> {}\n\ngoal (3 subgoals):\n 1. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\n 2. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 3. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>B. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\n 2. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 3. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "show \"B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G\" for B"], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G", "using no_labels.Bot_map"], ["proof (prove)\nusing this:\n  ?B \\<in> Bot_F \\<Longrightarrow> \\<G>_F ?B \\<subseteq> Bot_G\n\ngoal (1 subgoal):\n 1. B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L B \\<subseteq> Bot_G", "by force"], ["proof (state)\nthis:\n  ?B \\<in> Bot_FL \\<Longrightarrow> \\<G>_F_L ?B \\<subseteq> Bot_G\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 2. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 2. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "fix CL"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<G>_F_L C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow>\n       C \\<in> Bot_FL\n 2. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "show \"\\<G>_F_L CL \\<inter> Bot_G \\<noteq> {} \\<longrightarrow> CL \\<in> Bot_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>_F_L CL \\<inter> Bot_G \\<noteq> {} \\<longrightarrow> CL \\<in> Bot_FL", "using no_labels.Bot_cond"], ["proof (prove)\nusing this:\n  \\<G>_F ?C \\<inter> Bot_G \\<noteq> {} \\<longrightarrow> ?C \\<in> Bot_F\n\ngoal (1 subgoal):\n 1. \\<G>_F_L CL \\<inter> Bot_G \\<noteq> {} \\<longrightarrow> CL \\<in> Bot_FL", "by (metis SigmaE UNIV_I UNIV_Times_UNIV mem_Sigma_iff prod.sel(1))"], ["proof (state)\nthis:\n  \\<G>_F_L CL \\<inter> Bot_G \\<noteq> {} \\<longrightarrow> CL \\<in> Bot_FL\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "assume\n    i_in: \\<open>\\<iota> \\<in> Inf_FL\\<close> and\n    ground_not_none: \\<open>\\<G>_I_L \\<iota> \\<noteq> None\\<close>"], ["proof (state)\nthis:\n  \\<iota> \\<in> Inf_FL\n  \\<G>_I_L \\<iota> \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>\\<iota>.\n       \\<lbrakk>\\<iota> \\<in> Inf_FL;\n        \\<G>_I_L \\<iota> \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> the (\\<G>_I_L \\<iota>)\n                         \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> Inf_FL\n  \\<G>_I_L \\<iota> \\<noteq> None", "show \"the (\\<G>_I_L \\<iota>) \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Inf_FL\n  \\<G>_I_L \\<iota> \\<noteq> None\n\ngoal (1 subgoal):\n 1. the (\\<G>_I_L \\<iota>) \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "unfolding to_F_def"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Inf_FL\n  \\<G>_I\n   (Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>))) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. the (\\<G>_I\n          (Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>))))\n    \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "using no_labels.inf_map Inf_FL_to_Inf_F"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Inf_FL\n  \\<G>_I\n   (Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>))) \\<noteq>\n  None\n  \\<lbrakk>?\\<iota> \\<in> Inf_F; \\<G>_I ?\\<iota> \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> the (\\<G>_I ?\\<iota>)\n                    \\<subseteq> Red_I_G (\\<G>_F (concl_of ?\\<iota>))\n  ?\\<iota>\\<^sub>F\\<^sub>L \\<in> Inf_FL \\<Longrightarrow>\n  Infer (map fst (prems_of ?\\<iota>\\<^sub>F\\<^sub>L))\n   (fst (concl_of ?\\<iota>\\<^sub>F\\<^sub>L))\n  \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. the (\\<G>_I\n          (Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>))))\n    \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))", "by fastforce"], ["proof (state)\nthis:\n  the (\\<G>_I_L \\<iota>) \\<subseteq> Red_I_G (\\<G>_F_L (concl_of \\<iota>))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* sublocale tiebreaker_lifting Bot_FL Inf_FL Bot_G entails_G Inf_G Red_I_G Red_F_G \\<G>_F_L \\<G>_I_L\n *   \"\\<lambda>g Cl Cl'. False\"\n *   by unfold_locales simp+ *)"], ["", "notation entails_\\<G> (infix \"\\<Turnstile>\\<G>L\" 50)"], ["", "(* lem:labeled-consequence *)"], ["", "lemma labeled_entailment_lifting: \"NL1 \\<Turnstile>\\<G>L NL2 \\<longleftrightarrow> fst ` NL1 \\<Turnstile>\\<G> fst ` NL2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union> (\\<G>_F_L ` NL1) \\<Turnstile>G \\<Union> (\\<G>_F_L ` NL2)) =\n    (no_labels.\\<G>_Fset (fst ` NL1) \\<Turnstile>G\n     no_labels.\\<G>_Fset (fst ` NL2))", "by simp"], ["", "lemma red_inf_impl: \"\\<iota> \\<in> Red_I_\\<G> NL \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I_\\<G> NL \\<Longrightarrow>\n    to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "unfolding Red_I_\\<G>_def no_labels.Red_I_\\<G>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_FL.\n           \\<G>_I_L \\<iota> \\<noteq> None \\<and>\n           the (\\<G>_I_L \\<iota>)\n           \\<subseteq> Red_I_G (\\<Union> (\\<G>_F_L ` NL)) \\<or>\n           \\<G>_I_L \\<iota> = None \\<and>\n           \\<G>_F_L (concl_of \\<iota>)\n           \\<subseteq> \\<Union> (\\<G>_F_L ` NL) \\<union>\n                       Red_F_G (\\<Union> (\\<G>_F_L ` NL))} \\<Longrightarrow>\n    to_F \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_F.\n           \\<G>_I \\<iota> \\<noteq> None \\<and>\n           the (\\<G>_I \\<iota>)\n           \\<subseteq> Red_I_G (no_labels.\\<G>_Fset (fst ` NL)) \\<or>\n           \\<G>_I \\<iota> = None \\<and>\n           \\<G>_F (concl_of \\<iota>)\n           \\<subseteq> no_labels.\\<G>_Fset (fst ` NL) \\<union>\n                       Red_F_G (no_labels.\\<G>_Fset (fst ` NL))}", "using Inf_FL_to_Inf_F"], ["proof (prove)\nusing this:\n  ?\\<iota>\\<^sub>F\\<^sub>L \\<in> Inf_FL \\<Longrightarrow>\n  Infer (map fst (prems_of ?\\<iota>\\<^sub>F\\<^sub>L))\n   (fst (concl_of ?\\<iota>\\<^sub>F\\<^sub>L))\n  \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_FL.\n           \\<G>_I_L \\<iota> \\<noteq> None \\<and>\n           the (\\<G>_I_L \\<iota>)\n           \\<subseteq> Red_I_G (\\<Union> (\\<G>_F_L ` NL)) \\<or>\n           \\<G>_I_L \\<iota> = None \\<and>\n           \\<G>_F_L (concl_of \\<iota>)\n           \\<subseteq> \\<Union> (\\<G>_F_L ` NL) \\<union>\n                       Red_F_G (\\<Union> (\\<G>_F_L ` NL))} \\<Longrightarrow>\n    to_F \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_F.\n           \\<G>_I \\<iota> \\<noteq> None \\<and>\n           the (\\<G>_I \\<iota>)\n           \\<subseteq> Red_I_G (no_labels.\\<G>_Fset (fst ` NL)) \\<or>\n           \\<G>_I \\<iota> = None \\<and>\n           \\<G>_F (concl_of \\<iota>)\n           \\<subseteq> no_labels.\\<G>_Fset (fst ` NL) \\<union>\n                       Red_F_G (no_labels.\\<G>_Fset (fst ` NL))}", "by (auto simp: to_F_def)"], ["", "(* lem:labeled-saturation *)"], ["", "lemma labeled_saturation_lifting: \"saturated NL \\<Longrightarrow> no_labels.saturated (fst ` NL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated NL \\<Longrightarrow> local.no_labels.saturated (fst ` NL)", "unfolding saturated_def no_labels.saturated_def Inf_from_def no_labels.Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n    \\<subseteq> Red_I_\\<G> NL \\<Longrightarrow>\n    {\\<iota> \\<in> Inf_F. set (prems_of \\<iota>) \\<subseteq> fst ` NL}\n    \\<subseteq> no_labels.Red_I_\\<G> (fst ` NL)", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "fix \\<iota>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "assume\n    subs_Red_I: \"{\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL} \\<subseteq> Red_I_\\<G> NL\" and\n    i_in: \"\\<iota> \\<in> Inf_F\" and\n    i_prems: \"set (prems_of \\<iota>) \\<subseteq> fst ` NL\""], ["proof (state)\nthis:\n  {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  \\<subseteq> Red_I_\\<G> NL\n  \\<iota> \\<in> Inf_F\n  set (prems_of \\<iota>) \\<subseteq> fst ` NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define Lli where \"Lli i = (SOME x. ((prems_of \\<iota>)!i,x) \\<in> NL)\" for i"], ["proof (state)\nthis:\n  Lli ?i = (SOME x. (prems_of \\<iota> ! ?i, x) \\<in> NL)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have [simp]:\"((prems_of \\<iota>)!i,Lli i) \\<in> NL\" if \"i < length (prems_of \\<iota>)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (prems_of \\<iota> ! i, Lli i) \\<in> NL", "using that i_prems"], ["proof (prove)\nusing this:\n  i < length (prems_of \\<iota>)\n  set (prems_of \\<iota>) \\<subseteq> fst ` NL\n\ngoal (1 subgoal):\n 1. (prems_of \\<iota> ! i, Lli i) \\<in> NL", "unfolding Lli_def"], ["proof (prove)\nusing this:\n  i < length (prems_of \\<iota>)\n  set (prems_of \\<iota>) \\<subseteq> fst ` NL\n\ngoal (1 subgoal):\n 1. (prems_of \\<iota> ! i, SOME x. (prems_of \\<iota> ! i, x) \\<in> NL)\n    \\<in> NL", "by (metis nth_mem someI_ex DomainE Domain_fst subset_eq)"], ["proof (state)\nthis:\n  ?i < length (prems_of \\<iota>) \\<Longrightarrow>\n  (prems_of \\<iota> ! ?i, Lli ?i) \\<in> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define Ll where \"Ll = map Lli [0..<length (prems_of \\<iota>)]\""], ["proof (state)\nthis:\n  Ll = map Lli [0..<length (prems_of \\<iota>)]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have Ll_length: \"length Ll = length (prems_of \\<iota>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ll = length (prems_of \\<iota>)", "unfolding Ll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map Lli [0..<length (prems_of \\<iota>)]) =\n    length (prems_of \\<iota>)", "by auto"], ["proof (state)\nthis:\n  length Ll = length (prems_of \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have subs_NL: \"set (zip (prems_of \\<iota>) Ll) \\<subseteq> NL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (zip (prems_of \\<iota>) Ll) \\<subseteq> NL", "unfolding Ll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (zip (prems_of \\<iota>) (map Lli [0..<length (prems_of \\<iota>)]))\n    \\<subseteq> NL", "by (auto simp:in_set_zip)"], ["proof (state)\nthis:\n  set (zip (prems_of \\<iota>) Ll) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "obtain L0 where L0: \"Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0) \\<in> Inf_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>L0.\n        Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n        \\<in> Inf_FL \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Inf_F_to_Inf_FL[OF i_in Ll_length]"], ["proof (prove)\nusing this:\n  \\<exists>L0.\n     Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. (\\<And>L0.\n        Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n        \\<in> Inf_FL \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define \\<iota>_FL where \"\\<iota>_FL = Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\""], ["proof (state)\nthis:\n  \\<iota>_FL = Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<iota>_FL = Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)", "have \"set (prems_of \\<iota>_FL) \\<subseteq> NL\""], ["proof (prove)\nusing this:\n  \\<iota>_FL = Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>_FL) \\<subseteq> NL", "using subs_NL"], ["proof (prove)\nusing this:\n  \\<iota>_FL = Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n  set (zip (prems_of \\<iota>) Ll) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>_FL) \\<subseteq> NL", "by simp"], ["proof (state)\nthis:\n  set (prems_of \\<iota>_FL) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  set (prems_of \\<iota>_FL) \\<subseteq> NL", "have \"\\<iota>_FL \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\""], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>_FL) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<iota>_FL\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "unfolding \\<iota>_FL_def"], ["proof (prove)\nusing this:\n  set (prems_of (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)))\n  \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "using L0"], ["proof (prove)\nusing this:\n  set (prems_of (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)))\n  \\<subseteq> NL\n  Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0)\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "by blast"], ["proof (state)\nthis:\n  \\<iota>_FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<iota>_FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "have \"\\<iota>_FL \\<in> Red_I_\\<G> NL\""], ["proof (prove)\nusing this:\n  \\<iota>_FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n\ngoal (1 subgoal):\n 1. \\<iota>_FL \\<in> Red_I_\\<G> NL", "using subs_Red_I"], ["proof (prove)\nusing this:\n  \\<iota>_FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  \\<subseteq> Red_I_\\<G> NL\n\ngoal (1 subgoal):\n 1. \\<iota>_FL \\<in> Red_I_\\<G> NL", "by fast"], ["proof (state)\nthis:\n  \\<iota>_FL \\<in> Red_I_\\<G> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "moreover"], ["proof (state)\nthis:\n  \\<iota>_FL \\<in> Red_I_\\<G> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have \"\\<iota> = to_F \\<iota>_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> = to_F \\<iota>_FL", "unfolding to_F_def \\<iota>_FL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> =\n    Infer\n     (map fst\n       (prems_of\n         (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0))))\n     (fst (concl_of\n            (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0))))", "using Ll_length"], ["proof (prove)\nusing this:\n  length Ll = length (prems_of \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<iota> =\n    Infer\n     (map fst\n       (prems_of\n         (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0))))\n     (fst (concl_of\n            (Infer (zip (prems_of \\<iota>) Ll) (concl_of \\<iota>, L0))))", "by (cases \\<iota>) auto"], ["proof (state)\nthis:\n  \\<iota> = to_F \\<iota>_FL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I_\\<G> NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota>_FL \\<in> Red_I_\\<G> NL\n  \\<iota> = to_F \\<iota>_FL", "show \"\\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\""], ["proof (prove)\nusing this:\n  \\<iota>_FL \\<in> Red_I_\\<G> NL\n  \\<iota> = to_F \\<iota>_FL\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "by (auto intro: red_inf_impl)"], ["proof (state)\nthis:\n  \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:labeled-static-ref-compl *)"], ["", "lemma stat_ref_comp_to_labeled_sta_ref_comp:\n  assumes static:\n    \"statically_complete_calculus Bot_F Inf_F (\\<Turnstile>\\<G>) no_labels.Red_I_\\<G> no_labels.Red_F_\\<G>\"\n  shows \"statically_complete_calculus Bot_FL Inf_FL (\\<Turnstile>\\<G>L) Red_I_\\<G> Red_F_\\<G>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. statically_complete_calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         \\<Union> (\\<G>_F_L ` N1) \\<Turnstile>G \\<Union> (\\<G>_F_L ` N2))\n     Red_I_\\<G> Red_F_\\<G>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "fix Bl :: \\<open>'f \\<times> 'l\\<close> and Nl :: \\<open>('f \\<times> 'l) set\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "assume\n    Bl_in: \\<open>Bl \\<in> Bot_FL\\<close> and\n    Nl_sat: \\<open>saturated Nl\\<close> and\n    Nl_entails_Bl: \\<open>Nl \\<Turnstile>\\<G>L {Bl}\\<close>"], ["proof (state)\nthis:\n  Bl \\<in> Bot_FL\n  saturated Nl\n  \\<Union> (\\<G>_F_L ` Nl) \\<Turnstile>G \\<Union> (\\<G>_F_L ` {Bl})\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "define B where \"B = fst Bl\""], ["proof (state)\nthis:\n  B = fst Bl\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have B_in: \"B \\<in> Bot_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> Bot_F", "using Bl_in B_def SigmaE"], ["proof (prove)\nusing this:\n  Bl \\<in> Bot_FL\n  B = fst Bl\n  \\<lbrakk>?c \\<in> Sigma ?A ?B;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> ?A; y \\<in> ?B x; ?c = (x, y)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. B \\<in> Bot_F", "by force"], ["proof (state)\nthis:\n  B \\<in> Bot_F\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "define N where \"N = fst ` Nl\""], ["proof (state)\nthis:\n  N = fst ` Nl\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have N_sat: \"no_labels.saturated N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.no_labels.saturated N", "using N_def Nl_sat labeled_saturation_lifting"], ["proof (prove)\nusing this:\n  N = fst ` Nl\n  saturated Nl\n  saturated ?NL \\<Longrightarrow> local.no_labels.saturated (fst ` ?NL)\n\ngoal (1 subgoal):\n 1. local.no_labels.saturated N", "by blast"], ["proof (state)\nthis:\n  local.no_labels.saturated N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have N_entails_B: \"N \\<Turnstile>\\<G> {B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_labels.\\<G>_Fset N \\<Turnstile>G no_labels.\\<G>_Fset {B}", "using Nl_entails_Bl"], ["proof (prove)\nusing this:\n  \\<Union> (\\<G>_F_L ` Nl) \\<Turnstile>G \\<Union> (\\<G>_F_L ` {Bl})\n\ngoal (1 subgoal):\n 1. no_labels.\\<G>_Fset N \\<Turnstile>G no_labels.\\<G>_Fset {B}", "unfolding labeled_entailment_lifting N_def B_def"], ["proof (prove)\nusing this:\n  no_labels.\\<G>_Fset (fst ` Nl) \\<Turnstile>G\n  no_labels.\\<G>_Fset (fst ` {Bl})\n\ngoal (1 subgoal):\n 1. no_labels.\\<G>_Fset (fst ` Nl) \\<Turnstile>G\n    no_labels.\\<G>_Fset {fst Bl}", "by force"], ["proof (state)\nthis:\n  no_labels.\\<G>_Fset N \\<Turnstile>G no_labels.\\<G>_Fset {B}\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have \"\\<exists>B' \\<in> Bot_F. B' \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot_F. B' \\<in> N", "using B_in N_sat N_entails_B"], ["proof (prove)\nusing this:\n  B \\<in> Bot_F\n  local.no_labels.saturated N\n  no_labels.\\<G>_Fset N \\<Turnstile>G no_labels.\\<G>_Fset {B}\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot_F. B' \\<in> N", "using static[unfolded statically_complete_calculus_def\n        statically_complete_calculus_axioms_def]"], ["proof (prove)\nusing this:\n  B \\<in> Bot_F\n  local.no_labels.saturated N\n  no_labels.\\<G>_Fset N \\<Turnstile>G no_labels.\\<G>_Fset {B}\n  calculus Bot_F Inf_F\n   (\\<lambda>N1 N2.\n       no_labels.\\<G>_Fset N1 \\<Turnstile>G no_labels.\\<G>_Fset N2)\n   no_labels.Red_I_\\<G> local.no_labels.Red_F_\\<G> \\<and>\n  (\\<forall>B N.\n      B \\<in> Bot_F \\<longrightarrow>\n      local.no_labels.saturated N \\<longrightarrow>\n      no_labels.\\<G>_Fset N \\<Turnstile>G\n      no_labels.\\<G>_Fset {B} \\<longrightarrow>\n      (\\<exists>B'\\<in>Bot_F. B' \\<in> N))\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot_F. B' \\<in> N", "by blast"], ["proof (state)\nthis:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N", "obtain B' where in_Bot: \"B' \\<in> Bot_F\" and in_N: \"B' \\<in> N\""], ["proof (prove)\nusing this:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N\n\ngoal (1 subgoal):\n 1. (\\<And>B'.\n        \\<lbrakk>B' \\<in> Bot_F; B' \\<in> N\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  B' \\<in> Bot_F\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  B' \\<in> Bot_F\n  B' \\<in> N", "have \"B' \\<in> fst ` Bot_FL\""], ["proof (prove)\nusing this:\n  B' \\<in> Bot_F\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. B' \\<in> fst ` Bot_FL", "by fastforce"], ["proof (state)\nthis:\n  B' \\<in> fst ` Bot_FL\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "obtain Bl' where in_Nl: \"Bl' \\<in> Nl\" and fst_Bl': \"fst Bl' = B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_N"], ["proof (prove)\nusing this:\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding N_def"], ["proof (prove)\nusing this:\n  B' \\<in> fst ` Nl\n\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Bl' \\<in> Nl\n  fst Bl' = B'\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have \"Bl' \\<in> Bot_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bl' \\<in> Bot_FL", "using fst_Bl' in_Bot vimage_fst"], ["proof (prove)\nusing this:\n  fst Bl' = B'\n  B' \\<in> Bot_F\n  fst -` ?A = ?A \\<times> UNIV\n\ngoal (1 subgoal):\n 1. Bl' \\<in> Bot_FL", "by fastforce"], ["proof (state)\nthis:\n  Bl' \\<in> Bot_FL\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        \\<Union> (\\<G>_F_L ` N) \\<Turnstile>G\n        \\<Union> (\\<G>_F_L ` {B})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  Bl' \\<in> Bot_FL", "show \\<open>\\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl\\<close>"], ["proof (prove)\nusing this:\n  Bl' \\<in> Bot_FL\n\ngoal (1 subgoal):\n 1. \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl", "using in_Nl"], ["proof (prove)\nusing this:\n  Bl' \\<in> Bot_FL\n  Bl' \\<in> Nl\n\ngoal (1 subgoal):\n 1. \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl", "by blast"], ["proof (state)\nthis:\n  \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Labeled Lifting with a Family of Redundancy Criteria\\<close>"], ["", "locale labeled_lifting_intersection = no_labels: lifting_intersection Inf_F\n  Bot_G Q Inf_G_q entails_q Red_I_q Red_F_q Bot_F \\<G>_F_q \\<G>_I_q \"\\<lambda>g Cl Cl'. False\"\n  for\n    Bot_F :: \"'f set\" and\n    Inf_F :: \"'f inference set\" and\n    Bot_G :: \"'g set\" and\n    Q :: \"'q set\" and\n    entails_q :: \"'q \\<Rightarrow> 'g set \\<Rightarrow> 'g set \\<Rightarrow> bool\"  and\n    Inf_G_q :: \"'q \\<Rightarrow> 'g inference set\" and\n    Red_I_q :: \"'q \\<Rightarrow> 'g set \\<Rightarrow> 'g inference set\" and\n    Red_F_q :: \"'q \\<Rightarrow> 'g set \\<Rightarrow> 'g set\" and\n    \\<G>_F_q :: \"'q \\<Rightarrow> 'f \\<Rightarrow> 'g set\" and\n    \\<G>_I_q :: \"'q \\<Rightarrow> 'f inference \\<Rightarrow> 'g inference set option\"\n  + fixes\n    Inf_FL :: \\<open>('f \\<times> 'l) inference set\\<close>\n  assumes\n    Inf_F_to_Inf_FL:\n      \\<open>\\<iota>\\<^sub>F \\<in> Inf_F \\<Longrightarrow> length (Ll :: 'l list) = length (prems_of \\<iota>\\<^sub>F) \\<Longrightarrow>\n       \\<exists>L0. Infer (zip (prems_of \\<iota>\\<^sub>F) Ll) (concl_of \\<iota>\\<^sub>F, L0) \\<in> Inf_FL\\<close> and\n    Inf_FL_to_Inf_F: \\<open>\\<iota>\\<^sub>F\\<^sub>L \\<in> Inf_FL \\<Longrightarrow> Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L)) (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L)) \\<in> Inf_F\\<close>\nbegin"], ["", "definition to_F :: \\<open>('f \\<times> 'l) inference \\<Rightarrow> 'f inference\\<close> where\n  \\<open>to_F \\<iota>\\<^sub>F\\<^sub>L = Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L)) (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))\\<close>"], ["", "abbreviation Bot_FL :: \\<open>('f \\<times> 'l) set\\<close> where\n  \\<open>Bot_FL \\<equiv> Bot_F \\<times> UNIV\\<close>"], ["", "abbreviation \\<G>_F_L_q :: \\<open>'q \\<Rightarrow> ('f \\<times> 'l) \\<Rightarrow> 'g set\\<close> where\n  \\<open>\\<G>_F_L_q q CL \\<equiv> \\<G>_F_q q (fst CL)\\<close>"], ["", "abbreviation \\<G>_I_L_q :: \\<open>'q \\<Rightarrow> ('f \\<times> 'l) inference \\<Rightarrow> 'g inference set option\\<close> where\n  \\<open>\\<G>_I_L_q q \\<iota>\\<^sub>F\\<^sub>L \\<equiv> \\<G>_I_q q (to_F \\<iota>\\<^sub>F\\<^sub>L)\\<close>"], ["", "abbreviation \\<G>_Fset_L_q :: \"'q \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> 'g set\" where\n  \"\\<G>_Fset_L_q q N \\<equiv> \\<Union> (\\<G>_F_L_q q ` N)\""], ["", "definition Red_I_\\<G>_L_q :: \"'q \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) inference set\" where\n  \"Red_I_\\<G>_L_q q N =\n   {\\<iota> \\<in> Inf_FL. (\\<G>_I_L_q q \\<iota> \\<noteq> None \\<and> the (\\<G>_I_L_q q \\<iota>) \\<subseteq> Red_I_q q (\\<G>_Fset_L_q q N))\n    \\<or> (\\<G>_I_L_q q \\<iota> = None \\<and> \\<G>_F_L_q q (concl_of \\<iota>) \\<subseteq> \\<G>_Fset_L_q q N \\<union> Red_F_q q (\\<G>_Fset_L_q q N))}\""], ["", "abbreviation Red_I_\\<G>_L :: \"('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) inference set\" where\n  \"Red_I_\\<G>_L N \\<equiv> (\\<Inter>q \\<in> Q. Red_I_\\<G>_L_q q N)\""], ["", "abbreviation entails_\\<G>_L_q :: \"'q \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> bool\" where\n  \"entails_\\<G>_L_q q N1 N2 \\<equiv> entails_q q (\\<G>_Fset_L_q q N1) (\\<G>_Fset_L_q q N2)\""], ["", "lemma lifting_q:\n  assumes \"q \\<in> Q\"\n  shows \"labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q) (Red_I_q q)\n    (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q) (\\<lambda>g Cl Cl'. False) Inf_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n     (\\<lambda>g Cl Cl'. False) Inf_FL", "using assms no_labels.standard_lifting_family Inf_F_to_Inf_FL Inf_FL_to_Inf_F"], ["proof (prove)\nusing this:\n  q \\<in> Q\n  \\<forall>q\\<in>Q.\n     tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n      (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n      (\\<lambda>g Cl Cl'. False)\n  \\<lbrakk>?\\<iota>\\<^sub>F \\<in> Inf_F;\n   length ?Ll = length (prems_of ?\\<iota>\\<^sub>F)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L0.\n                       Infer (zip (prems_of ?\\<iota>\\<^sub>F) ?Ll)\n                        (concl_of ?\\<iota>\\<^sub>F, L0)\n                       \\<in> Inf_FL\n  ?\\<iota>\\<^sub>F\\<^sub>L \\<in> Inf_FL \\<Longrightarrow>\n  Infer (map fst (prems_of ?\\<iota>\\<^sub>F\\<^sub>L))\n   (fst (concl_of ?\\<iota>\\<^sub>F\\<^sub>L))\n  \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n     (\\<lambda>g Cl Cl'. False) Inf_FL", "by (simp add: labeled_tiebreaker_lifting_axioms_def labeled_tiebreaker_lifting_def)"], ["", "lemma lifted_q:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q) (Red_F_q q)\n    Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)", "interpret q_lifting: labeled_tiebreaker_lifting Bot_F Inf_F Bot_G \"entails_q q\" \"Inf_G_q q\"\n    \"Red_I_q q\" \"Red_F_q q\" \"\\<G>_F_q q\" \"\\<G>_I_q q\" \"\\<lambda>g Cl Cl'. False\" Inf_FL"], ["proof (prove)\ngoal (1 subgoal):\n 1. labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n     (\\<lambda>g Cl Cl'. False) Inf_FL", "using lifting_q[OF q_in]"], ["proof (prove)\nusing this:\n  labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n   (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n   (\\<lambda>g Cl Cl'. False) Inf_FL\n\ngoal (1 subgoal):\n 1. labeled_tiebreaker_lifting Bot_F Inf_F Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_q q) (\\<G>_I_q q)\n     (\\<lambda>g Cl Cl'. False) Inf_FL", "."], ["proof (state)\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L (\\<G>_I_L_q q)", "have \"\\<G>_I_L_q q = q_lifting.\\<G>_I_L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q = q_lifting.\\<G>_I_L", "unfolding to_F_def q_lifting.to_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<iota>\\<^sub>F\\<^sub>L.\n        \\<G>_I_q q\n         (Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n           (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L)))) =\n    (\\<lambda>\\<iota>\\<^sub>F\\<^sub>L.\n        \\<G>_I_q q\n         (Infer (map fst (prems_of \\<iota>\\<^sub>F\\<^sub>L))\n           (fst (concl_of \\<iota>\\<^sub>F\\<^sub>L))))", "by simp"], ["proof (state)\nthis:\n  \\<G>_I_L_q q = q_lifting.\\<G>_I_L\n\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L (\\<G>_I_L_q q)", "then"], ["proof (chain)\npicking this:\n  \\<G>_I_L_q q = q_lifting.\\<G>_I_L", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q = q_lifting.\\<G>_I_L\n\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L (\\<G>_I_L_q q)", "using q_lifting.standard_lifting_axioms"], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q = q_lifting.\\<G>_I_L\n  standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n   (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L q_lifting.\\<G>_I_L\n\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L (\\<G>_I_L_q q)", "by simp"], ["proof (state)\nthis:\n  standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n   (Red_F_q q) q_lifting.Bot_FL q_lifting.\\<G>_F_L (\\<G>_I_L_q q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_fam_lifted_q:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q) (Red_I_q q)\n    (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q) (\\<lambda>g Cl Cl'. False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "interpret standard_q_lifting: standard_lifting Inf_FL Bot_G \"Inf_G_q q\" \"entails_q q\"\n    \"Red_I_q q\" \"Red_F_q q\" Bot_FL \"\\<G>_F_L_q q\" \"\\<G>_I_L_q q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)", "using lifted_q[OF q_in]"], ["proof (prove)\nusing this:\n  standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n   (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n\ngoal (1 subgoal):\n 1. standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n     (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "have \"minimal_element (\\<lambda>Cl Cl'. False) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimal_element (\\<lambda>Cl Cl'. False) UNIV", "by (simp add: minimal_element.intro po_on_def transp_onI wfp_on_imp_irreflp_on)"], ["proof (state)\nthis:\n  minimal_element (\\<lambda>Cl Cl'. False) UNIV\n\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "then"], ["proof (chain)\npicking this:\n  minimal_element (\\<lambda>Cl Cl'. False) UNIV", "show ?thesis"], ["proof (prove)\nusing this:\n  minimal_element (\\<lambda>Cl Cl'. False) UNIV\n\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "using standard_q_lifting.standard_lifting_axioms"], ["proof (prove)\nusing this:\n  minimal_element (\\<lambda>Cl Cl'. False) UNIV\n  standard_lifting Inf_FL Bot_G (Inf_G_q q) (entails_q q) (Red_I_q q)\n   (Red_F_q q) Bot_FL (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "by (simp add: tiebreaker_lifting_axioms_def tiebreaker_lifting_def)"], ["proof (state)\nthis:\n  tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n   (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n   (\\<lambda>g Cl Cl'. False)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Red_F_\\<G>_empty_L_q :: \"'q \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) set\" where\n  \"Red_F_\\<G>_empty_L_q q N = {C. \\<forall>D \\<in> \\<G>_F_L_q q C. D \\<in> Red_F_q q (\\<G>_Fset_L_q q N) \\<or>\n    (\\<exists>E \\<in> N. False \\<and> D \\<in> \\<G>_F_L_q q E)}\""], ["", "abbreviation Red_F_\\<G>_empty_L :: \"('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) set\" where\n  \"Red_F_\\<G>_empty_L N \\<equiv> (\\<Inter>q \\<in> Q. Red_F_\\<G>_empty_L_q q N)\""], ["", "lemma all_lifted_red_crit:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"calculus Bot_FL Inf_FL (entails_\\<G>_L_q q) (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "interpret ord_q_lifting: tiebreaker_lifting Bot_FL Inf_FL Bot_G \"entails_q q\"\n    \"Inf_G_q q\" \"Red_I_q q\" \"Red_F_q q\" \"\\<G>_F_L_q q\" \"\\<G>_I_L_q q\" \"\\<lambda>g Cl Cl'. False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "using ord_fam_lifted_q[OF q_in]"], ["proof (prove)\nusing this:\n  tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n   (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n   (\\<lambda>g Cl Cl'. False)\n\ngoal (1 subgoal):\n 1. tiebreaker_lifting Bot_FL Inf_FL Bot_G (entails_q q) (Inf_G_q q)\n     (Red_I_q q) (Red_F_q q) (\\<G>_F_L_q q) (\\<G>_I_L_q q)\n     (\\<lambda>g Cl Cl'. False)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "have \"Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>", "unfolding Red_I_\\<G>_L_q_def ord_q_lifting.Red_I_\\<G>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>N.\n        {\\<iota> \\<in> Inf_FL.\n         \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n         the (\\<G>_I_L_q q \\<iota>)\n         \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` N)) \\<or>\n         \\<G>_I_L_q q \\<iota> = None \\<and>\n         \\<G>_F_L_q q (concl_of \\<iota>)\n         \\<subseteq> \\<Union> (\\<G>_F_L_q q ` N) \\<union>\n                     Red_F_q q (\\<Union> (\\<G>_F_L_q q ` N))}) =\n    (\\<lambda>N.\n        {\\<iota> \\<in> Inf_FL.\n         \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n         the (\\<G>_I_L_q q \\<iota>)\n         \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` N)) \\<or>\n         \\<G>_I_L_q q \\<iota> = None \\<and>\n         \\<G>_F_L_q q (concl_of \\<iota>)\n         \\<subseteq> \\<Union> (\\<G>_F_L_q q ` N) \\<union>\n                     Red_F_q q (\\<Union> (\\<G>_F_L_q q ` N))})", "by simp"], ["proof (state)\nthis:\n  Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\n\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "moreover"], ["proof (state)\nthis:\n  Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\n\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "have \"Red_F_\\<G>_empty_L_q q = ord_q_lifting.Red_F_\\<G>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Red_F_\\<G>_empty_L_q q = local.ord_q_lifting.Red_F_\\<G>", "unfolding Red_F_\\<G>_empty_L_q_def ord_q_lifting.Red_F_\\<G>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>N.\n        {C. \\<forall>D\\<in>\\<G>_F_L_q q C.\n               D \\<in> Red_F_q q (\\<Union> (\\<G>_F_L_q q ` N)) \\<or>\n               (\\<exists>E\\<in>N. False \\<and> D \\<in> \\<G>_F_L_q q E)}) =\n    (\\<lambda>N.\n        {C. \\<forall>D\\<in>\\<G>_F_L_q q C.\n               D \\<in> Red_F_q q (\\<Union> (\\<G>_F_L_q q ` N)) \\<or>\n               (\\<exists>E\\<in>N. False \\<and> D \\<in> \\<G>_F_L_q q E)})", "by simp"], ["proof (state)\nthis:\n  Red_F_\\<G>_empty_L_q q = local.ord_q_lifting.Red_F_\\<G>\n\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "ultimately"], ["proof (chain)\npicking this:\n  Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\n  Red_F_\\<G>_empty_L_q q = local.ord_q_lifting.Red_F_\\<G>", "show ?thesis"], ["proof (prove)\nusing this:\n  Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\n  Red_F_\\<G>_empty_L_q q = local.ord_q_lifting.Red_F_\\<G>\n\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "using ord_q_lifting.calculus_axioms"], ["proof (prove)\nusing this:\n  Red_I_\\<G>_L_q q = ord_q_lifting.Red_I_\\<G>\n  Red_F_\\<G>_empty_L_q q = local.ord_q_lifting.Red_F_\\<G>\n  calculus Bot_FL Inf_FL\n   (\\<lambda>N1 N2.\n       entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n        (\\<Union> (\\<G>_F_L_q q ` N2)))\n   ord_q_lifting.Red_I_\\<G> local.ord_q_lifting.Red_F_\\<G>\n\ngoal (1 subgoal):\n 1. calculus Bot_FL Inf_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)", "by argo"], ["proof (state)\nthis:\n  calculus Bot_FL Inf_FL\n   (\\<lambda>N1 N2.\n       entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n        (\\<Union> (\\<G>_F_L_q q ` N2)))\n   (Red_I_\\<G>_L_q q) (Red_F_\\<G>_empty_L_q q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma all_lifted_cons_rel:\n  assumes q_in: \"q \\<in> Q\"\n  shows \"consequence_relation Bot_FL (entails_\\<G>_L_q q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_relation Bot_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))", "using all_lifted_red_crit calculus_def q_in"], ["proof (prove)\nusing this:\n  ?q \\<in> Q \\<Longrightarrow>\n  calculus Bot_FL Inf_FL\n   (\\<lambda>N1 N2.\n       entails_q ?q (\\<Union> (\\<G>_F_L_q ?q ` N1))\n        (\\<Union> (\\<G>_F_L_q ?q ` N2)))\n   (Red_I_\\<G>_L_q ?q) (Red_F_\\<G>_empty_L_q ?q)\n  calculus ?Bot ?Inf ?entails ?Red_I ?Red_F \\<equiv>\n  consequence_relation ?Bot ?entails \\<and>\n  calculus_axioms ?Bot ?Inf ?entails ?Red_I ?Red_F\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. consequence_relation Bot_FL\n     (\\<lambda>N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))", "by blast"], ["", "sublocale consequence_relation_family Bot_FL Q entails_\\<G>_L_q"], ["proof (prove)\ngoal (1 subgoal):\n 1. consequence_relation_family Bot_FL Q\n     (\\<lambda>q N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))", "using all_lifted_cons_rel"], ["proof (prove)\nusing this:\n  ?q \\<in> Q \\<Longrightarrow>\n  consequence_relation Bot_FL\n   (\\<lambda>N1 N2.\n       entails_q ?q (\\<Union> (\\<G>_F_L_q ?q ` N1))\n        (\\<Union> (\\<G>_F_L_q ?q ` N2)))\n\ngoal (1 subgoal):\n 1. consequence_relation_family Bot_FL Q\n     (\\<lambda>q N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))", "by (simp add: consequence_relation_family.intro no_labels.Q_nonempty)"], ["", "sublocale intersection_calculus Bot_FL Inf_FL Q entails_\\<G>_L_q Red_I_\\<G>_L_q Red_F_\\<G>_empty_L_q"], ["proof (prove)\ngoal (1 subgoal):\n 1. intersection_calculus Bot_FL Inf_FL Q\n     (\\<lambda>q N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     Red_I_\\<G>_L_q Red_F_\\<G>_empty_L_q", "using intersection_calculus.intro[OF consequence_relation_family_axioms]"], ["proof (prove)\nusing this:\n  intersection_calculus_axioms Bot_FL ?Inf Q\n   (\\<lambda>q N1 N2.\n       entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n        (\\<Union> (\\<G>_F_L_q q ` N2)))\n   ?Red_I_q ?Red_F_q \\<Longrightarrow>\n  intersection_calculus Bot_FL ?Inf Q\n   (\\<lambda>q N1 N2.\n       entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n        (\\<Union> (\\<G>_F_L_q q ` N2)))\n   ?Red_I_q ?Red_F_q\n\ngoal (1 subgoal):\n 1. intersection_calculus Bot_FL Inf_FL Q\n     (\\<lambda>q N1 N2.\n         entails_q q (\\<Union> (\\<G>_F_L_q q ` N1))\n          (\\<Union> (\\<G>_F_L_q q ` N2)))\n     Red_I_\\<G>_L_q Red_F_\\<G>_empty_L_q", "by (simp add: all_lifted_red_crit intersection_calculus_axioms_def no_labels.Q_nonempty)"], ["", "lemma in_Inf_FL_imp_to_F_in_Inf_F: \"\\<iota> \\<in> Inf_FL \\<Longrightarrow> to_F \\<iota> \\<in> Inf_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_FL \\<Longrightarrow> to_F \\<iota> \\<in> Inf_F", "by (simp add: Inf_FL_to_Inf_F to_F_def)"], ["", "lemma in_Inf_from_imp_to_F_in_Inf_from: \"\\<iota> \\<in> Inf_from N \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Inf_from (fst ` N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_from N \\<Longrightarrow>\n    to_F \\<iota> \\<in> no_labels.Inf_from (fst ` N)", "unfolding Inf_from_def no_labels.Inf_from_def to_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_FL.\n           set (prems_of \\<iota>) \\<subseteq> N} \\<Longrightarrow>\n    Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>))\n    \\<in> {\\<iota> \\<in> Inf_F. set (prems_of \\<iota>) \\<subseteq> fst ` N}", "by (auto intro: Inf_FL_to_Inf_F)"], ["", "notation no_labels.entails_\\<G> (infix \"\\<Turnstile>\\<inter>\\<G>\" 50)"], ["", "abbreviation entails_\\<G>_L :: \"('f \\<times> 'l) set \\<Rightarrow> ('f \\<times> 'l) set \\<Rightarrow> bool\" (infix \"\\<Turnstile>\\<inter>\\<G>L\" 50) where\n  \"(\\<Turnstile>\\<inter>\\<G>L) \\<equiv> entails\""], ["", "lemmas entails_\\<G>_L_def = entails_def"], ["", "(* lem:labeled-consequence-intersection *)"], ["", "lemma labeled_entailment_lifting: \"NL1 \\<Turnstile>\\<inter>\\<G>L NL2 \\<longleftrightarrow> fst ` NL1 \\<Turnstile>\\<inter>\\<G> fst ` NL2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (NL1 \\<Turnstile>\\<inter>\\<G>L NL2) =\n    (fst ` NL1 \\<Turnstile>\\<inter>\\<G> fst ` NL2)", "unfolding no_labels.entails_\\<G>_def entails_\\<G>_L_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>q\\<in>Q.\n        entails_q q (\\<Union> (\\<G>_F_L_q q ` NL1))\n         (\\<Union> (\\<G>_F_L_q q ` NL2))) =\n    (\\<forall>q\\<in>Q.\n        entails_q q (no_labels.\\<G>_Fset_q q (fst ` NL1))\n         (no_labels.\\<G>_Fset_q q (fst ` NL2)))", "by force"], ["", "lemma red_inf_impl: \"\\<iota> \\<in> Red_I NL \\<Longrightarrow> to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I NL \\<Longrightarrow>\n    to_F \\<iota> \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "unfolding no_labels.Red_I_\\<G>_def Red_I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL) \\<Longrightarrow>\n    to_F \\<iota>\n    \\<in> (\\<Inter>q\\<in>Q. no_labels.Red_I_\\<G>_q q (fst ` NL))", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "fix X Xa q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "assume\n    q_in: \"q \\<in> Q\" and\n    i_in_inter: \"\\<iota> \\<in> (\\<Inter>q \\<in> Q. Red_I_\\<G>_L_q q NL)\""], ["proof (state)\nthis:\n  q \\<in> Q\n  \\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "have i_in_q: \"\\<iota> \\<in> Red_I_\\<G>_L_q q NL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I_\\<G>_L_q q NL", "using q_in i_in_inter image_eqI"], ["proof (prove)\nusing this:\n  q \\<in> Q\n  \\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL)\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Red_I_\\<G>_L_q q NL", "by blast"], ["proof (state)\nthis:\n  \\<iota> \\<in> Red_I_\\<G>_L_q q NL\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<iota> \\<in> Red_I_\\<G>_L_q q NL", "have i_in: \"\\<iota> \\<in> Inf_FL\""], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Red_I_\\<G>_L_q q NL\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_FL", "unfolding Red_I_\\<G>_L_q_def"], ["proof (prove)\nusing this:\n  \\<iota>\n  \\<in> {\\<iota> \\<in> Inf_FL.\n         \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n         the (\\<G>_I_L_q q \\<iota>)\n         \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n         \\<G>_I_L_q q \\<iota> = None \\<and>\n         \\<G>_F_L_q q (concl_of \\<iota>)\n         \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n                     Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))}\n\ngoal (1 subgoal):\n 1. \\<iota> \\<in> Inf_FL", "by blast"], ["proof (state)\nthis:\n  \\<iota> \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "have to_F_in: \"to_F \\<iota> \\<in> Inf_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_F \\<iota> \\<in> Inf_F", "unfolding to_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>)) \\<in> Inf_F", "using Inf_FL_to_Inf_F[OF i_in]"], ["proof (prove)\nusing this:\n  Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>)) \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. Infer (map fst (prems_of \\<iota>)) (fst (concl_of \\<iota>)) \\<in> Inf_F", "."], ["proof (state)\nthis:\n  to_F \\<iota> \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "have rephrase1: \"(\\<Union>CL\\<in>NL. \\<G>_F_q q (fst CL)) = (\\<Union> (\\<G>_F_q q ` fst ` NL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (\\<G>_F_L_q q ` NL) = no_labels.\\<G>_Fset_q q (fst ` NL)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (\\<G>_F_L_q q ` NL) = no_labels.\\<G>_Fset_q q (fst ` NL)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "have rephrase2: \"fst (concl_of \\<iota>) = concl_of (to_F \\<iota>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (concl_of \\<iota>) = concl_of (to_F \\<iota>)", "unfolding concl_of_def to_F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (case \\<iota> of Infer x1 x2 \\<Rightarrow> x2) =\n    (case Infer (map fst (prems_of \\<iota>))\n           (fst (case \\<iota> of Infer x1 x2 \\<Rightarrow> x2)) of\n     Infer x1 x2 \\<Rightarrow> x2)", "by simp"], ["proof (state)\nthis:\n  fst (concl_of \\<iota>) = concl_of (to_F \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "have subs_red: \"(\\<G>_I_L_q q \\<iota> \\<noteq> None \\<and> the (\\<G>_I_L_q q \\<iota>) \\<subseteq> Red_I_q q (\\<G>_Fset_L_q q NL))\n    \\<or> (\\<G>_I_L_q q \\<iota> = None \\<and> \\<G>_F_L_q q (concl_of \\<iota>) \\<subseteq> \\<G>_Fset_L_q q NL \\<union> Red_F_q q (\\<G>_Fset_L_q q NL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n    the (\\<G>_I_L_q q \\<iota>)\n    \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n    \\<G>_I_L_q q \\<iota> = None \\<and>\n    \\<G>_F_L_q q (concl_of \\<iota>)\n    \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n                Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))", "using i_in_q"], ["proof (prove)\nusing this:\n  \\<iota> \\<in> Red_I_\\<G>_L_q q NL\n\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n    the (\\<G>_I_L_q q \\<iota>)\n    \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n    \\<G>_I_L_q q \\<iota> = None \\<and>\n    \\<G>_F_L_q q (concl_of \\<iota>)\n    \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n                Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))", "unfolding Red_I_\\<G>_L_q_def"], ["proof (prove)\nusing this:\n  \\<iota>\n  \\<in> {\\<iota> \\<in> Inf_FL.\n         \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n         the (\\<G>_I_L_q q \\<iota>)\n         \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n         \\<G>_I_L_q q \\<iota> = None \\<and>\n         \\<G>_F_L_q q (concl_of \\<iota>)\n         \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n                     Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))}\n\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n    the (\\<G>_I_L_q q \\<iota>)\n    \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n    \\<G>_I_L_q q \\<iota> = None \\<and>\n    \\<G>_F_L_q q (concl_of \\<iota>)\n    \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n                Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))", "by blast"], ["proof (state)\nthis:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_L_q q (concl_of \\<iota>)\n  \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n              Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_L_q q (concl_of \\<iota>)\n  \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n              Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))", "have to_F_subs_red: \"(\\<G>_I_q q (to_F \\<iota>) \\<noteq> None \\<and>\n      the (\\<G>_I_q q (to_F \\<iota>)) \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)))\n    \\<or> (\\<G>_I_q q (to_F \\<iota>) = None \\<and>\n      \\<G>_F_q q (concl_of (to_F \\<iota>))\n      \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union> Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL)))\""], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_L_q q (concl_of \\<iota>)\n  \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n              Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))\n\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n    the (\\<G>_I_L_q q \\<iota>)\n    \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n    \\<G>_I_L_q q \\<iota> = None \\<and>\n    \\<G>_F_q q (concl_of (to_F \\<iota>))\n    \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n                Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))", "using rephrase1 rephrase2"], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (\\<Union> (\\<G>_F_L_q q ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_L_q q (concl_of \\<iota>)\n  \\<subseteq> \\<Union> (\\<G>_F_L_q q ` NL) \\<union>\n              Red_F_q q (\\<Union> (\\<G>_F_L_q q ` NL))\n  \\<Union> (\\<G>_F_L_q q ` NL) = no_labels.\\<G>_Fset_q q (fst ` NL)\n  fst (concl_of \\<iota>) = concl_of (to_F \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n    the (\\<G>_I_L_q q \\<iota>)\n    \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n    \\<G>_I_L_q q \\<iota> = None \\<and>\n    \\<G>_F_q q (concl_of (to_F \\<iota>))\n    \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n                Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))", "by metis"], ["proof (state)\nthis:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_q q (concl_of (to_F \\<iota>))\n  \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n              Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<iota> \\<in> (\\<Inter>q\\<in>Q. Red_I_\\<G>_L_q q NL);\n        q \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> to_F \\<iota>\n                         \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_q q (concl_of (to_F \\<iota>))\n  \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n              Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))", "show \"to_F \\<iota> \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)\""], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_q q (concl_of (to_F \\<iota>))\n  \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n              Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))\n\ngoal (1 subgoal):\n 1. to_F \\<iota> \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "using to_F_in"], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_q q (concl_of (to_F \\<iota>))\n  \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n              Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))\n  to_F \\<iota> \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. to_F \\<iota> \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)", "unfolding no_labels.Red_I_\\<G>_q_def"], ["proof (prove)\nusing this:\n  \\<G>_I_L_q q \\<iota> \\<noteq> None \\<and>\n  the (\\<G>_I_L_q q \\<iota>)\n  \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n  \\<G>_I_L_q q \\<iota> = None \\<and>\n  \\<G>_F_q q (concl_of (to_F \\<iota>))\n  \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n              Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))\n  to_F \\<iota> \\<in> Inf_F\n\ngoal (1 subgoal):\n 1. to_F \\<iota>\n    \\<in> {\\<iota> \\<in> Inf_F.\n           \\<G>_I_q q \\<iota> \\<noteq> None \\<and>\n           the (\\<G>_I_q q \\<iota>)\n           \\<subseteq> Red_I_q q (no_labels.\\<G>_Fset_q q (fst ` NL)) \\<or>\n           \\<G>_I_q q \\<iota> = None \\<and>\n           \\<G>_F_q q (concl_of \\<iota>)\n           \\<subseteq> no_labels.\\<G>_Fset_q q (fst ` NL) \\<union>\n                       Red_F_q q (no_labels.\\<G>_Fset_q q (fst ` NL))}", "by simp"], ["proof (state)\nthis:\n  to_F \\<iota> \\<in> no_labels.Red_I_\\<G>_q q (fst ` NL)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* lem:labeled-saturation-intersection *)"], ["", "lemma labeled_family_saturation_lifting: \"saturated NL \\<Longrightarrow> no_labels.saturated (fst ` NL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. saturated NL \\<Longrightarrow> no_labels.empty_ord.saturated (fst ` NL)", "unfolding saturated_def no_labels.saturated_def Inf_from_def no_labels.Inf_from_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n    \\<subseteq> Red_I NL \\<Longrightarrow>\n    {\\<iota> \\<in> Inf_F. set (prems_of \\<iota>) \\<subseteq> fst ` NL}\n    \\<subseteq> no_labels.Red_I_\\<G> (fst ` NL)", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "fix \\<iota>F"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "assume\n    labeled_sat: \"{\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL} \\<subseteq> Red_I NL\" and\n    iF_in: \"\\<iota>F \\<in> Inf_F\" and\n    iF_prems: \"set (prems_of \\<iota>F) \\<subseteq> fst ` NL\""], ["proof (state)\nthis:\n  {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  \\<subseteq> Red_I NL\n  \\<iota>F \\<in> Inf_F\n  set (prems_of \\<iota>F) \\<subseteq> fst ` NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define Lli where \"Lli i = (SOME x. ((prems_of \\<iota>F)!i,x) \\<in> NL)\" for i"], ["proof (state)\nthis:\n  Lli ?i = (SOME x. (prems_of \\<iota>F ! ?i, x) \\<in> NL)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have [simp]:\"((prems_of \\<iota>F)!i,Lli i) \\<in> NL\" if \"i < length (prems_of \\<iota>F)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (prems_of \\<iota>F ! i, Lli i) \\<in> NL", "using that iF_prems nth_mem someI_ex"], ["proof (prove)\nusing this:\n  i < length (prems_of \\<iota>F)\n  set (prems_of \\<iota>F) \\<subseteq> fst ` NL\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (SOME x. ?P x)\n\ngoal (1 subgoal):\n 1. (prems_of \\<iota>F ! i, Lli i) \\<in> NL", "unfolding Lli_def"], ["proof (prove)\nusing this:\n  i < length (prems_of \\<iota>F)\n  set (prems_of \\<iota>F) \\<subseteq> fst ` NL\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (SOME x. ?P x)\n\ngoal (1 subgoal):\n 1. (prems_of \\<iota>F ! i, SOME x. (prems_of \\<iota>F ! i, x) \\<in> NL)\n    \\<in> NL", "by (metis DomainE Domain_fst subset_eq)"], ["proof (state)\nthis:\n  ?i < length (prems_of \\<iota>F) \\<Longrightarrow>\n  (prems_of \\<iota>F ! ?i, Lli ?i) \\<in> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define Ll where \"Ll = map Lli [0..<length (prems_of \\<iota>F)]\""], ["proof (state)\nthis:\n  Ll = map Lli [0..<length (prems_of \\<iota>F)]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have Ll_length: \"length Ll = length (prems_of \\<iota>F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ll = length (prems_of \\<iota>F)", "unfolding Ll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map Lli [0..<length (prems_of \\<iota>F)]) =\n    length (prems_of \\<iota>F)", "by auto"], ["proof (state)\nthis:\n  length Ll = length (prems_of \\<iota>F)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have subs_NL: \"set (zip (prems_of \\<iota>F) Ll) \\<subseteq> NL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (zip (prems_of \\<iota>F) Ll) \\<subseteq> NL", "unfolding Ll_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (zip (prems_of \\<iota>F) (map Lli [0..<length (prems_of \\<iota>F)]))\n    \\<subseteq> NL", "by (auto simp:in_set_zip)"], ["proof (state)\nthis:\n  set (zip (prems_of \\<iota>F) Ll) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "obtain L0 where L0: \"Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0) \\<in> Inf_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>L0.\n        Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n        \\<in> Inf_FL \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Inf_F_to_Inf_FL[OF iF_in Ll_length]"], ["proof (prove)\nusing this:\n  \\<exists>L0.\n     Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. (\\<And>L0.\n        Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n        \\<in> Inf_FL \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "define \\<iota>FL where \"\\<iota>FL = Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\""], ["proof (state)\nthis:\n  \\<iota>FL = Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<iota>FL = Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)", "have \"set (prems_of \\<iota>FL) \\<subseteq> NL\""], ["proof (prove)\nusing this:\n  \\<iota>FL = Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>FL) \\<subseteq> NL", "using subs_NL"], ["proof (prove)\nusing this:\n  \\<iota>FL = Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n  set (zip (prems_of \\<iota>F) Ll) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. set (prems_of \\<iota>FL) \\<subseteq> NL", "by simp"], ["proof (state)\nthis:\n  set (prems_of \\<iota>FL) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  set (prems_of \\<iota>FL) \\<subseteq> NL", "have \"\\<iota>FL \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\""], ["proof (prove)\nusing this:\n  set (prems_of \\<iota>FL) \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. \\<iota>FL\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "unfolding \\<iota>FL_def"], ["proof (prove)\nusing this:\n  set (prems_of\n        (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)))\n  \\<subseteq> NL\n\ngoal (1 subgoal):\n 1. Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "using L0"], ["proof (prove)\nusing this:\n  set (prems_of\n        (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)))\n  \\<subseteq> NL\n  Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0) \\<in> Inf_FL\n\ngoal (1 subgoal):\n 1. Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0)\n    \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "by blast"], ["proof (state)\nthis:\n  \\<iota>FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "then"], ["proof (chain)\npicking this:\n  \\<iota>FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}", "have \"\\<iota>FL \\<in> Red_I NL\""], ["proof (prove)\nusing this:\n  \\<iota>FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n\ngoal (1 subgoal):\n 1. \\<iota>FL \\<in> Red_I NL", "using labeled_sat"], ["proof (prove)\nusing this:\n  \\<iota>FL\n  \\<in> {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  {\\<iota> \\<in> Inf_FL. set (prems_of \\<iota>) \\<subseteq> NL}\n  \\<subseteq> Red_I NL\n\ngoal (1 subgoal):\n 1. \\<iota>FL \\<in> Red_I NL", "by fast"], ["proof (state)\nthis:\n  \\<iota>FL \\<in> Red_I NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "moreover"], ["proof (state)\nthis:\n  \\<iota>FL \\<in> Red_I NL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "have \"\\<iota>F = to_F \\<iota>FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>F = to_F \\<iota>FL", "unfolding to_F_def \\<iota>FL_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>F =\n    Infer\n     (map fst\n       (prems_of\n         (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0))))\n     (fst (concl_of\n            (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0))))", "using Ll_length"], ["proof (prove)\nusing this:\n  length Ll = length (prems_of \\<iota>F)\n\ngoal (1 subgoal):\n 1. \\<iota>F =\n    Infer\n     (map fst\n       (prems_of\n         (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0))))\n     (fst (concl_of\n            (Infer (zip (prems_of \\<iota>F) Ll) (concl_of \\<iota>F, L0))))", "by (cases \\<iota>F) auto"], ["proof (state)\nthis:\n  \\<iota>F = to_F \\<iota>FL\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{\\<iota> \\<in> Inf_FL.\n                 set (prems_of \\<iota>) \\<subseteq> NL}\n                \\<subseteq> Red_I NL;\n        x \\<in> Inf_F; set (prems_of x) \\<subseteq> fst ` NL\\<rbrakk>\n       \\<Longrightarrow> x \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "ultimately"], ["proof (chain)\npicking this:\n  \\<iota>FL \\<in> Red_I NL\n  \\<iota>F = to_F \\<iota>FL", "show \"\\<iota>F \\<in> no_labels.Red_I_\\<G> (fst ` NL)\""], ["proof (prove)\nusing this:\n  \\<iota>FL \\<in> Red_I NL\n  \\<iota>F = to_F \\<iota>FL\n\ngoal (1 subgoal):\n 1. \\<iota>F \\<in> no_labels.Red_I_\\<G> (fst ` NL)", "by (auto intro: red_inf_impl)"], ["proof (state)\nthis:\n  \\<iota>F \\<in> no_labels.Red_I_\\<G> (fst ` NL)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* thm:labeled-static-ref-compl-intersection *)"], ["", "theorem labeled_static_ref:\n  assumes calc: \"statically_complete_calculus Bot_F Inf_F (\\<Turnstile>\\<inter>\\<G>) no_labels.Red_I_\\<G>\n    no_labels.Red_F_\\<G>_empty\"\n  shows \"statically_complete_calculus Bot_FL Inf_FL (\\<Turnstile>\\<inter>\\<G>L) Red_I Red_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. statically_complete_calculus Bot_FL Inf_FL (\\<Turnstile>\\<inter>\\<G>L)\n     Red_I Red_F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "fix Bl :: \\<open>'f \\<times> 'l\\<close> and Nl :: \\<open>('f \\<times> 'l) set\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "assume\n    Bl_in: \\<open>Bl \\<in> Bot_FL\\<close> and\n    Nl_sat: \\<open>saturated Nl\\<close> and\n    Nl_entails_Bl: \\<open>Nl \\<Turnstile>\\<inter>\\<G>L {Bl}\\<close>"], ["proof (state)\nthis:\n  Bl \\<in> Bot_FL\n  saturated Nl\n  Nl \\<Turnstile>\\<inter>\\<G>L {Bl}\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "define B where \"B = fst Bl\""], ["proof (state)\nthis:\n  B = fst Bl\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have B_in: \"B \\<in> Bot_F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> Bot_F", "using Bl_in B_def SigmaE"], ["proof (prove)\nusing this:\n  Bl \\<in> Bot_FL\n  B = fst Bl\n  \\<lbrakk>?c \\<in> Sigma ?A ?B;\n   \\<And>x y.\n      \\<lbrakk>x \\<in> ?A; y \\<in> ?B x; ?c = (x, y)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. B \\<in> Bot_F", "by force"], ["proof (state)\nthis:\n  B \\<in> Bot_F\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "define N where \"N = fst ` Nl\""], ["proof (state)\nthis:\n  N = fst ` Nl\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have N_sat: \"no_labels.saturated N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_labels.empty_ord.saturated N", "using N_def Nl_sat labeled_family_saturation_lifting"], ["proof (prove)\nusing this:\n  N = fst ` Nl\n  saturated Nl\n  saturated ?NL \\<Longrightarrow> no_labels.empty_ord.saturated (fst ` ?NL)\n\ngoal (1 subgoal):\n 1. no_labels.empty_ord.saturated N", "by blast"], ["proof (state)\nthis:\n  no_labels.empty_ord.saturated N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have N_entails_B: \"N \\<Turnstile>\\<inter>\\<G> {B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<Turnstile>\\<inter>\\<G> {B}", "using Nl_entails_Bl"], ["proof (prove)\nusing this:\n  Nl \\<Turnstile>\\<inter>\\<G>L {Bl}\n\ngoal (1 subgoal):\n 1. N \\<Turnstile>\\<inter>\\<G> {B}", "unfolding labeled_entailment_lifting N_def B_def"], ["proof (prove)\nusing this:\n  fst ` Nl \\<Turnstile>\\<inter>\\<G> fst ` {Bl}\n\ngoal (1 subgoal):\n 1. fst ` Nl \\<Turnstile>\\<inter>\\<G> {fst Bl}", "by force"], ["proof (state)\nthis:\n  N \\<Turnstile>\\<inter>\\<G> {B}\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have \"\\<exists>B' \\<in> Bot_F. B' \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot_F. B' \\<in> N", "using B_in N_sat N_entails_B\n      calc[unfolded statically_complete_calculus_def\n        statically_complete_calculus_axioms_def]"], ["proof (prove)\nusing this:\n  B \\<in> Bot_F\n  no_labels.empty_ord.saturated N\n  N \\<Turnstile>\\<inter>\\<G> {B}\n  calculus Bot_F Inf_F (\\<Turnstile>\\<inter>\\<G>) no_labels.Red_I_\\<G>\n   no_labels.Red_F_\\<G>_empty \\<and>\n  (\\<forall>B N.\n      B \\<in> Bot_F \\<longrightarrow>\n      no_labels.empty_ord.saturated N \\<longrightarrow>\n      N \\<Turnstile>\\<inter>\\<G> {B} \\<longrightarrow>\n      (\\<exists>B'\\<in>Bot_F. B' \\<in> N))\n\ngoal (1 subgoal):\n 1. \\<exists>B'\\<in>Bot_F. B' \\<in> N", "by blast"], ["proof (state)\nthis:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N", "obtain B' where in_Bot: \"B' \\<in> Bot_F\" and in_N: \"B' \\<in> N\""], ["proof (prove)\nusing this:\n  \\<exists>B'\\<in>Bot_F. B' \\<in> N\n\ngoal (1 subgoal):\n 1. (\\<And>B'.\n        \\<lbrakk>B' \\<in> Bot_F; B' \\<in> N\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  B' \\<in> Bot_F\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  B' \\<in> Bot_F\n  B' \\<in> N", "have \"B' \\<in> fst ` Bot_FL\""], ["proof (prove)\nusing this:\n  B' \\<in> Bot_F\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. B' \\<in> fst ` Bot_FL", "by fastforce"], ["proof (state)\nthis:\n  B' \\<in> fst ` Bot_FL\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "obtain Bl' where in_Nl: \"Bl' \\<in> Nl\" and fst_Bl': \"fst Bl' = B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_N"], ["proof (prove)\nusing this:\n  B' \\<in> N\n\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding N_def"], ["proof (prove)\nusing this:\n  B' \\<in> fst ` Nl\n\ngoal (1 subgoal):\n 1. (\\<And>Bl'.\n        \\<lbrakk>Bl' \\<in> Nl; fst Bl' = B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Bl' \\<in> Nl\n  fst Bl' = B'\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "have \"Bl' \\<in> Bot_FL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bl' \\<in> Bot_FL", "using fst_Bl' in_Bot vimage_fst"], ["proof (prove)\nusing this:\n  fst Bl' = B'\n  B' \\<in> Bot_F\n  fst -` ?A = ?A \\<times> UNIV\n\ngoal (1 subgoal):\n 1. Bl' \\<in> Bot_FL", "by fastforce"], ["proof (state)\nthis:\n  Bl' \\<in> Bot_FL\n\ngoal (1 subgoal):\n 1. \\<And>B N.\n       \\<lbrakk>B \\<in> Bot_FL; saturated N;\n        N \\<Turnstile>\\<inter>\\<G>L {B}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>B'\\<in>Bot_FL. B' \\<in> N", "then"], ["proof (chain)\npicking this:\n  Bl' \\<in> Bot_FL", "show \\<open>\\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl\\<close>"], ["proof (prove)\nusing this:\n  Bl' \\<in> Bot_FL\n\ngoal (1 subgoal):\n 1. \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl", "using in_Nl"], ["proof (prove)\nusing this:\n  Bl' \\<in> Bot_FL\n  Bl' \\<in> Nl\n\ngoal (1 subgoal):\n 1. \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl", "by blast"], ["proof (state)\nthis:\n  \\<exists>Bl'\\<in>Bot_FL. Bl' \\<in> Nl\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}