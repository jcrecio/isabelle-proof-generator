{"file_name": "/home/qj213/afp-2021-10-22/thys/Constructive_Cryptography_CM/Fold_Spmf.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Constructive_Cryptography_CM", "problem_names": ["lemma foldl_spmf_return_pmf_None [simp]:\n  \"foldl_spmf f (return_pmf None) xs = return_pmf None\"", "lemma foldl_spmf_bind_spmf: \"foldl_spmf f (bind_spmf p g) xs = bind_spmf p (\\<lambda>a. foldl_spmf f (g a) xs)\"", "lemma bind_foldl_spmf_return:\n  \"bind_spmf p (\\<lambda>x. foldl_spmf f (return_spmf x) xs) = foldl_spmf f p xs\"", "lemma foldl_spmf_map [simp]: \"foldl_spmf f p (map g xs) = foldl_spmf (map_fun id (map_fun g id) f) p xs\"", "lemma foldl_spmf_identity [simp]: \"foldl_spmf (\\<lambda>s x. return_spmf s) p xs = p\"", "lemma foldl_spmf_conv_foldl:\n  \"foldl_spmf (\\<lambda>s x. return_spmf (f s x)) p xs = map_spmf (\\<lambda>s. foldl f s xs) p\"", "lemma foldl_spmf_Cons':\n  \"foldl_spmf f (return_spmf a) (x # xs) = bind_spmf (f a x) (\\<lambda>a'. foldl_spmf f (return_spmf a') xs)\"", "lemma foldl_spmf_append: \"foldl_spmf f p (xs @ ys) = foldl_spmf f (foldl_spmf f p xs) ys\"", "lemma \n  foldl_spmf_helper:\n  assumes \"\\<And>x. h (f x) = x\"\n  assumes \"\\<And>x. f (h x) = x\"\n  shows \"foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc es = \n    map_spmf h (foldl_spmf g (map_spmf f acc) es)\"", "lemma \n  foldl_spmf_helper2:\n  assumes \"\\<And>x y. p (f x y) = x\"\n  assumes \"\\<And>x y. q (f x y) = y\"\n  assumes \"\\<And>x. f (p x) (q x) = x\"\n  shows \"foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc es = \n    bind_spmf acc (\\<lambda>acc'. map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))\"", "lemma foldl_pair_constl: \"foldl (\\<lambda>s e. map_prod (\\<lambda>_. c) (\\<lambda>r. f r e) s) (c, sr) l = \n    Pair c (foldl (\\<lambda>s e. f s e) sr l)\"", "lemma foldl_spmf_pair_left:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e)) (return_spmf (l, r)) es = \n    map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (return_spmf l) es)\"", "lemma foldl_spmf_pair_left2:\n  \"foldl_spmf (\\<lambda>(l, _) e. map_spmf (\\<lambda>l'. (l', c')) (f l e)) (return_spmf (l, c)) es = \n    map_spmf (\\<lambda>l'. (l', if es = [] then c else c')) (foldl_spmf f (return_spmf l) es)\"", "lemma foldl_pair_constr: \"foldl (\\<lambda>s e. map_prod (\\<lambda>l. f l e) (\\<lambda>_. c) s) (sl, c) l = \n   Pair (foldl (\\<lambda>s e. f s e) sl l) c\"", "lemma foldl_spmf_pair_right:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (\\<lambda>r'. (l, r')) (f r e)) (return_spmf (l, r)) es = \n    map_spmf (\\<lambda>r'. (l, r')) (foldl_spmf f (return_spmf r) es)\"", "lemma foldl_spmf_pair_right2:\n  \"foldl_spmf (\\<lambda>(_, r) e. map_spmf (\\<lambda>r'. (c', r')) (f r e)) (return_spmf (c, r)) es = \n    map_spmf (\\<lambda>r'. (if es = [] then c else c', r')) (foldl_spmf f (return_spmf r) es)\"", "lemma foldl_spmf_pair_right3:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e)) (return_spmf (l, r)) es = \n    map_spmf (Pair (if es = [] then l else g (last es))) (foldl_spmf f (return_spmf r) es)\"", "lemma foldl_pullout: \"bind_spmf f (\\<lambda>x. bind_spmf (foldl_spmf g init (events x)) (\\<lambda>y. h x y)) = \n    bind_spmf (bind_spmf f (\\<lambda>x. foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (g r e)) (map_spmf (Pair x) init) (events x)))\n     (\\<lambda>(x, y). h x y)\" for f g h init events", "lemma bind_foldl_spmf_pair_append: \"\n  bind_spmf\n    (foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e)) (return_spmf (a @ c, b)) es)\n    (\\<lambda>(x, y). g x y) =\n  bind_spmf\n    (foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e)) (return_spmf (c, b)) es)\n    (\\<lambda>(x, y). g (a @ x) y)\"", "lemma foldl_spmf_chain: \"\n(foldl_spmf (\\<lambda>(oevents, s_event) event. map_spmf (map_prod ((@) oevents) id) (fff s_event event)) (return_spmf ([], s_event)) ievents) \n  \\<bind> (\\<lambda>(oevents, s_event'). foldl_spmf ggg (return_spmf s_core) oevents \n        \\<bind> (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\nfoldl_spmf (\\<lambda>(s_event, s_core) event. fff s_event event \\<bind>  (\\<lambda>(oevents, s_event').\n      map_spmf (Pair s_event') (foldl_spmf ggg (return_spmf s_core) oevents))) (return_spmf (s_event, s_core)) ievents\n  \\<bind> (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))\"", "lemma WT_gpv_pauses [WT_intro]:\n  \"\\<I> \\<turnstile>g pauses xs \\<surd>\" if \"set xs \\<subseteq> outs_\\<I> \\<I>\"", "lemma exec_gpv_pauses:\n  \"exec_gpv callee (pauses xs) s =\n   map_spmf (Pair ()) (foldl_spmf (map_fun id (map_fun id (map_spmf snd)) callee) (return_spmf s) xs)\""], "translations": [["", "lemma foldl_spmf_return_pmf_None [simp]:\n  \"foldl_spmf f (return_pmf None) xs = return_pmf None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf f (return_pmf None) xs = return_pmf None", "by(induction xs) simp_all"], ["", "lemma foldl_spmf_bind_spmf: \"foldl_spmf f (bind_spmf p g) xs = bind_spmf p (\\<lambda>a. foldl_spmf f (g a) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf f (p \\<bind> g) xs =\n    p \\<bind> (\\<lambda>a. foldl_spmf f (g a) xs)", "by(induction xs arbitrary: g) simp_all"], ["", "lemma bind_foldl_spmf_return:\n  \"bind_spmf p (\\<lambda>x. foldl_spmf f (return_spmf x) xs) = foldl_spmf f p xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) xs) =\n    foldl_spmf f p xs", "by(simp add: foldl_spmf_bind_spmf[symmetric])"], ["", "lemma foldl_spmf_map [simp]: \"foldl_spmf f p (map g xs) = foldl_spmf (map_fun id (map_fun g id) f) p xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf f p (map g xs) =\n    foldl_spmf (map_fun id (map_fun g id) f) p xs", "by(induction xs arbitrary: p) simp_all"], ["", "lemma foldl_spmf_identity [simp]: \"foldl_spmf (\\<lambda>s x. return_spmf s) p xs = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>s x. return_spmf s) p xs = p", "by(induction xs arbitrary: p) simp_all"], ["", "lemma foldl_spmf_conv_foldl:\n  \"foldl_spmf (\\<lambda>s x. return_spmf (f s x)) p xs = map_spmf (\\<lambda>s. foldl f s xs) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>s x. return_spmf (f s x)) p xs =\n    map_spmf (\\<lambda>s. foldl f s xs) p", "by(induction xs arbitrary: p)(simp_all add: map_spmf_conv_bind_spmf[symmetric] spmf.map_comp o_def)"], ["", "lemma foldl_spmf_Cons':\n  \"foldl_spmf f (return_spmf a) (x # xs) = bind_spmf (f a x) (\\<lambda>a'. foldl_spmf f (return_spmf a') xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf f (return_spmf a) (x # xs) =\n    f a x \\<bind> (\\<lambda>a'. foldl_spmf f (return_spmf a') xs)", "by(simp add: bind_foldl_spmf_return)"], ["", "lemma foldl_spmf_append: \"foldl_spmf f p (xs @ ys) = foldl_spmf f (foldl_spmf f p xs) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf f p (xs @ ys) = foldl_spmf f (foldl_spmf f p xs) ys", "by(induction xs arbitrary: p) simp_all"], ["", "lemma \n  foldl_spmf_helper:\n  assumes \"\\<And>x. h (f x) = x\"\n  assumes \"\\<And>x. f (h x) = x\"\n  shows \"foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc es = \n    map_spmf h (foldl_spmf g (map_spmf f acc) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc es =\n    map_spmf h (foldl_spmf g (map_spmf f acc) es)", "using assms"], ["proof (prove)\nusing this:\n  h (f ?x) = ?x\n  f (h ?x) = ?x\n\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc es =\n    map_spmf h (foldl_spmf g (map_spmf f acc) es)", "proof (induction es arbitrary: acc)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>acc.\n       \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e))\n                          acc [] =\n                         map_spmf h (foldl_spmf g (map_spmf f acc) [])\n 2. \\<And>a es acc.\n       \\<lbrakk>\\<And>acc.\n                   \\<lbrakk>\\<And>x. h (f x) = x;\n                    \\<And>x. f (h x) = x\\<rbrakk>\n                   \\<Longrightarrow> foldl_spmf\n(\\<lambda>a e. map_spmf h (g (f a) e)) acc es =\n                                     map_spmf h\n(foldl_spmf g (map_spmf f acc) es);\n        \\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e))\n                          acc (a # es) =\n                         map_spmf h (foldl_spmf g (map_spmf f acc) (a # es))", "case (Cons a es)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n  \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) ?acc\n                     es =\n                    map_spmf h (foldl_spmf g (map_spmf f ?acc) es)\n  h (f ?x) = ?x\n  f (h ?x) = ?x\n\ngoal (2 subgoals):\n 1. \\<And>acc.\n       \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e))\n                          acc [] =\n                         map_spmf h (foldl_spmf g (map_spmf f acc) [])\n 2. \\<And>a es acc.\n       \\<lbrakk>\\<And>acc.\n                   \\<lbrakk>\\<And>x. h (f x) = x;\n                    \\<And>x. f (h x) = x\\<rbrakk>\n                   \\<Longrightarrow> foldl_spmf\n(\\<lambda>a e. map_spmf h (g (f a) e)) acc es =\n                                     map_spmf h\n(foldl_spmf g (map_spmf f acc) es);\n        \\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e))\n                          acc (a # es) =\n                         map_spmf h (foldl_spmf g (map_spmf f acc) (a # es))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n  \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) ?acc\n                     es =\n                    map_spmf h (foldl_spmf g (map_spmf f ?acc) es)\n  h (f ?x) = ?x\n  f (h ?x) = ?x", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n  \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) ?acc\n                     es =\n                    map_spmf h (foldl_spmf g (map_spmf f ?acc) es)\n  h (f ?x) = ?x\n  f (h ?x) = ?x\n\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc (a # es) =\n    map_spmf h (foldl_spmf g (map_spmf f acc) (a # es))", "by (simp add: spmf.map_comp map_bind_spmf bind_map_spmf o_def)"], ["proof (state)\nthis:\n  foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e)) acc (a # es) =\n  map_spmf h (foldl_spmf g (map_spmf f acc) (a # es))\n\ngoal (1 subgoal):\n 1. \\<And>acc.\n       \\<lbrakk>\\<And>x. h (f x) = x; \\<And>x. f (h x) = x\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf (\\<lambda>a e. map_spmf h (g (f a) e))\n                          acc [] =\n                         map_spmf h (foldl_spmf g (map_spmf f acc) [])", "qed (simp add: map_spmf_conv_bind_spmf)"], ["", "lemma \n  foldl_spmf_helper2:\n  assumes \"\\<And>x y. p (f x y) = x\"\n  assumes \"\\<And>x y. q (f x y) = y\"\n  assumes \"\\<And>x. f (p x) (q x) = x\"\n  shows \"foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc es = \n    bind_spmf acc (\\<lambda>acc'. map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc es =\n    acc \\<bind>\n    (\\<lambda>acc'.\n        map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))", "proof (induction es arbitrary: acc)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>acc.\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc [] =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) []))\n 2. \\<And>a es acc.\n       (\\<And>acc.\n           foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n            es =\n           acc \\<bind>\n           (\\<lambda>acc'.\n               map_spmf (f (p acc'))\n                (foldl_spmf g (return_spmf (q acc')) es))) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n        (a # es) =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc'))\n            (foldl_spmf g (return_spmf (q acc')) (a # es)))", "note [simp] = spmf.map_comp map_bind_spmf bind_map_spmf o_def"], ["proof (state)\nthis:\n  map_spmf ?f (map_spmf ?g ?p) = map_spmf (?f \\<circ> ?g) ?p\n  map_spmf ?f (?p \\<bind> ?g) = ?p \\<bind> map_spmf ?f \\<circ> ?g\n  map_spmf ?f ?p \\<bind> ?g = ?p \\<bind> ?g \\<circ> ?f\n  ?f \\<circ> ?g = (\\<lambda>x. ?f (?g x))\n\ngoal (2 subgoals):\n 1. \\<And>acc.\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc [] =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) []))\n 2. \\<And>a es acc.\n       (\\<And>acc.\n           foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n            es =\n           acc \\<bind>\n           (\\<lambda>acc'.\n               map_spmf (f (p acc'))\n                (foldl_spmf g (return_spmf (q acc')) es))) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n        (a # es) =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc'))\n            (foldl_spmf g (return_spmf (q acc')) (a # es)))", "case (Cons e es)"], ["proof (state)\nthis:\n  foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) ?acc es =\n  ?acc \\<bind>\n  (\\<lambda>acc'.\n      map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))\n\ngoal (2 subgoals):\n 1. \\<And>acc.\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc [] =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) []))\n 2. \\<And>a es acc.\n       (\\<And>acc.\n           foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n            es =\n           acc \\<bind>\n           (\\<lambda>acc'.\n               map_spmf (f (p acc'))\n                (foldl_spmf g (return_spmf (q acc')) es))) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc\n        (a # es) =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc'))\n            (foldl_spmf g (return_spmf (q acc')) (a # es)))", "then"], ["proof (chain)\npicking this:\n  foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) ?acc es =\n  ?acc \\<bind>\n  (\\<lambda>acc'.\n      map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))", "show ?case"], ["proof (prove)\nusing this:\n  foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) ?acc es =\n  ?acc \\<bind>\n  (\\<lambda>acc'.\n      map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) es))\n\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc (e # es) =\n    acc \\<bind>\n    (\\<lambda>acc'.\n        map_spmf (f (p acc'))\n         (foldl_spmf g (return_spmf (q acc')) (e # es)))", "apply (simp add: map_spmf_conv_bind_spmf assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>acc.\n        foldl_spmf\n         (\\<lambda>a e.\n             g (q a) e \\<bind> (\\<lambda>x. return_spmf (f (p a) x)))\n         acc es =\n        acc \\<bind>\n        (\\<lambda>acc'.\n            foldl_spmf g (return_spmf (q acc')) es \\<bind>\n            (\\<lambda>x. return_spmf (f (p acc') x)))) \\<Longrightarrow>\n    acc \\<bind>\n    (\\<lambda>y.\n        g (q y) e \\<bind>\n        (\\<lambda>ya.\n            foldl_spmf g (return_spmf ya) es \\<bind>\n            (\\<lambda>x. return_spmf (f (p y) x)))) =\n    acc \\<bind>\n    (\\<lambda>acc'.\n        foldl_spmf g (g (q acc') e) es \\<bind>\n        (\\<lambda>x. return_spmf (f (p acc') x)))", "apply (subst bind_spmf_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>acc.\n        foldl_spmf\n         (\\<lambda>a e.\n             g (q a) e \\<bind> (\\<lambda>x. return_spmf (f (p a) x)))\n         acc es =\n        acc \\<bind>\n        (\\<lambda>acc'.\n            foldl_spmf g (return_spmf (q acc')) es \\<bind>\n            (\\<lambda>x. return_spmf (f (p acc') x)))) \\<Longrightarrow>\n    acc \\<bind>\n    (\\<lambda>y.\n        g (q y) e \\<bind>\n        (\\<lambda>y. foldl_spmf g (return_spmf y) es) \\<bind>\n        (\\<lambda>x. return_spmf (f (p y) x))) =\n    acc \\<bind>\n    (\\<lambda>acc'.\n        foldl_spmf g (g (q acc') e) es \\<bind>\n        (\\<lambda>x. return_spmf (f (p acc') x)))", "by (simp add: bind_foldl_spmf_return)"], ["proof (state)\nthis:\n  foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc (e # es) =\n  acc \\<bind>\n  (\\<lambda>acc'.\n      map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) (e # es)))\n\ngoal (1 subgoal):\n 1. \\<And>acc.\n       foldl_spmf (\\<lambda>a e. map_spmf (f (p a)) (g (q a) e)) acc [] =\n       acc \\<bind>\n       (\\<lambda>acc'.\n           map_spmf (f (p acc')) (foldl_spmf g (return_spmf (q acc')) []))", "qed (simp add: assms(3))"], ["", "lemma foldl_pair_constl: \"foldl (\\<lambda>s e. map_prod (\\<lambda>_. c) (\\<lambda>r. f r e) s) (c, sr) l = \n    Pair c (foldl (\\<lambda>s e. f s e) sr l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl (\\<lambda>s e. map_prod (\\<lambda>_. c) (\\<lambda>r. f r e) s)\n     (c, sr) l =\n    (c, foldl f sr l)", "by (induction l arbitrary: sr) (auto simp add: map_prod_def split_def)"], ["", "lemma foldl_spmf_pair_left:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e)) (return_spmf (l, r)) es = \n    map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (return_spmf l) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n     (return_spmf (l, r)) es =\n    map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (return_spmf l) es)", "apply (induction es arbitrary: l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l.\n       foldl_spmf\n        (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n        (return_spmf (l, r)) [] =\n       map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (return_spmf l) [])\n 2. \\<And>a es l.\n       (\\<And>l.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (l, r)) es =\n           map_spmf (\\<lambda>l'. (l', r))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n        (return_spmf (l, r)) (a # es) =\n       map_spmf (\\<lambda>l'. (l', r))\n        (foldl_spmf f (return_spmf l) (a # es))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l.\n       (\\<And>l.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (l, r)) es =\n           map_spmf (\\<lambda>l'. (l', r))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n        (map_spmf (\\<lambda>l'. (l', r)) (f l a)) es =\n       map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (f l a) es)", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l.\n       (\\<And>l.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (l, r)) es =\n           map_spmf (\\<lambda>l'. (l', r))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n        (f l a \\<bind> (\\<lambda>x. return_spmf (x, r))) es =\n       map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (f l a) es)", "apply (subst foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l.\n       (\\<And>l.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (l, r)) es =\n           map_spmf (\\<lambda>l'. (l', r))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       f l a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (a, r)) es) =\n       map_spmf (\\<lambda>l'. (l', r)) (foldl_spmf f (f l a) es)", "apply (subst (2) bind_foldl_spmf_return[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l.\n       (\\<And>l.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (l, r)) es =\n           map_spmf (\\<lambda>l'. (l', r))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       f l a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf\n            (\\<lambda>(l, r) e. map_spmf (\\<lambda>l'. (l', r)) (f l e))\n            (return_spmf (a, r)) es) =\n       map_spmf (\\<lambda>l'. (l', r))\n        (f l a \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) es))", "by (simp add: map_spmf_conv_bind_spmf)"], ["", "lemma foldl_spmf_pair_left2:\n  \"foldl_spmf (\\<lambda>(l, _) e. map_spmf (\\<lambda>l'. (l', c')) (f l e)) (return_spmf (l, c)) es = \n    map_spmf (\\<lambda>l'. (l', if es = [] then c else c')) (foldl_spmf f (return_spmf l) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf\n     (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n     (return_spmf (l, c)) es =\n    map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n     (foldl_spmf f (return_spmf l) es)", "apply (induction es arbitrary: l c c')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l c c'.\n       foldl_spmf\n        (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n        (return_spmf (l, c)) [] =\n       map_spmf (\\<lambda>l'. (l', if [] = [] then c else c'))\n        (foldl_spmf f (return_spmf l) [])\n 2. \\<And>a es l c c'.\n       (\\<And>l c c'.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (l, c)) es =\n           map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n        (return_spmf (l, c)) (a # es) =\n       map_spmf (\\<lambda>l'. (l', if a # es = [] then c else c'))\n        (foldl_spmf f (return_spmf l) (a # es))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l c'.\n       (\\<And>l c c'.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (l, c)) es =\n           map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n        (map_spmf (\\<lambda>l'. (l', c')) (f l a)) es =\n       map_spmf (\\<lambda>l'. (l', c')) (foldl_spmf f (f l a) es)", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l c'.\n       (\\<And>l c c'.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (l, c)) es =\n           map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n        (f l a \\<bind> (\\<lambda>x. return_spmf (x, c'))) es =\n       map_spmf (\\<lambda>l'. (l', c')) (foldl_spmf f (f l a) es)", "apply (subst foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l c'.\n       (\\<And>l c c'.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (l, c)) es =\n           map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       f l a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (a, c')) es) =\n       map_spmf (\\<lambda>l'. (l', c')) (foldl_spmf f (f l a) es)", "apply (subst (2) bind_foldl_spmf_return[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es l c'.\n       (\\<And>l c c'.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (l, c)) es =\n           map_spmf (\\<lambda>l'. (l', if es = [] then c else c'))\n            (foldl_spmf f (return_spmf l) es)) \\<Longrightarrow>\n       f l a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf\n            (\\<lambda>(l, uu_) e. map_spmf (\\<lambda>l'. (l', c')) (f l e))\n            (return_spmf (a, c')) es) =\n       map_spmf (\\<lambda>l'. (l', c'))\n        (f l a \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) es))", "by (simp add: map_spmf_conv_bind_spmf)"], ["", "lemma foldl_pair_constr: \"foldl (\\<lambda>s e. map_prod (\\<lambda>l. f l e) (\\<lambda>_. c) s) (sl, c) l = \n   Pair (foldl (\\<lambda>s e. f s e) sl l) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl (\\<lambda>s e. map_prod (\\<lambda>l. f l e) (\\<lambda>_. c) s)\n     (sl, c) l =\n    (foldl f sl l, c)", "by (induction l arbitrary: sl) (auto simp add: map_prod_def split_def)"], ["", "lemma foldl_spmf_pair_right:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (\\<lambda>r'. (l, r')) (f r e)) (return_spmf (l, r)) es = \n    map_spmf (\\<lambda>r'. (l, r')) (foldl_spmf f (return_spmf r) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n     (return_spmf (l, r)) es =\n    map_spmf (Pair l) (foldl_spmf f (return_spmf r) es)", "apply (induction es arbitrary: r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r.\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n        (return_spmf (l, r)) [] =\n       map_spmf (Pair l) (foldl_spmf f (return_spmf r) [])\n 2. \\<And>a es r.\n       (\\<And>r.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair l)\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n        (return_spmf (l, r)) (a # es) =\n       map_spmf (Pair l) (foldl_spmf f (return_spmf r) (a # es))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair l)\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n        (map_spmf (Pair l) (f r a)) es =\n       map_spmf (Pair l) (foldl_spmf f (f r a) es)", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair l)\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n        (f r a \\<bind> (\\<lambda>x. return_spmf (l, x))) es =\n       map_spmf (Pair l) (foldl_spmf f (f r a) es)", "apply (subst foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair l)\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, a)) es) =\n       map_spmf (Pair l) (foldl_spmf f (f r a) es)", "apply (subst (2) bind_foldl_spmf_return[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair l)\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (f r e))\n            (return_spmf (l, a)) es) =\n       map_spmf (Pair l)\n        (f r a \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) es))", "by (simp add: map_spmf_conv_bind_spmf)"], ["", "lemma foldl_spmf_pair_right2:\n  \"foldl_spmf (\\<lambda>(_, r) e. map_spmf (\\<lambda>r'. (c', r')) (f r e)) (return_spmf (c, r)) es = \n    map_spmf (\\<lambda>r'. (if es = [] then c else c', r')) (foldl_spmf f (return_spmf r) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n     (return_spmf (c, r)) es =\n    map_spmf (Pair (if es = [] then c else c'))\n     (foldl_spmf f (return_spmf r) es)", "apply (induction es arbitrary: r c c')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r c c'.\n       foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n        (return_spmf (c, r)) [] =\n       map_spmf (Pair (if [] = [] then c else c'))\n        (foldl_spmf f (return_spmf r) [])\n 2. \\<And>a es r c c'.\n       (\\<And>r c c'.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c, r)) es =\n           map_spmf (Pair (if es = [] then c else c'))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n        (return_spmf (c, r)) (a # es) =\n       map_spmf (Pair (if a # es = [] then c else c'))\n        (foldl_spmf f (return_spmf r) (a # es))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r c'.\n       (\\<And>r c c'.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c, r)) es =\n           map_spmf (Pair (if es = [] then c else c'))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n        (map_spmf (Pair c') (f r a)) es =\n       map_spmf (Pair c') (foldl_spmf f (f r a) es)", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r c'.\n       (\\<And>r c c'.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c, r)) es =\n           map_spmf (Pair (if es = [] then c else c'))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n        (f r a \\<bind> (\\<lambda>x. return_spmf (c', x))) es =\n       map_spmf (Pair c') (foldl_spmf f (f r a) es)", "apply (subst foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r c'.\n       (\\<And>r c c'.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c, r)) es =\n           map_spmf (Pair (if es = [] then c else c'))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c', a)) es) =\n       map_spmf (Pair c') (foldl_spmf f (f r a) es)", "apply (subst (2) bind_foldl_spmf_return[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r c'.\n       (\\<And>r c c'.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c, r)) es =\n           map_spmf (Pair (if es = [] then c else c'))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>a.\n           foldl_spmf (\\<lambda>(uu_, r) e. map_spmf (Pair c') (f r e))\n            (return_spmf (c', a)) es) =\n       map_spmf (Pair c')\n        (f r a \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) es))", "by (auto simp add: map_spmf_conv_bind_spmf split_def)"], ["", "lemma foldl_spmf_pair_right3:\n  \"foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e)) (return_spmf (l, r)) es = \n    map_spmf (Pair (if es = [] then l else g (last es))) (foldl_spmf f (return_spmf r) es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n     (return_spmf (l, r)) es =\n    map_spmf (Pair (if es = [] then l else g (last es)))\n     (foldl_spmf f (return_spmf r) es)", "apply (induction es arbitrary: r l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r l.\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n        (return_spmf (l, r)) [] =\n       map_spmf (Pair (if [] = [] then l else g (last [])))\n        (foldl_spmf f (return_spmf r) [])\n 2. \\<And>a es r l.\n       (\\<And>r l.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair (if es = [] then l else g (last es)))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n        (return_spmf (l, r)) (a # es) =\n       map_spmf (Pair (if a # es = [] then l else g (last (a # es))))\n        (foldl_spmf f (return_spmf r) (a # es))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r l.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair (if es = [] then l else g (last es)))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       es \\<noteq> [] \\<longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n        (map_spmf (Pair (g a)) (f r a)) es =\n       map_spmf (Pair (g (last es))) (foldl_spmf f (f r a) es)", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r l.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair (if es = [] then l else g (last es)))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       es \\<noteq> [] \\<longrightarrow>\n       foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n        (f r a \\<bind> (\\<lambda>x. return_spmf (g a, x))) es =\n       map_spmf (Pair (g (last es))) (foldl_spmf f (f r a) es)", "apply (subst foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r l.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair (if es = [] then l else g (last es)))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       es \\<noteq> [] \\<longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>aa.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (g a, aa)) es) =\n       map_spmf (Pair (g (last es))) (foldl_spmf f (f r a) es)", "apply (subst (2) bind_foldl_spmf_return[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a es r.\n       (\\<And>r l.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (l, r)) es =\n           map_spmf (Pair (if es = [] then l else g (last es)))\n            (foldl_spmf f (return_spmf r) es)) \\<Longrightarrow>\n       es \\<noteq> [] \\<longrightarrow>\n       f r a \\<bind>\n       (\\<lambda>aa.\n           foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair (g e)) (f r e))\n            (return_spmf (g a, aa)) es) =\n       map_spmf (Pair (g (last es)))\n        (f r a \\<bind> (\\<lambda>x. foldl_spmf f (return_spmf x) es))", "by (clarsimp simp add: split_def map_bind_spmf o_def)"], ["", "lemma foldl_pullout: \"bind_spmf f (\\<lambda>x. bind_spmf (foldl_spmf g init (events x)) (\\<lambda>y. h x y)) = \n    bind_spmf (bind_spmf f (\\<lambda>x. foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (g r e)) (map_spmf (Pair x) init) (events x)))\n     (\\<lambda>(x, y). h x y)\" for f g h init events"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bind> (\\<lambda>x. foldl_spmf g init (events x) \\<bind> h x) =\n    f \\<bind>\n    (\\<lambda>x.\n        foldl_spmf (\\<lambda>(l, r) e. map_spmf (Pair l) (g r e))\n         (map_spmf (Pair x) init) (events x)) \\<bind>\n    (\\<lambda>(x, y). h x y)", "apply (simp add: foldl_spmf_helper2[where f=Pair and p=fst and q=snd, simplified] split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bind> (\\<lambda>x. foldl_spmf g init (events x) \\<bind> h x) =\n    f \\<bind>\n    (\\<lambda>y.\n        map_spmf (Pair y) init \\<bind>\n        (\\<lambda>ya.\n            map_spmf (Pair (fst ya))\n             (foldl_spmf g (return_spmf (snd ya)) (events y)) \\<bind>\n            (\\<lambda>p. h (fst p) (snd p))))", "apply (clarsimp simp add: map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<bind> (\\<lambda>x. foldl_spmf g init (events x) \\<bind> h x) =\n    f \\<bind>\n    (\\<lambda>y.\n        init \\<bind>\n        (\\<lambda>ya. foldl_spmf g (return_spmf ya) (events y) \\<bind> h y))", "by (subst bind_spmf_assoc[symmetric]) (auto simp add: bind_foldl_spmf_return)"], ["", "lemma bind_foldl_spmf_pair_append: \"\n  bind_spmf\n    (foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e)) (return_spmf (a @ c, b)) es)\n    (\\<lambda>(x, y). g x y) =\n  bind_spmf\n    (foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e)) (return_spmf (c, b)) es)\n    (\\<lambda>(x, y). g (a @ x) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n     (return_spmf (a @ c, b)) es \\<bind>\n    (\\<lambda>(x, y). g x y) =\n    foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n     (return_spmf (c, b)) es \\<bind>\n    (\\<lambda>(x, y). g (a @ x) y)", "apply (induction es arbitrary: c b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c b.\n       foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n        (return_spmf (a @ c, b)) [] \\<bind>\n       (\\<lambda>(x, y). g x y) =\n       foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n        (return_spmf (c, b)) [] \\<bind>\n       (\\<lambda>(x, y). g (a @ x) y)\n 2. \\<And>aa es c b.\n       (\\<And>c b.\n           foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n            (return_spmf (a @ c, b)) es \\<bind>\n           (\\<lambda>(x, y). g x y) =\n           foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n            (return_spmf (c, b)) es \\<bind>\n           (\\<lambda>(x, y). g (a @ x) y)) \\<Longrightarrow>\n       foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n        (return_spmf (a @ c, b)) (aa # es) \\<bind>\n       (\\<lambda>(x, y). g x y) =\n       foldl_spmf (\\<lambda>(x, y) e. map_spmf (apfst ((@) x)) (f y e))\n        (return_spmf (c, b)) (aa # es) \\<bind>\n       (\\<lambda>(x, y). g (a @ x) y)", "apply (simp_all add: split_def map_spmf_conv_bind_spmf apfst_def map_prod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa es c b.\n       (\\<And>c b.\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (a @ c, b)) es \\<bind>\n           (\\<lambda>p. g (fst p) (snd p)) =\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (c, b)) es \\<bind>\n           (\\<lambda>p. g (a @ fst p) (snd p))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p e.\n            f (snd p) e \\<bind>\n            (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n        (f b aa \\<bind> (\\<lambda>x. return_spmf (a @ c @ fst x, snd x)))\n        es \\<bind>\n       (\\<lambda>p. g (fst p) (snd p)) =\n       foldl_spmf\n        (\\<lambda>p e.\n            f (snd p) e \\<bind>\n            (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n        (f b aa \\<bind> (\\<lambda>x. return_spmf (c @ fst x, snd x)))\n        es \\<bind>\n       (\\<lambda>p. g (a @ fst p) (snd p))", "apply (subst (1 2) foldl_spmf_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa es c b.\n       (\\<And>c b.\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (a @ c, b)) es \\<bind>\n           (\\<lambda>p. g (fst p) (snd p)) =\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (c, b)) es \\<bind>\n           (\\<lambda>p. g (a @ fst p) (snd p))) \\<Longrightarrow>\n       f b aa \\<bind>\n       (\\<lambda>aa.\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (a @ c @ fst aa, snd aa)) es) \\<bind>\n       (\\<lambda>p. g (fst p) (snd p)) =\n       f b aa \\<bind>\n       (\\<lambda>a.\n           foldl_spmf\n            (\\<lambda>p e.\n                f (snd p) e \\<bind>\n                (\\<lambda>x. return_spmf (fst p @ fst x, snd x)))\n            (return_spmf (c @ fst a, snd a)) es) \\<bind>\n       (\\<lambda>p. g (a @ fst p) (snd p))", "by simp"], ["", "lemma foldl_spmf_chain: \"\n(foldl_spmf (\\<lambda>(oevents, s_event) event. map_spmf (map_prod ((@) oevents) id) (fff s_event event)) (return_spmf ([], s_event)) ievents) \n  \\<bind> (\\<lambda>(oevents, s_event'). foldl_spmf ggg (return_spmf s_core) oevents \n        \\<bind> (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\nfoldl_spmf (\\<lambda>(s_event, s_core) event. fff s_event event \\<bind>  (\\<lambda>(oevents, s_event').\n      map_spmf (Pair s_event') (foldl_spmf ggg (return_spmf s_core) oevents))) (return_spmf (s_event, s_core)) ievents\n  \\<bind> (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf\n     (\\<lambda>(oevents, s_event) event.\n         map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n     (return_spmf ([], s_event)) ievents \\<bind>\n    (\\<lambda>(oevents, s_event').\n        foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n    foldl_spmf\n     (\\<lambda>(s_event, s_core) event.\n         fff s_event event \\<bind>\n         (\\<lambda>(oevents, s_event').\n             map_spmf (Pair s_event')\n              (foldl_spmf ggg (return_spmf s_core) oevents)))\n     (return_spmf (s_event, s_core)) ievents \\<bind>\n    (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "proof (induction ievents arbitrary: s_event s_core)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s_event s_core.\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) [] \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) [] \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))\n 2. \\<And>a ievents s_event s_core.\n       (\\<And>s_event s_core.\n           foldl_spmf\n            (\\<lambda>(oevents, s_event) event.\n                map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n            (return_spmf ([], s_event)) ievents \\<bind>\n           (\\<lambda>(oevents, s_event').\n               foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n           foldl_spmf\n            (\\<lambda>(s_event, s_core) event.\n                fff s_event event \\<bind>\n                (\\<lambda>(oevents, s_event').\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n            (return_spmf (s_event, s_core)) ievents \\<bind>\n           (\\<lambda>(s_event', s_core').\n               return_spmf (f s_core' s_event'))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) (a # ievents) \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) (a # ievents) \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>s_event s_core.\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) [] \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) [] \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))\n 2. \\<And>a ievents s_event s_core.\n       (\\<And>s_event s_core.\n           foldl_spmf\n            (\\<lambda>(oevents, s_event) event.\n                map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n            (return_spmf ([], s_event)) ievents \\<bind>\n           (\\<lambda>(oevents, s_event').\n               foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n           foldl_spmf\n            (\\<lambda>(s_event, s_core) event.\n                fff s_event event \\<bind>\n                (\\<lambda>(oevents, s_event').\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n            (return_spmf (s_event, s_core)) ievents \\<bind>\n           (\\<lambda>(s_event', s_core').\n               return_spmf (f s_core' s_event'))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) (a # ievents) \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) (a # ievents) \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf\n     (\\<lambda>a.\n         case a of\n         (oevents, s_event) \\<Rightarrow>\n           \\<lambda>event.\n              map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n     (return_spmf ([], s_event)) [] \\<bind>\n    (\\<lambda>a.\n        case a of\n        (oevents, s_event') \\<Rightarrow>\n          foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n          (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n    foldl_spmf\n     (\\<lambda>a.\n         case a of\n         (s_event, s_core) \\<Rightarrow>\n           \\<lambda>event.\n              fff s_event event \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (oevents, s_event') \\<Rightarrow>\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n     (return_spmf (s_event, s_core)) [] \\<bind>\n    (\\<lambda>a.\n        case a of\n        (s_event', s_core') \\<Rightarrow> return_spmf (f s_core' s_event'))", "by simp"], ["proof (state)\nthis:\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (oevents, s_event) \\<Rightarrow>\n         \\<lambda>event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n   (return_spmf ([], s_event)) [] \\<bind>\n  (\\<lambda>a.\n      case a of\n      (oevents, s_event') \\<Rightarrow>\n        foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (s_event, s_core) \\<Rightarrow>\n         \\<lambda>event.\n            fff s_event event \\<bind>\n            (\\<lambda>a.\n                case a of\n                (oevents, s_event') \\<Rightarrow>\n                  map_spmf (Pair s_event')\n                   (foldl_spmf ggg (return_spmf s_core) oevents)))\n   (return_spmf (s_event, s_core)) [] \\<bind>\n  (\\<lambda>a.\n      case a of\n      (s_event', s_core') \\<Rightarrow> return_spmf (f s_core' s_event'))\n\ngoal (1 subgoal):\n 1. \\<And>a ievents s_event s_core.\n       (\\<And>s_event s_core.\n           foldl_spmf\n            (\\<lambda>(oevents, s_event) event.\n                map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n            (return_spmf ([], s_event)) ievents \\<bind>\n           (\\<lambda>(oevents, s_event').\n               foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n           foldl_spmf\n            (\\<lambda>(s_event, s_core) event.\n                fff s_event event \\<bind>\n                (\\<lambda>(oevents, s_event').\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n            (return_spmf (s_event, s_core)) ievents \\<bind>\n           (\\<lambda>(s_event', s_core').\n               return_spmf (f s_core' s_event'))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) (a # ievents) \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) (a # ievents) \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ievents s_event s_core.\n       (\\<And>s_event s_core.\n           foldl_spmf\n            (\\<lambda>(oevents, s_event) event.\n                map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n            (return_spmf ([], s_event)) ievents \\<bind>\n           (\\<lambda>(oevents, s_event').\n               foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n           foldl_spmf\n            (\\<lambda>(s_event, s_core) event.\n                fff s_event event \\<bind>\n                (\\<lambda>(oevents, s_event').\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n            (return_spmf (s_event, s_core)) ievents \\<bind>\n           (\\<lambda>(s_event', s_core').\n               return_spmf (f s_core' s_event'))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) (a # ievents) \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) (a # ievents) \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "case (Cons e es)"], ["proof (state)\nthis:\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (oevents, s_event) \\<Rightarrow>\n         \\<lambda>event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n   (return_spmf ([], ?s_event)) es \\<bind>\n  (\\<lambda>a.\n      case a of\n      (oevents, s_event') \\<Rightarrow>\n        foldl_spmf ggg (return_spmf ?s_core) oevents \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (s_event, s_core) \\<Rightarrow>\n         \\<lambda>event.\n            fff s_event event \\<bind>\n            (\\<lambda>a.\n                case a of\n                (oevents, s_event') \\<Rightarrow>\n                  map_spmf (Pair s_event')\n                   (foldl_spmf ggg (return_spmf s_core) oevents)))\n   (return_spmf (?s_event, ?s_core)) es \\<bind>\n  (\\<lambda>a.\n      case a of\n      (s_event', s_core') \\<Rightarrow> return_spmf (f s_core' s_event'))\n\ngoal (1 subgoal):\n 1. \\<And>a ievents s_event s_core.\n       (\\<And>s_event s_core.\n           foldl_spmf\n            (\\<lambda>(oevents, s_event) event.\n                map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n            (return_spmf ([], s_event)) ievents \\<bind>\n           (\\<lambda>(oevents, s_event').\n               foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n           foldl_spmf\n            (\\<lambda>(s_event, s_core) event.\n                fff s_event event \\<bind>\n                (\\<lambda>(oevents, s_event').\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n            (return_spmf (s_event, s_core)) ievents \\<bind>\n           (\\<lambda>(s_event', s_core').\n               return_spmf (f s_core' s_event'))) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>(oevents, s_event) event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n        (return_spmf ([], s_event)) (a # ievents) \\<bind>\n       (\\<lambda>(oevents, s_event').\n           foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n       foldl_spmf\n        (\\<lambda>(s_event, s_core) event.\n            fff s_event event \\<bind>\n            (\\<lambda>(oevents, s_event').\n                map_spmf (Pair s_event')\n                 (foldl_spmf ggg (return_spmf s_core) oevents)))\n        (return_spmf (s_event, s_core)) (a # ievents) \\<bind>\n       (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl_spmf\n     (\\<lambda>a.\n         case a of\n         (oevents, s_event) \\<Rightarrow>\n           \\<lambda>event.\n              map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n     (return_spmf ([], s_event)) (e # es) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (oevents, s_event') \\<Rightarrow>\n          foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n          (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n    foldl_spmf\n     (\\<lambda>a.\n         case a of\n         (s_event, s_core) \\<Rightarrow>\n           \\<lambda>event.\n              fff s_event event \\<bind>\n              (\\<lambda>a.\n                  case a of\n                  (oevents, s_event') \\<Rightarrow>\n                    map_spmf (Pair s_event')\n                     (foldl_spmf ggg (return_spmf s_core) oevents)))\n     (return_spmf (s_event, s_core)) (e # es) \\<bind>\n    (\\<lambda>a.\n        case a of\n        (s_event', s_core') \\<Rightarrow> return_spmf (f s_core' s_event'))", "apply (subst (1 2) foldl_spmf_Cons')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case ([], s_event) of\n     (oevents, s_event) \\<Rightarrow>\n       \\<lambda>event.\n          map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n     e \\<bind>\n    (\\<lambda>a'.\n        foldl_spmf\n         (\\<lambda>(oevents, s_event) event.\n             map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n         (return_spmf a') es) \\<bind>\n    (\\<lambda>(oevents, s_event').\n        foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n    (case (s_event, s_core) of\n     (s_event, s_core) \\<Rightarrow>\n       \\<lambda>event.\n          fff s_event event \\<bind>\n          (\\<lambda>(oevents, s_event').\n              map_spmf (Pair s_event')\n               (foldl_spmf ggg (return_spmf s_core) oevents)))\n     e \\<bind>\n    (\\<lambda>a'.\n        foldl_spmf\n         (\\<lambda>(s_event, s_core) event.\n             fff s_event event \\<bind>\n             (\\<lambda>(oevents, s_event').\n                 map_spmf (Pair s_event')\n                  (foldl_spmf ggg (return_spmf s_core) oevents)))\n         (return_spmf a') es) \\<bind>\n    (\\<lambda>(s_event', s_core'). return_spmf (f s_core' s_event'))", "apply (simp add: split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf (map_prod ((@) []) id) (fff s_event e) \\<bind>\n    (\\<lambda>y.\n        foldl_spmf\n         (\\<lambda>p event.\n             map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n         (return_spmf y) es \\<bind>\n        (\\<lambda>p.\n            foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n            (\\<lambda>s_core'. return_spmf (f s_core' (snd p))))) =\n    fff s_event e \\<bind>\n    (\\<lambda>y.\n        map_spmf (Pair (snd y))\n         (foldl_spmf ggg (return_spmf s_core) (fst y)) \\<bind>\n        (\\<lambda>y.\n            foldl_spmf\n             (\\<lambda>p event.\n                 fff (fst p) event \\<bind>\n                 (\\<lambda>pa.\n                     map_spmf (Pair (snd pa))\n                      (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n             (return_spmf y) es \\<bind>\n            (\\<lambda>p. return_spmf (f (snd p) (fst p)))))", "apply (subst map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fff s_event e \\<bind>\n    (\\<lambda>x. return_spmf (map_prod ((@) []) id x)) \\<bind>\n    (\\<lambda>y.\n        foldl_spmf\n         (\\<lambda>p event.\n             map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n         (return_spmf y) es \\<bind>\n        (\\<lambda>p.\n            foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n            (\\<lambda>s_core'. return_spmf (f s_core' (snd p))))) =\n    fff s_event e \\<bind>\n    (\\<lambda>y.\n        map_spmf (Pair (snd y))\n         (foldl_spmf ggg (return_spmf s_core) (fst y)) \\<bind>\n        (\\<lambda>y.\n            foldl_spmf\n             (\\<lambda>p event.\n                 fff (fst p) event \\<bind>\n                 (\\<lambda>pa.\n                     map_spmf (Pair (snd pa))\n                      (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n             (return_spmf y) es \\<bind>\n            (\\<lambda>p. return_spmf (f (snd p) (fst p)))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fff s_event e \\<bind>\n    (\\<lambda>y.\n        foldl_spmf\n         (\\<lambda>p event.\n             map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n         (return_spmf (map_prod ((@) []) id y)) es \\<bind>\n        (\\<lambda>p.\n            foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n            (\\<lambda>s_core'. return_spmf (f s_core' (snd p))))) =\n    fff s_event e \\<bind>\n    (\\<lambda>y.\n        map_spmf (Pair (snd y))\n         (foldl_spmf ggg (return_spmf s_core) (fst y)) \\<bind>\n        (\\<lambda>y.\n            foldl_spmf\n             (\\<lambda>p event.\n                 fff (fst p) event \\<bind>\n                 (\\<lambda>pa.\n                     map_spmf (Pair (snd pa))\n                      (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n             (return_spmf y) es \\<bind>\n            (\\<lambda>p. return_spmf (f (snd p) (fst p)))))", "apply (rule bind_spmf_cong[OF refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       map_spmf (Pair (snd x))\n        (foldl_spmf ggg (return_spmf s_core) (fst x)) \\<bind>\n       (\\<lambda>y.\n           foldl_spmf\n            (\\<lambda>p event.\n                fff (fst p) event \\<bind>\n                (\\<lambda>pa.\n                    map_spmf (Pair (snd pa))\n                     (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n            (return_spmf y) es \\<bind>\n           (\\<lambda>p. return_spmf (f (snd p) (fst p))))", "apply (subst (2) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n       (\\<lambda>xa. return_spmf (snd x, xa)) \\<bind>\n       (\\<lambda>y.\n           foldl_spmf\n            (\\<lambda>p event.\n                fff (fst p) event \\<bind>\n                (\\<lambda>pa.\n                    map_spmf (Pair (snd pa))\n                     (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n            (return_spmf y) es \\<bind>\n           (\\<lambda>p. return_spmf (f (snd p) (fst p))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n       (\\<lambda>y.\n           foldl_spmf\n            (\\<lambda>p event.\n                fff (fst p) event \\<bind>\n                (\\<lambda>pa.\n                    map_spmf (Pair (snd pa))\n                     (foldl_spmf ggg (return_spmf (snd p)) (fst pa))))\n            (return_spmf (snd x, y)) es \\<bind>\n           (\\<lambda>p. return_spmf (f (snd p) (fst p))))", "apply (subst Cons.IH[symmetric, simplified split_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n       (\\<lambda>y.\n           foldl_spmf\n            (\\<lambda>a b.\n                map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n            (return_spmf ([], snd x)) es \\<bind>\n           (\\<lambda>a.\n               foldl_spmf ggg (return_spmf y) (fst a) \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' (snd a)))))", "apply (subst bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b. map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n           (\\<lambda>x.\n               foldl_spmf ggg (return_spmf x) (fst y) \\<bind>\n               (\\<lambda>s_core'. return_spmf (f s_core' (snd y)))))", "apply (subst (2) map_spmf_conv_bind_spmf[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b. map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n           (\\<lambda>x.\n               map_spmf (\\<lambda>s_core'. f s_core' (snd y))\n                (foldl_spmf ggg (return_spmf x) (fst y))))", "apply (subst map_bind_spmf[symmetric, simplified o_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b. map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           map_spmf (\\<lambda>s_core'. f s_core' (snd y))\n            (foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n             (\\<lambda>x. foldl_spmf ggg (return_spmf x) (fst y))))", "apply (subst (1) foldl_spmf_bind_spmf[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b. map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           map_spmf (\\<lambda>s_core'. f s_core' (snd y))\n            (foldl_spmf ggg\n              (foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n               return_spmf)\n              (fst y)))", "apply (subst (3) map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (map_prod ((@) (fst p)) id) (fff (snd p) event))\n        (return_spmf (map_prod ((@) []) id x)) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b. map_spmf (map_prod ((@) (fst a)) id) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           foldl_spmf ggg\n            (foldl_spmf ggg (return_spmf s_core) (fst x) \\<bind>\n             return_spmf)\n            (fst y) \\<bind>\n           (\\<lambda>x. return_spmf (f x (snd y))))", "apply (simp add: foldl_spmf_append[symmetric] map_prod_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n       foldl_spmf\n        (\\<lambda>p event.\n            map_spmf (\\<lambda>pa. (fst p @ fst pa, snd pa))\n             (fff (snd p) event))\n        (return_spmf x) es \\<bind>\n       (\\<lambda>p.\n           foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n           (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n       foldl_spmf\n        (\\<lambda>a b.\n            map_spmf (\\<lambda>p. (fst a @ fst p, snd p)) (fff (snd a) b))\n        (return_spmf ([], snd x)) es \\<bind>\n       (\\<lambda>y.\n           foldl_spmf ggg (return_spmf s_core) (fst x @ fst y) \\<bind>\n           (\\<lambda>x. return_spmf (f x (snd y))))", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set_spmf (fff s_event e) \\<Longrightarrow>\n    foldl_spmf\n     (\\<lambda>p event.\n         map_spmf (\\<lambda>pa. (fst p @ fst pa, snd pa))\n          (fff (snd p) event))\n     (return_spmf x) es \\<bind>\n    (\\<lambda>p.\n        foldl_spmf ggg (return_spmf s_core) (fst p) \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' (snd p)))) =\n    foldl_spmf\n     (\\<lambda>a b.\n         map_spmf (\\<lambda>p. (fst a @ fst p, snd p)) (fff (snd a) b))\n     (return_spmf ([], snd x)) es \\<bind>\n    (\\<lambda>y.\n        foldl_spmf ggg (return_spmf s_core) (fst x @ fst y) \\<bind>\n        (\\<lambda>x. return_spmf (f x (snd y))))", "apply (cases x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<in> set_spmf (fff s_event e); x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> foldl_spmf\n                          (\\<lambda>p event.\n                              map_spmf\n                               (\\<lambda>pa. (fst p @ fst pa, snd pa))\n                               (fff (snd p) event))\n                          (return_spmf x) es \\<bind>\n                         (\\<lambda>p.\n                             foldl_spmf ggg (return_spmf s_core)\n                              (fst p) \\<bind>\n                             (\\<lambda>s_core'.\n                                 return_spmf (f s_core' (snd p)))) =\n                         foldl_spmf\n                          (\\<lambda>a b.\n                              map_spmf (\\<lambda>p. (fst a @ fst p, snd p))\n                               (fff (snd a) b))\n                          (return_spmf ([], snd x)) es \\<bind>\n                         (\\<lambda>y.\n                             foldl_spmf ggg (return_spmf s_core)\n                              (fst x @ fst y) \\<bind>\n                             (\\<lambda>x. return_spmf (f x (snd y))))", "subgoal for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set_spmf (fff s_event e); x = (a, b)\\<rbrakk>\n    \\<Longrightarrow> foldl_spmf\n                       (\\<lambda>p event.\n                           map_spmf (\\<lambda>pa. (fst p @ fst pa, snd pa))\n                            (fff (snd p) event))\n                       (return_spmf x) es \\<bind>\n                      (\\<lambda>p.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (fst p) \\<bind>\n                          (\\<lambda>s_core'.\n                              return_spmf (f s_core' (snd p)))) =\n                      foldl_spmf\n                       (\\<lambda>a b.\n                           map_spmf (\\<lambda>p. (fst a @ fst p, snd p))\n                            (fff (snd a) b))\n                       (return_spmf ([], snd x)) es \\<bind>\n                      (\\<lambda>y.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (fst x @ fst y) \\<bind>\n                          (\\<lambda>x. return_spmf (f x (snd y))))", "apply (simp add: split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> set_spmf (fff s_event e); x = (a, b)\\<rbrakk>\n    \\<Longrightarrow> foldl_spmf\n                       (\\<lambda>p event.\n                           map_spmf (\\<lambda>pa. (fst p @ fst pa, snd pa))\n                            (fff (snd p) event))\n                       (return_spmf (a, b)) es \\<bind>\n                      (\\<lambda>p.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (fst p) \\<bind>\n                          (\\<lambda>s_core'.\n                              return_spmf (f s_core' (snd p)))) =\n                      foldl_spmf\n                       (\\<lambda>a b.\n                           map_spmf (\\<lambda>p. (fst a @ fst p, snd p))\n                            (fff (snd a) b))\n                       (return_spmf ([], b)) es \\<bind>\n                      (\\<lambda>y.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (a @ fst y) \\<bind>\n                          (\\<lambda>x. return_spmf (f x (snd y))))", "apply (subst bind_foldl_spmf_pair_append[where c=\"[]\" and a=a and b=b and es=es, simplified apfst_def map_prod_def append_Nil2 split_def id_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> set_spmf (fff s_event e); x = (a, b)\\<rbrakk>\n    \\<Longrightarrow> foldl_spmf\n                       (\\<lambda>p e.\n                           map_spmf (\\<lambda>pa. (fst p @ fst pa, snd pa))\n                            (fff (snd p) e))\n                       (return_spmf ([], b)) es \\<bind>\n                      (\\<lambda>p.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (a @ fst p) \\<bind>\n                          (\\<lambda>s_core'.\n                              return_spmf (f s_core' (snd p)))) =\n                      foldl_spmf\n                       (\\<lambda>a b.\n                           map_spmf (\\<lambda>p. (fst a @ fst p, snd p))\n                            (fff (snd a) b))\n                       (return_spmf ([], b)) es \\<bind>\n                      (\\<lambda>y.\n                          foldl_spmf ggg (return_spmf s_core)\n                           (a @ fst y) \\<bind>\n                          (\\<lambda>x. return_spmf (f x (snd y))))", "by simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (oevents, s_event) \\<Rightarrow>\n         \\<lambda>event.\n            map_spmf (map_prod ((@) oevents) id) (fff s_event event))\n   (return_spmf ([], s_event)) (e # es) \\<bind>\n  (\\<lambda>a.\n      case a of\n      (oevents, s_event') \\<Rightarrow>\n        foldl_spmf ggg (return_spmf s_core) oevents \\<bind>\n        (\\<lambda>s_core'. return_spmf (f s_core' s_event'))) =\n  foldl_spmf\n   (\\<lambda>a.\n       case a of\n       (s_event, s_core) \\<Rightarrow>\n         \\<lambda>event.\n            fff s_event event \\<bind>\n            (\\<lambda>a.\n                case a of\n                (oevents, s_event') \\<Rightarrow>\n                  map_spmf (Pair s_event')\n                   (foldl_spmf ggg (return_spmf s_core) oevents)))\n   (return_spmf (s_event, s_core)) (e # es) \\<bind>\n  (\\<lambda>a.\n      case a of\n      (s_event', s_core') \\<Rightarrow> return_spmf (f s_core' s_event'))\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>pauses\\<close>"], ["", "primrec pauses :: \"'a list \\<Rightarrow> (unit, 'a, 'b) gpv\" where\n  \"pauses [] = Done ()\"\n| \"pauses (x # xs) = Pause x (\\<lambda>_. pauses xs)\""], ["", "lemma WT_gpv_pauses [WT_intro]:\n  \"\\<I> \\<turnstile>g pauses xs \\<surd>\" if \"set xs \\<subseteq> outs_\\<I> \\<I>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>g pauses xs \\<surd>", "using that"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> outs_\\<I> \\<I>\n\ngoal (1 subgoal):\n 1. \\<I> \\<turnstile>g pauses xs \\<surd>", "by(induction xs) auto"], ["", "lemma exec_gpv_pauses:\n  \"exec_gpv callee (pauses xs) s =\n   map_spmf (Pair ()) (foldl_spmf (map_fun id (map_fun id (map_spmf snd)) callee) (return_spmf s) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_gpv callee (pauses xs) s =\n    map_spmf (Pair ())\n     (foldl_spmf (map_fun id (map_fun id (map_spmf snd)) callee)\n       (return_spmf s) xs)", "by(induction xs arbitrary: s)(simp_all add: split_def foldl_spmf_Cons' map_bind_spmf bind_map_spmf o_def del: foldl_spmf_Cons)"], ["", "end"]]}