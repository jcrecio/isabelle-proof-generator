{"file_name": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations/Std_to_Inca_simulation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations", "problem_names": ["lemma rel_fundefs_Some1:\n  assumes \"rel_fundefs f g\" and \"f x = Some y\"\n  shows \"\\<exists>z. g x = Some z \\<and> rel_fundef norm_eq y z\"", "lemma rel_fundefs_Some2:\n  assumes \"rel_fundefs f g\" and \"g x = Some y\"\n  shows \"\\<exists>z. f x = Some z \\<and> rel_fundef norm_eq z y\"", "lemma rel_fundef_body_nth:\n  assumes \"rel_fundef norm_eq fd1 fd2\" and \"pc < length (body fd1)\"\n  shows \"body fd1 ! pc = norm_instr (body fd2 ! pc)\"", "lemma rel_fundef_rewrite_body:\n  assumes\n    \"rel_fundef norm_eq fd1 fd2\" and\n    \"norm_instr (body fd2 ! pc) = norm_instr instr\"\n  shows \"rel_fundef norm_eq fd1 (rewrite_fundef_body fd2 pc instr)\"", "lemma rel_fundefs_rewrite:\n  assumes\n    rel_F1_F2: \"rel_fundefs (Fstd_get F1) (Finca_get F2)\" and\n    F2_get_f: \"Finca_get F2 f = Some fd2\" and\n    F2_add_f: \"Finca_add F2 f (rewrite_fundef_body fd2 pc instr) = F2'\" and\n    norm_eq: \"norm_instr (body fd2 ! pc) = norm_instr instr\"\n  shows \"rel_fundefs (Fstd_get F1) (Finca_get F2')\"", "lemma backward_lockstep_simulation:\n  assumes \"Sinca.step s2 s2'\" and \"s1 \\<sim> s2\"\n  shows \"\\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'\"", "lemma match_final_backward:\n  \"s1 \\<sim> s2 \\<Longrightarrow> Sinca.final s2 \\<Longrightarrow> Sstd.final s1\"", "lemma forward_lockstep_simulation:\n  assumes \"Sstd.step s1 s1'\" and \"s1 \\<sim> s2\"\n  shows \"\\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'\"", "lemma forward_match_final:\n  \"s1 \\<sim> s2 \\<Longrightarrow> Sstd.final s1 \\<Longrightarrow> Sinca.final s2\""], "translations": [["", "lemma rel_fundefs_Some1:\n  assumes \"rel_fundefs f g\" and \"f x = Some y\"\n  shows \"\\<exists>z. g x = Some z \\<and> rel_fundef norm_eq y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       g x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) y z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       g x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) y z", "from assms(1)"], ["proof (chain)\npicking this:\n  rel_fundefs f g", "have \"rel_option (rel_fundef norm_eq) (f x) (g x)\""], ["proof (prove)\nusing this:\n  rel_fundefs f g\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "unfolding rel_fundefs_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "by simp"], ["proof (state)\nthis:\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       g x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) y z", "with assms(2)"], ["proof (chain)\npicking this:\n  f x = Some y\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "show ?thesis"], ["proof (prove)\nusing this:\n  f x = Some y\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       g x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) y z", "by (simp add: option_rel_Some1)"], ["proof (state)\nthis:\n  \\<exists>z.\n     g x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) y z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_fundefs_Some2:\n  assumes \"rel_fundefs f g\" and \"g x = Some y\"\n  shows \"\\<exists>z. f x = Some z \\<and> rel_fundef norm_eq z y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       f x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) z y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       f x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) z y", "from assms(1)"], ["proof (chain)\npicking this:\n  rel_fundefs f g", "have \"rel_option (rel_fundef norm_eq) (f x) (g x)\""], ["proof (prove)\nusing this:\n  rel_fundefs f g\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "unfolding rel_fundefs_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "by simp"], ["proof (state)\nthis:\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       f x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) z y", "with assms(2)"], ["proof (chain)\npicking this:\n  g x = Some y\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)", "show ?thesis"], ["proof (prove)\nusing this:\n  g x = Some y\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (f x) (g x)\n\ngoal (1 subgoal):\n 1. \\<exists>z.\n       f x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) z y", "by (simp add: option_rel_Some2)"], ["proof (state)\nthis:\n  \\<exists>z.\n     f x = Some z \\<and> rel_fundef (\\<lambda>x y. x = norm_instr y) z y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_fundef_body_nth:\n  assumes \"rel_fundef norm_eq fd1 fd2\" and \"pc < length (body fd1)\"\n  shows \"body fd1 ! pc = norm_instr (body fd2 ! pc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. body fd1 ! pc = norm_instr (body fd2 ! pc)", "using assms"], ["proof (prove)\nusing this:\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  pc < length (body fd1)\n\ngoal (1 subgoal):\n 1. body fd1 ! pc = norm_instr (body fd2 ! pc)", "by (auto dest: list_all2_nthD simp: fundef.rel_sel)"], ["", "lemma rel_fundef_rewrite_body:\n  assumes\n    \"rel_fundef norm_eq fd1 fd2\" and\n    \"norm_instr (body fd2 ! pc) = norm_instr instr\"\n  shows \"rel_fundef norm_eq fd1 (rewrite_fundef_body fd2 pc instr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n     (rewrite_fundef_body fd2 pc instr)", "using assms(1)"], ["proof (prove)\nusing this:\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n     (rewrite_fundef_body fd2 pc instr)", "proof (cases rule: fundef.rel_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a y1a y2a.\n       \\<lbrakk>fd1 = Fundef x1a x2a; fd2 = Fundef y1a y2a;\n        list_all2 (\\<lambda>x y. x = norm_instr y) x1a y1a;\n        x2a = y2a\\<rbrakk>\n       \\<Longrightarrow> rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n                          (rewrite_fundef_body fd2 pc instr)", "case (Fundef xs ar' ys ar)"], ["proof (state)\nthis:\n  fd1 = Fundef xs ar'\n  fd2 = Fundef ys ar\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs ys\n  ar' = ar\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a y1a y2a.\n       \\<lbrakk>fd1 = Fundef x1a x2a; fd2 = Fundef y1a y2a;\n        list_all2 (\\<lambda>x y. x = norm_instr y) x1a y1a;\n        x2a = y2a\\<rbrakk>\n       \\<Longrightarrow> rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n                          (rewrite_fundef_body fd2 pc instr)", "hence \"length xs = length ys\""], ["proof (prove)\nusing this:\n  fd1 = Fundef xs ar'\n  fd2 = Fundef ys ar\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs ys\n  ar' = ar\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by (simp add: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a y1a y2a.\n       \\<lbrakk>fd1 = Fundef x1a x2a; fd2 = Fundef y1a y2a;\n        list_all2 (\\<lambda>x y. x = norm_instr y) x1a y1a;\n        x2a = y2a\\<rbrakk>\n       \\<Longrightarrow> rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n                          (rewrite_fundef_body fd2 pc instr)", "hence \"length xs = length (rewrite ys pc instr)\""], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. length xs = length (rewrite ys pc instr)", "by simp"], ["proof (state)\nthis:\n  length xs = length (rewrite ys pc instr)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a y1a y2a.\n       \\<lbrakk>fd1 = Fundef x1a x2a; fd2 = Fundef y1a y2a;\n        list_all2 (\\<lambda>x y. x = norm_instr y) x1a y1a;\n        x2a = y2a\\<rbrakk>\n       \\<Longrightarrow> rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n                          (rewrite_fundef_body fd2 pc instr)", "hence \"list_all2 norm_eq xs (rewrite ys pc instr)\""], ["proof (prove)\nusing this:\n  length xs = length (rewrite ys pc instr)\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>x y. x = norm_instr y) xs (rewrite ys pc instr)", "proof (elim list_all2_all_nthI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length xs \\<Longrightarrow>\n       xs ! n = norm_instr (rewrite ys pc instr ! n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length xs \\<Longrightarrow>\n       xs ! n = norm_instr (rewrite ys pc instr ! n)", "assume \"n < length xs\""], ["proof (state)\nthis:\n  n < length xs\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length xs \\<Longrightarrow>\n       xs ! n = norm_instr (rewrite ys pc instr ! n)", "hence \"n < length ys\""], ["proof (prove)\nusing this:\n  n < length xs\n\ngoal (1 subgoal):\n 1. n < length ys", "by (simp add: \\<open>length xs = length ys\\<close>)"], ["proof (state)\nthis:\n  n < length ys\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length xs \\<Longrightarrow>\n       xs ! n = norm_instr (rewrite ys pc instr ! n)", "thus \"xs ! n = norm_instr (rewrite ys pc instr ! n)\""], ["proof (prove)\nusing this:\n  n < length ys\n\ngoal (1 subgoal):\n 1. xs ! n = norm_instr (rewrite ys pc instr ! n)", "using list_all2_nthD[OF \\<open>list_all2 norm_eq xs ys\\<close> \\<open>n < length xs\\<close>, symmetric]"], ["proof (prove)\nusing this:\n  n < length ys\n  norm_instr (ys ! n) = xs ! n\n\ngoal (1 subgoal):\n 1. xs ! n = norm_instr (rewrite ys pc instr ! n)", "using assms(2)[unfolded Fundef(2), simplified]"], ["proof (prove)\nusing this:\n  n < length ys\n  norm_instr (ys ! n) = xs ! n\n  norm_instr (ys ! pc) = norm_instr instr\n\ngoal (1 subgoal):\n 1. xs ! n = norm_instr (rewrite ys pc instr ! n)", "by (cases \"pc = n\"; simp)"], ["proof (state)\nthis:\n  xs ! n = norm_instr (rewrite ys pc instr ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs (rewrite ys pc instr)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a y1a y2a.\n       \\<lbrakk>fd1 = Fundef x1a x2a; fd2 = Fundef y1a y2a;\n        list_all2 (\\<lambda>x y. x = norm_instr y) x1a y1a;\n        x2a = y2a\\<rbrakk>\n       \\<Longrightarrow> rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n                          (rewrite_fundef_body fd2 pc instr)", "thus ?thesis"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs (rewrite ys pc instr)\n\ngoal (1 subgoal):\n 1. rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n     (rewrite_fundef_body fd2 pc instr)", "using Fundef"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs (rewrite ys pc instr)\n  fd1 = Fundef xs ar'\n  fd2 = Fundef ys ar\n  list_all2 (\\<lambda>x y. x = norm_instr y) xs ys\n  ar' = ar\n\ngoal (1 subgoal):\n 1. rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n     (rewrite_fundef_body fd2 pc instr)", "by simp"], ["proof (state)\nthis:\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1\n   (rewrite_fundef_body fd2 pc instr)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rel_fundefs_rewrite:\n  assumes\n    rel_F1_F2: \"rel_fundefs (Fstd_get F1) (Finca_get F2)\" and\n    F2_get_f: \"Finca_get F2 f = Some fd2\" and\n    F2_add_f: \"Finca_add F2 f (rewrite_fundef_body fd2 pc instr) = F2'\" and\n    norm_eq: \"norm_instr (body fd2 ! pc) = norm_instr instr\"\n  shows \"rel_fundefs (Fstd_get F1) (Finca_get F2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fundefs (Fstd_get F1) (Finca_get F2')", "unfolding rel_fundefs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y))\n        (Fstd_get F1 x) (Finca_get F2' x)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y))\n        (Fstd_get F1 x) (Finca_get F2' x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y))\n        (Fstd_get F1 x) (Finca_get F2' x)", "show \"rel_option (rel_fundef norm_eq) (Fstd_get F1 x) (Finca_get F2' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "proof (cases \"x = f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)\n 2. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "case True"], ["proof (state)\nthis:\n  x = f\n\ngoal (2 subgoals):\n 1. x = f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)\n 2. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "then"], ["proof (chain)\npicking this:\n  x = f", "have F2'_get_x: \"Finca_get F2' x = Some (rewrite_fundef_body fd2 pc instr)\""], ["proof (prove)\nusing this:\n  x = f\n\ngoal (1 subgoal):\n 1. Finca_get F2' x = Some (rewrite_fundef_body fd2 pc instr)", "using F2_add_f"], ["proof (prove)\nusing this:\n  x = f\n  Finca_add F2 f (rewrite_fundef_body fd2 pc instr) = F2'\n\ngoal (1 subgoal):\n 1. Finca_get F2' x = Some (rewrite_fundef_body fd2 pc instr)", "by auto"], ["proof (state)\nthis:\n  Finca_get F2' x = Some (rewrite_fundef_body fd2 pc instr)\n\ngoal (2 subgoals):\n 1. x = f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)\n 2. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2 F2_get_f]"], ["proof (prove)\nusing this:\n  \\<exists>z.\n     Fstd_get F1 f = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z fd2\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (2 subgoals):\n 1. x = f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)\n 2. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "unfolding F2'_get_x option_rel_Some2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. \\<exists>x'.\n       Fstd_get F1 x = Some x' \\<and>\n       rel_fundef (\\<lambda>x y. x = norm_instr y) x'\n        (rewrite_fundef_body fd2 pc instr)", "using True rel_fundef_rewrite_body[OF _ norm_eq]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  x = f\n  rel_fundef (\\<lambda>x y. x = norm_instr y) ?fd1.0 fd2 \\<Longrightarrow>\n  rel_fundef (\\<lambda>x y. x = norm_instr y) ?fd1.0\n   (rewrite_fundef_body fd2 pc instr)\n\ngoal (1 subgoal):\n 1. \\<exists>x'.\n       Fstd_get F1 x = Some x' \\<and>\n       rel_fundef (\\<lambda>x y. x = norm_instr y) x'\n        (rewrite_fundef_body fd2 pc instr)", "by auto"], ["proof (state)\nthis:\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n   (Finca_get F2' x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "case False"], ["proof (state)\nthis:\n  x \\<noteq> f\n\ngoal (1 subgoal):\n 1. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> f", "have \"Finca_get F2' x = Finca_get F2 x\""], ["proof (prove)\nusing this:\n  x \\<noteq> f\n\ngoal (1 subgoal):\n 1. Finca_get F2' x = Finca_get F2 x", "using F2_add_f"], ["proof (prove)\nusing this:\n  x \\<noteq> f\n  Finca_add F2 f (rewrite_fundef_body fd2 pc instr) = F2'\n\ngoal (1 subgoal):\n 1. Finca_get F2' x = Finca_get F2 x", "by auto"], ["proof (state)\nthis:\n  Finca_get F2' x = Finca_get F2 x\n\ngoal (1 subgoal):\n 1. x \\<noteq> f \\<Longrightarrow>\n    rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2' x = Finca_get F2 x", "show ?thesis"], ["proof (prove)\nusing this:\n  Finca_get F2' x = Finca_get F2 x\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "using rel_F1_F2 rel_fundefs_def"], ["proof (prove)\nusing this:\n  Finca_get F2' x = Finca_get F2 x\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  rel_fundefs ?f ?g =\n  (\\<forall>x.\n      rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (?f x)\n       (?g x))\n\ngoal (1 subgoal):\n 1. rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n     (Finca_get F2' x)", "by fastforce"], ["proof (state)\nthis:\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n   (Finca_get F2' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_option (rel_fundef (\\<lambda>x y. x = norm_instr y)) (Fstd_get F1 x)\n   (Finca_get F2' x)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Simulation relation\\<close>"], ["", "inductive match (infix \"\\<sim>\" 55) where\n  \"rel_fundefs (Fstd_get F1) (Finca_get F2) \\<Longrightarrow> (State F1 H st) \\<sim> (State F2 H st)\""], ["", "section \\<open>Backward simulation\\<close>"], ["", "lemma backward_lockstep_simulation:\n  assumes \"Sinca.step s2 s2'\" and \"s1 \\<sim> s2\"\n  shows \"\\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'", "from assms(2)"], ["proof (chain)\npicking this:\n  s1 \\<sim> s2", "obtain F1 F2 H st where\n    s1_def: \"s1 = State F1 H st\" and\n    s2_def: \"s2 = State F2 H st\" and\n    rel_F1_F2: \"rel_fundefs (Fstd_get F1) (Finca_get F2)\""], ["proof (prove)\nusing this:\n  s1 \\<sim> s2\n\ngoal (1 subgoal):\n 1. (\\<And>F1 H st F2.\n        \\<lbrakk>s1 = State F1 H st; s2 = State F2 H st;\n         rel_fundefs (Fstd_get F1) (Finca_get F2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: match.cases)"], ["proof (state)\nthis:\n  s1 = State F1 H st\n  s2 = State F2 H st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'", "from assms(1)"], ["proof (chain)\npicking this:\n  Sinca.step s2 s2'", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step s2 s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'", "unfolding s1_def s2_def"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st) s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. Sstd.step (State F1 H st) s1' \\<and> s1' \\<sim> s2'", "proof (induction \"State F2 H st\" s2' rule: Sinca.step.induct)"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 10. \\<And>f fd pc n d \\<Sigma> sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICJump n; is_false d;\n         Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\nA total of 12 subgoals...", "case (step_push f fd2 pc d \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (12 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 10. \\<And>f fd pc n d \\<Sigma> sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICJump n; is_false d;\n         Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (12 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 10. \\<And>f fd pc n d \\<Sigma> sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICJump n; is_false d;\n         Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\nA total of 12 subgoals...", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "using step_push \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_push simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (11 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 10. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>;\n         frame\\<^sub>f = Frame f pc \\<Sigma>;\n         frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n         frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H\n                              (frame\\<^sub>g # frame\\<^sub>f # sta)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 10. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>;\n         frame\\<^sub>f = Frame f pc \\<Sigma>;\n         frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n         frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H\n                              (frame\\<^sub>g # frame\\<^sub>f # sta)\nA total of 11 subgoals...", "case (step_pop f fd2 pc d \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (11 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 10. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>;\n         frame\\<^sub>f = Frame f pc \\<Sigma>;\n         frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n         frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H\n                              (frame\\<^sub>g # frame\\<^sub>f # sta)\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (11 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 9. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 10. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n        \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n         body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>;\n         frame\\<^sub>f = Frame f pc \\<Sigma>;\n         frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n         frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim>\n                             State F2 H\n                              (frame\\<^sub>g # frame\\<^sub>f # sta)\nA total of 11 subgoals...", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))", "using step_pop \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro!: Sstd.step_pop simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (10 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 9. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 10. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n        frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n        \\<lbrakk>Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>\\<^sub>f;\n         pc\\<^sub>g = length (body gd);\n         frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n         frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n         frame\\<^sub>f' =\n         Frame f (Suc pc\\<^sub>f)\n          (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n         frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 9. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 10. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n        frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n        \\<lbrakk>Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>\\<^sub>f;\n         pc\\<^sub>g = length (body gd);\n         frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n         frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n         frame\\<^sub>f' =\n         Frame f (Suc pc\\<^sub>f)\n          (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n         frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_load f fd2 pc x y d \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n\ngoal (10 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 9. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 10. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n        frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n        \\<lbrakk>Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>\\<^sub>f;\n         pc\\<^sub>g = length (body gd);\n         frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n         frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n         frame\\<^sub>f' =\n         Frame f (Suc pc\\<^sub>f)\n          (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n         frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (10 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta)\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 8. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 9. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 10. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n        frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n        \\<lbrakk>Finca_get F2 g = Some gd;\n         arity gd \\<le> length \\<Sigma>\\<^sub>f;\n         pc\\<^sub>g = length (body gd);\n         frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n         frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n         frame\\<^sub>f' =\n         Frame f (Suc pc\\<^sub>f)\n          (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n         frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'.\n                             Sstd.step (State F1 H st) s1' \\<and>\n                             s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "using step_load \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_load simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (9 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_store f fd2 pc x y d H' \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n\ngoal (9 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (9 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H' (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "let ?s1' = \"State F1 H' (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))", "using step_store \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro!: Sstd.step_store simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st) (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st) (State F1 H' (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_op f fd2 pc op ar \\<Sigma> x st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None;\n        \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using step_op \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = None\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_op simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_op_inl f fd2 pc op ar \\<Sigma> opinl x F2' st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> opinl x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl;\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f (rewrite_fundef_body fd pc (IOpInl opinl)) = F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using step_op_inl \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using  Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct Sinca.\\<II>\\<nn>\\<ll>_invertible"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n  \\<II>\\<nn>\\<ll> ?op ?xs = Some ?opinl \\<Longrightarrow>\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl = ?op\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_op simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using step_op_inl Sinca.\\<II>\\<nn>\\<ll>_invertible"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<nn>\\<ll> op (take ar \\<Sigma>) = Some opinl\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl)) = F2'\n  Frame f pc \\<Sigma> # st' = st\n  \\<II>\\<nn>\\<ll> ?op ?xs = Some ?opinl \\<Longrightarrow>\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl = ?op\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro!: match.intros rel_fundefs_rewrite[OF rel_F1_F2])"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim>\n       State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_op_inl_hit f fd2 pc opinl ar \\<Sigma> x st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using step_op_inl_hit \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close> Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_op simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_op_inl_miss f fd2 pc opinl ar \\<Sigma> x F' st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc opinl ar \\<Sigma> x F' sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = IOpInl opinl;\n        \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar;\n        ar \\<le> length \\<Sigma>;\n        \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>);\n        \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x;\n        Finca_add F2 f\n         (rewrite_fundef_body fd pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n        F';\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F' H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using step_op_inl_miss \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close> Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sstd.step_op simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using step_op_inl_miss rel_fundefs_rewrite[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = IOpInl opinl\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl) = ar\n  ar \\<le> length \\<Sigma>\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> opinl (take ar \\<Sigma>)\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> opinl (take ar \\<Sigma>) = x\n  Finca_add F2 f\n   (rewrite_fundef_body fd2 pc\n     (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> opinl))) =\n  F'\n  Frame f pc \\<Sigma> # st' = st\n  \\<lbrakk>Finca_get F2 ?f = Some ?fd2.0;\n   Finca_add F2 ?f (rewrite_fundef_body ?fd2.0 ?pc ?instr) = ?F2';\n   norm_instr (body ?fd2.0 ! ?pc) = norm_instr ?instr\\<rbrakk>\n  \\<Longrightarrow> rel_fundefs (Fstd_get F1) (Finca_get ?F2')\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F' H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_cjump_true f fd2 pc n d \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (Frame f n \\<Sigma> # sta)\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "let ?s1' = \"State F1 H (Frame f n \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))", "using step_cjump_true \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))", "by (auto intro!: Sstd.step_cjump_true simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f n \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f n \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f n \\<Sigma> # st'))\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f n \\<Sigma> # st')\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_cjump_false f fd2 pc n d \\<Sigma> st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (Frame f (Suc pc) \\<Sigma> # sta)\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))", "using step_cjump_false \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro!: Sstd.step_cjump_false simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st) (State F1 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_fun_call f fd2 pc g gd2 \\<Sigma> frame\\<^sub>f frame\\<^sub>g st')"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and rel_fd1_fd2: \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step_fun_call rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "obtain gd1 where \"Fstd_get F1 g = Some gd1\" and rel_gd1_gd2: \"rel_fundef norm_eq gd1 gd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gd1.\n        \\<lbrakk>Fstd_get F1 g = Some gd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step_fun_call rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>gd1.\n        \\<lbrakk>Fstd_get F1 g = Some gd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 g = Some gd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "have pc_in_range: \"pc < length (body fd1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < length (body fd1)", "using \\<open>pc < length (body fd2)\\<close> rel_fundef_body_length[OF rel_fd1_fd2]"], ["proof (prove)\nusing this:\n  pc < length (body fd2)\n  length (body fd1) = length (body fd2)\n\ngoal (1 subgoal):\n 1. pc < length (body fd1)", "by simp"], ["proof (state)\nthis:\n  pc < length (body fd1)\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "have arity_gd1_gd2: \"arity gd2 = arity gd1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd2 = arity gd1", "using rel_fundef_arities[OF rel_gd1_gd2, symmetric]"], ["proof (prove)\nusing this:\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. arity gd2 = arity gd1", "."], ["proof (state)\nthis:\n  arity gd2 = arity gd1\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Finca_get F2 f = Some fd; pc < length (body fd);\n        body fd ! pc = Inca.instr.ICall g; Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim>\n                            State F2 H (frame\\<^sub>g # frame\\<^sub>f # sta)\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "let ?\\<Sigma>g = \"take (arity gd1) \\<Sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "let ?s1' = \"State F1 H (Frame g 0 ?\\<Sigma>g # Frame f pc \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using step_fun_call pc_in_range"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  pc < length (body fd1)\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using \\<open>Fstd_get F1 f = Some fd1\\<close> \\<open>Fstd_get F1 g = Some gd1\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  pc < length (body fd1)\n  Fstd_get F1 f = Some fd1\n  Fstd_get F1 g = Some gd1\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using rel_fundef_body_nth[OF rel_fd1_fd2 pc_in_range] arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  pc < length (body fd1)\n  Fstd_get F1 f = Some fd1\n  Fstd_get F1 g = Some gd1\n  body fd1 ! pc = norm_instr (body fd2 ! pc)\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "by (auto intro: Sstd.step_fun_call)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) #\n      Frame f pc \\<Sigma> # st') \\<sim>\n    State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "using step_fun_call rel_F1_F2 arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd2) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) #\n      Frame f pc \\<Sigma> # st') \\<sim>\n    State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H\n   (Frame g 0 (take (arity gd1) \\<Sigma>) #\n    Frame f pc \\<Sigma> # st') \\<sim>\n  State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n  State F1 H\n   (Frame g 0 (take (arity gd1) \\<Sigma>) #\n    Frame f pc \\<Sigma> # st') \\<sim>\n  State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame g 0 (take (arity gd1) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n  State F1 H\n   (Frame g 0 (take (arity gd1) \\<Sigma>) #\n    Frame f pc \\<Sigma> # st') \\<sim>\n  State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')", "by auto"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (frame\\<^sub>g # frame\\<^sub>f # st')\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "case (step_fun_end g gd2 \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' st')"], ["proof (state)\nthis:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st", "obtain gd1 where \"Fstd_get F1 g = Some gd1\" and rel_gd1_gd2: \"rel_fundef norm_eq gd1 gd2\""], ["proof (prove)\nusing this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>gd1.\n        \\<lbrakk>Fstd_get F1 g = Some gd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some2[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  Finca_get F2 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Fstd_get F1 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>gd1.\n        \\<lbrakk>Fstd_get F1 g = Some gd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Fstd_get F1 g = Some gd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "have arity_gd1_gd2: \"arity gd2 = arity gd1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd2 = arity gd1", "using rel_fundef_arities[OF rel_gd1_gd2, symmetric]"], ["proof (prove)\nusing this:\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. arity gd2 = arity gd1", "."], ["proof (state)\nthis:\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Finca_get F2 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            Sstd.step (State F1 H st) s1' \\<and>\n                            s1' \\<sim> State F2 H (frame\\<^sub>f' # sta)", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "let ?s1' = \"State F1 H (Frame f (Suc pc\\<^sub>f) (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n        st'))", "using step_fun_end \\<open>Fstd_get F1 g = Some gd1\\<close>"], ["proof (prove)\nusing this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  Fstd_get F1 g = Some gd1\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n        st'))", "using rel_fundef_body_length[OF rel_gd1_gd2] arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  Fstd_get F1 g = Some gd1\n  length (body gd1) = length (body gd2)\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. Sstd.step (State F1 H st)\n     (State F1 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n        st'))", "by (auto intro: Sstd.step_fun_end)"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "moreover"], ["proof (state)\nthis:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st') \\<sim>\n    State F2 H (frame\\<^sub>f' # st')", "using step_fun_end rel_F1_F2 arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Finca_get F2 g = Some gd2\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd2)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  arity gd2 = arity gd1\n\ngoal (1 subgoal):\n 1. State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st') \\<sim>\n    State F2 H (frame\\<^sub>f' # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n    st') \\<sim>\n  State F2 H (frame\\<^sub>f' # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "ultimately"], ["proof (chain)\npicking this:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st'))\n  State F1 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n    st') \\<sim>\n  State F2 H (frame\\<^sub>f' # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st)\n   (State F1 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n      st'))\n  State F1 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f) #\n    st') \\<sim>\n  State F2 H (frame\\<^sub>f' # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s1'.\n       Sstd.step (State F1 H st) s1' \\<and>\n       s1' \\<sim> State F2 H (frame\\<^sub>f' # st')", "by auto"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (frame\\<^sub>f' # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'.\n     Sstd.step (State F1 H st) s1' \\<and>\n     s1' \\<sim> State F2 H (frame\\<^sub>f' # st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s1'. Sstd.step s1 s1' \\<and> s1' \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma match_final_backward:\n  \"s1 \\<sim> s2 \\<Longrightarrow> Sinca.final s2 \\<Longrightarrow> Sstd.final s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<sim> s2; Sinca.final s2\\<rbrakk>\n    \\<Longrightarrow> Sstd.final s1", "proof (induction s1 s2 rule: match.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sinca.final (State F2 H st)\\<rbrakk>\n       \\<Longrightarrow> Sstd.final (State F1 H st)", "case (1 F1 F2 H st)"], ["proof (state)\nthis:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sinca.final (State F2 H st)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sinca.final (State F2 H st)\\<rbrakk>\n       \\<Longrightarrow> Sstd.final (State F1 H st)", "then"], ["proof (chain)\npicking this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sinca.final (State F2 H st)", "obtain f fd2 pc \\<Sigma> where\n    st_def: \"st = [Frame f pc \\<Sigma>]\" and\n    \"Finca_get F2 f = Some fd2\" and\n    pc_def: \"pc = length (body fd2)\""], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sinca.final (State F2 H st)\n\ngoal (1 subgoal):\n 1. (\\<And>f pc \\<Sigma> fd2.\n        \\<lbrakk>st = [Frame f pc \\<Sigma>]; Finca_get F2 f = Some fd2;\n         pc = length (body fd2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: Sinca.final.cases)"], ["proof (state)\nthis:\n  st = [Frame f pc \\<Sigma>]\n  Finca_get F2 f = Some fd2\n  pc = length (body fd2)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sinca.final (State F2 H st)\\<rbrakk>\n       \\<Longrightarrow> Sstd.final (State F1 H st)", "then"], ["proof (chain)\npicking this:\n  st = [Frame f pc \\<Sigma>]\n  Finca_get F2 f = Some fd2\n  pc = length (body fd2)", "obtain fd1 where \"Fstd_get F1 f = Some fd1\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  st = [Frame f pc \\<Sigma>]\n  Finca_get F2 f = Some fd2\n  pc = length (body fd2)\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1 rel_fundefs_Some2"], ["proof (prove)\nusing this:\n  st = [Frame f pc \\<Sigma>]\n  Finca_get F2 f = Some fd2\n  pc = length (body fd2)\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sinca.final (State F2 H st)\n  \\<lbrakk>rel_fundefs ?f ?g; ?g ?x = Some ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       ?f ?x = Some z \\<and>\n                       rel_fundef (\\<lambda>x y. x = norm_instr y) z ?y\n\ngoal (1 subgoal):\n 1. (\\<And>fd1.\n        \\<lbrakk>Fstd_get F1 f = Some fd1;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sinca.final (State F2 H st)\\<rbrakk>\n       \\<Longrightarrow> Sstd.final (State F1 H st)", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2", "show ?case"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.final (State F1 H st)", "unfolding st_def"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sstd.final (State F1 H [Frame f pc \\<Sigma>])", "using pc_def rel_fundef_body_length[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  pc = length (body fd2)\n  length (body fd1) = length (body fd2)\n\ngoal (1 subgoal):\n 1. Sstd.final (State F1 H [Frame f pc \\<Sigma>])", "by (auto intro: Sstd.final.intros)"], ["proof (state)\nthis:\n  Sstd.final (State F1 H st)\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale std_inca_simulation:\n  backward_simulation Sstd.step Sinca.step Sstd.final Sinca.final \"\\<lambda>_ _. False\" \"\\<lambda>_. match\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backward_simulation Sstd.step Sinca.step Sstd.final Sinca.final\n     (\\<lambda>_ _. False) (\\<lambda>_. (\\<sim>))", "using match_final_backward backward_lockstep_simulation\n    lockstep_to_plus_backward_simulation[of match Sinca.step Sstd.step]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.0 \\<sim> ?s2.0; Sinca.final ?s2.0\\<rbrakk>\n  \\<Longrightarrow> Sstd.final ?s1.0\n  \\<lbrakk>Sinca.step ?s2.0 ?s2'; ?s1.0 \\<sim> ?s2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'. Sstd.step ?s1.0 s1' \\<and> s1' \\<sim> ?s2'\n  \\<lbrakk>\\<And>s1 s2 s2'.\n              \\<lbrakk>s1 \\<sim> s2; Sinca.step s2 s2'\\<rbrakk>\n              \\<Longrightarrow> \\<exists>s1'.\n                                   Sstd.step s1 s1' \\<and> s1' \\<sim> s2';\n   ?s1.0 \\<sim> ?s2.0; Sinca.step ?s2.0 ?s2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'.\n                       Sstd.step\\<^sup>+\\<^sup>+ ?s1.0 s1' \\<and>\n                       s1' \\<sim> ?s2'\n\ngoal (1 subgoal):\n 1. backward_simulation Sstd.step Sinca.step Sstd.final Sinca.final\n     (\\<lambda>_ _. False) (\\<lambda>_. (\\<sim>))", "by unfold_locales auto"], ["", "section \\<open>Forward simulation\\<close>"], ["", "lemma forward_lockstep_simulation:\n  assumes \"Sstd.step s1 s1'\" and \"s1 \\<sim> s2\"\n  shows \"\\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'", "from assms(2)"], ["proof (chain)\npicking this:\n  s1 \\<sim> s2", "obtain F1 F2 H st where\n    s1_def: \"s1 = State F1 H st\" and\n    s2_def: \"s2 = State F2 H st\" and\n    rel_F1_F2: \"rel_fundefs (Fstd_get F1) (Finca_get F2)\""], ["proof (prove)\nusing this:\n  s1 \\<sim> s2\n\ngoal (1 subgoal):\n 1. (\\<And>F1 H st F2.\n        \\<lbrakk>s1 = State F1 H st; s2 = State F2 H st;\n         rel_fundefs (Fstd_get F1) (Finca_get F2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: match.cases)"], ["proof (state)\nthis:\n  s1 = State F1 H st\n  s2 = State F2 H st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'", "from assms(1)"], ["proof (chain)\npicking this:\n  Sstd.step s1 s1'", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sstd.step s1 s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'", "unfolding s1_def s2_def"], ["proof (prove)\nusing this:\n  Sstd.step (State F1 H st) s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. Sinca.step (State F2 H st) s2' \\<and> s1' \\<sim> s2'", "proof(induction \"State F1 H st\" s1' rule: Sstd.step.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_push f fd1 pc d \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (9 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (9 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPush d;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 7. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 8. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 9. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "using step_push \\<open>Finca_get F2 f = Some fd2\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPush d\n  Frame f pc \\<Sigma> # st' = st\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "by (auto intro!: Sinca.step_push elim!: norm_instr.elims simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_pop f fd1 pc d \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (8 subgoals):\n 1. \\<And>f fd pc d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IPop;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 6. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 7. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 8. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))", "using step_pop \\<open>Finca_get F2 f = Some fd2\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IPop\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro!: Sinca.step_pop elim!: norm_instr.elims simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_load f fd1 pc x y d \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (7 subgoals):\n 1. \\<And>f fd pc x y d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ILoad x; heap_get H (x, y) = Some d;\n        Frame f pc (y # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (d # \\<Sigma>) # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 5. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 6. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 7. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "using step_load \\<open>Finca_get F2 f = Some fd2\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ILoad x\n  heap_get H (x, y) = Some d\n  Frame f pc (y # \\<Sigma>) # st' = st\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))", "by (auto intro!: Sinca.step_load elim!: norm_instr.elims simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (d # \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (d # \\<Sigma>) # st') \\<sim> s2'\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_store f fd1 pc x y d H' \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (6 subgoals):\n 1. \\<And>f fd pc x y d H' \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IStore x; heap_add H (x, y) d = H';\n        Frame f pc (y # d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H'\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 4. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 5. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 6. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "let ?s1' = \"State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))", "using step_store \\<open>Finca_get F2 f = Some fd2\\<close> \\<open>rel_fundef norm_eq fd1 fd2\\<close>"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IStore x\n  heap_add H (x, y) d = H'\n  Frame f pc (y # d # \\<Sigma>) # st' = st\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro!: Sinca.step_store elim!: norm_instr.elims simp: rel_fundef_body_nth)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st) (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st) (State F2 H' (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H' (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H' (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_op f fd1 pc op ar \\<Sigma> x st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st", "obtain fd2 where F2_get_f[intro]: \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have pc_in_range[intro]: \"pc < length (body fd2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "using step_op \\<open>rel_fundef norm_eq fd1 fd2\\<close> rel_fundef_body_length"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  rel_fundef ?r ?fd1.0 ?fd2.0 \\<Longrightarrow>\n  length (body ?fd1.0) = length (body ?fd2.0)\n\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "by fastforce"], ["proof (state)\nthis:\n  pc < length (body fd2)\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have norm_body2: \"norm_instr (body fd2 ! pc) = Std.IOp op\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.IOp op", "using step_op rel_fundef_body_nth[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>, of pc]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  pc < length (body fd1) \\<Longrightarrow>\n  body fd1 ! pc = norm_instr (body fd2 ! pc)\n\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.IOp op", "by simp"], ["proof (state)\nthis:\n  norm_instr (body fd2 ! pc) = Std.instr.IOp op\n\ngoal (5 subgoals):\n 1. \\<And>f fd pc op ar \\<Sigma> x sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.IOp op; \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar;\n        ar \\<le> length \\<Sigma>; \\<OO>\\<pp> op (take ar \\<Sigma>) = x;\n        Frame f pc \\<Sigma> # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 3. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 4. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 5. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  norm_instr (body fd2 ! pc) = Std.instr.IOp op", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\nusing this:\n  norm_instr (body fd2 ! pc) = Std.instr.IOp op\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "proof (cases \"body fd2 ! pc\")"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x5.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IOp x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 8. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "case (IOp op')"], ["proof (state)\nthis:\n  body fd2 ! pc = Inca.instr.IOp op'\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x5.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IOp x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 8. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "then"], ["proof (chain)\npicking this:\n  body fd2 ! pc = Inca.instr.IOp op'", "have \"op' = op\""], ["proof (prove)\nusing this:\n  body fd2 ! pc = Inca.instr.IOp op'\n\ngoal (1 subgoal):\n 1. op' = op", "using norm_body2"], ["proof (prove)\nusing this:\n  body fd2 ! pc = Inca.instr.IOp op'\n  norm_instr (body fd2 ! pc) = Std.instr.IOp op\n\ngoal (1 subgoal):\n 1. op' = op", "by simp"], ["proof (state)\nthis:\n  op' = op\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x5.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IOp x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 8. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "proof (cases \"\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "case None"], ["proof (state)\nthis:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None\n\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "let ?s2' = \"State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "have \"?STEP ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using None IOp step_op \\<open>op' = op\\<close>"], ["proof (prove)\nusing this:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None\n  body fd2 ! pc = Inca.instr.IOp op'\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  op' = op\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro: Sinca.step_op)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "have \"?MATCH ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (2 subgoals):\n 1. \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = None \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "case (Some opinl)"], ["proof (state)\nthis:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some opinl\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "let ?fd2' = \"rewrite_fundef_body fd2 pc (IOpInl opinl)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "let ?s2' = \"State (Finca_add F2 f ?fd2') H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "have \"?STEP ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n       (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using Some IOp step_op \\<open>op' = op\\<close>"], ["proof (prove)\nusing this:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some opinl\n  body fd2 ! pc = Inca.instr.IOp op'\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  op' = op\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n       (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct Sinca.\\<II>\\<nn>\\<ll>_invertible"], ["proof (prove)\nusing this:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some opinl\n  body fd2 ! pc = Inca.instr.IOp op'\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  op' = op\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n  \\<II>\\<nn>\\<ll> ?op ?xs = Some ?opinl \\<Longrightarrow>\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl = ?op\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n       (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro: Sinca.step_op_inl)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "have \"?MATCH ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using Some IOp Sinca.\\<II>\\<nn>\\<ll>_invertible"], ["proof (prove)\nusing this:\n  \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some opinl\n  body fd2 ! pc = Inca.instr.IOp op'\n  \\<II>\\<nn>\\<ll> ?op ?xs = Some ?opinl \\<Longrightarrow>\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl = ?op\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro!: match.intros rel_fundefs_rewrite[OF rel_F1_F2])"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n   (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) = Some a \\<Longrightarrow>\n       \\<exists>s2'.\n          Sinca.step (State F2 H st) s2' \\<and>\n          State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n          s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n   (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n     (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State (Finca_add F2 f (rewrite_fundef_body fd2 pc (IOpInl opinl))) H\n   (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "case (IOpInl op')"], ["proof (state)\nthis:\n  body fd2 ! pc = IOpInl op'\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "then"], ["proof (chain)\npicking this:\n  body fd2 ! pc = IOpInl op'", "have \"\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\""], ["proof (prove)\nusing this:\n  body fd2 ! pc = IOpInl op'\n\ngoal (1 subgoal):\n 1. \\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op", "using norm_body2"], ["proof (prove)\nusing this:\n  body fd2 ! pc = IOpInl op'\n  norm_instr (body fd2 ! pc) = Std.instr.IOp op\n\ngoal (1 subgoal):\n 1. \\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op", "by simp"], ["proof (state)\nthis:\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x6.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = IOpInl x6\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 7. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "proof (cases \"\\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "case True"], ["proof (state)\nthis:\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\n\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "let ?s2' = \"State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "have \"?STEP ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using True IOpInl step_op \\<open>\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\\<close> Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct"], ["proof (prove)\nusing this:\n  \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\n  body fd2 ! pc = IOpInl op'\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sinca.step_op_inl_hit)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "have \"?MATCH ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using rel_F1_F2"], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (2 subgoals):\n 1. \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n 2. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State F2 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "case False"], ["proof (state)\nthis:\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "let ?fd2' = \"rewrite_fundef_body fd2 pc (IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "let ?s2' = \"State (Finca_add F2 f ?fd2') H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "have \"?STEP ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State\n       (Finca_add F2 f\n         (rewrite_fundef_body fd2 pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n       H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "using False IOpInl step_op \\<open>\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\\<close> Sinca.\\<II>\\<nn>\\<ll>\\<OO>\\<pp>_correct"], ["proof (prove)\nusing this:\n  \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op' (take ar \\<Sigma>)\n  body fd2 ! pc = IOpInl op'\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.IOp op\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy> op = ar\n  ar \\<le> length \\<Sigma>\n  \\<OO>\\<pp> op (take ar \\<Sigma>) = x\n  Frame f pc \\<Sigma> # st' = st\n  \\<DD>\\<ee>\\<II>\\<nn>\\<ll> op' = op\n  length ?xs =\n  \\<AA>\\<rr>\\<ii>\\<tt>\\<yy>\n   (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) \\<Longrightarrow>\n  \\<II>\\<nn>\\<ll>\\<OO>\\<pp> ?opinl ?xs =\n  \\<OO>\\<pp> (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> ?opinl) ?xs\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State\n       (Finca_add F2 f\n         (rewrite_fundef_body fd2 pc\n           (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n       H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))", "by (auto intro!: Sinca.step_op_inl_miss)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "have \"?MATCH ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "using IOpInl"], ["proof (prove)\nusing this:\n  body fd2 ! pc = IOpInl op'\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n    State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "by (auto intro!: match.intros intro: rel_fundefs_rewrite[OF rel_F1_F2])"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State\n   (Finca_add F2 f\n     (rewrite_fundef_body fd2 pc\n       (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n   H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<not> \\<II>\\<ss>\\<II>\\<nn>\\<ll> op'\n            (take ar \\<Sigma>) \\<Longrightarrow>\n    \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State\n   (Finca_add F2 f\n     (rewrite_fundef_body fd2 pc\n       (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n   H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State\n     (Finca_add F2 f\n       (rewrite_fundef_body fd2 pc\n         (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n     H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st'))\n  State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim>\n  State\n   (Finca_add F2 f\n     (rewrite_fundef_body fd2 pc\n       (Inca.instr.IOp (\\<DD>\\<ee>\\<II>\\<nn>\\<ll> op'))))\n   H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IPush x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 2. \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n     body fd2 ! pc = Inca.instr.IPop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'.\n                         Sinca.step (State F2 H st) s2' \\<and>\n                         State F1 H\n                          (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                           st') \\<sim>\n                         s2'\n 3. \\<And>x3.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ILoad x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 4. \\<And>x4.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.IStore x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 5. \\<And>x7.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICJump x7\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'\n 6. \\<And>x8.\n       \\<lbrakk>norm_instr (body fd2 ! pc) = Std.instr.IOp op;\n        body fd2 ! pc = Inca.instr.ICall x8\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) (x # drop ar \\<Sigma>) #\n                              st') \\<sim>\n                            s2'", "qed simp_all"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) (x # drop ar \\<Sigma>) # st') \\<sim> s2'\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_cjump_true f fd1 pc n d \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd2 where F2_get_f[intro]: \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have pc_in_range[intro]: \"pc < length (body fd2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "using \\<open>rel_fundef norm_eq fd1 fd2\\<close> rel_fundef_body_length step_cjump_true.hyps(2)"], ["proof (prove)\nusing this:\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  rel_fundef ?r ?fd1.0 ?fd2.0 \\<Longrightarrow>\n  length (body ?fd1.0) = length (body ?fd2.0)\n  pc < length (body fd1)\n\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "by fastforce"], ["proof (state)\nthis:\n  pc < length (body fd2)\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have norm_body2: \"norm_instr (body fd2 ! pc) = Std.ICJump n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.ICJump n", "using step_cjump_true rel_fundef_body_nth[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>, of pc]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  pc < length (body fd1) \\<Longrightarrow>\n  body fd1 ! pc = norm_instr (body fd2 ! pc)\n\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.ICJump n", "by simp"], ["proof (state)\nthis:\n  norm_instr (body fd2 ! pc) = Std.instr.ICJump n\n\ngoal (4 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_true d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (Frame f n \\<Sigma> # sta) \\<sim> s2'\n 2. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 3. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 4. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f n \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))", "using step_cjump_true norm_body2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  norm_instr (body fd2 ! pc) = Std.instr.ICJump n\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))", "by (auto intro: Sinca.step_cjump_true elim: norm_instr.elims)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f n \\<Sigma> # st')", "using step_cjump_true rel_F1_F2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_true d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f n \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f n \\<Sigma> # st'))\n  State F1 H (Frame f n \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f n \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f n \\<Sigma> # st') \\<sim> s2'\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_cjump_false f fd1 pc n d \\<Sigma> st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st", "obtain fd2 where F2_get_f[intro]: \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have pc_in_range[intro]: \"pc < length (body fd2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "using \\<open>rel_fundef norm_eq fd1 fd2\\<close> rel_fundef_body_length step_cjump_false"], ["proof (prove)\nusing this:\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  rel_fundef ?r ?fd1.0 ?fd2.0 \\<Longrightarrow>\n  length (body ?fd1.0) = length (body ?fd2.0)\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "by fastforce"], ["proof (state)\nthis:\n  pc < length (body fd2)\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have norm_body2: \"norm_instr (body fd2 ! pc) = Std.ICJump n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.ICJump n", "using step_cjump_false rel_fundef_body_nth[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>, of pc]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  pc < length (body fd1) \\<Longrightarrow>\n  body fd1 ! pc = norm_instr (body fd2 ! pc)\n\ngoal (1 subgoal):\n 1. norm_instr (body fd2 ! pc) = Std.instr.ICJump n", "by simp"], ["proof (state)\nthis:\n  norm_instr (body fd2 ! pc) = Std.instr.ICJump n\n\ngoal (3 subgoals):\n 1. \\<And>f fd pc n d \\<Sigma> sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICJump n; is_false d;\n        Frame f pc (d # \\<Sigma>) # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (Frame f (Suc pc) \\<Sigma> # sta) \\<sim>\n                            s2'\n 2. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 3. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f (Suc pc) \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))", "using step_cjump_false norm_body2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  norm_instr (body fd2 ! pc) = Std.instr.ICJump n\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))", "by (auto intro: Sinca.step_cjump_false elim: norm_instr.elims)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "using step_cjump_false rel_F1_F2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICJump n\n  is_false d\n  Frame f pc (d # \\<Sigma>) # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n\ngoal (1 subgoal):\n 1. State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n    State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st) (State F2 H (Frame f (Suc pc) \\<Sigma> # st'))\n  State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim>\n  State F2 H (Frame f (Suc pc) \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (Frame f (Suc pc) \\<Sigma> # st') \\<sim> s2'\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_fun_call f fd1 pc g gd1 \\<Sigma> frame\\<^sub>f frame\\<^sub>g st')"], ["proof (state)\nthis:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "obtain gd2 where \"Finca_get F2 g = Some gd2\" and rel_gd1_gd2: \"rel_fundef norm_eq gd1 gd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>gd2.\n        \\<lbrakk>Finca_get F2 g = Some gd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step_fun_call rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>gd2.\n        \\<lbrakk>Finca_get F2 g = Some gd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 g = Some gd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have pc_in_range: \"pc < length (body fd2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "using step_fun_call \\<open>rel_fundef norm_eq fd1 fd2\\<close> rel_fundef_body_length"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  rel_fundef ?r ?fd1.0 ?fd2.0 \\<Longrightarrow>\n  length (body ?fd1.0) = length (body ?fd2.0)\n\ngoal (1 subgoal):\n 1. pc < length (body fd2)", "by fastforce"], ["proof (state)\nthis:\n  pc < length (body fd2)\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have arity_gd1_gd2: \"arity gd1 = arity gd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd1 = arity gd2", "using rel_fundef_arities[OF rel_gd1_gd2]"], ["proof (prove)\nusing this:\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. arity gd1 = arity gd2", "."], ["proof (state)\nthis:\n  arity gd1 = arity gd2\n\ngoal (2 subgoals):\n 1. \\<And>f fd pc g gd \\<Sigma> frame\\<^sub>f frame\\<^sub>g sta.\n       \\<lbrakk>Fstd_get F1 f = Some fd; pc < length (body fd);\n        body fd ! pc = Std.instr.ICall g; Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>; frame\\<^sub>f = Frame f pc \\<Sigma>;\n        frame\\<^sub>g = Frame g 0 (take (arity gd) \\<Sigma>);\n        frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H\n                             (frame\\<^sub>g # frame\\<^sub>f # sta) \\<sim>\n                            s2'\n 2. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "let ?\\<Sigma>g = \"take (arity gd2) \\<Sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "let ?s2' = \"State F2 H (Frame g 0 ?\\<Sigma>g # Frame f pc \\<Sigma> # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "have \"?STEP ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "have \"arity gd2 \\<le> length \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd2 \\<le> length \\<Sigma>", "using \\<open>arity gd1 \\<le> length \\<Sigma>\\<close> arity_gd1_gd2"], ["proof (prove)\nusing this:\n  arity gd1 \\<le> length \\<Sigma>\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. arity gd2 \\<le> length \\<Sigma>", "by simp"], ["proof (state)\nthis:\n  arity gd2 \\<le> length \\<Sigma>\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "moreover"], ["proof (state)\nthis:\n  arity gd2 \\<le> length \\<Sigma>\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "have \"body fd2 ! pc = Inca.ICall g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. body fd2 ! pc = Inca.instr.ICall g", "using step_fun_call rel_fundef_body_nth[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>, of pc]"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  pc < length (body fd1) \\<Longrightarrow>\n  body fd1 ! pc = norm_instr (body fd2 ! pc)\n\ngoal (1 subgoal):\n 1. body fd2 ! pc = Inca.instr.ICall g", "by (auto elim: norm_instr.elims)"], ["proof (state)\nthis:\n  body fd2 ! pc = Inca.instr.ICall g\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "ultimately"], ["proof (chain)\npicking this:\n  arity gd2 \\<le> length \\<Sigma>\n  body fd2 ! pc = Inca.instr.ICall g", "show ?thesis"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\n  body fd2 ! pc = Inca.instr.ICall g\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using step_fun_call"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\n  body fd2 ! pc = Inca.instr.ICall g\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using \\<open>Finca_get F2 g = Some gd2\\<close> \\<open>Finca_get F2 f = Some fd2\\<close>"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\n  body fd2 ! pc = Inca.instr.ICall g\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Finca_get F2 g = Some gd2\n  Finca_get F2 f = Some fd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "using pc_in_range \\<open>body fd2 ! pc = Inca.ICall g\\<close>"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\n  body fd2 ! pc = Inca.instr.ICall g\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  Finca_get F2 g = Some gd2\n  Finca_get F2 f = Some fd2\n  pc < length (body fd2)\n  body fd2 ! pc = Inca.instr.ICall g\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))", "by (auto intro: Sinca.step_fun_call)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "have \"?MATCH ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim>\n    State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st')", "using step_fun_call rel_F1_F2 arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Fstd_get F1 f = Some fd1\n  pc < length (body fd1)\n  body fd1 ! pc = Std.instr.ICall g\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\n  frame\\<^sub>f = Frame f pc \\<Sigma>\n  frame\\<^sub>g = Frame g 0 (take (arity gd1) \\<Sigma>)\n  frame\\<^sub>f # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim>\n    State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim>\n  State F2 H\n   (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n  State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim>\n  State F2 H\n   (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st')", "show ?thesis"], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st'))\n  State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim>\n  State F2 H\n   (Frame g 0 (take (arity gd2) \\<Sigma>) # Frame f pc \\<Sigma> # st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (frame\\<^sub>g # frame\\<^sub>f # st') \\<sim> s2'\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "case (step_fun_end g gd1 \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' st')"], ["proof (state)\nthis:\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "then"], ["proof (chain)\npicking this:\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st", "obtain gd2 where \"Finca_get F2 g = Some gd2\" and rel_gd1_gd2: \"rel_fundef norm_eq gd1 gd2\""], ["proof (prove)\nusing this:\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. (\\<And>gd2.\n        \\<lbrakk>Finca_get F2 g = Some gd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rel_fundefs_Some1[OF rel_F1_F2]"], ["proof (prove)\nusing this:\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  Fstd_get F1 ?x = Some ?y \\<Longrightarrow>\n  \\<exists>z.\n     Finca_get F2 ?x = Some z \\<and>\n     rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>gd2.\n        \\<lbrakk>Finca_get F2 g = Some gd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Finca_get F2 g = Some gd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) gd1 gd2\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have pc_at_end: \"pc\\<^sub>g = length (body gd2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pc\\<^sub>g = length (body gd2)", "using rel_fundef_body_length[OF rel_gd1_gd2] step_fun_end"], ["proof (prove)\nusing this:\n  length (body gd1) = length (body gd2)\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n\ngoal (1 subgoal):\n 1. pc\\<^sub>g = length (body gd2)", "by fastforce"], ["proof (state)\nthis:\n  pc\\<^sub>g = length (body gd2)\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "have arity_gd1_gd2: \"arity gd1 = arity gd2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd1 = arity gd2", "using rel_fundef_arities[OF rel_gd1_gd2]"], ["proof (prove)\nusing this:\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. arity gd1 = arity gd2", "."], ["proof (state)\nthis:\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. \\<And>g gd \\<Sigma>\\<^sub>f pc\\<^sub>g frame\\<^sub>g \\<Sigma>\\<^sub>g\n       frame\\<^sub>f f pc\\<^sub>f frame\\<^sub>f' sta.\n       \\<lbrakk>Fstd_get F1 g = Some gd;\n        arity gd \\<le> length \\<Sigma>\\<^sub>f;\n        pc\\<^sub>g = length (body gd);\n        frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g;\n        frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f;\n        frame\\<^sub>f' =\n        Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd) \\<Sigma>\\<^sub>f);\n        frame\\<^sub>g # frame\\<^sub>f # sta = st\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            Sinca.step (State F2 H st) s2' \\<and>\n                            State F1 H (frame\\<^sub>f' # sta) \\<sim> s2'", "show ?case (is \"\\<exists>x. ?STEP x \\<and> ?MATCH x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "let ?s1' = \"State F2 H (Frame f (Suc pc\\<^sub>f) (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) # st')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "have \"?STEP ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n        st'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n        st'))", "have \"arity gd2 \\<le> length \\<Sigma>\\<^sub>f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity gd2 \\<le> length \\<Sigma>\\<^sub>f", "using \\<open>arity gd1 \\<le> length \\<Sigma>\\<^sub>f\\<close> arity_gd1_gd2"], ["proof (prove)\nusing this:\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. arity gd2 \\<le> length \\<Sigma>\\<^sub>f", "by simp"], ["proof (state)\nthis:\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n        st'))", "then"], ["proof (chain)\npicking this:\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f", "show ?thesis"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n        st'))", "using step_fun_end pc_at_end \\<open>Finca_get F2 g = Some gd2\\<close>"], ["proof (prove)\nusing this:\n  arity gd2 \\<le> length \\<Sigma>\\<^sub>f\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  pc\\<^sub>g = length (body gd2)\n  Finca_get F2 g = Some gd2\n\ngoal (1 subgoal):\n 1. Sinca.step (State F2 H st)\n     (State F2 H\n       (Frame f (Suc pc\\<^sub>f)\n         (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n        st'))", "by (auto intro: Sinca.step_fun_end)"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "moreover"], ["proof (state)\nthis:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st'))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "have \"?MATCH ?s1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. State F1 H (frame\\<^sub>f' # st') \\<sim>\n    State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st')", "using step_fun_end rel_F1_F2 arity_gd1_gd2"], ["proof (prove)\nusing this:\n  Fstd_get F1 g = Some gd1\n  arity gd1 \\<le> length \\<Sigma>\\<^sub>f\n  pc\\<^sub>g = length (body gd1)\n  frame\\<^sub>g = Frame g pc\\<^sub>g \\<Sigma>\\<^sub>g\n  frame\\<^sub>f = Frame f pc\\<^sub>f \\<Sigma>\\<^sub>f\n  frame\\<^sub>f' =\n  Frame f (Suc pc\\<^sub>f)\n   (\\<Sigma>\\<^sub>g @ drop (arity gd1) \\<Sigma>\\<^sub>f)\n  frame\\<^sub>g # frame\\<^sub>f # st' = st\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  arity gd1 = arity gd2\n\ngoal (1 subgoal):\n 1. State F1 H (frame\\<^sub>f' # st') \\<sim>\n    State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st')", "by (auto intro: match.intros)"], ["proof (state)\nthis:\n  State F1 H (frame\\<^sub>f' # st') \\<sim>\n  State F2 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n    st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "ultimately"], ["proof (chain)\npicking this:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st'))\n  State F1 H (frame\\<^sub>f' # st') \\<sim>\n  State F2 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n    st')", "show \"?thesis\""], ["proof (prove)\nusing this:\n  Sinca.step (State F2 H st)\n   (State F2 H\n     (Frame f (Suc pc\\<^sub>f)\n       (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n      st'))\n  State F1 H (frame\\<^sub>f' # st') \\<sim>\n  State F2 H\n   (Frame f (Suc pc\\<^sub>f)\n     (\\<Sigma>\\<^sub>g @ drop (arity gd2) \\<Sigma>\\<^sub>f) #\n    st')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       Sinca.step (State F2 H st) s2' \\<and>\n       State F1 H (frame\\<^sub>f' # st') \\<sim> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (frame\\<^sub>f' # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     Sinca.step (State F2 H st) s2' \\<and>\n     State F1 H (frame\\<^sub>f' # st') \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'. Sinca.step s2 s2' \\<and> s1' \\<sim> s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma forward_match_final:\n  \"s1 \\<sim> s2 \\<Longrightarrow> Sstd.final s1 \\<Longrightarrow> Sinca.final s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<sim> s2; Sstd.final s1\\<rbrakk>\n    \\<Longrightarrow> Sinca.final s2", "proof (induction s1 s2 rule: match.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sstd.final (State F1 H st)\\<rbrakk>\n       \\<Longrightarrow> Sinca.final (State F2 H st)", "case (1 F1 F2 H st)"], ["proof (state)\nthis:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sstd.final (State F1 H st)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sstd.final (State F1 H st)\\<rbrakk>\n       \\<Longrightarrow> Sinca.final (State F2 H st)", "then"], ["proof (chain)\npicking this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sstd.final (State F1 H st)", "obtain f fd1 pc \\<Sigma> where\n    st_def: \"st = [Frame f pc \\<Sigma>]\" and\n    \"Fstd_get F1 f = Some fd1\" and\n    pc_def: \"pc = length (body fd1)\""], ["proof (prove)\nusing this:\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sstd.final (State F1 H st)\n\ngoal (1 subgoal):\n 1. (\\<And>f pc \\<Sigma> fd1.\n        \\<lbrakk>st = [Frame f pc \\<Sigma>]; Fstd_get F1 f = Some fd1;\n         pc = length (body fd1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: Sstd.final.cases)"], ["proof (state)\nthis:\n  st = [Frame f pc \\<Sigma>]\n  Fstd_get F1 f = Some fd1\n  pc = length (body fd1)\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sstd.final (State F1 H st)\\<rbrakk>\n       \\<Longrightarrow> Sinca.final (State F2 H st)", "then"], ["proof (chain)\npicking this:\n  st = [Frame f pc \\<Sigma>]\n  Fstd_get F1 f = Some fd1\n  pc = length (body fd1)", "obtain fd2 where \"Finca_get F2 f = Some fd2\" and \"rel_fundef norm_eq fd1 fd2\""], ["proof (prove)\nusing this:\n  st = [Frame f pc \\<Sigma>]\n  Fstd_get F1 f = Some fd1\n  pc = length (body fd1)\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1 rel_fundefs_Some1"], ["proof (prove)\nusing this:\n  st = [Frame f pc \\<Sigma>]\n  Fstd_get F1 f = Some fd1\n  pc = length (body fd1)\n  rel_fundefs (Fstd_get F1) (Finca_get F2)\n  Sstd.final (State F1 H st)\n  \\<lbrakk>rel_fundefs ?f ?g; ?f ?x = Some ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       ?g ?x = Some z \\<and>\n                       rel_fundef (\\<lambda>x y. x = norm_instr y) ?y z\n\ngoal (1 subgoal):\n 1. (\\<And>fd2.\n        \\<lbrakk>Finca_get F2 f = Some fd2;\n         rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. \\<And>F1 F2 H st.\n       \\<lbrakk>rel_fundefs (Fstd_get F1) (Finca_get F2);\n        Sstd.final (State F1 H st)\\<rbrakk>\n       \\<Longrightarrow> Sinca.final (State F2 H st)", "then"], ["proof (chain)\npicking this:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2", "show ?case"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.final (State F2 H st)", "unfolding st_def"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n\ngoal (1 subgoal):\n 1. Sinca.final (State F2 H [Frame f pc \\<Sigma>])", "using pc_def rel_fundef_body_length[OF \\<open>rel_fundef norm_eq fd1 fd2\\<close>]"], ["proof (prove)\nusing this:\n  Finca_get F2 f = Some fd2\n  rel_fundef (\\<lambda>x y. x = norm_instr y) fd1 fd2\n  pc = length (body fd1)\n  length (body fd1) = length (body fd2)\n\ngoal (1 subgoal):\n 1. Sinca.final (State F2 H [Frame f pc \\<Sigma>])", "by (auto intro: Sinca.final.intros)"], ["proof (state)\nthis:\n  Sinca.final (State F2 H st)\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale std_inca_forward_simulation:\n  forward_simulation Sstd.step Sinca.step Sstd.final Sinca.final \"\\<lambda>_ _. False\" \"\\<lambda>_. match\""], ["proof (prove)\ngoal (1 subgoal):\n 1. forward_simulation Sstd.step Sinca.step Sstd.final Sinca.final\n     (\\<lambda>_ _. False) (\\<lambda>_. (\\<sim>))", "using forward_match_final forward_lockstep_simulation\n    lockstep_to_plus_forward_simulation[of match Sstd.step _ Sinca.step]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.0 \\<sim> ?s2.0; Sstd.final ?s1.0\\<rbrakk>\n  \\<Longrightarrow> Sinca.final ?s2.0\n  \\<lbrakk>Sstd.step ?s1.0 ?s1'; ?s1.0 \\<sim> ?s2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       Sinca.step ?s2.0 s2' \\<and> ?s1' \\<sim> s2'\n  \\<lbrakk>\\<And>s1 s2 s2'.\n              \\<lbrakk>s1 \\<sim> s2; Sstd.step s1 ?s1'\\<rbrakk>\n              \\<Longrightarrow> \\<exists>s2'.\n                                   Sinca.step s2 s2' \\<and> ?s1' \\<sim> s2';\n   ?s1.0 \\<sim> ?s2.0; Sstd.step ?s1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       Sinca.step\\<^sup>+\\<^sup>+ ?s2.0 s2' \\<and>\n                       ?s1' \\<sim> s2'\n\ngoal (1 subgoal):\n 1. forward_simulation Sstd.step Sinca.step Sstd.final Sinca.final\n     (\\<lambda>_ _. False) (\\<lambda>_. (\\<sim>))", "by unfold_locales auto"], ["", "section \\<open>Bisimulation\\<close>"], ["", "sublocale std_inca_bisimulation:\n  bisimulation Sstd.step Sinca.step Sstd.final Sinca.final \"\\<lambda>_ _. False\" \"\\<lambda>_. match\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation Sstd.step Sinca.step Sstd.final Sinca.final\n     (\\<lambda>_ _. False) (\\<lambda>_. (\\<sim>))", "by unfold_locales"], ["", "end"], ["", "end"]]}