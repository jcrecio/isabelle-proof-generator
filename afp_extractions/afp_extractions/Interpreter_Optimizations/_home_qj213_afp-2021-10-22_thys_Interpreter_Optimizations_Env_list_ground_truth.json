{"file_name": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations/Env_list.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations", "problem_names": ["lemma get_empty: \"get empty x = None\"", "lemma get_add_eq: \"get (add e x v) x = Some v\"", "lemma get_add_neq: \"x \\<noteq> y \\<Longrightarrow> get (add e x v) y = get e y\"", "lemma to_list_correct: \"map_of (to_list e) = get e\""], "translations": [["", "lemma get_empty: \"get empty x = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get local.empty x = None", "by (simp add: empty_def)"], ["", "lemma get_add_eq: \"get (add e x v) x = Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get (add e x v) x = Some v", "by (cases e; simp)"], ["", "lemma get_add_neq: \"x \\<noteq> y \\<Longrightarrow> get (add e x v) y = get e y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> get (add e x v) y = get e y", "by (cases e; simp)"], ["", "lemma to_list_correct: \"map_of (to_list e) = get e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (to_list e) = get e", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. map_of (to_list e) x = get e x", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. map_of (to_list e) x = get e x", "obtain xs where \"e = T xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs. e = T xs \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases e; simp)"], ["proof (state)\nthis:\n  e = T xs\n\ngoal (1 subgoal):\n 1. \\<And>x. map_of (to_list e) x = get e x", "show \"map_of (to_list e) k = get e k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (to_list e) k = get e k", "unfolding \\<open>e = T xs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (to_list (T xs)) k = get (T xs) k", "by (induction xs) simp_all"], ["proof (state)\nthis:\n  map_of (to_list e) k = get e k\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "global_interpretation env_list:\n  env Env_list.empty Env_list.get Env_list.add Env_list.to_list\n  defines\n    singleton = env_list.singleton and\n    add_list = env_list.add_list and\n    from_list = env_list.from_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. env Env_list.empty Env_list.get Env_list.add Env_list.to_list", "apply (unfold_locales)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x. Env_list.get Env_list.empty x = None\n 2. \\<And>e x v. Env_list.get (Env_list.add e x v) x = Some v\n 3. \\<And>x y e v.\n       x \\<noteq> y \\<Longrightarrow>\n       Env_list.get (Env_list.add e x v) y = Env_list.get e y\n 4. \\<And>e. map_of (Env_list.to_list e) = Env_list.get e", "by (simp_all add: get_empty get_add_eq get_add_neq to_list_correct)"], ["", "export_code Env_list.empty Env_list.get Env_list.add Env_list.to_list singleton add_list from_list\n  in SML module_name Env"], ["", "end"]]}