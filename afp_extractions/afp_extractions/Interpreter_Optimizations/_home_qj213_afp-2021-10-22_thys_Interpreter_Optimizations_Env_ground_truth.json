{"file_name": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations/Env.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations", "problem_names": ["lemma from_list_correct: \"map_of xs k = get (from_list xs) k\"", "lemma from_list_Nil[simp]: \"from_list [] = empty\"", "lemma get_from_list_to_list: \"get (from_list (to_list e)) = get e\""], "translations": [["", "lemma from_list_correct: \"map_of xs k = get (from_list xs) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of xs k = get (from_list xs) k", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of [] k = get (from_list []) k\n 2. \\<And>a xs.\n       map_of xs k = get (from_list xs) k \\<Longrightarrow>\n       map_of (a # xs) k = get (from_list (a # xs)) k", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. map_of [] k = get (from_list []) k\n 2. \\<And>a xs.\n       map_of xs k = get (from_list xs) k \\<Longrightarrow>\n       map_of (a # xs) k = get (from_list (a # xs)) k", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of [] k = get (from_list []) k", "using get_empty"], ["proof (prove)\nusing this:\n  get empty ?x = None\n\ngoal (1 subgoal):\n 1. map_of [] k = get (from_list []) k", "by (simp add: from_list_def)"], ["proof (state)\nthis:\n  map_of [] k = get (from_list []) k\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       map_of xs k = get (from_list xs) k \\<Longrightarrow>\n       map_of (a # xs) k = get (from_list (a # xs)) k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       map_of xs k = get (from_list xs) k \\<Longrightarrow>\n       map_of (a # xs) k = get (from_list (a # xs)) k", "case (Cons x xs)"], ["proof (state)\nthis:\n  map_of xs k = get (from_list xs) k\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       map_of xs k = get (from_list xs) k \\<Longrightarrow>\n       map_of (a # xs) k = get (from_list (a # xs)) k", "then"], ["proof (chain)\npicking this:\n  map_of xs k = get (from_list xs) k", "show ?case"], ["proof (prove)\nusing this:\n  map_of xs k = get (from_list xs) k\n\ngoal (1 subgoal):\n 1. map_of (x # xs) k = get (from_list (x # xs)) k", "using get_add_eq get_add_neq"], ["proof (prove)\nusing this:\n  map_of xs k = get (from_list xs) k\n  get (add ?e ?x ?v) ?x = Some ?v\n  ?x \\<noteq> ?y \\<Longrightarrow> get (add ?e ?x ?v) ?y = get ?e ?y\n\ngoal (1 subgoal):\n 1. map_of (x # xs) k = get (from_list (x # xs)) k", "by (simp add: from_list_def)"], ["proof (state)\nthis:\n  map_of (x # xs) k = get (from_list (x # xs)) k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma from_list_Nil[simp]: \"from_list [] = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. from_list [] = empty", "by (simp add: from_list_def)"], ["", "lemma get_from_list_to_list: \"get (from_list (to_list e)) = get e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get (from_list (to_list e)) = get e", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. get (from_list (to_list e)) x = get e x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. get (from_list (to_list e)) x = get e x", "show \"get (from_list (to_list e)) x = get e x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get (from_list (to_list e)) x = get e x", "unfolding from_list_correct[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (to_list e) x = get e x", "unfolding to_list_correct[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (to_list e) x = map_of (to_list e) x", "by simp"], ["proof (state)\nthis:\n  get (from_list (to_list e)) x = get e x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}