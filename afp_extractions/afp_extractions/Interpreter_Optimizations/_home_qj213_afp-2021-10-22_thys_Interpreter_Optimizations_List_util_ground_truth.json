{"file_name": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations/List_util.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Interpreter_Optimizations", "problem_names": ["lemma same_length_iff_eq_lengths: \"same_length xs ys \\<longleftrightarrow> length xs = length ys\"", "lemma same_length_Cons:\n  \"same_length (x # xs) ys \\<Longrightarrow> \\<exists>y ys'. ys = y # ys'\"\n  \"same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'\"", "lemma for_all2_refl: \"(\\<forall>x. r x x) \\<Longrightarrow> for_all2 r xs xs\"", "lemma for_all2_same_length: \"for_all2 r xs ys \\<Longrightarrow> same_length xs ys\"", "lemma for_all2_ConsD: \"for_all2 r (x # xs) (y # ys) \\<Longrightarrow> r x y \\<and> for_all2 r xs ys\"", "lemma nth_opt_eq_Some_conv: \"nth_opt xs n = Some x \\<longleftrightarrow> n < length xs \\<and> xs ! n = x\"", "lemmas nth_opt_eq_SomeD[dest] = nth_opt_eq_Some_conv[THEN iffD1]", "lemma map_list_update_id:\n  \"f (xs ! pc) = f instr \\<Longrightarrow> map f (xs[pc := instr]) = map f xs\"", "lemma list_all_eq_const_imp_replicate:\n  assumes \"list_all (\\<lambda>x. x = y) xs\"\n  shows \"xs = replicate (length xs) y\"", "lemma list_all_eq_const_replicate_lhs[intro]:\n  \"list_all (\\<lambda>x. y = x) (replicate n y)\"", "lemma list_all_eq_const_replicate_rhs[intro]:\n  \"list_all (\\<lambda>x. x = y) (replicate n y)\"", "lemma replicate_eq_map:\n  assumes \"list_all g (take n xs)\" and \"n \\<le> length xs\" and \"\\<forall>y. g y \\<longrightarrow> f y = x\"\n  shows \"replicate n x = map f (take n xs)\""], "translations": [["", "lemma same_length_iff_eq_lengths: \"same_length xs ys \\<longleftrightarrow> length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. same_length xs ys = (length xs = length ys)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. same_length xs ys \\<Longrightarrow> length xs = length ys\n 2. length xs = length ys \\<Longrightarrow> same_length xs ys", "assume \"same_length xs ys\""], ["proof (state)\nthis:\n  same_length xs ys\n\ngoal (2 subgoals):\n 1. same_length xs ys \\<Longrightarrow> length xs = length ys\n 2. length xs = length ys \\<Longrightarrow> same_length xs ys", "then"], ["proof (chain)\npicking this:\n  same_length xs ys", "show \"length xs = length ys\""], ["proof (prove)\nusing this:\n  same_length xs ys\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by (induction xs ys rule: same_length.induct) simp_all"], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow> same_length xs ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow> same_length xs ys", "assume \"length xs = length ys\""], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. length xs = length ys \\<Longrightarrow> same_length xs ys", "then"], ["proof (chain)\npicking this:\n  length xs = length ys", "show \"same_length xs ys\""], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. same_length xs ys", "proof (induction xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys. length [] = length ys \\<Longrightarrow> same_length [] ys\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   same_length xs ys;\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> same_length (a # xs) ys", "case Nil"], ["proof (state)\nthis:\n  length [] = length ys\n\ngoal (2 subgoals):\n 1. \\<And>ys. length [] = length ys \\<Longrightarrow> same_length [] ys\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   same_length xs ys;\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> same_length (a # xs) ys", "then"], ["proof (chain)\npicking this:\n  length [] = length ys", "show ?case"], ["proof (prove)\nusing this:\n  length [] = length ys\n\ngoal (1 subgoal):\n 1. same_length [] ys", "by (simp add: same_length_Nil)"], ["proof (state)\nthis:\n  same_length [] ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   same_length xs ys;\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> same_length (a # xs) ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   same_length xs ys;\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> same_length (a # xs) ys", "case (Cons x xs)"], ["proof (state)\nthis:\n  length xs = length ?ys \\<Longrightarrow> same_length xs ?ys\n  length (x # xs) = length ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   length xs = length ys \\<Longrightarrow>\n                   same_length xs ys;\n        length (a # xs) = length ys\\<rbrakk>\n       \\<Longrightarrow> same_length (a # xs) ys", "then"], ["proof (chain)\npicking this:\n  length xs = length ?ys \\<Longrightarrow> same_length xs ?ys\n  length (x # xs) = length ys", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ?ys \\<Longrightarrow> same_length xs ?ys\n  length (x # xs) = length ys\n\ngoal (1 subgoal):\n 1. same_length (x # xs) ys", "by (metis length_Suc_conv same_length_Cons)"], ["proof (state)\nthis:\n  same_length (x # xs) ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  same_length xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_length_Cons:\n  \"same_length (x # xs) ys \\<Longrightarrow> \\<exists>y ys'. ys = y # ys'\"\n  \"same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (same_length (x # xs) ys \\<Longrightarrow>\n     \\<exists>y ys'. ys = y # ys') &&&\n    (same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. same_length (x # xs) ys \\<Longrightarrow> \\<exists>y ys'. ys = y # ys'\n 2. same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'", "assume \"same_length (x # xs) ys\""], ["proof (state)\nthis:\n  same_length (x # xs) ys\n\ngoal (2 subgoals):\n 1. same_length (x # xs) ys \\<Longrightarrow> \\<exists>y ys'. ys = y # ys'\n 2. same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'", "then"], ["proof (chain)\npicking this:\n  same_length (x # xs) ys", "show \"\\<exists>y ys'. ys = y # ys'\""], ["proof (prove)\nusing this:\n  same_length (x # xs) ys\n\ngoal (1 subgoal):\n 1. \\<exists>y ys'. ys = y # ys'", "by (induction \"x # xs\" ys rule: same_length.induct) simp"], ["proof (state)\nthis:\n  \\<exists>y ys'. ys = y # ys'\n\ngoal (1 subgoal):\n 1. same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'", "assume \"same_length xs (y # ys)\""], ["proof (state)\nthis:\n  same_length xs (y # ys)\n\ngoal (1 subgoal):\n 1. same_length xs (y # ys) \\<Longrightarrow> \\<exists>x xs'. xs = x # xs'", "then"], ["proof (chain)\npicking this:\n  same_length xs (y # ys)", "show \"\\<exists>x xs'. xs = x # xs'\""], ["proof (prove)\nusing this:\n  same_length xs (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>x xs'. xs = x # xs'", "by (induction xs \"y # ys\" rule: same_length.induct) simp"], ["proof (state)\nthis:\n  \\<exists>x xs'. xs = x # xs'\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive for_all2 for r where\n  for_all2_Nil: \"for_all2 r [] []\" |\n  for_all2_Cons: \"r x y \\<Longrightarrow> for_all2 r xs ys \\<Longrightarrow> for_all2 r (x # xs) (y # ys)\""], ["", "code_pred for_all2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "declare for_all2_Nil[intro]"], ["", "declare for_all2_Cons[intro]"], ["", "lemma for_all2_refl: \"(\\<forall>x. r x x) \\<Longrightarrow> for_all2 r xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. r x x \\<Longrightarrow> for_all2 r xs xs", "by (induction xs) auto"], ["", "lemma for_all2_same_length: \"for_all2 r xs ys \\<Longrightarrow> same_length xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_all2 r xs ys \\<Longrightarrow> same_length xs ys", "by (induction rule: for_all2.induct) (auto intro: same_length.intros)"], ["", "lemma for_all2_ConsD: \"for_all2 r (x # xs) (y # ys) \\<Longrightarrow> r x y \\<and> for_all2 r xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. for_all2 r (x # xs) (y # ys) \\<Longrightarrow>\n    r x y \\<and> for_all2 r xs ys", "using for_all2.cases"], ["proof (prove)\nusing this:\n  \\<lbrakk>for_all2 ?r ?a1.0 ?a2.0;\n   \\<lbrakk>?a1.0 = []; ?a2.0 = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>x y xs ys.\n      \\<lbrakk>?a1.0 = x # xs; ?a2.0 = y # ys; ?r x y;\n       for_all2 ?r xs ys\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. for_all2 r (x # xs) (y # ys) \\<Longrightarrow>\n    r x y \\<and> for_all2 r xs ys", "by blast"], ["", "section \\<open>nth\\_opt\\<close>"], ["", "fun nth_opt where\n  \"nth_opt (x # _) 0 = Some x\" |\n  \"nth_opt (_ # xs) (Suc n) = nth_opt xs n\" |\n  \"nth_opt _ _ = None\""], ["", "lemma nth_opt_eq_Some_conv: \"nth_opt xs n = Some x \\<longleftrightarrow> n < length xs \\<and> xs ! n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nth_opt xs n = Some x) = (n < length xs \\<and> xs ! n = x)", "by (induction xs n rule: nth_opt.induct; simp)"], ["", "lemmas nth_opt_eq_SomeD[dest] = nth_opt_eq_Some_conv[THEN iffD1]"], ["", "section \\<open>Generic lemmas\\<close>"], ["", "lemma map_list_update_id:\n  \"f (xs ! pc) = f instr \\<Longrightarrow> map f (xs[pc := instr]) = map f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (xs ! pc) = f instr \\<Longrightarrow>\n    map f (xs[pc := instr]) = map f xs", "using list_update_id map_update"], ["proof (prove)\nusing this:\n  ?xs[?i := ?xs ! ?i] = ?xs\n  map ?f (?xs[?k := ?y]) = (map ?f ?xs)[?k := ?f ?y]\n\ngoal (1 subgoal):\n 1. f (xs ! pc) = f instr \\<Longrightarrow>\n    map f (xs[pc := instr]) = map f xs", "by metis"], ["", "lemma list_all_eq_const_imp_replicate:\n  assumes \"list_all (\\<lambda>x. x = y) xs\"\n  shows \"xs = replicate (length xs) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = replicate (length xs) y", "using assms"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x = y) xs\n\ngoal (1 subgoal):\n 1. xs = replicate (length xs) y", "by (induction xs; simp)"], ["", "lemma list_all_eq_const_replicate_lhs[intro]:\n  \"list_all (\\<lambda>x. y = x) (replicate n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all ((=) y) (replicate n y)", "by (simp add: list_all_length)"], ["", "lemma list_all_eq_const_replicate_rhs[intro]:\n  \"list_all (\\<lambda>x. x = y) (replicate n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x = y) (replicate n y)", "by (simp add: list_all_length)"], ["", "lemma replicate_eq_map:\n  assumes \"list_all g (take n xs)\" and \"n \\<le> length xs\" and \"\\<forall>y. g y \\<longrightarrow> f y = x\"\n  shows \"replicate n x = map f (take n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate n x = map f (take n xs)", "using assms"], ["proof (prove)\nusing this:\n  list_all g (take n xs)\n  n \\<le> length xs\n  \\<forall>y. g y \\<longrightarrow> f y = x\n\ngoal (1 subgoal):\n 1. replicate n x = map f (take n xs)", "proof (induction xs arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>list_all g (take n []); n \\<le> length [];\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n [])\n 2. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>list_all g (take n xs); n \\<le> length xs;\n                    \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n                   \\<Longrightarrow> replicate n x = map f (take n xs);\n        list_all g (take n (a # xs)); n \\<le> length (a # xs);\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n (a # xs))", "case Nil"], ["proof (state)\nthis:\n  list_all g (take n [])\n  n \\<le> length []\n  \\<forall>y. g y \\<longrightarrow> f y = x\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>list_all g (take n []); n \\<le> length [];\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n [])\n 2. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>list_all g (take n xs); n \\<le> length xs;\n                    \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n                   \\<Longrightarrow> replicate n x = map f (take n xs);\n        list_all g (take n (a # xs)); n \\<le> length (a # xs);\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  list_all g (take n [])\n  n \\<le> length []\n  \\<forall>y. g y \\<longrightarrow> f y = x\n\ngoal (1 subgoal):\n 1. replicate n x = map f (take n [])", "by simp"], ["proof (state)\nthis:\n  replicate n x = map f (take n [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>list_all g (take n xs); n \\<le> length xs;\n                    \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n                   \\<Longrightarrow> replicate n x = map f (take n xs);\n        list_all g (take n (a # xs)); n \\<le> length (a # xs);\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>list_all g (take n xs); n \\<le> length xs;\n                    \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n                   \\<Longrightarrow> replicate n x = map f (take n xs);\n        list_all g (take n (a # xs)); n \\<le> length (a # xs);\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n (a # xs))", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>list_all g (take ?n xs); ?n \\<le> length xs;\n   \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n  \\<Longrightarrow> replicate ?n x = map f (take ?n xs)\n  list_all g (take n (x # xs))\n  n \\<le> length (x # xs)\n  \\<forall>y. g y \\<longrightarrow> f y = x\n\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>list_all g (take n xs); n \\<le> length xs;\n                    \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n                   \\<Longrightarrow> replicate n x = map f (take n xs);\n        list_all g (take n (a # xs)); n \\<le> length (a # xs);\n        \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n       \\<Longrightarrow> replicate n x = map f (take n (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all g (take ?n xs); ?n \\<le> length xs;\n   \\<forall>y. g y \\<longrightarrow> f y = x\\<rbrakk>\n  \\<Longrightarrow> replicate ?n x = map f (take ?n xs)\n  list_all g (take n (x # xs))\n  n \\<le> length (x # xs)\n  \\<forall>y. g y \\<longrightarrow> f y = x\n\ngoal (1 subgoal):\n 1. replicate n x = map f (take n (x # xs))", "by (cases n; auto)"], ["proof (state)\nthis:\n  replicate n x = map f (take n (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}