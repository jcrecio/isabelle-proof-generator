{"file_name": "/home/qj213/afp-2021-10-22/thys/LLL_Basis_Reduction/List_Representation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LLL_Basis_Reduction", "problem_names": ["lemma rev_take_Suc: assumes j: \"j < length xs\"\n  shows \"rev (take (Suc j) xs) = xs ! j # rev (take j xs)\"", "lemma of_list_repr: \"list_repr i ba xs \\<Longrightarrow> of_list_repr ba = xs\"", "lemma get_nth_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> get_nth_i ba = xs ! i\"", "lemma get_nth_im1: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> get_nth_im1 ba = xs ! (i - 1)\"", "lemma Cons_tl_drop_update: \"i < length xs \\<Longrightarrow> x # tl (drop i xs) = drop i (xs[i := x])\"", "lemma update_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> list_repr i (update_i ba x) (xs [i := x])\"", "lemma update_im1: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> list_repr i (update_im1 ba x) (xs [i - 1 := x])\"", "lemma tl_drop_Suc: \"tl (drop i xs) = drop (Suc i) xs\"", "lemma inc_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> list_repr (Suc i) (inc_i ba) xs\"", "lemma dec_i: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> list_repr (i - 1) (dec_i ba) xs\"", "lemma dec_i_Suc: \"list_repr (Suc i) ba xs \\<Longrightarrow> list_repr i (dec_i ba) xs\""], "translations": [["", "lemma rev_take_Suc: assumes j: \"j < length xs\"\n  shows \"rev (take (Suc j) xs) = xs ! j # rev (take j xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (take (Suc j) xs) = xs ! j # rev (take j xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rev (take (Suc j) xs) = xs ! j # rev (take j xs)", "from j"], ["proof (chain)\npicking this:\n  j < length xs", "have xs: \"xs = take j xs @ xs ! j # drop (Suc j) xs\""], ["proof (prove)\nusing this:\n  j < length xs\n\ngoal (1 subgoal):\n 1. xs = take j xs @ xs ! j # drop (Suc j) xs", "by (rule id_take_nth_drop)"], ["proof (state)\nthis:\n  xs = take j xs @ xs ! j # drop (Suc j) xs\n\ngoal (1 subgoal):\n 1. rev (take (Suc j) xs) = xs ! j # rev (take j xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (take (Suc j) xs) = xs ! j # rev (take j xs)", "unfolding arg_cong[OF xs, of \"\\<lambda> xs. rev (take (Suc j) xs)\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (take (Suc j) (take j xs @ xs ! j # drop (Suc j) xs)) =\n    xs ! j # rev (take j xs)", "by (simp add: min_def)"], ["proof (state)\nthis:\n  rev (take (Suc j) xs) = xs ! j # rev (take j xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "type_synonym 'a list_repr = \"'a list \\<times> 'a list\""], ["", "definition list_repr :: \"nat \\<Rightarrow> 'a list_repr \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"list_repr i ba xs = (i \\<le> length xs \\<and> fst ba = rev (take i xs) \\<and> snd ba = drop i xs)\""], ["", "definition of_list_repr :: \"'a list_repr \\<Rightarrow> 'a list\" where\n  \"of_list_repr ba = (rev (fst ba) @ snd ba)\""], ["", "lemma of_list_repr: \"list_repr i ba xs \\<Longrightarrow> of_list_repr ba = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_repr i ba xs \\<Longrightarrow> of_list_repr ba = xs", "unfolding of_list_repr_def list_repr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> length xs \\<and>\n    fst ba = rev (take i xs) \\<and> snd ba = drop i xs \\<Longrightarrow>\n    rev (fst ba) @ snd ba = xs", "by auto"], ["", "definition get_nth_i :: \"'a list_repr \\<Rightarrow> 'a\" where\n  \"get_nth_i ba = hd (snd ba)\""], ["", "definition get_nth_im1 :: \"'a list_repr \\<Rightarrow> 'a\" where\n  \"get_nth_im1 ba = hd (fst ba)\""], ["", "lemma get_nth_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> get_nth_i ba = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i < length xs\\<rbrakk>\n    \\<Longrightarrow> get_nth_i ba = xs ! i", "unfolding list_repr_def get_nth_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> hd (snd ba) = xs ! i", "by (auto simp: hd_drop_conv_nth)"], ["", "lemma get_nth_im1: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> get_nth_im1 ba = xs ! (i - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> get_nth_im1 ba = xs ! (i - 1)", "unfolding list_repr_def get_nth_im1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> hd (fst ba) = xs ! (i - 1)", "by (cases i, auto simp: rev_take_Suc)"], ["", "definition update_i :: \"'a list_repr \\<Rightarrow> 'a \\<Rightarrow> 'a list_repr\" where\n  \"update_i ba x = (fst ba, x # tl (snd ba))\""], ["", "lemma Cons_tl_drop_update: \"i < length xs \\<Longrightarrow> x # tl (drop i xs) = drop i (xs[i := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<Longrightarrow> x # tl (drop i xs) = drop i (xs[i := x])", "proof (induct i arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       0 < length xs \\<Longrightarrow>\n       x # tl (drop 0 xs) = drop 0 (xs[0 := x])\n 2. \\<And>i xs.\n       \\<lbrakk>\\<And>xs.\n                   i < length xs \\<Longrightarrow>\n                   x # tl (drop i xs) = drop i (xs[i := x]);\n        Suc i < length xs\\<rbrakk>\n       \\<Longrightarrow> x # tl (drop (Suc i) xs) =\n                         drop (Suc i) (xs[Suc i := x])", "case (0 xs)"], ["proof (state)\nthis:\n  0 < length xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       0 < length xs \\<Longrightarrow>\n       x # tl (drop 0 xs) = drop 0 (xs[0 := x])\n 2. \\<And>i xs.\n       \\<lbrakk>\\<And>xs.\n                   i < length xs \\<Longrightarrow>\n                   x # tl (drop i xs) = drop i (xs[i := x]);\n        Suc i < length xs\\<rbrakk>\n       \\<Longrightarrow> x # tl (drop (Suc i) xs) =\n                         drop (Suc i) (xs[Suc i := x])", "thus ?case"], ["proof (prove)\nusing this:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. x # tl (drop 0 xs) = drop 0 (xs[0 := x])", "by (cases xs, auto)"], ["proof (state)\nthis:\n  x # tl (drop 0 xs) = drop 0 (xs[0 := x])\n\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       \\<lbrakk>\\<And>xs.\n                   i < length xs \\<Longrightarrow>\n                   x # tl (drop i xs) = drop i (xs[i := x]);\n        Suc i < length xs\\<rbrakk>\n       \\<Longrightarrow> x # tl (drop (Suc i) xs) =\n                         drop (Suc i) (xs[Suc i := x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       \\<lbrakk>\\<And>xs.\n                   i < length xs \\<Longrightarrow>\n                   x # tl (drop i xs) = drop i (xs[i := x]);\n        Suc i < length xs\\<rbrakk>\n       \\<Longrightarrow> x # tl (drop (Suc i) xs) =\n                         drop (Suc i) (xs[Suc i := x])", "case (Suc i xs)"], ["proof (state)\nthis:\n  i < length ?xs \\<Longrightarrow>\n  x # tl (drop i ?xs) = drop i (?xs[i := x])\n  Suc i < length xs\n\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       \\<lbrakk>\\<And>xs.\n                   i < length xs \\<Longrightarrow>\n                   x # tl (drop i xs) = drop i (xs[i := x]);\n        Suc i < length xs\\<rbrakk>\n       \\<Longrightarrow> x # tl (drop (Suc i) xs) =\n                         drop (Suc i) (xs[Suc i := x])", "thus ?case"], ["proof (prove)\nusing this:\n  i < length ?xs \\<Longrightarrow>\n  x # tl (drop i ?xs) = drop i (?xs[i := x])\n  Suc i < length xs\n\ngoal (1 subgoal):\n 1. x # tl (drop (Suc i) xs) = drop (Suc i) (xs[Suc i := x])", "by (cases xs, auto)"], ["proof (state)\nthis:\n  x # tl (drop (Suc i) xs) = drop (Suc i) (xs[Suc i := x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma update_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> list_repr i (update_i ba x) (xs [i := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i < length xs\\<rbrakk>\n    \\<Longrightarrow> list_repr i (update_i ba x) (xs[i := x])", "unfolding update_i_def list_repr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> i \\<le> length (xs[i := x]) \\<and>\n                      fst (fst ba, x # tl (snd ba)) =\n                      rev (take i (xs[i := x])) \\<and>\n                      snd (fst ba, x # tl (snd ba)) = drop i (xs[i := x])", "by (auto simp: Cons_tl_drop_update)"], ["", "definition update_im1 :: \"'a list_repr \\<Rightarrow> 'a \\<Rightarrow> 'a list_repr\" where\n  \"update_im1 ba x = (x # tl (fst ba), snd ba)\""], ["", "lemma update_im1: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> list_repr i (update_im1 ba x) (xs [i - 1 := x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_repr i (update_im1 ba x) (xs[i - 1 := x])", "unfolding update_im1_def list_repr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> i \\<le> length (xs[i - 1 := x]) \\<and>\n                      fst (x # tl (fst ba), snd ba) =\n                      rev (take i (xs[i - 1 := x])) \\<and>\n                      snd (x # tl (fst ba), snd ba) =\n                      drop i (xs[i - 1 := x])", "by (cases i, auto simp: rev_take_Suc)"], ["", "lemma tl_drop_Suc: \"tl (drop i xs) = drop (Suc i) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (drop i xs) = drop (Suc i) xs", "proof (induct i arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs. tl (drop 0 xs) = drop (Suc 0) xs\n 2. \\<And>i xs.\n       (\\<And>xs. tl (drop i xs) = drop (Suc i) xs) \\<Longrightarrow>\n       tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "case (0 xs)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>xs. tl (drop 0 xs) = drop (Suc 0) xs\n 2. \\<And>i xs.\n       (\\<And>xs. tl (drop i xs) = drop (Suc i) xs) \\<Longrightarrow>\n       tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (drop 0 xs) = drop (Suc 0) xs", "by (cases xs, auto)"], ["proof (state)\nthis:\n  tl (drop 0 xs) = drop (Suc 0) xs\n\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       (\\<And>xs. tl (drop i xs) = drop (Suc i) xs) \\<Longrightarrow>\n       tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       (\\<And>xs. tl (drop i xs) = drop (Suc i) xs) \\<Longrightarrow>\n       tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "case (Suc i xs)"], ["proof (state)\nthis:\n  tl (drop i ?xs) = drop (Suc i) ?xs\n\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       (\\<And>xs. tl (drop i xs) = drop (Suc i) xs) \\<Longrightarrow>\n       tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "thus ?case"], ["proof (prove)\nusing this:\n  tl (drop i ?xs) = drop (Suc i) ?xs\n\ngoal (1 subgoal):\n 1. tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs", "by (cases xs, auto)"], ["proof (state)\nthis:\n  tl (drop (Suc i) xs) = drop (Suc (Suc i)) xs\n\ngoal:\nNo subgoals!", "qed"], ["", "definition inc_i :: \"'a list_repr \\<Rightarrow> 'a list_repr\" where\n  \"inc_i ba = (case ba of (b,a) \\<Rightarrow> (hd a # b, tl a))\""], ["", "lemma inc_i: \"list_repr i ba xs \\<Longrightarrow> i < length xs \\<Longrightarrow> list_repr (Suc i) (inc_i ba) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i < length xs\\<rbrakk>\n    \\<Longrightarrow> list_repr (Suc i) (inc_i ba) xs", "unfolding list_repr_def inc_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i < length xs\\<rbrakk>\n    \\<Longrightarrow> Suc i \\<le> length xs \\<and>\n                      fst (case ba of\n                           (b, a) \\<Rightarrow> (hd a # b, tl a)) =\n                      rev (take (Suc i) xs) \\<and>\n                      snd (case ba of\n                           (b, a) \\<Rightarrow> (hd a # b, tl a)) =\n                      drop (Suc i) xs", "by (cases ba, auto simp: rev_take_Suc hd_drop_conv_nth tl_drop_Suc)"], ["", "definition dec_i :: \"'a list_repr \\<Rightarrow> 'a list_repr\" where\n  \"dec_i ba = (case ba of (b,a) \\<Rightarrow> (tl b, hd b # a))\""], ["", "lemma dec_i: \"list_repr i ba xs \\<Longrightarrow> i \\<noteq> 0 \\<Longrightarrow> list_repr (i - 1) (dec_i ba) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_repr i ba xs; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_repr (i - 1) (dec_i ba) xs", "unfolding list_repr_def dec_i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> length xs \\<and>\n             fst ba = rev (take i xs) \\<and> snd ba = drop i xs;\n     i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> i - 1 \\<le> length xs \\<and>\n                      fst (case ba of\n                           (b, a) \\<Rightarrow> (tl b, hd b # a)) =\n                      rev (take (i - 1) xs) \\<and>\n                      snd (case ba of\n                           (b, a) \\<Rightarrow> (tl b, hd b # a)) =\n                      drop (i - 1) xs", "by (cases ba; cases i, auto simp: rev_take_Suc hd_drop_conv_nth Cons_nth_drop_Suc)"], ["", "lemma dec_i_Suc: \"list_repr (Suc i) ba xs \\<Longrightarrow> list_repr i (dec_i ba) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_repr (Suc i) ba xs \\<Longrightarrow> list_repr i (dec_i ba) xs", "using dec_i[of \"Suc i\" ba xs]"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_repr (Suc i) ba xs; Suc i \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> list_repr (Suc i - 1) (dec_i ba) xs\n\ngoal (1 subgoal):\n 1. list_repr (Suc i) ba xs \\<Longrightarrow> list_repr i (dec_i ba) xs", "by auto"], ["", "end"]]}