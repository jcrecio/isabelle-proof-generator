{"file_name": "/home/qj213/afp-2021-10-22/thys/LLL_Basis_Reduction/More_IArray.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LLL_Basis_Reduction", "problem_names": ["lemma iarray_cong: \"n = m \\<Longrightarrow> (\\<And> i. i < m \\<Longrightarrow> f i = g i) \\<Longrightarrow> IArray.of_fun f n = IArray.of_fun g m\"", "lemma iarray_cong': \"(\\<And> i. i < n \\<Longrightarrow> f i = g i) \\<Longrightarrow> IArray.of_fun f n = IArray.of_fun g n\"", "lemma iarray_update_length[simp]: \"IArray.length (iarray_update a i x) = IArray.length a\"", "lemma iarray_length_of_fun[simp]: \"IArray.length (IArray.of_fun f n) = n\"", "lemma iarray_update_of_fun[simp]: \"iarray_update (IArray.of_fun f n) i x = IArray.of_fun (f (i := x)) n\"", "lemma iarray_append_code[code]: \"iarray_append xs x = IArray (IArray.list_of xs @ [x])\"", "lemma iarray_append_of_fun[simp]: \"iarray_append (IArray.of_fun f n) x = IArray.of_fun (f (n := x)) (Suc n)\"", "lemma iarray_of_fun_sub[simp]: \"i < n \\<Longrightarrow> IArray.of_fun f n !! i = f i\"", "lemma IArray_of_fun_conv: \"IArray xs = IArray.of_fun (\\<lambda> i. xs ! i) (length xs)\"", "lemmas iarray_simps = iarray_update_of_fun iarray_append_of_fun IArray_of_fun_conv iarray_of_fun_sub"], "translations": [["", "lemma iarray_cong: \"n = m \\<Longrightarrow> (\\<And> i. i < m \\<Longrightarrow> f i = g i) \\<Longrightarrow> IArray.of_fun f n = IArray.of_fun g m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = m; \\<And>i. i < m \\<Longrightarrow> f i = g i\\<rbrakk>\n    \\<Longrightarrow> IArray.of_fun f n = IArray.of_fun g m", "by auto"], ["", "lemma iarray_cong': \"(\\<And> i. i < n \\<Longrightarrow> f i = g i) \\<Longrightarrow> IArray.of_fun f n = IArray.of_fun g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i < n \\<Longrightarrow> f i = g i) \\<Longrightarrow>\n    IArray.of_fun f n = IArray.of_fun g n", "by (rule iarray_cong, auto)"], ["", "lemma iarray_update_length[simp]: \"IArray.length (iarray_update a i x) = IArray.length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.length (iarray_update a i x) = IArray.length a", "unfolding iarray_update_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.length\n     (IArray.of_fun (\\<lambda>j. if j = i then x else a !! j)\n       (IArray.length a)) =\n    IArray.length a", "by simp"], ["", "lemma iarray_length_of_fun[simp]: \"IArray.length (IArray.of_fun f n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.length (IArray.of_fun f n) = n", "by simp"], ["", "lemma iarray_update_of_fun[simp]: \"iarray_update (IArray.of_fun f n) i x = IArray.of_fun (f (i := x)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iarray_update (IArray.of_fun f n) i x = IArray.of_fun (f(i := x)) n", "unfolding iarray_update_def iarray_length_of_fun"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun (\\<lambda>j. if j = i then x else IArray.of_fun f n !! j)\n     n =\n    IArray.of_fun (f(i := x)) n", "by (rule iarray_cong, auto)"], ["", "fun iarray_append where \"iarray_append (IArray xs) x = IArray (xs @ [x])\""], ["", "lemma iarray_append_code[code]: \"iarray_append xs x = IArray (IArray.list_of xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iarray_append xs x = IArray (IArray.list_of xs @ [x])", "by (cases xs, auto)"], ["", "lemma iarray_append_of_fun[simp]: \"iarray_append (IArray.of_fun f n) x = IArray.of_fun (f (n := x)) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iarray_append (IArray.of_fun f n) x = IArray.of_fun (f(n := x)) (Suc n)", "by auto"], ["", "declare iarray_append.simps[simp del]"], ["", "lemma iarray_of_fun_sub[simp]: \"i < n \\<Longrightarrow> IArray.of_fun f n !! i = f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> IArray.of_fun f n !! i = f i", "by auto"], ["", "lemma IArray_of_fun_conv: \"IArray xs = IArray.of_fun (\\<lambda> i. xs ! i) (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray xs = IArray.of_fun ((!) xs) (length xs)", "by (auto intro!: nth_equalityI)"], ["", "declare IArray.of_fun_def[simp del]"], ["", "declare IArray.sub_def[simp del]"], ["", "lemmas iarray_simps = iarray_update_of_fun iarray_append_of_fun IArray_of_fun_conv iarray_of_fun_sub"], ["", "end"]]}