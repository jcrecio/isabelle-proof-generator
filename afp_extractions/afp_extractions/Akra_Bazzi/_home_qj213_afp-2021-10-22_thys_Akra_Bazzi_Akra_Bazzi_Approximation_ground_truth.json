{"file_name": "/home/qj213/afp-2021-10-22/thys/Akra_Bazzi/Akra_Bazzi_Approximation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Akra_Bazzi", "problem_names": ["lemma sum_alt: \"(\\<Sum>i<k. as!i * bs!i powr p') = (\\<Sum>i<k. as!i * exp (p' * ln (bs!i)))\"", "lemma akra_bazzi_p_rel_intros_aux:\n  \"1 < (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' < p\"\n  \"1 > (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' > p\"\n  \"1 \\<le> (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' \\<le> p\"\n  \"1 \\<ge> (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' \\<ge> p\"\n  \"(\\<Sum>i<k. as!i * exp (x * ln (bs!i))) \\<le> 1 \\<and> (\\<Sum>i<k. as!i * exp (y * ln (bs!i))) \\<ge> 1 \\<Longrightarrow> p \\<in> {y..x}\"\n  \"(\\<Sum>i<k. as!i * exp (x * ln (bs!i))) < 1 \\<and> (\\<Sum>i<k. as!i * exp (y * ln (bs!i))) > 1 \\<Longrightarrow> p \\<in> {y<..<x}\"", "lemmas akra_bazzi_p_rel_intros_exp = \n  akra_bazzi_params_nonzero.akra_bazzi_p_rel_intros_aux[rotated, OF _ akra_bazzi_params_nonzeroI]", "lemma eval_akra_bazzi_sum:\n  \"(\\<Sum>i<0. as!i * exp (x * ln (bs!i))) = 0\"\n  \"(\\<Sum>i<Suc 0. (a#as)!i * exp (x * ln ((b#bs)!i))) = a * exp (x * ln b)\"\n  \"(\\<Sum>i<Suc k. (a#as)!i * exp (x * ln ((b#bs)!i))) = a * exp (x * ln b) + \n      (\\<Sum>i<k. as!i * exp (x * ln (bs!i)))\""], "translations": [["", "lemma sum_alt: \"(\\<Sum>i<k. as!i * bs!i powr p') = (\\<Sum>i<k. as!i * exp (p' * ln (bs!i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<k. as ! i * bs ! i powr p') =\n    (\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i)))", "proof (intro sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {..<k} = {..<k}\n 2. \\<And>x.\n       x \\<in> {..<k} \\<Longrightarrow>\n       as ! x * bs ! x powr p' = as ! x * exp (p' * ln (bs ! x))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. {..<k} = {..<k}\n 2. \\<And>x.\n       x \\<in> {..<k} \\<Longrightarrow>\n       as ! x * bs ! x powr p' = as ! x * exp (p' * ln (bs ! x))", "assume \"i \\<in> {..<k}\""], ["proof (state)\nthis:\n  i \\<in> {..<k}\n\ngoal (2 subgoals):\n 1. {..<k} = {..<k}\n 2. \\<And>x.\n       x \\<in> {..<k} \\<Longrightarrow>\n       as ! x * bs ! x powr p' = as ! x * exp (p' * ln (bs ! x))", "with b_bounds"], ["proof (chain)\npicking this:\n  ?b \\<in> set bs \\<Longrightarrow> ?b \\<in> {0<..<1}\n  i \\<in> {..<k}", "have \"bs!i > 0\""], ["proof (prove)\nusing this:\n  ?b \\<in> set bs \\<Longrightarrow> ?b \\<in> {0<..<1}\n  i \\<in> {..<k}\n\ngoal (1 subgoal):\n 1. 0 < bs ! i", "by simp"], ["proof (state)\nthis:\n  0 < bs ! i\n\ngoal (2 subgoals):\n 1. {..<k} = {..<k}\n 2. \\<And>x.\n       x \\<in> {..<k} \\<Longrightarrow>\n       as ! x * bs ! x powr p' = as ! x * exp (p' * ln (bs ! x))", "thus \"as!i * bs!i powr p' = as!i * exp (p' * ln (bs!i))\""], ["proof (prove)\nusing this:\n  0 < bs ! i\n\ngoal (1 subgoal):\n 1. as ! i * bs ! i powr p' = as ! i * exp (p' * ln (bs ! i))", "by (simp add: powr_def)"], ["proof (state)\nthis:\n  as ! i * bs ! i powr p' = as ! i * exp (p' * ln (bs ! i))\n\ngoal (1 subgoal):\n 1. {..<k} = {..<k}", "qed simp"], ["", "lemma akra_bazzi_p_rel_intros_aux:\n  \"1 < (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' < p\"\n  \"1 > (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' > p\"\n  \"1 \\<le> (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' \\<le> p\"\n  \"1 \\<ge> (\\<Sum>i<k. as!i * exp (p' * ln (bs!i))) \\<Longrightarrow> p' \\<ge> p\"\n  \"(\\<Sum>i<k. as!i * exp (x * ln (bs!i))) \\<le> 1 \\<and> (\\<Sum>i<k. as!i * exp (y * ln (bs!i))) \\<ge> 1 \\<Longrightarrow> p \\<in> {y..x}\"\n  \"(\\<Sum>i<k. as!i * exp (x * ln (bs!i))) < 1 \\<and> (\\<Sum>i<k. as!i * exp (y * ln (bs!i))) > 1 \\<Longrightarrow> p \\<in> {y<..<x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 < (\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<Longrightarrow>\n      p' < p) &&&\n     ((\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) < 1 \\<Longrightarrow>\n      p < p') &&&\n     (1 \\<le> (\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<Longrightarrow>\n      p' \\<le> p)) &&&\n    ((\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<le> 1 \\<Longrightarrow>\n     p \\<le> p') &&&\n    ((\\<Sum>i<k. as ! i * exp (x * ln (bs ! i))) \\<le> 1 \\<and>\n     1 \\<le> (\\<Sum>i<k. as ! i * exp (y * ln (bs ! i))) \\<Longrightarrow>\n     p \\<in> {y..x}) &&&\n    ((\\<Sum>i<k. as ! i * exp (x * ln (bs ! i))) < 1 \\<and>\n     1 < (\\<Sum>i<k. as ! i * exp (y * ln (bs ! i))) \\<Longrightarrow>\n     p \\<in> {y<..<x})", "using p_lessI p_greaterI p_leI p_geI p_boundsI p_boundsI'"], ["proof (prove)\nusing this:\n  (\\<Sum>i<k. as ! i * bs ! i powr ?p') < 1 \\<Longrightarrow> p < ?p'\n  1 < (\\<Sum>i<k. as ! i * bs ! i powr ?p') \\<Longrightarrow> ?p' < p\n  (\\<Sum>i<k. as ! i * bs ! i powr ?p') \\<le> 1 \\<Longrightarrow>\n  p \\<le> ?p'\n  1 \\<le> (\\<Sum>i<k. as ! i * bs ! i powr ?p') \\<Longrightarrow>\n  ?p' \\<le> p\n  (\\<Sum>i<k. as ! i * bs ! i powr ?x) \\<le> 1 \\<and>\n  1 \\<le> (\\<Sum>i<k. as ! i * bs ! i powr ?y) \\<Longrightarrow>\n  p \\<in> {?y..?x}\n  (\\<Sum>i<k. as ! i * bs ! i powr ?x) < 1 \\<and>\n  1 < (\\<Sum>i<k. as ! i * bs ! i powr ?y) \\<Longrightarrow>\n  p \\<in> {?y<..<?x}\n\ngoal (1 subgoal):\n 1. ((1 < (\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<Longrightarrow>\n      p' < p) &&&\n     ((\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) < 1 \\<Longrightarrow>\n      p < p') &&&\n     (1 \\<le> (\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<Longrightarrow>\n      p' \\<le> p)) &&&\n    ((\\<Sum>i<k. as ! i * exp (p' * ln (bs ! i))) \\<le> 1 \\<Longrightarrow>\n     p \\<le> p') &&&\n    ((\\<Sum>i<k. as ! i * exp (x * ln (bs ! i))) \\<le> 1 \\<and>\n     1 \\<le> (\\<Sum>i<k. as ! i * exp (y * ln (bs ! i))) \\<Longrightarrow>\n     p \\<in> {y..x}) &&&\n    ((\\<Sum>i<k. as ! i * exp (x * ln (bs ! i))) < 1 \\<and>\n     1 < (\\<Sum>i<k. as ! i * exp (y * ln (bs ! i))) \\<Longrightarrow>\n     p \\<in> {y<..<x})", "by (simp_all only: sum_alt)"], ["", "end"], ["", "lemmas akra_bazzi_p_rel_intros_exp = \n  akra_bazzi_params_nonzero.akra_bazzi_p_rel_intros_aux[rotated, OF _ akra_bazzi_params_nonzeroI]"], ["", "lemma eval_akra_bazzi_sum:\n  \"(\\<Sum>i<0. as!i * exp (x * ln (bs!i))) = 0\"\n  \"(\\<Sum>i<Suc 0. (a#as)!i * exp (x * ln ((b#bs)!i))) = a * exp (x * ln b)\"\n  \"(\\<Sum>i<Suc k. (a#as)!i * exp (x * ln ((b#bs)!i))) = a * exp (x * ln b) + \n      (\\<Sum>i<k. as!i * exp (x * ln (bs!i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<0. as ! i * exp (x * ln (bs ! i))) = (0::'a) &&&\n    (\\<Sum>i<Suc 0. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n    a * exp (x * ln b) &&&\n    (\\<Sum>i<Suc k. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n    a * exp (x * ln b) + (\\<Sum>i<k. as ! i * exp (x * ln (bs ! i)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Sum>i<Suc 0. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n    a * exp (x * ln b)\n 2. (\\<Sum>i<Suc k. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n    a * exp (x * ln b) + (\\<Sum>i<k. as ! i * exp (x * ln (bs ! i)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i<Suc k. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n    a * exp (x * ln b) + (\\<Sum>i<k. as ! i * exp (x * ln (bs ! i)))", "apply (induction k arbitrary: a as b bs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a as b bs.\n       (\\<Sum>i<Suc 0. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n       a * exp (x * ln b) + (\\<Sum>i<0. as ! i * exp (x * ln (bs ! i)))\n 2. \\<And>k a as b bs.\n       (\\<And>a as b bs.\n           (\\<Sum>i<Suc k. (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n           a * exp (x * ln b) +\n           (\\<Sum>i<k. as ! i * exp (x * ln (bs ! i)))) \\<Longrightarrow>\n       (\\<Sum>i<Suc (Suc k). (a # as) ! i * exp (x * ln ((b # bs) ! i))) =\n       a * exp (x * ln b) + (\\<Sum>i<Suc k. as ! i * exp (x * ln (bs ! i)))", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* end workaround *)"], ["", "ML \\<open>\nsignature AKRA_BAZZI_APPROXIMATION =\nsig\n  val akra_bazzi_approximate_tac : int -> Proof.context -> int -> tactic\nend\n\nstructure Akra_Bazzi_Approximation: AKRA_BAZZI_APPROXIMATION =\nstruct\n\nfun akra_bazzi_approximate_tac prec ctxt =\n  let \n    val simps = @{thms eval_length eval_akra_bazzi_sum add_0_left add_0_right \n                       mult_1_left mult_1_right}\n  in\n    SELECT_GOAL (\n      resolve_tac ctxt @{thms akra_bazzi_p_rel_intros_exp} 1\n      THEN ALLGOALS (fn i => \n        if i > 1 then \n          SELECT_GOAL (\n            Local_Defs.unfold_tac ctxt \n              @{thms bex_set_simps ball_set_simps greaterThanLessThan_iff eval_length}\n            THEN TRY (SOLVE (Eval_Numeral.eval_numeral_tac ctxt 1))\n          ) i\n        else \n          SELECT_GOAL (Local_Defs.unfold_tac ctxt simps) i\n          THEN Approximation.approximation_tac prec [] NONE ctxt i\n      ) \n    )\n  end\n   \nend;\n\\<close>"], ["", "method_setup akra_bazzi_approximate = \\<open>\n  Scan.lift Parse.nat >> \n    (fn prec => fn ctxt => \n      SIMPLE_METHOD' (Akra_Bazzi_Approximation.akra_bazzi_approximate_tac prec ctxt))\n\\<close> \"approximate transcendental Akra-Bazzi parameters\""], ["", "end"]]}