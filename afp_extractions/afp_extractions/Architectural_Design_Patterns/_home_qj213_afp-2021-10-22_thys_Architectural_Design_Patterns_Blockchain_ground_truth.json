{"file_name": "/home/qj213/afp-2021-10-22/thys/Architectural_Design_Patterns/Blockchain.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Architectural_Design_Patterns", "problem_names": ["lemma max_ex:\n  fixes XS::\"('a BC) set\"\n  assumes \"XS \\<noteq> {}\"\n    and \"finite XS\"\n  shows \"\\<exists>xs\\<in>XS. (\\<forall>ys\\<in>XS. length ys \\<le> length xs)\"", "lemma max_prop:\n  fixes XS::\"('a BC) set\"\n  assumes \"XS \\<noteq> {}\"\n    and \"finite XS\"\n  shows \"MAX XS \\<in> XS\"\n    and \"\\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)\"", "lemma max_less:\n  fixes b::\"'a BC\" and b'::\"'a BC\" and B::\"('a BC) set\"\n  assumes \"b\\<in>B\"\n    and \"finite B\"\n    and \"length b > length b'\"\n  shows \"length (MAX B) > length b'\"", "lemma init_model:\n  assumes \"\\<not> (\\<exists>n'. latestAct_cond nid t n n')\"\n    and \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []\"", "lemma fwd_bc:\n  fixes nid and t::\"nat \\<Rightarrow> cnf\" and t'::\"nat \\<Rightarrow> 'ND\"\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"pout (\\<sigma>\\<^bsub>nid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\"", "lemma finite_input:\n  fixes t n nid\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  defines \"dep nid' \\<equiv> pout (\\<sigma>\\<^bsub>nid'\\<^esub>(t n))\"\n  shows \"finite (pin (cmp nid (t n)))\"", "lemma nempty_input:\n  fixes t n nid\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n    and \"honest nid\"\n  shows \"pin (cmp nid (t n))\\<noteq>{}\"", "lemma onlyone:\n  assumes \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<exists>!i. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\"", "lemma bhv_hn_ex:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and tid\n  assumes \"honest tid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\"", "lemma bhv_hn_in:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and tid\n  assumes \"honest tid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\"", "lemma bhv_hn_context:\n  assumes \"honest tid\"\n      and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n      and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    shows \"\\<exists>nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and> (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b]) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"", "lemma bhv_dn:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and uid\n  assumes \"\\<not> honest uid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n         \\<or> mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @ [b])\"", "lemma bhv_dn_context:\n  assumes \"\\<not> honest uid\"\n      and \"\\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>\"\n      and \"\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<exists>nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and> (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> (\\<exists>b. prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b]))\n  \\<or> \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\"", "lemma mbc_ex:\n  fixes t n\n  shows \"\\<exists>x. mbc_cond t n x\"", "lemma mbc_prop[simp]:\n  shows \"mbc_cond t n (MBC t n)\"", "lemma pow_ex:\n  fixes t n\n  shows \"pow_cond t n (length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>(t n))))\"\n    and \"\\<forall>x'. pow_cond t n x' \\<longrightarrow> x'\\<ge>length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>(t n)))\"", "lemma pow_prop:\n  \"pow_cond t n (PoW t n)\"", "lemma pow_eq:\n  fixes n\n  assumes \"\\<exists>tid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>tid\\<^esub>(t n))) = x\"\n    and \"\\<forall>tid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>tid\\<^esub>(t n))) \\<le> x\"\n  shows \"PoW t n = x\"", "lemma pow_mbc:\n  shows \"length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) = PoW t n\"", "lemma pow_less:\n  fixes t n nid\n  assumes \"pow_cond t n x\"\n  shows \"PoW t n \\<le> x\"", "lemma pow_le_max:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\"", "lemma pow_ge_lgth:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n\"", "lemma pow_le_lgth:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n    and \"\\<not>(\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\"\n  shows \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<ge> PoW t n\"", "lemma pow_mono:\n  shows \"n'\\<ge>n \\<Longrightarrow> PoW t n' \\<ge> PoW t n\"", "lemma pow_equals:\n  assumes \"PoW t n = PoW t n'\"\n  and \"n'\\<ge>n\"\n  and \"n''\\<ge>n\"\n  and \"n''\\<le>n'\"\nshows \"PoW t n = PoW t n''\"", "lemma pow_mining_suc:\n    assumes \"hmining t (Suc n)\"\n    shows \"PoW t n < PoW t (Suc n)\"", "lemma his_act:\n  assumes \"(n',nid') \\<in> his t n nid\"\n  shows \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\"", "lemma hisPrev_prop:\n  assumes \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  shows \"hisPred t n nid n' < n'\" and \"\\<exists>nid'. (hisPred t n nid n',nid')\\<in> his t n nid\"", "lemma hisPrev_nex_less:\n  assumes \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  shows \"\\<not>(\\<exists>x\\<in>his t n nid. fst x < n' \\<and> fst x>hisPred t n nid n')\"", "lemma his_le:\n  assumes \"x \\<in> his t n nid\"\n  shows \"fst x\\<le>n\"", "lemma his_determ_base:\n  shows \"(n, nid') \\<in> his t n nid \\<Longrightarrow> nid'=nid\"", "lemma hisPrev_same:\n  assumes \"\\<exists>n'<n''. \\<exists>nid'. (n',nid')\\<in> his t n nid\"\n  and \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  and \"(n',nid')\\<in> his t n nid\"\n  and \"(n'',nid'')\\<in> his t n nid\"\n  and \"hisPred t n nid n'=hisPred t n nid n''\"\n  shows \"n'=n''\"", "lemma his_determ_ext:\n  shows \"n'\\<le>n \\<Longrightarrow> (\\<exists>nid'. (n',nid')\\<in>his t n nid) \\<Longrightarrow> (\\<exists>!nid'. (n',nid')\\<in>his t n nid) \\<and>\n    ((\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x) \\<and>\n    (hisPred t n nid n', (SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x))\"", "lemma devBC_some[simp]: assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\" shows \"devBC t n nid n = Some nid\"", "lemma devBC_act: assumes \"\\<not> Option.is_none (devBC t n nid n')\" shows \"\\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>\"", "lemma his_ex:\n  assumes \"\\<not>Option.is_none (devBC t n nid n')\"\n  shows \"\\<exists>nid'. (n',nid')\\<in>his t n nid\"", "lemma devExt_nopt_leq:\n  assumes \"\\<not>Option.is_none (devBC t n nid n')\"\n  shows \"n'\\<le>n\"", "lemma devExt_same:\n  assumes \"\\<forall>n'''>n'. n'''\\<le>n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\"\n    and \"n'\\<ge>n\\<^sub>s\"\n    and \"n'''\\<le>n''\"\n  shows \"n'''\\<ge>n'\\<Longrightarrow>devExt t n nid n\\<^sub>s (n'''-n\\<^sub>s) = devExt t n nid n\\<^sub>s (n'-n\\<^sub>s)\"", "lemma devExt_bc[simp]:\n  assumes \"\\<not> Option.is_none (devBC t n nid (n'+n''))\"\n  shows \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n'+n''))\\<^esub>(t (n'+n'')))\"", "lemma devExt_greatest:\n  assumes \"\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\"\n    and \"Option.is_none (devBC t n nid (n'+n''))\" and \"\\<not> n''=0\"\n  shows \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n''')))\\<^esub>(t (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n'''))))\"", "lemma devExt_shift: \"devExt t n nid (n'+n'') 0 = devExt t n nid n' n''\"", "lemma devExt_bc_geq:\n  assumes \"\\<not> Option.is_none (devBC t n nid n')\" and \"n'\\<ge>n\\<^sub>s\"\n  shows \"devExt t n nid n\\<^sub>s (n'-n\\<^sub>s) = bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>(t n'))\" (is \"?LHS = ?RHS\")", "lemma his_bc_empty:\n  assumes \"(n',nid')\\<in> his t n nid\" and \"\\<not>(\\<exists>n''<n'. \\<exists>nid''. (n'',nid'')\\<in> his t n nid)\"\n  shows \"bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = []\"", "lemma devExt_devop:\n  \"prefix (devExt t n nid n\\<^sub>s (Suc n')) (devExt t n nid n\\<^sub>s n') \\<or> (\\<exists>b. devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n' @ [b]) \\<and> \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and> \\<parallel>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n')\\<^esub> \\<and> n\\<^sub>s + Suc n' \\<le> n \\<and> mining (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n')))\"", "theorem blockchain_save:\n  fixes t::\"nat\\<Rightarrow>cnf\" and n\\<^sub>s and sbc and n\n  assumes \"\\<forall>nid. honest nid \\<longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t (\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>))))\"\n    and \"\\<forall>nid\\<in>actDn (t n\\<^sub>s). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n\\<^sub>s))) < length sbc\"\n    and \"PoW t n\\<^sub>s\\<ge>length sbc + cb\"\n    and \"\\<forall>n'<n\\<^sub>s. \\<forall>nid. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub> \\<longrightarrow> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n')) < length sbc \\<or> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n')))\"\n    and \"n\\<ge>n\\<^sub>s\"\n  shows \"\\<forall>nid \\<in> actHn (t n). prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)))\""], "translations": [["", "lemma max_ex:\n  fixes XS::\"('a BC) set\"\n  assumes \"XS \\<noteq> {}\"\n    and \"finite XS\"\n  shows \"\\<exists>xs\\<in>XS. (\\<forall>ys\\<in>XS. length ys \\<le> length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs", "proof (rule Finite_Set.finite_ne_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. finite XS\n 2. XS \\<noteq> {}\n 3. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 4. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "show \"finite XS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite XS", "using assms"], ["proof (prove)\nusing this:\n  XS \\<noteq> {}\n  finite XS\n\ngoal (1 subgoal):\n 1. finite XS", "by simp"], ["proof (state)\nthis:\n  finite XS\n\ngoal (3 subgoals):\n 1. XS \\<noteq> {}\n 2. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 3. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. XS \\<noteq> {}\n 2. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 3. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "from assms"], ["proof (chain)\npicking this:\n  XS \\<noteq> {}\n  finite XS", "show \"XS \\<noteq> {}\""], ["proof (prove)\nusing this:\n  XS \\<noteq> {}\n  finite XS\n\ngoal (1 subgoal):\n 1. XS \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  XS \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "fix x::\"'a BC\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n 2. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "show \"\\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs", "by simp"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>{x}. \\<forall>ys\\<in>{x}. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "fix zs::\"'a BC\" and F::\"('a BC) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "assume \"finite F\" and \"F \\<noteq> {}\" and \"zs \\<notin> F\" and \"\\<exists>xs\\<in>F. \\<forall>ys\\<in>F. length ys \\<le> length xs\""], ["proof (state)\nthis:\n  finite F\n  F \\<noteq> {}\n  zs \\<notin> F\n  \\<exists>xs\\<in>F. \\<forall>ys\\<in>F. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "then"], ["proof (chain)\npicking this:\n  finite F\n  F \\<noteq> {}\n  zs \\<notin> F\n  \\<exists>xs\\<in>F. \\<forall>ys\\<in>F. length ys \\<le> length xs", "obtain xs where \"xs\\<in>F\" and \"\\<forall>ys\\<in>F. length ys \\<le> length xs\""], ["proof (prove)\nusing this:\n  finite F\n  F \\<noteq> {}\n  zs \\<notin> F\n  \\<exists>xs\\<in>F. \\<forall>ys\\<in>F. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>xs \\<in> F;\n         \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs \\<in> F\n  \\<forall>ys\\<in>F. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<exists>xs\\<in>F.\n           \\<forall>ys\\<in>F. length ys \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<in>insert x F.\n                            \\<forall>ys\\<in>insert x F.\n                               length ys \\<le> length xs", "show \"\\<exists>xs\\<in>insert zs F. \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "assume \"length zs \\<ge> length xs\""], ["proof (state)\nthis:\n  length xs \\<le> length zs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "with \\<open>\\<forall>ys\\<in>F. length ys \\<le> length xs\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>ys\\<in>F. length ys \\<le> length xs\n  length xs \\<le> length zs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>ys\\<in>F. length ys \\<le> length xs\n  length xs \\<le> length zs\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>insert zs F.\n     \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length zs \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length zs \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "assume \"\\<not> length zs \\<ge> length xs\""], ["proof (state)\nthis:\n  \\<not> length xs \\<le> length zs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length zs \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "hence \"length zs \\<le> length xs\""], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> length zs\n\ngoal (1 subgoal):\n 1. length zs \\<le> length xs", "by simp"], ["proof (state)\nthis:\n  length zs \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length zs \\<Longrightarrow>\n    \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "with \\<open>xs \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  xs \\<in> F\n  length zs \\<le> length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<in> F\n  length zs \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "using \\<open>\\<forall>ys\\<in>F. length ys \\<le> length xs\\<close>"], ["proof (prove)\nusing this:\n  xs \\<in> F\n  length zs \\<le> length xs\n  \\<forall>ys\\<in>F. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>insert zs F.\n       \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>insert zs F.\n     \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>insert zs F.\n     \\<forall>ys\\<in>insert zs F. length ys \\<le> length xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma max_prop:\n  fixes XS::\"('a BC) set\"\n  assumes \"XS \\<noteq> {}\"\n    and \"finite XS\"\n  shows \"MAX XS \\<in> XS\"\n    and \"\\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MAX XS \\<in> XS &&& \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. MAX XS \\<in> XS\n 2. \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)", "from assms"], ["proof (chain)\npicking this:\n  XS \\<noteq> {}\n  finite XS", "have \"\\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs\""], ["proof (prove)\nusing this:\n  XS \\<noteq> {}\n  finite XS\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs", "using max_ex[of XS]"], ["proof (prove)\nusing this:\n  XS \\<noteq> {}\n  finite XS\n  \\<lbrakk>XS \\<noteq> {}; finite XS\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs\\<in>XS.\n                       \\<forall>ys\\<in>XS. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs\n\ngoal (2 subgoals):\n 1. MAX XS \\<in> XS\n 2. \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)", "with MAX_def[of XS]"], ["proof (chain)\npicking this:\n  MAX XS = (SOME b. max_cond XS b)\n  \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs", "show \"MAX XS \\<in> XS\" and \"\\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)\""], ["proof (prove)\nusing this:\n  MAX XS = (SOME b. max_cond XS b)\n  \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. MAX XS \\<in> XS &&& \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)", "using someI_ex[of \"\\<lambda>b. b \\<in> XS \\<and> (\\<forall>b'\\<in>XS. length b' \\<le> length b)\"]"], ["proof (prove)\nusing this:\n  MAX XS = (SOME b. max_cond XS b)\n  \\<exists>xs\\<in>XS. \\<forall>ys\\<in>XS. length ys \\<le> length xs\n  \\<exists>x. max_cond XS x \\<Longrightarrow>\n  max_cond XS (SOME x. max_cond XS x)\n\ngoal (1 subgoal):\n 1. MAX XS \\<in> XS &&& \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)", "by auto"], ["proof (state)\nthis:\n  MAX XS \\<in> XS\n  \\<forall>b'\\<in>XS. length b' \\<le> length (MAX XS)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma max_less:\n  fixes b::\"'a BC\" and b'::\"'a BC\" and B::\"('a BC) set\"\n  assumes \"b\\<in>B\"\n    and \"finite B\"\n    and \"length b > length b'\"\n  shows \"length (MAX B) > length b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "from assms"], ["proof (chain)\npicking this:\n  b \\<in> B\n  finite B\n  length b' < length b", "have \"\\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  finite B\n  length b' < length b\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs", "using max_ex[of B]"], ["proof (prove)\nusing this:\n  b \\<in> B\n  finite B\n  length b' < length b\n  \\<lbrakk>B \\<noteq> {}; finite B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs\\<in>B.\n                       \\<forall>ys\\<in>B. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "with MAX_def[of B]"], ["proof (chain)\npicking this:\n  MAX B = (SOME b. max_cond B b)\n  \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs", "have \"\\<forall>b'\\<in>B. length b' \\<le> length (MAX B)\""], ["proof (prove)\nusing this:\n  MAX B = (SOME b. max_cond B b)\n  \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<forall>b'\\<in>B. length b' \\<le> length (MAX B)", "using someI_ex[of \"\\<lambda>b. b \\<in> B \\<and> (\\<forall>b'\\<in>B. length b' \\<le> length b)\"]"], ["proof (prove)\nusing this:\n  MAX B = (SOME b. max_cond B b)\n  \\<exists>xs\\<in>B. \\<forall>ys\\<in>B. length ys \\<le> length xs\n  \\<exists>x. max_cond B x \\<Longrightarrow>\n  max_cond B (SOME x. max_cond B x)\n\ngoal (1 subgoal):\n 1. \\<forall>b'\\<in>B. length b' \\<le> length (MAX B)", "by auto"], ["proof (state)\nthis:\n  \\<forall>b'\\<in>B. length b' \\<le> length (MAX B)\n\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "with \\<open>b\\<in>B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B\n  \\<forall>b'\\<in>B. length b' \\<le> length (MAX B)", "have \"length b \\<le> length (MAX B)\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  \\<forall>b'\\<in>B. length b' \\<le> length (MAX B)\n\ngoal (1 subgoal):\n 1. length b \\<le> length (MAX B)", "by simp"], ["proof (state)\nthis:\n  length b \\<le> length (MAX B)\n\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "with \\<open>length b > length b'\\<close>"], ["proof (chain)\npicking this:\n  length b' < length b\n  length b \\<le> length (MAX B)", "show ?thesis"], ["proof (prove)\nusing this:\n  length b' < length b\n  length b \\<le> length (MAX B)\n\ngoal (1 subgoal):\n 1. length b' < length (MAX B)", "by simp"], ["proof (state)\nthis:\n  length b' < length (MAX B)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Blockchain Architectures\""], ["", "text \\<open>\n  In the following we describe the locale for blockchain architectures.\n\\<close>"], ["", "locale Blockchain = dynamic_component cmp active\n  for active :: \"'nid \\<Rightarrow> cnf \\<Rightarrow> bool\" (\"\\<parallel>_\\<parallel>\\<^bsub>_\\<^esub>\" [0,110]60)\n    and cmp :: \"'nid \\<Rightarrow> cnf \\<Rightarrow> 'ND\" (\"\\<sigma>\\<^bsub>_\\<^esub>(_)\" [0,110]60) +\n  fixes pin :: \"'ND \\<Rightarrow> ('nid BC) set\"\n    and pout :: \"'ND \\<Rightarrow> 'nid BC\"\n    and bc :: \"'ND \\<Rightarrow> 'nid BC\"\n    and mining :: \"'ND \\<Rightarrow> bool\"\n    and honest :: \"'nid \\<Rightarrow> bool\"\n    and actHn :: \"cnf \\<Rightarrow> 'nid set\"\n    and actDn :: \"cnf \\<Rightarrow> 'nid set\"\n    and PoW:: \"trace \\<Rightarrow> nat \\<Rightarrow> nat\"\n    and hmining:: \"trace \\<Rightarrow> nat \\<Rightarrow> bool\"\n    and dmining:: \"trace \\<Rightarrow> nat \\<Rightarrow> bool\"\n    and cb:: nat\n  defines \"actHn k \\<equiv> {nid. \\<parallel>nid\\<parallel>\\<^bsub>k\\<^esub> \\<and> honest nid}\"\n    and \"actDn k \\<equiv> {nid. \\<parallel>nid\\<parallel>\\<^bsub>k\\<^esub> \\<and> \\<not> honest nid}\"\n    and \"PoW t n \\<equiv> (LEAST x. \\<forall>nid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n))) \\<le> x)\"\n    and \"hmining t \\<equiv> (\\<lambda>n. \\<exists>nid\\<in>actHn (t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>(t n)))\"\n    and \"dmining t \\<equiv> (\\<lambda>n. \\<exists>nid\\<in>actDn (t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>(t n)))\"\n  assumes consensus: \"\\<And>nid t t' bc'::('nid BC). \\<lbrakk>honest nid\\<rbrakk> \\<Longrightarrow> eval nid t t' 0\n    (\\<box>\\<^sub>b ([\\<lambda>nd. bc' = (if (\\<exists>b\\<in>pin nd. length b > length (bc nd)) then (MAX (pin nd)) else (bc nd))]\\<^sub>b\n      \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [\\<lambda>nd.(\\<not> mining nd \\<and> bc nd = bc' \\<or> mining nd \\<and> (\\<exists>b. bc nd = bc' @ [b]))]\\<^sub>b))\"\n    and attacker: \"\\<And>nid t t' bc'. \\<lbrakk>\\<not> honest nid\\<rbrakk> \\<Longrightarrow> eval nid t t' 0\n    (\\<box>\\<^sub>b ([\\<lambda>nd. bc' = (SOME b. b \\<in> (pin nd \\<union> {bc nd}))]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b [\\<lambda>nd.(\\<not> mining nd \\<and> prefix (bc nd) bc' \\<or> mining nd \\<and> (\\<exists>b. bc nd = bc' @ [b]))]\\<^sub>b))\"\n    and forward: \"\\<And>nid t t'. eval nid t t' 0 (\\<box>\\<^sub>b [\\<lambda>nd. pout nd = bc nd]\\<^sub>b)\"\n    \\<comment> \\<open>At each time point a node will forward its blockchain to the network\\<close>\n    and init: \"\\<And>nid t t'. eval nid t t' 0 [\\<lambda>nd. bc nd=[]]\\<^sub>b\"\n    and conn: \"\\<And>k nid. \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>k\\<^esub>; honest nid\\<rbrakk>\n      \\<Longrightarrow> pin (cmp nid k) = (\\<Union>nid'\\<in>actHn k. {pout (cmp nid' k)})\"\n    and act: \"\\<And>t n::nat. finite {nid::'nid. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>}\"\n    and actHn: \"\\<And>t n::nat. \\<exists>nid. honest nid \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub> \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\"\n    and fair: \"\\<And>n n'. ccard n n' (dmining t) > cb \\<Longrightarrow> ccard n n' (hmining t) > cb\"\n    and closed: \"\\<And>t nid b n::nat. \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>; b \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>(t n))\\<rbrakk> \\<Longrightarrow> \\<exists>nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub> \\<and> bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n)) = b\"\n    and mine: \"\\<And>t nid n::nat. \\<lbrakk>honest nid; \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>; mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\\<rbrakk> \\<Longrightarrow> \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\nbegin"], ["", "lemma init_model:\n  assumes \"\\<not> (\\<exists>n'. latestAct_cond nid t n n')\"\n    and \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "with init"], ["proof (chain)\npicking this:\n  eval ?nid ?t ?t' 0 [\\<lambda>nd. bc nd = []]\\<^sub>b\n  \\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) = []\""], ["proof (prove)\nusing this:\n  eval ?nid ?t ?t' 0 [\\<lambda>nd. bc nd = []]\\<^sub>b\n  \\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n    []", "using baEA[of 0 nid t]"], ["proof (prove)\nusing this:\n  eval ?nid ?t ?t' 0 [\\<lambda>nd. bc nd = []]\\<^sub>b\n  \\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>nid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval nid t ?t' 0 [?\\<phi>]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n    []", "by blast"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n  []\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "moreover"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n  []\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "from assms"], ["proof (chain)\npicking this:\n  \\<nexists>n'. latestAct_cond nid t n n'\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"n=\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<nexists>n'. latestAct_cond nid t n n'\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. n = \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>", "using nxtAct_eq"], ["proof (prove)\nusing this:\n  \\<nexists>n'. latestAct_cond nid t n n'\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<lbrakk>?n \\<le> ?n'; \\<parallel>?c\\<parallel>\\<^bsub>?t ?n'\\<^esub>;\n   \\<forall>n''\\<ge>?n.\n      n'' < ?n' \\<longrightarrow>\n      \\<not> \\<parallel>?c\\<parallel>\\<^bsub>?t n''\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?n' =\n                    \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n = \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n = \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "ultimately"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n  []\n  n = \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>) =\n  []\n  n = \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fwd_bc:\n  fixes nid and t::\"nat \\<Rightarrow> cnf\" and t'::\"nat \\<Rightarrow> 'ND\"\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"pout (\\<sigma>\\<^bsub>nid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)", "using assms forward globEANow[THEN baEANow[of nid t t' n]]"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  eval ?nid ?t ?t' 0 (\\<box>\\<^sub>b[\\<lambda>nd. pout nd = bc nd]\\<^sub>b)\n  \\<lbrakk>?n1 \\<le> n; \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>;\n   eval nid t t' ?n1 (\\<box>\\<^sub>b[?\\<phi>]\\<^sub>b);\n   \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi> (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)", "by blast"], ["", "lemma finite_input:\n  fixes t n nid\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  defines \"dep nid' \\<equiv> pout (\\<sigma>\\<^bsub>nid'\\<^esub>(t n))\"\n  shows \"finite (pin (cmp nid (t n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "have \"finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "using act"], ["proof (prove)\nusing this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "by auto"], ["proof (state)\nthis:\n  finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "have \"pin (cmp nid (t n)) \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n    \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<Longrightarrow>\n       x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<Longrightarrow>\n       x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "assume \"x \\<in> pin (cmp nid (t n))\""], ["proof (state)\nthis:\n  x \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<Longrightarrow>\n       x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "show \"x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "from assms"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  dep ?nid'2 \\<equiv> pout (\\<sigma>\\<^bsub>?nid'2\\<^esub>t n)", "obtain nid' where \"\\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\" and \"bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n)) = x\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  dep ?nid'2 \\<equiv> pout (\\<sigma>\\<^bsub>?nid'2\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>\\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using closed \\<open>x \\<in> pin (cmp nid (t n))\\<close>"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  dep ?nid'2 \\<equiv> pout (\\<sigma>\\<^bsub>?nid'2\\<^esub>t n)\n  \\<lbrakk>\\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>;\n   ?b \\<in> pin (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'.\n                       \\<parallel>nid'\\<parallel>\\<^bsub>?t\n                    ?n\\<^esub> \\<and>\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>?t ?n) = ?b\n  x \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>\\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "hence \"pout (\\<sigma>\\<^bsub>nid'\\<^esub>(t n)) = x\""], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x", "using fwd_bc"], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<Longrightarrow>\n  pout (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n) =\n  bc (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n)\n\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x", "by auto"], ["proof (state)\nthis:\n  pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "hence \"x=dep nid'\""], ["proof (prove)\nusing this:\n  pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n\ngoal (1 subgoal):\n 1. x = dep nid'", "using dep_def"], ["proof (prove)\nusing this:\n  pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n) = x\n  dep ?nid'2 \\<equiv> pout (\\<sigma>\\<^bsub>?nid'2\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. x = dep nid'", "by simp"], ["proof (state)\nthis:\n  x = dep nid'\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "moreover"], ["proof (state)\nthis:\n  x = dep nid'\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "from \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>", "have \"nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\""], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "by simp"], ["proof (state)\nthis:\n  nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "ultimately"], ["proof (chain)\npicking this:\n  x = dep nid'\n  nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "show ?thesis"], ["proof (prove)\nusing this:\n  x = dep nid'\n  nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "using image_eqI"], ["proof (prove)\nusing this:\n  x = dep nid'\n  nid' \\<in> {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "by simp"], ["proof (state)\nthis:\n  x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "using finite_surj"], ["proof (prove)\nusing this:\n  finite {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<subseteq> dep ` {nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t n\\<^esub>}\n  \\<lbrakk>finite ?A; ?B \\<subseteq> ?f ` ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?B\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by metis"], ["proof (state)\nthis:\n  finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nempty_input:\n  fixes t n nid\n  assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\"\n    and \"honest nid\"\n  shows \"pin (cmp nid (t n))\\<noteq>{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<noteq> {}", "using conn[of nid \"t n\"] act assms actHn_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>; honest nid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n                    (\\<Union>nid'\\<in>actHn (t n).\n                        {pout (\\<sigma>\\<^bsub>nid'\\<^esub>t n)})\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  honest nid\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. pin (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<noteq> {}", "by auto"], ["", "lemma onlyone:\n  assumes \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<exists>!i. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> ?a \\<and>\n    latestAct_cond tid t\n     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> ?a\n 2. \\<And>i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n        i \\<Longrightarrow>\n       i = ?a", "show \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    latestAct_cond tid t\n     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by (metis assms dynamic_component.nxtActI latestAct_prop(1) latestAct_prop(2) less_le_trans order_refl)"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  latestAct_cond tid t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n        i \\<Longrightarrow>\n       i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n        i \\<Longrightarrow>\n       i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n        i \\<Longrightarrow>\n       i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "show \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub> \\<Longrightarrow> i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n    latestAct_cond tid t\n     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     i \\<Longrightarrow>\n    i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by (metis latestActless(1) leI le_less_Suc_eq le_less_trans nxtActI order_refl)"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n  latestAct_cond tid t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   i \\<Longrightarrow>\n  i = \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Component Behavior\""], ["", "lemma bhv_hn_ex:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and tid\n  assumes \"honest tid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "let ?cond = \"\\<lambda>nd. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n    (if (\\<exists>b\\<in>pin nd. length b > length (bc nd)) then (MAX (pin nd)) else (bc nd))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "let ?check = \"\\<lambda>nd. \\<not> mining nd \\<and> bc nd = MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or> mining nd \\<and>\n    (\\<exists>b. bc nd = MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "from \\<open>honest tid\\<close>"], ["proof (chain)\npicking this:\n  honest tid", "have \"eval tid t t' 0 (\\<box>\\<^sub>b([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  honest tid\n\ngoal (1 subgoal):\n 1. eval tid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                         then MAX (pin nd)\n                         else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   bc nd =\n   MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n       [b])]\\<^sub>b)", "using consensus[of tid _ _ \"MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"]"], ["proof (prove)\nusing this:\n  honest tid\n  honest tid \\<Longrightarrow>\n  eval tid ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                         then MAX (pin nd)\n                         else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   bc nd =\n   MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n       [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "have \"\\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "have \"\\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n    \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> ([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n          (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n           then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                               \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                               [b])]\\<^sub>b)", "using globEA[of 0 tid t t' \"([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b)\" \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval tid t t' 0\n    (\\<box>\\<^sub>b[\\<lambda>nd.\n                       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                        then MAX (pin nd)\n                        else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                   \\<circle>\\<^sub>b[\\<lambda>nd.\n  \\<not> mining nd \\<and>\n  bc nd =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining nd \\<and>\n  (\\<exists>b.\n      bc nd =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])]\\<^sub>b);\n   \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> eval tid t t'\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     ([\\<lambda>nd.\n                          MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n                          (if \\<exists>b\\<in>pin nd.\n                                 length (bc nd) < length b\n                           then MAX (pin nd)\n                           else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                      \\<circle>\\<^sub>b[\\<lambda>nd.\n     \\<not> mining nd \\<and>\n     bc nd =\n     MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n     mining nd \\<and>\n     (\\<exists>b.\n         bc nd =\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n         [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n          (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n           then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                               \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                               [b])]\\<^sub>b)", "by fastforce"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?cond]\\<^sub>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n         (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n          then MAX (pin nd) else bc nd)]\\<^sub>b", "proof (rule baIA)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n 2. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "from \\<open>\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "show \"\\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "from assms(3) assms(4)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "show \"?cond (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n  (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n         length\n          (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n         < length b\n   then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n   else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> (\\<circle>\\<^sub>b [?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                               \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                               [b])]\\<^sub>b)", "using impE[of tid t t' _ \"[?cond]\\<^sub>b\" \"\\<circle>\\<^sub>b [?check]\\<^sub>b\"]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n  eval tid t t' ?n\n   ([\\<lambda>nd.\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b) \\<Longrightarrow>\n  eval tid t t' ?n\n   [\\<lambda>nd.\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\n  eval tid t t' ?n\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                               \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                               [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "have \"\\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "have \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by (simp add: order.strict_implies_order)"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "have \"\\<exists>!i. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "using onlyone"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!i.\n                       \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                       \\<le> i \\<and>\n                       latestAct_cond ?tid ?t\n                        \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                        i\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "by simp"], ["proof (state)\nthis:\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "have \"eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?check]\\<^sub>b\""], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         bc nd =\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n             [b])]\\<^sub>b", "using nxtEA1[of tid t \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" t' \"[?check]\\<^sub>b\" \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n  \\<lbrakk>\\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n              \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    (\\<circle>\\<^sub>b[\\<lambda>nd.\n                          \\<not> mining nd \\<and>\n                          bc nd =\n                          MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                          mining nd \\<and>\n                          (\\<exists>b.\n                              bc nd =\n                              MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                              \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                              [b])]\\<^sub>b);\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>;\n   \\<exists>!i.\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n      latestAct_cond tid t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\\<rbrakk>\n  \\<Longrightarrow> eval tid t t'\n                     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     [\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                             [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         bc nd =\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n             [b])]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "using baEANow[of tid t t' \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" ?check]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>eval tid t t'\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            [\\<lambda>nd.\n                \\<not> mining nd \\<and>\n                bc nd =\n                MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                mining nd \\<and>\n                (\\<exists>b.\n                    bc nd =\n                    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                    [b])]\\<^sub>b;\n   \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bhv_hn_in:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and tid\n  assumes \"honest tid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "let ?cond = \"\\<lambda>nd. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = (if (\\<exists>b\\<in>pin nd. length b > length (bc nd)) then (MAX (pin nd)) else (bc nd))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "let ?check = \"\\<lambda>nd. \\<not> mining nd \\<and> bc nd = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or> mining nd \\<and> (\\<exists>b. bc nd = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "from \\<open>honest tid\\<close>"], ["proof (chain)\npicking this:\n  honest tid", "have \"eval tid t t' 0 ((\\<box>\\<^sub>b([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b)))\""], ["proof (prove)\nusing this:\n  honest tid\n\ngoal (1 subgoal):\n 1. eval tid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                         then MAX (pin nd)\n                         else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   bc nd =\n   bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n       [b])]\\<^sub>b)", "using consensus[of tid _ _ \"bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\"]"], ["proof (prove)\nusing this:\n  honest tid\n  honest tid \\<Longrightarrow>\n  eval tid ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                         then MAX (pin nd)\n                         else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   bc nd =\n   bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n       [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)", "have \"\\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "have \"\\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n    \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> ([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n          (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n           then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                               [b])]\\<^sub>b)", "using globEA[of 0 tid t t' \"[?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b\" \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval tid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                      (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                       then MAX (pin nd)\n                       else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n bc nd =\n bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval tid t t' 0\n    (\\<box>\\<^sub>b[\\<lambda>nd.\n                       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                 \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n                        then MAX (pin nd)\n                        else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                   \\<circle>\\<^sub>b[\\<lambda>nd.\n  \\<not> mining nd \\<and>\n  bc nd =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining nd \\<and>\n  (\\<exists>b.\n      bc nd =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])]\\<^sub>b);\n   \\<langle>tid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> eval tid t t'\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     ([\\<lambda>nd.\n                          bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                          (if \\<exists>b\\<in>pin nd.\n                                 length (bc nd) < length b\n                           then MAX (pin nd)\n                           else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                      \\<circle>\\<^sub>b[\\<lambda>nd.\n     \\<not> mining nd \\<and>\n     bc nd =\n     bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n     mining nd \\<and>\n     (\\<exists>b.\n         bc nd =\n         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n         [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n          (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n           then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                               [b])]\\<^sub>b)", "by fastforce"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?cond]\\<^sub>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n          then MAX (pin nd) else bc nd)]\\<^sub>b", "proof (rule baIA)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n 2. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "from \\<open>\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "show \"\\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "from assms(3) assms(4)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)", "show \"?cond (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n           length\n            (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n           < length b\n     then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n     else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  (if \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>).\n         length\n          (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n         < length b\n   then MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n   else bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b", "have \"eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> (\\<circle>\\<^sub>b [?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                               [b])]\\<^sub>b)", "using impE[of tid t t' _ \"[?cond]\\<^sub>b\" \"\\<circle>\\<^sub>b [?check]\\<^sub>b\"]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b\n  eval tid t t' ?n\n   ([\\<lambda>nd.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n         then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b) \\<Longrightarrow>\n  eval tid t t' ?n\n   [\\<lambda>nd.\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n       (if \\<exists>b\\<in>pin nd. length (bc nd) < length b\n        then MAX (pin nd) else bc nd)]\\<^sub>b \\<longrightarrow>\n  eval tid t t' ?n\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           bc nd =\n                           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                               [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "have \"\\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>. \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)", "have \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by (simp add: order.strict_implies_order)"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)", "have \"\\<exists>!i. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "using onlyone"], ["proof (prove)\nusing this:\n  honest tid\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!i.\n                       \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                       \\<le> i \\<and>\n                       latestAct_cond ?tid ?t\n                        \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                        i\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond tid t\n        \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "by simp"], ["proof (state)\nthis:\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "have \"eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?check]\\<^sub>b\""], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         bc nd =\n         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n             [b])]\\<^sub>b", "using nxtEA1[of tid t \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" t' \"[?check]\\<^sub>b\" \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond tid t\n      \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n  \\<lbrakk>\\<exists>i>\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n              \\<parallel>tid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval tid t t' \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    (\\<circle>\\<^sub>b[\\<lambda>nd.\n                          \\<not> mining nd \\<and>\n                          bc nd =\n                          bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                          mining nd \\<and>\n                          (\\<exists>b.\n                              bc nd =\n                              bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                              [b])]\\<^sub>b);\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   \\<le> \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>;\n   \\<exists>!i.\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n      latestAct_cond tid t\n       \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\\<rbrakk>\n  \\<Longrightarrow> eval tid t t'\n                     \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     [\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         bc nd =\n                         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                             [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         bc nd =\n         bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n             [b])]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "using baEANow[of tid t t' \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" ?check]"], ["proof (prove)\nusing this:\n  eval tid t t' \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       bc nd =\n       bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n           [b])]\\<^sub>b\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>eval tid t t'\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            [\\<lambda>nd.\n                \\<not> mining nd \\<and>\n                bc nd =\n                bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                mining nd \\<and>\n                (\\<exists>b.\n                    bc nd =\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                    [b])]\\<^sub>b;\n   \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bhv_hn_context:\n  assumes \"honest tid\"\n      and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n      and \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    shows \"\\<exists>nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and> (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b]) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "assume casmp: \"\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond tid t n n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "using assms(1) bhv_hn_ex"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  honest tid\n  \\<lbrakk>honest ?tid;\n   \\<exists>n'\\<ge>?n. \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n';\n   \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n              \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>).\n      length\n       (bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n   \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>))\n      < length b\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n                    \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n               \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>) =\n                    MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n                     \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n             \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n                   \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>) =\n                        MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t\n                         \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "by auto"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "have \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "have \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "have \"Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "from \\<open>\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "hence \"finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>(t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. finite\n     (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "using finite_input[of tid t \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<Longrightarrow>\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. finite\n     (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "moreover"], ["proof (state)\nthis:\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "from casmp"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b", "obtain b where \"b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\" and \"length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>);\n         length\n          (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n         < length b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  length\n   (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < length b\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  length\n   (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < length b", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  length\n   (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < length b\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "using max_prop(1)"], ["proof (prove)\nusing this:\n  finite\n   (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  b \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  length\n   (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < length b\n  \\<lbrakk>?XS \\<noteq> {}; finite ?XS\\<rbrakk>\n  \\<Longrightarrow> MAX ?XS \\<in> ?XS\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "with \\<open>\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "obtain nid where \"\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\"\n    and \"bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t\n             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using\n    closed[of tid t \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" \"MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"] latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<lbrakk>\\<parallel>tid\\<parallel>\\<^bsub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n   MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'.\n                       \\<parallel>nid'\\<parallel>\\<^bsub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                       MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t\n             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     \\<parallel>nid'\\<parallel>\\<^bsub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n     (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n          [b]) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "assume \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<exists>n'<n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond tid t n n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "using assms(1) bhv_hn_in[of tid n t]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n         \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond tid t n n'\n  honest tid\n  \\<lbrakk>honest tid;\n   \\<exists>n'\\<ge>n. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond tid t n n';\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n              length\n               (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>tid\\<^esub>t\n   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "by auto"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "have \"\\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>tid\\<^esub>t\n \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>\\<exists>n'. latestAct_cond tid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond tid t n n'", "have \"\\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond tid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>tid\\<parallel>\\<^bsub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                      \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n           \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  \\<parallel>tid\\<parallel>\\<^bsub>t \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b]) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     \\<parallel>nid'\\<parallel>\\<^bsub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n     (mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n          [b]) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<and>\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bhv_dn:\n  fixes t and t'::\"nat \\<Rightarrow> 'ND\" and uid\n  assumes \"\\<not> honest uid\"\n    and \"\\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n    and \"\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n         \\<or> mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @ [b])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "let ?cond = \"\\<lambda>nd. (SOME b. b \\<in> (pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})) = (SOME b. b \\<in> pin nd \\<union> {bc nd})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "let ?check = \"\\<lambda>nd. \\<not> mining nd \\<and> prefix (bc nd) (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<or> mining nd \\<and> (\\<exists>b. bc nd = (SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @ [b])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "from \\<open>\\<not> honest uid\\<close>"], ["proof (chain)\npicking this:\n  \\<not> honest uid", "have \"eval uid t t' 0 ((\\<box>\\<^sub>b([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b [?check]\\<^sub>b)))\""], ["proof (prove)\nusing this:\n  \\<not> honest uid\n\ngoal (1 subgoal):\n 1. eval uid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        (SOME b.\n                            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                    {bc\n(\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                        (SOME b.\n                            b \\<in> pin nd \\<union>\n                                    {bc\nnd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   prefix (bc nd)\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n       [b])]\\<^sub>b)", "using attacker[of uid _ _ \"(SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\"]"], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<not> honest uid \\<Longrightarrow>\n  eval uid ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval uid t t' 0\n     (\\<box>\\<^sub>b[\\<lambda>nd.\n                        (SOME b.\n                            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                    {bc\n(\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                        (SOME b.\n                            b \\<in> pin nd \\<union>\n                                    {bc\nnd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                    \\<circle>\\<^sub>b[\\<lambda>nd.\n   \\<not> mining nd \\<and>\n   prefix (bc nd)\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n   mining nd \\<and>\n   (\\<exists>b.\n       bc nd =\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n       [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval uid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval uid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "have \"\\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n    \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval uid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> ([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b[?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval uid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          (SOME b.\n              b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                      {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n          (SOME b.\n              b \\<in> pin nd \\<union>\n                      {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           prefix (bc nd)\n                            (SOME b.\n                                b \\<in> pin\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               (SOME b.\n                                   b \\<in> pin\n      (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                               [b])]\\<^sub>b)", "using globEA[of 0 uid t t' \"([?cond]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<circle>\\<^sub>b[?check]\\<^sub>b)\" \"\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval uid t t' 0\n   (\\<box>\\<^sub>b[\\<lambda>nd.\n                      (SOME b.\n                          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                      (SOME b.\n                          b \\<in> pin nd \\<union>\n                                  {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<circle>\\<^sub>b[\\<lambda>nd.\n \\<not> mining nd \\<and>\n prefix (bc nd)\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n mining nd \\<and>\n (\\<exists>b.\n     bc nd =\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n     [b])]\\<^sub>b)\n  \\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval uid t t' 0\n    (\\<box>\\<^sub>b[\\<lambda>nd.\n                       (SOME b.\n                           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                       (SOME b.\n                           b \\<in> pin nd \\<union>\n                                   {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                   \\<circle>\\<^sub>b[\\<lambda>nd.\n  \\<not> mining nd \\<and>\n  prefix (bc nd)\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining nd \\<and>\n  (\\<exists>b.\n      bc nd =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])]\\<^sub>b);\n   \\<langle>uid \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> eval uid t t'\n                     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     ([\\<lambda>nd.\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n                          (SOME b.\n                              b \\<in> pin nd \\<union>\n{bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                      \\<circle>\\<^sub>b[\\<lambda>nd.\n     \\<not> mining nd \\<and>\n     prefix (bc nd)\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n     mining nd \\<and>\n     (\\<exists>b.\n         bc nd =\n         (SOME b.\n             b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n         [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     ([\\<lambda>nd.\n          (SOME b.\n              b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                      {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n          (SOME b.\n              b \\<in> pin nd \\<union>\n                      {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           prefix (bc nd)\n                            (SOME b.\n                                b \\<in> pin\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               (SOME b.\n                                   b \\<in> pin\n      (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                               [b])]\\<^sub>b)", "by fastforce"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "have \"eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?cond]\\<^sub>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         (SOME b.\n             b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n         (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b", "proof (rule baIA)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)})", "from \\<open>\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'", "show \"\\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)})", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "show \"?cond (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)})", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>i\\<ge>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)})", "by simp"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>)})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n       (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n       (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b", "have \"eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> (\\<circle>\\<^sub>b [?check]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n       (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           prefix (bc nd)\n                            (SOME b.\n                                b \\<in> pin\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               (SOME b.\n                                   b \\<in> pin\n      (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                               [b])]\\<^sub>b)", "using impE[of uid t t' _ \"[?cond]\\<^sub>b\" \"\\<circle>\\<^sub>b [?check]\\<^sub>b\"]"], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n       (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b\n  eval uid t t' ?n\n   ([\\<lambda>nd.\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n        (SOME b.\n            b \\<in> pin nd \\<union>\n                    {bc nd})]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b) \\<Longrightarrow>\n  eval uid t t' ?n\n   [\\<lambda>nd.\n       (SOME b.\n           b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n              \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n       (SOME b. b \\<in> pin nd \\<union> {bc nd})]\\<^sub>b \\<longrightarrow>\n  eval uid t t' ?n\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     (\\<circle>\\<^sub>b[\\<lambda>nd.\n                           \\<not> mining nd \\<and>\n                           prefix (bc nd)\n                            (SOME b.\n                                b \\<in> pin\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                           mining nd \\<and>\n                           (\\<exists>b.\n                               bc nd =\n                               (SOME b.\n                                   b \\<in> pin\n      (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                               [b])]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "have \"\\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>. \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxt"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<rightarrow> ?t\\<rangle>\\<^bsub>\\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> =\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n    < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "moreover"], ["proof (state)\nthis:\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n       \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActNxtAct"], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                    < \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by (simp add: order.strict_implies_order)"], ["proof (state)\nthis:\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "from assms"], ["proof (chain)\npicking this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<exists>!i. \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and> i < \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond uid t\n        \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "using onlyone"], ["proof (prove)\nusing this:\n  \\<not> honest uid\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<lbrakk>\\<exists>n'\\<ge>?n.\n              \\<parallel>?tid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond ?tid ?t ?n n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!i.\n                       \\<langle>?tid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                       \\<le> i \\<and>\n                       latestAct_cond ?tid ?t\n                        \\<langle>?tid \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n                        i\n\ngoal (1 subgoal):\n 1. \\<exists>!i.\n       \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n       latestAct_cond uid t\n        \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "by simp"], ["proof (state)\nthis:\n  \\<exists>!i.\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond uid t\n      \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond uid t\n      \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i", "have \"eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> [?check]\\<^sub>b\""], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond uid t\n      \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         prefix (bc nd)\n          (SOME b.\n              b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                      {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             (SOME b.\n                 b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                         {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n             [b])]\\<^sub>b", "using nxtEA1[of uid t \"\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" t' \"[?check]\\<^sub>b\" \"\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   (\\<circle>\\<^sub>b[\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b)\n  \\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n     \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<exists>!i.\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n     latestAct_cond uid t\n      \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\n  \\<lbrakk>\\<exists>i>\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>.\n              \\<parallel>uid\\<parallel>\\<^bsub>t i\\<^esub>;\n   eval uid t t' \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    (\\<circle>\\<^sub>b[\\<lambda>nd.\n                          \\<not> mining nd \\<and>\n                          prefix (bc nd)\n                           (SOME b.\n                               b \\<in> pin\n  (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                          mining nd \\<and>\n                          (\\<exists>b.\n                              bc nd =\n                              (SOME b.\n                                  b \\<in> pin\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                              [b])]\\<^sub>b);\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   \\<le> \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>;\n   \\<exists>!i.\n      \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> i \\<and>\n      latestAct_cond uid t\n       \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> i\\<rbrakk>\n  \\<Longrightarrow> eval uid t t'\n                     \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     [\\<lambda>nd.\n                         \\<not> mining nd \\<and>\n                         prefix (bc nd)\n                          (SOME b.\n                              b \\<in> pin\n (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n{bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                         mining nd \\<and>\n                         (\\<exists>b.\n                             bc nd =\n                             (SOME b.\n                                 b \\<in> pin\n    (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n   {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                             [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n     [\\<lambda>nd.\n         \\<not> mining nd \\<and>\n         prefix (bc nd)\n          (SOME b.\n              b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                      {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                 \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n         mining nd \\<and>\n         (\\<exists>b.\n             bc nd =\n             (SOME b.\n                 b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                         {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n             [b])]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       prefix (bc nd)\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           (SOME b.\n               b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                       {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "moreover"], ["proof (state)\nthis:\n  eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       prefix (bc nd)\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           (SOME b.\n               b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                       {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n           [b])]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "from \\<open>\\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "ultimately"], ["proof (chain)\npicking this:\n  eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       prefix (bc nd)\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           (SOME b.\n               b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                       {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n           [b])]\\<^sub>b\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       prefix (bc nd)\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           (SOME b.\n               b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                       {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n           [b])]\\<^sub>b\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "using baEANow[of uid t t' \"\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" ?check]"], ["proof (prove)\nusing this:\n  eval uid t t' \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n   [\\<lambda>nd.\n       \\<not> mining nd \\<and>\n       prefix (bc nd)\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n       mining nd \\<and>\n       (\\<exists>b.\n           bc nd =\n           (SOME b.\n               b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                       {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n           [b])]\\<^sub>b\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>eval uid t t'\n            \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            [\\<lambda>nd.\n                \\<not> mining nd \\<and>\n                prefix (bc nd)\n                 (SOME b.\n                     b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                             {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                mining nd \\<and>\n                (\\<exists>b.\n                    bc nd =\n                    (SOME b.\n                        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                    [b])]\\<^sub>b;\n   \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>uid\\<^esub>t\n                   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    prefix\n                     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n                     (SOME b.\n                         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        (SOME b.\n                            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                    {bc\n(\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>uid\\<^esub>t\n \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  prefix\n   (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bhv_dn_context:\n  assumes \"\\<not> honest uid\"\n      and \"\\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>\"\n      and \"\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\"\n  shows \"\\<exists>nid'. \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and> (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> (\\<exists>b. prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b]))\n  \\<or> \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "let ?bc=\"SOME b. b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "have bc_ex: \"?bc \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or> ?bc \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "have \"\\<exists>b. b\\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n             {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "hence \"?bc \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (prove)\nusing this:\n  \\<exists>b.\n     b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n             {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n          {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "using someI_ex"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n             {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n        \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n  \\<exists>x. ?P x \\<Longrightarrow> ?P (SOME x. ?P x)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n          {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "by simp"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n        {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n        {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "by auto"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from assms(3)"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond uid t n n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) ?bc \\<or>\n    mining (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = ?bc @ [b])\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "using bhv_dn[of uid n t] assms(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<lbrakk>\\<not> honest uid;\n   \\<exists>n'\\<ge>n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond uid t n n'\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>uid\\<^esub>t\n                   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    prefix\n                     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n                     (SOME b.\n                         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        (SOME b.\n                            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                                    {bc\n(\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n                        [b])\n  \\<not> honest uid\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    prefix\n     (bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>uid\\<^esub>t\n \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  prefix\n   (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>uid\\<^esub>t\n \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  prefix\n   (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>uid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>uid\\<^esub>t\n \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  prefix\n   (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "have casmp: \"\\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) ?bc \\<or>\n    mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) = ?bc @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>uid\\<^esub>t\n \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  prefix\n   (bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n\\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n  \\<langle>uid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n    prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n     (SOME b.\n         b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                 {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n            \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n    mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n        (SOME b.\n            b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                    {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n               \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from bc_ex"], ["proof (chain)\npicking this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "have \"?bc \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or> ?bc \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}", "."], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "assume \"?bc \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from \\<open>\\<exists>n'<n. \\<parallel>uid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "ultimately"], ["proof (chain)\npicking this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "obtain nid where \"\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\" and \"bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = ?bc\""], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         (SOME b.\n             b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using closed"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>\\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>;\n   ?b \\<in> pin (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'.\n                       \\<parallel>nid'\\<parallel>\\<^bsub>?t\n                    ?n\\<^esub> \\<and>\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>?t ?n) = ?b\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         (SOME b.\n             b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                     {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n                \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "with casmp"], ["proof (chain)\npicking this:\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})", "have \"\\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n)) (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n      mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) = (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n    prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (2 subgoals):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n 2. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "with \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     \\<parallel>nid'\\<parallel>\\<^bsub>t\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n     (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      (\\<exists>b.\n          prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b])) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "assume \"?bc \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\""], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "hence \"?bc = bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n  \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n    bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from \\<open>\\<exists>n'. latestAct_cond uid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond uid t n n'", "have \"\\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond uid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>uid\\<parallel>\\<^bsub>t\n\\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. (SOME b.\n        b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n           \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)})\n    \\<in> {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)} \\<Longrightarrow>\n    \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "ultimately"], ["proof (chain)\npicking this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "using casmp"], ["proof (prove)\nusing this:\n  (SOME b.\n      b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n              {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) =\n  bc (\\<sigma>\\<^bsub>uid\\<^esub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<parallel>uid\\<parallel>\\<^bsub>t \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n   (SOME b.\n       b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n               {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n          \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) \\<or>\n  mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>uid\\<^esub>t n) =\n      (SOME b.\n          b \\<in> pin (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<union>\n                  {bc (\\<sigma>\\<^bsub>uid\\<^esub>t\n             \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)}) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       \\<parallel>nid'\\<parallel>\\<^bsub>t\n    \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n       (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        (\\<exists>b.\n            prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n             (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n         \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n              [b])) \\<or>\n        \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n        prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     \\<parallel>nid'\\<parallel>\\<^bsub>t\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n     (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      (\\<exists>b.\n          prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b])) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     \\<parallel>nid'\\<parallel>\\<^bsub>t\n  \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<and>\n     (mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      (\\<exists>b.\n          prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n            [b])) \\<or>\n      \\<not> mining (\\<sigma>\\<^bsub>uid\\<^esub>t n) \\<and>\n      prefix (bc (\\<sigma>\\<^bsub>uid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n   \\<langle>uid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Maximal Honest Blockchains\""], ["", "abbreviation mbc_cond:: \"trace \\<Rightarrow> nat \\<Rightarrow> 'nid \\<Rightarrow> bool\"\n  where \"mbc_cond t n nid \\<equiv> nid\\<in>actHn (t n) \\<and> (\\<forall>nid'\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n))) \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n))))\""], ["", "lemma mbc_ex:\n  fixes t n\n  shows \"\\<exists>x. mbc_cond t n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "let ?ALL=\"{b. \\<exists>nid\\<in>actHn (t n). b = bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n))}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "have \"MAX ?ALL \\<in> ?ALL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MAX {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n    \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n                 b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "proof (rule max_prop)"], ["proof (state)\ngoal (2 subgoals):\n 1. {b. \\<exists>nid\\<in>actHn (t n).\n           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n    {}\n 2. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "from actHn"], ["proof (chain)\npicking this:\n  \\<exists>nid.\n     honest nid \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>", "have \"actHn (t n) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<exists>nid.\n     honest nid \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>\n\ngoal (1 subgoal):\n 1. actHn (t n) \\<noteq> {}", "using actHn_def"], ["proof (prove)\nusing this:\n  \\<exists>nid.\n     honest nid \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. actHn (t n) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  actHn (t n) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. {b. \\<exists>nid\\<in>actHn (t n).\n           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n    {}\n 2. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "thus \"?ALL\\<noteq>{}\""], ["proof (prove)\nusing this:\n  actHn (t n) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {b. \\<exists>nid\\<in>actHn (t n).\n           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n    {}", "by auto"], ["proof (state)\nthis:\n  {b. \\<exists>nid\\<in>actHn (t n).\n         b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "from act"], ["proof (chain)\npicking this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}", "have \"finite (actHn (t n))\""], ["proof (prove)\nusing this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (actHn (t n))", "using actHn_def"], ["proof (prove)\nusing this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. finite (actHn (t n))", "by simp"], ["proof (state)\nthis:\n  finite (actHn (t n))\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "thus \"finite ?ALL\""], ["proof (prove)\nusing this:\n  finite (actHn (t n))\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "by simp"], ["proof (state)\nthis:\n  finite\n   {b. \\<exists>nid\\<in>actHn (t n).\n          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "then"], ["proof (chain)\npicking this:\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "obtain nid where \"nid \\<in> actHn (t n) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)) = MAX ?ALL\""], ["proof (prove)\nusing this:\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        nid \\<in> actHn (t n) \\<and>\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n        MAX {b. \\<exists>nid\\<in>actHn (t n).\n                   b =\n                   bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  nid \\<in> actHn (t n) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "moreover"], ["proof (state)\nthis:\n  nid \\<in> actHn (t n) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "have \"\\<forall>nid'\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n))) \\<le> length (MAX ?ALL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nid'\\<in>actHn (t n).\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "fix nid"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "assume \"nid \\<in> actHn (t n)\""], ["proof (state)\nthis:\n  nid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "hence \"bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)) \\<in> ?ALL\""], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n    \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n                 b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "by auto"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "moreover"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "have \"\\<forall>b'\\<in>?ALL. length b' \\<le> length (MAX ?ALL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b'\\<in>{b. \\<exists>nid\\<in>actHn (t n).\n                           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}.\n       length b'\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "proof (rule max_prop)"], ["proof (state)\ngoal (2 subgoals):\n 1. {b. \\<exists>nid\\<in>actHn (t n).\n           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n    {}\n 2. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "from \\<open>bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)) \\<in> ?ALL\\<close>"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "show \"?ALL\\<noteq>{}\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal (1 subgoal):\n 1. {b. \\<exists>nid\\<in>actHn (t n).\n           b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n    {}", "by auto"], ["proof (state)\nthis:\n  {b. \\<exists>nid\\<in>actHn (t n).\n         b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "from act"], ["proof (chain)\npicking this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}", "have \"finite (actHn (t n))\""], ["proof (prove)\nusing this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n\ngoal (1 subgoal):\n 1. finite (actHn (t n))", "using actHn_def"], ["proof (prove)\nusing this:\n  finite {nid. \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub>}\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. finite (actHn (t n))", "by simp"], ["proof (state)\nthis:\n  finite (actHn (t n))\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "thus \"finite ?ALL\""], ["proof (prove)\nusing this:\n  finite (actHn (t n))\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<exists>nid\\<in>actHn (t n).\n            b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}", "by simp"], ["proof (state)\nthis:\n  finite\n   {b. \\<exists>nid\\<in>actHn (t n).\n          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>b'\\<in>{b. \\<exists>nid\\<in>actHn (t n).\n                         b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}.\n     length b'\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\n\ngoal (1 subgoal):\n 1. \\<And>nid'.\n       nid' \\<in> actHn (t n) \\<Longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n       \\<le> length\n              (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                          b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "ultimately"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<forall>b'\\<in>{b. \\<exists>nid\\<in>actHn (t n).\n                         b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}.\n     length b'\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "show \"length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<le> length (Blockchain.MAX {b. \\<exists>nid\\<in>actHn (t n). b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)\n  \\<in> {b. \\<exists>nid\\<in>actHn (t n).\n               b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<forall>b'\\<in>{b. \\<exists>nid\\<in>actHn (t n).\n                         b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}.\n     length b'\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n    \\<le> length\n           (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                       b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n  \\<le> length\n         (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                     b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>nid'\\<in>actHn (t n).\n     length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\n\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "ultimately"], ["proof (chain)\npicking this:\n  nid \\<in> actHn (t n) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<forall>nid'\\<in>actHn (t n).\n     length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})", "show ?thesis"], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t n) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) =\n  MAX {b. \\<exists>nid\\<in>actHn (t n).\n             b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)}\n  \\<forall>nid'\\<in>actHn (t n).\n     length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n))\n     \\<le> length\n            (MAX {b. \\<exists>nid\\<in>actHn (t n).\n                        b = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)})\n\ngoal (1 subgoal):\n 1. \\<exists>x. mbc_cond t n x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. mbc_cond t n x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition MBC:: \"trace \\<Rightarrow> nat \\<Rightarrow> 'nid\"\n  where \"MBC t n = (SOME b. mbc_cond t n b)\""], ["", "lemma mbc_prop[simp]:\n  shows \"mbc_cond t n (MBC t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mbc_cond t n (MBC t n)", "using someI_ex[OF mbc_ex] MBC_def"], ["proof (prove)\nusing this:\n  mbc_cond ?t1 ?n1 (SOME x. mbc_cond ?t1 ?n1 x)\n  MBC ?t ?n = (SOME b. mbc_cond ?t ?n b)\n\ngoal (1 subgoal):\n 1. mbc_cond t n (MBC t n)", "by simp"], ["", "subsubsection \"Honest Proof of Work\""], ["", "text \\<open>\n  An important construction is the maximal proof of work available in the honest community.\n  The construction was already introduces in the locale itself since it was used to express some of the locale assumptions.\n\\<close>"], ["", "abbreviation pow_cond:: \"trace \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\"\n  where \"pow_cond t n n' \\<equiv> \\<forall>nid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n))) \\<le> n'\""], ["", "lemma pow_ex:\n  fixes t n\n  shows \"pow_cond t n (length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>(t n))))\"\n    and \"\\<forall>x'. pow_cond t n x' \\<longrightarrow> x'\\<ge>length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>(t n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pow_cond t n (length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))) &&&\n    \\<forall>x'.\n       pow_cond t n x' \\<longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) \\<le> x'", "using mbc_prop"], ["proof (prove)\nusing this:\n  MBC ?t ?n \\<in> actHn (?t ?n) \\<and>\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. pow_cond t n (length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))) &&&\n    \\<forall>x'.\n       pow_cond t n x' \\<longrightarrow>\n       length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) \\<le> x'", "by auto"], ["", "lemma pow_prop:\n  \"pow_cond t n (PoW t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pow_cond t n (PoW t n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pow_cond t n (PoW t n)", "from pow_ex"], ["proof (chain)\npicking this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'", "have \"pow_cond t n (LEAST x. pow_cond t n x)\""], ["proof (prove)\nusing this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'\n\ngoal (1 subgoal):\n 1. pow_cond t n (LEAST x. pow_cond t n x)", "using LeastI_ex[of \"pow_cond t n\"]"], ["proof (prove)\nusing this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'\n  \\<exists>x. pow_cond t n x \\<Longrightarrow>\n  pow_cond t n (LEAST n'. pow_cond t n n')\n\ngoal (1 subgoal):\n 1. pow_cond t n (LEAST x. pow_cond t n x)", "by blast"], ["proof (state)\nthis:\n  pow_cond t n (LEAST x. pow_cond t n x)\n\ngoal (1 subgoal):\n 1. pow_cond t n (PoW t n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  pow_cond t n (LEAST x. pow_cond t n x)\n\ngoal (1 subgoal):\n 1. pow_cond t n (PoW t n)", "using PoW_def"], ["proof (prove)\nusing this:\n  pow_cond t n (LEAST x. pow_cond t n x)\n  PoW ?t ?n \\<equiv> LEAST x. pow_cond ?t ?n x\n\ngoal (1 subgoal):\n 1. pow_cond t n (PoW t n)", "by simp"], ["proof (state)\nthis:\n  pow_cond t n (PoW t n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_eq:\n  fixes n\n  assumes \"\\<exists>tid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>tid\\<^esub>(t n))) = x\"\n    and \"\\<forall>tid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>tid\\<^esub>(t n))) \\<le> x\"\n  shows \"PoW t n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n = x", "have \"(LEAST x. pow_cond t n x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST x. pow_cond t n x) = x", "proof (rule Least_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. pow_cond t n x\n 2. \\<And>y. pow_cond t n y \\<Longrightarrow> x \\<le> y", "from assms(2)"], ["proof (chain)\npicking this:\n  pow_cond t n x", "show \"\\<forall>nid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<le> x\""], ["proof (prove)\nusing this:\n  pow_cond t n x\n\ngoal (1 subgoal):\n 1. pow_cond t n x", "by simp"], ["proof (state)\nthis:\n  pow_cond t n x\n\ngoal (1 subgoal):\n 1. \\<And>y. pow_cond t n y \\<Longrightarrow> x \\<le> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. pow_cond t n y \\<Longrightarrow> x \\<le> y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. pow_cond t n y \\<Longrightarrow> x \\<le> y", "assume \"\\<forall>nid\\<in>actHn (t n). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<le> y\""], ["proof (state)\nthis:\n  pow_cond t n y\n\ngoal (1 subgoal):\n 1. \\<And>y. pow_cond t n y \\<Longrightarrow> x \\<le> y", "thus \"x \\<le> y\""], ["proof (prove)\nusing this:\n  pow_cond t n y\n\ngoal (1 subgoal):\n 1. x \\<le> y", "using assms(1)"], ["proof (prove)\nusing this:\n  pow_cond t n y\n  \\<exists>tid\\<in>actHn (t n).\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) = x\n\ngoal (1 subgoal):\n 1. x \\<le> y", "by auto"], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST x. pow_cond t n x) = x\n\ngoal (1 subgoal):\n 1. PoW t n = x", "with PoW_def"], ["proof (chain)\npicking this:\n  PoW ?t ?n \\<equiv> LEAST x. pow_cond ?t ?n x\n  (LEAST x. pow_cond t n x) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  PoW ?t ?n \\<equiv> LEAST x. pow_cond ?t ?n x\n  (LEAST x. pow_cond t n x) = x\n\ngoal (1 subgoal):\n 1. PoW t n = x", "by simp"], ["proof (state)\nthis:\n  PoW t n = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_mbc:\n  shows \"length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) = PoW t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) = PoW t n", "by (metis mbc_prop pow_eq)"], ["", "lemma pow_less:\n  fixes t n nid\n  assumes \"pow_cond t n x\"\n  shows \"PoW t n \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n \\<le> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n \\<le> x", "from pow_ex assms"], ["proof (chain)\npicking this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'\n  pow_cond t n x", "have \"(LEAST x. pow_cond t n x) \\<le> x\""], ["proof (prove)\nusing this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'\n  pow_cond t n x\n\ngoal (1 subgoal):\n 1. (LEAST x. pow_cond t n x) \\<le> x", "using Least_le[of \"pow_cond t n\"]"], ["proof (prove)\nusing this:\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  \\<forall>x'.\n     pow_cond ?t ?n x' \\<longrightarrow>\n     length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) \\<le> x'\n  pow_cond t n x\n  pow_cond t n ?k \\<Longrightarrow> (LEAST x. pow_cond t n x) \\<le> ?k\n\ngoal (1 subgoal):\n 1. (LEAST x. pow_cond t n x) \\<le> x", "by blast"], ["proof (state)\nthis:\n  (LEAST x. pow_cond t n x) \\<le> x\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  (LEAST x. pow_cond t n x) \\<le> x\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> x", "using PoW_def"], ["proof (prove)\nusing this:\n  (LEAST x. pow_cond t n x) \\<le> x\n  PoW ?t ?n \\<equiv> LEAST x. pow_cond ?t ?n x\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> x", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_le_max:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "from mbc_prop"], ["proof (chain)\npicking this:\n  MBC ?t ?n \\<in> actHn (?t ?n) \\<and>\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))", "have \"honest (MBC t n)\" and \"\\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (prove)\nusing this:\n  MBC ?t ?n \\<in> actHn (?t ?n) \\<and>\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. honest (MBC t n) &&& \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>", "using actHn_def"], ["proof (prove)\nusing this:\n  MBC ?t ?n \\<in> actHn (?t ?n) \\<and>\n  pow_cond ?t ?n (length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)))\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. honest (MBC t n) &&& \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>", "by auto"], ["proof (state)\nthis:\n  honest (MBC t n)\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "hence \"pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) = bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\""], ["proof (prove)\nusing this:\n  honest (MBC t n)\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n    bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)", "using forward globEANow[THEN baEANow[of \"MBC t n\" t t' n \"\\<lambda>nd. pout nd = bc nd\"]]"], ["proof (prove)\nusing this:\n  honest (MBC t n)\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n  eval ?nid ?t ?t' 0 (\\<box>\\<^sub>b[\\<lambda>nd. pout nd = bc nd]\\<^sub>b)\n  \\<lbrakk>?n \\<le> n; \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>;\n   eval (MBC t n) t t' ?n\n    (\\<box>\\<^sub>b[\\<lambda>nd. pout nd = bc nd]\\<^sub>b);\n   \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n                    bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n    bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)", "by auto"], ["proof (state)\nthis:\n  pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "with assms \\<open>\\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\\<close> \\<open>honest (MBC t n)\\<close>"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n  honest (MBC t n)\n  pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)", "have \"bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n  honest (MBC t n)\n  pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)", "using conn actHn_def"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>MBC t n\\<parallel>\\<^bsub>t n\\<^esub>\n  honest (MBC t n)\n  pout (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n) =\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<lbrakk>\\<parallel>?nid\\<parallel>\\<^bsub>?k\\<^esub>;\n   honest ?nid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>?nid\\<^esub>?k) =\n                    (\\<Union>nid'\\<in>actHn ?k.\n                        {pout (\\<sigma>\\<^bsub>nid'\\<^esub>?k)})\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)", "by auto"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "moreover"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "from assms (2)"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "using finite_input[of tid t n]"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "ultimately"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "have \"length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)) \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))\n    \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "using max_prop(2)"], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n)\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  \\<lbrakk>?XS \\<noteq> {}; finite ?XS\\<rbrakk>\n  \\<Longrightarrow> \\<forall>b'\\<in>?XS. length b' \\<le> length (MAX ?XS)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))\n    \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "by auto"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))\n  \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "with pow_mbc"], ["proof (chain)\npicking this:\n  length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) = PoW ?t ?n\n  length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))\n  \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (bc (\\<sigma>\\<^bsub>MBC ?t ?n\\<^esub>?t ?n)) = PoW ?t ?n\n  length (bc (\\<sigma>\\<^bsub>MBC t n\\<^esub>t n))\n  \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_ge_lgth:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n  shows \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"tid \\<in> actHn (t n)\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. tid \\<in> actHn (t n)", "using actHn_def"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. tid \\<in> actHn (t n)", "by simp"], ["proof (state)\nthis:\n  tid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n", "thus ?thesis"], ["proof (prove)\nusing this:\n  tid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n", "using pow_prop"], ["proof (prove)\nusing this:\n  tid \\<in> actHn (t n)\n  pow_cond ?t ?n (PoW ?t ?n)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<le> PoW t n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_le_lgth:\n  assumes \"honest tid\"\n    and \"\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\"\n    and \"\\<not>(\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\"\n  shows \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<ge> PoW t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "from assms (3)"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)", "have \"\\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n). length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n       length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "by auto"], ["proof (state)\nthis:\n  \\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n     length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n     length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "from assms nempty_input[of tid t n] finite_input[of tid t n]"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n  \\<lbrakk>\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>; honest tid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<noteq> {}\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "have \"MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)) \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n  \\<lbrakk>\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>; honest tid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<noteq> {}\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)", "using max_prop(1)[of \"pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\"]"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n  \\<lbrakk>\\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>; honest tid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<noteq> {}\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n  finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  \\<lbrakk>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n) \\<noteq> {};\n   finite (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\\<rbrakk>\n  \\<Longrightarrow> MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n                    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n    \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)", "by simp"], ["proof (state)\nthis:\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n     length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)", "have \"length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))) \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n     length b \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  \\<in> pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n    \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "from assms"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)", "have \"PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "using pow_le_max"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n)) < length b)\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> PoW ?t ?n\n                    \\<le> length\n                           (MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_mono:\n  shows \"n'\\<ge>n \\<Longrightarrow> PoW t n' \\<ge> PoW t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> n' \\<Longrightarrow> PoW t n \\<le> PoW t n'", "proof (induction n' rule: dec_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. PoW t n \\<le> PoW t n\n 2. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. PoW t n \\<le> PoW t n\n 2. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n \\<le> PoW t n", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> PoW t n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "case (step n')"], ["proof (state)\nthis:\n  n \\<le> n'\n  n' < n'\n  PoW t n \\<le> PoW t n'\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "hence \"PoW t n \\<le> PoW t n'\""], ["proof (prove)\nusing this:\n  n \\<le> n'\n  n' < n'\n  PoW t n \\<le> PoW t n'\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> PoW t n'", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> PoW t n'\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "moreover"], ["proof (state)\nthis:\n  PoW t n \\<le> PoW t n'\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "have \"PoW t (Suc n') \\<ge> PoW t n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "from actHn"], ["proof (chain)\npicking this:\n  \\<exists>nid.\n     honest nid \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>", "obtain tid where \"honest tid\" and \"\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\" and \"\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>nid.\n     honest nid \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<and>\n     \\<parallel>nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>tid.\n        \\<lbrakk>honest tid; \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>;\n         \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "assume \"\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n'). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\""], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'", "using latestAct_prop(2) latestActless le_less_Suc_eq"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n  ?m \\<le> ?n \\<Longrightarrow> (?n < Suc ?m) = (?n = ?m)\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'", "by blast"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<exists>n''<Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n''. latestAct_cond tid t (Suc n') n''", "by blast"], ["proof (state)\nthis:\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"\\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<or>\n        (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) = Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) @ b)\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) @ b)", "using \\<open>honest tid\\<close> bhv_hn_ex[of tid \"Suc n'\" t]"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n     length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n  honest tid\n  \\<lbrakk>honest tid;\n   \\<exists>n'\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond tid t (Suc n') n';\n   \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n             \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub>).\n      length\n       (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub>))\n      < length b\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                           n'\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub>) =\n                    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                    \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n'\\<^esub>)) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                    n'\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                          n'\\<^esub>) =\n                        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                        \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                               n'\\<^esub>)) @\n                        [b])\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n    MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n        MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) @ b)", "by auto"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) @ b)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "hence \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<ge> length (Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n  MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n      MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')) @ b)\n\ngoal (1 subgoal):\n 1. length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n    \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))", "by auto"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>honest tid\\<close> \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"length (Blockchain.MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n'))) \\<ge> PoW t n'\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))", "using pow_le_max"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> PoW ?t ?n\n                    \\<le> length\n                           (MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))", "by simp"], ["proof (state)\nthis:\n  PoW t n' \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "ultimately"], ["proof (chain)\npicking this:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  PoW t n' \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))", "have \"PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\""], ["proof (prove)\nusing this:\n  length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  PoW t n' \\<le> length (MAX (pin (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))", "by simp"], ["proof (state)\nthis:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "from \\<open>honest tid\\<close> \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "using pow_ge_lgth"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> length (bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n))\n                    \\<le> PoW ?t ?n\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')\n 2. \\<not> ?P \\<Longrightarrow> PoW t n' \\<le> PoW t (Suc n')", "ultimately"], ["proof (chain)\npicking this:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "show ?thesis"], ["proof (prove)\nusing this:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "by simp"], ["proof (state)\nthis:\n  PoW t n' \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "assume asmp: \"\\<not>(\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n'). length b > length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"\\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'", "by simp"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'", "using latestAct_prop(2) latestActless le_less_Suc_eq"], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n  ?m \\<le> ?n \\<Longrightarrow> (?n < Suc ?m) = (?n = ?m)\n\ngoal (1 subgoal):\n 1. \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'", "by blast"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<exists>n''<Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n''. latestAct_cond tid t (Suc n') n''", "by blast"], ["proof (state)\nthis:\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"\\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') \\<or>\n        (\\<exists>b. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) = bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') @ b)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') @ b)", "using \\<open>honest tid\\<close> bhv_hn_in[of tid \"Suc n'\" t]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = Suc n'\n  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub> = n'\n  \\<exists>n''. latestAct_cond tid t (Suc n') n''\n  \\<exists>n''\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n''\\<^esub>\n  honest tid\n  \\<lbrakk>honest tid;\n   \\<exists>n'\\<ge>Suc n'. \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond tid t (Suc n') n';\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t\n                     \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                            n'\\<^esub>).\n              length\n               (bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n          \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub>))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>tid\\<^esub>t\n                   \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                           n'\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n'\\<^esub>) =\n                    bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n              \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                     n'\\<^esub>) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>tid\\<^esub>t\n            \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                    n'\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n                          n'\\<^esub>) =\n                        bc (\\<sigma>\\<^bsub>tid\\<^esub>t\n                  \\<langle>tid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                         n'\\<^esub>) @\n                        [b])\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n    bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n        bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') @ b)", "by auto"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') @ b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "hence \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<ge> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n  bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')) =\n      bc (\\<sigma>\\<^bsub>tid\\<^esub>t n') @ b)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n    \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))", "by auto"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>honest tid\\<close> \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\\<close> asmp"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)", "have \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) \\<ge> PoW t n'\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))", "using pow_le_lgth"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n             length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n')) < length b)\n  \\<lbrakk>honest ?tid; \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>;\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n).\n              length (bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> PoW ?t ?n\n                    \\<le> length (bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n))\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))", "by simp"], ["proof (state)\nthis:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "moreover"], ["proof (state)\nthis:\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "from \\<open>honest tid\\<close> \\<open>\\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>", "have \"length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\""], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "using pow_ge_lgth"], ["proof (prove)\nusing this:\n  honest tid\n  \\<parallel>tid\\<parallel>\\<^bsub>t (Suc n')\\<^esub>\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> length (bc (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n))\n                    \\<le> PoW ?t ?n\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>tid\\<^esub>t n').\n               length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n               < length b) \\<Longrightarrow>\n    PoW t n' \\<le> PoW t (Suc n')", "ultimately"], ["proof (chain)\npicking this:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')", "show ?thesis"], ["proof (prove)\nusing this:\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n')))\n  PoW t n' \\<le> length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t n'))\n  length (bc (\\<sigma>\\<^bsub>tid\\<^esub>t (Suc n'))) \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. PoW t n' \\<le> PoW t (Suc n')", "by simp"], ["proof (state)\nthis:\n  PoW t n' \\<le> PoW t (Suc n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  PoW t n' \\<le> PoW t (Suc n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  PoW t n' \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < n'; PoW t n \\<le> PoW t na\\<rbrakk>\n       \\<Longrightarrow> PoW t n \\<le> PoW t (Suc na)", "ultimately"], ["proof (chain)\npicking this:\n  PoW t n \\<le> PoW t n'\n  PoW t n' \\<le> PoW t (Suc n')", "show ?case"], ["proof (prove)\nusing this:\n  PoW t n \\<le> PoW t n'\n  PoW t n' \\<le> PoW t (Suc n')\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> PoW t (Suc n')", "by auto"], ["proof (state)\nthis:\n  PoW t n \\<le> PoW t (Suc n')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_equals:\n  assumes \"PoW t n = PoW t n'\"\n  and \"n'\\<ge>n\"\n  and \"n''\\<ge>n\"\n  and \"n''\\<le>n'\"\nshows \"PoW t n = PoW t n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n = PoW t n''", "by (metis pow_mono assms(1) assms(3) assms(4) eq_iff)"], ["", "lemma pow_mining_suc:\n    assumes \"hmining t (Suc n)\"\n    shows \"PoW t n < PoW t (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "from assms"], ["proof (chain)\npicking this:\n  hmining t (Suc n)", "obtain nid where \"nid\\<in>actHn (t (Suc n))\" and \"mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\""], ["proof (prove)\nusing this:\n  hmining t (Suc n)\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>nid \\<in> actHn (t (Suc n));\n         mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hmining_def"], ["proof (prove)\nusing this:\n  hmining t (Suc n)\n  hmining ?t \\<equiv>\n  \\<lambda>n.\n     \\<exists>nid\\<in>actHn (?t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>?t n)\n\ngoal (1 subgoal):\n 1. (\\<And>nid.\n        \\<lbrakk>nid \\<in> actHn (t (Suc n));\n         mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  nid \\<in> actHn (t (Suc n))\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "assume asmp: \"(\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)))\""], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "from \\<open>nid\\<in>actHn (t (Suc n))\\<close>"], ["proof (chain)\npicking this:\n  nid \\<in> actHn (t (Suc n))", "have \"honest nid\" and \"\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\""], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t (Suc n))\n\ngoal (1 subgoal):\n 1. honest nid &&& \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "using actHn_def"], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t (Suc n))\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. honest nid &&& \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "by auto"], ["proof (state)\nthis:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "from \\<open>honest nid\\<close> \\<open>mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "using mine"], ["proof (prove)\nusing this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<lbrakk>honest ?nid;\n   \\<parallel>?nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>;\n   mining (\\<sigma>\\<^bsub>?nid\\<^esub>?t (Suc ?n))\\<rbrakk>\n  \\<Longrightarrow> \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "hence \"\\<exists>n'. latestAct_cond nid t (Suc n) n'\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond nid t (Suc n) n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n     < length b\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n     < length b\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n       n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n        [b])", "using bhv_hn_ex[of nid \"Suc n\"]"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n     < length b\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n  \\<lbrakk>honest nid;\n   \\<exists>n'\\<ge>Suc n. \\<parallel>nid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond nid ?t (Suc n) n';\n   \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>?t\n             \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc n\\<^esub>).\n      length\n       (bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n  \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n      < length b\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                   \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                            n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n              \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n                    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                    \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc\n                            n\\<^esub>)) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>nid\\<^esub>?t\n            \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                     n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                  \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>) =\n                        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                        \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc\n                                n\\<^esub>)) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n       n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n        [b])", "by auto"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "proof (rule latestActEq)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n 2. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n 3. n < Suc n", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "show \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n 2. n < Suc n", "show \"\\<not> (\\<exists>n''>n. n'' < Suc n \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n''>n.\n             n'' < Suc n \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n\ngoal (1 subgoal):\n 1. n < Suc n", "show \"n < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc n", "by simp"], ["proof (state)\nthis:\n  n < Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "hence \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "using latestAct_def"], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n  \\<langle>?c \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> =\n  (GREATEST n'. latestAct_cond ?c ?t ?n n')\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n      [b])\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)) @\n      [b])\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "with \\<open>mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\\<close>"], ["proof (chain)\npicking this:\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b])", "have \"\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]\""], ["proof (prove)\nusing this:\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b])\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n       MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "from \\<open>honest nid\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "using pow_ge_lgth[of nid t \"Suc n\"]"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<lbrakk>honest nid;\n   \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)))\n                    \\<le> PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "have \"length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)\""], ["proof (prove)\nusing this:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)) @ [b]\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)", "by auto"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "from \\<open>honest nid\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) \\<ge> PoW t n\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)))", "using pow_le_max"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> PoW ?t ?n\n                    \\<le> length\n                           (MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)))", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)\n 2. \\<not> ?P \\<Longrightarrow> PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n))) < PoW t (Suc n)\n  PoW t n \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "by simp"], ["proof (state)\nthis:\n  PoW t n < PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "assume asmp: \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>)))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "from \\<open>nid\\<in>actHn (t (Suc n))\\<close>"], ["proof (chain)\npicking this:\n  nid \\<in> actHn (t (Suc n))", "have \"honest nid\" and \"\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\""], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t (Suc n))\n\ngoal (1 subgoal):\n 1. honest nid &&& \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "using actHn_def"], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t (Suc n))\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. honest nid &&& \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "by auto"], ["proof (state)\nthis:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "from \\<open>honest nid\\<close> \\<open>mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (prove)\nusing this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "using mine"], ["proof (prove)\nusing this:\n  honest nid\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<lbrakk>honest ?nid;\n   \\<parallel>?nid\\<parallel>\\<^bsub>?t (Suc ?n)\\<^esub>;\n   mining (\\<sigma>\\<^bsub>?nid\\<^esub>?t (Suc ?n))\\<rbrakk>\n  \\<Longrightarrow> \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "hence \"\\<exists>n'. latestAct_cond nid t (Suc n) n'\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond nid t (Suc n) n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n       n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n      n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n        [b])", "using bhv_hn_in[of nid \"Suc n\"]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<exists>n'. latestAct_cond nid t (Suc n) n'\n  \\<lbrakk>honest nid;\n   \\<exists>n'\\<ge>Suc n. \\<parallel>nid\\<parallel>\\<^bsub>?t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond nid ?t (Suc n) n';\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                     \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n              length\n               (bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n          \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                   \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                            n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n              \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n              \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc\n                      n\\<^esub>) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>nid\\<^esub>?t\n            \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                     n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                  \\<langle>nid \\<rightarrow> ?t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>) =\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>?t\n                  \\<langle>nid \\<leftarrow> ?t\\<rangle>\\<^bsub>Suc\n                          n\\<^esub>) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n       n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n      n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n        [b])", "by auto"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n    n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n    n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "proof (rule latestActEq)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n 2. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n 3. n < Suc n", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "show \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n 2. n < Suc n", "show \"\\<not> (\\<exists>n''>n. n'' < Suc n \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''>n.\n               n'' < Suc n \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n''>n.\n             n'' < Suc n \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>)\n\ngoal (1 subgoal):\n 1. n < Suc n", "show \"n < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc n", "by simp"], ["proof (state)\nthis:\n  n < Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "hence \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "using latestAct_def"], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n  \\<langle>?c \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> =\n  (GREATEST n'. latestAct_cond ?c ?t ?n n')\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n    n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n      [b])\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n     n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n    n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc\n   n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>) @\n      [b])\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = Suc n\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<or>\n    mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "with \\<open>mining (\\<sigma>\\<^bsub>nid\\<^esub>(t (Suc n)))\\<close>"], ["proof (chain)\npicking this:\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b])", "have \"\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]\""], ["proof (prove)\nusing this:\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))\n  \\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) \\<or>\n  mining (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b])\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n       bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]", "by simp"], ["proof (state)\nthis:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "from \\<open>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n", "have \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)\""], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n               length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)", "using asmp"], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub> = n\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                           n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n               length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "with \\<open>honest nid\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)", "have \"length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) \\<ge> PoW t n\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "using pow_le_lgth[of nid t n]"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n             length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n)) < length b)\n  \\<lbrakk>honest nid; \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>;\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t n).\n              length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> PoW t n\n                    \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "moreover"], ["proof (state)\nthis:\n  PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "from \\<open>honest nid\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>", "have \"length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "using pow_ge_lgth[of nid t \"Suc n\"]"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\n  \\<lbrakk>honest nid;\n   \\<parallel>nid\\<parallel>\\<^bsub>t (Suc n)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)))\n                    \\<le> PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "by simp"], ["proof (state)\nthis:\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc\n                             n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>Suc n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    PoW t n < PoW t (Suc n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]\n  PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n)) =\n     bc (\\<sigma>\\<^bsub>nid\\<^esub>t n) @ [b]\n  PoW t n \\<le> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n  length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t (Suc n))) \\<le> PoW t (Suc n)\n\ngoal (1 subgoal):\n 1. PoW t n < PoW t (Suc n)", "by auto"], ["proof (state)\nthis:\n  PoW t n < PoW t (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  PoW t n < PoW t (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"History\""], ["", "text \\<open>\n  In the following we introduce an operator which extracts the development of a blockchain up to a time point @{term n}.\n\\<close>"], ["", "abbreviation \"his_prop t n nid n' nid' x \\<equiv>\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or>\n    (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["", "inductive_set \nhis:: \"trace \\<Rightarrow> nat \\<Rightarrow> 'nid \\<Rightarrow> (nat \\<times> 'nid) set\"\n  for t::trace and n::nat and nid::'nid \n  where \"\\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk> \\<Longrightarrow> (n,nid) \\<in> his t n nid\"\n  | \"\\<lbrakk>(n',nid') \\<in> his t n nid; \\<exists>x. his_prop t n nid n' nid' x\\<rbrakk> \\<Longrightarrow> (SOME x. his_prop t n nid n' nid' x) \\<in> his t n nid\""], ["", "lemma his_act:\n  assumes \"(n',nid') \\<in> his t n nid\"\n  shows \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "using assms"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "proof (rule his.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n 2. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "assume \"(n', nid') = (n, nid)\" and \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\""], ["proof (state)\nthis:\n  (n', nid') = (n, nid)\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n 2. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "thus \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (n', nid') = (n, nid)\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "fix n'' nid''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "assume asmp: \"(n', nid') = (SOME x. his_prop t n nid n'' nid'' x)\"\n  and \"(n'', nid'') \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n'' nid'' x\""], ["proof (state)\nthis:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "hence \"his_prop t n nid n'' nid'' (SOME x. his_prop t n nid n'' nid'' x)\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n'' nid'' x\"]"], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "hence \"\\<parallel>snd (SOME x. his_prop t n nid n'' nid'' x)\\<parallel>\\<^bsub>t (fst (SOME x. his_prop t n nid n'' nid'' x))\\<^esub>\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "moreover"], ["proof (state)\nthis:\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "from asmp"], ["proof (chain)\npicking this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "have \"fst (SOME x. his_prop t n nid n'' nid'' x) = fst (n', nid')\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    fst (n', nid')", "by simp"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  fst (n', nid')\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "moreover"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  fst (n', nid')\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "from asmp"], ["proof (chain)\npicking this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "have \"snd (SOME x. his_prop t n nid n'' nid'' x) = snd (n', nid')\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. snd (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    snd (n', nid')", "by simp"], ["proof (state)\nthis:\n  snd (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  snd (n', nid')\n\ngoal (1 subgoal):\n 1. \\<And>n'a nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))));\n        (n'a, nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n'a n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'a\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a) =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'a)))\\<rbrakk>\n       \\<Longrightarrow> \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))\\<^esub>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  fst (n', nid')\n  snd (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  snd (n', nid')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))\\<^esub>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  fst (n', nid')\n  snd (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  snd (n', nid')\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In addition we also introduce an operator to obtain the predecessor of a blockchains development.\n\\<close>"], ["", "definition \"hisPred\"\n  where \"hisPred t n nid n' \\<equiv> (GREATEST n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n')\""], ["", "lemma hisPrev_prop:\n  assumes \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  shows \"hisPred t n nid n' < n'\" and \"\\<exists>nid'. (hisPred t n nid n',nid')\\<in> his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n' &&&\n    \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. hisPred t n nid n' < n'\n 2. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "obtain n'' where \"\\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n''<n'\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>n''.\n        \\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (2 subgoals):\n 1. hisPred t n nid n' < n'\n 2. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "moreover"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (2 subgoals):\n 1. hisPred t n nid n' < n'\n 2. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "from \\<open>\\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n''<n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'", "have \"\\<exists>i'\\<le>n'. (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and> (\\<forall>n'a. (\\<exists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow> n'a \\<le> i')\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<le>n'.\n       (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n       (\\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i')", "using boundedGreatest[of \"\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n'\" n'' n']"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<lbrakk>\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n';\n   \\<forall>n'a>n'.\n      \\<nexists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i'\\<le>n'.\n                       (\\<exists>nid'.\n                           (i', nid') \\<in> his t n nid \\<and>\n                           i' < n') \\<and>\n                       (\\<forall>n'a.\n                           (\\<exists>nid'.\n                               (n'a, nid') \\<in> his t n nid \\<and>\n                               n'a < n') \\<longrightarrow>\n                           n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<le>n'.\n       (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n       (\\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i')", "by simp"], ["proof (state)\nthis:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')\n\ngoal (2 subgoals):\n 1. hisPred t n nid n' < n'\n 2. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')", "obtain i' where \"\\<forall>n'a. (\\<exists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow> n'a \\<le> i'\""], ["proof (prove)\nusing this:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n\ngoal (2 subgoals):\n 1. hisPred t n nid n' < n'\n 2. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'", "show \"hisPred t n nid n' < n'\" and \"\\<exists>nid'. (hisPred t n nid n',nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n' &&&\n    \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "using GreatestI_nat[of \"\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n'\" n'' i'] hisPred_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n  \\<lbrakk>\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n';\n   \\<And>y.\n      \\<exists>nid'.\n         (y, nid') \\<in> his t n nid \\<and> y < n' \\<Longrightarrow>\n      y \\<le> i'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'.\n                       (GREATEST n''.\n                           \\<exists>nid'.\n                              (n'', nid') \\<in> his t n nid \\<and> n'' < n',\n                        nid')\n                       \\<in> his t n nid \\<and>\n                       (GREATEST n''.\n                           \\<exists>nid'.\n                              (n'', nid') \\<in> his t n nid \\<and> n'' < n')\n                       < n'\n  hisPred ?t ?n ?nid ?n' \\<equiv>\n  GREATEST n''.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<and> n'' < ?n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n' &&&\n    \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  hisPred t n nid n' < n'\n  \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hisPrev_nex_less:\n  assumes \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  shows \"\\<not>(\\<exists>x\\<in>his t n nid. fst x < n' \\<and> fst x>hisPred t n nid n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>his t n nid.\n               fst x < n' \\<and> hisPred t n nid n' < fst x)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                      fst x < n' \\<and>\n                      hisPred t n nid n' < fst x) \\<Longrightarrow>\n    False", "assume \"\\<not>\\<not>(\\<exists>x\\<in>his t n nid. fst x < n' \\<and> fst x>hisPred t n nid n')\""], ["proof (state)\nthis:\n  \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                    fst x < n' \\<and> hisPred t n nid n' < fst x)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                      fst x < n' \\<and>\n                      hisPred t n nid n' < fst x) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                    fst x < n' \\<and> hisPred t n nid n' < fst x)", "obtain n'' nid'' where \"(n'',nid'')\\<in>his t n nid\" and \"n''< n'\" and \"n''>hisPred t n nid n'\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                    fst x < n' \\<and> hisPred t n nid n' < fst x)\n\ngoal (1 subgoal):\n 1. (\\<And>n'' nid''.\n        \\<lbrakk>(n'', nid'') \\<in> his t n nid; n'' < n';\n         hisPred t n nid n' < n''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                      fst x < n' \\<and>\n                      hisPred t n nid n' < fst x) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                      fst x < n' \\<and>\n                      hisPred t n nid n' < fst x) \\<Longrightarrow>\n    False", "have \"n''\\<le>hisPred t n nid n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "from \\<open>(n'',nid'')\\<in>his t n nid\\<close> \\<open>n''< n'\\<close>"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'", "have \"\\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n''<n'\""], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "moreover"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "from \\<open>\\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n''<n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'", "have \"\\<exists>i'\\<le>n'. (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and> (\\<forall>n'a. (\\<exists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow> n'a \\<le> i')\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<le>n'.\n       (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n       (\\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i')", "using boundedGreatest[of \"\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n'\" n'' n']"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<lbrakk>\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n';\n   \\<forall>n'a>n'.\n      \\<nexists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i'\\<le>n'.\n                       (\\<exists>nid'.\n                           (i', nid') \\<in> his t n nid \\<and>\n                           i' < n') \\<and>\n                       (\\<forall>n'a.\n                           (\\<exists>nid'.\n                               (n'a, nid') \\<in> his t n nid \\<and>\n                               n'a < n') \\<longrightarrow>\n                           n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<le>n'.\n       (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n       (\\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i')", "by simp"], ["proof (state)\nthis:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')", "obtain i' where \"\\<forall>n'a. (\\<exists>nid'. (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow> n'a \\<le> i'\""], ["proof (prove)\nusing this:\n  \\<exists>i'\\<le>n'.\n     (\\<exists>nid'. (i', nid') \\<in> his t n nid \\<and> i' < n') \\<and>\n     (\\<forall>n'a.\n         (\\<exists>nid'.\n             (n'a, nid') \\<in> his t n nid \\<and>\n             n'a < n') \\<longrightarrow>\n         n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<forall>n'a.\n           (\\<exists>nid'.\n               (n'a, nid') \\<in> his t n nid \\<and>\n               n'a < n') \\<longrightarrow>\n           n'a \\<le> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "using Greatest_le_nat[of \"\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n'\" n'' i'] hisPred_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n'\n  \\<forall>n'a.\n     (\\<exists>nid'.\n         (n'a, nid') \\<in> his t n nid \\<and> n'a < n') \\<longrightarrow>\n     n'a \\<le> i'\n  \\<lbrakk>\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n';\n   \\<And>y.\n      \\<exists>nid'.\n         (y, nid') \\<in> his t n nid \\<and> y < n' \\<Longrightarrow>\n      y \\<le> i'\\<rbrakk>\n  \\<Longrightarrow> n''\n                    \\<le> (GREATEST n''.\n                              \\<exists>nid'.\n                                 (n'', nid') \\<in> his t n nid \\<and>\n                                 n'' < n')\n  hisPred ?t ?n ?nid ?n' \\<equiv>\n  GREATEST n''.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<and> n'' < ?n'\n\ngoal (1 subgoal):\n 1. n'' \\<le> hisPred t n nid n'", "by simp"], ["proof (state)\nthis:\n  n'' \\<le> hisPred t n nid n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<le> hisPred t n nid n'\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>x\\<in>his t n nid.\n                      fst x < n' \\<and>\n                      hisPred t n nid n' < fst x) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'\n  hisPred t n nid n' < n''\n  n'' \\<le> hisPred t n nid n'", "show False"], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n  n'' < n'\n  hisPred t n nid n' < n''\n  n'' \\<le> hisPred t n nid n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma his_le:\n  assumes \"x \\<in> his t n nid\"\n  shows \"fst x\\<le>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst x \\<le> n", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. fst x \\<le> n", "proof (induction rule: his.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n    fst (n, nid) \\<le> n\n 2. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "case 1"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub> \\<Longrightarrow>\n    fst (n, nid) \\<le> n\n 2. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "then"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "show ?case"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. fst (n, nid) \\<le> n", "by simp"], ["proof (state)\nthis:\n  fst (n, nid) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "case (2 n' nid')"], ["proof (state)\nthis:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  fst (n', nid') \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "moreover"], ["proof (state)\nthis:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  fst (n', nid') \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "have \"fst (SOME x. his_prop t n nid n' nid' x) \\<le> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "from \"2.hyps\""], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have \"\\<exists>x. his_prop t n nid n' nid' x\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "hence \"his_prop t n nid n' nid' (SOME x. his_prop t n nid n' nid' x)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                     n'))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid' t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n' nid' x\"]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                     n'))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid' t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "hence \"fst (SOME x. his_prop t n nid n' nid' x) = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "by force"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "moreover"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "from \\<open>his_prop t n nid n' nid' (SOME x. his_prop t n nid n' nid' x)\\<close>"], ["proof (chain)\npicking this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have \"\\<exists>n. latestAct_cond nid' t n' n\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<exists>n. latestAct_cond nid' t n' n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n. latestAct_cond nid' t n' n\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "ultimately"], ["proof (chain)\npicking this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid' t n' n", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid' t n' n\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "using latestAct_prop(2)[of n' nid' t]"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid' t n' n\n  \\<exists>n'a. latestAct_cond nid' t n' n'a \\<Longrightarrow>\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> < n'\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n'", "by simp"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<le> n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(n', nid') \\<in> his t n nid; fst (n', nid') \\<le> n;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> fst (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n                         \\<le> n", "ultimately"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  fst (n', nid') \\<le> n\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<le> n'", "show ?case"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  fst (n', nid') \\<le> n\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<le> n'\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<le> n", "by simp"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma his_determ_base:\n  shows \"(n, nid') \\<in> his t n nid \\<Longrightarrow> nid'=nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "proof (rule his.cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow> ?a \\<in> his ?t ?n ?nid\n 2. \\<lbrakk>(n, nid') \\<in> his t n nid; ?a = (?n, ?nid);\n     \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> nid' = nid\n 3. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        ?a =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t ?n ?nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "assume \"(n, nid') = (n, nid)\""], ["proof (state)\nthis:\n  (n, nid') = (n, nid)\n\ngoal (3 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow> ?a \\<in> his ?t ?n ?nid\n 2. \\<lbrakk>(n, nid') \\<in> his t n nid; ?a = (?n, ?nid);\n     \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> nid' = nid\n 3. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        ?a =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t ?n ?nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "thus ?thesis"], ["proof (prove)\nusing this:\n  (n, nid') = (n, nid)\n\ngoal (1 subgoal):\n 1. nid' = nid", "by simp"], ["proof (state)\nthis:\n  nid' = nid\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "fix n' nid'a"], ["proof (state)\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "assume \"(n, nid') \\<in> his t n nid\" and \"(n, nid') = (SOME x. his_prop t n nid n' nid'a x)\"\n    and \"(n', nid'a) \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n' nid'a x\""], ["proof (state)\nthis:\n  (n, nid') \\<in> his t n nid\n  (n, nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  (n', nid'a) \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "hence \"his_prop t n nid n' nid'a (SOME x. his_prop t n nid n' nid'a x)\""], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n  (n, nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  (n', nid'a) \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                      n'))))\\<parallel>\\<^bsub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                  n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'a t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n              (fst (SOME x.\n                       (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n' nid'a x\"]"], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n  (n, nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  (n', nid'a) \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    n'))))\\<parallel>\\<^bsub>t\n        (fst (SOME x.\n                 (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                 \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                 fst x =\n                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                 (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                   (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                  (\\<exists>b.\n                      bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                      bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                      [b] \\<and>\n                      mining\n                       (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'a t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                      n'))))\\<parallel>\\<^bsub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                  n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'a t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n              (fst (SOME x.\n                       (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    n'))))\\<parallel>\\<^bsub>t\n        (fst (SOME x.\n                 (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                 \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                 fst x =\n                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                 (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                   (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                  (\\<exists>b.\n                      bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                      bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                      [b] \\<and>\n                      mining\n                       (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'a t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "hence \"fst (SOME x. his_prop t n nid n' nid'a x) = \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    n'))))\\<parallel>\\<^bsub>t\n        (fst (SOME x.\n                 (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                 \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                 fst x =\n                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                 (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                   (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                  (\\<exists>b.\n                      bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                      bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                      [b] \\<and>\n                      mining\n                       (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'a t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "by force"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "moreover"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "from \\<open>his_prop t n nid n' nid'a (SOME x. his_prop t n nid n' nid'a x)\\<close>"], ["proof (chain)\npicking this:\n  (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    n'))))\\<parallel>\\<^bsub>t\n        (fst (SOME x.\n                 (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                 \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                 fst x =\n                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                 (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                   (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                  (\\<exists>b.\n                      bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                      bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                      [b] \\<and>\n                      mining\n                       (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'a t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))", "have \"\\<exists>n. latestAct_cond nid'a t n' n\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    n'))))\\<parallel>\\<^bsub>t\n        (fst (SOME x.\n                 (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                 \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                 fst x =\n                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                 (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                   (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                  (\\<exists>b.\n                      bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                      bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                      [b] \\<and>\n                      mining\n                       (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'a t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n          (fst (SOME x.\n                   (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                   \\<parallel>snd x\\<parallel>\\<^bsub>t\n                 (fst x)\\<^esub> \\<and>\n                   fst x =\n                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                   (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                     (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                        [b] \\<and>\n                        mining\n                         (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'a t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\\<^esub>t\n            (fst (SOME x.\n                     (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<exists>n. latestAct_cond nid'a t n' n", "by simp"], ["proof (state)\nthis:\n  \\<exists>n. latestAct_cond nid'a t n' n\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "ultimately"], ["proof (chain)\npicking this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid'a t n' n", "have \"fst (SOME x. his_prop t n nid n' nid'a x) < n'\""], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid'a t n' n\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n    < n'", "using latestAct_prop(2)[of n' nid'a t]"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))) =\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n. latestAct_cond nid'a t n' n\n  \\<exists>n'a. latestAct_cond nid'a t n' n'a \\<Longrightarrow>\n  \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> < n'\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n    < n'", "by simp"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  < n'\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "with \\<open>(n, nid') = (SOME x. his_prop t n nid n' nid'a x)\\<close>"], ["proof (chain)\npicking this:\n  (n, nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  < n'", "have \"fst (n, nid')<n'\""], ["proof (prove)\nusing this:\n  (n, nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))))\n  < n'\n\ngoal (1 subgoal):\n 1. fst (n, nid') < n'", "by simp"], ["proof (state)\nthis:\n  fst (n, nid') < n'\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "hence \"n<n'\""], ["proof (prove)\nusing this:\n  fst (n, nid') < n'\n\ngoal (1 subgoal):\n 1. n < n'", "by simp"], ["proof (state)\nthis:\n  n < n'\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "moreover"], ["proof (state)\nthis:\n  n < n'\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "from \\<open>(n', nid'a) \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid'a) \\<in> his t n nid", "have \"n'\\<le>n\""], ["proof (prove)\nusing this:\n  (n', nid'a) \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n', nid'a) \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n' \\<le> n\n\ngoal (2 subgoals):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his ?t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n, nid') \\<in> his t n nid;\n        (n, nid') =\n        (SOME x.\n            (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))));\n        (n', nid'a) \\<in> his ?t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a ?t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> ?t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>?t n')))\\<rbrakk>\n       \\<Longrightarrow> nid' = nid", "ultimately"], ["proof (chain)\npicking this:\n  n < n'\n  n' \\<le> n", "show \"nid' = nid\""], ["proof (prove)\nusing this:\n  n < n'\n  n' \\<le> n\n\ngoal (1 subgoal):\n 1. nid' = nid", "by simp"], ["proof (state)\nthis:\n  nid' = nid\n\ngoal (1 subgoal):\n 1. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (n, nid') \\<in> his t n nid", "qed"], ["", "lemma hisPrev_same:\n  assumes \"\\<exists>n'<n''. \\<exists>nid'. (n',nid')\\<in> his t n nid\"\n  and \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\"\n  and \"(n',nid')\\<in> his t n nid\"\n  and \"(n'',nid'')\\<in> his t n nid\"\n  and \"hisPred t n nid n'=hisPred t n nid n''\"\n  shows \"n'=n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' = n''", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<noteq> n'' \\<Longrightarrow> False", "assume \"\\<not> n'=n''\""], ["proof (state)\nthis:\n  n' \\<noteq> n''\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n'' \\<Longrightarrow> False", "hence \"n'>n'' \\<or> n'<n''\""], ["proof (prove)\nusing this:\n  n' \\<noteq> n''\n\ngoal (1 subgoal):\n 1. n'' < n' \\<or> n' < n''", "by auto"], ["proof (state)\nthis:\n  n'' < n' \\<or> n' < n''\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n'' \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  n'' < n' \\<or> n' < n''\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "assume \"n'<n''\""], ["proof (state)\nthis:\n  n' < n''\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "hence \"fst (n',nid')<n''\""], ["proof (prove)\nusing this:\n  n' < n''\n\ngoal (1 subgoal):\n 1. fst (n', nid') < n''", "by simp"], ["proof (state)\nthis:\n  fst (n', nid') < n''\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fst (n', nid') < n''\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"hisPred t n nid n'<n'\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n'", "using hisPrev_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  hisPred ?t ?n ?nid ?n' < ?n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n'", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' < n'\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n  hisPred t n nid n' < n'", "have \"hisPred t n nid n''<n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n  hisPred t n nid n' < n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'' < n'", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n'' < n'\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "hence \"hisPred t n nid n''<fst (n',nid')\""], ["proof (prove)\nusing this:\n  hisPred t n nid n'' < n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'' < fst (n', nid')", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n'' < fst (n', nid')\n\ngoal (2 subgoals):\n 1. n'' < n' \\<Longrightarrow> False\n 2. n' < n'' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  fst (n', nid') < n''\n  hisPred t n nid n'' < fst (n', nid')", "show False"], ["proof (prove)\nusing this:\n  fst (n', nid') < n''\n  hisPred t n nid n'' < fst (n', nid')\n\ngoal (1 subgoal):\n 1. False", "using hisPrev_nex_less[of n'' t n nid] assms"], ["proof (prove)\nusing this:\n  fst (n', nid') < n''\n  hisPred t n nid n'' < fst (n', nid')\n  \\<exists>n''a<n''.\n     \\<exists>nid'. (n''a, nid') \\<in> his t n nid \\<Longrightarrow>\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n'' \\<and> hisPred t n nid n'' < fst x)\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "(*Symmetric*)"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "assume \"n'>n''\""], ["proof (state)\nthis:\n  n'' < n'\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "hence \"fst (n'',nid')<n'\""], ["proof (prove)\nusing this:\n  n'' < n'\n\ngoal (1 subgoal):\n 1. fst (n'', nid') < n'", "by simp"], ["proof (state)\nthis:\n  fst (n'', nid') < n'\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fst (n'', nid') < n'\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "have \"hisPred t n nid n''<n''\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'' < n''", "using hisPrev_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  hisPred ?t ?n ?nid ?n' < ?n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'' < n''", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n'' < n''\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n  hisPred t n nid n'' < n''", "have \"hisPred t n nid n'<n''\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n  hisPred t n nid n'' < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "hence \"hisPred t n nid n'<fst (n'',nid')\""], ["proof (prove)\nusing this:\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < fst (n'', nid')", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' < fst (n'', nid')\n\ngoal (1 subgoal):\n 1. n'' < n' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  fst (n'', nid') < n'\n  hisPred t n nid n' < fst (n'', nid')", "show False"], ["proof (prove)\nusing this:\n  fst (n'', nid') < n'\n  hisPred t n nid n' < fst (n'', nid')\n\ngoal (1 subgoal):\n 1. False", "using hisPrev_nex_less[of n' t n nid] assms"], ["proof (prove)\nusing this:\n  fst (n'', nid') < n'\n  hisPred t n nid n' < fst (n'', nid')\n  \\<exists>n''<n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n' \\<and> hisPred t n nid n' < fst x)\n  \\<exists>n'<n''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma his_determ_ext:\n  shows \"n'\\<le>n \\<Longrightarrow> (\\<exists>nid'. (n',nid')\\<in>his t n nid) \\<Longrightarrow> (\\<exists>!nid'. (n',nid')\\<in>his t n nid) \\<and>\n    ((\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x) \\<and>\n    (hisPred t n nid n', (SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' \\<le> n;\n     \\<exists>nid'. (n', nid') \\<in> his t n nid\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n                      ((\\<exists>n''<n'.\n                           \\<exists>nid'.\n                              (n'', nid')\n                              \\<in> his t n nid) \\<longrightarrow>\n                       (\\<exists>x.\n                           (\\<exists>na.\n                               latestAct_cond\n                                (THE nid'. (n', nid') \\<in> his t n nid) t\n                                n' na) \\<and>\n                           \\<parallel>snd\n x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                           fst x =\n                           \\<langle>THE nid'.\n (n', nid')\n \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                           (prefix\n                             (bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                             (bc (\\<sigma>\\<^bsub>snd\n             x\\<^esub>t (fst x))) \\<or>\n                            (\\<exists>b.\n                                bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x)) @\n                                [b] \\<and>\n                                mining\n                                 (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                       (hisPred t n nid n',\n                        SOME nid'.\n                           (hisPred t n nid n', nid') \\<in> his t n nid) =\n                       (SOME x.\n                           (\\<exists>na.\n                               latestAct_cond\n                                (THE nid'. (n', nid') \\<in> his t n nid) t\n                                n' na) \\<and>\n                           \\<parallel>snd\n x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                           fst x =\n                           \\<langle>THE nid'.\n (n', nid')\n \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                           (prefix\n                             (bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                             (bc (\\<sigma>\\<^bsub>snd\n             x\\<^esub>t (fst x))) \\<or>\n                            (\\<exists>b.\n                                bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x)) @\n                                [b] \\<and>\n                                mining\n                                 (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n')))))", "proof (induction n' rule: my_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "case base"], ["proof (state)\nthis:\n  \\<exists>nid'. (n, nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "then"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n, nid') \\<in> his t n nid", "obtain nid' where \"(n, nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        (n, nid') \\<in> his t n nid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n, nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "hence \"\\<exists>!nid'. (n, nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n, nid') \\<in> his t n nid", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "fix nid''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "assume \"(n, nid'') \\<in> his t n nid\""], ["proof (state)\nthis:\n  (n, nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "with his_determ_base"], ["proof (chain)\npicking this:\n  (?n, ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> ?nid' = ?nid\n  (n, nid'') \\<in> his t n nid", "have \"nid''=nid\""], ["proof (prove)\nusing this:\n  (?n, ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> ?nid' = ?nid\n  (n, nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'' = nid", "by simp"], ["proof (state)\nthis:\n  nid'' = nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "moreover"], ["proof (state)\nthis:\n  nid'' = nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "from \\<open>(n, nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n, nid') \\<in> his t n nid", "have \"nid'=nid\""], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid' = nid", "using his_determ_base"], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n  (?n, ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> ?nid' = ?nid\n\ngoal (1 subgoal):\n 1. nid' = nid", "by simp"], ["proof (state)\nthis:\n  nid' = nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'a. (n, nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "ultimately"], ["proof (chain)\npicking this:\n  nid'' = nid\n  nid' = nid", "show \"nid'' = nid'\""], ["proof (prove)\nusing this:\n  nid'' = nid\n  nid' = nid\n\ngoal (1 subgoal):\n 1. nid'' = nid'", "by simp"], ["proof (state)\nthis:\n  nid'' = nid'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "moreover"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "have \"(\\<exists>n''<n. \\<exists>nid'. (n'',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>x. his_prop t n nid n (THE nid'. (n,nid')\\<in>his t n nid) x) \\<and> (hisPred t n nid n, (SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n (THE nid'. (n,nid')\\<in>his t n nid) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n''<n.\n        \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n''<n.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "assume \"\\<exists>n''<n. \\<exists>nid'. (n'',nid')\\<in> his t n nid\""], ["proof (state)\nthis:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "hence \"\\<exists>nid'. (hisPred t n nid n, nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (hisPred t n nid n, nid') \\<in> his t n nid", "using hisPrev_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<exists>nid'. (hisPred ?t ?n ?nid ?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (hisPred t n nid n, nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (hisPred t n nid n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "hence \"(hisPred t n nid n, (SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)) \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (hisPred t n nid n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)\n    \\<in> his t n nid", "using someI_ex[of \"\\<lambda>nid'. (hisPred t n nid n, nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (hisPred t n nid n, nid') \\<in> his t n nid\n  \\<exists>x. (hisPred t n nid n, x) \\<in> his t n nid \\<Longrightarrow>\n  (hisPred t n nid n, SOME x. (hisPred t n nid n, x) \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "thus \"(\\<exists>x. his_prop t n nid n (THE nid'. (n,nid')\\<in>his t n nid) x) \\<and>\n      (hisPred t n nid n, (SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n (THE nid'. (n,nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "proof (rule his.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n,\n              SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                      (hisPred t n nid n,\n                       SOME nid'.\n                          (hisPred t n nid n, nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "assume \"(hisPred t n nid n, SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) = (n, nid)\""], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (n, nid)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n,\n              SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                      (hisPred t n nid n,\n                       SOME nid'.\n                          (hisPred t n nid n, nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "hence \"hisPred t n nid n=n\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (n, nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n = n", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n,\n              SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                      (hisPred t n nid n,\n                       SOME nid'.\n                          (hisPred t n nid n, nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n, nid') \\<in> his t n nid) t n\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n, nid') \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n, nid') \\<in> his t n nid\\<^esub>t n))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "with \\<open>\\<exists>n''<n. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  hisPred t n nid n = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  hisPred t n nid n = n\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "using hisPrev_prop(1)[of n t n nid]"], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  hisPred t n nid n = n\n  \\<exists>n''<n.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n  hisPred t n nid n < n\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "by force"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "fix n'' nid''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "assume asmp: \"(hisPred t n nid n, SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) = (SOME x. his_prop t n nid n'' nid'' x)\"\n      and \"(n'', nid'') \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n'' nid'' x\""], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "moreover"], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "have \"n''=n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n'' = n", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<le> n\n 2. n \\<le> n''", "show \"n''\\<ge>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> n''", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "assume \"(\\<not>n''\\<ge>n)\""], ["proof (state)\nthis:\n  \\<not> n \\<le> n''\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "hence \"n''<n\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> n''\n\ngoal (1 subgoal):\n 1. n'' < n", "by simp"], ["proof (state)\nthis:\n  n'' < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n'' < n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "have \"n''>hisPred t n nid n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "let ?x=\"\\<lambda>x. his_prop t n nid n'' nid'' x\""], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "from \\<open>\\<exists>x. his_prop t n nid n'' nid'' x\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "have \"his_prop t n nid n'' nid'' (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "using someI_ex[of ?x]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "hence \"n''>fst (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n    < n''", "using latestAct_prop(2)[of n'' nid'' t]"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  \\<exists>n'. latestAct_cond nid'' t n'' n' \\<Longrightarrow>\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> < n''\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n    < n''", "by force"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "moreover"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "from asmp"], ["proof (chain)\npicking this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "have \"fst (hisPred t n nid n, SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) = fst (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. fst (hisPred t n nid n,\n         SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "by simp"], ["proof (state)\nthis:\n  fst (hisPred t n nid n,\n       SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "ultimately"], ["proof (chain)\npicking this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n  fst (hisPred t n nid n,\n       SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n  fst (hisPred t n nid n,\n       SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n < n''", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n < n''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hisPred t n nid n < n''\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid n < n''\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "from \\<open>\\<exists>n''<n. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"\\<not>(\\<exists>x\\<in>his t n nid. fst x < n \\<and> fst x > hisPred t n nid n)\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>his t n nid.\n               fst x < n \\<and> hisPred t n nid n < fst x)", "using hisPrev_nex_less"], ["proof (prove)\nusing this:\n  \\<exists>n''<n. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<not> (\\<exists>x\\<in>his ?t ?n ?nid.\n             fst x < ?n' \\<and> hisPred ?t ?n ?nid ?n' < fst x)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>his t n nid.\n               fst x < n \\<and> hisPred t n nid n < fst x)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n \\<and> hisPred t n nid n < fst x)\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> n'' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n'' < n\n  hisPred t n nid n < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n \\<and> hisPred t n nid n < fst x)", "show False"], ["proof (prove)\nusing this:\n  n'' < n\n  hisPred t n nid n < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n \\<and> hisPred t n nid n < fst x)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (prove)\nusing this:\n  n'' < n\n  hisPred t n nid n < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n \\<and> hisPred t n nid n < fst x)\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<le> n''\n\ngoal (1 subgoal):\n 1. n'' \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<le> n", "from \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid", "show \"n'' \\<le> n\""], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n'' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n'' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n'' \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "ultimately"], ["proof (chain)\npicking this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n", "have \"(hisPred t n nid n, SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) = (SOME x. his_prop t n nid n nid'' x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na. latestAct_cond nid'' t n na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n))))", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na. latestAct_cond nid'' t n na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "moreover"], ["proof (state)\nthis:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na. latestAct_cond nid'' t n na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "from \\<open>n''=n\\<close> \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\n  (n'', nid'') \\<in> his t n nid", "have \"(n, nid'') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  n'' = n\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (n, nid'') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (n, nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "with \\<open>\\<exists>!nid'. (n,nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n  (n, nid'') \\<in> his t n nid", "have \"nid''=(THE nid'. (n,nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n  (n, nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n, nid') \\<in> his t n nid)", "using the1_equality[of \"\\<lambda>nid'. (n, nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n  (n, nid'') \\<in> his t n nid\n  \\<lbrakk>\\<exists>!x. (n, x) \\<in> his t n nid;\n   (n, ?a) \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (THE x. (n, x) \\<in> his t n nid) = ?a\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n, nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "moreover"], ["proof (state)\nthis:\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "from \\<open>\\<exists>x. his_prop t n nid n'' nid'' x\\<close> \\<open>n''=n\\<close> \\<open>nid''=(THE nid'. (n,nid')\\<in>his t n nid)\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)", "have \"\\<exists>x. his_prop t n nid n (THE nid'. (n,nid')\\<in>his t n nid) x\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n, nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n)))", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n, nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n,\n                 SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n)))) \\<and>\n                         (hisPred t n nid n,\n                          SOME nid'.\n                             (hisPred t n nid n, nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n, nid') \\<in> his t n nid) t\n                                  n na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n, nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n, nid') \\<in> his t n nid\\<^esub>t n))))", "ultimately"], ["proof (chain)\npicking this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na. latestAct_cond nid'' t n na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n))))\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n, nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n)))", "show ?thesis"], ["proof (prove)\nusing this:\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na. latestAct_cond nid'' t n na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n))))\n  nid'' = (THE nid'. (n, nid') \\<in> his t n nid)\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n, nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n, nid') \\<in> his t n nid\\<^esub>t n)))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid')\n                                  \\<in> his t n nid\\<^esub>t n)))) \\<and>\n    (hisPred t n nid n,\n     SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n, nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n, nid')\n                                    \\<in> his t n nid\\<^esub>t n) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n))))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>n''<n.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))\n\ngoal (2 subgoals):\n 1. \\<exists>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n  (\\<exists>n''<n.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n, nid') \\<in> his t n nid\n  (\\<exists>n''<n.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid')\n                                \\<in> his t n nid\\<^esub>t n)))) \\<and>\n  (hisPred t n nid n,\n   SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n, nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n, nid') \\<in> his t n nid\\<^esub>t n) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n, nid') \\<in> his t n nid\\<^esub>t n))))\n\ngoal (1 subgoal):\n 1. (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))) \\<and>\n     (hisPred t n nid n,\n      SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n, nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n, nid')\n                                     \\<in> his t n nid\\<^esub>t n) =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid')\n                                   \\<in> his t n nid\\<^esub>t n)))))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>!nid'. (n, nid') \\<in> his t n nid) \\<and>\n  ((\\<exists>n''<n.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n   (\\<exists>x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n, nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid')\n                                 \\<in> his t n nid\\<^esub>t n)))) \\<and>\n   (hisPred t n nid n,\n    SOME nid'. (hisPred t n nid n, nid') \\<in> his t n nid) =\n   (SOME x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n, nid') \\<in> his t n nid) t n\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n, nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n, nid') \\<in> his t n nid\\<^esub>t n) =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n, nid') \\<in> his t n nid\\<^esub>t n)))))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "case (step n')"], ["proof (state)\nthis:\n  n' \\<le> n'\n  n' < n\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n  \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "then"], ["proof (chain)\npicking this:\n  n' \\<le> n'\n  n' < n\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n  \\<exists>nid'. (n', nid') \\<in> his t n nid", "obtain nid' where \"(n', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  n' \\<le> n'\n  n' < n\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n  \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        (n', nid') \\<in> his t n nid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "hence \"\\<exists>!nid'. (n', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n', nid') \\<in> his t n nid", "proof (rule his.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "assume \"(n', nid') = (n, nid)\""], ["proof (state)\nthis:\n  (n', nid') = (n, nid)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "hence \"n'=n\""], ["proof (prove)\nusing this:\n  (n', nid') = (n, nid)\n\ngoal (1 subgoal):\n 1. n' = n", "by simp"], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "with step.hyps"], ["proof (chain)\npicking this:\n  n' \\<le> n'\n  n' < n\n  n' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n' \\<le> n'\n  n' < n\n  n' = n\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "fix n'''' nid''''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "assume \"(n'''', nid'''') \\<in> his t n nid\"\n      and n'nid': \"(n', nid') = (SOME x. his_prop t n nid n'''' nid'''' x)\"\n      and \"(n'''', nid'''') \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n'''' nid'''' x\""], ["proof (state)\nthis:\n  (n'''', nid'''') \\<in> his t n nid\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  (n'''', nid'''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!nid'. (n', nid') \\<in> his t n nid", "from \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid", "show ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n', nid') \\<in> his t n nid", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'a.\n       (n', nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "fix nid''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'a.\n       (n', nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "assume \"(n', nid'') \\<in> his t n nid\""], ["proof (state)\nthis:\n  (n', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'a.\n       (n', nid'a) \\<in> his t n nid \\<Longrightarrow> nid'a = nid'", "thus \"nid'' = nid'\""], ["proof (prove)\nusing this:\n  (n', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'' = nid'", "proof (rule his.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid'') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> nid'' = nid'\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "assume \"(n', nid'') = (n, nid)\""], ["proof (state)\nthis:\n  (n', nid'') = (n, nid)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid'') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> nid'' = nid'\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "hence \"n'=n\""], ["proof (prove)\nusing this:\n  (n', nid'') = (n, nid)\n\ngoal (1 subgoal):\n 1. n' = n", "by simp"], ["proof (state)\nthis:\n  n' = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(n', nid'') = (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> nid'' = nid'\n 2. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "with step.hyps"], ["proof (chain)\npicking this:\n  n' \\<le> n'\n  n' < n\n  n' = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n' \\<le> n'\n  n' < n\n  n' = n\n\ngoal (1 subgoal):\n 1. nid'' = nid'", "by simp"], ["proof (state)\nthis:\n  nid'' = nid'\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "fix n''' nid'''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "assume \"(n''', nid''') \\<in> his t n nid\"\n          and n'nid'': \"(n', nid'') = (SOME x. his_prop t n nid n''' nid''' x)\"\n          and \"(n''', nid''') \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n''' nid''' x\""], ["proof (state)\nthis:\n  (n''', nid''') \\<in> his t n nid\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (n''', nid''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "moreover"], ["proof (state)\nthis:\n  (n''', nid''') \\<in> his t n nid\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (n''', nid''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "have \"n'''=n''''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n''' = n''''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n''' = n''''", "have \"hisPred t n nid n''' = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "from n'nid'' \\<open>\\<exists>x. his_prop t n nid n''' nid''' x\\<close>"], ["proof (chain)\npicking this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "have \"his_prop t n nid n''' nid''' (n',nid'')\""], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n''' nid''' x\"]"], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                     n'''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                    n''')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))) =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid''' t n''' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                                 n'''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                      n'''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid''' t n''' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "hence \"n'''>n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. n' < n'''", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. n' < n'''", "by simp"], ["proof (state)\nthis:\n  n' < n'''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "moreover"], ["proof (state)\nthis:\n  n' < n'''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "from \\<open>(n''', nid''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid", "have \"n'''\\<le> n\""], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n''' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n''' \\<le> n\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "moreover"], ["proof (state)\nthis:\n  n''' \\<le> n\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "from \\<open>(n''', nid''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid", "have \"\\<exists>nid'. (n''', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n''', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "ultimately"], ["proof (chain)\npicking this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid", "have \"(\\<exists>n'<n'''. \\<exists>nid'. (n',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>!nid'. (n''',nid') \\<in> his t n nid) \\<and> (hisPred t n nid n''', (SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n''' (THE nid'. (n''',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n'''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n''', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n''',\n     SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n''', nid')\n                                    \\<in> his t n nid\\<^esub>t n''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))))", "using step.IH"], ["proof (prove)\nusing this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n'''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n''', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n''',\n     SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n''', nid')\n                                    \\<in> his t n nid\\<^esub>t n''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n'<n'''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "with \\<open>n'''>n'\\<close> \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  n' < n'''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n'''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))", "have \"\\<exists>!nid'. (n''',nid') \\<in> his t n nid\" and \"(hisPred t n nid n''', (SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n''' (THE nid'. (n''',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n'''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n'''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n''', nid') \\<in> his t n nid &&&\n    (hisPred t n nid n''',\n     SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n''', nid')\n                                    \\<in> his t n nid\\<^esub>t n''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''))))", "by auto"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "moreover"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "from \\<open>\\<exists>!nid'. (n''',nid') \\<in> his t n nid\\<close> \\<open>(n''', nid''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (n''', nid''') \\<in> his t n nid", "have \"nid'''=(THE nid'. (n''',nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (n''', nid''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid''' = (THE nid'. (n''', nid') \\<in> his t n nid)", "using the1_equality[of \"\\<lambda>nid'. (n''', nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (n''', nid''') \\<in> his t n nid\n  \\<lbrakk>\\<exists>!x. (n''', x) \\<in> his t n nid;\n   (n''', ?a) \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (THE x. (n''', x) \\<in> his t n nid) = ?a\n\ngoal (1 subgoal):\n 1. nid''' = (THE nid'. (n''', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid''' = (THE nid'. (n''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n  nid''' = (THE nid'. (n''', nid') \\<in> his t n nid)", "have \"(hisPred t n nid n''', (SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n''' nid''' x)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n''', nid') \\<in> his t n nid) t n'''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n''', nid')\n                                \\<in> his t n nid\\<^esub>t n'''))))\n  nid''' = (THE nid'. (n''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n''',\n     SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "with n'nid''"], ["proof (chain)\npicking this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))", "have \"(n', nid'') = (hisPred t n nid n''', (SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid))\""], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n\ngoal (1 subgoal):\n 1. (n', nid'') =\n    (hisPred t n nid n''',\n     SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  (n', nid'') =\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (hisPred t n nid n''',\n   SOME nid'. (hisPred t n nid n''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = n'", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n''' = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hisPred t n nid n''' = n'\n\ngoal (1 subgoal):\n 1. n''' = n''''", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid n''' = n'\n\ngoal (1 subgoal):\n 1. n''' = n''''", "have \"hisPred t n nid n'''' = n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "(*Symmetric*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "from n'nid' \\<open>\\<exists>x. his_prop t n nid n'''' nid'''' x\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "have \"his_prop t n nid n'''' nid'''' (n',nid')\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid')\\<parallel>\\<^bsub>t\n       (fst (n', nid'))\\<^esub> \\<and>\n    fst (n', nid') =\n    \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n      (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n'''' nid'''' x\"]"], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                      n''''))))\\<parallel>\\<^bsub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                       n'''')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))) =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'''' t n''''\nn) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                                  n''''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n.\n                            latestAct_cond nid'''' t n'''' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                        (prefix\n                          (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                         n''''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'''' t n'''' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\\<^esub>t\n                 (fst (SOME x.\n                          (\\<exists>n.\n                              latestAct_cond nid'''' t n'''' n) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                           n'''')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid')\\<parallel>\\<^bsub>t\n       (fst (n', nid'))\\<^esub> \\<and>\n    fst (n', nid') =\n    \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n      (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "hence \"n''''>n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. n' < n''''", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. n' < n''''", "by simp"], ["proof (state)\nthis:\n  n' < n''''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "moreover"], ["proof (state)\nthis:\n  n' < n''''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "from \\<open>(n'''', nid'''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n'''', nid'''') \\<in> his t n nid", "have \"n''''\\<le> n\""], ["proof (prove)\nusing this:\n  (n'''', nid'''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n'''' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n'''', nid'''') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n'''' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n'''' \\<le> n\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "moreover"], ["proof (state)\nthis:\n  n'''' \\<le> n\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "from \\<open>(n'''', nid'''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n'''', nid'''') \\<in> his t n nid", "have \"\\<exists>nid'. (n'''', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n'''', nid'''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n'''', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "ultimately"], ["proof (chain)\npicking this:\n  n' < n''''\n  n'''' \\<le> n\n  \\<exists>nid'. (n'''', nid') \\<in> his t n nid", "have \"(\\<exists>n'<n''''. \\<exists>nid'. (n',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>!nid'. (n'''',nid') \\<in> his t n nid) \\<and> (hisPred t n nid n'''', (SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'''' (THE nid'. (n'''',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n''''\n  n'''' \\<le> n\n  \\<exists>nid'. (n'''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n''''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n'''', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n'''',\n     SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t\n             n'''' na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'''', nid')\n                                    \\<in> his t n nid\\<^esub>t n'''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))))", "using step.IH"], ["proof (prove)\nusing this:\n  n' < n''''\n  n'''' \\<le> n\n  \\<exists>nid'. (n'''', nid') \\<in> his t n nid\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n''''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n'''', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n'''',\n     SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t\n             n'''' na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'''', nid')\n                                    \\<in> his t n nid\\<^esub>t n'''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n'<n''''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "with \\<open>n''''>n'\\<close> \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  n' < n''''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n''''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))", "have \"\\<exists>!nid'. (n'''',nid') \\<in> his t n nid\" and \"(hisPred t n nid n'''', (SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'''' (THE nid'. (n'''',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n''''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n''''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'''', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n'''', nid') \\<in> his t n nid &&&\n    (hisPred t n nid n'''',\n     SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t\n             n'''' na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'''', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'''', nid')\n                                    \\<in> his t n nid\\<^esub>t n'''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n''''))))", "by auto"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "moreover"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "from \\<open>\\<exists>!nid'. (n'''',nid') \\<in> his t n nid\\<close> \\<open>(n'''', nid'''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid", "have \"nid''''=(THE nid'. (n'''',nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'''' = (THE nid'. (n'''', nid') \\<in> his t n nid)", "using the1_equality[of \"\\<lambda>nid'. (n'''', nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid\n  \\<lbrakk>\\<exists>!x. (n'''', x) \\<in> his t n nid;\n   (n'''', ?a) \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (THE x. (n'''', x) \\<in> his t n nid) = ?a\n\ngoal (1 subgoal):\n 1. nid'''' = (THE nid'. (n'''', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid'''' = (THE nid'. (n'''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n  nid'''' = (THE nid'. (n'''', nid') \\<in> his t n nid)", "have \"(hisPred t n nid n'''', (SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'''' nid'''' x)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'''', nid') \\<in> his t n nid\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'''', nid') \\<in> his t n nid) t n''''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'''', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'''', nid')\n                                  \\<in> his t n nid\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'''', nid')\n                                \\<in> his t n nid\\<^esub>t n''''))))\n  nid'''' = (THE nid'. (n'''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n'''',\n     SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "with n'nid'"], ["proof (chain)\npicking this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))", "have \"(n', nid') = (hisPred t n nid n'''', (SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid))\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. (n', nid') =\n    (hisPred t n nid n'''',\n     SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  (n', nid') =\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') =\n  (hisPred t n nid n'''',\n   SOME nid'. (hisPred t n nid n'''', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n'''' = n'", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n'''' = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hisPred t n nid n'''' = n'\n\ngoal (1 subgoal):\n 1. n''' = n''''", "ultimately"], ["proof (chain)\npicking this:\n  hisPred t n nid n''' = n'\n  hisPred t n nid n'''' = n'", "have \"hisPred t n nid n'''=hisPred t n nid n''''\""], ["proof (prove)\nusing this:\n  hisPred t n nid n''' = n'\n  hisPred t n nid n'''' = n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n''' = hisPred t n nid n''''", ".."], ["proof (state)\nthis:\n  hisPred t n nid n''' = hisPred t n nid n''''\n\ngoal (1 subgoal):\n 1. n''' = n''''", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid n''' = hisPred t n nid n''''\n\ngoal (1 subgoal):\n 1. n''' = n''''", "have \"\\<exists>n'<n'''. \\<exists>nid'. (n',nid')\\<in> his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "from n'nid'' \\<open>\\<exists>x. his_prop t n nid n''' nid''' x\\<close>"], ["proof (chain)\npicking this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "have \"his_prop t n nid n''' nid''' (n',nid'')\""], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n''' nid''' x\"]"], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                     n'''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                    n''')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))) =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid''' t n''' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                                 n'''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                      n'''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid''' t n''' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "hence \"n'''>n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. n' < n'''", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. n' < n'''", "by simp"], ["proof (state)\nthis:\n  n' < n'''\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "with \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  n' < n'''", "show ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  n' < n'''\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' = n''''", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' = n''''", "have \"\\<exists>n'<n''''. \\<exists>nid'. (n',nid')\\<in> his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "from n'nid' \\<open>\\<exists>x. his_prop t n nid n'''' nid'''' x\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "have \"his_prop t n nid n'''' nid'''' (n',nid')\""], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid')\\<parallel>\\<^bsub>t\n       (fst (n', nid'))\\<^esub> \\<and>\n    fst (n', nid') =\n    \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n      (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n'''' nid'''' x\"]"], ["proof (prove)\nusing this:\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                      n''''))))\\<parallel>\\<^bsub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                       n'''')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))) =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'''' t n''''\nn) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                                  n''''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n.\n                            latestAct_cond nid'''' t n'''' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                        (prefix\n                          (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                         n''''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'''' t n'''' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\\<^esub>t\n                 (fst (SOME x.\n                          (\\<exists>n.\n                              latestAct_cond nid'''' t n'''' n) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>nid''''\\<^esub>t\n                           n'''')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid')\\<parallel>\\<^bsub>t\n       (fst (n', nid'))\\<^esub> \\<and>\n    fst (n', nid') =\n    \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n      (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "hence \"n''''>n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n\ngoal (1 subgoal):\n 1. n' < n''''", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid')\\<parallel>\\<^bsub>t (fst (n', nid'))\\<^esub> \\<and>\n  fst (n', nid') =\n  \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid')\\<^esub>t (fst (n', nid'))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''')))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. n' < n''''", "by simp"], ["proof (state)\nthis:\n  n' < n''''\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "with \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  n' < n''''", "show ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  n' < n''''\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' = n''''", "ultimately"], ["proof (chain)\npicking this:\n  hisPred t n nid n''' = hisPred t n nid n''''\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid", "show ?thesis"], ["proof (prove)\nusing this:\n  hisPred t n nid n''' = hisPred t n nid n''''\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' = n''''", "using hisPrev_same \\<open>(n''', nid''') \\<in> his t n nid\\<close> \\<open>(n'''', nid'''') \\<in> his t n nid\\<close>"], ["proof (prove)\nusing this:\n  hisPred t n nid n''' = hisPred t n nid n''''\n  \\<exists>n'<n'''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<exists>n'<n''''. \\<exists>nid'. (n', nid') \\<in> his t n nid\n  \\<lbrakk>\\<exists>n'<?n''. \\<exists>nid'. (n', nid') \\<in> his ?t ?n ?nid;\n   \\<exists>n''<?n'. \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid;\n   (?n', ?nid') \\<in> his ?t ?n ?nid; (?n'', ?nid'') \\<in> his ?t ?n ?nid;\n   hisPred ?t ?n ?nid ?n' = hisPred ?t ?n ?nid ?n''\\<rbrakk>\n  \\<Longrightarrow> ?n' = ?n''\n  (n''', nid''') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' = n''''", "by blast"], ["proof (state)\nthis:\n  n''' = n''''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n''' = n''''\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "moreover"], ["proof (state)\nthis:\n  n''' = n''''\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "have \"nid'''=nid''''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nid''' = nid''''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nid''' = nid''''", "from n'nid'' \\<open>\\<exists>x. his_prop t n nid n''' nid''' x\\<close>"], ["proof (chain)\npicking this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "have \"his_prop t n nid n''' nid''' (n',nid'')\""], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n''' nid''' x\"]"], ["proof (prove)\nusing this:\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                     n'''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                    n''')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))) =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid''' t n''' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                                 n'''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid'''\\<^esub>t\n                      n'''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid''' t n''' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n    \\<parallel>snd (n',\n                    nid'')\\<parallel>\\<^bsub>t\n        (fst (n', nid''))\\<^esub> \\<and>\n    fst (n', nid'') =\n    \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n      (bc (\\<sigma>\\<^bsub>snd (n',\n                                nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n         bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "hence \"n'''>n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n\ngoal (1 subgoal):\n 1. n' < n'''", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n  \\<parallel>snd (n',\n                  nid'')\\<parallel>\\<^bsub>t\n      (fst (n', nid''))\\<^esub> \\<and>\n  fst (n', nid'') =\n  \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n    (bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid'')))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n       bc (\\<sigma>\\<^bsub>snd (n', nid'')\\<^esub>t (fst (n', nid''))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. n' < n'''", "by simp"], ["proof (state)\nthis:\n  n' < n'''\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "moreover"], ["proof (state)\nthis:\n  n' < n'''\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "from \\<open>(n''', nid''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid", "have \"n'''\\<le> n\""], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n''' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n''' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n''' \\<le> n\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "moreover"], ["proof (state)\nthis:\n  n''' \\<le> n\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "from \\<open>(n''', nid''') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid", "have \"\\<exists>nid'. (n''', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n''', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "ultimately"], ["proof (chain)\npicking this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid", "have \"\\<exists>!nid'. (n''', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n''', nid') \\<in> his t n nid", "using step.IH"], ["proof (prove)\nusing this:\n  n' < n'''\n  n''' \\<le> n\n  \\<exists>nid'. (n''', nid') \\<in> his t n nid\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n''', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "with \\<open>(n''', nid''') \\<in> his t n nid\\<close> \\<open>(n'''', nid'''') \\<in> his t n nid\\<close> \\<open>n'''=n''''\\<close>"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid\n  n''' = n''''\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid", "show ?thesis"], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n  (n'''', nid'''') \\<in> his t n nid\n  n''' = n''''\n  \\<exists>!nid'. (n''', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid''' = nid''''", "by auto"], ["proof (state)\nthis:\n  nid''' = nid''''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nid''' = nid''''\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "ultimately"], ["proof (chain)\npicking this:\n  (n''', nid''') \\<in> his t n nid\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (n''', nid''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  n''' = n''''\n  nid''' = nid''''", "have \"(n', nid') = (n', nid'')\""], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (n''', nid''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  n''' = n''''\n  nid''' = nid''''\n\ngoal (1 subgoal):\n 1. (n', nid') = (n', nid'')", "using n'nid'"], ["proof (prove)\nusing this:\n  (n''', nid''') \\<in> his t n nid\n  (n', nid'') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))))\n  (n''', nid''') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid''' t n''' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid''' \\<leftarrow> t\\<rangle>\\<^bsub>n'''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n'''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'''\\<^esub>t n''')))\n  n''' = n''''\n  nid''' = nid''''\n  (n', nid') =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'''' t n'''' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'''' \\<leftarrow> t\\<rangle>\\<^bsub>n''''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''''\\<^esub>t n'''') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''''\\<^esub>t n''''))))\n\ngoal (1 subgoal):\n 1. (n', nid') = (n', nid'')", "by simp"], ["proof (state)\nthis:\n  (n', nid') = (n', nid'')\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'a.\n       \\<lbrakk>(n', nid'') =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))));\n        (n', nid'a) \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid'a t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid'a \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'a\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> nid'' = nid'", "thus \"nid'' = nid'\""], ["proof (prove)\nusing this:\n  (n', nid') = (n', nid'')\n\ngoal (1 subgoal):\n 1. nid'' = nid'", "by simp"], ["proof (state)\nthis:\n  nid'' = nid'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nid'' = nid'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "moreover"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "have \"(\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x) \\<and> (hisPred t n nid n', (SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>n''<n'.\n        \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n''<n'.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "assume \"\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\""], ["proof (state)\nthis:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n'.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "hence \"\\<exists>nid'. (hisPred t n nid n', nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "using hisPrev_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<exists>nid'. (hisPred ?t ?n ?nid ?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n'.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "hence \"(hisPred t n nid n', (SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)) \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)\n    \\<in> his t n nid", "using someI_ex[of \"\\<lambda>nid'. (hisPred t n nid n', nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (hisPred t n nid n', nid') \\<in> his t n nid\n  \\<exists>x. (hisPred t n nid n', x) \\<in> his t n nid \\<Longrightarrow>\n  (hisPred t n nid n', SOME x. (hisPred t n nid n', x) \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n'.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid \\<Longrightarrow>\n    (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "thus \"(\\<exists>x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x) \\<and> (hisPred t n nid n', (SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "proof (rule his.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n',\n              SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                      (hisPred t n nid n',\n                       SOME nid'.\n                          (hisPred t n nid n', nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "assume \"(hisPred t n nid n', SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) = (n, nid)\""], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (n, nid)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n',\n              SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                      (hisPred t n nid n',\n                       SOME nid'.\n                          (hisPred t n nid n', nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "hence \"hisPred t n nid n'=n\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (n, nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' = n", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n',\n              SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                      (hisPred t n nid n',\n                       SOME nid'.\n                          (hisPred t n nid n', nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid n' = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n',\n              SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                      (hisPred t n nid n',\n                       SOME nid'.\n                          (hisPred t n nid n', nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "from \\<open>\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"hisPred t n nid n'<n'\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n'", "using hisPrev_prop(1)[of n']"], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  hisPred ?t ?n ?nid n' < n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n'", "by force"], ["proof (state)\nthis:\n  hisPred t n nid n' < n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(hisPred t n nid n',\n              SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n             (n, nid);\n     \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                      (hisPred t n nid n',\n                       SOME nid'.\n                          (hisPred t n nid n', nid') \\<in> his t n nid) =\n                      (SOME x.\n                          (\\<exists>na.\n                              latestAct_cond\n                               (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                               na) \\<and>\n                          \\<parallel>snd\nx\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                          fst x =\n                          \\<langle>THE nid'.\n(n', nid')\n\\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                          (prefix\n                            (bc (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                            (bc (\\<sigma>\\<^bsub>snd\n            x\\<^esub>t (fst x))) \\<or>\n                           (\\<exists>b.\n                               bc (\\<sigma>\\<^bsub>THE nid'.\n                (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                               [b] \\<and>\n                               mining\n                                (\\<sigma>\\<^bsub>THE nid'.\n              (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n 2. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "ultimately"], ["proof (chain)\npicking this:\n  hisPred t n nid n' = n\n  hisPred t n nid n' < n'", "show ?thesis"], ["proof (prove)\nusing this:\n  hisPred t n nid n' = n\n  hisPred t n nid n' < n'\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "using step.hyps"], ["proof (prove)\nusing this:\n  hisPred t n nid n' = n\n  hisPred t n nid n' < n'\n  n' \\<le> n'\n  n' < n\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "fix n'' nid''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "assume asmp: \"(hisPred t n nid n', SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) = (SOME x. his_prop t n nid n'' nid'' x)\"\n      and \"(n'', nid'') \\<in> his t n nid\" and \"\\<exists>x. his_prop t n nid n'' nid'' x\""], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "moreover"], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "have \"n''=n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n'' = n'", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<le> n'\n 2. n' \\<le> n''", "show \"n''\\<ge>n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<le> n''", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "assume \"(\\<not>n''\\<ge>n')\""], ["proof (state)\nthis:\n  \\<not> n' \\<le> n''\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "hence \"n''<n'\""], ["proof (prove)\nusing this:\n  \\<not> n' \\<le> n''\n\ngoal (1 subgoal):\n 1. n'' < n'", "by simp"], ["proof (state)\nthis:\n  n'' < n'\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n'' < n'\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "have \"n''>hisPred t n nid n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "let ?x=\"\\<lambda>x. his_prop t n nid n'' nid'' x\""], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "from \\<open>\\<exists>x. his_prop t n nid n'' nid'' x\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "have \"his_prop t n nid n'' nid'' (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "using someI_ex[of ?x]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                      n''))))\\<parallel>\\<^bsub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                   n'')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid'' t n'' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n               (fst (SOME x.\n                        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                             [b] \\<and>\n                             mining\n                              (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "hence \"n''>fst (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n    < n''", "using latestAct_prop(2)[of n'' nid'' t]"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                    n''))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid''\\<^esub>t\n                 n'')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))) =\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid'' t n'' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid'' t n'' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining\n                            (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  \\<exists>n'. latestAct_cond nid'' t n'' n' \\<Longrightarrow>\n  \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> < n''\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n    < n''", "by force"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "moreover"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "from asmp"], ["proof (chain)\npicking this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "have \"fst (hisPred t n nid n', SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) = fst (SOME x. ?x x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. fst (hisPred t n nid n',\n         SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "by simp"], ["proof (state)\nthis:\n  fst (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "ultimately"], ["proof (chain)\npicking this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n  fst (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  < n''\n  fst (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' < n''", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' < n''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "from \\<open>\\<exists>n''<n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"\\<not>(\\<exists>x\\<in>his t n nid. fst x < n' \\<and> fst x > hisPred t n nid n')\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>his t n nid.\n               fst x < n' \\<and> hisPred t n nid n' < fst x)", "using hisPrev_nex_less"], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<not> (\\<exists>x\\<in>his ?t ?n ?nid.\n             fst x < ?n' \\<and> hisPred ?t ?n ?nid ?n' < fst x)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>his t n nid.\n               fst x < n' \\<and> hisPred t n nid n' < fst x)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n' \\<and> hisPred t n nid n' < fst x)\n\ngoal (1 subgoal):\n 1. \\<not> n' \\<le> n'' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n'' < n'\n  hisPred t n nid n' < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n' \\<and> hisPred t n nid n' < fst x)", "show False"], ["proof (prove)\nusing this:\n  n'' < n'\n  hisPred t n nid n' < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n' \\<and> hisPred t n nid n' < fst x)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (prove)\nusing this:\n  n'' < n'\n  hisPred t n nid n' < n''\n  \\<not> (\\<exists>x\\<in>his t n nid.\n             fst x < n' \\<and> hisPred t n nid n' < fst x)\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' \\<le> n''\n\ngoal (1 subgoal):\n 1. n'' \\<le> n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<le> n'", "show \"n'\\<ge>n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n'' \\<le> n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "assume \"(\\<not>n'\\<ge>n'')\""], ["proof (state)\nthis:\n  \\<not> n'' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "hence \"n'<n''\""], ["proof (prove)\nusing this:\n  \\<not> n'' \\<le> n'\n\ngoal (1 subgoal):\n 1. n' < n''", "by simp"], ["proof (state)\nthis:\n  n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n' < n''\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "from \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid", "have \"n''\\<le> n\""], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n'' \\<le> n", "using his_le"], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. n'' \\<le> n", "by auto"], ["proof (state)\nthis:\n  n'' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n'' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "from \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid", "have \"\\<exists>nid'. (n'', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n'', nid') \\<in> his t n nid", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n' < n''\n  n'' \\<le> n\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"(\\<exists>n'<n''. \\<exists>nid'. (n',nid')\\<in> his t n nid) \\<longrightarrow> (\\<exists>!nid'. (n'',nid') \\<in> his t n nid) \\<and> (hisPred t n nid n'', (SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'' (THE nid'. (n'',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n''\n  n'' \\<le> n\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n'', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n'',\n     SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'', nid')\n                                    \\<in> his t n nid\\<^esub>t n'') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))))", "using step.IH"], ["proof (prove)\nusing this:\n  n' < n''\n  n'' \\<le> n\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<forall>n'>n'.\n     n' \\<le> n \\<longrightarrow>\n     (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n     ((\\<exists>n''<n'.\n          \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n      (\\<exists>x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))) \\<and>\n      (hisPred t n nid n',\n       SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n      (SOME x.\n          (\\<exists>na.\n              latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n               na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n', nid') \\<in> his t n nid\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. (\\<exists>n'<n''.\n        \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n    (\\<exists>!nid'. (n'', nid') \\<in> his t n nid) \\<and>\n    (hisPred t n nid n'',\n     SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'', nid')\n                                    \\<in> his t n nid\\<^esub>t n'') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n'<n''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "with \\<open>n'<n''\\<close> \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  n' < n''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))", "have \"\\<exists>!nid'. (n'',nid') \\<in> his t n nid\" and \"(hisPred t n nid n'', (SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'' (THE nid'. (n'',nid')\\<in>his t n nid) x)\""], ["proof (prove)\nusing this:\n  n' < n''\n  (n', nid') \\<in> his t n nid\n  (\\<exists>n'<n''.\n      \\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>!nid'. (n'', nid') \\<in> his t n nid) \\<and>\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n'', nid') \\<in> his t n nid &&&\n    (hisPred t n nid n'',\n     SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n'', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n'', nid')\n                                    \\<in> his t n nid\\<^esub>t n'') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n''))))", "by auto"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "from \\<open>\\<exists>!nid'. (n'',nid') \\<in> his t n nid\\<close> \\<open>(n'', nid'') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid", "have \"nid'' = (THE nid'. (n'',nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n'', nid') \\<in> his t n nid)", "using the1_equality[of \"\\<lambda>nid'. (n'', nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  \\<lbrakk>\\<exists>!x. (n'', x) \\<in> his t n nid;\n   (n'', ?a) \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (THE x. (n'', x) \\<in> his t n nid) = ?a\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n'', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid'' = (THE nid'. (n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n  nid'' = (THE nid'. (n'', nid') \\<in> his t n nid)", "have \"(hisPred t n nid n'', (SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)) = (SOME x. his_prop t n nid n'' nid'' x)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n'', nid') \\<in> his t n nid\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n'', nid') \\<in> his t n nid) t n''\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n'', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid') \\<in> his t n nid\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n'', nid')\n                                  \\<in> his t n nid\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n'', nid')\n                                \\<in> his t n nid\\<^esub>t n''))))\n  nid'' = (THE nid'. (n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n'',\n     SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "with asmp"], ["proof (chain)\npicking this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))", "have \"(hisPred t n nid n', SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid)=(hisPred t n nid n'', SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (hisPred t n nid n'',\n     SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "hence \"hisPred t n nid n' = hisPred t n nid n''\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (hisPred t n nid n'',\n   SOME nid'. (hisPred t n nid n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. hisPred t n nid n' = hisPred t n nid n''", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid n' = hisPred t n nid n''\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "with \\<open>\\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\\<close> \\<open>n'<n''\\<close> \\<open>(n', nid') \\<in> his t n nid\\<close> \\<open>(n'', nid'') \\<in> his t n nid\\<close> \\<open>(n', nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n' < n''\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''", "have \"n'=n''\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n' < n''\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n\ngoal (1 subgoal):\n 1. n' = n''", "using hisPrev_same"], ["proof (prove)\nusing this:\n  \\<exists>n''<n'. \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n' < n''\n  (n', nid') \\<in> his t n nid\n  (n'', nid'') \\<in> his t n nid\n  (n', nid') \\<in> his t n nid\n  hisPred t n nid n' = hisPred t n nid n''\n  \\<lbrakk>\\<exists>n'<?n''. \\<exists>nid'. (n', nid') \\<in> his ?t ?n ?nid;\n   \\<exists>n''<?n'. \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid;\n   (?n', ?nid') \\<in> his ?t ?n ?nid; (?n'', ?nid'') \\<in> his ?t ?n ?nid;\n   hisPred ?t ?n ?nid ?n' = hisPred ?t ?n ?nid ?n''\\<rbrakk>\n  \\<Longrightarrow> ?n' = ?n''\n\ngoal (1 subgoal):\n 1. n' = n''", "by blast"], ["proof (state)\nthis:\n  n' = n''\n\ngoal (1 subgoal):\n 1. \\<not> n'' \\<le> n' \\<Longrightarrow> False", "with \\<open>n'<n''\\<close>"], ["proof (chain)\npicking this:\n  n' < n''\n  n' = n''", "show False"], ["proof (prove)\nusing this:\n  n' < n''\n  n' = n''\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<le> n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n'\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "ultimately"], ["proof (chain)\npicking this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n'", "have \"(hisPred t n nid n', SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) = (SOME x. his_prop t n nid n' nid'' x)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))))\n  (n'', nid'') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n'\n\ngoal (1 subgoal):\n 1. (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>n. latestAct_cond nid'' t n' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))))", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "moreover"], ["proof (state)\nthis:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "from \\<open>(n'', nid'') \\<in> his t n nid\\<close> \\<open>n''=n'\\<close>"], ["proof (chain)\npicking this:\n  (n'', nid'') \\<in> his t n nid\n  n'' = n'", "have \"(n', nid'') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n'', nid'') \\<in> his t n nid\n  n'' = n'\n\ngoal (1 subgoal):\n 1. (n', nid'') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (n', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "with \\<open>\\<exists>!nid'. (n',nid') \\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n  (n', nid'') \\<in> his t n nid", "have \"nid''=(THE nid'. (n',nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n  (n', nid'') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n', nid') \\<in> his t n nid)", "using the1_equality[of \"\\<lambda>nid'. (n', nid') \\<in> his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n  (n', nid'') \\<in> his t n nid\n  \\<lbrakk>\\<exists>!x. (n', x) \\<in> his t n nid;\n   (n', ?a) \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (THE x. (n', x) \\<in> his t n nid) = ?a\n\ngoal (1 subgoal):\n 1. nid'' = (THE nid'. (n', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "moreover"], ["proof (state)\nthis:\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "from \\<open>\\<exists>x. his_prop t n nid n'' nid'' x\\<close> \\<open>n''=n'\\<close> \\<open>nid''=(THE nid'. (n',nid')\\<in>his t n nid)\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n'\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)", "have \"\\<exists>x. his_prop t n nid n' (THE nid'. (n',nid')\\<in>his t n nid) x\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid'' t n'' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n''\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n''))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'')))\n  n'' = n'\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n', nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n')))", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<And>n' nid'.\n       \\<lbrakk>(hisPred t n nid n',\n                 SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n                (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))));\n        (n', nid') \\<in> his t n nid;\n        \\<exists>x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                         (hisPred t n nid n',\n                          SOME nid'.\n                             (hisPred t n nid n', nid') \\<in> his t n nid) =\n                         (SOME x.\n                             (\\<exists>na.\n                                 latestAct_cond\n                                  (THE nid'. (n', nid') \\<in> his t n nid) t\n                                  n' na) \\<and>\n                             \\<parallel>snd\n   x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                             fst x =\n                             \\<langle>THE nid'.\n   (n', nid')\n   \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                             (prefix\n                               (bc (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                               (bc (\\<sigma>\\<^bsub>snd\n               x\\<^esub>t (fst x))) \\<or>\n                              (\\<exists>b.\n                                  bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                                  bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x)) @\n                                  [b] \\<and>\n                                  mining\n                                   (\\<sigma>\\<^bsub>THE nid'.\n                 (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "ultimately"], ["proof (chain)\npicking this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))))\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n')))", "show ?thesis"], ["proof (prove)\nusing this:\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid'' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>nid'' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid''\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid''\\<^esub>t n'))))\n  nid'' = (THE nid'. (n', nid') \\<in> his t n nid)\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n          na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n', nid') \\<in> his t n nid\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n')))) \\<and>\n    (hisPred t n nid n',\n     SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n             na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid') \\<in> his t n nid\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n', nid')\n                                    \\<in> his t n nid\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n'))))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>n''<n'.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n;\n        \\<forall>n'>na.\n           n' \\<le> n \\<longrightarrow>\n           (\\<exists>nid'. (n', nid') \\<in> his t n nid) \\<longrightarrow>\n           (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n           ((\\<exists>n''<n'.\n                \\<exists>nid'.\n                   (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n            (\\<exists>x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n            (hisPred t n nid n',\n             SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n            (SOME x.\n                (\\<exists>na.\n                    latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid)\n                     t n' na) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>THE nid'.\n                            (n', nid')\n                            \\<in> his t n\n                                   nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix\n                  (bc (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>THE nid'.\n      (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>THE nid'.\n    (n', nid') \\<in> his t n nid\\<^esub>t n')))));\n        \\<exists>nid'. (na, nid') \\<in> his t n nid\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>!nid'.\n                             (na, nid') \\<in> his t n nid) \\<and>\n                         ((\\<exists>n''<na.\n                              \\<exists>nid'.\n                                 (n'', nid')\n                                 \\<in> his t n nid) \\<longrightarrow>\n                          (\\<exists>x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))) \\<and>\n                          (hisPred t n nid na,\n                           SOME nid'.\n                              (hisPred t n nid na, nid')\n                              \\<in> his t n nid) =\n                          (SOME x.\n                              (\\<exists>nb.\n                                  latestAct_cond\n                                   (THE nid'. (na, nid') \\<in> his t n nid)\n                                   t na nb) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (na, nid')\n    \\<in> his t n nid \\<leftarrow> t\\<rangle>\\<^bsub>na\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (na, nid') \\<in> his t n nid\\<^esub>t na) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (na, nid') \\<in> his t n nid\\<^esub>t na)))))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n  (\\<exists>n''<n'.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>!nid'. (n', nid') \\<in> his t n nid\n  (\\<exists>n''<n'.\n      \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n  (\\<exists>x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid')\n                                \\<in> his t n nid\\<^esub>t n')))) \\<and>\n  (hisPred t n nid n',\n   SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n           na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n', nid')\n                                  \\<in> his t n nid\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n', nid') \\<in> his t n nid\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n    ((\\<exists>n''<n'.\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n     (\\<exists>x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n', nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n nid\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n')))) \\<and>\n     (hisPred t n nid n',\n      SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n     (SOME x.\n         (\\<exists>na.\n             latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n              na) \\<and>\n         \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n         fst x =\n         \\<langle>THE nid'.\n                     (n', nid')\n                     \\<in> his t n\n                            nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n         (prefix\n           (bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n nid\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n              mining\n               (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n')))))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n  ((\\<exists>n''<n'.\n       \\<exists>nid'. (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n   (\\<exists>x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n', nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid')\n                                 \\<in> his t n nid\\<^esub>t n')))) \\<and>\n   (hisPred t n nid n',\n    SOME nid'. (hisPred t n nid n', nid') \\<in> his t n nid) =\n   (SOME x.\n       (\\<exists>na.\n           latestAct_cond (THE nid'. (n', nid') \\<in> his t n nid) t n'\n            na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n', nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid') \\<in> his t n nid\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n', nid')\n                                   \\<in> his t n nid\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n', nid')\n                                 \\<in> his t n nid\\<^esub>t n')))))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary his_determ_ex:\n  assumes \"(n',nid')\\<in>his t n nid\"\n  shows \"\\<exists>!nid'. (n',nid')\\<in>his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n', nid') \\<in> his t n nid", "using assms his_le his_determ_ext[of n' n t nid]"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n  \\<lbrakk>n' \\<le> n; \\<exists>nid'. (n', nid') \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n                    ((\\<exists>n''<n'.\n                         \\<exists>nid'.\n                            (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n                     (\\<exists>x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                              na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                     (hisPred t n nid n',\n                      SOME nid'.\n                         (hisPred t n nid n', nid') \\<in> his t n nid) =\n                     (SOME x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                              na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. \\<exists>!nid'. (n', nid') \\<in> his t n nid", "by force"], ["", "corollary his_determ:\n  assumes \"(n',nid')\\<in>his t n nid\"\n    and \"(n',nid'')\\<in>his t n nid\"\n  shows \"nid'=nid''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nid' = nid''", "using assms his_le his_determ_ext[of n' n t nid]"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  (n', nid'') \\<in> his t n nid\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n  \\<lbrakk>n' \\<le> n; \\<exists>nid'. (n', nid') \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>!nid'. (n', nid') \\<in> his t n nid) \\<and>\n                    ((\\<exists>n''<n'.\n                         \\<exists>nid'.\n                            (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n                     (\\<exists>x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                              na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n')))) \\<and>\n                     (hisPred t n nid n',\n                      SOME nid'.\n                         (hisPred t n nid n', nid') \\<in> his t n nid) =\n                     (SOME x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'. (n', nid') \\<in> his t n nid) t n'\n                              na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n'))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n', nid') \\<in> his t n nid\\<^esub>t n') =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n', nid') \\<in> his t n nid\\<^esub>t n')))))\n\ngoal (1 subgoal):\n 1. nid' = nid''", "by force"], ["", "corollary his_determ_the:\n  assumes \"(n',nid')\\<in>his t n nid\"\n  shows \"(THE nid'. (n', nid')\\<in>his t n nid) = nid'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE nid'. (n', nid') \\<in> his t n nid) = nid'", "using assms his_determ theI'[of \"\\<lambda>nid'. (n', nid')\\<in>his t n nid\"] his_determ_ex"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  \\<lbrakk>(?n', ?nid') \\<in> his ?t ?n ?nid;\n   (?n', ?nid'') \\<in> his ?t ?n ?nid\\<rbrakk>\n  \\<Longrightarrow> ?nid' = ?nid''\n  \\<exists>!x. (n', x) \\<in> his t n nid \\<Longrightarrow>\n  (n', THE x. (n', x) \\<in> his t n nid) \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<exists>!nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. (THE nid'. (n', nid') \\<in> his t n nid) = nid'", "by simp"], ["", "subsubsection \"Blockchain Development\""], ["", "definition devBC::\"trace \\<Rightarrow> nat \\<Rightarrow> 'nid \\<Rightarrow> nat \\<Rightarrow> 'nid option\"\n  where \"devBC t n nid n' \\<equiv>\n    (if (\\<exists>nid'. (n', nid')\\<in> his t n nid) then (Some (THE nid'. (n', nid')\\<in>his t n nid))\n    else Option.None)\""], ["", "lemma devBC_some[simp]: assumes \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\" shows \"devBC t n nid n = Some nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "from assms"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"(n, nid)\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. (n, nid) \\<in> his t n nid", "using his.intros(1)"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<Longrightarrow>\n  (?n, ?nid) \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. (n, nid) \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (n, nid) \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "hence \"devBC t n nid n = (Some (THE nid'. (n, nid')\\<in>his t n nid))\""], ["proof (prove)\nusing this:\n  (n, nid) \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)", "using devBC_def"], ["proof (prove)\nusing this:\n  (n, nid) \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)", "by auto"], ["proof (state)\nthis:\n  devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "moreover"], ["proof (state)\nthis:\n  devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "have \"(THE nid'. (n, nid')\\<in>his t n nid) = nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE nid'. (n, nid') \\<in> his t n nid) = nid", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (n, nid) \\<in> his t n nid\n 2. \\<And>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "from \\<open>(n, nid)\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n, nid) \\<in> his t n nid", "show \"(n, nid)\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n, nid) \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (n, nid) \\<in> his t n nid", "."], ["proof (state)\nthis:\n  (n, nid) \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "fix nid'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "assume \"(n, nid') \\<in> his t n nid\""], ["proof (state)\nthis:\n  (n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<And>nid'. (n, nid') \\<in> his t n nid \\<Longrightarrow> nid' = nid", "thus \"nid' = nid\""], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid' = nid", "using his_determ_base"], ["proof (prove)\nusing this:\n  (n, nid') \\<in> his t n nid\n  (?n, ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> ?nid' = ?nid\n\ngoal (1 subgoal):\n 1. nid' = nid", "by simp"], ["proof (state)\nthis:\n  nid' = nid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (THE nid'. (n, nid') \\<in> his t n nid) = nid\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "ultimately"], ["proof (chain)\npicking this:\n  devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)\n  (THE nid'. (n, nid') \\<in> his t n nid) = nid", "show ?thesis"], ["proof (prove)\nusing this:\n  devBC t n nid n = Some (THE nid'. (n, nid') \\<in> his t n nid)\n  (THE nid'. (n, nid') \\<in> his t n nid) = nid\n\ngoal (1 subgoal):\n 1. devBC t n nid n = Some nid", "by simp"], ["proof (state)\nthis:\n  devBC t n nid n = Some nid\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devBC_act: assumes \"\\<not> Option.is_none (devBC t n nid n')\" shows \"\\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n')", "have \"\\<not> devBC t n nid n'=Option.None\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devBC t n nid n' \\<noteq> None", "by (metis is_none_simps(1))"], ["proof (state)\nthis:\n  devBC t n nid n' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "then"], ["proof (chain)\npicking this:\n  devBC t n nid n' \\<noteq> None", "obtain nid' where \"(n', nid')\\<in> his t n nid\" and \"devBC t n nid n' = (Some (THE nid'. (n', nid')\\<in>his t n nid))\""], ["proof (prove)\nusing this:\n  devBC t n nid n' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>(n', nid') \\<in> his t n nid;\n         devBC t n nid n' =\n         Some (THE nid'. (n', nid') \\<in> his t n nid)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using devBC_def[of t n nid]"], ["proof (prove)\nusing this:\n  devBC t n nid n' \\<noteq> None\n  devBC t n nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his t n nid\n  then Some (THE nid'. (?n', nid') \\<in> his t n nid) else None\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>(n', nid') \\<in> his t n nid;\n         devBC t n nid n' =\n         Some (THE nid'. (n', nid') \\<in> his t n nid)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (n', nid') \\<in> his t n nid\n  devBC t n nid n' = Some (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "hence \"nid'= (THE nid'. (n', nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  devBC t n nid n' = Some (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. nid' = (THE nid'. (n', nid') \\<in> his t n nid)", "using his_determ_the"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  devBC t n nid n' = Some (THE nid'. (n', nid') \\<in> his t n nid)\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n\ngoal (1 subgoal):\n 1. nid' = (THE nid'. (n', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid' = (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "with \\<open>devBC t n nid n' = (Some (THE nid'. (n', nid')\\<in>his t n nid))\\<close>"], ["proof (chain)\npicking this:\n  devBC t n nid n' = Some (THE nid'. (n', nid') \\<in> his t n nid)\n  nid' = (THE nid'. (n', nid') \\<in> his t n nid)", "have \"the (devBC t n nid n') = nid'\""], ["proof (prove)\nusing this:\n  devBC t n nid n' = Some (THE nid'. (n', nid') \\<in> his t n nid)\n  nid' = (THE nid'. (n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid n') = nid'", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid n') = nid'\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "with \\<open>(n', nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  the (devBC t n nid n') = nid'", "show ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  the (devBC t n nid n') = nid'\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "using his_act"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  the (devBC t n nid n') = nid'\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<parallel>?nid'\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t n nid n')\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma his_ex:\n  assumes \"\\<not>Option.is_none (devBC t n nid n')\"\n  shows \"\\<exists>nid'. (n',nid')\\<in>his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n', nid') \\<in> his t n nid", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>nid'. (n', nid') \\<in> his t n nid \\<Longrightarrow> False", "assume \"\\<not>(\\<exists>nid'. (n',nid')\\<in>his t n nid)\""], ["proof (state)\nthis:\n  \\<nexists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<nexists>nid'. (n', nid') \\<in> his t n nid \\<Longrightarrow> False", "with devBC_def"], ["proof (chain)\npicking this:\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n  \\<nexists>nid'. (n', nid') \\<in> his t n nid", "have \"Option.is_none (devBC t n nid n')\""], ["proof (prove)\nusing this:\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n  \\<nexists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid n')", "by simp"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. \\<nexists>nid'. (n', nid') \\<in> his t n nid \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n')\n  Option.is_none (devBC t n nid n')", "show False"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n')\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_nopt_leq:\n  assumes \"\\<not>Option.is_none (devBC t n nid n')\"\n  shows \"n'\\<le>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<le> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<le> n", "from assms"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n')", "have \"\\<exists>nid'. (n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n', nid') \\<in> his t n nid", "using his_ex"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n')\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n' \\<le> n", "then"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n', nid') \\<in> his t n nid", "obtain nid' where \"(n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        (n', nid') \\<in> his t n nid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n' \\<le> n", "with his_le[of \"(n',nid')\"]"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> fst (n', nid') \\<le> ?n\n  (n', nid') \\<in> his t n nid", "show ?thesis"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow> fst (n', nid') \\<le> ?n\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. n' \\<le> n", "by simp"], ["proof (state)\nthis:\n  n' \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  An extended version of the development in which deactivations are filled with the last value.\n\\<close>"], ["", "function devExt::\"trace \\<Rightarrow> nat \\<Rightarrow> 'nid \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'nid BC\"\n  where \"\\<lbrakk>\\<exists>n'<n\\<^sub>s. \\<not>Option.is_none (devBC t n nid n'); Option.is_none (devBC t n nid n\\<^sub>s)\\<rbrakk> \\<Longrightarrow> devExt t n nid n\\<^sub>s 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n'<n\\<^sub>s \\<and> \\<not>Option.is_none (devBC t n nid n')))\\<^esub>(t (GREATEST n'. n'<n\\<^sub>s \\<and> \\<not>Option.is_none (devBC t n nid n'))))\"\n  | \"\\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s. \\<not>Option.is_none (devBC t n nid n')); Option.is_none (devBC t n nid n\\<^sub>s)\\<rbrakk> \\<Longrightarrow> devExt t n nid n\\<^sub>s 0 = []\"\n  | \"\\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> devExt t n nid n\\<^sub>s 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid n\\<^sub>s)\\<^esub>(t n\\<^sub>s))\"\n  | \"\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc n') = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n')))\"\n  | \"Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\""], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n');\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (GREATEST n'.\n              n' < n\\<^sub>s' \\<and>\n              \\<not> Option.is_none\n                      (devBC ta na nida\n                        n')))\\<^esub>ta\n(GREATEST n'.\n    n' < n\\<^sub>s' \\<and> \\<not> Option.is_none (devBC ta na nida n')))\n 3. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         []\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 6. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 7. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 8. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 9. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 10. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n        \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                            \\<not> Option.is_none (devBC t n nid n'));\n         Option.is_none (devBC t n nid n\\<^sub>s);\n         Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n         (t, n, nid, n\\<^sub>s, 0) =\n         (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n        \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\nA total of 16 subgoals...", "proof -"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n');\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (GREATEST n'.\n              n' < n\\<^sub>s' \\<and>\n              \\<not> Option.is_none\n                      (devBC ta na nida\n                        n')))\\<^esub>ta\n(GREATEST n'.\n    n' < n\\<^sub>s' \\<and> \\<not> Option.is_none (devBC ta na nida n')))\n 3. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         []\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 6. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 7. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 8. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 9. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 10. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n        \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                            \\<not> Option.is_none (devBC t n nid n'));\n         Option.is_none (devBC t n nid n\\<^sub>s);\n         Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n         (t, n, nid, n\\<^sub>s, 0) =\n         (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n        \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\nA total of 16 subgoals...", "show \"\\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n') \\<Longrightarrow>\n       Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n')))\\<^esub>t (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n       bc (\\<sigma>\\<^bsub>the (devBC ta na nida\n                    (GREATEST n'. n' < n\\<^sub>s' \\<and> \\<not> Option.is_none (devBC ta na nida n')))\\<^esub>ta (GREATEST n'. n' < n\\<^sub>s' \\<and> \\<not> Option.is_none (devBC ta na nida n')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n');\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (GREATEST n'.\n              n' < n\\<^sub>s' \\<and>\n              \\<not> Option.is_none\n                      (devBC ta na nida\n                        n')))\\<^esub>ta\n(GREATEST n'.\n    n' < n\\<^sub>s' \\<and> \\<not> Option.is_none (devBC ta na nida n')))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s3.\n              \\<not> Option.is_none (devBC ?t3 ?n3 ?nid3 n');\n   Option.is_none (devBC ?t3 ?n3 ?nid3 ?n\\<^sub>s3);\n   \\<exists>n'<?n\\<^sub>s'3.\n      \\<not> Option.is_none (devBC ?ta3 ?na3 ?nida3 n');\n   Option.is_none (devBC ?ta3 ?na3 ?nida3 ?n\\<^sub>s'3);\n   (?t3, ?n3, ?nid3, ?n\\<^sub>s3, 0::?'a4) =\n   (?ta3, ?na3, ?nida3, ?n\\<^sub>s'3, 0::?'a4)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t3 ?n3 ?nid3\n     (GREATEST n'.\n         n' < ?n\\<^sub>s3 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t3 ?n3 ?nid3\n                   n')))\\<^esub>?t3 (GREATEST n'.\n  n' < ?n\\<^sub>s3 \\<and> \\<not> Option.is_none (devBC ?t3 ?n3 ?nid3 n'))) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta3 ?na3 ?nida3\n     (GREATEST n'.\n         n' < ?n\\<^sub>s'3 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?ta3 ?na3 ?nida3\n                   n')))\\<^esub>?ta3\n                                 (GREATEST n'.\n                                     n' < ?n\\<^sub>s'3 \\<and>\n                                     \\<not> Option.is_none\n       (devBC ?ta3 ?na3 ?nida3 n')))\n\ngoal (15 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         []\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 6. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 7. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 8. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 9. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 10. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n        \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n         \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n         (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n        \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n         (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                          bc (\\<sigma>\\<^bsub>the\n         (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\nA total of 15 subgoals...", "show \"\\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> (\\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n')) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n')))\\<^esub>t (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         []", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s4.\n              \\<not> Option.is_none (devBC ?t4 ?n4 ?nid4 n');\n   Option.is_none (devBC ?t4 ?n4 ?nid4 ?n\\<^sub>s4);\n   \\<not> (\\<exists>n'<?n\\<^sub>s'4.\n              \\<not> Option.is_none (devBC ?ta4 ?na4 ?nida4 n'));\n   Option.is_none (devBC ?ta4 ?na4 ?nida4 ?n\\<^sub>s'4);\n   (?t4, ?n4, ?nid4, ?n\\<^sub>s4, 0::?'a5) =\n   (?ta4, ?na4, ?nida4, ?n\\<^sub>s'4, 0::?'a5)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t4 ?n4 ?nid4\n     (GREATEST n'.\n         n' < ?n\\<^sub>s4 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t4 ?n4 ?nid4\n                   n')))\\<^esub>?t4 (GREATEST n'.\n  n' < ?n\\<^sub>s4 \\<and> \\<not> Option.is_none (devBC ?t4 ?n4 ?nid4 n'))) =\n                    []\n\ngoal (14 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 5. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 6. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 7. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 8. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 9. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 10. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n        \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n         \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n         (t, n, nid, n\\<^sub>s, 0) =\n         (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n        \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n         (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                          bc (\\<sigma>\\<^bsub>the\n         (devBC ta na nida\n           (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\nA total of 14 subgoals...", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n')))\\<^esub>t (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n       bc (\\<sigma>\\<^bsub>the (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s5.\n              \\<not> Option.is_none (devBC ?t5 ?n5 ?nid5 n');\n   Option.is_none (devBC ?t5 ?n5 ?nid5 ?n\\<^sub>s5);\n   \\<not> Option.is_none (devBC ?ta5 ?na5 ?nida5 ?n\\<^sub>s'5);\n   (?t5, ?n5, ?nid5, ?n\\<^sub>s5, 0::?'a6) =\n   (?ta5, ?na5, ?nida5, ?n\\<^sub>s'5, 0::?'a6)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t5 ?n5 ?nid5\n     (GREATEST n'.\n         n' < ?n\\<^sub>s5 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t5 ?n5 ?nid5\n                   n')))\\<^esub>?t5 (GREATEST n'.\n  n' < ?n\\<^sub>s5 \\<and> \\<not> Option.is_none (devBC ?t5 ?n5 ?nid5 n'))) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta5 ?na5 ?nida5 ?n\\<^sub>s'5)\\<^esub>?ta5 ?n\\<^sub>s'5)\n\ngoal (13 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 4. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 6. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 7. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 8. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 9. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 10. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n        \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n         Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n         (t, n, nid, n\\<^sub>s, 0) =\n         (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n        \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n         (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                          devExt_sumC (ta, na, nida, n\\<^sub>s', n')\nA total of 13 subgoals...", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n')))\\<^esub>t (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n       bc (\\<sigma>\\<^bsub>the (devBC ta na nida (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s6.\n              \\<not> Option.is_none (devBC ?t6 ?n6 ?nid6 n');\n   Option.is_none (devBC ?t6 ?n6 ?nid6 ?n\\<^sub>s6);\n   \\<not> Option.is_none (devBC ?ta6 ?na6 ?nida6 (?n\\<^sub>s'6 + Suc ?n'6));\n   (?t6, ?n6, ?nid6, ?n\\<^sub>s6, 0) =\n   (?ta6, ?na6, ?nida6, ?n\\<^sub>s'6, Suc ?n'6)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t6 ?n6 ?nid6\n     (GREATEST n'.\n         n' < ?n\\<^sub>s6 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t6 ?n6 ?nid6\n                   n')))\\<^esub>?t6 (GREATEST n'.\n  n' < ?n\\<^sub>s6 \\<and> \\<not> Option.is_none (devBC ?t6 ?n6 ?nid6 n'))) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta6 ?na6 ?nida6\n     (?n\\<^sub>s'6 + Suc ?n'6))\\<^esub>?ta6 (?n\\<^sub>s'6 + Suc ?n'6))\n\ngoal (12 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 3. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 6. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 7. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 8. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 9. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 10. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n        \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n         \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n         (t, n, nid, n\\<^sub>s, Suc n') =\n         (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n        \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n         (devBC t n nid\n           (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                          bc (\\<sigma>\\<^bsub>the\n         (devBC ta na nida\n           (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\nA total of 12 subgoals...", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n')))\\<^esub>t (GREATEST n'. n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n       devExt_sumC (ta, na, nida, n\\<^sub>s', n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                   \\<not> Option.is_none (devBC t n nid n');\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (GREATEST n'.\n              n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t n nid\n                        n')))\\<^esub>t\n(GREATEST n'.\n    n' < n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t n nid n'))) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s6.\n              \\<not> Option.is_none (devBC ?t6 ?n6 ?nid6 n');\n   Option.is_none (devBC ?t6 ?n6 ?nid6 ?n\\<^sub>s6);\n   Option.is_none (devBC ?ta6 ?na6 ?nida6 (?n\\<^sub>s'6 + Suc ?n'6));\n   (?t6, ?n6, ?nid6, ?n\\<^sub>s6, 0) =\n   (?ta6, ?na6, ?nida6, ?n\\<^sub>s'6, Suc ?n'6)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t6 ?n6 ?nid6\n     (GREATEST n'.\n         n' < ?n\\<^sub>s6 \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t6 ?n6 ?nid6\n                   n')))\\<^esub>?t6 (GREATEST n'.\n  n' < ?n\\<^sub>s6 \\<and> \\<not> Option.is_none (devBC ?t6 ?n6 ?nid6 n'))) =\n                    devExt_sumC (?ta6, ?na6, ?nida6, ?n\\<^sub>s'6, ?n'6)\n\ngoal (11 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] = []\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 5. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 6. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 7. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 8. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 9. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 10. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n        \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n         Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n         (t, n, nid, n\\<^sub>s, Suc n') =\n         (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n        \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n         (devBC t n nid\n           (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                          devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\nA total of 11 subgoals...", "show\"\\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> (\\<exists>n'<n\\<^sub>s'. \\<not> Option.is_none (devBC ta na nida n')) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow> (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow> [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid n\\<^sub>s' ta na nida.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> (\\<exists>n'<n\\<^sub>s'.\n                   \\<not> Option.is_none (devBC ta na nida n'));\n        Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> [] = []", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s6.\n                      \\<not> Option.is_none (devBC ?t6 ?n6 ?nid6 n'));\n   Option.is_none (devBC ?t6 ?n6 ?nid6 ?n\\<^sub>s6);\n   \\<not> (\\<exists>n'<?n\\<^sub>s'6.\n              \\<not> Option.is_none (devBC ?ta6 ?na6 ?nida6 n'));\n   Option.is_none (devBC ?ta6 ?na6 ?nida6 ?n\\<^sub>s'6);\n   (?t6, ?n6, ?nid6, ?n\\<^sub>s6, 0::?'a7) =\n   (?ta6, ?na6, ?nida6, ?n\\<^sub>s'6, 0::?'a7)\\<rbrakk>\n  \\<Longrightarrow> [] = []\n\ngoal (10 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 4. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 5. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 6. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 7. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 8. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 9. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 10. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n        \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n         Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n         (t, n, nid, n\\<^sub>s, Suc n') =\n         (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n        \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                          devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow> (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow> [] = bc (\\<sigma>\\<^bsub>the (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s7.\n                      \\<not> Option.is_none (devBC ?t7 ?n7 ?nid7 n'));\n   Option.is_none (devBC ?t7 ?n7 ?nid7 ?n\\<^sub>s7);\n   \\<not> Option.is_none (devBC ?ta7 ?na7 ?nida7 ?n\\<^sub>s'7);\n   (?t7, ?n7, ?nid7, ?n\\<^sub>s7, 0::?'a8) =\n   (?ta7, ?na7, ?nida7, ?n\\<^sub>s'7, 0::?'a8)\\<rbrakk>\n  \\<Longrightarrow> [] =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta7 ?na7 ?nida7 ?n\\<^sub>s'7)\\<^esub>?ta7 ?n\\<^sub>s'7)\n\ngoal (9 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 3. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 4. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 5. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 6. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 7. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 8. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 9. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow> [] = bc (\\<sigma>\\<^bsub>the (devBC ta na nida (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s8.\n                      \\<not> Option.is_none (devBC ?t8 ?n8 ?nid8 n'));\n   Option.is_none (devBC ?t8 ?n8 ?nid8 ?n\\<^sub>s8);\n   \\<not> Option.is_none (devBC ?ta8 ?na8 ?nida8 (?n\\<^sub>s'8 + Suc ?n'8));\n   (?t8, ?n8, ?nid8, ?n\\<^sub>s8, 0) =\n   (?ta8, ?na8, ?nida8, ?n\\<^sub>s'8, Suc ?n'8)\\<rbrakk>\n  \\<Longrightarrow> [] =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta8 ?na8 ?nida8\n     (?n\\<^sub>s'8 + Suc ?n'8))\\<^esub>?ta8 (?n\\<^sub>s'8 + Suc ?n'8))\n\ngoal (8 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 3. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 4. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 5. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 6. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 7. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 8. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow>\n       Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow> (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>s t n nid ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                           \\<not> Option.is_none (devBC t n nid n'));\n        Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> [] = devExt_sumC (ta, na, nida, n\\<^sub>s', n')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s8.\n                      \\<not> Option.is_none (devBC ?t8 ?n8 ?nid8 n'));\n   Option.is_none (devBC ?t8 ?n8 ?nid8 ?n\\<^sub>s8);\n   Option.is_none (devBC ?ta8 ?na8 ?nida8 (?n\\<^sub>s'8 + Suc ?n'8));\n   (?t8, ?n8, ?nid8, ?n\\<^sub>s8, 0) =\n   (?ta8, ?na8, ?nida8, ?n\\<^sub>s'8, Suc ?n'8)\\<rbrakk>\n  \\<Longrightarrow> [] =\n                    devExt_sumC (?ta8, ?na8, ?nida8, ?n\\<^sub>s'8, ?n'8)\n\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\n 3. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 4. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 5. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 6. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 7. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida n\\<^sub>s') \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', 0) \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) = bc (\\<sigma>\\<^bsub>the (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida n\\<^sub>s');\n        (t, n, nid, n\\<^sub>s, 0::'a) =\n        (ta, na, nida, n\\<^sub>s', 0::'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida n\\<^sub>s')\\<^esub>ta n\\<^sub>s')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t8 ?n8 ?nid8 ?n\\<^sub>s8);\n   \\<not> Option.is_none (devBC ?ta8 ?na8 ?nida8 ?n\\<^sub>s'8);\n   (?t8, ?n8, ?nid8, ?n\\<^sub>s8, 0::?'a9) =\n   (?ta8, ?na8, ?nida8, ?n\\<^sub>s'8, 0::?'a9)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t8 ?n8 ?nid8 ?n\\<^sub>s8)\\<^esub>?t8 ?n\\<^sub>s8) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta8 ?na8 ?nida8 ?n\\<^sub>s'8)\\<^esub>?ta8 ?n\\<^sub>s'8)\n\ngoal (6 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\n 3. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 4. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 5. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 6. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n        \\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow>\n        (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) = bc (\\<sigma>\\<^bsub>the (devBC ta na nida (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'))\\<^esub>ta (n\\<^sub>s' + Suc n'))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   \\<not> Option.is_none (devBC ?ta9 ?na9 ?nida9 (?n\\<^sub>s'9 + Suc ?n'9));\n   (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0) =\n   (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, Suc ?n'9)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9)\\<^esub>?t9 ?n\\<^sub>s9) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta9 ?na9 ?nida9\n     (?n\\<^sub>s'9 + Suc ?n'9))\\<^esub>?ta9 (?n\\<^sub>s'9 + Suc ?n'9))\n\ngoal (5 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')\n 3. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 4. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 5. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n')) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, 0) = (ta, na, nida, n\\<^sub>s', Suc n') \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) = devExt_sumC (ta, na, nida, n\\<^sub>s', n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s ta na nida n\\<^sub>s' n'.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'));\n        (t, n, nid, n\\<^sub>s, 0) =\n        (ta, na, nida, n\\<^sub>s', Suc n')\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid n\\<^sub>s)\\<^esub>t n\\<^sub>s) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n')", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   Option.is_none (devBC ?ta9 ?na9 ?nida9 (?n\\<^sub>s'9 + Suc ?n'9));\n   (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0) =\n   (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, Suc ?n'9)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9)\\<^esub>?t9 ?n\\<^sub>s9) =\n                    devExt_sumC (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, ?n'9)\n\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\n 3. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 4. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n       \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a)) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, Suc n') = (ta, na, nida, n\\<^sub>s', Suc n'a) \\<Longrightarrow>\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) = bc (\\<sigma>\\<^bsub>the (devBC ta na nida (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        \\<not> Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         bc (\\<sigma>\\<^bsub>the\n        (devBC ta na nida\n          (n\\<^sub>s' + Suc n'a))\\<^esub>ta (n\\<^sub>s' + Suc n'a))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> Option.is_none\n                   (devBC ?t9 ?n9 ?nid9 (?n\\<^sub>s9 + Suc ?n'9));\n   \\<not> Option.is_none\n           (devBC ?ta9 ?na9 ?nida9 (?n\\<^sub>s'9 + Suc ?n'a9));\n   (?t9, ?n9, ?nid9, ?n\\<^sub>s9, Suc ?n'9) =\n   (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, Suc ?n'a9)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t9 ?n9 ?nid9\n     (?n\\<^sub>s9 + Suc ?n'9))\\<^esub>?t9 (?n\\<^sub>s9 + Suc ?n'9)) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?ta9 ?na9 ?nida9\n     (?n\\<^sub>s'9 + Suc ?n'a9))\\<^esub>?ta9 (?n\\<^sub>s'9 + Suc ?n'a9))\n\ngoal (3 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\n 3. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a)) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, Suc n') = (ta, na, nida, n\\<^sub>s', Suc n'a) \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) = devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n        (devBC t n nid\n          (n\\<^sub>s + Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> Option.is_none\n                   (devBC ?t9 ?n9 ?nid9 (?n\\<^sub>s9 + Suc ?n'9));\n   Option.is_none (devBC ?ta9 ?na9 ?nida9 (?n\\<^sub>s'9 + Suc ?n'a9));\n   (?t9, ?n9, ?nid9, ?n\\<^sub>s9, Suc ?n'9) =\n   (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, Suc ?n'a9)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>the\n   (devBC ?t9 ?n9 ?nid9\n     (?n\\<^sub>s9 + Suc ?n'9))\\<^esub>?t9 (?n\\<^sub>s9 + Suc ?n'9)) =\n                    devExt_sumC (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, ?n'a9)\n\ngoal (2 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "show \"\\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n       Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a)) \\<Longrightarrow>\n       (t, n, nid, n\\<^sub>s, Suc n') = (ta, na, nida, n\\<^sub>s', Suc n'a) \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') = devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t n nid n\\<^sub>s n' ta na nida n\\<^sub>s' n'a.\n       \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n        Option.is_none (devBC ta na nida (n\\<^sub>s' + Suc n'a));\n        (t, n, nid, n\\<^sub>s, Suc n') =\n        (ta, na, nida, n\\<^sub>s', Suc n'a)\\<rbrakk>\n       \\<Longrightarrow> devExt_sumC (t, n, nid, n\\<^sub>s, n') =\n                         devExt_sumC (ta, na, nida, n\\<^sub>s', n'a)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>Option.is_none (devBC ?t9 ?n9 ?nid9 (?n\\<^sub>s9 + Suc ?n'9));\n   Option.is_none (devBC ?ta9 ?na9 ?nida9 (?n\\<^sub>s'9 + Suc ?n'a9));\n   (?t9, ?n9, ?nid9, ?n\\<^sub>s9, Suc ?n'9) =\n   (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, Suc ?n'a9)\\<rbrakk>\n  \\<Longrightarrow> devExt_sumC (?t9, ?n9, ?nid9, ?n\\<^sub>s9, ?n'9) =\n                    devExt_sumC (?ta9, ?na9, ?nida9, ?n\\<^sub>s'9, ?n'a9)\n\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "show \"\\<And>P x. (\\<And>n\\<^sub>s t n nid. \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P) \\<Longrightarrow>\n           (\\<And>n\\<^sub>s t n nid. \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P) \\<Longrightarrow>\n           (\\<And>t n nid n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P) \\<Longrightarrow>\n           (\\<And>t n nid n\\<^sub>s n'. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, Suc n') \\<Longrightarrow> P) \\<Longrightarrow>\n           (\\<And>t n nid n\\<^sub>s n'. Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, Suc n') \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "fix P::bool and x::\"trace \\<times>nat\\<times>'nid\\<times>nat\\<times>nat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "assume a1:\"(\\<And>n\\<^sub>s t n nid. \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n') \\<Longrightarrow> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P)\" and\n           a2:\"(\\<And>n\\<^sub>s t n nid. \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')) \\<Longrightarrow> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P)\" and\n           a3:\"(\\<And>t n nid n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n\\<^sub>s) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, 0) \\<Longrightarrow> P)\" and\n           a4:\"(\\<And>t n nid n\\<^sub>s n'. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, Suc n') \\<Longrightarrow> P)\" and\n           a5:\"(\\<And>t n nid n\\<^sub>s n'. Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow> x = (t, n, nid, n\\<^sub>s, Suc n') \\<Longrightarrow> P)\""], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s9.\n              \\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 n');\n   Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s9.\n                      \\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 n'));\n   Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n  \\<lbrakk>\\<not> Option.is_none\n                   (devBC ?t9 ?n9 ?nid9 (?n\\<^sub>s9 + Suc ?n'9));\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, Suc ?n'9)\\<rbrakk>\n  \\<Longrightarrow> P\n  \\<lbrakk>Option.is_none (devBC ?t9 ?n9 ?nid9 (?n\\<^sub>s9 + Suc ?n'9));\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, Suc ?n'9)\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n                   \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n');\n                    Option.is_none (devBC t n nid n\\<^sub>s);\n                    x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n\\<^sub>s t n nid.\n           \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                               \\<not> Option.is_none (devBC t n nid n'));\n            Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s.\n           \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n            x = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>\\<not> Option.is_none\n                            (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>t n nid n\\<^sub>s n'.\n           \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n            x = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "show P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "proof (cases x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c d e. x = (a, b, c, d, e) \\<Longrightarrow> P", "case (fields t n nid n\\<^sub>s n')"], ["proof (state)\nthis:\n  x = (t, n, nid, n\\<^sub>s, n')\n\ngoal (1 subgoal):\n 1. \\<And>a b c d e. x = (a, b, c, d, e) \\<Longrightarrow> P", "then"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n\ngoal (1 subgoal):\n 1. P", "proof (cases n')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = 0\\<rbrakk>\n    \\<Longrightarrow> P\n 2. \\<And>nat.\n       \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> P", "case 0"], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = 0\\<rbrakk>\n    \\<Longrightarrow> P\n 2. \\<And>nat.\n       \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> P", "then"], ["proof (chain)\npicking this:\n  n' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = 0\n\ngoal (1 subgoal):\n 1. P", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n' = 0; ?P1\\<rbrakk> \\<Longrightarrow> P\n 2. \\<lbrakk>n' = 0; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> P", "assume \"Option.is_none (devBC t n nid n\\<^sub>s)\""], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n\\<^sub>s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n' = 0; ?P1\\<rbrakk> \\<Longrightarrow> P\n 2. \\<lbrakk>n' = 0; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> P", "thus ?thesis"], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. P", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s); ?P1\\<rbrakk>\n    \\<Longrightarrow> P\n 2. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> P", "assume \"\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')\""], ["proof (state)\nthis:\n  \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s); ?P1\\<rbrakk>\n    \\<Longrightarrow> P\n 2. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> P", "with \\<open>x = (t, n , nid, n\\<^sub>s, n')\\<close> \\<open>Option.is_none (devBC t n nid n\\<^sub>s)\\<close> \\<open>n'=0\\<close>"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. P", "using a1"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n')\n  \\<lbrakk>\\<exists>n'<?n\\<^sub>s9.\n              \\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 n');\n   Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["proof (state)\nthis:\n  P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s);\n     \\<not> (\\<exists>n'<n\\<^sub>s.\n                \\<not> Option.is_none (devBC t n nid n'))\\<rbrakk>\n    \\<Longrightarrow> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s);\n     \\<not> (\\<exists>n'<n\\<^sub>s.\n                \\<not> Option.is_none (devBC t n nid n'))\\<rbrakk>\n    \\<Longrightarrow> P", "assume \"\\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n'))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid n\\<^sub>s);\n     \\<not> (\\<exists>n'<n\\<^sub>s.\n                \\<not> Option.is_none (devBC t n nid n'))\\<rbrakk>\n    \\<Longrightarrow> P", "with \\<open>x = (t, n , nid, n\\<^sub>s, n')\\<close> \\<open>Option.is_none (devBC t n nid n\\<^sub>s)\\<close> \\<open>n'=0\\<close>"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n'))", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n'))\n\ngoal (1 subgoal):\n 1. P", "using a2"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  Option.is_none (devBC t n nid n\\<^sub>s)\n  n' = 0\n  \\<not> (\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t n nid n'))\n  \\<lbrakk>\\<not> (\\<exists>n'<?n\\<^sub>s9.\n                      \\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 n'));\n   Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = 0;\n     \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\\<rbrakk>\n    \\<Longrightarrow> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = 0;\n     \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\\<rbrakk>\n    \\<Longrightarrow> P", "assume \"\\<not> Option.is_none (devBC t n nid n\\<^sub>s)\""], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = 0;\n     \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\\<rbrakk>\n    \\<Longrightarrow> P", "with \\<open>x = (t, n , nid, n\\<^sub>s, n')\\<close> \\<open>n'=0\\<close>"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = 0\n  \\<not> Option.is_none (devBC t n nid n\\<^sub>s)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = 0\n  \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. P", "using a3"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = 0\n  \\<not> Option.is_none (devBC t n nid n\\<^sub>s)\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t9 ?n9 ?nid9 ?n\\<^sub>s9);\n   x = (?t9, ?n9, ?nid9, ?n\\<^sub>s9, 0)\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> P", "case (Suc n'')"], ["proof (state)\nthis:\n  n' = Suc n''\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>x = (t, n, nid, n\\<^sub>s, n'); n' = Suc nat\\<rbrakk>\n       \\<Longrightarrow> P", "then"], ["proof (chain)\npicking this:\n  n' = Suc n''", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = Suc n''\n\ngoal (1 subgoal):\n 1. P", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n' = Suc n''; ?P1\\<rbrakk> \\<Longrightarrow> P\n 2. \\<lbrakk>n' = Suc n''; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> P", "assume \"Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\""], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n' = Suc n''; ?P1\\<rbrakk> \\<Longrightarrow> P\n 2. \\<lbrakk>n' = Suc n''; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> P", "with \\<open>x = (t, n , nid, n\\<^sub>s, n')\\<close> \\<open>n'=Suc n''\\<close>"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. P", "using a5[of t n nid n\\<^sub>s n'']"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n  \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''));\n   x = (t, n, nid, n\\<^sub>s, Suc n'')\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["proof (state)\nthis:\n  P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = Suc n'';\n     \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\\<rbrakk>\n    \\<Longrightarrow> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = Suc n'';\n     \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\\<rbrakk>\n    \\<Longrightarrow> P", "assume \"\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\""], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n' = Suc n'';\n     \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\\<rbrakk>\n    \\<Longrightarrow> P", "with \\<open>x = (t, n , nid, n\\<^sub>s, n')\\<close> \\<open>n'=Suc n''\\<close>"], ["proof (chain)\npicking this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. P", "using a4[of t n nid n\\<^sub>s n'']"], ["proof (prove)\nusing this:\n  x = (t, n, nid, n\\<^sub>s, n')\n  n' = Suc n''\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''))\n  \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n''));\n   x = (t, n, nid, n\\<^sub>s, Suc n'')\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>n\\<^sub>s t n nid.\n              \\<lbrakk>\\<exists>n'<n\\<^sub>s.\n                          \\<not> Option.is_none (devBC t n nid n');\n               Option.is_none (devBC t n nid n\\<^sub>s);\n               ?x9 = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n              \\<Longrightarrow> ?P9;\n   \\<And>n\\<^sub>s t n nid.\n      \\<lbrakk>\\<not> (\\<exists>n'<n\\<^sub>s.\n                          \\<not> Option.is_none (devBC t n nid n'));\n       Option.is_none (devBC t n nid n\\<^sub>s);\n       ?x9 = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n      \\<Longrightarrow> ?P9;\n   \\<And>t n nid n\\<^sub>s.\n      \\<lbrakk>\\<not> Option.is_none (devBC t n nid n\\<^sub>s);\n       ?x9 = (t, n, nid, n\\<^sub>s, 0)\\<rbrakk>\n      \\<Longrightarrow> ?P9;\n   \\<And>t n nid n\\<^sub>s n'.\n      \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n       ?x9 = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n      \\<Longrightarrow> ?P9;\n   \\<And>t n nid n\\<^sub>s n'.\n      \\<lbrakk>Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'));\n       ?x9 = (t, n, nid, n\\<^sub>s, Suc n')\\<rbrakk>\n      \\<Longrightarrow> ?P9\\<rbrakk>\n  \\<Longrightarrow> ?P9\n\ngoal:\nNo subgoals!", "qed"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All devExt_dom", "by lexicographic_order"], ["", "lemma devExt_same:\n  assumes \"\\<forall>n'''>n'. n'''\\<le>n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\"\n    and \"n'\\<ge>n\\<^sub>s\"\n    and \"n'''\\<le>n''\"\n  shows \"n'''\\<ge>n'\\<Longrightarrow>devExt t n nid n\\<^sub>s (n'''-n\\<^sub>s) = devExt t n nid n\\<^sub>s (n'-n\\<^sub>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<le> n''' \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s (n''' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "proof (induction n''' rule: dec_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n 2. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "case (step n'''')"], ["proof (state)\nthis:\n  n' \\<le> n''''\n  n'''' < n'''\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "hence \"Suc n''''>n'\""], ["proof (prove)\nusing this:\n  n' \\<le> n''''\n  n'''' < n'''\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. n' < Suc n''''", "by simp"], ["proof (state)\nthis:\n  n' < Suc n''''\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "moreover"], ["proof (state)\nthis:\n  n' < Suc n''''\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "from step.hyps assms(3)"], ["proof (chain)\npicking this:\n  n' \\<le> n''''\n  n'''' < n'''\n  n''' \\<le> n''", "have \"Suc n''''\\<le>n''\""], ["proof (prove)\nusing this:\n  n' \\<le> n''''\n  n'''' < n'''\n  n''' \\<le> n''\n\ngoal (1 subgoal):\n 1. Suc n'''' \\<le> n''", "by simp"], ["proof (state)\nthis:\n  Suc n'''' \\<le> n''\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "ultimately"], ["proof (chain)\npicking this:\n  n' < Suc n''''\n  Suc n'''' \\<le> n''", "have \"Option.is_none (devBC t n nid (Suc n''''))\""], ["proof (prove)\nusing this:\n  n' < Suc n''''\n  Suc n'''' \\<le> n''\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid (Suc n''''))", "using assms(1)"], ["proof (prove)\nusing this:\n  n' < Suc n''''\n  Suc n'''' \\<le> n''\n  \\<forall>n'''>n'.\n     n''' \\<le> n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid (Suc n''''))", "by simp"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (Suc n''''))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "moreover"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (Suc n''''))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "from assms(2) step.hyps"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n'\n  n' \\<le> n''''\n  n'''' < n'''", "have \"n''''\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n'\n  n' \\<le> n''''\n  n'''' < n'''\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> n''''", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n''''\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "hence \"Suc n'''' = n\\<^sub>s + Suc (n''''-n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n''''\n\ngoal (1 subgoal):\n 1. Suc n'''' = n\\<^sub>s + Suc (n'''' - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  Suc n'''' = n\\<^sub>s + Suc (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "ultimately"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (Suc n''''))\n  Suc n'''' = n\\<^sub>s + Suc (n'''' - n\\<^sub>s)", "have \"Option.is_none (devBC t n nid (n\\<^sub>s + Suc (n''''-n\\<^sub>s)))\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (Suc n''''))\n  Suc n'''' = n\\<^sub>s + Suc (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid (n\\<^sub>s + Suc (n'''' - n\\<^sub>s)))", "by metis"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc (n'''' - n\\<^sub>s)))\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "hence \"devExt t n nid n\\<^sub>s (Suc (n''''-n\\<^sub>s)) = devExt t n nid n\\<^sub>s (n''''-n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc (n'''' - n\\<^sub>s)))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc (n'''' - n\\<^sub>s)) =\n    devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc (n'''' - n\\<^sub>s)) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc (n'''' - n\\<^sub>s)) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "from \\<open>n''''\\<ge>n\\<^sub>s\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n''''", "have \"Suc (n''''-n\\<^sub>s) = Suc n''''-n\\<^sub>s\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n''''\n\ngoal (1 subgoal):\n 1. Suc (n'''' - n\\<^sub>s) = Suc n'''' - n\\<^sub>s", "by simp"], ["proof (state)\nthis:\n  Suc (n'''' - n\\<^sub>s) = Suc n'''' - n\\<^sub>s\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s (Suc (n'''' - n\\<^sub>s)) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n  Suc (n'''' - n\\<^sub>s) = Suc n'''' - n\\<^sub>s", "have \"devExt t n nid n\\<^sub>s (Suc n''''-n\\<^sub>s) = devExt t n nid n\\<^sub>s (n''''-n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (Suc (n'''' - n\\<^sub>s)) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n  Suc (n'''' - n\\<^sub>s) = Suc n'''' - n\\<^sub>s\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n' \\<le> na; na < n''';\n        devExt t n nid n\\<^sub>s (na - n\\<^sub>s) =\n        devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\\<rbrakk>\n       \\<Longrightarrow> devExt t n nid n\\<^sub>s (Suc na - n\\<^sub>s) =\n                         devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "with step.IH"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n  devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)", "show ?case"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n  devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n'''' - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n    devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n'''' - n\\<^sub>s) =\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_bc[simp]:\n  assumes \"\\<not> Option.is_none (devBC t n nid (n'+n''))\"\n  shows \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n'+n''))\\<^esub>(t (n'+n'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "proof (cases n'')"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = 0 \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n 2. \\<And>nat.\n       n'' = Suc nat \\<Longrightarrow>\n       devExt t n nid n' n'' =\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                 (n' + n''))\\<^esub>t (n' + n''))", "case 0"], ["proof (state)\nthis:\n  n'' = 0\n\ngoal (2 subgoals):\n 1. n'' = 0 \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n 2. \\<And>nat.\n       n'' = Suc nat \\<Longrightarrow>\n       devExt t n nid n' n'' =\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                 (n' + n''))\\<^esub>t (n' + n''))", "with assms"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n  n'' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n  n'' = 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n'' = Suc nat \\<Longrightarrow>\n       devExt t n nid n' n'' =\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                 (n' + n''))\\<^esub>t (n' + n''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n'' = Suc nat \\<Longrightarrow>\n       devExt t n nid n' n'' =\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                 (n' + n''))\\<^esub>t (n' + n''))", "case (Suc nat)"], ["proof (state)\nthis:\n  n'' = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n'' = Suc nat \\<Longrightarrow>\n       devExt t n nid n' n'' =\n       bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                 (n' + n''))\\<^esub>t (n' + n''))", "with assms"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n  n'' = Suc nat", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n  n'' = Suc nat\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_greatest:\n  assumes \"\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\"\n    and \"Option.is_none (devBC t n nid (n'+n''))\" and \"\\<not> n''=0\"\n  shows \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n''')))\\<^esub>(t (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n'''))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "let ?P=\"\\<lambda>n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n''')\""], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "let ?G=\"GREATEST n'''. ?P n'''\""], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "have \"\\<forall>n'''>n'+n''. \\<not> ?P n'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n'''>n' + n''.\n       \\<not> (n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'''>n' + n''.\n     \\<not> (n''' < n' + n'' \\<and>\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n  \\<forall>n'''>n' + n''.\n     \\<not> (n''' < n' + n'' \\<and>\n             \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\""], ["proof (prove)\nusing this:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n  \\<forall>n'''>n' + n''.\n     \\<not> (n''' < n' + n'' \\<and>\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'''.\n       (n''' < n' + n'' \\<and>\n        \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n       (\\<forall>n''''.\n           n'''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n           n'''' \\<le> n''')", "using boundedGreatest[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n  \\<forall>n'''>n' + n''.\n     \\<not> (n''' < n' + n'' \\<and>\n             \\<not> Option.is_none (devBC t n nid n'''))\n  \\<lbrakk>?i < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?i);\n   \\<forall>n'a>?n.\n      \\<not> (n'a < n' + n'' \\<and>\n              \\<not> Option.is_none (devBC t n nid n'a))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i'\\<le>?n.\n                       (i' < n' + n'' \\<and>\n                        \\<not> Option.is_none (devBC t n nid i')) \\<and>\n                       (\\<forall>n'a.\n                           n'a < n' + n'' \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t n nid n'a) \\<longrightarrow>\n                           n'a \\<le> i')\n\ngoal (1 subgoal):\n 1. \\<exists>n'''.\n       (n''' < n' + n'' \\<and>\n        \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n       (\\<forall>n''''.\n           n'''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n           n'''' \\<le> n''')", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "hence \"?P ?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' + n'' \\<and>\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))", "using GreatestI_ex_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>\\<exists>k<n' + n''. \\<not> Option.is_none (devBC t n nid k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> (GREATEST n'''.\n                        n''' < n' + n'' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'''))\n                    < n' + n'' \\<and>\n                    \\<not> Option.is_none\n                            (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' + n'' \\<and>\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))", "by auto"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "hence \"\\<not>Option.is_none (devBC t n nid ?G)\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "assume \"?G>n'\""], ["proof (state)\nthis:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "hence \"?G-n'+n' = ?G\""], ["proof (prove)\nusing this:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n' +\n    n' =\n    (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))", "by simp"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' +\n  n' =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>\\<not>Option.is_none (devBC t n nid ?G)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' +\n  n' =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<not>Option.is_none (devBC t n nid (?G-n'+n'))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' +\n  n' =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid\n              ((GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''')) -\n               n' +\n               n'))", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none\n          (devBC t n nid\n            ((GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n''')) -\n             n' +\n             n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  \\<not> Option.is_none\n          (devBC t n nid\n            ((GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n''')) -\n             n' +\n             n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "from \\<open>?G>n'\\<close>"], ["proof (chain)\npicking this:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))", "have \"?G-n'\\<noteq>0\""], ["proof (prove)\nusing this:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n' \\<noteq>\n    0", "by auto"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' \\<noteq>\n  0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "hence \"\\<exists>nat. Suc nat = ?G - n'\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. \\<exists>nat.\n       Suc nat =\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n''')) -\n       n'", "by presburger"], ["proof (state)\nthis:\n  \\<exists>nat.\n     Suc nat =\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "then"], ["proof (chain)\npicking this:\n  \\<exists>nat.\n     Suc nat =\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n'", "obtain nat where \"Suc nat = ?G-n'\""], ["proof (prove)\nusing this:\n  \\<exists>nat.\n     Suc nat =\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n'\n\ngoal (1 subgoal):\n 1. (\\<And>nat.\n        Suc nat =\n        (GREATEST n'''.\n            n''' < n' + n'' \\<and>\n            \\<not> Option.is_none (devBC t n nid n''')) -\n        n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Suc nat =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            ((GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n''')) -\n             n' +\n             n'))\n  Suc nat =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n'", "have \"\\<not>Option.is_none (devBC t n nid (n'+Suc nat))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            ((GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n''')) -\n             n' +\n             n'))\n  Suc nat =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n' + Suc nat))", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid (n' + Suc nat))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "hence \"devExt t n nid n' (Suc nat) = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + Suc nat))\\<^esub>t (n' + Suc nat))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n' + Suc nat))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (Suc nat) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n' + Suc nat))\\<^esub>t (n' + Suc nat))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n' + Suc nat))\\<^esub>t (n' + Suc nat))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>Suc nat = ?G - n'\\<close>"], ["proof (chain)\npicking this:\n  Suc nat =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n'\n  devExt t n nid n' (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n' + Suc nat))\\<^esub>t (n' + Suc nat))", "have \"devExt t n nid n' (?G - n') = bc (\\<sigma>\\<^bsub>the (devBC t n nid (?G-n'+n'))\\<^esub>(t (?G-n'+n')))\""], ["proof (prove)\nusing this:\n  Suc nat =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n'\n  devExt t n nid n' (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n' + Suc nat))\\<^esub>t (n' + Suc nat))\n\ngoal (1 subgoal):\n 1. devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n') =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              ((GREATEST n'''.\n                                   n''' < n' + n'' \\<and>\n                                   \\<not> Option.is_none\n     (devBC t n nid n''')) -\n                               n' +\n                               n'))\\<^esub>t\n      ((GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n''')) -\n       n' +\n       n'))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            ((GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none\n   (devBC t n nid n''')) -\n                             n' +\n                             n'))\\<^esub>t\n    ((GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n' +\n     n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>?G-n'+n' = ?G\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' +\n  n' =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            ((GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none\n   (devBC t n nid n''')) -\n                             n' +\n                             n'))\\<^esub>t\n    ((GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n' +\n     n'))", "have \"devExt t n nid n' (?G - n') = bc (\\<sigma>\\<^bsub>the (devBC t n nid ?G)\\<^esub>(t ?G))\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n  n' +\n  n' =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            ((GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none\n   (devBC t n nid n''')) -\n                             n' +\n                             n'))\\<^esub>t\n    ((GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) -\n     n' +\n     n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n') =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "have \"devExt t n nid n' (n' + n'' - n') = devExt t n nid n' (?G - n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "from \\<open>\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')", "have \"\\<forall>n'''. ?P n''' \\<longrightarrow> n'''\\<le>?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''.\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "using Greatest_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>?k < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''.\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by blast"], ["proof (state)\nthis:\n  \\<forall>n'''.\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "hence \"\\<forall>n'''>?G. n'''<n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  \\<forall>n'''.\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "have \"\\<forall>n'''>?G. n'''\\<le>n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' \\<le> n' + n'' \\<longrightarrow>\n       Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "moreover"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "from \\<open>?P ?G\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))", "have \"?G\\<le>n'+n''\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    \\<le> n' + n''", "by simp"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  \\<le> n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "moreover"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  \\<le> n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "from \\<open>?G>n'\\<close>"], ["proof (chain)\npicking this:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))", "have \"?G\\<ge>n'\""], ["proof (prove)\nusing this:\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. n' \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by simp"], ["proof (state)\nthis:\n  n' \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  \\<le> n' + n''\n  n' \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  \\<le> n' + n''\n  n' \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "using \\<open>?G>n'\\<close> devExt_same[of ?G \"n'+n''\" t n nid n' \"n'+n''\"]"], ["proof (prove)\nusing this:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  \\<le> n' + n''\n  n' \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n  n' < (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none (devBC t n nid n'''))\n  \\<lbrakk>\\<forall>n'''>GREATEST n'''.\n                            n''' < n' + n'' \\<and>\n                            \\<not> Option.is_none (devBC t n nid n''').\n              n''' \\<le> n' + n'' \\<longrightarrow>\n              Option.is_none (devBC t n nid n''');\n   n' \\<le> (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n'''));\n   n' + n'' \\<le> n' + n'';\n   (GREATEST n'''.\n       n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n   \\<le> n' + n''\\<rbrakk>\n  \\<Longrightarrow> devExt t n nid n' (n' + n'' - n') =\n                    devExt t n nid n'\n                     ((GREATEST n'''.\n                          n''' < n' + n'' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n''')) -\n                      n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' (n' + n'' - n') =\n    devExt t n nid n'\n     ((GREATEST n'''.\n          n''' < n' + n'' \\<and>\n          \\<not> Option.is_none (devBC t n nid n''')) -\n      n')", "by blast"], ["proof (state)\nthis:\n  devExt t n nid n' (n' + n'' - n') =\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' (n' + n'' - n') =\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  devExt t n nid n' (n' + n'' - n') =\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n')", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  devExt t n nid n' (n' + n'' - n') =\n  devExt t n nid n'\n   ((GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) -\n    n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<not> n' < (GREATEST n'''.\n                    n''' < n' + n'' \\<and>\n                    \\<not> Option.is_none\n                            (devBC t n nid n''')) \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n' < (GREATEST n'''.\n                    n''' < n' + n'' \\<and>\n                    \\<not> Option.is_none\n                            (devBC t n nid n''')) \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "assume \"\\<not>?G>n'\""], ["proof (state)\nthis:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<not> n' < (GREATEST n'''.\n                    n''' < n' + n'' \\<and>\n                    \\<not> Option.is_none\n                            (devBC t n nid n''')) \\<Longrightarrow>\n    devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "assume \"?G=n'\""], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>\\<not>Option.is_none (devBC t n nid ?G)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'", "have \"\\<not> Option.is_none (devBC t n nid n')\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n')", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>\\<not>Option.is_none (devBC t n nid ?G)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  \\<not> Option.is_none (devBC t n nid n')", "have \"devExt t n nid n' 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>(t n'))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n  \\<not> Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "have \"devExt t n nid n' n'' = devExt t n nid n' 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')", "have \"\\<forall>n'''>?G. ?P n''' \\<longrightarrow> n'''\\<le>?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "using Greatest_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>?k < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by blast"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "with \\<open>?G=n'\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<forall>n'''>n'. n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "have \"\\<forall>n'''>n'. n'''\\<le>n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' \\<le> n' + n'' \\<longrightarrow>\n       Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<not> n''=0\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 0", "have \"n'<n'+n''\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' < n' + n''", "by simp"], ["proof (state)\nthis:\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "using devExt_same[of n' \"n'+n''\" t n nid n' \"n'+n''\"]"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''\n  \\<lbrakk>\\<forall>n'''>n'.\n              n''' \\<le> n' + n'' \\<longrightarrow>\n              Option.is_none (devBC t n nid n''');\n   n' \\<le> n'; n' + n'' \\<le> n' + n''; n' \\<le> n' + n''\\<rbrakk>\n  \\<Longrightarrow> devExt t n nid n' (n' + n'' - n') =\n                    devExt t n nid n' (n' - n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n  devExt t n nid n' n'' = devExt t n nid n' 0", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "using \\<open>?G=n'\\<close>"], ["proof (prove)\nusing this:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n  devExt t n nid n' n'' = devExt t n nid n' 0\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  n'\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "assume \"\\<not>?G=n'\""], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n  n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "with \\<open>\\<not>?G>n'\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n  n'", "have \"?G<n'\""], ["proof (prove)\nusing this:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n  n'\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n'", "by simp"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "hence \"devExt t n nid n' n'' = devExt t n nid n' 0\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')", "have \"\\<forall>n'''>?G. ?P n''' \\<longrightarrow> n'''\\<le>?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "using Greatest_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>?k < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by blast"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "with \\<open>\\<not>?G>n'\\<close>"], ["proof (chain)\npicking this:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<forall>n'''>n'. n'''<n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  \\<not> n' < (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n'''))\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "have \"\\<forall>n'''>n'. n'''\\<le>n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' \\<le> n' + n'' \\<longrightarrow>\n       Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>?P ?G\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))", "have \"?G<n'+n''\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' + n''", "by simp"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "moreover"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<not> n''=0\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 0", "have \"n'<n'+n''\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' < n' + n''", "by simp"], ["proof (state)\nthis:\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<Longrightarrow>\n    devExt t n nid n' n'' = devExt t n nid n' 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  n' < n' + n''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "using devExt_same[of n' \"n'+n''\" t n nid n' \"n'+n''\"]"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  n' < n' + n''\n  \\<lbrakk>\\<forall>n'''>n'.\n              n''' \\<le> n' + n'' \\<longrightarrow>\n              Option.is_none (devBC t n nid n''');\n   n' \\<le> n'; n' + n'' \\<le> n' + n''; n' \\<le> n' + n''\\<rbrakk>\n  \\<Longrightarrow> devExt t n nid n' (n' + n'' - n') =\n                    devExt t n nid n' (n' - n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "have \"devExt t n nid n' 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'''. n'''<n' \\<and> \\<not>Option.is_none (devBC t n nid n''')))\\<^esub>(t (GREATEST n'''. n'''<n' \\<and> \\<not>Option.is_none (devBC t n nid n'''))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "from \\<open>\\<not> n''=0\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 0", "have \"n'<n'+n''\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' < n' + n''", "by simp"], ["proof (state)\nthis:\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "from \\<open>\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')", "have \"\\<forall>n'''>?G. ?P n''' \\<longrightarrow> n'''\\<le>?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "using Greatest_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>?k < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>GREATEST n'''.\n                     n''' < n' + n'' \\<and>\n                     \\<not> Option.is_none (devBC t n nid n''').\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by blast"], ["proof (state)\nthis:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  n' < n' + n''\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "have \"Option.is_none (devBC t n nid n')\""], ["proof (prove)\nusing this:\n  n' < n' + n''\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid n')", "using \\<open>?G<n'\\<close>"], ["proof (prove)\nusing this:\n  n' < n' + n''\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid n')", "by simp"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "from \\<open>\\<forall>n'''>?G. ?P n''' \\<longrightarrow> n'''\\<le>?G\\<close> \\<open>?G<n'\\<close> \\<open>n'<n'+n''\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n  n' < n' + n''", "have \"\\<forall>n'''\\<ge>n'. n'''<n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  \\<forall>n'''>GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n''').\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. \\<forall>n'''\\<ge>n'.\n       n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''\\<ge>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "have \"\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "from \\<open>\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')", "obtain n'''\n            where \"n'''<n'+n''\" and \"\\<not> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. (\\<And>n'''.\n        \\<lbrakk>n''' < n' + n'';\n         \\<not> Option.is_none (devBC t n nid n''')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "moreover"], ["proof (state)\nthis:\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "have \"n'''<n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n''' < n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n''' < n' \\<Longrightarrow> False", "assume \"\\<not>n'''<n'\""], ["proof (state)\nthis:\n  \\<not> n''' < n'\n\ngoal (1 subgoal):\n 1. \\<not> n''' < n' \\<Longrightarrow> False", "hence \"n'''\\<ge>n'\""], ["proof (prove)\nusing this:\n  \\<not> n''' < n'\n\ngoal (1 subgoal):\n 1. n' \\<le> n'''", "by simp"], ["proof (state)\nthis:\n  n' \\<le> n'''\n\ngoal (1 subgoal):\n 1. \\<not> n''' < n' \\<Longrightarrow> False", "with \\<open>\\<forall>n'''\\<ge>n'. n'''<n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\\<close> \\<open>n'''<n'+n''\\<close>\n              \\<open>\\<not> Option.is_none (devBC t n nid n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'''\\<ge>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n  n' \\<le> n'''", "show False"], ["proof (prove)\nusing this:\n  \\<forall>n'''\\<ge>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n  n' \\<le> n'''\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n''' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "ultimately"], ["proof (chain)\npicking this:\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n  n''' < n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n''' < n' + n''\n  \\<not> Option.is_none (devBC t n nid n''')\n  n''' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid n')\n  \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')", "show ?thesis"], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid n')\n  \\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "have \"(GREATEST n'''. n'''<n' \\<and> \\<not>Option.is_none (devBC t n nid n''')) = ?G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n    (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))", "proof(rule Greatest_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<and>\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "from \\<open>?P ?G\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))", "have \"?G < n'+n''\" and \"\\<not>Option.is_none (devBC t n nid ?G)\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n'' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' + n'' &&&\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))", "by auto"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<and>\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))\n 2. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "with \\<open>?G<n'\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))", "show \"?G < n' \\<and> \\<not> Option.is_none (devBC t n nid ?G)\""], ["proof (prove)\nusing this:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n'\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' + n''\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'''.\n        n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n    < n' \\<and>\n    \\<not> Option.is_none\n            (devBC t n nid\n              (GREATEST n'''.\n                  n''' < n' + n'' \\<and>\n                  \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n  < n' \\<and>\n  \\<not> Option.is_none\n          (devBC t n nid\n            (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "assume \"y < n' \\<and> \\<not> Option.is_none (devBC t n nid y)\""], ["proof (state)\nthis:\n  y < n' \\<and> \\<not> Option.is_none (devBC t n nid y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "moreover"], ["proof (state)\nthis:\n  y < n' \\<and> \\<not> Option.is_none (devBC t n nid y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "from \\<open>\\<exists>n'''. ?P n''' \\<and> (\\<forall>n''''. ?P n'''' \\<longrightarrow> n''''\\<le>n''')\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')", "have \"\\<forall>n'''. ?P n''' \\<longrightarrow> n'''\\<le>?G\""], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''.\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "using Greatest_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'''.\n     (n''' < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid n''')) \\<and>\n     (\\<forall>n''''.\n         n'''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'''') \\<longrightarrow>\n         n'''' \\<le> n''')\n  \\<lbrakk>?k < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid ?k);\n   \\<And>y.\n      y < n' + n'' \\<and>\n      \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST n'''.\n                                 n''' < n' + n'' \\<and>\n                                 \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''.\n       n''' < n' + n'' \\<and>\n       \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n       n'''\n       \\<le> (GREATEST n'''.\n                 n''' < n' + n'' \\<and>\n                 \\<not> Option.is_none (devBC t n nid n'''))", "by blast"], ["proof (state)\nthis:\n  \\<forall>n'''.\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y < n' \\<and>\n       \\<not> Option.is_none (devBC t n nid y) \\<Longrightarrow>\n       y \\<le> (GREATEST n'''.\n                   n''' < n' + n'' \\<and>\n                   \\<not> Option.is_none (devBC t n nid n'''))", "ultimately"], ["proof (chain)\npicking this:\n  y < n' \\<and> \\<not> Option.is_none (devBC t n nid y)\n  \\<forall>n'''.\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))", "show \"y \\<le> ?G\""], ["proof (prove)\nusing this:\n  y < n' \\<and> \\<not> Option.is_none (devBC t n nid y)\n  \\<forall>n'''.\n     n''' < n' + n'' \\<and>\n     \\<not> Option.is_none (devBC t n nid n''') \\<longrightarrow>\n     n'''\n     \\<le> (GREATEST n'''.\n               n''' < n' + n'' \\<and>\n               \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. y \\<le> (GREATEST n'''.\n                n''' < n' + n'' \\<and>\n                \\<not> Option.is_none (devBC t n nid n'''))", "by simp"], ["proof (state)\nthis:\n  y \\<le> (GREATEST n'''.\n              n''' < n' + n'' \\<and>\n              \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (GREATEST n'''.\n      n''' < n' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> n' < (GREATEST n'''.\n                             n''' < n' + n'' \\<and>\n                             \\<not> Option.is_none (devBC t n nid n'''));\n     (GREATEST n'''.\n         n''' < n' + n'' \\<and>\n         \\<not> Option.is_none (devBC t n nid n''')) \\<noteq>\n     n'\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n' n'' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid\n       (GREATEST n'''.\n           n''' < n' + n'' \\<and>\n           \\<not> Option.is_none\n                   (devBC t n nid\n                     n''')))\\<^esub>t (GREATEST n'''.\n    n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n''')))", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n  devExt t n nid n' 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  (GREATEST n'''.\n      n''' < n' \\<and> \\<not> Option.is_none (devBC t n nid n''')) =\n  (GREATEST n'''.\n      n''' < n' + n'' \\<and> \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_shift: \"devExt t n nid (n'+n'') 0 = devExt t n nid n' n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"n''=0\""], ["proof (state)\nthis:\n  n'' = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "thus ?thesis"], ["proof (prove)\nusing this:\n  n'' = 0\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"\\<not> (n''=0)\""], ["proof (state)\nthis:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "thus ?thesis"], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n'' \\<noteq> 0; ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>n'' \\<noteq> 0; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"Option.is_none (devBC t n nid (n'+n''))\""], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n' + n''))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n'' \\<noteq> 0; ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>n'' \\<noteq> 0; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "thus ?thesis"], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\""], ["proof (state)\nthis:\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')", "have \"devExt t n nid (n'+n'') 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n''')))\\<^esub>(t (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n'''))))\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "moreover"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "from \\<open>\\<not> (n''=0)\\<close> \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close> \\<open>\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n''')\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 0\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')", "have \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n''')))\\<^esub>(t (GREATEST n'''. n'''<(n'+n'') \\<and> \\<not>Option.is_none (devBC t n nid n'''))))\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "using devExt_greatest"], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<exists>n'''<n' + n''. \\<not> Option.is_none (devBC t n nid n''')\n  \\<lbrakk>\\<exists>n'''<?n' + ?n''.\n              \\<not> Option.is_none (devBC ?t ?n ?nid n''');\n   Option.is_none (devBC ?t ?n ?nid (?n' + ?n'')); ?n'' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> devExt ?t ?n ?nid ?n' ?n'' =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?t ?n ?nid\n     (GREATEST n'''.\n         n''' < ?n' + ?n'' \\<and>\n         \\<not> Option.is_none\n                 (devBC ?t ?n ?nid\n                   n''')))\\<^esub>?t (GREATEST n'''.\n   n''' < ?n' + ?n'' \\<and> \\<not> Option.is_none (devBC ?t ?n ?nid n''')))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n'''.\n                                  n''' < n' + n'' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n''')))\\<^esub>t (GREATEST n'''.\n                           n''' < n' + n'' \\<and>\n                           \\<not> Option.is_none (devBC t n nid n''')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n 2. \\<lbrakk>Option.is_none (devBC t n nid (n' + n'')); \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n'''.\n                                n''' < n' + n'' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n''')))\\<^esub>t (GREATEST n'''.\n                         n''' < n' + n'' \\<and>\n                         \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"\\<not> (\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n'''))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))", "have \"devExt t n nid (n'+n'') 0=[]\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = []", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "moreover"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "have \"devExt t n nid n' n''=[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "from \\<open>\\<not> (\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n'''))\\<close> \\<open>n''\\<noteq>0\\<close>"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n  n'' \\<noteq> 0", "have \"Option.is_none (devBC t n nid n')\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid n')", "by simp"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "moreover"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "from \\<open>\\<not> (\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n'''))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<not> (\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n'''))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n'''))", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "ultimately"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid n')\n  \\<not> (\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n'''))", "have \"devExt t n nid n' 0=[]\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid n')\n  \\<not> (\\<exists>n'''<n'. \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' 0 = []", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' 0 = []\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n' 0 = []\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "have \"devExt t n nid n' n''=devExt t n nid n' 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<not> (\\<exists>n'''<n'+n''. \\<not> Option.is_none (devBC t n nid n'''))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))", "have \"\\<forall>n'''>n'. n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'''<n' + n''.\n             \\<not> Option.is_none (devBC t n nid n'''))\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "with \\<open>Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')", "have \"\\<forall>n'''>n'. n'''\\<le>n'+n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n' + n''))\n  \\<forall>n'''>n'.\n     n''' < n' + n'' \\<longrightarrow> Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. \\<forall>n'''>n'.\n       n''' \\<le> n' + n'' \\<longrightarrow>\n       Option.is_none (devBC t n nid n''')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "from \\<open>\\<not> n''=0\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 0", "have \"n'<n'+n''\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' < n' + n''", "by simp"], ["proof (state)\nthis:\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "using devExt_same[of n' \"n'+n''\" t n nid n' \"n'+n''\"]"], ["proof (prove)\nusing this:\n  \\<forall>n'''>n'.\n     n''' \\<le> n' + n'' \\<longrightarrow>\n     Option.is_none (devBC t n nid n''')\n  n' < n' + n''\n  \\<lbrakk>\\<forall>n'''>n'.\n              n''' \\<le> n' + n'' \\<longrightarrow>\n              Option.is_none (devBC t n nid n''');\n   n' \\<le> n'; n' + n'' \\<le> n' + n''; n' \\<le> n' + n''\\<rbrakk>\n  \\<Longrightarrow> devExt t n nid n' (n' + n'' - n') =\n                    devExt t n nid n' (n' - n')\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = devExt t n nid n' 0", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n' 0 = []\n  devExt t n nid n' n'' = devExt t n nid n' 0", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n' 0 = []\n  devExt t n nid n' n'' = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' = []", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n' n'' = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none (devBC t n nid (n' + n''));\n     \\<not> (\\<exists>n'''<n' + n''.\n                \\<not> Option.is_none (devBC t n nid n'''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid (n' + n'') 0 = []\n  devExt t n nid n' n'' = []", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid (n' + n'') 0 = []\n  devExt t n nid n' n'' = []\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "assume \"\\<not> Option.is_none (devBC t n nid (n'+n''))\""], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "hence \"devExt t n nid (n'+n'') 0 = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n'+n''))\\<^esub>(t (n'+n'')))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "moreover"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "from \\<open>\\<not> Option.is_none (devBC t n nid (n'+n''))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))", "have \"devExt t n nid n' n'' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n'+n''))\\<^esub>(t (n'+n'')))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n' + n''))\n\ngoal (1 subgoal):\n 1. devExt t n nid n' n'' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n'' \\<noteq> 0;\n     \\<not> Option.is_none (devBC t n nid (n' + n''))\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid (n' + n'') 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n  devExt t n nid n' n'' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid (n' + n''))\\<^esub>t (n' + n''))\n\ngoal (1 subgoal):\n 1. devExt t n nid (n' + n'') 0 = devExt t n nid n' n''", "by simp"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid (n' + n'') 0 = devExt t n nid n' n''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_bc_geq:\n  assumes \"\\<not> Option.is_none (devBC t n nid n')\" and \"n'\\<ge>n\\<^sub>s\"\n  shows \"devExt t n nid n\\<^sub>s (n'-n\\<^sub>s) = bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>(t n'))\" (is \"?LHS = ?RHS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "have \"devExt t n nid n\\<^sub>s (n'-n\\<^sub>s) = devExt t n nid (n\\<^sub>s+(n'-n\\<^sub>s)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0", "using devExt_shift"], ["proof (prove)\nusing this:\n  devExt ?t ?n ?nid (?n' + ?n'') 0 = devExt ?t ?n ?nid ?n' ?n''\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0", "by auto"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "from assms(2)"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n'", "have \"n\\<^sub>s+(n'-n\\<^sub>s) = n'\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n'\n\ngoal (1 subgoal):\n 1. n\\<^sub>s + (n' - n\\<^sub>s) = n'", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s + (n' - n\\<^sub>s) = n'\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0\n  n\\<^sub>s + (n' - n\\<^sub>s) = n'", "have \"devExt t n nid n\\<^sub>s (n'-n\\<^sub>s) = devExt t n nid n' 0\""], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  devExt t n nid (n\\<^sub>s + (n' - n\\<^sub>s)) 0\n  n\\<^sub>s + (n' - n\\<^sub>s) = n'\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) = devExt t n nid n' 0", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "with assms(1)"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n')\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) = devExt t n nid n' 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n')\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) = devExt t n nid n' 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (n' - n\\<^sub>s) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid n')\\<^esub>t n')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma his_bc_empty:\n  assumes \"(n',nid')\\<in> his t n nid\" and \"\\<not>(\\<exists>n''<n'. \\<exists>nid''. (n'',nid'')\\<in> his t n nid)\"\n  shows \"bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "have \"\\<not> (\\<exists>x. his_prop t n nid n' nid' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>x.\n       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "assume \"\\<not> \\<not> (\\<exists>x. his_prop t n nid n' nid' x)\""], ["proof (state)\nthis:\n  \\<not> (\\<nexists>x.\n             (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n             \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n             fst x =\n             \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n             (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "hence \"\\<exists>x. his_prop t n nid n' nid' x\""], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>x.\n             (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n             \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n             fst x =\n             \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n             (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "with \\<open>(n',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have \"(SOME x. his_prop t n nid n' nid' x) \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (SOME x.\n        (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<in> his t n nid", "using his.intros"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub> \\<Longrightarrow>\n  (?n, ?nid) \\<in> his ?t ?n ?nid\n  \\<lbrakk>(?n', ?nid') \\<in> his ?t ?n ?nid;\n   \\<exists>x.\n      (\\<exists>n. latestAct_cond ?nid' ?t ?n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>?t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>?nid' \\<leftarrow> ?t\\<rangle>\\<^bsub>?n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n')))\\<rbrakk>\n  \\<Longrightarrow> (SOME x.\n                        (\\<exists>n. latestAct_cond ?nid' ?t ?n' n) \\<and>\n                        \\<parallel>snd x\\<parallel>\\<^bsub>?t\n                      (fst x)\\<^esub> \\<and>\n                        fst x =\n                        \\<langle>?nid' \\<leftarrow> ?t\\<rangle>\\<^bsub>?n'\\<^esub> \\<and>\n                        (prefix (bc (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n'))\n                          (bc (\\<sigma>\\<^bsub>snd\n          x\\<^esub>?t (fst x))) \\<or>\n                         (\\<exists>b.\n                             bc (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n') =\n                             bc (\\<sigma>\\<^bsub>snd x\\<^esub>?t (fst x)) @\n                             [b] \\<and>\n                             mining (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n'))))\n                    \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. (SOME x.\n        (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n        (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "from \\<open>\\<exists>x. his_prop t n nid n' nid' x\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have \"his_prop t n nid n' nid' (SOME x. his_prop t n nid n' nid' x)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                     n'))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid' t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid n' nid' x\"]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n  \\<exists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))) \\<Longrightarrow>\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                       (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                     n'))))\\<parallel>\\<^bsub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining\n                        (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                n')))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining\n                          (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>n.\n   latestAct_cond nid' t n' n) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n             (fst (SOME x.\n                      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                      \\<parallel>snd x\\<parallel>\\<^bsub>t\n                    (fst x)\\<^esub> \\<and>\n                      fst x =\n                      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                       (\\<exists>b.\n                           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                           [b] \\<and>\n                           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n         [b] \\<and>\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "hence \"(\\<exists>n. latestAct_cond nid' t n' n) \\<and> fst (SOME x. his_prop t n nid n' nid' x) = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>nid'\\<^esub>t\n                   n'))))\\<parallel>\\<^bsub>t\n       (fst (SOME x.\n                (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                fst x =\n                \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                  (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                 (\\<exists>b.\n                     bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                     bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                     [b] \\<and>\n                     mining\n                      (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>n.\n                                     latestAct_cond nid' t n' n) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n         (fst (SOME x.\n                  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                  \\<parallel>snd x\\<parallel>\\<^bsub>t\n                (fst x)\\<^esub> \\<and>\n                  fst x =\n                  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                  (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                    (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                   (\\<exists>b.\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                       bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                       [b] \\<and>\n                       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>n.\n latestAct_cond nid' t n' n) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\\<^esub>t\n           (fst (SOME x.\n                    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n                    \\<parallel>snd x\\<parallel>\\<^bsub>t\n                  (fst x)\\<^esub> \\<and>\n                    fst x =\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n                    (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                      (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                     (\\<exists>b.\n                         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                         bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                         [b] \\<and>\n                         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))) @\n       [b] \\<and>\n       mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "by force"], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "hence \"fst (SOME x. his_prop t n nid n' nid' x) < n'\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    < n'", "using latestAct_prop(2)[of n' nid' t]"], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) =\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<exists>n'a. latestAct_cond nid' t n' n'a \\<Longrightarrow>\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> < n'\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    < n'", "by force"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<in> his t n nid\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n'", "have \"fst (SOME x. his_prop t n nid n' nid' x)<n' \\<and>\n      (fst (SOME x. his_prop t n nid n' nid' x),snd (SOME x. his_prop t n nid n' nid' x))\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  (SOME x.\n      (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  \\<in> his t n nid\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n'\n\ngoal (1 subgoal):\n 1. fst (SOME x.\n            (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n            (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n    < n' \\<and>\n    (fst (SOME x.\n             (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n             \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n             fst x =\n             \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n             (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))),\n     snd (SOME x.\n             (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n             \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n             fst x =\n             \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n             (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n' \\<and>\n  (fst (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))),\n   snd (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>x.\n               (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n               \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n               fst x =\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n               (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n' \\<and>\n  (fst (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))),\n   snd (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. False", "using assms(2)"], ["proof (prove)\nusing this:\n  fst (SOME x.\n          (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n          (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n  < n' \\<and>\n  (fst (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))),\n   snd (SOME x.\n           (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n           \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n           fst x =\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n           (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))))\n  \\<in> his t n nid\n  \\<not> (\\<exists>n''<n'. \\<exists>nid''. (n'', nid'') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "hence \"\\<forall>x. \\<not> (\\<exists>n. latestAct_cond nid' t n' n) \\<or> \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or> \\<not> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or> \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["proof (prove)\nusing this:\n  \\<nexists>x.\n     (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n     (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n       \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n       fst x \\<noteq>\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n       \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n               (\\<exists>b.\n                   bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                   bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                   mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n     \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n     fst x \\<noteq>\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "hence \"\\<not> (\\<exists>n. latestAct_cond nid' t n' n) \\<or> (\\<exists>n. latestAct_cond nid' t n' n) \\<and> (\\<forall>x. \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or> \\<not> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or> \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')))))\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n     \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n     fst x \\<noteq>\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n    (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))", "by auto"], ["proof (state)\nthis:\n  (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  (\\<forall>x.\n      \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n      fst x \\<noteq>\n      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n      \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<nexists>n. latestAct_cond nid' t n' n) \\<or>\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  (\\<forall>x.\n      \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n      fst x \\<noteq>\n      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n      \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<nexists>n. latestAct_cond nid' t n' n \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "assume \"\\<not> (\\<exists>n. latestAct_cond nid' t n' n)\""], ["proof (state)\nthis:\n  \\<nexists>n. latestAct_cond nid' t n' n\n\ngoal (2 subgoals):\n 1. \\<nexists>n. latestAct_cond nid' t n' n \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "moreover"], ["proof (state)\nthis:\n  \\<nexists>n. latestAct_cond nid' t n' n\n\ngoal (2 subgoals):\n 1. \\<nexists>n. latestAct_cond nid' t n' n \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "from assms(1)"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid", "have \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "using his_act"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<parallel>?nid'\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<nexists>n. latestAct_cond nid' t n' n \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>n. latestAct_cond nid' t n' n\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>n. latestAct_cond nid' t n' n\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "using init_model"], ["proof (prove)\nusing this:\n  \\<nexists>n. latestAct_cond nid' t n' n\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<lbrakk>\\<nexists>n'. latestAct_cond ?nid ?t ?n n';\n   \\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n) = []\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "assume \"(\\<exists>n. latestAct_cond nid' t n' n) \\<and> (\\<forall>x. \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or> \\<not> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or> \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')))))\""], ["proof (state)\nthis:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  (\\<forall>x.\n      \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n      fst x \\<noteq>\n      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n      \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "hence \"\\<exists>n. latestAct_cond nid' t n' n\" and \"\\<forall>x. \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or> \\<not> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or> \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["proof (prove)\nusing this:\n  (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n  (\\<forall>x.\n      \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n      fst x \\<noteq>\n      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n      \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n               (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n              (\\<exists>b.\n                  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))))\n\ngoal (1 subgoal):\n 1. \\<exists>n. latestAct_cond nid' t n' n &&&\n    \\<forall>x.\n       \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n       fst x \\<noteq>\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n       \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n               (\\<exists>b.\n                   bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                   bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                   mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. latestAct_cond nid' t n' n\n  \\<forall>x.\n     \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n     fst x \\<noteq>\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "hence asmp: \"\\<forall>x. \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<longrightarrow> fst x = \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow> \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>snd x\\<^esub>(t (fst x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["proof (prove)\nusing this:\n  \\<exists>n. latestAct_cond nid' t n' n\n  \\<forall>x.\n     \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n     fst x \\<noteq>\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       \\<parallel>snd x\\<parallel>\\<^bsub>t\n     (fst x)\\<^esub> \\<longrightarrow>\n       fst x =\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n       \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n               (\\<exists>b.\n                   bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                   bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                   mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<longrightarrow>\n     fst x =\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. (\\<exists>n. latestAct_cond nid' t n' n) \\<and>\n    (\\<forall>x.\n        \\<not> \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<or>\n        fst x \\<noteq>\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<or>\n        \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                 (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                (\\<exists>b.\n                    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                    mining\n                     (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "assume \"honest nid'\""], ["proof (state)\nthis:\n  honest nid'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "moreover"], ["proof (state)\nthis:\n  honest nid'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "from assms(1)"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid", "have \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "using his_act"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<parallel>?nid'\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "ultimately"], ["proof (chain)\npicking this:\n  honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "obtain nid'' where \"\\<parallel>nid''\\<parallel>\\<^bsub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\" and \"mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @ [b]) \\<or> \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\""], ["proof (prove)\nusing this:\n  honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>nid''.\n        \\<lbrakk>\\<parallel>nid''\\<parallel>\\<^bsub>t\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>;\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n         \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n             [b]) \\<or>\n         \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>\\<exists>n. latestAct_cond nid' t n' n\\<close> bhv_hn_context[of nid' t n']"], ["proof (prove)\nusing this:\n  honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n. latestAct_cond nid' t n' n\n  \\<lbrakk>honest nid'; \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'a. latestAct_cond nid' t n' n'a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'a.\n                       \\<parallel>nid'a\\<parallel>\\<^bsub>t\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub> \\<and>\n                       (mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                            bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                            [b]) \\<or>\n                        \\<not> mining\n                                (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n                        bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                        bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\n\ngoal (1 subgoal):\n 1. (\\<And>nid''.\n        \\<lbrakk>\\<parallel>nid''\\<parallel>\\<^bsub>t\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>;\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n             bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n         \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n             [b]) \\<or>\n         \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n         bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n      bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n      [b]) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "moreover"], ["proof (state)\nthis:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n      bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n      [b]) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "from \\<open>\\<parallel>nid''\\<parallel>\\<^bsub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>", "have \"\\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>nid''\\<^esub>(t (\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>nid''\\<^esub>(t (\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "using asmp"], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  \\<forall>x.\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<longrightarrow>\n     fst x =\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "ultimately"], ["proof (chain)\npicking this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n      bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n      [b]) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have False"], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n      bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n  \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n      [b]) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n  bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n 2. \\<not> ?P \\<Longrightarrow> bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", ".."], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "assume \"\\<not> honest nid'\""], ["proof (state)\nthis:\n  \\<not> honest nid'\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "moreover"], ["proof (state)\nthis:\n  \\<not> honest nid'\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "from assms(1)"], ["proof (chain)\npicking this:\n  (n', nid') \\<in> his t n nid", "have \"\\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "using his_act"], ["proof (prove)\nusing this:\n  (n', nid') \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<parallel>?nid'\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>", "obtain nid'' where \"\\<parallel>nid''\\<parallel>\\<^bsub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\" and \"(mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and> (\\<exists>b. prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n')) (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @ [b])) \\<or> \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and> prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n')) (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))\""], ["proof (prove)\nusing this:\n  \\<not> honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>nid''.\n        \\<lbrakk>\\<parallel>nid''\\<parallel>\\<^bsub>t\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>;\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         (\\<exists>b.\n             prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n               [b])) \\<or>\n         \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>\\<exists>n. latestAct_cond nid' t n' n\\<close> bhv_dn_context[of nid' t n']"], ["proof (prove)\nusing this:\n  \\<not> honest nid'\n  \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n. latestAct_cond nid' t n' n\n  \\<lbrakk>\\<not> honest nid';\n   \\<parallel>nid'\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'a. latestAct_cond nid' t n' n'a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'a.\n                       \\<parallel>nid'a\\<parallel>\\<^bsub>t\n                     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub> \\<and>\n                       (mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n                        (\\<exists>b.\n                            prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                             (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                              [b])) \\<or>\n                        \\<not> mining\n                                (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n                        prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n                         (bc (\\<sigma>\\<^bsub>nid'a\\<^esub>t\n                      \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))\n\ngoal (1 subgoal):\n 1. (\\<And>nid''.\n        \\<lbrakk>\\<parallel>nid''\\<parallel>\\<^bsub>t\n               \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>;\n         mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         (\\<exists>b.\n             prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n           \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n               [b])) \\<or>\n         \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n         prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n          (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n       \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n        [b])) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "moreover"], ["proof (state)\nthis:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n        [b])) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "from \\<open>\\<parallel>nid''\\<parallel>\\<^bsub>t \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>", "have \"\\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))) (bc (\\<sigma>\\<^bsub>nid''\\<^esub>(t (\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t n')) = (bc (\\<sigma>\\<^bsub>nid''\\<^esub>(t (\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>nid'\\<^esub>(t n'))))\""], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "using asmp"], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  \\<forall>x.\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<longrightarrow>\n     fst x =\n     \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n             (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n            (\\<exists>b.\n                bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n                bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n            \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n                [b] \\<and>\n                mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "by auto"], ["proof (state)\nthis:\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "ultimately"], ["proof (chain)\npicking this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n        [b])) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))", "have False"], ["proof (prove)\nusing this:\n  \\<parallel>nid''\\<parallel>\\<^bsub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<^esub>\n  mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  (\\<exists>b.\n      prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n       (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n    \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n        [b])) \\<or>\n  \\<not> mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n') \\<and>\n  prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n   (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n\\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>))\n  \\<not> (prefix (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n'))\n           (bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n        \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>)) \\<or>\n          (\\<exists>b.\n              bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') =\n              bc (\\<sigma>\\<^bsub>nid''\\<^esub>t\n          \\<langle>nid' \\<leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>) @\n              [b] \\<and>\n              mining (\\<sigma>\\<^bsub>nid'\\<^esub>t n')))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []", ".."], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t n') = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma devExt_devop:\n  \"prefix (devExt t n nid n\\<^sub>s (Suc n')) (devExt t n nid n\\<^sub>s n') \\<or> (\\<exists>b. devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n' @ [b]) \\<and> \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and> \\<parallel>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n')\\<^esub> \\<and> n\\<^sub>s + Suc n' \\<le> n \\<and> mining (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "assume \"n\\<^sub>s + Suc n' > n\""], ["proof (state)\nthis:\n  n < n\\<^sub>s + Suc n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"\\<not>(\\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  n < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<nexists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "using his_le"], ["proof (prove)\nusing this:\n  n < n\\<^sub>s + Suc n'\n  ?x \\<in> his ?t ?n ?nid \\<Longrightarrow> fst ?x \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<nexists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "by fastforce"], ["proof (state)\nthis:\n  \\<nexists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\""], ["proof (prove)\nusing this:\n  \\<nexists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<nexists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\n\ngoal (1 subgoal):\n 1. prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  prefix (devExt t n nid n\\<^sub>s (Suc n'))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      devExt t n nid n\\<^sub>s (Suc n') =\n      devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n' \\<le> n \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t n nid\n                          (n\\<^sub>s +\n                           Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> n < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "assume \"\\<not>n\\<^sub>s + Suc n' > n\""], ["proof (state)\nthis:\n  \\<not> n < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<not> n < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"n\\<^sub>s + Suc n' \\<le> n\""], ["proof (prove)\nusing this:\n  \\<not> n < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. n\\<^sub>s + Suc n' \\<le> n", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s + Suc n' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "assume \"Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\""], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\""], ["proof (prove)\nusing this:\n  Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (Suc n') = devExt t n nid n\\<^sub>s n'\n\ngoal (1 subgoal):\n 1. prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  prefix (devExt t n nid n\\<^sub>s (Suc n'))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      devExt t n nid n\\<^sub>s (Suc n') =\n      devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n' \\<le> n \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t n nid\n                          (n\\<^sub>s +\n                           Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "assume \"\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\""], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "hence \"devExt t n nid n\\<^sub>s (Suc n') = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n')))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc n') =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "have \"prefix (bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n')))) (devExt t n nid n\\<^sub>s n') \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n'))) = devExt t n nid n\\<^sub>s n' @ [b] \\<and> \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and> \\<parallel>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n')\\<^esub> \\<and> n\\<^sub>s + Suc n' \\<le> n \\<and> mining (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "assume \"\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\""], ["proof (state)\nthis:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "let ?nid=\"(THE nid'. (n\\<^sub>s + Suc n',nid')\\<in>his t n nid)\""], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "let ?x=\"SOME x. his_prop t n nid (n\\<^sub>s + Suc n') ?nid x\""], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "from \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))", "have \"n\\<^sub>s + Suc n'\\<le>n\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. n\\<^sub>s + Suc n' \\<le> n", "using devExt_nopt_leq"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  ?n' \\<le> ?n\n\ngoal (1 subgoal):\n 1. n\\<^sub>s + Suc n' \\<le> n", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s + Suc n' \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s + Suc n' \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "from \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))", "have \"\\<exists>nid'. (n\\<^sub>s + Suc n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "using his_ex"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "ultimately"], ["proof (chain)\npicking this:\n  n\\<^sub>s + Suc n' \\<le> n\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "have \"\\<exists>x. his_prop t n nid (n\\<^sub>s + Suc n') (THE nid'. ((n\\<^sub>s + Suc n'),nid')\\<in>his t n nid) x\"\n        and \"(hisPred t n nid (n\\<^sub>s + Suc n'), (SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)) = ?x\""], ["proof (prove)\nusing this:\n  n\\<^sub>s + Suc n' \\<le> n\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>na.\n           latestAct_cond\n            (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n            (n\\<^sub>s + Suc n') na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                       Suc n'\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n\\<^sub>s + Suc n', nid')\n                                   \\<in> his t n\n    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')))) &&&\n    (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond\n             (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n             (n\\<^sub>s + Suc n') na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                        Suc n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')))))", "using \\<open>\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>\n        his_determ_ext[of \"n\\<^sub>s + Suc n'\" n t nid]"], ["proof (prove)\nusing this:\n  n\\<^sub>s + Suc n' \\<le> n\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<lbrakk>n\\<^sub>s + Suc n' \\<le> n;\n   \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>!nid'.\n                        (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) \\<and>\n                    ((\\<exists>n''<n\\<^sub>s + Suc n'.\n                         \\<exists>nid'.\n                            (n'', nid') \\<in> his t n nid) \\<longrightarrow>\n                     (\\<exists>x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n nid)\n                              t (n\\<^sub>s + Suc n') na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n\\<^sub>s + Suc n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n\\<^sub>s + Suc n', nid')\n               \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))) \\<and>\n                     (hisPred t n nid (n\\<^sub>s + Suc n'),\n                      SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n nid) =\n                     (SOME x.\n                         (\\<exists>na.\n                             latestAct_cond\n                              (THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n nid)\n                              t (n\\<^sub>s + Suc n') na) \\<and>\n                         \\<parallel>snd x\\<parallel>\\<^bsub>t\n                       (fst x)\\<^esub> \\<and>\n                         fst x =\n                         \\<langle>THE nid'.\n                                     (n\\<^sub>s + Suc n', nid')\n                                     \\<in> his t n\n      nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                         (prefix\n                           (bc (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                           (bc (\\<sigma>\\<^bsub>snd\n           x\\<^esub>t (fst x))) \\<or>\n                          (\\<exists>b.\n                              bc (\\<sigma>\\<^bsub>THE nid'.\n               (n\\<^sub>s + Suc n', nid')\n               \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                              bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                              [b] \\<and>\n                              mining\n                               (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>na.\n           latestAct_cond\n            (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n            (n\\<^sub>s + Suc n') na) \\<and>\n       \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n       fst x =\n       \\<langle>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n\n                          nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                       Suc n'\\<^esub> \\<and>\n       (prefix\n         (bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')))\n         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n        (\\<exists>b.\n            bc (\\<sigma>\\<^bsub>THE nid'.\n                                   (n\\<^sub>s + Suc n', nid')\n                                   \\<in> his t n\n    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n            mining\n             (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')))) &&&\n    (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME x.\n        (\\<exists>na.\n            latestAct_cond\n             (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n             (n\\<^sub>s + Suc n') na) \\<and>\n        \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n        fst x =\n        \\<langle>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                        Suc n'\\<^esub> \\<and>\n        (prefix\n          (bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')))\n          (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n         (\\<exists>b.\n             bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n             bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n             mining\n              (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')))))", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond\n           (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n           (n\\<^sub>s + Suc n') na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                      Suc n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond\n           (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n           (n\\<^sub>s + Suc n') na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                      Suc n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "have \"bc (\\<sigma>\\<^bsub>(SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\\<^esub>(t (hisPred t n nid (n\\<^sub>s + Suc n')))) = devExt t n nid n\\<^sub>s n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "assume \"Option.is_none (devBC t n nid (n\\<^sub>s+n'))\""], ["proof (state)\nthis:\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "have \"devExt t n nid n\\<^sub>s n' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (GREATEST n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n'')))\\<^esub>(t (GREATEST n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n''))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "assume \"n'=0\""], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "moreover"], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "have \"\\<exists>n''<n\\<^sub>s+n'. \\<not>Option.is_none (devBC t n nid n'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "from \\<open>\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid", "obtain n''\n              where \"n''<Suc n\\<^sub>s + n'\" and \"\\<exists>nid'. (n'',nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>n''.\n        \\<lbrakk>n'' < Suc n\\<^sub>s + n';\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "hence \"\\<not> Option.is_none (devBC t n nid n'')\""], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "using devBC_def"], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "moreover"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "from \\<open>\\<not> Option.is_none (devBC t n nid n'')\\<close>\n              \\<open>Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))", "have \"\\<not> n''=n\\<^sub>s+n'\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n\\<^sub>s + n'", "by auto"], ["proof (state)\nthis:\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "with \\<open>n''<Suc n\\<^sub>s+n'\\<close>"], ["proof (chain)\npicking this:\n  n'' < Suc n\\<^sub>s + n'\n  n'' \\<noteq> n\\<^sub>s + n'", "have \"n''<n\\<^sub>s+n'\""], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. n'' < n\\<^sub>s + n'", "by simp"], ["proof (state)\nthis:\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "by auto"], ["proof (state)\nthis:\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "ultimately"], ["proof (chain)\npicking this:\n  n' = 0\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = 0\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "using \\<open>Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (prove)\nusing this:\n  n' = 0\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "assume \"\\<not> n'=0\""], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "moreover"], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "have \"\\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "from \\<open>\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid", "obtain n''\n              where \"n''<Suc n\\<^sub>s + n'\" and \"\\<exists>nid'. (n'',nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>n''.\n        \\<lbrakk>n'' < Suc n\\<^sub>s + n';\n         \\<exists>nid'. (n'', nid') \\<in> his t n nid\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "hence \"\\<not> Option.is_none (devBC t n nid n'')\""], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "using devBC_def"], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "moreover"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "from \\<open>\\<not> Option.is_none (devBC t n nid n'')\\<close> \\<open>Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))", "have \"\\<not> n''=n\\<^sub>s+n'\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n\\<^sub>s + n'", "by auto"], ["proof (state)\nthis:\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "with \\<open>n''<Suc n\\<^sub>s+n'\\<close>"], ["proof (chain)\npicking this:\n  n'' < Suc n\\<^sub>s + n'\n  n'' \\<noteq> n\\<^sub>s + n'", "have \"n''<n\\<^sub>s+n'\""], ["proof (prove)\nusing this:\n  n'' < Suc n\\<^sub>s + n'\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. n'' < n\\<^sub>s + n'", "by simp"], ["proof (state)\nthis:\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "by auto"], ["proof (state)\nthis:\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0 \\<Longrightarrow>\n    devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "with \\<open>\\<not> (n'=0)\\<close> \\<open>Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  n' \\<noteq> 0\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')", "show ?thesis"], ["proof (prove)\nusing this:\n  n' \\<noteq> 0\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "using devExt_greatest[of n\\<^sub>s n' t n nid]"], ["proof (prove)\nusing this:\n  n' \\<noteq> 0\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  \\<exists>n''<n\\<^sub>s + n'. \\<not> Option.is_none (devBC t n nid n'')\n  \\<lbrakk>\\<exists>n'''<n\\<^sub>s + n'.\n              \\<not> Option.is_none (devBC t n nid n''');\n   Option.is_none (devBC t n nid (n\\<^sub>s + n')); n' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC t n nid\n     (GREATEST n'''.\n         n''' < n\\<^sub>s + n' \\<and>\n         \\<not> Option.is_none\n                 (devBC t n nid\n                   n''')))\\<^esub>t (GREATEST n'''.\n  n''' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n''')))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (GREATEST n''.\n                                  n'' < n\\<^sub>s + n' \\<and>\n                                  \\<not> Option.is_none\n    (devBC t n nid\n      n'')))\\<^esub>t (GREATEST n''.\n                          n'' < n\\<^sub>s + n' \\<and>\n                          \\<not> Option.is_none (devBC t n nid n'')))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "have \"(GREATEST n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n''))=hisPred t n nid (n\\<^sub>s + Suc n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    hisPred t n nid (n\\<^sub>s + Suc n')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    hisPred t n nid (n\\<^sub>s + Suc n')", "have \"(\\<lambda>n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n'')) = (\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    (\\<lambda>n''.\n        \\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n''.\n       (n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n       (\\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n''.\n       (n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n       (\\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "show \"(n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')) = (\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n'' < n\\<^sub>s + n' \\<and>\n     \\<not> Option.is_none (devBC t n nid n'')) =\n    (\\<exists>nid'.\n        (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' < n\\<^sub>s + n' \\<and>\n    \\<not> Option.is_none (devBC t n nid n'') \\<Longrightarrow>\n    \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'\n 2. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "assume \"n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\""], ["proof (state)\nthis:\n  n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (2 subgoals):\n 1. n'' < n\\<^sub>s + n' \\<and>\n    \\<not> Option.is_none (devBC t n nid n'') \\<Longrightarrow>\n    \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'\n 2. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "thus \"(\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\""], ["proof (prove)\nusing this:\n  n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'", "using his_ex"], ["proof (prove)\nusing this:\n  n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "assume \"(\\<exists>nid'. (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\""], ["proof (state)\nthis:\n  \\<exists>nid'.\n     (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "hence \"\\<exists>nid'. (n'', nid') \\<in> his t n nid\" and \"n'' < n\\<^sub>s + Suc n'\""], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n'', nid') \\<in> his t n nid &&&\n    n'' < n\\<^sub>s + Suc n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n'' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "hence \"\\<not> Option.is_none (devBC t n nid n'')\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n'' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  n'' < n\\<^sub>s + Suc n'\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid n'')", "by simp"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "moreover"], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid n'')\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "from \\<open>\\<not> Option.is_none (devBC t n nid n'')\\<close> \\<open>Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))", "have \"n''\\<noteq>n\\<^sub>s+n'\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n\\<^sub>s + n'", "by auto"], ["proof (state)\nthis:\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "with \\<open>n'' < n\\<^sub>s + Suc n'\\<close>"], ["proof (chain)\npicking this:\n  n'' < n\\<^sub>s + Suc n'\n  n'' \\<noteq> n\\<^sub>s + n'", "have \"n'' < n\\<^sub>s + n'\""], ["proof (prove)\nusing this:\n  n'' < n\\<^sub>s + Suc n'\n  n'' \\<noteq> n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. n'' < n\\<^sub>s + n'", "by simp"], ["proof (state)\nthis:\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n'', nid') \\<in> his t n nid \\<and>\n       n'' < n\\<^sub>s + Suc n' \\<Longrightarrow>\n    n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'", "show \"n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid n'')\n  n'' < n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')", "by simp"], ["proof (state)\nthis:\n  n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (n'' < n\\<^sub>s + n' \\<and> \\<not> Option.is_none (devBC t n nid n'')) =\n  (\\<exists>nid'.\n      (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (\\<lambda>n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    hisPred t n nid (n\\<^sub>s + Suc n')", "hence \"(GREATEST n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n''))= (GREATEST n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\""], ["proof (prove)\nusing this:\n  (\\<lambda>n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (\\<lambda>n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    (GREATEST n''.\n        \\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "using arg_cong[of \"\\<lambda>n''. n''<n\\<^sub>s+n' \\<and> \\<not>Option.is_none (devBC t n nid n'')\" \"(\\<lambda>n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (\\<lambda>n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n  (\\<lambda>n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (\\<lambda>n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and>\n         n'' < n\\<^sub>s + Suc n') \\<Longrightarrow>\n  ?f (\\<lambda>n''.\n         n'' < n\\<^sub>s + n' \\<and>\n         \\<not> Option.is_none (devBC t n nid n'')) =\n  ?f (\\<lambda>n''.\n         \\<exists>nid'.\n            (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    (GREATEST n''.\n        \\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "by simp"], ["proof (state)\nthis:\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    hisPred t n nid (n\\<^sub>s + Suc n')", "with hisPred_def"], ["proof (chain)\npicking this:\n  hisPred ?t ?n ?nid ?n' \\<equiv>\n  GREATEST n''.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<and> n'' < ?n'\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')", "show ?thesis"], ["proof (prove)\nusing this:\n  hisPred ?t ?n ?nid ?n' \\<equiv>\n  GREATEST n''.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<and> n'' < ?n'\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n')\n\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        n'' < n\\<^sub>s + n' \\<and>\n        \\<not> Option.is_none (devBC t n nid n'')) =\n    hisPred t n nid (n\\<^sub>s + Suc n')", "by simp"], ["proof (state)\nthis:\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "moreover"], ["proof (state)\nthis:\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "have \"the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n')))=(SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "from \\<open>\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"\\<exists>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "using hisPrev_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<exists>nid'. (hisPred ?t ?n ?nid ?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "hence \"the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) = (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "moreover"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "from \\<open>\\<exists>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "have \"(hisPred t n nid (n\\<^sub>s + Suc n'), SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n    \\<in> his t n nid", "using someI_ex[of \"\\<lambda>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n  \\<exists>x.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), x)\n     \\<in> his t n nid \\<Longrightarrow>\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME x. (hisPred t n nid (n\\<^sub>s + Suc n'), x) \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "hence \"(THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid) = (SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "using his_determ_the"], ["proof (prove)\nusing this:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n\ngoal (1 subgoal):\n 1. (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "ultimately"], ["proof (chain)\npicking this:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'\n 2. \\<not> ?P \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (GREATEST n''.\n                                n'' < n\\<^sub>s + n' \\<and>\n                                \\<not> Option.is_none\n  (devBC t n nid\n    n'')))\\<^esub>t (GREATEST n''.\n                        n'' < n\\<^sub>s + n' \\<and>\n                        \\<not> Option.is_none (devBC t n nid n'')))\n  (GREATEST n''.\n      n'' < n\\<^sub>s + n' \\<and>\n      \\<not> Option.is_none (devBC t n nid n'')) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "assume \"\\<not> Option.is_none (devBC t n nid (n\\<^sub>s+n'))\""], ["proof (state)\nthis:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "hence \"devExt t n nid n\\<^sub>s n' = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s+n'))\\<^esub>(t (n\\<^sub>s+n')))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n 2. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "assume \"n'=0\""], ["proof (state)\nthis:\n  n' = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n 2. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "with \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  n' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  n' = 0\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "assume \"\\<not> n'=0\""], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "hence \"\\<exists>nat. n' = Suc nat\""], ["proof (prove)\nusing this:\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>nat. n' = Suc nat", "by presburger"], ["proof (state)\nthis:\n  \\<exists>nat. n' = Suc nat\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "then"], ["proof (chain)\npicking this:\n  \\<exists>nat. n' = Suc nat", "obtain nat where \"n' = Suc nat\""], ["proof (prove)\nusing this:\n  \\<exists>nat. n' = Suc nat\n\ngoal (1 subgoal):\n 1. (\\<And>nat. n' = Suc nat \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' = Suc nat\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "with \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  n' = Suc nat", "have \"devExt t n nid n\\<^sub>s (Suc nat) = bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc nat))\\<^esub>(t (n\\<^sub>s + Suc nat)))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  n' = Suc nat\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s (Suc nat) =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc nat))\\<^esub>t (n\\<^sub>s + Suc nat))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc nat))\\<^esub>t (n\\<^sub>s + Suc nat))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'));\n     n' \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> devExt t n nid n\\<^sub>s n' =\n                      bc (\\<sigma>\\<^bsub>the\n     (devBC t n nid (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "with \\<open>n' = Suc nat\\<close>"], ["proof (chain)\npicking this:\n  n' = Suc nat\n  devExt t n nid n\\<^sub>s (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc nat))\\<^esub>t (n\\<^sub>s + Suc nat))", "show ?thesis"], ["proof (prove)\nusing this:\n  n' = Suc nat\n  devExt t n nid n\\<^sub>s (Suc nat) =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc nat))\\<^esub>t (n\\<^sub>s + Suc nat))\n\ngoal (1 subgoal):\n 1. devExt t n nid n\\<^sub>s n' =\n    bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))", "by simp"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "moreover"], ["proof (state)\nthis:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "have \"hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s+n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'", "have \"(GREATEST n''. \\<exists>nid'. (n'',nid')\\<in> his t n nid \\<and> n'' < (n\\<^sub>s + Suc n')) = n\\<^sub>s+n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST n''.\n        \\<exists>nid'.\n           (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n') =\n    n\\<^sub>s + n'", "proof (rule Greatest_equality)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>nid'.\n       (n\\<^sub>s + n', nid') \\<in> his t n nid \\<and>\n       n\\<^sub>s + n' < n\\<^sub>s + Suc n'\n 2. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "from \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s+n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))", "have \"\\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid", "using his_ex"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n'))\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid\n\ngoal (2 subgoals):\n 1. \\<exists>nid'.\n       (n\\<^sub>s + n', nid') \\<in> his t n nid \\<and>\n       n\\<^sub>s + n' < n\\<^sub>s + Suc n'\n 2. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "thus \"\\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid \\<and> n\\<^sub>s + n' < n\\<^sub>s + Suc n'\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (n\\<^sub>s + n', nid') \\<in> his t n nid \\<and>\n       n\\<^sub>s + n' < n\\<^sub>s + Suc n'", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     (n\\<^sub>s + n', nid') \\<in> his t n nid \\<and>\n     n\\<^sub>s + n' < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "assume \"\\<exists>nid'. (y, nid') \\<in> his t n nid \\<and> y < n\\<^sub>s + Suc n'\""], ["proof (state)\nthis:\n  \\<exists>nid'. (y, nid') \\<in> his t n nid \\<and> y < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>nid'.\n          (y, nid') \\<in> his t n nid \\<and>\n          y < n\\<^sub>s + Suc n' \\<Longrightarrow>\n       y \\<le> n\\<^sub>s + n'", "thus \"y \\<le> n\\<^sub>s + n'\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (y, nid') \\<in> his t n nid \\<and> y < n\\<^sub>s + Suc n'\n\ngoal (1 subgoal):\n 1. y \\<le> n\\<^sub>s + n'", "by simp"], ["proof (state)\nthis:\n  y \\<le> n\\<^sub>s + n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n') =\n  n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n') =\n  n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'", "using hisPred_def"], ["proof (prove)\nusing this:\n  (GREATEST n''.\n      \\<exists>nid'.\n         (n'', nid') \\<in> his t n nid \\<and> n'' < n\\<^sub>s + Suc n') =\n  n\\<^sub>s + n'\n  hisPred ?t ?n ?nid ?n' \\<equiv>\n  GREATEST n''.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<and> n'' < ?n'\n\ngoal (1 subgoal):\n 1. hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'", "by simp"], ["proof (state)\nthis:\n  hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "moreover"], ["proof (state)\nthis:\n  hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "have \"the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n')))=(SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "from \\<open>\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid", "have \"\\<exists>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "using hisPrev_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n''<n\\<^sub>s + Suc n'.\n     \\<exists>nid'. (n'', nid') \\<in> his t n nid\n  \\<exists>n''<?n'.\n     \\<exists>nid'. (n'', nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<exists>nid'. (hisPred ?t ?n ?nid ?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'.\n       (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "hence \"the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) = (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "moreover"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "from \\<open>\\<exists>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid", "have \"(hisPred t n nid (n\\<^sub>s + Suc n'), SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) \\<in> his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n    \\<in> his t n nid", "using someI_ex[of \"\\<lambda>nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid\"]"], ["proof (prove)\nusing this:\n  \\<exists>nid'.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid\n  \\<exists>x.\n     (hisPred t n nid (n\\<^sub>s + Suc n'), x)\n     \\<in> his t n nid \\<Longrightarrow>\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME x. (hisPred t n nid (n\\<^sub>s + Suc n'), x) \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (hisPred t n nid (n\\<^sub>s + Suc n'),\n     SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "hence \"(THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\\<in>his t n nid) = (SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "using his_determ_the"], ["proof (prove)\nusing this:\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  \\<in> his t n nid\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n\ngoal (1 subgoal):\n 1. (THE nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "ultimately"], ["proof (chain)\npicking this:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (THE nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n  (THE nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    (SOME nid'.\n        (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + n')) \\<Longrightarrow>\n    bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n  hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s n' =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s + n'))\\<^esub>t (n\\<^sub>s + n'))\n  hisPred t n nid (n\\<^sub>s + Suc n') = n\\<^sub>s + n'\n  the (devBC t n nid (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>SOME nid'.\n                           (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t\n        (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n    devExt t n nid n\\<^sub>s n'", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond\n           (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n           (n\\<^sub>s + Suc n') na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                      Suc n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))))\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'", "have \"bc (\\<sigma>\\<^bsub>snd ?x\\<^esub>(t (fst ?x))) = devExt t n nid n\\<^sub>s n'\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond\n           (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n           (n\\<^sub>s + Suc n') na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                      Suc n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))))\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s +\n  Suc n')))))\\<^esub>t (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n    devExt t n nid n\\<^sub>s n'", "using fst_conv[of \"hisPred t n nid (n\\<^sub>s + Suc n')\"\n        \"(SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\"]\n        snd_conv[of \"hisPred t n nid (n\\<^sub>s + Suc n')\"\n        \"(SOME nid'. (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\"]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  (hisPred t n nid (n\\<^sub>s + Suc n'),\n   SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME x.\n      (\\<exists>na.\n          latestAct_cond\n           (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n           (n\\<^sub>s + Suc n') na) \\<and>\n      \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n      fst x =\n      \\<langle>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                      Suc n'\\<^esub> \\<and>\n      (prefix\n        (bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n        (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n       (\\<exists>b.\n           bc (\\<sigma>\\<^bsub>THE nid'.\n                                  (n\\<^sub>s + Suc n', nid')\n                                  \\<in> his t n\n   nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n           bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n           mining\n            (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')))))\n  bc (\\<sigma>\\<^bsub>SOME nid'.\n                         (hisPred t n nid (n\\<^sub>s + Suc n'), nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (hisPred t n nid (n\\<^sub>s + Suc n'))) =\n  devExt t n nid n\\<^sub>s n'\n  fst (hisPred t n nid (n\\<^sub>s + Suc n'),\n       SOME nid'.\n          (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  hisPred t n nid (n\\<^sub>s + Suc n')\n  snd (hisPred t n nid (n\\<^sub>s + Suc n'),\n       SOME nid'.\n          (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid) =\n  (SOME nid'.\n      (hisPred t n nid (n\\<^sub>s + Suc n'), nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s +\n  Suc n')))))\\<^esub>t (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n    devExt t n nid n\\<^sub>s n'", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>snd (SOME x.\n                              (\\<exists>na.\n                                  latestAct_cond\n                                   (THE nid'.\n (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                   t (n\\<^sub>s + Suc n') na) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (n\\<^sub>s + Suc n', nid')\n    \\<in> his t n\n           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n        Suc n'\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid\\<^esub>t (n\\<^sub>s +\n Suc n')))))\\<^esub>t (fst (SOME x.\n                               (\\<exists>na.\n                                   latestAct_cond\n                                    (THE nid'.\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                    t (n\\<^sub>s + Suc n') na) \\<and>\n                               \\<parallel>snd\n     x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                               fst x =\n                               \\<langle>THE nid'.\n     (n\\<^sub>s + Suc n', nid')\n     \\<in> his t n\n            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n         Suc n'\\<^esub> \\<and>\n                               (prefix\n                                 (bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                 (bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x))) \\<or>\n                                (\\<exists>b.\n                                    bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                    bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x)) @\n                                    [b] \\<and>\n                                    mining\n                                     (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>snd (SOME x.\n                              (\\<exists>na.\n                                  latestAct_cond\n                                   (THE nid'.\n (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                   t (n\\<^sub>s + Suc n') na) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (n\\<^sub>s + Suc n', nid')\n    \\<in> his t n\n           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n        Suc n'\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid\\<^esub>t (n\\<^sub>s +\n Suc n')))))\\<^esub>t (fst (SOME x.\n                               (\\<exists>na.\n                                   latestAct_cond\n                                    (THE nid'.\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                    t (n\\<^sub>s + Suc n') na) \\<and>\n                               \\<parallel>snd\n     x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                               fst x =\n                               \\<langle>THE nid'.\n     (n\\<^sub>s + Suc n', nid')\n     \\<in> his t n\n            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n         Suc n'\\<^esub> \\<and>\n                               (prefix\n                                 (bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                 (bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x))) \\<or>\n                                (\\<exists>b.\n                                    bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                    bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x)) @\n                                    [b] \\<and>\n                                    mining\n                                     (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n  devExt t n nid n\\<^sub>s n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "from \\<open>\\<exists>x. his_prop t n nid (n\\<^sub>s + Suc n') ?nid x\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))", "have \"his_prop t n nid (n\\<^sub>s + Suc n') ?nid ?x\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n\ngoal (1 subgoal):\n 1. (\\<exists>na.\n        latestAct_cond\n         (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n         (n\\<^sub>s + Suc n') na) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>na.\n                           latestAct_cond\n                            (THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n nid)\n                            t (n\\<^sub>s + Suc n') na) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>THE nid'.\n                                   (n\\<^sub>s + Suc n', nid')\n                                   \\<in> his t n\n    nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                       (prefix\n                         (bc (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid\\<^esub>t (n\\<^sub>s +\n                                Suc n')))))\\<parallel>\\<^bsub>t\n                         (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s + Suc n'))))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>na.\n                latestAct_cond\n                 (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n                 (n\\<^sub>s + Suc n') na) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n\n                               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                            Suc n'\\<^esub> \\<and>\n            (prefix\n              (bc (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid') \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>THE nid'.\n  (n\\<^sub>s + Suc n', nid')\n  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining\n                  (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid')\n\\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))) =\n    \\<langle>THE nid'.\n                (n\\<^sub>s + Suc n', nid')\n                \\<in> his t n\n                       nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                    Suc n'\\<^esub> \\<and>\n    (prefix\n      (bc (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n')))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t\n    (n\\<^sub>s +\n     Suc n')))))\\<^esub>t (fst (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>na.\n   latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n    (n\\<^sub>s + Suc n') na) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n               Suc n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (n\\<^sub>s +\n       Suc n')))))\\<^esub>t (fst (SOME x.\n                                     (\\<exists>na.\n   latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n    (n\\<^sub>s + Suc n') na) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n               Suc n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n\n                                nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n         [b] \\<and>\n         mining\n          (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n'))))", "using someI_ex[of \"\\<lambda>x. his_prop t n nid (n\\<^sub>s + Suc n') ?nid x\"]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n'))))\n  \\<exists>x.\n     (\\<exists>na.\n         latestAct_cond\n          (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n          (n\\<^sub>s + Suc n') na) \\<and>\n     \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n     fst x =\n     \\<langle>THE nid'.\n                 (n\\<^sub>s + Suc n', nid')\n                 \\<in> his t n\n                        nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                     Suc n'\\<^esub> \\<and>\n     (prefix\n       (bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))\n       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n      (\\<exists>b.\n          bc (\\<sigma>\\<^bsub>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n          mining\n           (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')))) \\<Longrightarrow>\n  (\\<exists>na.\n      latestAct_cond\n       (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n       (n\\<^sub>s + Suc n') na) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>na.\n                         latestAct_cond\n                          (THE nid'.\n                              (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                          t (n\\<^sub>s + Suc n') na) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                     (prefix\n                       (bc (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid\\<^esub>t (n\\<^sub>s +\n                              Suc n')))))\\<parallel>\\<^bsub>t\n                       (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s + Suc n'))))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>na.\n              latestAct_cond\n               (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n               (n\\<^sub>s + Suc n') na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                          Suc n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n')))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid')\n\\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n'))))) =\n  \\<langle>THE nid'.\n              (n\\<^sub>s + Suc n', nid')\n              \\<in> his t n\n                     nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                  Suc n'\\<^esub> \\<and>\n  (prefix\n    (bc (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n')))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t\n  (n\\<^sub>s +\n   Suc n')))))\\<^esub>t (fst (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t\n    (n\\<^sub>s +\n     Suc n')))))\\<^esub>t (fst (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n       [b] \\<and>\n       mining\n        (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n'))))\n\ngoal (1 subgoal):\n 1. (\\<exists>na.\n        latestAct_cond\n         (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n         (n\\<^sub>s + Suc n') na) \\<and>\n    \\<parallel>snd (SOME x.\n                       (\\<exists>na.\n                           latestAct_cond\n                            (THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n nid)\n                            t (n\\<^sub>s + Suc n') na) \\<and>\n                       \\<parallel>snd x\\<parallel>\\<^bsub>t\n                     (fst x)\\<^esub> \\<and>\n                       fst x =\n                       \\<langle>THE nid'.\n                                   (n\\<^sub>s + Suc n', nid')\n                                   \\<in> his t n\n    nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                       (prefix\n                         (bc (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                         (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                        (\\<exists>b.\n                            bc (\\<sigma>\\<^bsub>THE nid'.\n             (n\\<^sub>s + Suc n', nid')\n             \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                            bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                            [b] \\<and>\n                            mining\n                             (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid\\<^esub>t (n\\<^sub>s +\n                                Suc n')))))\\<parallel>\\<^bsub>t\n                         (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s + Suc n'))))))\\<^esub> \\<and>\n    fst (SOME x.\n            (\\<exists>na.\n                latestAct_cond\n                 (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n                 (n\\<^sub>s + Suc n') na) \\<and>\n            \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n            fst x =\n            \\<langle>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n\n                               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                            Suc n'\\<^esub> \\<and>\n            (prefix\n              (bc (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid') \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n              (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n             (\\<exists>b.\n                 bc (\\<sigma>\\<^bsub>THE nid'.\n  (n\\<^sub>s + Suc n', nid')\n  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                 bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n                 mining\n                  (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid')\n\\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))) =\n    \\<langle>THE nid'.\n                (n\\<^sub>s + Suc n', nid')\n                \\<in> his t n\n                       nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                    Suc n'\\<^esub> \\<and>\n    (prefix\n      (bc (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n')))\n      (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t\n    (n\\<^sub>s +\n     Suc n')))))\\<^esub>t (fst (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n     (\\<exists>b.\n         bc (\\<sigma>\\<^bsub>THE nid'.\n                                (n\\<^sub>s + Suc n', nid')\n                                \\<in> his t n\n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n         bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                     (\\<exists>na.\n   latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n    (n\\<^sub>s + Suc n') na) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n               Suc n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n\n                                nid\\<^esub>t\n      (n\\<^sub>s +\n       Suc n')))))\\<^esub>t (fst (SOME x.\n                                     (\\<exists>na.\n   latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n    (n\\<^sub>s + Suc n') na) \\<and>\n                                     \\<parallel>snd\n           x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                     fst x =\n                                     \\<langle>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n\n                  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n               Suc n'\\<^esub> \\<and>\n                                     (prefix\n (bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n(\\<exists>b.\n    bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n\n                                  nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n    bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n    mining\n     (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n\n                                nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n         [b] \\<and>\n         mining\n          (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n'))))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>na.\n      latestAct_cond\n       (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n       (n\\<^sub>s + Suc n') na) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>na.\n                         latestAct_cond\n                          (THE nid'.\n                              (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                          t (n\\<^sub>s + Suc n') na) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                     (prefix\n                       (bc (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid\\<^esub>t (n\\<^sub>s +\n                              Suc n')))))\\<parallel>\\<^bsub>t\n                       (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s + Suc n'))))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>na.\n              latestAct_cond\n               (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n               (n\\<^sub>s + Suc n') na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                          Suc n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n')))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid')\n\\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n'))))) =\n  \\<langle>THE nid'.\n              (n\\<^sub>s + Suc n', nid')\n              \\<in> his t n\n                     nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                  Suc n'\\<^esub> \\<and>\n  (prefix\n    (bc (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n')))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t\n  (n\\<^sub>s +\n   Suc n')))))\\<^esub>t (fst (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t\n    (n\\<^sub>s +\n     Suc n')))))\\<^esub>t (fst (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n       [b] \\<and>\n       mining\n        (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n'))))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "hence \"prefix (bc (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n')))) (bc (\\<sigma>\\<^bsub>snd ?x\\<^esub>(t (fst ?x)))) \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n'))) = (bc (\\<sigma>\\<^bsub>snd ?x\\<^esub>(t (fst ?x)))) @ [b] \\<and> mining (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n'))))\""], ["proof (prove)\nusing this:\n  (\\<exists>na.\n      latestAct_cond\n       (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n       (n\\<^sub>s + Suc n') na) \\<and>\n  \\<parallel>snd (SOME x.\n                     (\\<exists>na.\n                         latestAct_cond\n                          (THE nid'.\n                              (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                          t (n\\<^sub>s + Suc n') na) \\<and>\n                     \\<parallel>snd x\\<parallel>\\<^bsub>t\n                   (fst x)\\<^esub> \\<and>\n                     fst x =\n                     \\<langle>THE nid'.\n                                 (n\\<^sub>s + Suc n', nid')\n                                 \\<in> his t n\n  nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s + Suc n'\\<^esub> \\<and>\n                     (prefix\n                       (bc (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                       (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                      (\\<exists>b.\n                          bc (\\<sigma>\\<^bsub>THE nid'.\n           (n\\<^sub>s + Suc n', nid')\n           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                          bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                          [b] \\<and>\n                          mining\n                           (\\<sigma>\\<^bsub>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid\\<^esub>t (n\\<^sub>s +\n                              Suc n')))))\\<parallel>\\<^bsub>t\n                       (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s + Suc n'))))))\\<^esub> \\<and>\n  fst (SOME x.\n          (\\<exists>na.\n              latestAct_cond\n               (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n               (n\\<^sub>s + Suc n') na) \\<and>\n          \\<parallel>snd x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n          fst x =\n          \\<langle>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                          Suc n'\\<^esub> \\<and>\n          (prefix\n            (bc (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n')))\n            (bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n           (\\<exists>b.\n               bc (\\<sigma>\\<^bsub>THE nid'.\n(n\\<^sub>s + Suc n', nid')\n\\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n               bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n               mining\n                (\\<sigma>\\<^bsub>THE nid'.\n                                    (n\\<^sub>s + Suc n', nid')\n                                    \\<in> his t n\n     nid\\<^esub>t (n\\<^sub>s + Suc n'))))) =\n  \\<langle>THE nid'.\n              (n\\<^sub>s + Suc n', nid')\n              \\<in> his t n\n                     nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n                  Suc n'\\<^esub> \\<and>\n  (prefix\n    (bc (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n')))\n    (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t\n  (n\\<^sub>s +\n   Suc n')))))\\<^esub>t (fst (SOME x.\n                                 (\\<exists>na.\n                                     latestAct_cond\n(THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n(n\\<^sub>s + Suc n') na) \\<and>\n                                 \\<parallel>snd\n       x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                 fst x =\n                                 \\<langle>THE nid'.\n       (n\\<^sub>s + Suc n', nid')\n       \\<in> his t n\n              nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n           Suc n'\\<^esub> \\<and>\n                                 (prefix\n                                   (bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                   (bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x))) \\<or>\n                                  (\\<exists>b.\nbc (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\nbc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\nmining\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n\n                            nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n   (\\<exists>b.\n       bc (\\<sigma>\\<^bsub>THE nid'.\n                              (n\\<^sub>s + Suc n', nid')\n                              \\<in> his t n\n                                     nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n       bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t\n    (n\\<^sub>s +\n     Suc n')))))\\<^esub>t (fst (SOME x.\n                                   (\\<exists>na.\n latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n  (n\\<^sub>s + Suc n') na) \\<and>\n                                   \\<parallel>snd\n         x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                   fst x =\n                                   \\<langle>THE nid'.\n         (n\\<^sub>s + Suc n', nid')\n         \\<in> his t n\n                nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n             Suc n'\\<^esub> \\<and>\n                                   (prefix\n                                     (bc\n (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                     (bc\n (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                    (\\<exists>b.\n  bc (\\<sigma>\\<^bsub>THE nid'.\n                         (n\\<^sub>s + Suc n', nid')\n                         \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n  bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n  mining\n   (\\<sigma>\\<^bsub>THE nid'.\n                       (n\\<^sub>s + Suc n', nid')\n                       \\<in> his t n\n                              nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n       [b] \\<and>\n       mining\n        (\\<sigma>\\<^bsub>THE nid'.\n                            (n\\<^sub>s + Suc n', nid')\n                            \\<in> his t n\n                                   nid\\<^esub>t (n\\<^sub>s + Suc n'))))\n\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')))\n     (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s +\n    Suc n')))))\\<^esub>t (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')) =\n        bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                    (\\<exists>na.\n  latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n   (n\\<^sub>s + Suc n') na) \\<and>\n                                    \\<parallel>snd\n          x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                    fst x =\n                                    \\<langle>THE nid'.\n          (n\\<^sub>s + Suc n', nid')\n          \\<in> his t n\n                 nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n              Suc n'\\<^esub> \\<and>\n                                    (prefix\n(bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n(bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                     (\\<exists>b.\n   bc (\\<sigma>\\<^bsub>THE nid'.\n                          (n\\<^sub>s + Suc n', nid')\n                          \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n   bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n   mining\n    (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n\n                               nid\\<^esub>t\n     (n\\<^sub>s +\n      Suc n')))))\\<^esub>t (fst (SOME x.\n                                    (\\<exists>na.\n  latestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n   (n\\<^sub>s + Suc n') na) \\<and>\n                                    \\<parallel>snd\n          x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                    fst x =\n                                    \\<langle>THE nid'.\n          (n\\<^sub>s + Suc n', nid')\n          \\<in> his t n\n                 nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n              Suc n'\\<^esub> \\<and>\n                                    (prefix\n(bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n(bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                     (\\<exists>b.\n   bc (\\<sigma>\\<^bsub>THE nid'.\n                          (n\\<^sub>s + Suc n', nid')\n                          \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n   bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n   mining\n    (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n\n                               nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n        [b] \\<and>\n        mining\n         (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')))", "by blast"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s +\n  Suc n')))))\\<^esub>t (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s +\n    Suc n')))))\\<^esub>t (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n      [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "ultimately"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>snd (SOME x.\n                              (\\<exists>na.\n                                  latestAct_cond\n                                   (THE nid'.\n (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                   t (n\\<^sub>s + Suc n') na) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (n\\<^sub>s + Suc n', nid')\n    \\<in> his t n\n           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n        Suc n'\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid\\<^esub>t (n\\<^sub>s +\n Suc n')))))\\<^esub>t (fst (SOME x.\n                               (\\<exists>na.\n                                   latestAct_cond\n                                    (THE nid'.\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                    t (n\\<^sub>s + Suc n') na) \\<and>\n                               \\<parallel>snd\n     x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                               fst x =\n                               \\<langle>THE nid'.\n     (n\\<^sub>s + Suc n', nid')\n     \\<in> his t n\n            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n         Suc n'\\<^esub> \\<and>\n                               (prefix\n                                 (bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                 (bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x))) \\<or>\n                                (\\<exists>b.\n                                    bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                    bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x)) @\n                                    [b] \\<and>\n                                    mining\n                                     (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n  devExt t n nid n\\<^sub>s n'\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s +\n  Suc n')))))\\<^esub>t (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s +\n    Suc n')))))\\<^esub>t (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n      [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))", "have \"prefix (bc (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n')))) (devExt t n nid n\\<^sub>s n') \\<or> (\\<exists>b. bc (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n'))) = (devExt t n nid n\\<^sub>s n') @ [b] \\<and> mining (\\<sigma>\\<^bsub>?nid\\<^esub>(t (n\\<^sub>s + Suc n'))))\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>snd (SOME x.\n                              (\\<exists>na.\n                                  latestAct_cond\n                                   (THE nid'.\n (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                   t (n\\<^sub>s + Suc n') na) \\<and>\n                              \\<parallel>snd\n    x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                              fst x =\n                              \\<langle>THE nid'.\n    (n\\<^sub>s + Suc n', nid')\n    \\<in> his t n\n           nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n        Suc n'\\<^esub> \\<and>\n                              (prefix\n                                (bc (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                (bc (\\<sigma>\\<^bsub>snd\n                x\\<^esub>t (fst x))) \\<or>\n                               (\\<exists>b.\n                                   bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                   bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x)) @\n                                   [b] \\<and>\n                                   mining\n                                    (\\<sigma>\\<^bsub>THE nid'.\n                  (n\\<^sub>s + Suc n', nid')\n                  \\<in> his t n\n                         nid\\<^esub>t (n\\<^sub>s +\n Suc n')))))\\<^esub>t (fst (SOME x.\n                               (\\<exists>na.\n                                   latestAct_cond\n                                    (THE nid'.\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                    t (n\\<^sub>s + Suc n') na) \\<and>\n                               \\<parallel>snd\n     x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                               fst x =\n                               \\<langle>THE nid'.\n     (n\\<^sub>s + Suc n', nid')\n     \\<in> his t n\n            nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n         Suc n'\\<^esub> \\<and>\n                               (prefix\n                                 (bc (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                 (bc (\\<sigma>\\<^bsub>snd\n                 x\\<^esub>t (fst x))) \\<or>\n                                (\\<exists>b.\n                                    bc (\\<sigma>\\<^bsub>THE nid'.\n                     (n\\<^sub>s + Suc n', nid')\n                     \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                    bc (\\<sigma>\\<^bsub>snd\n                   x\\<^esub>t (fst x)) @\n                                    [b] \\<and>\n                                    mining\n                                     (\\<sigma>\\<^bsub>THE nid'.\n                   (n\\<^sub>s + Suc n', nid')\n                   \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) =\n  devExt t n nid n\\<^sub>s n'\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t\n (n\\<^sub>s +\n  Suc n')))))\\<^esub>t (fst (SOME x.\n                                (\\<exists>na.\n                                    latestAct_cond\n                                     (THE nid'.\n   (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n                                     t (n\\<^sub>s + Suc n') na) \\<and>\n                                \\<parallel>snd\n      x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                fst x =\n                                \\<langle>THE nid'.\n      (n\\<^sub>s + Suc n', nid')\n      \\<in> his t n\n             nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n          Suc n'\\<^esub> \\<and>\n                                (prefix\n                                  (bc (\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                  (bc (\\<sigma>\\<^bsub>snd\n                  x\\<^esub>t (fst x))) \\<or>\n                                 (\\<exists>b.\n                                     bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n                                     bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @\n                                     [b] \\<and>\n                                     mining\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n\n                           nid\\<^esub>t (n\\<^sub>s + Suc n')))))))) \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      bc (\\<sigma>\\<^bsub>snd (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t\n   (n\\<^sub>s +\n    Suc n')))))\\<^esub>t (fst (SOME x.\n                                  (\\<exists>na.\nlatestAct_cond (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) t\n (n\\<^sub>s + Suc n') na) \\<and>\n                                  \\<parallel>snd\n        x\\<parallel>\\<^bsub>t (fst x)\\<^esub> \\<and>\n                                  fst x =\n                                  \\<langle>THE nid'.\n        (n\\<^sub>s + Suc n', nid')\n        \\<in> his t n\n               nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s +\n            Suc n'\\<^esub> \\<and>\n                                  (prefix\n                                    (bc\n(\\<sigma>\\<^bsub>THE nid'.\n                    (n\\<^sub>s + Suc n', nid')\n                    \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n                                    (bc\n(\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x))) \\<or>\n                                   (\\<exists>b.\n bc (\\<sigma>\\<^bsub>THE nid'.\n                        (n\\<^sub>s + Suc n', nid')\n                        \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n bc (\\<sigma>\\<^bsub>snd x\\<^esub>t (fst x)) @ [b] \\<and>\n mining\n  (\\<sigma>\\<^bsub>THE nid'.\n                      (n\\<^sub>s + Suc n', nid')\n                      \\<in> his t n\n                             nid\\<^esub>t (n\\<^sub>s + Suc n'))))))) @\n      [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>THE nid'.\n                               (n\\<^sub>s + Suc n', nid')\n                               \\<in> his t n\nnid\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        mining\n         (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')))", "by simp"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "from \\<open>\\<exists>nid'. (n\\<^sub>s + Suc n',nid')\\<in> his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "have \"?nid=the (devBC t n nid (n\\<^sub>s + Suc n'))\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n    the (devBC t n nid (n\\<^sub>s + Suc n'))", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n    the (devBC t n nid (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "have \"\\<parallel>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n')\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "from \\<open>\\<exists>nid'. (n\\<^sub>s + Suc n',nid')\\<in>his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "obtain nid'\n          where \"(n\\<^sub>s + Suc n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        (n\\<^sub>s + Suc n', nid') \\<in> his t n nid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "with his_determ_the"], ["proof (chain)\npicking this:\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "have \"nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "with \\<open>?nid=the (devBC t n nid (n\\<^sub>s + Suc n'))\\<close>"], ["proof (chain)\npicking this:\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "have \"the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\""], ["proof (prove)\nusing this:\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "with \\<open>(n\\<^sub>s + Suc n',nid')\\<in>his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'", "show ?thesis"], ["proof (prove)\nusing this:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "using his_act"], ["proof (prove)\nusing this:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  \\<parallel>?nid'\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "ultimately"], ["proof (chain)\npicking this:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "using \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s+Suc n'))\\<close> \\<open>n\\<^sub>s + Suc n' \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  prefix\n   (bc (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>THE nid'.\n                             (n\\<^sub>s + Suc n', nid')\n                             \\<in> his t n\n                                    nid\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      mining\n       (\\<sigma>\\<^bsub>THE nid'.\n                           (n\\<^sub>s + Suc n', nid')\n                           \\<in> his t n nid\\<^esub>t (n\\<^sub>s + Suc n')))\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid) =\n  the (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub>\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n  n\\<^sub>s + Suc n' \\<le> n\n\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "by simp"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n      \\<parallel>the (devBC t n nid\n                       (n\\<^sub>s +\n                        Suc n'))\\<parallel>\\<^bsub>t\n              (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n      n\\<^sub>s + Suc n' \\<le> n \\<and>\n      mining\n       (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "assume \"\\<not> (\\<exists>n''<n\\<^sub>s + Suc n'. \\<exists>nid'. (n'',nid')\\<in> his t n nid)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n             \\<exists>nid'. (n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n             \\<exists>nid'. (n'', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "have \"(n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n'))) \\<in> his t n nid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "from \\<open>\\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))", "have \"\\<exists>nid'. (n\\<^sub>s + Suc n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "using his_ex"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n'))\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n\ngoal (1 subgoal):\n 1. \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "hence \"the (devBC t n nid (n\\<^sub>s + Suc n')) = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (n\\<^sub>s + Suc n')) =\n    (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "using devBC_def"], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  devBC ?t ?n ?nid ?n' \\<equiv>\n  if \\<exists>nid'. (?n', nid') \\<in> his ?t ?n ?nid\n  then Some (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) else None\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (n\\<^sub>s + Suc n')) =\n    (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) =\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "moreover"], ["proof (state)\nthis:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) =\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "from \\<open>\\<exists>nid'. (n\\<^sub>s + Suc n',nid')\\<in>his t n nid\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "obtain nid'\n          where \"(n\\<^sub>s + Suc n',nid')\\<in>his t n nid\""], ["proof (prove)\nusing this:\n  \\<exists>nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        (n\\<^sub>s + Suc n', nid') \\<in> his t n nid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "with his_determ_the"], ["proof (chain)\npicking this:\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid", "have \"nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\""], ["proof (prove)\nusing this:\n  (?n', ?nid') \\<in> his ?t ?n ?nid \\<Longrightarrow>\n  (THE nid'. (?n', nid') \\<in> his ?t ?n ?nid) = ?nid'\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "by simp"], ["proof (state)\nthis:\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "ultimately"], ["proof (chain)\npicking this:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) =\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)", "have \"the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\""], ["proof (prove)\nusing this:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) =\n  (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n  nid' = (THE nid'. (n\\<^sub>s + Suc n', nid') \\<in> his t n nid)\n\ngoal (1 subgoal):\n 1. the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'", "by simp"], ["proof (state)\nthis:\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "with \\<open>(n\\<^sub>s + Suc n',nid')\\<in>his t n nid\\<close>"], ["proof (chain)\npicking this:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'", "show ?thesis"], ["proof (prove)\nusing this:\n  (n\\<^sub>s + Suc n', nid') \\<in> his t n nid\n  the (devBC t n nid (n\\<^sub>s + Suc n')) = nid'\n\ngoal (1 subgoal):\n 1. (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n    \\<in> his t n nid", "by simp"], ["proof (state)\nthis:\n  (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n  \\<in> his t n nid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n             \\<exists>nid'. (n'', nid') \\<in> his t n nid)\n  (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n  \\<in> his t n nid", "have \"bc (\\<sigma>\\<^bsub>the (devBC t n nid (n\\<^sub>s + Suc n'))\\<^esub>(t (n\\<^sub>s + Suc n'))) = []\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n             \\<exists>nid'. (n'', nid') \\<in> his t n nid)\n  (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n  \\<in> his t n nid\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n    []", "using his_bc_empty"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n             \\<exists>nid'. (n'', nid') \\<in> his t n nid)\n  (n\\<^sub>s + Suc n', the (devBC t n nid (n\\<^sub>s + Suc n')))\n  \\<in> his t n nid\n  \\<lbrakk>(?n', ?nid') \\<in> his ?t ?n ?nid;\n   \\<not> (\\<exists>n''<?n'.\n              \\<exists>nid''. (n'', nid'') \\<in> his ?t ?n ?nid)\\<rbrakk>\n  \\<Longrightarrow> bc (\\<sigma>\\<^bsub>?nid'\\<^esub>?t ?n') = []\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n    []", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n  []\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n''<n\\<^sub>s + Suc n'.\n               \\<exists>nid'.\n                  (n'', nid') \\<in> his t n nid) \\<Longrightarrow>\n    prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n  []\n\ngoal (1 subgoal):\n 1. prefix\n     (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                  (n\\<^sub>s +\n                                   Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n        devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n        \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n        \\<parallel>the (devBC t n nid\n                         (n\\<^sub>s +\n                          Suc n'))\\<parallel>\\<^bsub>t\n                (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n        n\\<^sub>s + Suc n' \\<le> n \\<and>\n        mining\n         (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "by simp"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n      \\<parallel>the (devBC t n nid\n                       (n\\<^sub>s +\n                        Suc n'))\\<parallel>\\<^bsub>t\n              (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n      n\\<^sub>s + Suc n' \\<le> n \\<and>\n      mining\n       (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix\n   (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n      \\<parallel>the (devBC t n nid\n                       (n\\<^sub>s +\n                        Suc n'))\\<parallel>\\<^bsub>t\n              (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n      n\\<^sub>s + Suc n' \\<le> n \\<and>\n      mining\n       (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t n nid (n\\<^sub>s + Suc n')) \\<Longrightarrow>\n    prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "ultimately"], ["proof (chain)\npicking this:\n  devExt t n nid n\\<^sub>s (Suc n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n  prefix\n   (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n      \\<parallel>the (devBC t n nid\n                       (n\\<^sub>s +\n                        Suc n'))\\<parallel>\\<^bsub>t\n              (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n      n\\<^sub>s + Suc n' \\<le> n \\<and>\n      mining\n       (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))", "show ?thesis"], ["proof (prove)\nusing this:\n  devExt t n nid n\\<^sub>s (Suc n') =\n  bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n  prefix\n   (bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>the (devBC t n nid\n                                (n\\<^sub>s +\n                                 Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')) =\n      devExt t n nid n\\<^sub>s n' @ [b] \\<and>\n      \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n      \\<parallel>the (devBC t n nid\n                       (n\\<^sub>s +\n                        Suc n'))\\<parallel>\\<^bsub>t\n              (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n      n\\<^sub>s + Suc n' \\<le> n \\<and>\n      mining\n       (\\<sigma>\\<^bsub>the (devBC t n nid\n                              (n\\<^sub>s +\n                               Suc n'))\\<^esub>t (n\\<^sub>s + Suc n')))\n\ngoal (1 subgoal):\n 1. prefix (devExt t n nid n\\<^sub>s (Suc n'))\n     (devExt t n nid n\\<^sub>s n') \\<or>\n    (\\<exists>b.\n        devExt t n nid n\\<^sub>s (Suc n') =\n        devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n    \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n    \\<parallel>the (devBC t n nid\n                     (n\\<^sub>s +\n                      Suc n'))\\<parallel>\\<^bsub>t\n            (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n' \\<le> n \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t n nid\n                            (n\\<^sub>s +\n                             Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))", "by simp"], ["proof (state)\nthis:\n  prefix (devExt t n nid n\\<^sub>s (Suc n'))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      devExt t n nid n\\<^sub>s (Suc n') =\n      devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n' \\<le> n \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t n nid\n                          (n\\<^sub>s +\n                           Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix (devExt t n nid n\\<^sub>s (Suc n'))\n   (devExt t n nid n\\<^sub>s n') \\<or>\n  (\\<exists>b.\n      devExt t n nid n\\<^sub>s (Suc n') =\n      devExt t n nid n\\<^sub>s n' @ [b]) \\<and>\n  \\<not> Option.is_none (devBC t n nid (n\\<^sub>s + Suc n')) \\<and>\n  \\<parallel>the (devBC t n nid\n                   (n\\<^sub>s +\n                    Suc n'))\\<parallel>\\<^bsub>t\n          (n\\<^sub>s + Suc n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n' \\<le> n \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t n nid\n                          (n\\<^sub>s +\n                           Suc n'))\\<^esub>t (n\\<^sub>s + Suc n'))\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation devLgthBC where \"devLgthBC t n nid n\\<^sub>s \\<equiv> (\\<lambda>n'. length (devExt t n nid n\\<^sub>s n'))\""], ["", "theorem blockchain_save:\n  fixes t::\"nat\\<Rightarrow>cnf\" and n\\<^sub>s and sbc and n\n  assumes \"\\<forall>nid. honest nid \\<longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t (\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>))))\"\n    and \"\\<forall>nid\\<in>actDn (t n\\<^sub>s). length (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n\\<^sub>s))) < length sbc\"\n    and \"PoW t n\\<^sub>s\\<ge>length sbc + cb\"\n    and \"\\<forall>n'<n\\<^sub>s. \\<forall>nid. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub> \\<longrightarrow> length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n')) < length sbc \\<or> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n')))\"\n    and \"n\\<ge>n\\<^sub>s\"\n  shows \"\\<forall>nid \\<in> actHn (t n). prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume \"sbc=[]\""], ["proof (state)\nthis:\n  sbc = []\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  sbc = []\n\ngoal (1 subgoal):\n 1. \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. sbc \\<noteq> [] \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sbc \\<noteq> [] \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume \"\\<not> sbc=[]\""], ["proof (state)\nthis:\n  sbc \\<noteq> []\n\ngoal (1 subgoal):\n 1. sbc \\<noteq> [] \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "have \"n\\<ge>n\\<^sub>s \\<Longrightarrow> \\<forall>nid \\<in> actHn (t n). prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>(t n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> n \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof (induction n rule: ge_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n\\<^sub>s \\<le> n;\n        \\<forall>m\\<ge>n\\<^sub>s.\n           m < n \\<longrightarrow>\n           (\\<forall>nid\\<in>actHn (t m).\n               prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nid\\<in>actHn (t n).\n                            prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "case (step n)"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n\n  \\<forall>m\\<ge>n\\<^sub>s.\n     m < n \\<longrightarrow>\n     (\\<forall>nid\\<in>actHn (t m).\n         prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n\\<^sub>s \\<le> n;\n        \\<forall>m\\<ge>n\\<^sub>s.\n           m < n \\<longrightarrow>\n           (\\<forall>nid\\<in>actHn (t m).\n               prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nid\\<in>actHn (t n).\n                            prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid.\n       nid \\<in> actHn (t n) \\<Longrightarrow>\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "fix nid"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nid.\n       nid \\<in> actHn (t n) \\<Longrightarrow>\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume \"nid \\<in> actHn (t n)\""], ["proof (state)\nthis:\n  nid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. \\<And>nid.\n       nid \\<in> actHn (t n) \\<Longrightarrow>\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "hence \"\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\" and \"honest nid\""], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t n)\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub> &&& honest nid", "using actHn_def"], ["proof (prove)\nusing this:\n  nid \\<in> actHn (t n)\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub> &&& honest nid", "by auto"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  honest nid\n\ngoal (1 subgoal):\n 1. \\<And>nid.\n       nid \\<in> actHn (t n) \\<Longrightarrow>\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "show \"prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume lAct: \"\\<exists>n' < n. n' \\<ge> n\\<^sub>s \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (state)\nthis:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume \"\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<exists>n'. latestAct_cond nid t n n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond nid t n n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n            mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @ [b])\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "using \\<open>honest nid\\<close> bhv_hn_ex[of nid n t]"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n     length\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n     < length b\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'\n  honest nid\n  \\<lbrakk>honest nid;\n   \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond nid t n n';\n   \\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n             \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n      length\n       (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n      < length b\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>nid\\<^esub>t\n                   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n              \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n                  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "have \"prefix sbc (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from \\<open>\\<exists>n'. latestAct_cond nid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "hence \"pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq> {}\" and \"finite (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n    {} &&&\n    finite\n     (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "using nempty_input[of nid t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"] finite_input[of nid t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"] \\<open>honest nid\\<close>"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>\\<parallel>nid\\<parallel>\\<^bsub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n   honest nid\\<rbrakk>\n  \\<Longrightarrow> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n                    {}\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub> \\<Longrightarrow>\n  finite\n   (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  honest nid\n\ngoal (1 subgoal):\n 1. pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n    {} &&&\n    finite\n     (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n  {}\n  finite\n   (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "hence \"MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (prove)\nusing this:\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n  {}\n  finite\n   (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "using max_prop(1)"], ["proof (prove)\nusing this:\n  pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<noteq>\n  {}\n  finite\n   (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<lbrakk>?XS \\<noteq> {}; finite ?XS\\<rbrakk>\n  \\<Longrightarrow> MAX ?XS \\<in> ?XS\n\ngoal (1 subgoal):\n 1. MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "with \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "obtain nid' where \"\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\"\n              and \"bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>\\<parallel>nid'\\<parallel>\\<^bsub>t\n              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using closed[where b=\"MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\"]"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<in> pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<lbrakk>\\<parallel>?nid\\<parallel>\\<^bsub>?t ?n\\<^esub>;\n   MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n   \\<in> pin (\\<sigma>\\<^bsub>?nid\\<^esub>?t ?n)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nid'.\n                       \\<parallel>nid'\\<parallel>\\<^bsub>?t\n                    ?n\\<^esub> \\<and>\n                       bc (\\<sigma>\\<^bsub>nid'\\<^esub>?t ?n) =\n                       MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. (\\<And>nid'.\n        \\<lbrakk>\\<parallel>nid'\\<parallel>\\<^bsub>t\n              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>;\n         bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n         MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "have \"prefix sbc (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "assume \"honest nid'\""], ["proof (state)\nthis:\n  honest nid'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "with \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  honest nid'", "have \"nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  honest nid'\n\ngoal (1 subgoal):\n 1. nid'\n    \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "using actHn_def"], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  honest nid'\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. nid'\n    \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>\\<exists>n'. latestAct_cond nid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<ge> n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "using \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close> step.IH"], ["proof (prove)\nusing this:\n  nid' \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<forall>m\\<ge>n\\<^sub>s.\n     m < n \\<longrightarrow>\n     (\\<forall>nid\\<in>actHn (t m).\n         prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "assume \"\\<not> honest nid'\""], ["proof (state)\nthis:\n  \\<not> honest nid'\n\ngoal (1 subgoal):\n 1. \\<not> honest nid' \\<Longrightarrow>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "assume \"\\<not> prefix sbc (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (state)\nthis:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "have \"\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s \\<and> length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0) < length sbc \\<and> (\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume \"\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<and> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\""], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<and> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')) \\<and> (\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "let ?P=\"\\<lambda>n'. n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> n'\\<ge>n\\<^sub>s  \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<and> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s  \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<and> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))", "have \"\\<exists>n'. ?P n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'))", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "have \"\\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. \\<not> ?P n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n') \\<and>\n               honest\n                (the (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n')))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n  \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))", "obtain n' where \"?P n'\" and \"\\<forall>n''. ?P n'' \\<longrightarrow> n''\\<le>n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n  \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                 n\\<^sub>s \\<le> n' \\<and>\n                 \\<not> Option.is_none\n                         (devBC t\n                           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                           nid' n') \\<and>\n                 honest\n                  (the (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'));\n         \\<forall>n''.\n            n''\n            \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n            n\\<^sub>s \\<le> n'' \\<and>\n            \\<not> Option.is_none\n                    (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n'') \\<and>\n            honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'')) \\<longrightarrow>\n            n'' \\<le> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using boundedGreatest[of ?P _ \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"]"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'))\n  \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))\n  \\<lbrakk>?i \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           n\\<^sub>s \\<le> ?i \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' ?i) \\<and>\n           honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' ?i));\n   \\<forall>n'>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n      \\<not> (n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n              n\\<^sub>s \\<le> n' \\<and>\n              \\<not> Option.is_none\n                      (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n') \\<and>\n              honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n')))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                       (i' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                        n\\<^sub>s \\<le> i' \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' i') \\<and>\n                        honest\n                         (the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid' i'))) \\<and>\n                       (\\<forall>n'.\n                           n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                           n\\<^sub>s \\<le> n' \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n') \\<and>\n                           honest\n                            (the (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n')) \\<longrightarrow>\n                           n' \\<le> i')\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                 n\\<^sub>s \\<le> n' \\<and>\n                 \\<not> Option.is_none\n                         (devBC t\n                           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                           nid' n') \\<and>\n                 honest\n                  (the (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'));\n         \\<forall>n''.\n            n''\n            \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n            n\\<^sub>s \\<le> n'' \\<and>\n            \\<not> Option.is_none\n                    (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n'') \\<and>\n            honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'')) \\<longrightarrow>\n            n'' \\<le> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  n\\<^sub>s \\<le> n' \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n') \\<and>\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<forall>n''.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     n\\<^sub>s \\<le> n'' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'')) \\<longrightarrow>\n     n'' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  n\\<^sub>s \\<le> n' \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n') \\<and>\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<forall>n''.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     n\\<^sub>s \\<le> n'' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'')) \\<longrightarrow>\n     n'' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<forall>n''>n'.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by auto"], ["proof (state)\nthis:\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "using \\<open>?P n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  n\\<^sub>s \\<le> n' \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n') \\<and>\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<and>\n       honest\n        (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')) \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n')) \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n')) \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n')) \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))", "obtain n' where \"n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" and \"\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\"\n                    and \"n'\\<ge>n\\<^sub>s\" and \"honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\"\n                    and \"\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<and>\n     honest\n      (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n')) \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>;\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n');\n         n\\<^sub>s \\<le> n';\n         honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'));\n         \\<forall>n''>n'.\n            n''\n            \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n            \\<not> Option.is_none\n                    (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n'') \\<longrightarrow>\n            \\<not> honest\n                    (the (devBC t\n                           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                           nid' n''))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n  n\\<^sub>s \\<le> n'\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"n'\\<ge>n\\<^sub>s\" and dishonest: \"\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n  n\\<^sub>s \\<le> n'\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> n' &&&\n    \\<forall>n''>n'.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by auto"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub><n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "using \\<open>\\<exists>n'. latestAct_cond nid t n n'\\<close> latestAct_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "by blast"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "have \"n'<n\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (1 subgoal):\n 1. n' < n", "by simp"], ["proof (state)\nthis:\n  n' < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n' < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')", "have \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>", "using devBC_act"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<parallel>the (devBC ?t ?n ?nid ?n')\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\\<close>"], ["proof (chain)\npicking this:\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<in>actHn (t n')\""], ["proof (prove)\nusing this:\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n')\n    \\<in> actHn (t n')", "using actHn_def"], ["proof (prove)\nusing this:\n  honest\n   (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n'))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n')\\<parallel>\\<^bsub>t n'\\<^esub>\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n')\n    \\<in> actHn (t n')", "by simp"], ["proof (state)\nthis:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n  \\<in> actHn (t n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n  n' < n\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n  \\<in> actHn (t n')", "have \"prefix sbc (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<^esub>t n'))\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n  n' < n\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n  \\<in> actHn (t n')\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid' n')\\<^esub>t n'))", "using step.IH"], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n  n' < n\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n  \\<in> actHn (t n')\n  \\<forall>m\\<ge>n\\<^sub>s.\n     m < n \\<longrightarrow>\n     (\\<forall>nid\\<in>actHn (t m).\n         prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid' n')\\<^esub>t n'))", "by simp"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n')\\<^esub>t n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "interpret ut: dishonest \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\" \"\\<lambda>n. dmining t (n' + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dishonest\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n')\n     (\\<lambda>n. dmining t (n' + n))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "from devExt_devop[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' n']"], ["proof (chain)\npicking this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n' + Suc ?n')\\<^esub> \\<and>\n  n' + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc ?n'))\\<^esub>t (n' + Suc ?n'))", "have \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'') \\<or> (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub> \\<and> n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n' + Suc ?n')\\<^esub> \\<and>\n  n' + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc ?n'))\\<^esub>t (n' + Suc ?n'))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))", "."], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "thus \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'') \\<or> (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> dmining t (n' + Suc n'')\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "assume \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'')\""], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'')\n\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "thus ?thesis"], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'')\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "by simp"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "assume \"(\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub> \\<and> n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (state)\nthis:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "hence \"\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]\" and \"\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\" and \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\" and \"n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" and \"mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b] &&&\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' (n' + Suc n''))) &&&\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> &&&\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> &&&\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "moreover"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "from \\<open>n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<close> \\<open>\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<close>"], ["proof (chain)\npicking this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))", "have \"\\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')))\""], ["proof (prove)\nusing this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n' + Suc n'')))", "using dishonest"], ["proof (prove)\nusing this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n' + Suc n'')))", "by simp"], ["proof (state)\nthis:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "with \\<open>\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))", "have \"the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<in>actDn (t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n' + Suc n''))\n    \\<in> actDn (t (n' + Suc n''))", "using actDn_def"], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n  actDn ?k \\<equiv>\n  {nid.\n   \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> \\<not> honest nid}\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n' + Suc n''))\n    \\<in> actDn (t (n' + Suc n''))", "by simp"], ["proof (state)\nthis:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "using dmining_def"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n  dmining ?t \\<equiv>\n  \\<lambda>n.\n     \\<exists>nid\\<in>actDn (?t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>?t n)\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "by auto"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<close>"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')", "have \"bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<^esub>t n') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n')\\<^esub>t n') =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0", "using devExt_bc_geq[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' n']"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n')\n  \\<lbrakk>\\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n');\n   ?n\\<^sub>s \\<le> n'\\<rbrakk>\n  \\<Longrightarrow> devExt t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' ?n\\<^sub>s (n' - ?n\\<^sub>s) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n')\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n')\\<^esub>t n') =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')\\<^esub>t n') =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')\\<^esub>t n') =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<close> \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n')\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "using devExt_bc_geq"], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t ?n ?nid ?n');\n   ?n\\<^sub>s \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> devExt ?t ?n ?nid ?n\\<^sub>s (?n' - ?n\\<^sub>s) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?t ?n ?nid ?n')\\<^esub>?t ?n')\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>\\<not> prefix sbc (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\\<close>"], ["proof (chain)\npicking this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "have \"\\<not> prefix sbc (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n'))\""], ["proof (prove)\nusing this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n'\n              (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))", "by simp"], ["proof (state)\nthis:\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n'\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')\\<^esub>t n') =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n'\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))", "have \"\\<exists>n'''. n''' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n' \\<and> length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n''') < length sbc\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')\\<^esub>t n') =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n'\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                      n'.\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n''')\n       < length sbc", "using \\<open>prefix sbc (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\\<^esub>(t n')))\\<close>\n                    ut.prefix_length[of sbc 0 \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n'\"]"], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')\\<^esub>t n') =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n'\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n')\\<^esub>t n'))\n  \\<lbrakk>prefix sbc\n            (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n' 0);\n   \\<not> prefix sbc\n           (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n'\n             (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'));\n   0 \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n           n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'''>0.\n                       n'''\n                       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                             n' \\<and>\n                       length\n                        (devExt t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n' n''')\n                       < length sbc\n\ngoal (1 subgoal):\n 1. \\<exists>n'''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                      n'.\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n''')\n       < length sbc", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                    n'.\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' n''')\n     < length sbc\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                    n'.\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' n''')\n     < length sbc", "obtain n\\<^sub>p where \"n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n'\"\n                    and \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n\\<^sub>p) < length sbc\""], ["proof (prove)\nusing this:\n  \\<exists>n'''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                    n'.\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' n''')\n     < length sbc\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>p.\n        \\<lbrakk>n\\<^sub>p\n                 \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                       n';\n         length\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n\\<^sub>p)\n         < length sbc\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n\\<^sub>p)\n  < length sbc\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + n\\<^sub>p) 0) < length sbc\""], ["proof (prove)\nusing this:\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n\\<^sub>p)\n  < length sbc\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       (n' + n\\<^sub>p) 0)\n    < length sbc", "using devExt_shift[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' n' n\\<^sub>p]"], ["proof (prove)\nusing this:\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n\\<^sub>p)\n  < length sbc\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   (n' + n\\<^sub>p) 0 =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   n\\<^sub>p\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       (n' + n\\<^sub>p) 0)\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n' + n\\<^sub>p) 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n' + n\\<^sub>p) 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n'\\<close> \\<open>n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n'\\<close>"], ["proof (chain)\npicking this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'", "have \"(n' + n\\<^sub>p) \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'\n\ngoal (1 subgoal):\n 1. n' + n\\<^sub>p\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n' + n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n' + n\\<^sub>p) 0)\n  < length sbc\n  n' + n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n' + n\\<^sub>p) 0)\n  < length sbc\n  n' + n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "using \\<open>n'\\<ge>n\\<^sub>s\\<close> dishonest"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n' + n\\<^sub>p) 0)\n  < length sbc\n  n' + n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>s \\<le> n'\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n') \\<and>\n               honest\n                (the (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n') \\<and>\n               honest\n                (the (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume \"\\<not>(\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<and> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n') \\<and>\n               honest\n                (the (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence cas: \"\\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>. n'\\<ge>n\\<^sub>s \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n') \\<and>\n             honest\n              (the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n')))\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n'))", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n') \\<and>\n               honest\n                (the (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume \"Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\""], ["proof (state)\nthis:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "assume \"\\<forall>n'<n\\<^sub>s. Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\""], ["proof (state)\nthis:\n  \\<forall>n'<n\\<^sub>s.\n     Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "with \\<open>Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<forall>n'<n\\<^sub>s.\n     Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')", "have \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0 = []\""], ["proof (prove)\nusing this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<forall>n'<n\\<^sub>s.\n     Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')\n\ngoal (1 subgoal):\n 1. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0 =\n    []", "by simp"], ["proof (state)\nthis:\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "with \\<open>\\<not> sbc=[]\\<close>"], ["proof (chain)\npicking this:\n  sbc \\<noteq> []\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  []", "have \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0) < length sbc\""], ["proof (prove)\nusing this:\n  sbc \\<noteq> []\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  []\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s 0)\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "from cas"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))", "have \"\\<forall>n''>n\\<^sub>s. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<forall>n''>n\\<^sub>s.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))\n 2. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "let ?P=\"\\<lambda>n'. n'<n\\<^sub>s \\<and> \\<not>Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "let ?n'=\"GREATEST n'. ?P n'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "assume \"\\<not> (\\<forall>n'<n\\<^sub>s. Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'))\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>n'<n\\<^sub>s.\n             Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<forall>n'<n\\<^sub>s.\n             Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "have \"\\<forall>n'>n\\<^sub>s. \\<not> ?P n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n'>n\\<^sub>s.\n       \\<not> (n' < n\\<^sub>s \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'>n\\<^sub>s.\n     \\<not> (n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>n'<n\\<^sub>s.\n             Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  \\<forall>n'>n\\<^sub>s.\n     \\<not> (n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))", "have exists: \"\\<exists>n'. ?P n' \\<and> (\\<forall>n''. ?P n''\\<longrightarrow> n''\\<le>n')\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>n'<n\\<^sub>s.\n             Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  \\<forall>n'>n\\<^sub>s.\n     \\<not> (n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (n' < n\\<^sub>s \\<and>\n        \\<not> Option.is_none\n                (devBC t\n                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                  n')) \\<and>\n       (\\<forall>n''.\n           n'' < n\\<^sub>s \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           n'' \\<le> n')", "using boundedGreatest[of ?P]"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>n'<n\\<^sub>s.\n             Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  \\<forall>n'>n\\<^sub>s.\n     \\<not> (n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n  \\<lbrakk>?i < n\\<^sub>s \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' ?i);\n   \\<forall>n'>?n.\n      \\<not> (n' < n\\<^sub>s \\<and>\n              \\<not> Option.is_none\n                      (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i'\\<le>?n.\n                       (i' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' i')) \\<and>\n                       (\\<forall>n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n') \\<longrightarrow>\n                           n' \\<le> i')\n\ngoal (1 subgoal):\n 1. \\<exists>n'.\n       (n' < n\\<^sub>s \\<and>\n        \\<not> Option.is_none\n                (devBC t\n                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                  n')) \\<and>\n       (\\<forall>n''.\n           n'' < n\\<^sub>s \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           n'' \\<le> n')", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "hence \"?P ?n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n\ngoal (1 subgoal):\n 1. (GREATEST n'.\n        n' < n\\<^sub>s \\<and>\n        \\<not> Option.is_none\n                (devBC t\n                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                  n'))\n    < n\\<^sub>s \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid'\n              (GREATEST n'.\n                  n' < n\\<^sub>s \\<and>\n                  \\<not> Option.is_none\n                          (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')))", "using GreatestI_ex_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n  \\<lbrakk>\\<exists>k<n\\<^sub>s.\n              \\<not> Option.is_none\n                      (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' k);\n   \\<And>y.\n      y < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' y) \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> (GREATEST n'.\n                        n' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' n'))\n                    < n\\<^sub>s \\<and>\n                    \\<not> Option.is_none\n                            (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\n\ngoal (1 subgoal):\n 1. (GREATEST n'.\n        n' < n\\<^sub>s \\<and>\n        \\<not> Option.is_none\n                (devBC t\n                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                  n'))\n    < n\\<^sub>s \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid'\n              (GREATEST n'.\n                  n' < n\\<^sub>s \\<and>\n                  \\<not> Option.is_none\n                          (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n')))", "by auto"], ["proof (state)\nthis:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "moreover"], ["proof (state)\nthis:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "from \\<open>?P ?n'\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))", "have \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<parallel>\\<^bsub>t ?n'\\<^esub>\""], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid'\n                                   n')))\\<parallel>\\<^bsub>t\n                      (GREATEST n'.\n                          n' < n\\<^sub>s \\<and>\n                          \\<not> Option.is_none\n                                  (devBC t\n                                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                    nid' n'))\\<^esub>", "using devBC_act"], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<parallel>the (devBC ?t ?n ?nid ?n')\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid'\n                                   n')))\\<parallel>\\<^bsub>t\n                      (GREATEST n'.\n                          n' < n\\<^sub>s \\<and>\n                          \\<not> Option.is_none\n                                  (devBC t\n                                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                    nid' n'))\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid'\n                                 n')))\\<parallel>\\<^bsub>t\n                    (GREATEST n'.\n                        n' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' n'))\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid'\n                                 n')))\\<parallel>\\<^bsub>t\n                    (GREATEST n'.\n                        n' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' n'))\\<^esub>", "have \"length (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>t ?n')) < length sbc \\<or> prefix sbc (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>(t ?n')))\""], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid'\n                                 n')))\\<parallel>\\<^bsub>t\n                    (GREATEST n'.\n                        n' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' n'))\\<^esub>\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<or>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))", "using assms(4)"], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid'\n                                 n')))\\<parallel>\\<^bsub>t\n                    (GREATEST n'.\n                        n' < n\\<^sub>s \\<and>\n                        \\<not> Option.is_none\n                                (devBC t\n                                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                  nid' n'))\\<^esub>\n  \\<forall>n'<n\\<^sub>s.\n     \\<forall>nid.\n        \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub> \\<longrightarrow>\n        length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n')) < length sbc \\<or>\n        prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<or>\n    prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))", "by simp"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc \\<or>\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n\\<^sub>s);\n     \\<not> (\\<forall>n'<n\\<^sub>s.\n                Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n                         n\\<^sub>s \\<le> n' \\<and>\n                         length\n                          (devExt t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n' 0)\n                         < length sbc \\<and>\n                         (\\<forall>n''>n'.\n                             n''\n                             \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n                             \\<not> Option.is_none\n                                     (devBC t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n n'') \\<longrightarrow>\n                             \\<not> honest\n                                     (the\n (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'')))", "thus ?thesis"], ["proof (prove)\nusing this:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc \\<or>\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume \"length (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>t ?n')) < length sbc\""], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from exists"], ["proof (chain)\npicking this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')", "have \"\\<not>(\\<exists>n'>?n'. ?P n')\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'>GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n').\n               n' < n\\<^sub>s \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'))", "using Greatest_ex_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n  \\<exists>k.\n     (k < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' k)) \\<and>\n     (\\<forall>k'.\n         k' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' k') \\<longrightarrow>\n         k' \\<le> k) \\<Longrightarrow>\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'>GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n').\n               n' < n\\<^sub>s \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'))", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>?P ?n'\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))", "have \"\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\""], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n\\<^sub>s.\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n')", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')", "have \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0 = bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>(t ?n'))\""], ["proof (prove)\nusing this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')\n\ngoal (1 subgoal):\n 1. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n')))", "by simp"], ["proof (state)\nthis:\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))", "have \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0) < length sbc\""], ["proof (prove)\nusing this:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  < length sbc\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s 0)\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from cas"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))", "have \"\\<forall>n''>n\\<^sub>s. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<forall>n''>n\\<^sub>s.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (2 subgoals):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n'))))\n    < length sbc \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))\n 2. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "interpret ut: dishonest \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s\" \"\\<lambda>n. dmining t (n\\<^sub>s + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dishonest\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s)\n     (\\<lambda>n. dmining t (n\\<^sub>s + n))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s n @\n           [b]) \\<and>\n       dmining t (n\\<^sub>s + Suc n)", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s n @\n           [b]) \\<and>\n       dmining t (n\\<^sub>s + Suc n)", "from devExt_devop[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' n\\<^sub>s]"], ["proof (chain)\npicking this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc ?n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc ?n'))\\<^esub>t (n\\<^sub>s + Suc ?n'))", "have \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'') \\<or> (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n'')\\<^esub> \\<and> n\\<^sub>s + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc ?n')\\<^esub> \\<and>\n  n\\<^sub>s + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc ?n'))\\<^esub>t (n\\<^sub>s + Suc ?n'))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))", "."], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s n @\n           [b]) \\<and>\n       dmining t (n\\<^sub>s + Suc n)", "thus \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'') \\<or> (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'' @ [b]) \\<and> dmining t (n\\<^sub>s + Suc n'')\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "assume \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'')\""], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'')\n\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "thus ?thesis"], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'')\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "by simp"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  dmining t (n\\<^sub>s + Suc n'')\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "assume \"(\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n'')\\<^esub> \\<and> n\\<^sub>s + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\""], ["proof (state)\nthis:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "hence \"\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n'' @ [b]\"\n                              and \"\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\"\n                              and \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n'')\\<^esub>\"\n                              and \"n\\<^sub>s + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"\n                              and \"mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\""], ["proof (prove)\nusing this:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b] &&&\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' (n\\<^sub>s + Suc n''))) &&&\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> &&&\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> &&&\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "moreover"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "from \\<open>n\\<^sub>s + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<close> \\<open>\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))", "have \"\\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n'')))\""], ["proof (prove)\nusing this:\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n\\<^sub>s + Suc n'')))", "using cas"], ["proof (prove)\nusing this:\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n\\<^sub>s + Suc n'')))", "by simp"], ["proof (state)\nthis:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n\\<^sub>s + Suc n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "with \\<open>\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<parallel>\\<^bsub>t (n\\<^sub>s + Suc n'')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n\\<^sub>s + Suc n'')))", "have \"the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + Suc n''))\\<in>actDn (t (n\\<^sub>s + Suc n''))\""], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n\\<^sub>s + Suc n'')))\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n\\<^sub>s + Suc n''))\n    \\<in> actDn (t (n\\<^sub>s + Suc n''))", "using actDn_def"], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n\\<^sub>s + Suc n'')))\n  actDn ?k \\<equiv>\n  {nid.\n   \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> \\<not> honest nid}\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n\\<^sub>s + Suc n''))\n    \\<in> actDn (t (n\\<^sub>s + Suc n''))", "by simp"], ["proof (state)\nthis:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n\\<^sub>s + Suc n''))\n  \\<in> actDn (t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n\\<^sub>s + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n\\<^sub>s +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n\\<^sub>s + Suc n'')\\<^esub> \\<and>\n    n\\<^sub>s + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n\\<^sub>s +\n                             Suc n''))\\<^esub>t\n         (n\\<^sub>s + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n\\<^sub>s + Suc n''))\n  \\<in> actDn (t (n\\<^sub>s + Suc n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n\\<^sub>s + Suc n''))\n  \\<in> actDn (t (n\\<^sub>s + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "using dmining_def"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n\\<^sub>s n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n\\<^sub>s + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n\\<^sub>s +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n\\<^sub>s + Suc n'')\\<^esub>\n  n\\<^sub>s + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid'\n                          (n\\<^sub>s +\n                           Suc n''))\\<^esub>t (n\\<^sub>s + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n\\<^sub>s + Suc n''))\n  \\<in> actDn (t (n\\<^sub>s + Suc n''))\n  dmining ?t \\<equiv>\n  \\<lambda>n.\n     \\<exists>nid\\<in>actDn (?t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>?t n)\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n\\<^sub>s n'' @\n        [b]) \\<and>\n    dmining t (n\\<^sub>s + Suc n'')", "by auto"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  dmining t (n\\<^sub>s + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s n'' @\n      [b]) \\<and>\n  dmining t (n\\<^sub>s + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume \"prefix sbc (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>(t ?n')))\""], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from exists"], ["proof (chain)\npicking this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')", "have \"\\<not>(\\<exists>n'>?n'. ?P n')\""], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'>GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n').\n               n' < n\\<^sub>s \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'))", "using Greatest_ex_le_nat[of ?P]"], ["proof (prove)\nusing this:\n  \\<exists>n'.\n     (n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n')) \\<and>\n     (\\<forall>n''.\n         n'' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         n'' \\<le> n')\n  \\<exists>k.\n     (k < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' k)) \\<and>\n     (\\<forall>k'.\n         k' < n\\<^sub>s \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' k') \\<longrightarrow>\n         k' \\<le> k) \\<Longrightarrow>\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'>GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n').\n               n' < n\\<^sub>s \\<and>\n               \\<not> Option.is_none\n                       (devBC t\n                         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                         nid' n'))", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>?P ?n'\\<close>"], ["proof (chain)\npicking this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))", "have \"\\<exists>n'<n\\<^sub>s. \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n')\""], ["proof (prove)\nusing this:\n  (GREATEST n'.\n      n' < n\\<^sub>s \\<and>\n      \\<not> Option.is_none\n              (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                nid' n'))\n  < n\\<^sub>s \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid'\n            (GREATEST n'.\n                n' < n\\<^sub>s \\<and>\n                \\<not> Option.is_none\n                        (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n')))\n\ngoal (1 subgoal):\n 1. \\<exists>n'<n\\<^sub>s.\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n')", "by blast"], ["proof (state)\nthis:\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<close>"], ["proof (chain)\npicking this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')", "have \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0 = bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' ?n')\\<^esub>(t ?n'))\""], ["proof (prove)\nusing this:\n  Option.is_none\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s)\n  \\<exists>n'<n\\<^sub>s.\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n')\n\ngoal (1 subgoal):\n 1. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n')))", "by simp"], ["proof (state)\nthis:\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))", "have \"prefix sbc (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0)\""], ["proof (prove)\nusing this:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              (GREATEST n'.\n                                  n' < n\\<^sub>s \\<and>\n                                  \\<not> Option.is_none\n    (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n      n')))\\<^esub>t (GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n'))))\n  \\<not> (\\<exists>n'>GREATEST n'.\n                         n' < n\\<^sub>s \\<and>\n                         \\<not> Option.is_none\n                                 (devBC t\n                                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                   nid' n').\n             n' < n\\<^sub>s \\<and>\n             \\<not> Option.is_none\n                     (devBC t\n                       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                       nid' n'))\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (GREATEST n'.\n                                n' < n\\<^sub>s \\<and>\n                                \\<not> Option.is_none\n  (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n    n')))\\<^esub>t (GREATEST n'.\n                       n' < n\\<^sub>s \\<and>\n                       \\<not> Option.is_none\n                               (devBC t\n                                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                 nid' n')))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s 0)", "by simp"], ["proof (state)\nthis:\n  prefix sbc\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  prefix sbc\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s)", "using devExt_bc_geq"], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<lbrakk>\\<not> Option.is_none (devBC ?t ?n ?nid ?n');\n   ?n\\<^sub>s \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> devExt ?t ?n ?nid ?n\\<^sub>s (?n' - ?n\\<^sub>s) =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC ?t ?n ?nid ?n')\\<^esub>?t ?n')\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>\\<not> prefix sbc (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\\<close> \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s)", "have \"\\<not> prefix sbc (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s))\""], ["proof (prove)\nusing this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s\n              (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n               n\\<^sub>s))", "by simp"], ["proof (state)\nthis:\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  prefix sbc\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s))", "have \"\\<exists>n'''>0. n''' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s \\<and> length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n''') < length sbc\""], ["proof (prove)\nusing this:\n  prefix sbc\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s))\n\ngoal (1 subgoal):\n 1. \\<exists>n'''>0.\n       n'''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s n''')\n       < length sbc", "using ut.prefix_length[of sbc 0 \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s\"]"], ["proof (prove)\nusing this:\n  prefix sbc\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  \\<not> prefix sbc\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s\n            (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s))\n  \\<lbrakk>prefix sbc\n            (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s 0);\n   \\<not> prefix sbc\n           (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n             nid' n\\<^sub>s\n             (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n              n\\<^sub>s));\n   0 \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n           n\\<^sub>s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'''>0.\n                       n'''\n                       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                             n\\<^sub>s \\<and>\n                       length\n                        (devExt t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n\\<^sub>s n''')\n                       < length sbc\n\ngoal (1 subgoal):\n 1. \\<exists>n'''>0.\n       n'''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n             n\\<^sub>s \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s n''')\n       < length sbc", "by simp"], ["proof (state)\nthis:\n  \\<exists>n'''>0.\n     n'''\n     \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n           n\\<^sub>s \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s n''')\n     < length sbc\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'''>0.\n     n'''\n     \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n           n\\<^sub>s \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s n''')\n     < length sbc", "obtain n\\<^sub>p where \"n\\<^sub>p>0\" and \"n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s\" and \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s n\\<^sub>p) < length sbc\""], ["proof (prove)\nusing this:\n  \\<exists>n'''>0.\n     n'''\n     \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n           n\\<^sub>s \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s n''')\n     < length sbc\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>p.\n        \\<lbrakk>0 < n\\<^sub>p;\n         n\\<^sub>p\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n               n\\<^sub>s;\n         length\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s n\\<^sub>p)\n         < length sbc\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < n\\<^sub>p\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n\\<^sub>p)\n  < length sbc\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n\\<^sub>s + n\\<^sub>p) 0) < length sbc\""], ["proof (prove)\nusing this:\n  0 < n\\<^sub>p\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n\\<^sub>p)\n  < length sbc\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       (n\\<^sub>s + n\\<^sub>p) 0)\n    < length sbc", "using devExt_shift"], ["proof (prove)\nusing this:\n  0 < n\\<^sub>p\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s n\\<^sub>p)\n  < length sbc\n  devExt ?t ?n ?nid (?n' + ?n'') 0 = devExt ?t ?n ?nid ?n' ?n''\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       (n\\<^sub>s + n\\<^sub>p) 0)\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n\\<^sub>s + n\\<^sub>p) 0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n\\<^sub>s + n\\<^sub>p) 0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "with \\<open>n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"(n\\<^sub>s + n\\<^sub>p) \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s + n\\<^sub>p\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s + n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s + n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from \\<open>n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n\\<^sub>s\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s", "have \"n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n\\<^sub>s\n\ngoal (1 subgoal):\n 1. n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "have \"\\<forall>n''>n\\<^sub>s + n\\<^sub>p. n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n''>n\\<^sub>s + n\\<^sub>p.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "using cas"], ["proof (prove)\nusing this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<forall>n''>n\\<^sub>s + n\\<^sub>p.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n''>n\\<^sub>s + n\\<^sub>p.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid'\n                                (GREATEST n'.\n                                    n' < n\\<^sub>s \\<and>\n                                    \\<not> Option.is_none\n      (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n')))\\<^esub>t (GREATEST n'.\n                           n' < n\\<^sub>s \\<and>\n                           \\<not> Option.is_none\n                                   (devBC t\n                                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                     nid' n')))) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n\\<^sub>s + n\\<^sub>p) 0)\n  < length sbc\n  n\\<^sub>s + n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s + n\\<^sub>p.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     (n\\<^sub>s + n\\<^sub>p) 0)\n  < length sbc\n  n\\<^sub>s + n\\<^sub>p\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>p \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s + n\\<^sub>p.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "assume asmp: \"\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\""], ["proof (state)\nthis:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"n\\<^sub>s\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"\\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s))", "using cas"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s))", "by simp"], ["proof (state)\nthis:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n\\<^sub>s))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n\\<^sub>s))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from asmp"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)", "have \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>", "using devBC_act"], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n  \\<not> Option.is_none (devBC ?t ?n ?nid ?n') \\<Longrightarrow>\n  \\<parallel>the (devBC ?t ?n ?nid ?n')\\<parallel>\\<^bsub>?t ?n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n\\<^sub>s))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>", "have \"the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<in>actDn (t n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n\\<^sub>s))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s)\n    \\<in> actDn (t n\\<^sub>s)", "using actDn_def"], ["proof (prove)\nusing this:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n\\<^sub>s))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n\\<^sub>s)\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  actDn ?k \\<equiv>\n  {nid.\n   \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> \\<not> honest nid}\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n\\<^sub>s)\n    \\<in> actDn (t n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s)\n  \\<in> actDn (t n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "hence \"length (bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<^esub>(t n\\<^sub>s))) < length sbc\""], ["proof (prove)\nusing this:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s)\n  \\<in> actDn (t n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n    < length sbc", "using assms(2)"], ["proof (prove)\nusing this:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n\\<^sub>s)\n  \\<in> actDn (t n\\<^sub>s)\n  \\<forall>nid\\<in>actDn (t n\\<^sub>s).\n     length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n\\<^sub>s)) < length sbc\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>the (devBC t\n                                \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                                nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n  < length sbc\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n  < length sbc\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from asmp"], ["proof (chain)\npicking this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)", "have\n                      \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0 = bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s)\\<^esub>(t n\\<^sub>s))\""], ["proof (prove)\nusing this:\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0 =\n    bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s)", "by simp"], ["proof (state)\nthis:\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n  < length sbc\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s)", "have \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n\\<^sub>s 0) < length sbc\""], ["proof (prove)\nusing this:\n  length\n   (bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s))\n  < length sbc\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n   n\\<^sub>s 0 =\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' n\\<^sub>s)\\<^esub>t n\\<^sub>s)\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n\\<^sub>s 0)\n    < length sbc", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "from cas"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))", "have \"\\<forall>n''>n\\<^sub>s. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n'))\n\ngoal (1 subgoal):\n 1. \\<forall>n''>n\\<^sub>s.\n       n''\n       \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n       \\<not> Option.is_none\n               (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 n'') \\<longrightarrow>\n       \\<not> honest\n               (the (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n''))", "by simp"], ["proof (state)\nthis:\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' n\\<^sub>s) \\<Longrightarrow>\n    \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     n\\<^sub>s 0)\n  < length sbc\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<forall>n''>n\\<^sub>s.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n       n\\<^sub>s \\<le> n' \\<and>\n       length\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' 0)\n       < length sbc \\<and>\n       (\\<forall>n''>n'.\n           n''\n           \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n           \\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'') \\<longrightarrow>\n           \\<not> honest\n                   (the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' n'')))", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))", "obtain n' where \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n'\" and \"n'\\<ge>n\\<^sub>s\"\n                  and \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0) < length sbc\"\n                  and dishonest: \"\\<forall>n''>n'. n''\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'') \\<longrightarrow> \\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n''))\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<le>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>.\n     n\\<^sub>s \\<le> n' \\<and>\n     length\n      (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        n' 0)\n     < length sbc \\<and>\n     (\\<forall>n''>n'.\n         n''\n         \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n         \\<not> Option.is_none\n                 (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' n'') \\<longrightarrow>\n         \\<not> honest\n                 (the (devBC t\n                        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                        nid' n'')))\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>;\n         n\\<^sub>s \\<le> n';\n         length\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' 0)\n         < length sbc;\n         \\<forall>n''>n'.\n            n''\n            \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n            \\<not> Option.is_none\n                    (devBC t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                      nid' n'') \\<longrightarrow>\n            \\<not> honest\n                    (the (devBC t\n                           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                           nid' n''))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  n\\<^sub>s \\<le> n'\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     0)\n  < length sbc\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "interpret ut: dishonest \"devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\" \"\\<lambda>n. dmining t (n' + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dishonest\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n       n')\n     (\\<lambda>n. dmining t (n' + n))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "fix n''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "from devExt_devop[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' n']"], ["proof (chain)\npicking this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n' + Suc ?n')\\<^esub> \\<and>\n  n' + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc ?n'))\\<^esub>t (n' + Suc ?n'))", "have \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'') \\<or>\n                    (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub> \\<and> n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc ?n'))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     ?n') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc ?n') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       ?n' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc ?n')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc ?n'))\\<parallel>\\<^bsub>t\n           (n' + Suc ?n')\\<^esub> \\<and>\n  n' + Suc ?n'\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc ?n'))\\<^esub>t (n' + Suc ?n'))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))", "."], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       prefix\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' (Suc n))\n        (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          n' n) \\<or>\n       (\\<exists>b.\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' (Suc n) =\n           devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n @\n           [b]) \\<and>\n       dmining t (n' + Suc n)", "thus \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'')\n                    \\<or> (\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> dmining t (n' + Suc n'')\""], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "assume \"prefix (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'')) (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'')\""], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'')\n\ngoal (2 subgoals):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')\n 2. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "thus ?thesis"], ["proof (prove)\nusing this:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'')\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "by simp"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "assume \"(\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]) \\<and> \\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')) \\<and> \\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub> \\<and> n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and> mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (state)\nthis:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "hence \"\\<exists>b. devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (Suc n'') = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' n'' @ [b]\"\n                      and \"\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\"\n                      and \"\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\"\n                      and \"n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\"\n                      and \"mining (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n'')) \\<and>\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t\n           (n' + Suc n'')\\<^esub> \\<and>\n  n' + Suc n''\n  \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b] &&&\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' (n' + Suc n''))) &&&\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> &&&\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> &&&\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "moreover"], ["proof (state)\nthis:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "from \\<open>n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<close> \\<open>\\<not> Option.is_none (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<close>"], ["proof (chain)\npicking this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))", "have \"\\<not> honest (the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n'')))\""], ["proof (prove)\nusing this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n' + Suc n'')))", "using dishonest"], ["proof (prove)\nusing this:\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<forall>n''>n'.\n     n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n     \\<not> Option.is_none\n             (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n               nid' n'') \\<longrightarrow>\n     \\<not> honest\n             (the (devBC t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                    nid' n''))\n\ngoal (1 subgoal):\n 1. \\<not> honest\n            (the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid' (n' + Suc n'')))", "by simp"], ["proof (state)\nthis:\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "with \\<open>\\<parallel>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))", "have \"the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' (n' + Suc n''))\\<in>actDn (t (n' + Suc n''))\""], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n' + Suc n''))\n    \\<in> actDn (t (n' + Suc n''))", "using actDn_def"], ["proof (prove)\nusing this:\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  \\<not> honest\n          (the (devBC t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n                 (n' + Suc n'')))\n  actDn ?k \\<equiv>\n  {nid.\n   \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> \\<not> honest nid}\n\ngoal (1 subgoal):\n 1. the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n          (n' + Suc n''))\n    \\<in> actDn (t (n' + Suc n''))", "by simp"], ["proof (state)\nthis:\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    \\<not> Option.is_none\n            (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n              nid' (n' + Suc n'')) \\<and>\n    \\<parallel>the (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     (n' +\n                      Suc n''))\\<parallel>\\<^bsub>t\n             (n' + Suc n'')\\<^esub> \\<and>\n    n' + Suc n''\n    \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<and>\n    mining\n     (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            (n' +\n                             Suc n''))\\<^esub>t\n         (n' + Suc n'')) \\<Longrightarrow>\n    prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "using dmining_def"], ["proof (prove)\nusing this:\n  \\<exists>b.\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      (Suc n'') =\n     devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n      n'' @\n     [b]\n  \\<not> Option.is_none\n          (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' (n' + Suc n''))\n  \\<parallel>the (devBC t\n                   \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                   nid'\n                   (n' +\n                    Suc n''))\\<parallel>\\<^bsub>t (n' + Suc n'')\\<^esub>\n  n' + Suc n'' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  mining\n   (\\<sigma>\\<^bsub>the (devBC t\n                          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                          nid' (n' + Suc n''))\\<^esub>t (n' + Suc n''))\n  the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n        (n' + Suc n''))\n  \\<in> actDn (t (n' + Suc n''))\n  dmining ?t \\<equiv>\n  \\<lambda>n.\n     \\<exists>nid\\<in>actDn (?t n). mining (\\<sigma>\\<^bsub>nid\\<^esub>?t n)\n\ngoal (1 subgoal):\n 1. prefix\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n''))\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'') \\<or>\n    (\\<exists>b.\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' (Suc n'') =\n        devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n         n' n'' @\n        [b]) \\<and>\n    dmining t (n' + Suc n'')", "by auto"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (Suc n''))\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     n'') \\<or>\n  (\\<exists>b.\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (Suc n'') =\n      devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       n'' @\n      [b]) \\<and>\n  dmining t (n' + Suc n'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "interpret dishonest_growth \"devLgthBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\" \"\\<lambda>n. dmining t (n' + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dishonest_growth\n     (\\<lambda>n'a.\n         length\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n'a))\n     (\\<lambda>n. dmining t (n' + n))", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "interpret honest_growth \"\\<lambda>n. PoW t (n' + n)\" \"\\<lambda>n. hmining t (n' + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. honest_growth (\\<lambda>n. PoW t (n' + n))\n     (\\<lambda>n. hmining t (n' + n))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. PoW t (n' + n) \\<le> PoW t (n' + Suc n)\n 2. \\<And>n.\n       hmining t (n' + Suc n) \\<Longrightarrow>\n       PoW t (n' + n) < PoW t (n' + Suc n)", "show \"\\<And>n. PoW t (n' + n) \\<le> PoW t (n' + Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. PoW t (n' + n) \\<le> PoW t (n' + Suc n)", "using pow_mono"], ["proof (prove)\nusing this:\n  ?n \\<le> ?n' \\<Longrightarrow> PoW ?t ?n \\<le> PoW ?t ?n'\n\ngoal (1 subgoal):\n 1. \\<And>n. PoW t (n' + n) \\<le> PoW t (n' + Suc n)", "by simp"], ["proof (state)\nthis:\n  PoW t (n' + ?n3) \\<le> PoW t (n' + Suc ?n3)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       hmining t (n' + Suc n) \\<Longrightarrow>\n       PoW t (n' + n) < PoW t (n' + Suc n)", "show \"\\<And>n. hmining t (n' + Suc n) \\<Longrightarrow> PoW t (n' + n) < PoW t (n' + Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       hmining t (n' + Suc n) \\<Longrightarrow>\n       PoW t (n' + n) < PoW t (n' + Suc n)", "using pow_mining_suc"], ["proof (prove)\nusing this:\n  hmining ?t (Suc ?n) \\<Longrightarrow> PoW ?t ?n < PoW ?t (Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       hmining t (n' + Suc n) \\<Longrightarrow>\n       PoW t (n' + n) < PoW t (n' + Suc n)", "by simp"], ["proof (state)\nthis:\n  hmining t (n' + Suc ?n3) \\<Longrightarrow>\n  PoW t (n' + ?n3) < PoW t (n' + Suc ?n3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "interpret bg: bounded_growth \"length sbc\" \"\\<lambda>n. PoW t (n' + n)\" \"devLgthBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\" \"\\<lambda>n. hmining t (n' + n)\" \"\\<lambda>n. dmining t (n' + n)\" \"length sbc\" cb"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_growth (\\<lambda>n. PoW t (n' + n))\n     (\\<lambda>n'a.\n         length\n          (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n            nid' n' n'a))\n     (\\<lambda>n. hmining t (n' + n)) (\\<lambda>n. dmining t (n' + n))\n     (length sbc) cb", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}\n 2. length sbc + cb \\<le> PoW t (n' + 0)\n 3. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       0)\n    < length sbc", "from assms(3) \\<open>n'\\<ge>n\\<^sub>s\\<close>"], ["proof (chain)\npicking this:\n  length sbc + cb \\<le> PoW t n\\<^sub>s\n  n\\<^sub>s \\<le> n'", "show \"length sbc + cb \\<le> PoW t (n' + 0)\""], ["proof (prove)\nusing this:\n  length sbc + cb \\<le> PoW t n\\<^sub>s\n  n\\<^sub>s \\<le> n'\n\ngoal (1 subgoal):\n 1. length sbc + cb \\<le> PoW t (n' + 0)", "using pow_mono[of n\\<^sub>s n' t]"], ["proof (prove)\nusing this:\n  length sbc + cb \\<le> PoW t n\\<^sub>s\n  n\\<^sub>s \\<le> n'\n  n\\<^sub>s \\<le> n' \\<Longrightarrow> PoW t n\\<^sub>s \\<le> PoW t n'\n\ngoal (1 subgoal):\n 1. length sbc + cb \\<le> PoW t (n' + 0)", "by simp"], ["proof (state)\nthis:\n  length sbc + cb \\<le> PoW t (n' + 0)\n\ngoal (2 subgoals):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}\n 2. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       0)\n    < length sbc", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}\n 2. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       0)\n    < length sbc", "from \\<open>length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0) < length sbc\\<close>"], ["proof (chain)\npicking this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     0)\n  < length sbc", "show \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' 0) < length sbc\""], ["proof (prove)\nusing this:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       0)\n    < length sbc", "."], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     0)\n  < length sbc\n\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "fix n'' n'''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "assume \"cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> dmining t (n' + i)}\""], ["proof (state)\nthis:\n  cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> dmining t (n' + i)}\n\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "hence \"cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}\""], ["proof (prove)\nusing this:\n  cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> dmining t (n' + i)}\n\ngoal (1 subgoal):\n 1. cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}", "using cardshift[of n'' n''' \"dmining t\" n']"], ["proof (prove)\nusing this:\n  cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> dmining t (n' + i)}\n  card {i. n'' < i \\<and> i \\<le> n''' \\<and> dmining t (n' + i)} =\n  card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}\n\ngoal (1 subgoal):\n 1. cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}", "by simp"], ["proof (state)\nthis:\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}\n\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "with fair[of \"n'' + n'\" \"n''' + n'\" t]"], ["proof (chain)\npicking this:\n  cb < card\n        {i. n'' + n' < i \\<and>\n            i \\<le> n''' + n' \\<and> dmining t i} \\<Longrightarrow>\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}", "have \"cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\""], ["proof (prove)\nusing this:\n  cb < card\n        {i. n'' + n' < i \\<and>\n            i \\<le> n''' + n' \\<and> dmining t i} \\<Longrightarrow>\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> dmining t i}\n\ngoal (1 subgoal):\n 1. cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}", "by simp"], ["proof (state)\nthis:\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n\ngoal (1 subgoal):\n 1. \\<And>n n'a.\n       cb < card\n             {i. n < i \\<and>\n                 i \\<le> n'a \\<and> dmining t (n' + i)} \\<Longrightarrow>\n       cb < card {i. n < i \\<and> i \\<le> n'a \\<and> hmining t (n' + i)}", "thus \"cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> hmining t (n' + i)}\""], ["proof (prove)\nusing this:\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n\ngoal (1 subgoal):\n 1. cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> hmining t (n' + i)}", "using cardshift[of n'' n''' \"hmining t\" n']"], ["proof (prove)\nusing this:\n  cb < card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n  card {i. n'' < i \\<and> i \\<le> n''' \\<and> hmining t (n' + i)} =\n  card {i. n'' + n' < i \\<and> i \\<le> n''' + n' \\<and> hmining t i}\n\ngoal (1 subgoal):\n 1. cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> hmining t (n' + i)}", "by simp"], ["proof (state)\nthis:\n  cb < card {i. n'' < i \\<and> i \\<le> n''' \\<and> hmining t (n' + i)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "from \\<open>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n'\\<close>"], ["proof (chain)\npicking this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"length (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n')) < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n    < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using bg.hn_upper_bound[of \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n'\"]"], ["proof (prove)\nusing this:\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t\n     (n' + (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n\ngoal (1 subgoal):\n 1. length\n     (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n       (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n    < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "from \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close> \\<open>\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<ge>n'\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "have \"bc (\\<sigma>\\<^bsub>the (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n' (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>-n')\""], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "using devExt_bc_geq[of t \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" nid' \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\" n']"], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<lbrakk>\\<not> Option.is_none\n                   (devBC t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid'\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>);\n   n' \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> devExt t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                     nid' n'\n                     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> -\n                      n') =\n                    bc (\\<sigma>\\<^bsub>the\n   (devBC t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid'\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. bc (\\<sigma>\\<^bsub>the (devBC t\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                              nid'\n                              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n                 \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "by simp"], ["proof (state)\nthis:\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')", "have \"length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))) < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using \\<open>\\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  \\<not> prefix sbc\n          (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  length\n   (devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n     (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n'))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  bc (\\<sigma>\\<^bsub>the (devBC t\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n                            nid'\n                            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\\<^esub>t\n               \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  devExt t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> nid' n'\n   (\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> - n')\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. length\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n    < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by simp"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  length\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "have \"PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<le> length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\" (is \"?lhs \\<le> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>honest nid\\<close> \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "have \"?lhs \\<le> length (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "using pow_le_max"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  \\<lbrakk>honest ?tid;\n   \\<parallel>?tid\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> PoW ?t ?n\n                    \\<le> length\n                           (MAX (pin (\\<sigma>\\<^bsub>?tid\\<^esub>?t ?n)))\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "by simp"], ["proof (state)\nthis:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "also"], ["proof (state)\nthis:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) = MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\\<close>"], ["proof (chain)\npicking this:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "have \"\\<dots> = length (bc (\\<sigma>\\<^bsub>nid'\\<^esub>(t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (prove)\nusing this:\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. length\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))) =\n    length\n     (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  length\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))) =\n  length\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "finally"], ["proof (chain)\npicking this:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "show ?thesis"], ["proof (prove)\nusing this:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n    \\<le> length\n           (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n       \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "."], ["proof (state)\nthis:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> prefix sbc\n            (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n        \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  length\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "show False"], ["proof (prove)\nusing this:\n  length\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  < PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  PoW t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  \\<le> length\n         (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t\n     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "moreover"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>=n\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "ultimately"], ["proof (chain)\npicking this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>nid'\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid'\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))", "by auto"], ["proof (state)\nthis:\n  prefix sbc\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  prefix sbc\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>=n\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n 2. \\<not> ?P \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  prefix sbc\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)) @\n      [b])\n  prefix sbc\n   (MAX (pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by auto"], ["proof (state)\nthis:\n  prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume \"\\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>). length b > length (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)))\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<exists>n'. latestAct_cond nid t n n'\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'. latestAct_cond nid t n n'", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<not> mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n            mining (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and> (\\<exists>b. bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) = bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @ [b])\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "using \\<open>honest nid\\<close> bhv_hn_in[of nid n t]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                    \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n             length\n              (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n         \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n             < length b)\n  \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'. latestAct_cond nid t n n'\n  honest nid\n  \\<lbrakk>honest nid;\n   \\<exists>n'\\<ge>n. \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>;\n   \\<exists>n'. latestAct_cond nid t n n';\n   \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                     \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n              length\n               (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n          \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n              < length b)\\<rbrakk>\n  \\<Longrightarrow> \\<not> mining\n                            (\\<sigma>\\<^bsub>nid\\<^esub>t\n                   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n              \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                    bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n              \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n                    mining\n                     (\\<sigma>\\<^bsub>nid\\<^esub>t\n            \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n                    (\\<exists>b.\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n                  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n                        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n                  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n                        [b])\n\ngoal (1 subgoal):\n 1. \\<not> mining\n            (\\<sigma>\\<^bsub>nid\\<^esub>t\n   \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n    bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n    mining\n     (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n    (\\<exists>b.\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n        bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n        [b])", "by simp"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "have \"prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>\\<exists>n'. latestAct_cond nid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "using latestAct_prop(2)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> < ?n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from lAct"], ["proof (chain)\npicking this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>", "have \"\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> \\<ge> n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "using latestActless"], ["proof (prove)\nusing this:\n  \\<exists>n'<n.\n     n\\<^sub>s \\<le> n' \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<exists>n'\\<ge>?n\\<^sub>s. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  ?n\\<^sub>s \\<le> \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "from \\<open>\\<exists>n'. latestAct_cond nid t n n'\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'. latestAct_cond nid t n n'", "have \"\\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "using latestAct_prop(1)"], ["proof (prove)\nusing this:\n  \\<exists>n'. latestAct_cond nid t n n'\n  \\<exists>n'. latestAct_cond ?nid ?t ?n n' \\<Longrightarrow>\n  \\<parallel>?nid\\<parallel>\\<^bsub>?t \\<langle>?nid \\<leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>nid\\<parallel>\\<^bsub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "with \\<open>honest nid\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>", "have \"nid \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\""], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. nid\n    \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "using actHn_def"], ["proof (prove)\nusing this:\n  honest nid\n  \\<parallel>nid\\<parallel>\\<^bsub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\\<^esub>\n  actHn ?k \\<equiv>\n  {nid. \\<parallel>nid\\<parallel>\\<^bsub>?k\\<^esub> \\<and> honest nid}\n\ngoal (1 subgoal):\n 1. nid\n    \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  nid \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  nid \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  nid \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "using step.IH"], ["proof (prove)\nusing this:\n  \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub> < n\n  n\\<^sub>s \\<le> \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>\n  nid \\<in> actHn (t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>)\n  \\<forall>m\\<ge>n\\<^sub>s.\n     m < n \\<longrightarrow>\n     (\\<forall>nid\\<in>actHn (t m).\n         prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. prefix sbc\n     (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))", "by auto"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>=n\""], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "using nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>pin (\\<sigma>\\<^bsub>nid\\<^esub>t\n                      \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>).\n               length\n                (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n           \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n               < length b) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> mining\n          (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n  bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<or>\n  mining\n   (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) \\<and>\n  (\\<exists>b.\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub>) =\n      bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n\\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>) @\n      [b])\n  prefix sbc\n   (bc (\\<sigma>\\<^bsub>nid\\<^esub>t \\<langle>nid \\<leftarrow> t\\<rangle>\\<^bsub>n\\<^esub>))\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^esub> = n\n\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by auto"], ["proof (state)\nthis:\n  prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "assume nAct: \"\\<not> (\\<exists>n' < n. n' \\<ge> n\\<^sub>s \\<and> \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'<n.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'<n.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "from step.hyps"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n", "have \"n\\<^sub>s \\<le> n\""], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n\n\ngoal (1 subgoal):\n 1. n\\<^sub>s \\<le> n", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>n'<n.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\n  n\\<^sub>s \\<le> n", "have \"\\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'<n.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\n  n\\<^sub>s \\<le> n\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n", "using \\<open>\\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\\<close> nxtAct_eq[of n\\<^sub>s n nid t]"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'<n.\n             n\\<^sub>s \\<le> n' \\<and>\n             \\<parallel>nid\\<parallel>\\<^bsub>t n'\\<^esub>)\n  n\\<^sub>s \\<le> n\n  \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<lbrakk>n\\<^sub>s \\<le> n; \\<parallel>nid\\<parallel>\\<^bsub>t n\\<^esub>;\n   \\<forall>n''\\<ge>n\\<^sub>s.\n      n'' < n \\<longrightarrow>\n      \\<not> \\<parallel>nid\\<parallel>\\<^bsub>t n''\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> n =\n                    \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n", "by simp"], ["proof (state)\nthis:\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'<n.\n               n\\<^sub>s \\<le> n' \\<and>\n               \\<parallel>nid\\<parallel>\\<^bsub>t\n           n'\\<^esub>) \\<Longrightarrow>\n    prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "with \\<open>honest nid\\<close>"], ["proof (chain)\npicking this:\n  honest nid\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n", "show ?thesis"], ["proof (prove)\nusing this:\n  honest nid\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\n\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "using assms(1)"], ["proof (prove)\nusing this:\n  honest nid\n  \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\n  \\<forall>nid.\n     honest nid \\<longrightarrow>\n     prefix sbc\n      (bc (\\<sigma>\\<^bsub>nid\\<^esub>t\n \\<langle>nid \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>))\n\ngoal (1 subgoal):\n 1. prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by auto"], ["proof (state)\nthis:\n  prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n\\<^sub>s \\<le> n \\<Longrightarrow>\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. sbc \\<noteq> [] \\<Longrightarrow>\n    \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "with assms(5)"], ["proof (chain)\npicking this:\n  n\\<^sub>s \\<le> n\n  n\\<^sub>s \\<le> n \\<Longrightarrow>\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>s \\<le> n\n  n\\<^sub>s \\<le> n \\<Longrightarrow>\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal (1 subgoal):\n 1. \\<forall>nid\\<in>actHn (t n).\n       prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))", "by simp"], ["proof (state)\nthis:\n  \\<forall>nid\\<in>actHn (t n).\n     prefix sbc (bc (\\<sigma>\\<^bsub>nid\\<^esub>t n))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}