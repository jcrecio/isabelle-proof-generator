{"file_name": "/home/qj213/afp-2021-10-22/thys/Architectural_Design_Patterns/Blackboard.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Architectural_Design_Patterns", "problem_names": ["lemma conn2_bb:\n    fixes k and kid::'kid\n    assumes \"\\<parallel>kid\\<parallel>\\<^bsub>k\\<^esub>\"\n    shows \"bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(k))\\<in>ksop (\\<sigma>\\<^bsub>kid\\<^esub>(k))\"", "lemma sks_prob:\n    \"p = prob (sKs p)\"", "lemma pSolved_Ind:\n    fixes t and t'::\"nat \\<Rightarrow>'BB\" and p and t''::\"nat \\<Rightarrow>'KS\"\n    assumes \"t\\<in>arch\" and\n      \"\\<forall>n. (\\<exists>n'\\<ge>n. \\<parallel>sKs (bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)))\\<parallel>\\<^bsub>t n'\\<^esub>)\"\n    shows\n      \"\\<forall>n. (\\<exists>P. sub P \\<in> bbrp(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)) \\<and> p \\<in> P) \\<longrightarrow>\n        (\\<exists>m\\<ge>n. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m)))\" (*\\eqref{eq:bb:g}*)\n  \\<comment> \\<open>The proof is by well-founded induction over the subproblem relation @{term sb}\\<close>", "theorem pSolved:\n    fixes t and t'::\"nat \\<Rightarrow>'BB\" and t''::\"nat \\<Rightarrow>'KS\"\n    assumes \"t\\<in>arch\" and\n      \"\\<forall>n. (\\<exists>n'\\<ge>n. \\<parallel>sKs (bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)))\\<parallel>\\<^bsub>t n'\\<^esub>)\"\n    shows\n      \"\\<forall>n. (\\<forall>P. (sub P \\<in> bbrp(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n))\n        \\<longrightarrow> (\\<forall>p \\<in> P. (\\<exists>m\\<ge>n. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m))))))\""], "translations": [["", "lemma conn2_bb:\n    fixes k and kid::'kid\n    assumes \"\\<parallel>kid\\<parallel>\\<^bsub>k\\<^esub>\"\n    shows \"bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(k))\\<in>ksop (\\<sigma>\\<^bsub>kid\\<^esub>(k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "from assms"], ["proof (chain)\npicking this:\n  \\<parallel>kid\\<parallel>\\<^bsub>k\\<^esub>", "have \"ksop (\\<sigma>\\<^bsub>kid\\<^esub>(k)) = (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}. {bbop (\\<sigma>\\<^bsub>bid\\<^esub>(k))})\""], ["proof (prove)\nusing this:\n  \\<parallel>kid\\<parallel>\\<^bsub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n    (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n        {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})", "using conn2"], ["proof (prove)\nusing this:\n  \\<parallel>kid\\<parallel>\\<^bsub>k\\<^esub>\n  \\<parallel>?kid\\<parallel>\\<^bsub>?k\\<^esub> \\<Longrightarrow>\n  ksop (\\<sigma>\\<^bsub>?kid\\<^esub>?k) =\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>?k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>?k)})\n\ngoal (1 subgoal):\n 1. ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n    (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n        {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})", "by simp"], ["proof (state)\nthis:\n  ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})\n\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "moreover"], ["proof (state)\nthis:\n  ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})\n\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "have \"(\\<Union>bid.{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>})={the_bb}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>bid. {bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}) =\n    {the_bb}", "using pb.ts_prop(1)"], ["proof (prove)\nusing this:\n  \\<parallel>?id\\<parallel>\\<^bsub>?k\\<^esub> \\<Longrightarrow> ?id = the_bb\n\ngoal (1 subgoal):\n 1. (\\<Union>bid. {bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}) =\n    {the_bb}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>bid. {bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}) =\n  {the_bb}\n\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "hence \"(\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}. {bbop (\\<sigma>\\<^bsub>bid\\<^esub>(k))}) = {bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(k))}\""], ["proof (prove)\nusing this:\n  (\\<Union>bid. {bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}) =\n  {the_bb}\n\ngoal (1 subgoal):\n 1. (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n        {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)}) =\n    {bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)}) =\n  {bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)}\n\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "ultimately"], ["proof (chain)\npicking this:\n  ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)}) =\n  {bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)}", "show ?thesis"], ["proof (prove)\nusing this:\n  ksop (\\<sigma>\\<^bsub>kid\\<^esub>k) =\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)})\n  (\\<Union>bid\\<in>{bid. \\<parallel>bid\\<parallel>\\<^bsub>k\\<^esub>}.\n      {bbop (\\<sigma>\\<^bsub>bid\\<^esub>k)}) =\n  {bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)}\n\ngoal (1 subgoal):\n 1. bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n    \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)", "by simp"], ["proof (state)\nthis:\n  bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>k)\n  \\<in> ksop (\\<sigma>\\<^bsub>kid\\<^esub>k)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Knowledge Sources\""], ["", "text \\<open>\n    In the following we introduce an abbreviation for knowledge sources which are able to solve a specific problem.\n\\<close>"], ["", "definition sKs:: \"PROB \\<Rightarrow> 'kid\" where\n    \"sKs p \\<equiv> (SOME kid. p = prob kid)\""], ["", "lemma sks_prob:\n    \"p = prob (sKs p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = prob (sKs p)", "using sKs_def someI_ex[of \"\\<lambda>kid. p = prob kid\"] ks1"], ["proof (prove)\nusing this:\n  sKs ?p \\<equiv> SOME kid. ?p = prob kid\n  \\<exists>x. p = prob x \\<Longrightarrow> p = prob (SOME x. p = prob x)\n  \\<forall>p. \\<exists>ks. p = prob ks\n\ngoal (1 subgoal):\n 1. p = prob (sKs p)", "by auto"], ["", "subsubsection \"Architectural Guarantees\""], ["", "text\\<open>\n    The following theorem verifies that a problem is eventually solved by the pattern even if no knowledge source exist which can solve the problem on its own.\n    It assumes, however, that for every open sub problem, a corresponding knowledge source able to solve the problem will be eventually activated.\n\\<close>"], ["", "lemma pSolved_Ind:\n    fixes t and t'::\"nat \\<Rightarrow>'BB\" and p and t''::\"nat \\<Rightarrow>'KS\"\n    assumes \"t\\<in>arch\" and\n      \"\\<forall>n. (\\<exists>n'\\<ge>n. \\<parallel>sKs (bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)))\\<parallel>\\<^bsub>t n'\\<^esub>)\"\n    shows\n      \"\\<forall>n. (\\<exists>P. sub P \\<in> bbrp(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)) \\<and> p \\<in> P) \\<longrightarrow>\n        (\\<exists>m\\<ge>n. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m)))\" (*\\eqref{eq:bb:g}*)\n  \\<comment> \\<open>The proof is by well-founded induction over the subproblem relation @{term sb}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<exists>P.\n           sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n           p \\<in> P) \\<longrightarrow>\n       (\\<exists>m\\<ge>n.\n           (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "proof (rule wf_induct[where r=sb])\n    \\<comment> \\<open>We first show that the subproblem relation is indeed well-founded ...\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. wf sb\n 2. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> sb \\<longrightarrow>\n          (\\<forall>n.\n              (\\<exists>P.\n                  sub P\n                  \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n                  y \\<in> P) \\<longrightarrow>\n              (\\<exists>m\\<ge>n.\n                  (y, solve y) =\n                  bbcs\n                   (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))) \\<Longrightarrow>\n       \\<forall>n.\n          (\\<exists>P.\n              sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n              x \\<in> P) \\<longrightarrow>\n          (\\<exists>m\\<ge>n.\n              (x, solve x) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "show \"wf sb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf sb", "by (simp add: sbWF)"], ["proof (state)\nthis:\n  wf sb\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> sb \\<longrightarrow>\n          (\\<forall>n.\n              (\\<exists>P.\n                  sub P\n                  \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n                  y \\<in> P) \\<longrightarrow>\n              (\\<exists>m\\<ge>n.\n                  (y, solve y) =\n                  bbcs\n                   (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))) \\<Longrightarrow>\n       \\<forall>n.\n          (\\<exists>P.\n              sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n              x \\<in> P) \\<longrightarrow>\n          (\\<exists>m\\<ge>n.\n              (x, solve x) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "next\n    \\<comment> \\<open>... then we show that a problem @{term p} is indeed solved\\<close>\n    \\<comment> \\<open>if all its sub-problems @{term p'} are eventually solved\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> sb \\<longrightarrow>\n          (\\<forall>n.\n              (\\<exists>P.\n                  sub P\n                  \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n                  y \\<in> P) \\<longrightarrow>\n              (\\<exists>m\\<ge>n.\n                  (y, solve y) =\n                  bbcs\n                   (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))) \\<Longrightarrow>\n       \\<forall>n.\n          (\\<exists>P.\n              sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n              x \\<in> P) \\<longrightarrow>\n          (\\<exists>m\\<ge>n.\n              (x, solve x) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> sb \\<longrightarrow>\n          (\\<forall>n.\n              (\\<exists>P.\n                  sub P\n                  \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n                  y \\<in> P) \\<longrightarrow>\n              (\\<exists>m\\<ge>n.\n                  (y, solve y) =\n                  bbcs\n                   (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))) \\<Longrightarrow>\n       \\<forall>n.\n          (\\<exists>P.\n              sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n              x \\<in> P) \\<longrightarrow>\n          (\\<exists>m\\<ge>n.\n              (x, solve x) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "assume indH: \"\\<forall>p'. (p', p) \\<in> sb \\<longrightarrow> (\\<forall>n. (\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)) \\<and> p'\\<in>P)\n      \\<longrightarrow> (\\<exists>m\\<ge>n. (p',solve(p')) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m))))\""], ["proof (state)\nthis:\n  \\<forall>p'.\n     (p', p) \\<in> sb \\<longrightarrow>\n     (\\<forall>n.\n         (\\<exists>P.\n             sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n             p' \\<in> P) \\<longrightarrow>\n         (\\<exists>m\\<ge>n.\n             (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> sb \\<longrightarrow>\n          (\\<forall>n.\n              (\\<exists>P.\n                  sub P\n                  \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n                  y \\<in> P) \\<longrightarrow>\n              (\\<exists>m\\<ge>n.\n                  (y, solve y) =\n                  bbcs\n                   (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))) \\<Longrightarrow>\n       \\<forall>n.\n          (\\<exists>P.\n              sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n              x \\<in> P) \\<longrightarrow>\n          (\\<exists>m\\<ge>n.\n              (x, solve x) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "show \"\\<forall>n. (\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)) \\<and> p \\<in> P)\n      \\<longrightarrow> (\\<exists>m\\<ge>n. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<exists>P.\n           sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n           p \\<in> P) \\<longrightarrow>\n       (\\<exists>m\\<ge>n.\n           (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<exists>P.\n           sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n           p \\<in> P) \\<longrightarrow>\n       (\\<exists>m\\<ge>n.\n           (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "fix n\\<^sub>0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<exists>P.\n           sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n           p \\<in> P) \\<longrightarrow>\n       (\\<exists>m\\<ge>n.\n           (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "show \"(\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>0)) \\<and> p \\<in> P) \\<longrightarrow>\n      (\\<exists>m\\<ge>n\\<^sub>0. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>P.\n        sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n        p \\<in> P) \\<longrightarrow>\n    (\\<exists>m\\<ge>n\\<^sub>0.\n        (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "assume \"\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>0)) \\<and> p \\<in> P\""], ["proof (state)\nthis:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"(\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>0)) \\<and> p \\<in> P) \\<longrightarrow> (\\<exists>n'\\<ge>n\\<^sub>0. p=bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>P.\n        sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n        p \\<in> P) \\<longrightarrow>\n    (\\<exists>n'\\<ge>n\\<^sub>0.\n        p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n'))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "assume \"\\<exists>P. sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>0)) \\<and> p \\<in> P\""], ["proof (state)\nthis:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "then"], ["proof (chain)\npicking this:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P", "obtain P where \"sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>0))\" and \"p \\<in> P\""], ["proof (prove)\nusing this:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>sub P\n                 \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0);\n         p \\<in> P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "hence \"pb.eval the_bb t t' n\\<^sub>0 [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\""], ["proof (prove)\nusing this:\n  sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b", "using pb.baI"], ["proof (prove)\nusing this:\n  sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0)\n  p \\<in> P\n  ?\\<phi> (\\<sigma>\\<^bsub>the_bb\\<^esub>?t ?n) \\<Longrightarrow>\n  pb.eval the_bb ?t ?t' ?n [?\\<phi>]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\\<^sub>0\n   [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "moreover"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\\<^sub>0\n   [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "from pb.globE[OF bhvbb2]"], ["proof (chain)\npicking this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb.\n           sub ?P1 \\<in> bbrp bb \\<and>\n           ?q1 \\<in> ?P1]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>bb. ?q1 = bbop bb]\\<^sub>b)", "have\n            \"pb.eval the_bb t t' n\\<^sub>0 ([\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b \\<diamond>\\<^sub>b [\\<lambda>bb. p = bbop bb]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb.\n           sub ?P1 \\<in> bbrp bb \\<and>\n           ?q1 \\<in> ?P1]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>bb. ?q1 = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     ([\\<lambda>bb.\n          sub P \\<in> bbrp bb \\<and>\n          p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "using \\<open>t\\<in>arch\\<close>"], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb.\n           sub ?P1 \\<in> bbrp bb \\<and>\n           ?q1 \\<in> ?P1]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>bb. ?q1 = bbop bb]\\<^sub>b)\n  t \\<in> arch\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     ([\\<lambda>bb.\n          sub P \\<in> bbrp bb \\<and>\n          p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\\<^sub>0\n   ([\\<lambda>bb.\n        sub P \\<in> bbrp bb \\<and>\n        p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "ultimately"], ["proof (chain)\npicking this:\n  pb.eval the_bb t t' n\\<^sub>0\n   [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\n  pb.eval the_bb t t' n\\<^sub>0\n   ([\\<lambda>bb.\n        sub P \\<in> bbrp bb \\<and>\n        p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "have \"pb.eval the_bb t t' n\\<^sub>0 (\\<diamond>\\<^sub>b [\\<lambda>bb. p = bbop bb]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\\<^sub>0\n   [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\n  pb.eval the_bb t t' n\\<^sub>0\n   ([\\<lambda>bb.\n        sub P \\<in> bbrp bb \\<and>\n        p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "using pb.impE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\\<^sub>0\n   [\\<lambda>bb. sub P \\<in> bbrp bb \\<and> p \\<in> P]\\<^sub>b\n  pb.eval the_bb t t' n\\<^sub>0\n   ([\\<lambda>bb.\n        sub P \\<in> bbrp bb \\<and>\n        p \\<in> P]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n  pb.eval ?cid ?t ?t' ?n\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  pb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<longrightarrow>\n  pb.eval ?cid ?t ?t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\\<^sub>0\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\\<^sub>0\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "then"], ["proof (chain)\npicking this:\n  pb.eval the_bb t t' n\\<^sub>0\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "obtain n' where \"n'\\<ge>n\\<^sub>0\" and \"pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\\<^sub>0\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n\\<^sub>0 \\<le> n';\n         pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pb.evtE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\\<^sub>0\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n  pb.eval the_bb ?t ?t' ?n (\\<diamond>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<exists>n'\\<ge>?n. pb.eval the_bb ?t ?t' n' ?\\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n\\<^sub>0 \\<le> n';\n         pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n'\n  pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "hence \"p=bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n'))\""], ["proof (prove)\nusing this:\n  n\\<^sub>0 \\<le> n'\n  pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "using pb.baE"], ["proof (prove)\nusing this:\n  n\\<^sub>0 \\<le> n'\n  pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n  pb.eval the_bb ?t ?t' ?n [?\\<phi>]\\<^sub>b \\<Longrightarrow>\n  ?\\<phi> (\\<sigma>\\<^bsub>the_bb\\<^esub>?t ?n)\n\ngoal (1 subgoal):\n 1. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "by auto"], ["proof (state)\nthis:\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "with \\<open>n'\\<ge>n\\<^sub>0\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>0 \\<le> n'\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "show \"\\<exists>n'\\<ge>n\\<^sub>0. p=bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n'))\""], ["proof (prove)\nusing this:\n  n\\<^sub>0 \\<le> n'\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>P.\n      sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n      p \\<in> P) \\<longrightarrow>\n  (\\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n  (\\<exists>P.\n      sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n      p \\<in> P) \\<longrightarrow>\n  (\\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n'))", "obtain n where \"n\\<ge>n\\<^sub>0\" and \"p=bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n))\""], ["proof (prove)\nusing this:\n  \\<exists>P.\n     sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n     p \\<in> P\n  (\\<exists>P.\n      sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n      p \\<in> P) \\<longrightarrow>\n  (\\<exists>n'\\<ge>n\\<^sub>0. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n\\<^sub>0 \\<le> n;\n         p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto\n\n        \\<comment> \\<open>Problem p is provided at the output of the blackboard until it is solved\\<close>\n        \\<comment> \\<open>or forever...\\<close>"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from pb.globE[OF bhvbb3]"], ["proof (chain)\npicking this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       [\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n       [\\<lambda>bb. (?p1, solve ?p1) = bbcs bb]\\<^sub>b)", "have\n          \"pb.eval the_bb t t' n ([\\<lambda> bb. p = bbop(bb)]\\<^sub>b \\<longrightarrow>\\<^sup>b\n          ([\\<lambda> bb. p=bbop(bb)]\\<^sub>b \\<WW>\\<^sub>b [\\<lambda>bb. (p,solve(p)) = bbcs(bb)]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       [\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n       [\\<lambda>bb. (?p1, solve ?p1) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "using \\<open>t\\<in>arch\\<close>"], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  \\<forall>n'\\<ge>0.\n     pb.eval the_bb ?t ?t' n'\n      ([\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n       [\\<lambda>bb. ?p1 = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n       [\\<lambda>bb. (?p1, solve ?p1) = bbcs bb]\\<^sub>b)\n  t \\<in> arch\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "by auto"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n))\\<close>"], ["proof (chain)\npicking this:\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n)", "have\n          \"pb.eval the_bb t t' n [\\<lambda> bb. p=bbop bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b", "using \\<open>t\\<in>arch\\<close> pb.baI"], ["proof (prove)\nusing this:\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n)\n  t \\<in> arch\n  ?\\<phi> (\\<sigma>\\<^bsub>the_bb\\<^esub>?t ?n) \\<Longrightarrow>\n  pb.eval the_bb ?t ?t' ?n [?\\<phi>]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b", "have \"pb.eval the_bb t t' n\n          ([\\<lambda> bb. p=bbop(bb)]\\<^sub>b \\<WW>\\<^sub>b [\\<lambda> bb. (p,solve(p)) = bbcs(bb)]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "using pb.impE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    [\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t' n [\\<lambda>bb. p = bbop bb]\\<^sub>b\n  pb.eval ?cid ?t ?t' ?n\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  pb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<longrightarrow>\n  pb.eval ?cid ?t ?t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"pb.eval the_bb t t' n (([\\<lambda> bb. p=bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n          [\\<lambda> bb. (p,solve(p)) = bbcs bb]\\<^sub>b) \\<or>\\<^sup>b (\\<box>\\<^sub>b [\\<lambda> bb. p=bbop bb]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<or>\\<^sup>b\n      \\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "using pb.wuntil_def"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<WW>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  ?\\<gamma>' \\<WW>\\<^sub>b ?\\<gamma> \\<equiv>\n  ?\\<gamma>' \\<UU>\\<^sub>b ?\\<gamma> \\<or>\\<^sup>b \\<box>\\<^sub>b?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<or>\\<^sup>b\n      \\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<or>\\<^sup>b\n    \\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"pb.eval the_bb t t' n\n          ([\\<lambda>bb. p=bbop bb]\\<^sub>b \\<UU>\\<^sub>b [\\<lambda>bb. (p,solve(p)) = bbcs bb]\\<^sub>b) \\<or>\n          (pb.eval the_bb t t' n (\\<box>\\<^sub>b [\\<lambda> bb. p=bbop bb]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<or>\\<^sup>b\n    \\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<or>\n    pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "using pb.disjE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<or>\\<^sup>b\n    \\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n  pb.eval ?cid ?t ?t' ?n\n   (?\\<gamma> \\<or>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  pb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<or> pb.eval ?cid ?t ?t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<or>\n    pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<or>\n  pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n       p \\<in> P \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "thus \"\\<exists>m\\<ge>n\\<^sub>0. (p,solve p) = bbcs(\\<sigma>\\<^bsub>the_bb\\<^esub>(t m))\"\n        \\<comment> \\<open>We need to consider both cases, the case in which the problem is eventually\\<close>\n        \\<comment> \\<open>solved and the case in which the problem is always provided as an output\\<close>"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<or>\n  pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "proof\n          \\<comment> \\<open>First we consider the case in which the problem is eventually solved:\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "assume \"pb.eval the_bb t t' n\n            ([\\<lambda>bb. p=bbop bb]\\<^sub>b \\<UU>\\<^sub>b [\\<lambda>bb. (p,solve(p)) = bbcs bb]\\<^sub>b)\""], ["proof (state)\nthis:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"\\<exists>i\\<ge>n. (pb.eval the_bb t t' i\n            [\\<lambda>bb. (p,solve(p)) = bbcs bb]\\<^sub>b \\<and>\n            (\\<forall>k\\<ge>n. k<i \\<longrightarrow> pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n.\n       pb.eval the_bb t t' i\n        [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<and>\n       (\\<forall>k\\<ge>n.\n           k < i \\<longrightarrow>\n           pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b)", "using \\<open>t\\<in>arch\\<close> pb.untilE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n\n   ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n    [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  t \\<in> arch\n  pb.eval the_bb ?t ?t' ?n\n   (?\\<gamma>' \\<UU>\\<^sub>b ?\\<gamma>) \\<Longrightarrow>\n  \\<exists>n'\\<ge>?n.\n     pb.eval the_bb ?t ?t' n' ?\\<gamma> \\<and>\n     (\\<forall>n''\\<ge>?n.\n         n'' < n' \\<longrightarrow> pb.eval the_bb ?t ?t' n'' ?\\<gamma>')\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n.\n       pb.eval the_bb t t' i\n        [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<and>\n       (\\<forall>k\\<ge>n.\n           k < i \\<longrightarrow>\n           pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n.\n     pb.eval the_bb t t' i\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<and>\n     (\\<forall>k\\<ge>n.\n         k < i \\<longrightarrow>\n         pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n.\n     pb.eval the_bb t t' i\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<and>\n     (\\<forall>k\\<ge>n.\n         k < i \\<longrightarrow>\n         pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b)", "obtain i where \"i\\<ge>n\" and\n            \"pb.eval the_bb t t' i [\\<lambda>bb. (p,solve(p)) = bbcs bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n.\n     pb.eval the_bb t t' i\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b \\<and>\n     (\\<forall>k\\<ge>n.\n         k < i \\<longrightarrow>\n         pb.eval the_bb t t' k [\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>n \\<le> i;\n         pb.eval the_bb t t' i\n          [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n \\<le> i\n  pb.eval the_bb t t' i [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"(p,solve(p)) = bbcs(\\<sigma>\\<^bsub>the_bb\\<^esub>(t i))\""], ["proof (prove)\nusing this:\n  n \\<le> i\n  pb.eval the_bb t t' i [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)", "using \\<open>t\\<in>arch\\<close> pb.baEA"], ["proof (prove)\nusing this:\n  n \\<le> i\n  pb.eval the_bb t t' i [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n  t \\<in> arch\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   pb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>?c\\<^esub>?t\n           \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)", "by auto"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>i\\<ge>n\\<close> \\<open>n\\<ge>n\\<^sub>0\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> i\n  n\\<^sub>0 \\<le> n", "have \"i\\<ge>n\\<^sub>0\""], ["proof (prove)\nusing this:\n  n \\<le> i\n  n\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> i", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> i\n\ngoal (2 subgoals):\n 1. pb.eval the_bb t t' n\n     ([\\<lambda>bb. p = bbop bb]\\<^sub>b \\<UU>\\<^sub>b\n      [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)\n  n\\<^sub>0 \\<le> i", "show ?thesis"], ["proof (prove)\nusing this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t i)\n  n\\<^sub>0 \\<le> i\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<ge>n\\<^sub>0.\n     (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "next\n          \\<comment> \\<open>Now we consider the case in which p is always provided at the output\\<close>\n          \\<comment> \\<open>of the blackboard:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "assume \"pb.eval the_bb t t' n\n            (\\<box>\\<^sub>b [\\<lambda>bb. p=bbop bb]\\<^sub>b)\""], ["proof (state)\nthis:\n  pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"\\<forall>n'\\<ge>n. (pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n.\n       pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b", "using \\<open>t\\<in>arch\\<close> pb.globE"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t' n (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b)\n  t \\<in> arch\n  pb.eval the_bb ?t ?t' ?n (\\<box>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<forall>n'\\<ge>?n. pb.eval the_bb ?t ?t' n' ?\\<gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n.\n       pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n.\n     pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence outp: \"\\<forall>n'\\<ge>n. (p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n')))\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n.\n     pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "using \\<open>t\\<in>arch\\<close> pb.baE"], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n.\n     pb.eval the_bb t t' n' [\\<lambda>bb. p = bbop bb]\\<^sub>b\n  t \\<in> arch\n  pb.eval the_bb ?t ?t' ?n [?\\<phi>]\\<^sub>b \\<Longrightarrow>\n  ?\\<phi> (\\<sigma>\\<^bsub>the_bb\\<^esub>?t ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "by blast\n\n          \\<comment> \\<open>thus, by assumption there exists a KS which is able to solve p and which\\<close>\n          \\<comment> \\<open>is active at @{text n'}...\\<close>"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     \\<exists>n'\\<ge>n.\n        \\<parallel>sKs (bbop\n                         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n                   n))\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')", "have \"\\<exists>n'\\<ge>n. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     \\<exists>n'\\<ge>n.\n        \\<parallel>sKs (bbop\n                         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n                   n))\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>", "obtain n\\<^sub>k where \"n\\<^sub>k\\<ge>n\" and \"\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>k.\n        \\<lbrakk>n \\<le> n\\<^sub>k;\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto\n          \\<comment> \\<open>... and get the problem as its input.\\<close>"], ["proof (state)\nthis:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>n\\<^sub>k\\<ge>n\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> n\\<^sub>k", "have \"p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>k))\""], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n\ngoal (1 subgoal):\n 1. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)", "using outp"], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n  \\<forall>n'\\<ge>n. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)", "by simp"], ["proof (state)\nthis:\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)", "have \"p\\<in>ksop(\\<sigma>\\<^bsub>sKs p\\<^esub>(t n\\<^sub>k))\""], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)\n\ngoal (1 subgoal):\n 1. p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)", "using conn2_bb[of \"sKs p\" \"t n\\<^sub>k\"]"], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  p = bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub> \\<Longrightarrow>\n  bbop (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>k)\n  \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n\ngoal (1 subgoal):\n 1. p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)", "by simp\n\n          \\<comment> \\<open>thus the ks will either solve the problem or not solve it and\\<close>\n          \\<comment> \\<open>be activated forever\\<close>"], ["proof (state)\nthis:\n  p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"(\\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n            (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>(t n')) \\<and>\n            (\\<forall>n''\\<ge>n\\<^sub>k. n''<n' \\<longrightarrow> \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n            (\\<forall>n'\\<ge>n\\<^sub>k. (\\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n            (\\<not>(p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>(t n')))))\""], ["proof (prove)\nusing this:\n  p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n\ngoal (1 subgoal):\n 1. (\\<exists>n'\\<ge>n\\<^sub>k.\n        \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n        (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n        (\\<forall>n''\\<ge>n\\<^sub>k.\n            n'' < n' \\<longrightarrow>\n            \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n    (\\<forall>n'\\<ge>n\\<^sub>k.\n        \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n        (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n'))", "using \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close> actks[of t \"sKs p\"] \\<open>t\\<in>arch\\<close> sks_prob"], ["proof (prove)\nusing this:\n  p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  \\<lbrakk>t \\<in> arch; \\<parallel>sKs p\\<parallel>\\<^bsub>t ?n\\<^esub>;\n   ?p = prob (sKs p);\n   ?p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t ?n)\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>n'\\<ge>?n.\n                        \\<parallel>sKs p\\<parallel>\\<^bsub>t\n                      n'\\<^esub> \\<and>\n                        (?p, solve ?p) =\n                        ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n                        (\\<forall>n''\\<ge>?n.\n                            n'' < n' \\<longrightarrow>\n                            \\<parallel>sKs\n  p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n                    (\\<forall>n'\\<ge>?n.\n                        \\<parallel>sKs p\\<parallel>\\<^bsub>t\n                      n'\\<^esub> \\<and>\n                        (?p, solve ?p) \\<noteq>\n                        ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n'))\n  t \\<in> arch\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. (\\<exists>n'\\<ge>n\\<^sub>k.\n        \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n        (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n        (\\<forall>n''\\<ge>n\\<^sub>k.\n            n'' < n' \\<longrightarrow>\n            \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n    (\\<forall>n'\\<ge>n\\<^sub>k.\n        \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n        (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n'))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>n'\\<ge>n\\<^sub>k.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n      (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n      (\\<forall>n''\\<ge>n\\<^sub>k.\n          n'' < n' \\<longrightarrow>\n          \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n  (\\<forall>n'\\<ge>n\\<^sub>k.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n      (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t' n\n     (\\<box>\\<^sub>b[\\<lambda>bb. p = bbop bb]\\<^sub>b) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>n'\\<ge>n\\<^sub>k.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n      (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n      (\\<forall>n''\\<ge>n\\<^sub>k.\n          n'' < n' \\<longrightarrow>\n          \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)) \\<or>\n  (\\<forall>n'\\<ge>n\\<^sub>k.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n      (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n'))\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "proof\n            \\<comment> \\<open>if the ks solves it\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "assume \"\\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and> (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n              \\<and> (\\<forall>n''\\<ge>n\\<^sub>k. n'' < n' \\<longrightarrow> \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)\"\n            \\<comment> \\<open>it is forwarded to the blackboard\\<close>"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n     (\\<forall>n''\\<ge>n\\<^sub>k.\n         n'' < n' \\<longrightarrow>\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n     (\\<forall>n''\\<ge>n\\<^sub>k.\n         n'' < n' \\<longrightarrow>\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)", "obtain n\\<^sub>s where \"n\\<^sub>s\\<ge>n\\<^sub>k\" and \"\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\"\n              and \"(p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n     (\\<forall>n''\\<ge>n\\<^sub>k.\n         n'' < n' \\<longrightarrow>\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t n''\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>s.\n        \\<lbrakk>n\\<^sub>k \\<le> n\\<^sub>s;\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>;\n         (p, solve p) =\n         ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n\\<^sub>k \\<le> n\\<^sub>s\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>k \\<le> n\\<^sub>s\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\\<^sub>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n    n\\<^sub>s", "by (simp add: \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\\<close> sb.nxtAct_active)"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  n\\<^sub>k \\<le> n\\<^sub>s\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s", "have\n              \"(p,solve(p)) \\<in> bbns (\\<sigma>\\<^bsub>the_bb\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)))\""], ["proof (prove)\nusing this:\n  n\\<^sub>k \\<le> n\\<^sub>s\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n\ngoal (1 subgoal):\n 1. (p, solve p)\n    \\<in> bbns\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "using conn1[OF pb.ts_prop(2)] \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>k \\<le> n\\<^sub>s\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n  (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>s)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n  bbns (\\<sigma>\\<^bsub>the_bb\\<^esub>?k) =\n  (\\<Union>kid\\<in>{kid. \\<parallel>kid\\<parallel>\\<^bsub>?k\\<^esub>}.\n      {ksns (\\<sigma>\\<^bsub>kid\\<^esub>?k)})\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. (p, solve p)\n    \\<in> bbns\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "by auto\n\n            \\<comment> \\<open>finally, the blackboard will forward the solution which finishes the proof.\\<close>"], ["proof (state)\nthis:\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with bhvbb1"], ["proof (chain)\npicking this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "have \"pb.eval the_bb t t' (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n              (\\<diamond>\\<^sub>b [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "using \\<open>t\\<in>arch\\<close> pb.globE pb.impE[of the_bb t t']"], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n  t \\<in> arch\n  pb.eval the_bb ?t ?t' ?n (\\<box>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<forall>n'\\<ge>?n. pb.eval the_bb ?t ?t' n' ?\\<gamma>\n  pb.eval the_bb t t' ?n\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  pb.eval the_bb t t' ?n ?\\<gamma> \\<longrightarrow>\n  pb.eval the_bb t t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "obtain n\\<^sub>f where \"n\\<^sub>f\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\" and\n              \"pb.eval the_bb t t' n\\<^sub>f [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>f.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n                 \\<le> n\\<^sub>f;\n         pb.eval the_bb t t' n\\<^sub>f\n          [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>t\\<in>arch\\<close> pb.evtE[of t t' \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\"]"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  t \\<in> arch\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<exists>n'\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n     pb.eval the_bb t t' n' ?\\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>f.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n                 \\<le> n\\<^sub>f;\n         pb.eval the_bb t t' n\\<^sub>f\n          [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"(p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>f))\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)", "using \\<open>t \\<in> arch\\<close> pb.baEA"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n  t \\<in> arch\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   pb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>?c\\<^esub>?t\n           \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)", "by auto"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"n\\<^sub>f\\<ge>n\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "with \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> = n\\<^sub>s\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "using \\<open>n\\<^sub>f\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<close> \\<open>n\\<^sub>s\\<ge>n\\<^sub>k\\<close> \\<open>n\\<^sub>k\\<ge>n\\<close> \\<open>n\\<ge>n\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> =\n  n\\<^sub>s\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  n\\<^sub>k \\<le> n\\<^sub>s\n  n \\<le> n\\<^sub>k\n  n\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "by arith"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n       (\\<forall>n''\\<ge>n\\<^sub>k.\n           n'' < n' \\<longrightarrow>\n           \\<parallel>sKs p\\<parallel>\\<^bsub>t\n         n''\\<^esub>) \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n 2. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n  n\\<^sub>0 \\<le> n\\<^sub>f", "show ?thesis"], ["proof (prove)\nusing this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<ge>n\\<^sub>0.\n     (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "next\n            \\<comment> \\<open>otherwise, we derive a contradiction\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "assume case_ass: \"\\<forall>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and> \\<not>(p, solve p) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\"\n\n            \\<comment> \\<open>first, the KS will eventually register for the subproblems P it requires to solve p...\\<close>"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k", "have \"sb.eval (sKs p) t t'' n\\<^sub>k\n              ([\\<lambda>ks. p\\<in>ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b (\\<diamond>\\<^sub>b [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k\n     ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)", "using sb.globEA[OF _ bhvks3[of t p \"sKs p\" t'']] \\<open>t\\<in>arch\\<close> sks_prob"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>k\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   t \\<in> arch; p = prob (sKs p);\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' ?n'\n                     ([\\<lambda>ks.\n                          p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                      \\<diamond>\\<^sub>b[\\<lambda>ks.\n      \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n  t \\<in> arch\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k\n     ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "moreover"], ["proof (state)\nthis:\n  \\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "have \"p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> ksop\n             (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n      \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> ksop\n             (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n      \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>=n\\<^sub>k\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> =\n    n\\<^sub>k", "using sb.nxtAct_active"], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t ?i\\<^esub> \\<Longrightarrow>\n  \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?i\\<^esub> = ?i\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> =\n    n\\<^sub>k", "by blast"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> =\n  n\\<^sub>k\n\ngoal (1 subgoal):\n 1. p \\<in> ksop\n             (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n      \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)", "with \\<open>p\\<in>ksop(\\<sigma>\\<^bsub>sKs p\\<^esub>(t n\\<^sub>k))\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> =\n  n\\<^sub>k", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> ksop (\\<sigma>\\<^bsub>sKs p\\<^esub>t n\\<^sub>k)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> =\n  n\\<^sub>k\n\ngoal (1 subgoal):\n 1. p \\<in> ksop\n             (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n      \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)", "by simp"], ["proof (state)\nthis:\n  p \\<in> ksop\n           (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n    \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> ksop\n           (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n    \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n  p \\<in> ksop\n           (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n    \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n  p \\<in> ksop\n           (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n    \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "using sb.baIA[of n\\<^sub>k \"sKs p\" t]"], ["proof (prove)\nusing this:\n  \\<exists>n'\\<ge>n\\<^sub>k. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub>\n  p \\<in> ksop\n           (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n    \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>k.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   ?\\<phi>\n    (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>)\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t ?t' n\\<^sub>k [?\\<phi>]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b", "have \"sb.eval (sKs p) t t'' n\\<^sub>k (\\<diamond>\\<^sub>b [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)", "using sb.impE"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   ([\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\\<^sub>k [\\<lambda>ks. p \\<in> ksop ks]\\<^sub>b\n  sb.eval ?cid ?t ?t' ?n\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<longrightarrow>\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>k\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)", "obtain n\\<^sub>r where \"n\\<^sub>r\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\" and\n              \"\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n              (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>. n'' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n              \\<longrightarrow> sb.eval (sKs p) t t'' n'' [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n              \\<not> (\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n              sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>r.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n                 \\<le> n\\<^sub>r;\n         \\<exists>i\\<ge>n\\<^sub>r.\n            \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n            (\\<forall>n''\\<ge>\\<langle>sKs\n  p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                n''\n                \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n                sb.eval (sKs p) t t'' n''\n                 [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n            \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                       \\<parallel>sKs p\\<parallel>\\<^bsub>t\n                     i\\<^esub>) \\<and>\n            sb.eval (sKs p) t t'' n\\<^sub>r\n             [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close> sb.evtEA[of n\\<^sub>k \"sKs p\" t]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>k\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>k.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t ?t' n\\<^sub>k (\\<diamond>\\<^sub>b?\\<gamma>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'\\<ge>\\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>.\n                       (\\<exists>i\\<ge>n'.\n                           \\<parallel>sKs\n p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n                           (\\<forall>n''\\<ge>\\<langle>sKs\n                 p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n                               n''\n                               \\<le> \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n                               sb.eval (sKs p) t ?t' n'' ?\\<gamma>)) \\<or>\n                       \\<not> (\\<exists>i\\<ge>n'.\n                                  \\<parallel>sKs\n        p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n                       sb.eval (sKs p) t ?t' n' ?\\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>r.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n                 \\<le> n\\<^sub>r;\n         \\<exists>i\\<ge>n\\<^sub>r.\n            \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n            (\\<forall>n''\\<ge>\\<langle>sKs\n  p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                n''\n                \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n                sb.eval (sKs p) t t'' n''\n                 [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n            \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                       \\<parallel>sKs p\\<parallel>\\<^bsub>t\n                     i\\<^esub>) \\<and>\n            sb.eval (sKs p) t t'' n\\<^sub>r\n             [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>n\\<^sub>r.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n     \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>n\\<^sub>r.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n     \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from case_ass"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with \\<open>n\\<^sub>r\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "have \"n\\<^sub>r\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>k \\<le> n\\<^sub>r", "by arith"], ["proof (state)\nthis:\n  n\\<^sub>k \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  n\\<^sub>k \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "using case_ass"], ["proof (prove)\nusing this:\n  n\\<^sub>k \\<le> n\\<^sub>r\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"n\\<^sub>r \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>r\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "using sb.nxtActLe"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>r\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"n\\<^sub>r \\<ge> \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n    \\<le> n\\<^sub>r", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>n\\<^sub>r.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n     \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r", "have\n              \"sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>n\\<^sub>r.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b) \\<or>\n     \\<not> (\\<exists>i\\<ge>n\\<^sub>r.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b", "obtain P where\n              \"sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        sub P =\n        ksrp\n         (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using sb.baEA"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   [\\<lambda>ks. \\<exists>P. sub P = ksrp ks]\\<^sub>b\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   sb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>?c\\<^esub>?t\n           \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        sub P =\n        ksrp\n         (\\<sigma>\\<^bsub>sKs p\\<^esub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\""], ["proof (prove)\nusing this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b", "using \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close> sb.baIA sks_prob"], ["proof (prove)\nusing this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   ?\\<phi>\n    (\\<sigma>\\<^bsub>?c\\<^esub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)\\<rbrakk>\n  \\<Longrightarrow> sb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b", "by blast\n\n            \\<comment> \\<open>the knowledgesource will eventually get a solution for each required subproblem:\\<close>"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"sb.eval (sKs p) t t'' n\\<^sub>r (\\<forall>\\<^sub>b p'. (sb.pred (p'\\<in>P) \\<longrightarrow>\\<^sup>b\n              (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<forall>\\<^sub>bp'.\n         sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<forall>\\<^sub>bp'.\n         sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"\\<forall>p'. sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p'\\<in>P) \\<longrightarrow>\\<^sup>b\n                (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p'.\n       sb.eval (sKs p) t t'' n\\<^sub>r\n        (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof\n                \\<comment> \\<open>by induction hypothesis, the blackboard will eventually provide solutions for subproblems\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p'.\n       sb.eval (sKs p) t t'' n\\<^sub>r\n        (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "fix p'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p'.\n       sb.eval (sKs p) t t'' n\\<^sub>r\n        (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p'\\<in>P)) \\<longrightarrow>\n                  (sb.eval (sKs p) t t'' n\\<^sub>r\n                  (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "assume \"sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p'\\<in>P))\""], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P))\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "hence \"p' \\<in> P\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P))\n\ngoal (1 subgoal):\n 1. p' \\<in> P", "using sb.predE"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P))\n  sb.eval ?cid ?t ?t' ?n (sb.pred ?P) \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. p' \\<in> P", "by blast"], ["proof (state)\nthis:\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "thus \"(sb.eval (sKs p) t t'' n\\<^sub>r (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"sb.eval (sKs p) t t'' n\\<^sub>r ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n                      \\<longrightarrow>\\<^sup>b ((\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))) \\<WW>\\<^sub>b\n                      [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using sb.globEA[OF _ bhvks4[of t p' P \"sKs p\" t'']]\n                      \\<open>t\\<in>arch\\<close> \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close> \\<open>p'\\<in>P\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> n\\<^sub>r\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   t \\<in> arch; p' \\<in> P;\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' ?n'\n                     ([\\<lambda>ks.\n                          sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                      (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n    sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n    [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n                      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  t \\<in> arch\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n      (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open>sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\\<close>"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have\n                      \"sb.eval (sKs p) t t'' n\\<^sub>r ((\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b\n                      [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))) \\<WW>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using sb.impE[of \"(sKs p)\" t t'' n\\<^sub>r \"[\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\"]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\\<^sup>b\n    ?\\<gamma>') \\<Longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "hence \"sb.eval (sKs p) t t'' n\\<^sub>r ((\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b\n                      [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))) \\<UU>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b) \\<or>\n                      sb.eval (sKs p) t t'' n\\<^sub>r (\\<box>\\<^sub>b (\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b\n                      [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))))\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<or>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))", "using sb.wuntil_def"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<WW>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  ?\\<gamma>' \\<WW>\\<^sub>b ?\\<gamma> \\<equiv>\n  ?\\<gamma>' \\<UU>\\<^sub>b ?\\<gamma> \\<or>\\<^sup>b \\<box>\\<^sub>b?\\<gamma>'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<or>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))", "by auto"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<or>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. p' \\<in> P \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "thus \"(sb.eval (sKs p) t t'' n\\<^sub>r (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<or>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "let ?\\<gamma>'=\"\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b ([\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\""], ["proof (state)\ngoal (2 subgoals):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "let ?\\<gamma>=\"[\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b\""], ["proof (state)\ngoal (2 subgoals):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "assume \"sb.eval (sKs p) t t'' n\\<^sub>r (?\\<gamma>' \\<UU>\\<^sub>b ?\\<gamma>)\""], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (2 subgoals):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "obtain n' where \"n'\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\" and\n                        lass: \"(\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and> (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>. n'' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n                        \\<longrightarrow> sb.eval (sKs p) t t'' n'' ?\\<gamma>) \\<and>\n                        (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>. n'' < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n                        \\<longrightarrow> sb.eval (sKs p) t t'' n'' ?\\<gamma>') \\<or>\n                        \\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and> sb.eval (sKs p) t t'' n' ?\\<gamma> \\<and>\n                        (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>. n'' < n' \\<longrightarrow> sb.eval (sKs p) t t'' n'' ?\\<gamma>')\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> n';\n         (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n             n''\n             \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n             n''\n             < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                  sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                  [\\<lambda>ks.\nunsub P' = ksrp ks]\\<^sub>b))) \\<or>\n         \\<not> (\\<exists>i\\<ge>n'.\n                    \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         sb.eval (sKs p) t t'' n'\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n             n'' < n' \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                  sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                  [\\<lambda>ks.\nunsub P' = ksrp ks]\\<^sub>b)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sb.untilEA[of n\\<^sub>r \"sKs p\" t t''] \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                        sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                        [\\<lambda>ks.\n                            unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t t'' n\\<^sub>r\n    (?\\<gamma>' \\<UU>\\<^sub>b ?\\<gamma>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'\\<ge>\\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                       (\\<exists>i\\<ge>n'.\n                           \\<parallel>sKs\n p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n                       (\\<forall>n''\\<ge>\\<langle>sKs\n             p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n                           n''\n                           \\<le> \\<langle>sKs\n     p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n                           sb.eval (sKs p) t t'' n'' ?\\<gamma>) \\<and>\n                       (\\<forall>n''\\<ge>\\<langle>sKs\n             p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                           n''\n                           < \\<langle>sKs\n p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n                           sb.eval (sKs p) t t'' n'' ?\\<gamma>') \\<or>\n                       \\<not> (\\<exists>i\\<ge>n'.\n                                  \\<parallel>sKs\n        p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n                       sb.eval (sKs p) t t'' n' ?\\<gamma> \\<and>\n                       (\\<forall>n''\\<ge>\\<langle>sKs\n             p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                           n'' < n' \\<longrightarrow>\n                           sb.eval (sKs p) t t'' n'' ?\\<gamma>')\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> n';\n         (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n             n''\n             \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n             n''\n             < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                  sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                  [\\<lambda>ks.\nunsub P' = ksrp ks]\\<^sub>b))) \\<or>\n         \\<not> (\\<exists>i\\<ge>n'.\n                    \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         sb.eval (sKs p) t t'' n'\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n         (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n             n'' < n' \\<longrightarrow>\n             sb.eval (sKs p) t t'' n''\n              (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                  sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                  [\\<lambda>ks.\nunsub P' = ksrp ks]\\<^sub>b)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n\ngoal (2 subgoals):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ((\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                          sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                          [\\<lambda>ks.\n                              unsub P' = ksrp ks]\\<^sub>b)) \\<UU>\\<^sub>b\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "assume \"\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with lass"], ["proof (chain)\npicking this:\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>. n'' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n                          \\<longrightarrow> sb.eval (sKs p) t t'' n'' ?\\<gamma>\""], ["proof (prove)\nusing this:\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n       n''\n       \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n       sb.eval (sKs p) t t'' n''\n        [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b", "by auto"], ["proof (state)\nthis:\n  \\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n     n''\n     \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     sb.eval (sKs p) t t'' n''\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n     n''\n     \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     sb.eval (sKs p) t t'' n''\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"n'\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "using \\<open>\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close> sb.nxtActLe"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n     n''\n     \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     sb.eval (sKs p) t t'' n''\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'\n  n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>", "have \"sb.eval (sKs p) t t'' n' ?\\<gamma>\""], ["proof (prove)\nusing this:\n  \\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n     n''\n     \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n     sb.eval (sKs p) t t'' n''\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'\n  n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n'\n     [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "using \\<open>n\\<^sub>r \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close>\n                        \\<open>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\\<^sub>r\\<close> \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "by linarith"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)\n 2. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "show ?thesis"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close> \\<open>\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>\n                          \\<open>n'\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<close> \\<open>n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\\<close>\n                          sb.evtIA[of n\\<^sub>r \"sKs p\" t n' t'' ?\\<gamma>]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<le> n'\n  n' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n';\n   \\<exists>i\\<ge>n'.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<Longrightarrow>\n   \\<exists>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b;\n   \\<not> (\\<exists>i\\<ge>n'.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t\n            i\\<^esub>) \\<Longrightarrow>\n   sb.eval (sKs p) t t'' n'\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                     (\\<diamond>\\<^sub>b[\\<lambda>ks.\n      (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "assume \"\\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with lass"], ["proof (chain)\npicking this:\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)", "have \"sb.eval (sKs p) t t'' n' ?\\<gamma> \\<and>\n                          (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>. n'' < n' \\<longrightarrow> sb.eval (sKs p) t t'' n'' ?\\<gamma>')\""], ["proof (prove)\nusing this:\n  (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n''\n      < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks.\n                               unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n  \\<not> (\\<exists>i\\<ge>n'.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n'\n     [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n    (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n        n'' < n' \\<longrightarrow>\n        sb.eval (sKs p) t t'' n''\n         (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                             sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                             [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))", "by auto"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "using \\<open>n\\<^sub>r \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close> \\<open>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\\<^sub>r\\<close>\n                          \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "by linarith"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n             \\<le> n';\n     (\\<exists>i\\<ge>n'.\n         \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n         n''\n         \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b) \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n''\n         < \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks.\n                                  unsub P' = ksrp ks]\\<^sub>b))) \\<or>\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n     sb.eval (sKs p) t t'' n'\n      [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n     (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n         n'' < n' \\<longrightarrow>\n         sb.eval (sKs p) t t'' n''\n          (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                              sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                              [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)));\n     \\<not> (\\<exists>i\\<ge>n'.\n                \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                       (\\<diamond>\\<^sub>b[\\<lambda>ks.\n        (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'", "show ?thesis"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close> \\<open>\\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\\<close>\n                            sb.evtIA[of n\\<^sub>r \"sKs p\" t n' t'' ?\\<gamma>]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n'\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b \\<and>\n  (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n      n'' < n' \\<longrightarrow>\n      sb.eval (sKs p) t t'' n''\n       (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                           sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                           [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n'\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<not> (\\<exists>i\\<ge>n'. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>)\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n';\n   \\<exists>i\\<ge>n'.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<Longrightarrow>\n   \\<exists>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n      n''\n      \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<and>\n      sb.eval (sKs p) t t'' n''\n       [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b;\n   \\<not> (\\<exists>i\\<ge>n'.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t\n            i\\<^esub>) \\<Longrightarrow>\n   sb.eval (sKs p) t t'' n'\n    [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' n\\<^sub>r\n                     (\\<diamond>\\<^sub>b[\\<lambda>ks.\n      (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "assume cass: \"sb.eval (sKs p) t t'' n\\<^sub>r\n                        (\\<box>\\<^sub>b (\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P') \\<and>\\<^sup>b [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))))\""], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>))) \\<and>\n                        p' \\<in> P \\<longrightarrow> (p', p) \\<in> sb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "have \"\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "using \\<open>\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub> \\<le> (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "have \"sb.eval (sKs p) t t'' (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n                          [\\<lambda>ks. sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow> (p', p) \\<in> sb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t''\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     [\\<lambda>ks.\n         sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n         (p', p) \\<in> sb]\\<^sub>b", "using sb.globEA[OF _ bhvks2[of t p \"sKs p\" t'' P]] \\<open>t \\<in> arch\\<close> sks_prob"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   t \\<in> arch; p = prob (sKs p);\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' ?n'\n                     [\\<lambda>ks.\n                         sub P = ksrp ks \\<and>\n                         ?q1 \\<in> P \\<longrightarrow>\n                         (?q1, p) \\<in> sb]\\<^sub>b\n  t \\<in> arch\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t''\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     [\\<lambda>ks.\n         sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n         (p', p) \\<in> sb]\\<^sub>b", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t''\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   [\\<lambda>ks.\n       sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n       (p', p) \\<in> sb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t''\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   [\\<lambda>ks.\n       sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n       (p', p) \\<in> sb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have\n                          \"\\<parallel>sKs p\\<parallel>\\<^bsub>t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t''\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   [\\<lambda>ks.\n       sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n       (p', p) \\<in> sb]\\<^sub>b\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t''\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   [\\<lambda>ks.\n       sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n       (p', p) \\<in> sb]\\<^sub>b\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "using sb.baEANow[of \"sKs p\" t t'' \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\"]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t''\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   [\\<lambda>ks.\n       sub P = ksrp ks \\<and> p' \\<in> P \\<longrightarrow>\n       (p', p) \\<in> sb]\\<^sub>b\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n  \\<lbrakk>sb.eval (sKs p) t t''\n            \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n            [?\\<phi>]\\<^sub>b;\n   \\<parallel>sKs p\\<parallel>\\<^bsub>t\n \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>sKs\n p\\<^esub>t \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P \\<longrightarrow>\n    (p', p) \\<in> sb", "by simp"], ["proof (state)\nthis:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P \\<longrightarrow>\n  (p', p) \\<in> sb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P \\<longrightarrow>\n  (p', p) \\<in> sb\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open>p' \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  p' \\<in> P\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P \\<longrightarrow>\n  (p', p) \\<in> sb", "have \"(p', p) \\<in> sb\""], ["proof (prove)\nusing this:\n  p' \\<in> P\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P \\<longrightarrow>\n  (p', p) \\<in> sb\n\ngoal (1 subgoal):\n 1. (p', p) \\<in> sb", "using \\<open>sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\\<close>\n                        sks_prob"], ["proof (prove)\nusing this:\n  p' \\<in> P\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P \\<longrightarrow>\n  (p', p) \\<in> sb\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. (p', p) \\<in> sb", "by simp"], ["proof (state)\nthis:\n  (p', p) \\<in> sb\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  (p', p) \\<in> sb\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"\\<parallel>sKs p\\<parallel>\\<^bsub>t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open>sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\\<close>"], ["proof (chain)\npicking this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "have \"sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\""], ["proof (prove)\nusing this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sub P\n    \\<in> bbrp\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)", "using conn1A"], ["proof (prove)\nusing this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n  bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>?k) =\n  (\\<Union>sid\\<in>{sid. \\<parallel>sid\\<parallel>\\<^bsub>?k\\<^esub>}.\n      {ksrp (\\<sigma>\\<^bsub>sid\\<^esub>?k)})\n\ngoal (1 subgoal):\n 1. sub P\n    \\<in> bbrp\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open> p' \\<in> P\\<close>"], ["proof (chain)\npicking this:\n  p' \\<in> P\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)", "have \"sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)) \\<and> p' \\<in> P\""], ["proof (prove)\nusing this:\n  p' \\<in> P\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sub P\n    \\<in> bbrp\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n    p' \\<in> P", "by auto"], ["proof (state)\nthis:\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  (p', p) \\<in> sb\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P", "obtain m where \"m\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\" and \"(p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m))\""], ["proof (prove)\nusing this:\n  (p', p) \\<in> sb\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> m;\n         (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using indH"], ["proof (prove)\nusing this:\n  (p', p) \\<in> sb\n  sub P\n  \\<in> bbrp\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>) \\<and>\n  p' \\<in> P\n  \\<forall>p'.\n     (p', p) \\<in> sb \\<longrightarrow>\n     (\\<forall>n.\n         (\\<exists>P.\n             sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n             p' \\<in> P) \\<longrightarrow>\n         (\\<exists>m\\<ge>n.\n             (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> m;\n         (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto\n\n                      \\<comment> \\<open>and due to the publisher subscriber property,\\<close>\n                      \\<comment> \\<open>the knowledge source will receive them\\<close>"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have\n                        \"\\<nexists>n P. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n \\<and> n \\<le> m \\<and> \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n                        unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t n)) \\<and> p' \\<in> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "assume \"\\<exists>n P'. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n \\<and> n \\<le> m \\<and> \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n                          unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t n)) \\<and> p' \\<in> P'\""], ["proof (state)\nthis:\n  \\<exists>n P'.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P'\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n P'.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P'", "obtain n P' where\n                          \"\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub>\" and \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\" and \"n \\<le> m\" and\n                          \"unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t n))\" and \"p' \\<in> P'\""], ["proof (prove)\nusing this:\n  \\<exists>n P'.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P'\n\ngoal (1 subgoal):\n 1. (\\<And>n P'.\n        \\<lbrakk>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub>;\n         \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n         \\<le> n;\n         n \\<le> m; unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n);\n         p' \\<in> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n  n \\<le> m\n  unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n)\n  p' \\<in> P'\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "hence \"sb.eval (sKs p) t t'' n (\\<exists>\\<^sub>b P'. sb.pred (p'\\<in>P') \\<and>\\<^sup>b\n                          [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n  n \\<le> m\n  unsub P' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n)\n  p' \\<in> P'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\n     (\\<exists>\\<^sub>bP'.\n         sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n         [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\n   (\\<exists>\\<^sub>bP'.\n       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\n   (\\<exists>\\<^sub>bP'.\n       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n", "using \\<open>n\\<^sub>r \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close> \\<open>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\\<^sub>r\\<close>\n                          \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>r\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n", "by linarith"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "with cass"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n", "have \"sb.eval (sKs p) t t'' n (\\<not>\\<^sup>b (\\<exists>\\<^sub>b P'. (sb.pred (p'\\<in>P')\n                          \\<and>\\<^sup>b [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)))\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\n     (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                         sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                         [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))", "using sb.globEA[of n\\<^sub>r \"sKs p\" t t''\n                          \"\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'. sb.pred (p' \\<in> P') \\<and>\\<^sup>b [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\" n]\n                          \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                                     sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                                     [\\<lambda>ks.\n   unsub P' = ksrp ks]\\<^sub>b))\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> n\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t t'' n\\<^sub>r\n    (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\nsb.pred (p' \\<in> P') \\<and>\\<^sup>b\n[\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b));\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n   \\<le> n\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' n\n                     (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n   sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n   [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\n     (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                         sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                         [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))", "by auto"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\n   (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. \\<exists>n P.\n       \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n       \\<le> n \\<and>\n       n \\<le> m \\<and>\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n       unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and>\n       p' \\<in> P \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\n   (\\<exists>\\<^sub>bP'.\n       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\n   (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))", "show False"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\n   (\\<exists>\\<^sub>bP'.\n       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\n   (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. False", "using sb.negE"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\n   (\\<exists>\\<^sub>bP'.\n       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\n   (\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n                       sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n                       [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b))\n  sb.eval ?cid ?t ?t' ?n (\\<not>\\<^sup>b ?\\<gamma>) \\<Longrightarrow>\n  \\<not> sb.eval ?cid ?t ?t' ?n ?\\<gamma>\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>n P.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<nexists>n P.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have\n                        \"\\<parallel>sKs p\\<parallel>\\<^bsub>t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)", "using \\<open>sub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)))\\<close>"], ["proof (prove)\nusing this:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sub P =\n    ksrp\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)", "."], ["proof (state)\nthis:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>m\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<ge>n\\<^sub>r\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>r\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. n\\<^sub>r\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "hence \"m\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>k \\<le> m", "using \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\\<close> \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> \\<le> n\\<^sub>r\\<close>\n                        \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub> \\<ge> n\\<^sub>k\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>k \\<le> m", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>k \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with case_ass"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n  n\\<^sub>k \\<le> m", "have \"\\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n  n\\<^sub>k \\<le> m\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n  \\<nexists>n P.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>", "have \"(p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>(t m))\"\n                        and \"\\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n  \\<nexists>n P.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n\ngoal (1 subgoal):\n 1. (p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m) &&&\n    \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>", "using \\<open>t \\<in> arch\\<close> msgDelivery[of t \"sKs p\" \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\" P m p' \"solve p'\"]\n                        \\<open>p' \\<in> P\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n  \\<nexists>n P.\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n     \\<le> n \\<and>\n     n \\<le> m \\<and>\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^esub> \\<and>\n     unsub P = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n) \\<and> p' \\<in> P\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>\n  sub P =\n  ksrp\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>)\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n  t \\<in> arch\n  \\<lbrakk>t \\<in> arch;\n   \\<parallel>sKs p\\<parallel>\\<^bsub>t\n \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<^esub>;\n   sub P =\n   ksrp\n    (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>);\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m;\n   \\<nexists>n' E'.\n      \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n      \\<le> n' \\<and>\n      n' \\<le> m \\<and>\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n      unsub E' = ksrp (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<and>\n      p' \\<in> E';\n   p' \\<in> P; (p', solve p') = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m);\n   \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> (p', solve p')\n                    \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m)\n  p' \\<in> P\n\ngoal (1 subgoal):\n 1. (p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m) &&&\n    \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>", "by auto"], ["proof (state)\nthis:\n  (p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "hence \"sb.eval (sKs p) t t'' m [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b\""], ["proof (prove)\nusing this:\n  (p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' m\n     [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b", "using sb.baIANow"], ["proof (prove)\nusing this:\n  (p', solve p') \\<in> kscs (\\<sigma>\\<^bsub>sKs p\\<^esub>t m)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n  \\<lbrakk>?\\<phi> (\\<sigma>\\<^bsub>?c\\<^esub>?t ?n);\n   \\<parallel>?c\\<parallel>\\<^bsub>?t ?n\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> sb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' m\n     [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' m\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' m\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"m \\<ge> \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>", "have \"m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n\ngoal (1 subgoal):\n 1. m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>", "using sb.nxtActLe"], ["proof (prove)\nusing this:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t m\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>", "by auto"], ["proof (state)\nthis:\n  m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "moreover"], ["proof (state)\nthis:\n  m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have\n                        \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "with \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>", "have \"\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m", "by arith"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<box>\\<^sub>b\\<not>\\<^sup>b (\\<exists>\\<^sub>bP'.\n sb.pred (p' \\<in> P') \\<and>\\<^sup>b\n [\\<lambda>ks. unsub P' = ksrp ks]\\<^sub>b)) \\<Longrightarrow>\n    sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' m\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m\n  m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m", "show \"sb.eval (sKs p) t t'' n\\<^sub>r\n                        (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' m\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m\n  m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close> sb.evtIA"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' m\n   [\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>m\\<^esub> \\<le> m\n  m \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>m\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<le> m\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   \\<langle>?c \\<Leftarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<le> ?n';\n   \\<exists>i\\<ge>?n'.\n      \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n   \\<exists>n''\\<ge>\\<langle>?c \\<Leftarrow> ?t\\<rangle>\\<^bsub>?n'\\<^esub>.\n      n''\n      \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n'\\<^esub> \\<and>\n      sb.eval ?c ?t ?t' n'' ?\\<gamma>;\n   \\<not> (\\<exists>i\\<ge>?n'.\n              \\<parallel>?c\\<parallel>\\<^bsub>?t\n         i\\<^esub>) \\<Longrightarrow>\n   sb.eval ?c ?t ?t' ?n' ?\\<gamma>\\<rbrakk>\n  \\<Longrightarrow> sb.eval ?c ?t ?t' ?n (\\<diamond>\\<^sub>b?\\<gamma>)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<And>p'.\n       sb.eval (sKs p) t t'' n\\<^sub>r\n        (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "thus \"sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p'\\<in>P) \\<longrightarrow>\\<^sup>b\n                  (\\<diamond>\\<^sub>b [\\<lambda>ks. (p',solve p') \\<in> kscs ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using sb.impI"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r (sb.pred (p' \\<in> P)) \\<longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<longrightarrow>\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma>' \\<Longrightarrow>\n  sb.eval ?cid ?t ?t' ?n (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>')\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by auto"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p'.\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<forall>\\<^sub>bp'.\n         sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p'.\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<forall>\\<^sub>bp'.\n         sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "using sb.allI"], ["proof (prove)\nusing this:\n  \\<forall>p'.\n     sb.eval (sKs p) t t'' n\\<^sub>r\n      (sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  \\<forall>p. sb.eval ?cid ?t ?t' ?n (?\\<gamma> p) \\<Longrightarrow>\n  sb.eval ?cid ?t ?t' ?n (\\<forall>\\<^sub>bp. ?\\<gamma> p)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<forall>\\<^sub>bp'.\n         sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n         \\<diamond>\\<^sub>b[\\<lambda>ks.\n                               (p', solve p') \\<in> kscs ks]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<forall>\\<^sub>bp'.\n       sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal:\nNo subgoals!", "qed\n\n            \\<comment> \\<open>Thus, the knowlege source will eventually solve the problem at hand...\\<close>"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<forall>\\<^sub>bp'.\n       sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<forall>\\<^sub>bp'.\n       sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)", "have \"sb.eval (sKs p) t t'' n\\<^sub>r\n              ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n              (\\<forall>\\<^sub>b q. (sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b \\<diamond>\\<^sub>b [\\<lambda>ks. (q, solve q) \\<in> kscs ks]\\<^sub>b)))\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<forall>\\<^sub>bp'.\n       sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n      (\\<forall>\\<^sub>bq.\n          sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n          \\<diamond>\\<^sub>b[\\<lambda>ks.\n                                (q, solve q) \\<in> kscs ks]\\<^sub>b))", "using sb.conjI"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r [\\<lambda>ks. sub P = ksrp ks]\\<^sub>b\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<forall>\\<^sub>bp'.\n       sb.pred (p' \\<in> P) \\<longrightarrow>\\<^sup>b\n       \\<diamond>\\<^sub>b[\\<lambda>ks.\n                             (p', solve p') \\<in> kscs ks]\\<^sub>b)\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma> \\<and>\n  sb.eval ?cid ?t ?t' ?n ?\\<gamma>' \\<Longrightarrow>\n  sb.eval ?cid ?t ?t' ?n (?\\<gamma> \\<and>\\<^sup>b ?\\<gamma>')\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n      (\\<forall>\\<^sub>bq.\n          sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n          \\<diamond>\\<^sub>b[\\<lambda>ks.\n                                (q, solve q) \\<in> kscs ks]\\<^sub>b))", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q) \\<in> kscs ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q) \\<in> kscs ks]\\<^sub>b))\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"sb.eval (sKs p) t t'' n\\<^sub>r\n              (([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n              (\\<forall>\\<^sub>b q. (sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n              \\<diamond>\\<^sub>b [\\<lambda>ks. (q, solve q) \\<in> kscs ks]\\<^sub>b))) \\<longrightarrow>\\<^sup>b\n              (\\<diamond>\\<^sub>b [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b))\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n      (\\<forall>\\<^sub>bq.\n          sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n          \\<diamond>\\<^sub>b[\\<lambda>ks.\n                                (q, solve q)\n                                \\<in> kscs\n ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "using \\<open>t \\<in> arch\\<close>\n              sb.globEA[OF _ bhvks1[of t p \"sKs p\" t'' P]] sks_prob"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  t \\<in> arch\n  \\<lbrakk>\\<exists>i\\<ge>0. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   t \\<in> arch; p = prob (sKs p);\n   \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>0\\<^esub>\n   \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> sb.eval (sKs p) t t'' ?n'\n                     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n                      (\\<forall>\\<^sub>bq.\n                          sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n                          \\<diamond>\\<^sub>b[\\<lambda>ks.\n          (q, solve q) \\<in> kscs ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n                      \\<diamond>\\<^sub>b[\\<lambda>ks.\n      (p, solve p) = ksns ks]\\<^sub>b)\n  ?p = prob (sKs ?p)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n      (\\<forall>\\<^sub>bq.\n          sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n          \\<diamond>\\<^sub>b[\\<lambda>ks.\n                                (q, solve q)\n                                \\<in> kscs\n ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n      \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "by simp"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q)\n                              \\<in> kscs\n                                     ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q) \\<in> kscs ks]\\<^sub>b))\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q)\n                              \\<in> kscs\n                                     ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "have \"sb.eval (sKs p) t t'' n\\<^sub>r\n              (\\<diamond>\\<^sub>b [\\<lambda>ks. (p,solve(p))=ksns(ks)]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q) \\<in> kscs ks]\\<^sub>b))\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q)\n                              \\<in> kscs\n                                     ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "using sb.impE[of \"sKs p\" t t'' n\\<^sub>r]"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q) \\<in> kscs ks]\\<^sub>b))\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   ([\\<lambda>ks. sub P = ksrp ks]\\<^sub>b \\<and>\\<^sup>b\n    (\\<forall>\\<^sub>bq.\n        sb.pred (q \\<in> P) \\<longrightarrow>\\<^sup>b\n        \\<diamond>\\<^sub>b[\\<lambda>ks.\n                              (q, solve q)\n                              \\<in> kscs\n                                     ks]\\<^sub>b) \\<longrightarrow>\\<^sup>b\n    \\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r ?\\<gamma> \\<longrightarrow>\n  sb.eval (sKs p) t t'' n\\<^sub>r ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>r\n     (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "by blast\n\n            \\<comment> \\<open>and forward it to the blackboard\\<close>"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)", "obtain n\\<^sub>s where \"n\\<^sub>s\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\" and\n              \"(\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n              (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>. n'' \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n              sb.eval (sKs p) t t'' n'' [\\<lambda>ks. (p,solve(p))=ksns(ks)]\\<^sub>b)) \\<or>\n              \\<not> (\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n              sb.eval (sKs p) t t'' n\\<^sub>s [\\<lambda>ks. (p,solve(p))=ksns(ks)]\\<^sub>b\""], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>s.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> n\\<^sub>s;\n         (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n             (\\<forall>n''\\<ge>\\<langle>sKs\n   p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n                 n''\n                 \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n                 sb.eval (sKs p) t t'' n''\n                  [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n         \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n                    \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         sb.eval (sKs p) t t'' n\\<^sub>s\n          [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sb.evtEA[of n\\<^sub>r \"sKs p\" t] \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  sb.eval (sKs p) t t'' n\\<^sub>r\n   (\\<diamond>\\<^sub>b[\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t ?t' n\\<^sub>r (\\<diamond>\\<^sub>b?\\<gamma>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'\\<ge>\\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                       (\\<exists>i\\<ge>n'.\n                           \\<parallel>sKs\n p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n                           (\\<forall>n''\\<ge>\\<langle>sKs\n                 p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n                               n''\n                               \\<le> \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n                               sb.eval (sKs p) t ?t' n'' ?\\<gamma>)) \\<or>\n                       \\<not> (\\<exists>i\\<ge>n'.\n                                  \\<parallel>sKs\n        p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n                       sb.eval (sKs p) t ?t' n' ?\\<gamma>\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>s.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n                 \\<le> n\\<^sub>s;\n         (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n             (\\<forall>n''\\<ge>\\<langle>sKs\n   p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n                 n''\n                 \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n                 sb.eval (sKs p) t t'' n''\n                  [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n         \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n                    \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n         sb.eval (sKs p) t t'' n\\<^sub>s\n          [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  (\\<exists>i\\<ge>n\\<^sub>s.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n      (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n          n''\n          \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n          sb.eval (sKs p) t t'' n''\n           [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n  \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  (\\<exists>i\\<ge>n\\<^sub>s.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n      (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n          n''\n          \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n          sb.eval (sKs p) t t'' n''\n           [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n  \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub> \\<ge> n\\<^sub>r\\<close> \\<open>n\\<^sub>r\\<ge>n\\<^sub>k\\<close> \\<open>n\\<^sub>s\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  n\\<^sub>k \\<le> n\\<^sub>r\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s", "have \"n\\<^sub>s\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  n\\<^sub>k \\<le> n\\<^sub>r\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n\ngoal (1 subgoal):\n 1. n\\<^sub>k \\<le> n\\<^sub>s", "by arith"], ["proof (state)\nthis:\n  n\\<^sub>k \\<le> n\\<^sub>s\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with case_ass"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n  n\\<^sub>k \\<le> n\\<^sub>s", "have \"\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n\\<^sub>k.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n     (p, solve p) \\<noteq> ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n')\n  n\\<^sub>k \\<le> n\\<^sub>s\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"n\\<^sub>s\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n    \\<le> n\\<^sub>s", "by simp"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>s\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>s\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"n\\<^sub>s \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>", "using sb.nxtActLe"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  (\\<exists>i\\<ge>n\\<^sub>s.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n      (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n          n''\n          \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n          sb.eval (sKs p) t t'' n''\n           [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n  \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>s\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>", "have \"sb.eval (sKs p) t t'' n\\<^sub>s [\\<lambda>ks. (p,solve(p))=ksns(ks)]\\<^sub>b\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  (\\<exists>i\\<ge>n\\<^sub>s.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n      (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n          n''\n          \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n          sb.eval (sKs p) t t'' n''\n           [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n  \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>s\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>s\n     [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b", "using sb.evtEA[of n\\<^sub>r \"sKs p\" t] \\<open>\\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  (\\<exists>i\\<ge>n\\<^sub>s.\n      \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n      (\\<forall>n''\\<ge>\\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n          n''\n          \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> \\<longrightarrow>\n          sb.eval (sKs p) t t'' n''\n           [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b)) \\<or>\n  \\<not> (\\<exists>i\\<ge>n\\<^sub>s.\n             \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<langle>sKs p \\<Leftarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>s\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>r.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t ?t' n\\<^sub>r (\\<diamond>\\<^sub>b?\\<gamma>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n'\\<ge>\\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>.\n                       (\\<exists>i\\<ge>n'.\n                           \\<parallel>sKs\n p\\<parallel>\\<^bsub>t i\\<^esub> \\<and>\n                           (\\<forall>n''\\<ge>\\<langle>sKs\n                 p \\<Leftarrow> t\\<rangle>\\<^bsub>n'\\<^esub>.\n                               n''\n                               \\<le> \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n'\\<^esub> \\<longrightarrow>\n                               sb.eval (sKs p) t ?t' n'' ?\\<gamma>)) \\<or>\n                       \\<not> (\\<exists>i\\<ge>n'.\n                                  \\<parallel>sKs\n        p\\<parallel>\\<^bsub>t i\\<^esub>) \\<and>\n                       sb.eval (sKs p) t ?t' n' ?\\<gamma>\n  \\<exists>i\\<ge>n\\<^sub>r. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. sb.eval (sKs p) t t'' n\\<^sub>s\n     [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b", "by blast"], ["proof (state)\nthis:\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with \\<open>\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b", "have\n              \"(p,solve(p)) = ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)))\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n\ngoal (1 subgoal):\n 1. (p, solve p) =\n    ksns\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "using sb.baEA[of n\\<^sub>s \"sKs p\" t t'' \"\\<lambda>ks. (p, solve p) = ksns ks\"]"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  sb.eval (sKs p) t t'' n\\<^sub>s\n   [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\n  \\<lbrakk>\\<exists>i\\<ge>n\\<^sub>s.\n              \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>;\n   sb.eval (sKs p) t t'' n\\<^sub>s\n    [\\<lambda>ks. (p, solve p) = ksns ks]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> (p, solve p) =\n                    ksns\n                     (\\<sigma>\\<^bsub>sKs\n p\\<^esub>t \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. (p, solve p) =\n    ksns\n     (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n         p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  (p, solve p) =\n  ksns\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  (p, solve p) =\n  ksns\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "from \\<open>\\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>", "have \"\\<parallel>sKs p\\<parallel>\\<^bsub>t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  \\<exists>i\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t i\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. \\<parallel>sKs p\\<parallel>\\<^bsub>t\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  (p, solve p) =\n  ksns\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>", "have \"(p,solve(p)) \\<in> bbns (\\<sigma>\\<^bsub>the_bb\\<^esub>(t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)))\""], ["proof (prove)\nusing this:\n  (p, solve p) =\n  ksns\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>\n\ngoal (1 subgoal):\n 1. (p, solve p)\n    \\<in> bbns\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "using conn1[OF pb.ts_prop(2)[of \"t (\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\"]]"], ["proof (prove)\nusing this:\n  (p, solve p) =\n  ksns\n   (\\<sigma>\\<^bsub>sKs p\\<^esub>t \\<langle>sKs\n       p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t\n\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>\n  bbns\n   (\\<sigma>\\<^bsub>the_bb\\<^esub>t \\<langle>sKs\n        p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>) =\n  (\\<Union>kid\\<in>{kid.\n                    \\<parallel>kid\\<parallel>\\<^bsub>t\n                \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<^esub>}.\n      {ksns\n        (\\<sigma>\\<^bsub>kid\\<^esub>t \\<langle>sKs\n          p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)})\n\ngoal (1 subgoal):\n 1. (p, solve p)\n    \\<in> bbns\n           (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"pb.eval the_bb t t' \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub> [\\<lambda>bb. (p,solve(p)) \\<in> bbns bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b", "using \\<open>t\\<in>arch\\<close> pb.baI"], ["proof (prove)\nusing this:\n  (p, solve p)\n  \\<in> bbns\n         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>)\n  t \\<in> arch\n  ?\\<phi> (\\<sigma>\\<^bsub>the_bb\\<^esub>?t ?n) \\<Longrightarrow>\n  pb.eval the_bb ?t ?t' ?n [?\\<phi>]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b", "by simp\n\n            \\<comment> \\<open>finally, the blackboard will forward the solution which finishes the proof.\\<close>"], ["proof (state)\nthis:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "with bhvbb1"], ["proof (chain)\npicking this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b", "have \"pb.eval the_bb t t' \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n              (\\<diamond>\\<^sub>b [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\""], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "using \\<open>t\\<in>arch\\<close> pb.globE pb.impE[of the_bb t t']"], ["proof (prove)\nusing this:\n  ?t \\<in> arch \\<Longrightarrow>\n  pb.eval ?bId ?t ?t' 0\n   (\\<box>\\<^sub>b[\\<lambda>bb.\n                      (?p, ?s)\n                      \\<in> bbns bb]\\<^sub>b \\<longrightarrow>\\<^sup>b\n                  \\<diamond>\\<^sub>b[\\<lambda>bb.\n  (?p, ?s) = bbcs bb]\\<^sub>b)\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   [\\<lambda>bb. (p, solve p) \\<in> bbns bb]\\<^sub>b\n  t \\<in> arch\n  pb.eval the_bb ?t ?t' ?n (\\<box>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<forall>n'\\<ge>?n. pb.eval the_bb ?t ?t' n' ?\\<gamma>\n  pb.eval the_bb t t' ?n\n   (?\\<gamma> \\<longrightarrow>\\<^sup>b ?\\<gamma>') \\<Longrightarrow>\n  pb.eval the_bb t t' ?n ?\\<gamma> \\<longrightarrow>\n  pb.eval the_bb t t' ?n ?\\<gamma>'\n\ngoal (1 subgoal):\n 1. pb.eval the_bb t t'\n     \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n     (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "by blast"], ["proof (state)\nthis:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "then"], ["proof (chain)\npicking this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)", "obtain n\\<^sub>f where \"n\\<^sub>f\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\" and\n              \"pb.eval the_bb t t' n\\<^sub>f [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\""], ["proof (prove)\nusing this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>f.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n                 \\<le> n\\<^sub>f;\n         pb.eval the_bb t t' n\\<^sub>f\n          [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>t\\<in>arch\\<close> pb.evtE[of t t' \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\"]"], ["proof (prove)\nusing this:\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b[\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b)\n  t \\<in> arch\n  pb.eval the_bb t t'\n   \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n   (\\<diamond>\\<^sub>b?\\<gamma>) \\<Longrightarrow>\n  \\<exists>n'\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>.\n     pb.eval the_bb t t' n' ?\\<gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>f.\n        \\<lbrakk>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n                 \\<le> n\\<^sub>f;\n         pb.eval the_bb t t' n\\<^sub>f\n          [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "hence \"(p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t n\\<^sub>f))\""], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)", "using \\<open>t \\<in> arch\\<close> pb.baEA"], ["proof (prove)\nusing this:\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  pb.eval the_bb t t' n\\<^sub>f\n   [\\<lambda>bb. (p, solve p) = bbcs bb]\\<^sub>b\n  t \\<in> arch\n  \\<lbrakk>\\<exists>i\\<ge>?n. \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub>;\n   pb.eval ?c ?t ?t' ?n [?\\<phi>]\\<^sub>b\\<rbrakk>\n  \\<Longrightarrow> ?\\<phi>\n                     (\\<sigma>\\<^bsub>?c\\<^esub>?t\n           \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>)\n\ngoal (1 subgoal):\n 1. (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)", "by auto"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "moreover"], ["proof (state)\nthis:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "have \"n\\<^sub>f\\<ge>n\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "from \\<open>\\<exists>n'''\\<ge>n\\<^sub>s. \\<parallel>sKs p\\<parallel>\\<^bsub>t n'''\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'''\\<ge>n\\<^sub>s.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'''\\<^esub>", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<ge>n\\<^sub>s\""], ["proof (prove)\nusing this:\n  \\<exists>n'''\\<ge>n\\<^sub>s.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'''\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>", "using sb.nxtActLe"], ["proof (prove)\nusing this:\n  \\<exists>n'''\\<ge>n\\<^sub>s.\n     \\<parallel>sKs p\\<parallel>\\<^bsub>t n'''\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>s\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>", "by simp"], ["proof (state)\nthis:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "moreover"], ["proof (state)\nthis:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "from \\<open>n\\<^sub>k\\<ge>n\\<close> and \\<open>\\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>", "have \"\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\\<ge>n\\<^sub>k\""], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "using sb.nxtActI"], ["proof (prove)\nusing this:\n  n \\<le> n\\<^sub>k\n  \\<parallel>sKs p\\<parallel>\\<^bsub>t n\\<^sub>k\\<^esub>\n  \\<exists>i\\<ge>?n.\n     \\<parallel>?c\\<parallel>\\<^bsub>?t i\\<^esub> \\<Longrightarrow>\n  ?n \\<le> \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> \\<and>\n  \\<parallel>?c\\<parallel>\\<^bsub>?t \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub>\\<^esub> \\<and>\n  \\<not> (\\<exists>k\\<ge>?n.\n             sb.latestAct_cond ?c ?t\n              \\<langle>?c \\<rightarrow> ?t\\<rangle>\\<^bsub>?n\\<^esub> k)\n\ngoal (1 subgoal):\n 1. n\\<^sub>k\n    \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "by blast"], ["proof (state)\nthis:\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "ultimately"], ["proof (chain)\npicking this:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "using \\<open>n\\<^sub>f\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\\<close> \\<open>n\\<^sub>s\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<close>\n                \\<open>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\\<ge>n\\<^sub>r\\<close> \\<open>n\\<^sub>r\\<ge>\\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\\<close> \\<open>n\\<^sub>k\\<ge>n\\<close> \\<open>n\\<ge>n\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>s\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  n\\<^sub>k\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>s\\<^esub>\n  \\<le> n\\<^sub>f\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<le> n\\<^sub>s\n  n\\<^sub>r\n  \\<le> \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>r\\<^esub>\n  \\<langle>sKs p \\<rightarrow> t\\<rangle>\\<^bsub>n\\<^sub>k\\<^esub>\n  \\<le> n\\<^sub>r\n  n \\<le> n\\<^sub>k\n  n\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. n\\<^sub>0 \\<le> n\\<^sub>f", "by arith"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n\\<^sub>k.\n       \\<parallel>sKs p\\<parallel>\\<^bsub>t n'\\<^esub> \\<and>\n       (p, solve p) \\<noteq>\n       ksns (\\<sigma>\\<^bsub>sKs p\\<^esub>t n') \\<Longrightarrow>\n    \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "ultimately"], ["proof (chain)\npicking this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n  n\\<^sub>0 \\<le> n\\<^sub>f", "show ?thesis"], ["proof (prove)\nusing this:\n  (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>f)\n  n\\<^sub>0 \\<le> n\\<^sub>f\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<ge>n\\<^sub>0.\n       (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)", "by auto"], ["proof (state)\nthis:\n  \\<exists>m\\<ge>n\\<^sub>0.\n     (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<ge>n\\<^sub>0.\n     (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m\\<ge>n\\<^sub>0.\n     (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>P.\n      sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n\\<^sub>0) \\<and>\n      p \\<in> P) \\<longrightarrow>\n  (\\<exists>m\\<ge>n\\<^sub>0.\n      (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<exists>P.\n         sub P \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<and>\n         p \\<in> P) \\<longrightarrow>\n     (\\<exists>m\\<ge>n.\n         (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem pSolved:\n    fixes t and t'::\"nat \\<Rightarrow>'BB\" and t''::\"nat \\<Rightarrow>'KS\"\n    assumes \"t\\<in>arch\" and\n      \"\\<forall>n. (\\<exists>n'\\<ge>n. \\<parallel>sKs (bbop(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n)))\\<parallel>\\<^bsub>t n'\\<^esub>)\"\n    shows\n      \"\\<forall>n. (\\<forall>P. (sub P \\<in> bbrp(\\<sigma>\\<^bsub>the_bb\\<^esub>(t n))\n        \\<longrightarrow> (\\<forall>p \\<in> P. (\\<exists>m\\<ge>n. (p,solve(p)) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>(t m))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n P.\n       sub P\n       \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<longrightarrow>\n       (\\<forall>p\\<in>P.\n           \\<exists>m\\<ge>n.\n              (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "using assms pSolved_Ind"], ["proof (prove)\nusing this:\n  t \\<in> arch\n  \\<forall>n.\n     \\<exists>n'\\<ge>n.\n        \\<parallel>sKs (bbop\n                         (\\<sigma>\\<^bsub>the_bb\\<^esub>t\n                   n))\\<parallel>\\<^bsub>t n'\\<^esub>\n  \\<lbrakk>?t \\<in> arch;\n   \\<forall>n.\n      \\<exists>n'\\<ge>n.\n         \\<parallel>sKs (bbop\n                          (\\<sigma>\\<^bsub>the_bb\\<^esub>?t\n                    n))\\<parallel>\\<^bsub>?t n'\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<forall>n.\n                       (\\<exists>P.\n                           sub P\n                           \\<in> bbrp\n                                  (\\<sigma>\\<^bsub>the_bb\\<^esub>?t\n                            n) \\<and>\n                           ?p \\<in> P) \\<longrightarrow>\n                       (\\<exists>m\\<ge>n.\n                           (?p, solve ?p) =\n                           bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>?t m))\n\ngoal (1 subgoal):\n 1. \\<forall>n P.\n       sub P\n       \\<in> bbrp (\\<sigma>\\<^bsub>the_bb\\<^esub>t n) \\<longrightarrow>\n       (\\<forall>p\\<in>P.\n           \\<exists>m\\<ge>n.\n              (p, solve p) = bbcs (\\<sigma>\\<^bsub>the_bb\\<^esub>t m))", "by blast"], ["", "end"], ["", "end"]]}