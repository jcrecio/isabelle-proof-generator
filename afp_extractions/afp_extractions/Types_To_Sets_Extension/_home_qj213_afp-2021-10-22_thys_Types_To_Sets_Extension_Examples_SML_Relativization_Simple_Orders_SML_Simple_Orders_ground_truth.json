{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/SML_Relativization/Simple_Orders/SML_Simple_Orders.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma preorder_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=))  ===> (=)) \n      (preorder_ow (Collect (Domainp A))) class.preorder\"", "lemma ordering_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (ordering_ow (Collect (Domainp A))) ordering\"", "lemma order_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (order_ow (Collect (Domainp A))) class.order\"", "lemma dense_order_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (dense_order_ow (Collect (Domainp A))) class.dense_order\"", "lemma ordering_top_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=)) \n      (ordering_top_ow (Collect (Domainp A))) ordering_top\"", "lemma order_bot_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (order_bot_ow (Collect (Domainp A))) class.order_bot\"", "lemma order_top_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=)) \n      (order_top_ow (Collect (Domainp A))) class.order_top\""], "translations": [["", "lemma preorder_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=))  ===> (=)) \n      (preorder_ow (Collect (Domainp A))) class.preorder\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (preorder_ow (Collect (Domainp A))) class.preorder", "unfolding preorder_ow_def class.preorder_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (\\<lambda>le ls.\n         (\\<forall>x y.\n             x \\<in> Collect (Domainp A) \\<longrightarrow>\n             y \\<in> Collect (Domainp A) \\<longrightarrow>\n             ls x y = (le x y \\<and> \\<not> le y x)) \\<and>\n         (\\<forall>x.\n             x \\<in> Collect (Domainp A) \\<longrightarrow> le x x) \\<and>\n         (\\<forall>x y z.\n             x \\<in> Collect (Domainp A) \\<longrightarrow>\n             y \\<in> Collect (Domainp A) \\<longrightarrow>\n             z \\<in> Collect (Domainp A) \\<longrightarrow>\n             le x y \\<longrightarrow> le y z \\<longrightarrow> le x z))\n     (\\<lambda>less_eq less.\n         (\\<forall>x y.\n             less x y = (less_eq x y \\<and> \\<not> less_eq y x)) \\<and>\n         (\\<forall>x. less_eq x x) \\<and>\n         (\\<forall>x y z.\n             less_eq x y \\<longrightarrow>\n             less_eq y z \\<longrightarrow> less_eq x z))", "apply transfer_prover_start"], ["proof (prove)\ngoal (14 subgoals):\n 1. Transfer.Rel ((=) ===> (=) ===> ?Rr36) ?al36 (\\<longrightarrow>)\n 2. Transfer.Rel ((=) ===> ?Rr36 ===> ?Rq36) ?ak36 (\\<longrightarrow>)\n 3. Transfer.Rel ((A ===> ?Rq36) ===> ?Rp36) ?aj36 All\n 4. Transfer.Rel ((A ===> ?Rp36) ===> ?Ro36) ?ai36 All\n 5. Transfer.Rel ((A ===> ?Ro36) ===> ?Rn36) ?ah36 All\n 6. Transfer.Rel ((A ===> (=)) ===> ?Rm36) ?ag36 All\n 7. Transfer.Rel (?Rm36 ===> ?Rn36 ===> ?Rg36) ?af36 (\\<and>)\n 8. Transfer.Rel ((=) ===> ?Rl36) ?ae36 Not\n 9. Transfer.Rel ((=) ===> ?Rl36 ===> ?Rk36) ?ad36 (\\<and>)\n 10. Transfer.Rel ((=) ===> ?Rk36 ===> ?Rj36) ?ac36 (=)\nA total of 14 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        (\\<forall>x y.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            ls x y = (le x y \\<and> \\<not> le y x)) \\<and>\n        (\\<forall>x.\n            x \\<in> Collect (Domainp A) \\<longrightarrow> le x x) \\<and>\n        (\\<forall>x y z.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            z \\<in> Collect (Domainp A) \\<longrightarrow>\n            le x y \\<longrightarrow> le y z \\<longrightarrow> le x z)) =\n    (\\<lambda>less_eq less.\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               less x y = (less_eq x y \\<and> \\<not> less_eq y x)) \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A). less_eq x x) \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               \\<forall>z\\<in>Collect (Domainp A).\n                  less_eq x y \\<longrightarrow>\n                  less_eq y z \\<longrightarrow> less_eq x z))", "by blast"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context preorder_ow\nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting preorder_ow_axioms\n  eliminating through auto\nbegin"], ["", "tts_lemma less_irrefl:\n  assumes \"x \\<in> U\"\n  shows \"\\<not> x <\\<^sub>o\\<^sub>w x\"\n  is preorder_class.less_irrefl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>o\\<^sub>w..b}\"\n  is preorder_class.bdd_below_Ioc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ioc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a<\\<^sub>o\\<^sub>w..b}\"\n    is preorder_class.bdd_above_Ioc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Iic:\n  assumes \"b \\<in> U\"\n  shows \"bdd_above {..\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_above_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Iio:\n  assumes \"b \\<in> U\"\n  shows \"bdd_above {..<\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_above_Iio"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ici:\n  assumes \"a \\<in> U\"\n  shows \"bdd_below {a..\\<^sub>o\\<^sub>w}\"\n    is preorder_class.bdd_below_Ici"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioi:\n  assumes \"a \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>o\\<^sub>w..}\"\n    is preorder_class.bdd_below_Ioi"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Icc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a..\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_above_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ioo:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_above_Ioo"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Icc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a..\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_below_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioo:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wb}\"\n    is preorder_class.bdd_below_Ioo"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ico:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b})\"\n    is preorder_class.bdd_above_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ico:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b})\"\n    is preorder_class.bdd_below_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Ioi_le_Ico:\n  assumes \"a \\<in> U\"\n  shows \"{a<\\<^sub>o\\<^sub>w..} \\<subseteq> {a..\\<^sub>o\\<^sub>w}\"\n    is preorder_class.Ioi_le_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_refl:\n  assumes \"y \\<in> U\" and \"x = y\"\n  shows \"x \\<le>\\<^sub>o\\<^sub>w y\"\n    is preorder_class.eq_refl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_le:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"x \\<le>\\<^sub>o\\<^sub>w y\"\n    is preorder_class.less_imp_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_not_sym:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"\\<not> y <\\<^sub>o\\<^sub>w x\"\n    is preorder_class.less_not_sym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_less:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"(\\<not> y <\\<^sub>o\\<^sub>w x) = True\"\n    is preorder_class.less_imp_not_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_asym':\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a <\\<^sub>o\\<^sub>w b\" and \"b <\\<^sub>o\\<^sub>w a\"\n  shows P\n    is preorder_class.less_asym'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_triv:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"(y <\\<^sub>o\\<^sub>w x \\<longrightarrow> P) = True\"\n    is preorder_class.less_imp_triv"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\" and \"y <\\<^sub>o\\<^sub>w z\"\n  shows \"x <\\<^sub>o\\<^sub>w z\"\n    is preorder_class.less_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_le_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\" and \"y \\<le>\\<^sub>o\\<^sub>w z\"\n  shows \"x <\\<^sub>o\\<^sub>w z\"\n    is preorder_class.less_le_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_less_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x \\<le>\\<^sub>o\\<^sub>w y\" and \"y <\\<^sub>o\\<^sub>w z\"\n  shows \"x <\\<^sub>o\\<^sub>w z\"\n    is preorder_class.le_less_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_aboveI:\n  assumes \"A \\<subseteq> U\" and \"M \\<in> U\" and \"\\<And>x. \\<lbrakk>x \\<in> U; x \\<in> A\\<rbrakk> \\<Longrightarrow> x \\<le>\\<^sub>o\\<^sub>w M\"\n  shows \"bdd_above A\"\n    is preorder_class.bdd_aboveI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_belowI:\n  assumes \"A \\<subseteq> U\" and \"m \\<in> U\" and \"\\<And>x. \\<lbrakk>x \\<in> U; x \\<in> A\\<rbrakk> \\<Longrightarrow> m \\<le>\\<^sub>o\\<^sub>w x\"\n  shows \"bdd_below A\"\n    is preorder_class.bdd_belowI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_asym:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\" and \"\\<not> P \\<Longrightarrow> y <\\<^sub>o\\<^sub>w x\"\n  shows P\n    is preorder_class.less_asym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma transp_less: \"transp_on U (<\\<^sub>o\\<^sub>w)\"\n  is preorder_class.transp_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma transp_le: \"transp_on U (\\<le>\\<^sub>o\\<^sub>w)\"\n  is preorder_class.transp_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma transp_gr: \"transp_on U (\\<lambda>x y. y <\\<^sub>o\\<^sub>w x)\"\n  is preorder_class.transp_gr"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma transp_ge: \"transp_on U (\\<lambda>x y. y \\<le>\\<^sub>o\\<^sub>w x)\"\n  is preorder_class.transp_ge"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Int1:\n  assumes \"A \\<subseteq> U\" and \"B \\<subseteq> U\" and \"bdd_above A\"\n  shows \"bdd_above (A \\<inter> B)\"\n    is preorder_class.bdd_above_Int1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Int2:\n  assumes \"B \\<subseteq> U\" and \"A \\<subseteq> U\" and \"bdd_above B\"\n  shows \"bdd_above (A \\<inter> B)\"\n    is preorder_class.bdd_above_Int2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Int1:\n  assumes \"A \\<subseteq> U\" and \"B \\<subseteq> U\" and \"bdd_below A\"\n  shows \"bdd_below (A \\<inter> B)\"\n    is preorder_class.bdd_below_Int1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Int2:\n  assumes \"B \\<subseteq> U\" and \"A \\<subseteq> U\" and \"bdd_below B\"\n  shows \"bdd_below (A \\<inter> B)\"\n    is preorder_class.bdd_below_Int2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_mono:\n  assumes \"B \\<subseteq> U\" and \"bdd_above B\" and \"A \\<subseteq> B\"\n  shows \"bdd_above A\"\n    is preorder_class.bdd_above_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_mono:\n  assumes \"B \\<subseteq> U\" and \"bdd_below B\" and \"A \\<subseteq> B\"\n  shows \"bdd_below A\"\n    is preorder_class.bdd_below_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastAtMost_subseteq_atLeastLessThan_iff:\n  assumes \"a \\<in> U\"\n    and \"b \\<in> U\"\n    and \"c \\<in> U\"\n    and \"d \\<in> U\"\n  shows \"({a..\\<^sub>o\\<^sub>wb} \\<subseteq> (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {c..<d})) = \n    (a \\<le>\\<^sub>o\\<^sub>w b \\<longrightarrow> b <\\<^sub>o\\<^sub>w d \\<and> c \\<le>\\<^sub>o\\<^sub>w a)\"\n    is preorder_class.atLeastAtMost_subseteq_atLeastLessThan_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atMost_subset_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"({..\\<^sub>o\\<^sub>wx} \\<subseteq> {..\\<^sub>o\\<^sub>wy}) = (x \\<le>\\<^sub>o\\<^sub>w y)\"\n    is Set_Interval.atMost_subset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma single_Diff_lessThan:\n  assumes \"k \\<in> U\"\n  shows \"{k} - {..<\\<^sub>o\\<^sub>wk} = {k}\"\n  is Set_Interval.single_Diff_lessThan"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeast_subset_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"({x..\\<^sub>o\\<^sub>w} \\<subseteq> {y..\\<^sub>o\\<^sub>w}) = (y \\<le>\\<^sub>o\\<^sub>w x)\"\n    is Set_Interval.atLeast_subset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_psubset_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"d \\<in> U\"\n  shows \n    \"({a..\\<^sub>o\\<^sub>wb} \\<subset> {c..\\<^sub>o\\<^sub>wd}) = \n      (c \\<le>\\<^sub>o\\<^sub>w d \\<and> (\\<not> a \\<le>\\<^sub>o\\<^sub>w b \\<or> c \\<le>\\<^sub>o\\<^sub>w a \\<and> b \\<le>\\<^sub>o\\<^sub>w d \\<and> (c <\\<^sub>o\\<^sub>w a \\<or> b <\\<^sub>o\\<^sub>w d)))\"\n    is preorder_class.atLeastatMost_psubset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_empty_eq_Iic_eq_empty:\n  assumes \"h \\<in> U\"\n  shows \"{} \\<noteq> {..\\<^sub>o\\<^sub>wh}\"\n    is preorder_class.not_empty_eq_Iic_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_subset_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"d \\<in> U\"\n  shows \"({a..\\<^sub>o\\<^sub>wb} \\<subseteq> {c..\\<^sub>o\\<^sub>wd}) = (\\<not> a \\<le>\\<^sub>o\\<^sub>w b \\<or> b \\<le>\\<^sub>o\\<^sub>w d \\<and> c \\<le>\\<^sub>o\\<^sub>w a)\"\n    is preorder_class.atLeastatMost_subset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_subset_Ici_iff:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"l' \\<in> U\"\n  shows \"({l..\\<^sub>o\\<^sub>wh} \\<subseteq> {l'..\\<^sub>o\\<^sub>w}) = (\\<not> l \\<le>\\<^sub>o\\<^sub>w h \\<or> l' \\<le>\\<^sub>o\\<^sub>w l)\"\n    is preorder_class.Icc_subset_Ici_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_subset_Iic_iff:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"h' \\<in> U\"\n  shows \"({l..\\<^sub>o\\<^sub>wh} \\<subseteq> {..\\<^sub>o\\<^sub>wh'}) = (\\<not> l \\<le>\\<^sub>o\\<^sub>w h \\<or> h \\<le>\\<^sub>o\\<^sub>w h')\"\n    is preorder_class.Icc_subset_Iic_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_empty_eq_Ici_eq_empty:\n  assumes \"l \\<in> U\"\n  shows \"{} \\<noteq> {l..\\<^sub>o\\<^sub>w}\"\n  is preorder_class.not_empty_eq_Ici_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_eq_empty:\n  assumes \"l \\<in> U\"\n  shows \"{l..\\<^sub>o\\<^sub>w} \\<noteq> {}\"\nis preorder_class.not_Ici_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Iic_eq_empty:\n  assumes \"h \\<in> U\"\n  shows \"{..\\<^sub>o\\<^sub>wh} \\<noteq> {}\"\n    is preorder_class.not_Iic_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty_iff2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({} = {a..\\<^sub>o\\<^sub>wb}) = (\\<not> a \\<le>\\<^sub>o\\<^sub>w b)\"\n    is preorder_class.atLeastatMost_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty_iff2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({} = (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b})) = (\\<not> a <\\<^sub>o\\<^sub>w b)\"\n    is preorder_class.atLeastLessThan_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty_iff2:\n  assumes \"k \\<in> U\" and \"l \\<in> U\"\n  shows \"({} = {k<\\<^sub>o\\<^sub>w..l}) = (\\<not> k <\\<^sub>o\\<^sub>w l)\"\n    is preorder_class.greaterThanAtMost_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({a..\\<^sub>o\\<^sub>wb} = {}) = (\\<not> a \\<le>\\<^sub>o\\<^sub>w b)\"\n    is preorder_class.atLeastatMost_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"((on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b}) = {}) = (\\<not> a <\\<^sub>o\\<^sub>w b)\"\n    is preorder_class.atLeastLessThan_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty_iff:\n  assumes \"k \\<in> U\" and \"l \\<in> U\"\n  shows \"({k<\\<^sub>o\\<^sub>w..l} = {}) = (\\<not> k <\\<^sub>o\\<^sub>w l)\"\n    is preorder_class.greaterThanAtMost_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U)\n  substituting preorder_ow_axioms\nbegin"], ["", "tts_lemma bdd_above_empty:\n  assumes \"U \\<noteq> {}\"\n  shows \"bdd_above {}\"\n    is preorder_class.bdd_above_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_empty:\n  assumes \"U \\<noteq> {}\"\n  shows \"bdd_below {}\"\n    is preorder_class.bdd_below_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U) and (?'b to \\<open>U\\<^sub>2::'a set\\<close>)\n  rewriting ctr_simps\n  substituting preorder_ow_axioms\n  eliminating through (auto intro: bdd_above_empty bdd_below_empty)\nbegin"], ["", "tts_lemma bdd_belowI2:\n  assumes \"A \\<subseteq> U\\<^sub>2\"\n    and \"m \\<in> U\"\n    and \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\"\n    and \"\\<And>x. x \\<in> A \\<Longrightarrow> m \\<le>\\<^sub>o\\<^sub>w f x\"\n  shows \"bdd_below (f ` A)\"\n    given preorder_class.bdd_belowI2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> U\\<^sub>2; m \\<in> U;\n     \\<forall>x\\<in>U\\<^sub>2. f x \\<in> U;\n     \\<And>x. x \\<in> A \\<Longrightarrow> m \\<le>\\<^sub>o\\<^sub>w f x;\n     \\<And>A U\\<^sub>2 m f.\n        \\<lbrakk>A \\<subseteq> U\\<^sub>2; m \\<in> U;\n         \\<forall>x\\<in>U\\<^sub>2. f x \\<in> U;\n         \\<And>x.\n            \\<lbrakk>x \\<in> U\\<^sub>2; x \\<in> A\\<rbrakk>\n            \\<Longrightarrow> m \\<le>\\<^sub>o\\<^sub>w f x\\<rbrakk>\n        \\<Longrightarrow> local.bdd_below (f ` A)\\<rbrakk>\n    \\<Longrightarrow> local.bdd_below (f ` A)", "by blast"], ["", "tts_lemma bdd_aboveI2:\n  assumes \"A \\<subseteq> U\\<^sub>2\"\n    and \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\"\n    and \"M \\<in> U\"\n    and \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w M\"\n  shows \"bdd_above (f ` A)\"\n    given preorder_class.bdd_aboveI2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> U\\<^sub>2; \\<forall>x\\<in>U\\<^sub>2. f x \\<in> U;\n     M \\<in> U;\n     \\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w M;\n     \\<And>A U\\<^sub>2 f M.\n        \\<lbrakk>A \\<subseteq> U\\<^sub>2;\n         \\<forall>x\\<in>U\\<^sub>2. f x \\<in> U; M \\<in> U;\n         \\<And>x.\n            \\<lbrakk>x \\<in> U\\<^sub>2; x \\<in> A\\<rbrakk>\n            \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w M\\<rbrakk>\n        \\<Longrightarrow> local.bdd_above (f ` A)\\<rbrakk>\n    \\<Longrightarrow> local.bdd_above (f ` A)", "by blast"], ["", "end"], ["", "end"], ["", "subsection\\<open>Partial orders\\<close>"], ["", "subsubsection\\<open>Definitions and common properties\\<close>"], ["", "locale ordering_ow =\n  fixes U :: \"'ao set\"\n    and le :: \"'ao \\<Rightarrow> 'ao \\<Rightarrow> bool\" (infix \"\\<^bold>\\<le>\\<^sub>o\\<^sub>w\" 50)\n    and ls :: \"'ao \\<Rightarrow> 'ao \\<Rightarrow> bool\" (infix \"\\<^bold><\\<^sub>o\\<^sub>w\" 50)\n  assumes strict_iff_order: \"\\<lbrakk> a \\<in> U; b \\<in> U \\<rbrakk> \\<Longrightarrow> a \\<^bold><\\<^sub>o\\<^sub>w b \\<longleftrightarrow> a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b \\<and> a \\<noteq> b\"\n    and refl: \"a \\<in> U \\<Longrightarrow> a \\<^bold>\\<le>\\<^sub>o\\<^sub>w a\"\n    and antisym: \"\\<lbrakk> a \\<in> U; b \\<in> U; a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b; b \\<^bold>\\<le>\\<^sub>o\\<^sub>w a \\<rbrakk> \\<Longrightarrow> a = b\"\n    and trans: \"\\<lbrakk> a \\<in> U; b \\<in> U; c \\<in> U; a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b; b \\<^bold>\\<le>\\<^sub>o\\<^sub>w c \\<rbrakk> \\<Longrightarrow> a \\<^bold>\\<le>\\<^sub>o\\<^sub>w c\"\nbegin"], ["", "notation le (infix \"\\<^bold>\\<le>\\<^sub>o\\<^sub>w\" 50)\n  and ls (infix \"\\<^bold><\\<^sub>o\\<^sub>w\" 50)"], ["", "end"], ["", "locale order_ow = preorder_ow U le ls for U :: \"'ao set\" and le ls +\n  assumes antisym: \"\\<lbrakk> x \\<in> U; y \\<in> U; x \\<le>\\<^sub>o\\<^sub>w y; y \\<le>\\<^sub>o\\<^sub>w x \\<rbrakk> \\<Longrightarrow> x = y\" \nbegin"], ["", "sublocale \n  order: ordering_ow U \\<open>(\\<le>\\<^sub>o\\<^sub>w)\\<close> \\<open>(<\\<^sub>o\\<^sub>w)\\<close> + \n  dual_order: ordering_ow U \\<open>(\\<ge>\\<^sub>o\\<^sub>w)\\<close> \\<open>(>\\<^sub>o\\<^sub>w)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordering_ow U (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) &&&\n    ordering_ow U (\\<lambda>x y. y \\<le>\\<^sub>o\\<^sub>w x)\n     (\\<lambda>x y. y <\\<^sub>o\\<^sub>w x)", "apply unfold_locales"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (a <\\<^sub>o\\<^sub>w b) =\n                         (a \\<le>\\<^sub>o\\<^sub>w b \\<and> a \\<noteq> b)\n 2. \\<And>a. a \\<in> U \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w a\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w c\n 5. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (b <\\<^sub>o\\<^sub>w a) =\n                         (b \\<le>\\<^sub>o\\<^sub>w a \\<and> a \\<noteq> b)\n 6. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 7. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U\\<rbrakk>\n    \\<Longrightarrow> (a_ <\\<^sub>o\\<^sub>w b_) =\n                      (a_ \\<le>\\<^sub>o\\<^sub>w b_ \\<and> a_ \\<noteq> b_)", "by (force simp: less_le_not_le antisym)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a. a \\<in> U \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w c\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (b <\\<^sub>o\\<^sub>w a) =\n                         (b \\<le>\\<^sub>o\\<^sub>w a \\<and> a \\<noteq> b)\n 5. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 6. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_ \\<in> U \\<Longrightarrow> a_ \\<le>\\<^sub>o\\<^sub>w a_", "by simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w c\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (b <\\<^sub>o\\<^sub>w a) =\n                         (b \\<le>\\<^sub>o\\<^sub>w a \\<and> a \\<noteq> b)\n 4. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 5. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U; a_ \\<le>\\<^sub>o\\<^sub>w b_;\n     b_ \\<le>\\<^sub>o\\<^sub>w a_\\<rbrakk>\n    \\<Longrightarrow> a_ = b_", "by (simp add: antisym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; a \\<le>\\<^sub>o\\<^sub>w b;\n        b \\<le>\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w c\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (b <\\<^sub>o\\<^sub>w a) =\n                         (b \\<le>\\<^sub>o\\<^sub>w a \\<and> a \\<noteq> b)\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U; c_ \\<in> U;\n     a_ \\<le>\\<^sub>o\\<^sub>w b_; b_ \\<le>\\<^sub>o\\<^sub>w c_\\<rbrakk>\n    \\<Longrightarrow> a_ \\<le>\\<^sub>o\\<^sub>w c_", "by (metis order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> (b <\\<^sub>o\\<^sub>w a) =\n                         (b \\<le>\\<^sub>o\\<^sub>w a \\<and> a \\<noteq> b)\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U\\<rbrakk>\n    \\<Longrightarrow> (b_ <\\<^sub>o\\<^sub>w a_) =\n                      (b_ \\<le>\\<^sub>o\\<^sub>w a_ \\<and> a_ \\<noteq> b_)", "by (force simp: less_le_not_le antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        a \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U; b_ \\<le>\\<^sub>o\\<^sub>w a_;\n     a_ \\<le>\\<^sub>o\\<^sub>w b_\\<rbrakk>\n    \\<Longrightarrow> a_ = b_", "by (simp add: antisym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a;\n        c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk>\n       \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U; c_ \\<in> U;\n     b_ \\<le>\\<^sub>o\\<^sub>w a_; c_ \\<le>\\<^sub>o\\<^sub>w b_\\<rbrakk>\n    \\<Longrightarrow> c_ \\<le>\\<^sub>o\\<^sub>w a_", "by (metis order_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "no_notation le (infix \"\\<^bold>\\<le>\\<^sub>o\\<^sub>w\" 50)\n  and ls (infix \"\\<^bold><\\<^sub>o\\<^sub>w\" 50)"], ["", "end"], ["", "locale ord_order_ow = ord\\<^sub>1: ord_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 + ord\\<^sub>2: order_ow U\\<^sub>2 le\\<^sub>2 ls\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and le\\<^sub>1 ls\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and le\\<^sub>2 ls\\<^sub>2"], ["", "sublocale ord_order_ow \\<subseteq> ord_preorder_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_preorder_ow U\\<^sub>2 le\\<^sub>2 ls\\<^sub>2", ".."], ["", "locale preorder_order_ow =\n  ord\\<^sub>1: preorder_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 + ord\\<^sub>2: order_ow U\\<^sub>2 le\\<^sub>2 ls\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and le\\<^sub>1 ls\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and le\\<^sub>2 ls\\<^sub>2"], ["", "sublocale preorder_order_ow \\<subseteq> preorder_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_pair_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 U\\<^sub>2 le\\<^sub>2\n     ls\\<^sub>2", ".."], ["", "locale order_pair_ow = ord\\<^sub>1: order_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 + ord\\<^sub>2: order_ow U\\<^sub>2 le\\<^sub>2 ls\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and le\\<^sub>1 ls\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and le\\<^sub>2 ls\\<^sub>2"], ["", "sublocale order_pair_ow \\<subseteq> preorder_order_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 U\\<^sub>2 le\\<^sub>2\n     ls\\<^sub>2", ".."], ["", "ud \\<open>order.mono\\<close> (\\<open>(with _ _ : \\<guillemotleft>mono\\<guillemotright> _)\\<close> [1000, 999, 1000] 10)"], ["", "ud mono' \\<open>mono\\<close>"], ["", "ud \\<open>order.strict_mono\\<close> (\\<open>(with _ _ : \\<guillemotleft>strict'_mono\\<guillemotright> _)\\<close> [1000, 999, 1000] 10)"], ["", "ud strict_mono' \\<open>strict_mono\\<close>"], ["", "ud \\<open>order.antimono\\<close> (\\<open>(with _ _ : \\<guillemotleft>strict'_mono\\<guillemotright> _)\\<close> [1000, 999, 1000] 10)"], ["", "ud antimono' \\<open>antimono\\<close>"], ["", "ud \\<open>monoseq\\<close> (\\<open>(with _ : \\<guillemotleft>monoseq\\<guillemotright> _)\\<close> [1000, 1000] 10)"], ["", "ctr relativization\n  synthesis ctr_simps\n  assumes [transfer_domain_rule, transfer_rule]: \n    \"Domainp (B::'c\\<Rightarrow>'d\\<Rightarrow>bool) = (\\<lambda>x. x \\<in> U\\<^sub>2)\"\n    and [transfer_rule]: \"right_total B\" \n  trp (?'b \\<open>A::'a\\<Rightarrow>'b\\<Rightarrow>bool\\<close>) and (?'a B)\n  in mono_ow: mono.with_def \n    (\\<open>(on _ with _ _ : \\<guillemotleft>mono\\<guillemotright> _)\\<close> [1000, 1000, 999, 1000] 10)\n    and strict_mono_ow: strict_mono.with_def \n      (\\<open>(on _ with _ _ : \\<guillemotleft>strict'_mono\\<guillemotright> _)\\<close> [1000, 1000, 999, 1000] 10)\n    and antimono_ow: antimono.with_def\n      (\\<open>(on _ with _ _ : \\<guillemotleft>antimono\\<guillemotright> _)\\<close> [1000, 1000, 999, 1000] 10)\n    and monoseq_ow: monoseq.with_def"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma ordering_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (ordering_ow (Collect (Domainp A))) ordering\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (ordering_ow (Collect (Domainp A))) ordering", "unfolding ordering_ow_def ordering_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (\\<lambda>le ls.\n         ((\\<forall>a b.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              b \\<in> Collect (Domainp A) \\<longrightarrow>\n              ls a b = (le a b \\<and> a \\<noteq> b)) \\<and>\n          (\\<forall>a.\n              a \\<in> Collect (Domainp A) \\<longrightarrow> le a a)) \\<and>\n         (\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             le a b \\<longrightarrow> le b a \\<longrightarrow> a = b) \\<and>\n         (\\<forall>a b c.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             c \\<in> Collect (Domainp A) \\<longrightarrow>\n             le a b \\<longrightarrow> le b c \\<longrightarrow> le a c))\n     (\\<lambda>less_eq less.\n         ((\\<forall>a b.\n              less a b = (less_eq a b \\<and> a \\<noteq> b)) \\<and>\n          (\\<forall>a. less_eq a a)) \\<and>\n         (\\<forall>a b.\n             less_eq a b \\<longrightarrow>\n             less_eq b a \\<longrightarrow> a = b) \\<and>\n         (\\<forall>a b c.\n             less_eq a b \\<longrightarrow>\n             less_eq b c \\<longrightarrow> less_eq a c))", "apply transfer_prover_start"], ["proof (prove)\ngoal (21 subgoals):\n 1. Transfer.Rel ((=) ===> (=) ===> ?Ry50) ?as50 (\\<longrightarrow>)\n 2. Transfer.Rel ((=) ===> ?Ry50 ===> ?Rx50) ?ar50 (\\<longrightarrow>)\n 3. Transfer.Rel ((A ===> ?Rx50) ===> ?Rw50) ?aq50 All\n 4. Transfer.Rel ((A ===> ?Rw50) ===> ?Rv50) ?ap50 All\n 5. Transfer.Rel ((A ===> ?Rv50) ===> ?Rq50) ?ao50 All\n 6. Transfer.Rel (A ===> A ===> ?Ru50) ?an50 (=)\n 7. Transfer.Rel ((=) ===> ?Ru50 ===> ?Rt50) ?am50 (\\<longrightarrow>)\n 8. Transfer.Rel ((=) ===> ?Rt50 ===> ?Rs50) ?al50 (\\<longrightarrow>)\n 9. Transfer.Rel ((A ===> ?Rs50) ===> ?Rr50) ?ak50 All\n 10. Transfer.Rel ((A ===> ?Rr50) ===> ?Rp50) ?aj50 All\nA total of 21 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        ((\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             ls a b = (le a b \\<and> a \\<noteq> b)) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> le a a)) \\<and>\n        (\\<forall>a b.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            le a b \\<longrightarrow> le b a \\<longrightarrow> a = b) \\<and>\n        (\\<forall>a b c.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            c \\<in> Collect (Domainp A) \\<longrightarrow>\n            le a b \\<longrightarrow> le b c \\<longrightarrow> le a c)) =\n    (\\<lambda>less_eq less.\n        ((\\<forall>a\\<in>Collect (Domainp A).\n             \\<forall>b\\<in>Collect (Domainp A).\n                less a b = (less_eq a b \\<and> a \\<noteq> b)) \\<and>\n         (\\<forall>a\\<in>Collect (Domainp A). less_eq a a)) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               less_eq a b \\<longrightarrow>\n               less_eq b a \\<longrightarrow> a = b) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               \\<forall>c\\<in>Collect (Domainp A).\n                  less_eq a b \\<longrightarrow>\n                  less_eq b c \\<longrightarrow> less_eq a c))", "unfolding Ball_Collect[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        ((\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             ls a b = (le a b \\<and> a \\<noteq> b)) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> le a a)) \\<and>\n        (\\<forall>a b.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            le a b \\<longrightarrow> le b a \\<longrightarrow> a = b) \\<and>\n        (\\<forall>a b c.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            c \\<in> Collect (Domainp A) \\<longrightarrow>\n            le a b \\<longrightarrow> le b c \\<longrightarrow> le a c)) =\n    (\\<lambda>less_eq less.\n        ((\\<forall>a\\<in>Collect (Domainp A).\n             \\<forall>b\\<in>Collect (Domainp A).\n                less a b = (less_eq a b \\<and> a \\<noteq> b)) \\<and>\n         (\\<forall>a\\<in>Collect (Domainp A). less_eq a a)) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               less_eq a b \\<longrightarrow>\n               less_eq b a \\<longrightarrow> a = b) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               \\<forall>c\\<in>Collect (Domainp A).\n                  less_eq a b \\<longrightarrow>\n                  less_eq b c \\<longrightarrow> less_eq a c))", "by (intro ext HOL.arg_cong2[where f=\"(\\<and>)\"]) auto"], ["", "lemma order_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (order_ow (Collect (Domainp A))) class.order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_ow (Collect (Domainp A))) class.order", "unfolding \n    order_ow_def class.order_def order_ow_axioms_def class.order_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (\\<lambda>le ls.\n         preorder_ow (Collect (Domainp A)) le ls \\<and>\n         (\\<forall>x y.\n             x \\<in> Collect (Domainp A) \\<longrightarrow>\n             y \\<in> Collect (Domainp A) \\<longrightarrow>\n             le x y \\<longrightarrow> le y x \\<longrightarrow> x = y))\n     (\\<lambda>less_eq less.\n         class.preorder less_eq less \\<and>\n         (\\<forall>x y.\n             less_eq x y \\<longrightarrow>\n             less_eq y x \\<longrightarrow> x = y))", "apply transfer_prover_start"], ["proof (prove)\ngoal (8 subgoals):\n 1. Transfer.Rel (A ===> A ===> ?Rl19) ?af19 (=)\n 2. Transfer.Rel ((=) ===> ?Rl19 ===> ?Rk19) ?ae19 (\\<longrightarrow>)\n 3. Transfer.Rel ((=) ===> ?Rk19 ===> ?Rj19) ?ad19 (\\<longrightarrow>)\n 4. Transfer.Rel ((A ===> ?Rj19) ===> ?Ri19) ?ac19 All\n 5. Transfer.Rel ((A ===> ?Ri19) ===> ?Rg19) ?ab19 All\n 6. Transfer.Rel ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> ?Rf19)\n     ?aa19 class.preorder\n 7. Transfer.Rel (?Rf19 ===> ?Rg19 ===> (=)) ?a19 (\\<and>)\n 8. (\\<lambda>le ls.\n        preorder_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            le x y \\<longrightarrow> le y x \\<longrightarrow> x = y)) =\n    (\\<lambda>less_eq less.\n        ?a19 (?aa19 less_eq less)\n         (?ab19\n           (\\<lambda>x.\n               ?ac19\n                (\\<lambda>y.\n                    ?ad19 (less_eq x y)\n                     (?ae19 (less_eq y x) (?af19 x y))))))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        preorder_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            le x y \\<longrightarrow> le y x \\<longrightarrow> x = y)) =\n    (\\<lambda>less_eq less.\n        preorder_ow (Collect (Domainp A)) less_eq less \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               less_eq x y \\<longrightarrow>\n               less_eq y x \\<longrightarrow> x = y))", "by simp"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context ordering_ow\nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting ordering_ow_axioms\n  eliminating through simp\nbegin"], ["", "tts_lemma irrefl:\n  assumes \"a \\<in> U\"\n  shows \"\\<not> a \\<^bold><\\<^sub>o\\<^sub>w a\"\n    is ordering.irrefl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_implies_order:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<^bold><\\<^sub>o\\<^sub>w b\"\n  shows \"a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b\"\n  is ordering.strict_implies_order"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_implies_not_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<^bold><\\<^sub>o\\<^sub>w b\"\n  shows \"a \\<noteq> b\"\n    is ordering.strict_implies_not_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_iff_strict:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b) = (a \\<^bold><\\<^sub>o\\<^sub>w b \\<or> a = b)\"\n    is ordering.order_iff_strict"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma asym:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<^bold><\\<^sub>o\\<^sub>w b\" and \"b \\<^bold><\\<^sub>o\\<^sub>w a\"\n  shows False\n    is ordering.asym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a \\<^bold><\\<^sub>o\\<^sub>w b\" and \"b \\<^bold><\\<^sub>o\\<^sub>w c\"\n  shows \"a \\<^bold><\\<^sub>o\\<^sub>w c\"\n    is ordering.strict_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a \\<^bold><\\<^sub>o\\<^sub>w b\" and \"b \\<^bold>\\<le>\\<^sub>o\\<^sub>w c\"\n  shows \"a \\<^bold><\\<^sub>o\\<^sub>w c\"\n    is ordering.strict_trans2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans1:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b\" and \"b \\<^bold><\\<^sub>o\\<^sub>w c\"\n  shows \"a \\<^bold><\\<^sub>o\\<^sub>w c\"\n    is ordering.strict_trans1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_eq_order_implies_strict:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<noteq> b\" and \"a \\<^bold>\\<le>\\<^sub>o\\<^sub>w b\"\n  shows \"a \\<^bold><\\<^sub>o\\<^sub>w b\"\n    is ordering.not_eq_order_implies_strict"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context order_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating through clarsimp\nbegin"], ["", "tts_lemma atLeastAtMost_singleton:\n  assumes \"a \\<in> U\"\n  shows \"{a..\\<^sub>o\\<^sub>wa} = {a}\"\n  is order_class.atLeastAtMost_singleton"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_neq:\n  assumes \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"x \\<noteq> y\"\n    is order_class.less_imp_neq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"b <\\<^sub>o\\<^sub>w a\"\n  shows \"{a..\\<^sub>o\\<^sub>wb} = {}\"\n    is order_class.atLeastatMost_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_eq:\n  assumes \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"(x = y) = False\"\n    is order_class.less_imp_not_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_eq2:\n  assumes \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \"(y = x) = False\"\n    is order_class.less_imp_not_eq2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"b \\<le>\\<^sub>o\\<^sub>w a\"\n  shows \"(on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b}) = {}\"\n    is order_class.atLeastLessThan_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty:\n  assumes \"l \\<in> U\" and \"k \\<in> U\" and \"l \\<le>\\<^sub>o\\<^sub>w k\"\n  shows \"{k<\\<^sub>o\\<^sub>w..l} = {}\"\n    is order_class.greaterThanAtMost_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv1:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"\\<not> x <\\<^sub>o\\<^sub>w y\"\n  shows \"(x \\<le>\\<^sub>o\\<^sub>w y) = (x = y)\"\n    is order_class.antisym_conv1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv2:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x \\<le>\\<^sub>o\\<^sub>w y\"\n  shows \"(\\<not> x <\\<^sub>o\\<^sub>w y) = (x = y)\"\n    is order_class.antisym_conv2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanLessThan_empty:\n  assumes \"l \\<in> U\" and \"k \\<in> U\" and \"l \\<le>\\<^sub>o\\<^sub>w k\"\n  shows \"{k<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wl} = {}\"\n    is order_class.greaterThanLessThan_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_eq_atLeastAtMost_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {a..<b}) = {a..\\<^sub>o\\<^sub>wb} - {b}\"\n    is order_class.atLeastLessThan_eq_atLeastAtMost_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_eq_atLeastAtMost_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"{a<\\<^sub>o\\<^sub>w..b} = {a..\\<^sub>o\\<^sub>wb} - {a}\"\n    is order_class.greaterThanAtMost_eq_atLeastAtMost_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_separate:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>o\\<^sub>w y\"\n  shows \n    \"\\<exists>x'\\<in>U. \\<exists>y'\\<in>U. x \\<in> {..<\\<^sub>o\\<^sub>wx'} \\<and> y \\<in> {y'<\\<^sub>o\\<^sub>w..} \\<and> {..<\\<^sub>o\\<^sub>wx'} \\<inter> {y'<\\<^sub>o\\<^sub>w..} = {}\"\n    is order_class.less_separate"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x = y) = (x \\<le>\\<^sub>o\\<^sub>w y \\<and> y \\<le>\\<^sub>o\\<^sub>w x)\"\n    is order_class.eq_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_iff_strict:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a \\<le>\\<^sub>o\\<^sub>w b) = (a <\\<^sub>o\\<^sub>w b \\<or> a = b)\"\n    is order_class.order.order_iff_strict"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_less:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x \\<le>\\<^sub>o\\<^sub>w y) = (x <\\<^sub>o\\<^sub>w y \\<or> x = y)\"\n    is order_class.le_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma asym:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a <\\<^sub>o\\<^sub>w b\" and \"b <\\<^sub>o\\<^sub>w a\"\n  shows False\n    is order_class.order.asym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_iff_order:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a <\\<^sub>o\\<^sub>w b) = (a \\<le>\\<^sub>o\\<^sub>w b \\<and> a \\<noteq> b)\"\n    is order_class.order.strict_iff_order"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_le:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x <\\<^sub>o\\<^sub>w y) = (x \\<le>\\<^sub>o\\<^sub>w y \\<and> x \\<noteq> y)\"\n    is order_class.less_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastAtMost_singleton':\n  assumes \"b \\<in> U\" and \"a = b\"\n  shows \"{a..\\<^sub>o\\<^sub>wb} = {a}\"\n    is order_class.atLeastAtMost_singleton'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_imp_less_or_eq:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x \\<le>\\<^sub>o\\<^sub>w y\"\n  shows \"x <\\<^sub>o\\<^sub>w y \\<or> x = y\"\n    is order_class.le_imp_less_or_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>o\\<^sub>w x\"\n  shows \"(x \\<le>\\<^sub>o\\<^sub>w y) = (x = y)\"\n    is order_class.antisym_conv"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a <\\<^sub>o\\<^sub>w b\" and \"b <\\<^sub>o\\<^sub>w c\"\n  shows \"a <\\<^sub>o\\<^sub>w c\"\n    is order_class.order.strict_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a <\\<^sub>o\\<^sub>w b\" and \"b \\<le>\\<^sub>o\\<^sub>w c\"\n  shows \"a <\\<^sub>o\\<^sub>w c\"\n    is order_class.order.strict_trans2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_trans1:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a \\<le>\\<^sub>o\\<^sub>w b\" and \"b <\\<^sub>o\\<^sub>w c\"\n  shows \"a <\\<^sub>o\\<^sub>w c\"\n    is order_class.order.strict_trans1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_neq_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<le>\\<^sub>o\\<^sub>w b\" and \"a \\<noteq> b\"\n  shows \"a <\\<^sub>o\\<^sub>w b\"\n    is order_class.le_neq_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neq_le_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<noteq> b\" and \"a \\<le>\\<^sub>o\\<^sub>w b\"\n  shows \"a <\\<^sub>o\\<^sub>w b\"\n    is order_class.neq_le_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Iio_Int_singleton:\n  assumes \"k \\<in> U\" and \"x \\<in> U\"\n  shows \"{..<\\<^sub>o\\<^sub>wk} \\<inter> {x} = (if x <\\<^sub>o\\<^sub>w k then {x} else {})\"\n    is order_class.Iio_Int_singleton"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastAtMost_singleton_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"({a..\\<^sub>o\\<^sub>wb} = {c}) = (a = b \\<and> b = c)\"\n    is order_class.atLeastAtMost_singleton_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_eq_Icc:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"l' \\<in> U\" and \"h' \\<in> U\"\n  shows \"({l..\\<^sub>o\\<^sub>wh} = {l'..\\<^sub>o\\<^sub>wh'}) = (h = h' \\<and> l = l' \\<or> \\<not> l' \\<le>\\<^sub>o\\<^sub>w h' \\<and> \\<not> l \\<le>\\<^sub>o\\<^sub>w h)\"\n    is order_class.Icc_eq_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma lift_Suc_mono_less_iff:\n  assumes \"range f \\<subseteq> U\" and \"\\<And>n. f n <\\<^sub>o\\<^sub>w f (Suc n)\"\n  shows \"(f n <\\<^sub>o\\<^sub>w f m) = (n < m)\"\n    is order_class.lift_Suc_mono_less_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma lift_Suc_mono_less:\n  assumes \"range f \\<subseteq> U\" and \"\\<And>n. f n <\\<^sub>o\\<^sub>w f (Suc n)\" and \"n < n'\"\n  shows \"f n <\\<^sub>o\\<^sub>w f n'\"\n    is order_class.lift_Suc_mono_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma lift_Suc_mono_le:\n  assumes \"range f \\<subseteq> U\" and \"\\<And>n. f n \\<le>\\<^sub>o\\<^sub>w f (Suc n)\" and \"n \\<le> n'\"\n  shows \"f n \\<le>\\<^sub>o\\<^sub>w f n'\"\n    is order_class.lift_Suc_mono_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma lift_Suc_antimono_le:\n  assumes \"range f \\<subseteq> U\" and \"\\<And>n. f (Suc n) \\<le>\\<^sub>o\\<^sub>w f n\" and \"n \\<le> n'\"\n  shows \"f n' \\<le>\\<^sub>o\\<^sub>w f n\"\n    is order_class.lift_Suc_antimono_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma ivl_disj_int_two:\n  assumes \"l \\<in> U\" and \"m \\<in> U\" and \"u \\<in> U\"\n  shows \n    \"{l<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wm} \\<inter> (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {m..<u}) = {}\"\n    \"{l<\\<^sub>o\\<^sub>w..m} \\<inter> {m<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wu} = {}\"\n    \"(on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {l..<m}) \\<inter> (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {m..<u}) = {}\"\n    \"{l..\\<^sub>o\\<^sub>wm} \\<inter> {m<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wu} = {}\"\n    \"{l<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wm} \\<inter> {m..\\<^sub>o\\<^sub>wu} = {}\"\n    \"{l<\\<^sub>o\\<^sub>w..m} \\<inter> {m<\\<^sub>o\\<^sub>w..u} = {}\"\n    \"(on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {l..<m}) \\<inter> {m..\\<^sub>o\\<^sub>wu} = {}\"\n    \"{l..\\<^sub>o\\<^sub>wm} \\<inter> {m<\\<^sub>o\\<^sub>w..u} = {}\"\n    is Set_Interval.ivl_disj_int_two"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma ivl_disj_int_one:\n  assumes \"l \\<in> U\" and \"u \\<in> U\"\n  shows \n    \"{..\\<^sub>o\\<^sub>wl} \\<inter> {l<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wu} = {}\"\n    \"{..<\\<^sub>o\\<^sub>wl} \\<inter> (on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {l..<u}) = {}\"\n    \"{..\\<^sub>o\\<^sub>wl} \\<inter> {l<\\<^sub>o\\<^sub>w..u} = {}\"\n    \"{..<\\<^sub>o\\<^sub>wl} \\<inter> {l..\\<^sub>o\\<^sub>wu} = {}\"\n    \"{l<\\<^sub>o\\<^sub>w..u} \\<inter> {u<\\<^sub>o\\<^sub>w..} = {}\"\n    \"{l<\\<^sub>o\\<^sub>w..<\\<^sub>o\\<^sub>wu} \\<inter> {u..\\<^sub>o\\<^sub>w} = {}\"\n    \"{l..\\<^sub>o\\<^sub>wu} \\<inter> {u<\\<^sub>o\\<^sub>w..} = {}\"\n    \"(on U with (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w) : {l..<u}) \\<inter> {u..\\<^sub>o\\<^sub>w} = {}\"\n    is Set_Interval.ivl_disj_int_one"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_absorb2:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>o\\<^sub>w x\"\n  shows \"local.min x y = y\"\n    is Orderings.min_absorb2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_absorb1:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>o\\<^sub>w x\"\n  shows \"local.max x y = x\"\n    is Orderings.max_absorb1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma finite_mono_remains_stable_implies_strict_prefix:\n  assumes \"range f \\<subseteq> U\"\n    and \"finite (range f)\"\n    and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"\\<forall>n. f n = f (Suc n) \\<longrightarrow> f (Suc n) = f (Suc (Suc n))\"\n  shows \"\\<exists>N. (\\<forall>n\\<ge>N. f N = f n) \\<and> (\\<forall>n\\<le>N. \\<forall>m\\<le>N. m < n \\<longrightarrow> f m <\\<^sub>o\\<^sub>w f n)\"\n    is Hilbert_Choice.finite_mono_remains_stable_implies_strict_prefix"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseq_imp_monoseq:\n  assumes \"range X \\<subseteq> U\" and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> X\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.incseq_imp_monoseq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseq_imp_monoseq:\n  assumes \"range X \\<subseteq> U\" and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> X\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.decseq_imp_monoseq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma irrefl:\n  assumes \"a \\<in> U\"\n  shows \"\\<not> a <\\<^sub>o\\<^sub>w a\"\n    is order_class.order.irrefl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseq_Suc_iff:\n  assumes \"range f \\<subseteq> U\"\n  shows \"(on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> f) = (\\<forall>x. f x \\<le>\\<^sub>o\\<^sub>w f (Suc x))\"\n    is Topological_Spaces.incseq_Suc_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseq_Suc_iff:\n  assumes \"range f \\<subseteq> U\"\n  shows \"(on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> f) = (\\<forall>x. f (Suc x) \\<le>\\<^sub>o\\<^sub>w f x)\"\n    is Topological_Spaces.decseq_Suc_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseq_const:\n  assumes \"k \\<in> U\"\n  shows \"on (UNIV::nat set) with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> (\\<lambda>x. k)\"\n    is Topological_Spaces.incseq_const"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseq_const:\n  assumes \"k \\<in> U\"\n  shows \"on (UNIV::nat set) with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> (\\<lambda>x. k)\"\n    is Topological_Spaces.decseq_const"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atMost_Int_atLeast:\n  assumes \"n \\<in> U\"\n  shows \"{..\\<^sub>o\\<^sub>wn} \\<inter> {n..\\<^sub>o\\<^sub>w} = {n}\"\n    is Set_Interval.atMost_Int_atLeast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoseq_iff:\n  assumes \"range X \\<subseteq> U\"\n  shows \n    \"(with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X) = \n      (\n        (on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> X) \\<or> \n        (on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> X)\n      )\"\n    is Topological_Spaces.monoseq_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoseq_Suc:\n  assumes \"range X \\<subseteq> U\"\n  shows \n    \"(with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X) = \n      ((\\<forall>x. X x \\<le>\\<^sub>o\\<^sub>w X (Suc x)) \\<or> (\\<forall>x. X (Suc x) \\<le>\\<^sub>o\\<^sub>w X x))\"\n    is Topological_Spaces.monoseq_Suc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseq_SucI:\n  assumes \"range X \\<subseteq> U\" and \"\\<And>n. X n \\<le>\\<^sub>o\\<^sub>w X (Suc n)\"\n  shows \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> X\"\n    is Topological_Spaces.incseq_SucI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseq_SucD:\n  assumes \"range A \\<subseteq> U\" and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> A\"\n  shows \"A i \\<le>\\<^sub>o\\<^sub>w A (Suc i)\"\n    is Topological_Spaces.incseq_SucD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseq_SucI:\n  assumes \"range X \\<subseteq> U\" and \"\\<And>n. X (Suc n) \\<le>\\<^sub>o\\<^sub>w X n\"\n  shows \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> X\"\n    is Topological_Spaces.decseq_SucI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseq_SucD:\n  assumes \"range A \\<subseteq> U\" and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> A\"\n  shows \"A (Suc i) \\<le>\\<^sub>o\\<^sub>w A i\"\n    is Topological_Spaces.decseq_SucD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma mono_SucI2:\n  assumes \"range X \\<subseteq> U\" and \"\\<forall>x. X (Suc x) \\<le>\\<^sub>o\\<^sub>w X x\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.mono_SucI2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma mono_SucI1:\n  assumes \"range X \\<subseteq> U\" and \"\\<forall>x. X x \\<le>\\<^sub>o\\<^sub>w X (Suc x)\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.mono_SucI1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma incseqD:\n  assumes \"range f \\<subseteq> U\" \n    and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> f\" \n    and \"(i::nat) \\<le> j\"\n  shows \"f i \\<le>\\<^sub>o\\<^sub>w f j\"\n    is Topological_Spaces.incseqD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma decseqD:\n  assumes \"range f \\<subseteq> U\"\n    and \"on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    and \"(i::nat) \\<le> j\"\n  shows \"f j \\<le>\\<^sub>o\\<^sub>w f i\"\n    is Topological_Spaces.decseqD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoI2:\n  assumes \"range X \\<subseteq> U\" and \"\\<forall>x y. x \\<le> y \\<longrightarrow> X y \\<le>\\<^sub>o\\<^sub>w X x\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.monoI2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoI1:\n  assumes \"range X \\<subseteq> U\" and \"\\<forall>x y. x \\<le> y \\<longrightarrow> X x \\<le>\\<^sub>o\\<^sub>w X y\"\n  shows \"with (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>monoseq\\<guillemotright> X\"\n    is Topological_Spaces.monoI1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antimono_iff_le_Suc:\n  assumes \"range f \\<subseteq> U\"\n  shows \"(on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>antimono\\<guillemotright> f) = (\\<forall>x. f (Suc x) \\<le>\\<^sub>o\\<^sub>w f x)\"\n    is Nat.antimono_iff_le_Suc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma mono_iff_le_Suc:\n  assumes \"range f \\<subseteq> U\"\n  shows \"(on UNIV with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>) : \\<guillemotleft>mono\\<guillemotright> f) = (\\<forall>x. f x \\<le>\\<^sub>o\\<^sub>w f (Suc x))\"\n    is Nat.mono_iff_le_Suc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma funpow_mono2:\n  assumes \"\\<forall>x\\<in>U. f x \\<in> U\"\n    and \"x \\<in> U\"\n    and \"y \\<in> U\"\n    and \"on U with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"i \\<le> j\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w y\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w f x\"\n  shows \"(f ^^ i) x \\<le>\\<^sub>o\\<^sub>w (f ^^ j) y\"\n    is Nat.funpow_mono2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma funpow_mono:\n  assumes \"\\<forall>x\\<in>U. f x \\<in> U\"\n    and \"A \\<in> U\"\n    and \"B \\<in> U\"\n    and \"on U with (\\<le>\\<^sub>o\\<^sub>w) (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"A \\<le>\\<^sub>o\\<^sub>w B\"\n  shows \"(f ^^ n) A \\<le>\\<^sub>o\\<^sub>w (f ^^ n) B\"\n    is Nat.funpow_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating through clarsimp\nbegin"], ["", "tts_lemma ex_min_if_finite:\n  assumes \"S \\<subseteq> U\"\n    and \"finite S\"\n    and \"S \\<noteq> {}\"\n  shows \"\\<exists>x\\<in>S. \\<not> (\\<exists>y\\<in>S. y <\\<^sub>o\\<^sub>w x)\"\n    is Lattices_Big.ex_min_if_finite"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U)\n  sbterms: (\\<open>(\\<le>)::['a::order, 'a::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w)\\<close>) \n    and (\\<open>(<)::['a::order, 'a::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w)\\<close>)\n  substituting order_ow_axioms\n  eliminating through clarsimp\nbegin"], ["", "tts_lemma xt1:\n  shows \n    \"\\<lbrakk>a = b; c <\\<^sub>o\\<^sub>w b\\<rbrakk> \\<Longrightarrow> c <\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>b <\\<^sub>o\\<^sub>w a; b = c\\<rbrakk> \\<Longrightarrow> c <\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>a = b; c \\<le>\\<^sub>o\\<^sub>w b\\<rbrakk> \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>b \\<le>\\<^sub>o\\<^sub>w a; b = c\\<rbrakk> \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>y \\<in> U; x \\<in> U; y \\<le>\\<^sub>o\\<^sub>w x; x \\<le>\\<^sub>o\\<^sub>w y\\<rbrakk> \\<Longrightarrow> x = y\"\n    \"\\<lbrakk>y \\<in> U; x \\<in> U; z \\<in> U; y \\<le>\\<^sub>o\\<^sub>w x; z \\<le>\\<^sub>o\\<^sub>w y\\<rbrakk> \\<Longrightarrow> z \\<le>\\<^sub>o\\<^sub>w x\"\n    \"\\<lbrakk>y \\<in> U; x \\<in> U; z \\<in> U; y <\\<^sub>o\\<^sub>w x; z \\<le>\\<^sub>o\\<^sub>w y\\<rbrakk> \\<Longrightarrow> z <\\<^sub>o\\<^sub>w x\"\n    \"\\<lbrakk>y \\<in> U; x \\<in> U; z \\<in> U; y \\<le>\\<^sub>o\\<^sub>w x; z <\\<^sub>o\\<^sub>w y\\<rbrakk> \\<Longrightarrow> z <\\<^sub>o\\<^sub>w x\"\n    \"\\<lbrakk>b \\<in> U; a \\<in> U; b <\\<^sub>o\\<^sub>w a; a <\\<^sub>o\\<^sub>w b\\<rbrakk> \\<Longrightarrow> P\"\n    \"\\<lbrakk>y \\<in> U; x \\<in> U; z \\<in> U; y <\\<^sub>o\\<^sub>w x; z <\\<^sub>o\\<^sub>w y\\<rbrakk> \\<Longrightarrow> z <\\<^sub>o\\<^sub>w x\"\n    \"\\<lbrakk>b \\<in> U; a \\<in> U; b \\<le>\\<^sub>o\\<^sub>w a; a \\<noteq> b\\<rbrakk> \\<Longrightarrow> b <\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>a \\<in> U; b \\<in> U; a \\<noteq> b; b \\<le>\\<^sub>o\\<^sub>w a\\<rbrakk> \\<Longrightarrow> b <\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>\n      b \\<in> U;\n      c \\<in> U;\n      a = f b;\n      c <\\<^sub>o\\<^sub>w b;\n      \\<And>x y. \\<lbrakk>x \\<in> U; y \\<in> U; y <\\<^sub>o\\<^sub>w x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w f x\n     \\<rbrakk> \\<Longrightarrow> f c <\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>\n      b \\<in> U;\n      a \\<in> U;\n      b <\\<^sub>o\\<^sub>w a;\n      f b = c;\n      \\<And>x y. \\<lbrakk>x \\<in> U; y \\<in> U; y <\\<^sub>o\\<^sub>w x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w f x\n      \\<rbrakk> \\<Longrightarrow> c <\\<^sub>o\\<^sub>w f a\"\n    \"\\<lbrakk>\n      b \\<in> U;\n      c \\<in> U;\n      a = f b;\n      c \\<le>\\<^sub>o\\<^sub>w b;\n      \\<And>x y. \\<lbrakk>x \\<in> U; y \\<in> U; y \\<le>\\<^sub>o\\<^sub>w x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w f x\n     \\<rbrakk> \\<Longrightarrow> f c \\<le>\\<^sub>o\\<^sub>w a\"\n    \"\\<lbrakk>\n      b \\<in> U; \n      a \\<in> U; \n      b \\<le>\\<^sub>o\\<^sub>w a; \n      f b = c; \n      \\<And>x y. \\<lbrakk>x \\<in> U; y \\<in> U; y \\<le>\\<^sub>o\\<^sub>w x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w f x\n     \\<rbrakk> \\<Longrightarrow> c \\<le>\\<^sub>o\\<^sub>w f a\"\n    is Orderings.xt1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U) and (?'b to \\<open>U\\<^sub>2::'b set\\<close>)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating through (simp add: mono_ow_def)\nbegin"], ["", "tts_lemma coinduct3_mono_lemma:\n  assumes \"\\<forall>x\\<in>U. f x \\<subseteq> U\\<^sub>2\"\n    and \"X \\<subseteq> U\\<^sub>2\"\n    and \"B \\<subseteq> U\\<^sub>2\"\n    and \"on U with (\\<subseteq>) (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>mono\\<guillemotright> f\"\n  shows \"on U with (\\<subseteq>) (\\<le>\\<^sub>o\\<^sub>w) : \\<guillemotleft>mono\\<guillemotright> (\\<lambda>x. f x \\<union> (X \\<union> B))\"\n    is Inductive.coinduct3_mono_lemma"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context ord_order_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U\\<^sub>2) and (?'b to U\\<^sub>1)\n  sbterms: (\\<open>(\\<le>)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>) \n    and (\\<open>(<)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>) \n    and (\\<open>(\\<le>)::[?'b::ord, ?'b::ord] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(<)::[?'b::ord, ?'b::ord] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n  rewriting ctr_simps\n  substituting ord\\<^sub>2.order_ow_axioms\n  eliminating through clarsimp\nbegin"], ["", "tts_lemma xt2:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>1\"\n    and \"f b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 a\"\n    and \"c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"f c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 a\"\n  is Orderings.xt2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt6:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>1\"\n    and \"f b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 a\"\n    and \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"f c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 a\"\n    is Orderings.xt6"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context order_pair_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U\\<^sub>1) and (?'b to U\\<^sub>2)\n  rewriting ctr_simps\n  substituting ord\\<^sub>1.order_ow_axioms and ord\\<^sub>2.order_ow_axioms\n  eliminating through\n    (\n      unfold\n        strict_mono_ow_def\n        mono_ow_def\n        antimono_ow_def\n        bdd_above_ow_def\n        bdd_below_ow_def,\n      clarsimp\n    )\nbegin"], ["", "tts_lemma antimonoD:\n  assumes \"x \\<in> U\\<^sub>1\"\n    and \"y \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\"\n  shows \"f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n    is Orderings.antimonoD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoD:\n  assumes \"x \\<in> U\\<^sub>1\"\n    and \"y \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\"\n  shows \"f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n    is Orderings.monoD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_monoD:\n  assumes \"x \\<in> U\\<^sub>1\"\n    and \"y \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>strict_mono\\<guillemotright> f\"\n    and \"x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\"\n  shows \"f x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n    is Orderings.strict_monoD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_monoI:\n  assumes \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"on U\\<^sub>1 with (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>strict_mono\\<guillemotright> f\"\n    is Orderings.strict_monoI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antimonoI:\n  assumes \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    is Orderings.antimonoI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoI:\n  assumes \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    is Orderings.monoI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antimonoE:\n  assumes \"x \\<in> U\\<^sub>1\"\n    and \"y \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\"\n    and \"f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x \\<Longrightarrow> thesis\"\n  shows thesis\n    is Orderings.antimonoE"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma monoE:\n  assumes \"x \\<in> U\\<^sub>1\"\n    and \"y \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\"\n    and \"f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y \\<Longrightarrow> thesis\"\n  shows thesis\n    is Orderings.monoE"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_mono_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"on U\\<^sub>1 with (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>strict_mono\\<guillemotright> f\"\n  shows \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    is Orderings.strict_mono_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_image_antimono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"A \\<subseteq> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    and \"ord\\<^sub>1.bdd_above A\"\n  shows \"ord\\<^sub>2.bdd_below (f ` A)\"\n    is Conditionally_Complete_Lattices.bdd_below_image_antimono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_image_antimono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"A \\<subseteq> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>antimono\\<guillemotright> f\"\n    and \"ord\\<^sub>1.bdd_below A\"\n  shows \"ord\\<^sub>2.bdd_above (f ` A)\"\n    is Conditionally_Complete_Lattices.bdd_above_image_antimono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_image_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"A \\<subseteq> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"ord\\<^sub>1.bdd_below A\"\n  shows \"ord\\<^sub>2.bdd_below (f ` A)\"\n    is Conditionally_Complete_Lattices.bdd_below_image_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_image_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"A \\<subseteq> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"ord\\<^sub>1.bdd_above A\"\n  shows \"ord\\<^sub>2.bdd_above (f ` A)\"\n    is Conditionally_Complete_Lattices.bdd_above_image_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_mono_leD:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. r x \\<in> U\\<^sub>2\"\n    and \"m \\<in> U\\<^sub>1\"\n    and \"n \\<in> U\\<^sub>1\"\n    and \"on U\\<^sub>1 with (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>strict_mono\\<guillemotright> r\"\n    and \"m \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 n\"\n  shows \"r m \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 r n\"\n    is Topological_Spaces.strict_mono_leD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma mono_image_least:\n  assumes \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"m \\<in> U\\<^sub>1\"\n    and \"n \\<in> U\\<^sub>1\"\n    and \"m' \\<in> U\\<^sub>2\"\n    and \"n' \\<in> U\\<^sub>2\"\n    and \"on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"f ` (on U\\<^sub>1 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1) : {m..<n}) = \n      (on U\\<^sub>2 with (\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) (<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2) : {m'..<n'})\"\n    and \"m <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 n\"\n  shows \"f m = m'\"\n    is Set_Interval.mono_image_least"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U\\<^sub>1) and (?'b to U\\<^sub>2)\n  sbterms: (\\<open>(\\<le>)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(<)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(\\<le>)::[?'b::order, ?'b::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>) \n    and (\\<open>(<)::[?'b::order, ?'b::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>)\n  rewriting ctr_simps\n  substituting ord\\<^sub>1.order_ow_axioms and ord\\<^sub>2.order_ow_axioms\n  eliminating through clarsimp\nbegin"], ["", "tts_lemma xt3:\n  assumes \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f a\"\n    is Orderings.xt3"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt4:\n  assumes \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>2\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"f b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>2; y \\<in> U\\<^sub>2; y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f x\"\n  shows \"f c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    is Orderings.xt4"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt5:\n  assumes \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f a\"\n    is Orderings.xt5"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt7:\n  assumes \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f a\"\n    is Orderings.xt7"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt8:\n  assumes \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>2\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"f b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>2; y \\<in> U\\<^sub>2; y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f x\"\n  shows \"f c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    is Orderings.xt8"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma xt9:\n  assumes \"b \\<in> U\\<^sub>1\"\n    and \"a \\<in> U\\<^sub>1\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 a\"\n    and \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f b\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 x\\<rbrakk> \\<Longrightarrow> f y <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f x\"\n  shows \"c <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f a\"\n    is Orderings.xt9"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U\\<^sub>1) and (?'b to U\\<^sub>2)\n  sbterms: (\\<open>(\\<le>)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(<)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>)  \n    and (\\<open>(\\<le>)::[?'b::order, ?'b::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>) \n    and (\\<open>(<)::[?'b::order, ?'b::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>)\n  rewriting ctr_simps\n  substituting ord\\<^sub>1.order_ow_axioms and ord\\<^sub>2.order_ow_axioms\n  eliminating through simp\nbegin"], ["", "tts_lemma order_less_subst1:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f b\"\n    and \"b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>2; y \\<in> U\\<^sub>2; x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 y\\<rbrakk> \\<Longrightarrow> f x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f y\"\n  shows \"a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f c\"\n    is Orderings.order_less_subst1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_subst1:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>2. f x \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f b\"\n    and \"b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>2; y \\<in> U\\<^sub>2; x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 y\\<rbrakk> \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f y\"\n  shows \"a \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 f c\"\n    is Orderings.order_subst1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U\\<^sub>1) and (?'c to U\\<^sub>2)\n  sbterms: (\\<open>(\\<le>)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(<)::[?'a::order, ?'a::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1)\\<close>) \n    and (\\<open>(\\<le>)::[?'c::order, ?'c::order] \\<Rightarrow> bool\\<close> to \\<open>(\\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>) \n    and (\\<open>(<)::[?'c::order, ?'c::order] \\<Rightarrow> bool\\<close> to \\<open>(<\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2)\\<close>)\n  rewriting ctr_simps\n  substituting ord\\<^sub>1.order_ow_axioms and ord\\<^sub>2.order_ow_axioms\n  eliminating through simp\nbegin"], ["", "tts_lemma order_less_le_subst2:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"f b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"f a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    is Orderings.order_less_le_subst2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_le_less_subst2:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"f b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"f a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    is Orderings.order_le_less_subst2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_less_subst2:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"f b <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"f a <\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    is Orderings.order_less_subst2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma order_subst2:\n  assumes \"a \\<in> U\\<^sub>1\"\n    and \"b \\<in> U\\<^sub>1\"\n    and \"\\<forall>x\\<in>U\\<^sub>1. f x \\<in> U\\<^sub>2\"\n    and \"c \\<in> U\\<^sub>2\"\n    and \"a \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 b\"\n    and \"f b \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    and \"\\<And>x y. \\<lbrakk>x \\<in> U\\<^sub>1; y \\<in> U\\<^sub>1; x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1 y\\<rbrakk> \\<Longrightarrow> f x \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 f y\"\n  shows \"f a \\<le>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2 c\"\n    is Orderings.order_subst2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "subsection\\<open>Dense orders\\<close>"], ["", "subsubsection\\<open>Definitions and common properties\\<close>"], ["", "locale dense_order_ow = order_ow U le ls\n  for U :: \"'ao set\" and le ls +\n  assumes dense: \"\\<lbrakk> x \\<in> U; y \\<in> U; x <\\<^sub>o\\<^sub>w y \\<rbrakk> \\<Longrightarrow> (\\<exists>z\\<in>U. x <\\<^sub>o\\<^sub>w z \\<and> z <\\<^sub>o\\<^sub>w y)\""], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma dense_order_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (dense_order_ow (Collect (Domainp A))) class.dense_order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (dense_order_ow (Collect (Domainp A))) class.dense_order", "unfolding \n    dense_order_ow_def class.dense_order_def\n    dense_order_ow_axioms_def class.dense_order_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (\\<lambda>le ls.\n         order_ow (Collect (Domainp A)) le ls \\<and>\n         (\\<forall>x y.\n             x \\<in> Collect (Domainp A) \\<longrightarrow>\n             y \\<in> Collect (Domainp A) \\<longrightarrow>\n             ls x y \\<longrightarrow>\n             (\\<exists>z\\<in>Collect (Domainp A). ls x z \\<and> ls z y)))\n     (\\<lambda>less_eq less.\n         class.order less_eq less \\<and>\n         (\\<forall>x y.\n             less x y \\<longrightarrow>\n             (\\<exists>z. less x z \\<and> less z y)))", "apply transfer_prover_start"], ["proof (prove)\ngoal (8 subgoals):\n 1. Transfer.Rel ((=) ===> (=) ===> ?Rl20) ?af20 (\\<and>)\n 2. Transfer.Rel ((A ===> ?Rl20) ===> ?Rk20) ?ae20 Ex\n 3. Transfer.Rel ((=) ===> ?Rk20 ===> ?Rj20) ?ad20 (\\<longrightarrow>)\n 4. Transfer.Rel ((A ===> ?Rj20) ===> ?Ri20) ?ac20 All\n 5. Transfer.Rel ((A ===> ?Ri20) ===> ?Rg20) ?ab20 All\n 6. Transfer.Rel ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> ?Rf20)\n     ?aa20 class.order\n 7. Transfer.Rel (?Rf20 ===> ?Rg20 ===> (=)) ?a20 (\\<and>)\n 8. (\\<lambda>le ls.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            ls x y \\<longrightarrow>\n            (\\<exists>z\\<in>Collect (Domainp A). ls x z \\<and> ls z y))) =\n    (\\<lambda>less_eq less.\n        ?a20 (?aa20 less_eq less)\n         (?ab20\n           (\\<lambda>x.\n               ?ac20\n                (\\<lambda>y.\n                    ?ad20 (less x y)\n                     (?ae20 (\\<lambda>z. ?af20 (less x z) (less z y)))))))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> Collect (Domainp A) \\<longrightarrow>\n            y \\<in> Collect (Domainp A) \\<longrightarrow>\n            ls x y \\<longrightarrow>\n            (\\<exists>z\\<in>Collect (Domainp A). ls x z \\<and> ls z y))) =\n    (\\<lambda>less_eq less.\n        order_ow (Collect (Domainp A)) less_eq less \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               less x y \\<longrightarrow>\n               (\\<exists>z\\<in>Collect (Domainp A).\n                   less x z \\<and> less z y)))", "by simp"], ["", "end"], ["", "subsection\\<open>\nPartial orders with the greatest element and \npartial orders with the least elements\n\\<close>"], ["", "subsubsection\\<open>Definitions and common properties\\<close>"], ["", "locale ordering_top_ow = ordering_ow U le ls \n  for U :: \"'ao set\" and le ls  +\n  fixes top :: \"'ao\" (\"\\<^bold>\\<top>\\<^sub>o\\<^sub>w\")\n  assumes top_closed[simp]: \"\\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<in> U\"\n  assumes extremum[simp]: \"a \\<in> U \\<Longrightarrow> a \\<^bold>\\<le>\\<^sub>o\\<^sub>w \\<^bold>\\<top>\\<^sub>o\\<^sub>w\"\nbegin"], ["", "notation top (\"\\<^bold>\\<top>\\<^sub>o\\<^sub>w\")"], ["", "end"], ["", "locale bot_ow = \n  fixes U :: \"'ao set\" and bot (\\<open>\\<bottom>\\<^sub>o\\<^sub>w\\<close>)\n  assumes bot_closed[simp]: \"\\<bottom>\\<^sub>o\\<^sub>w \\<in> U\"\nbegin"], ["", "notation bot (\\<open>\\<bottom>\\<^sub>o\\<^sub>w\\<close>)"], ["", "end"], ["", "locale bot_pair_ow = ord\\<^sub>1: bot_ow U\\<^sub>1 bot\\<^sub>1 + ord\\<^sub>2: bot_ow U\\<^sub>2 bot\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and bot\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and bot\\<^sub>2\nbegin"], ["", "notation bot\\<^sub>1 (\\<open>\\<bottom>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1\\<close>)"], ["", "notation bot\\<^sub>2 (\\<open>\\<bottom>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2\\<close>)"], ["", "end"], ["", "locale order_bot_ow = order_ow U le ls + bot_ow U bot\n  for U :: \"'ao set\" and bot le ls  +\n  assumes bot_least: \"a \\<in> U \\<Longrightarrow> \\<bottom>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a\"\nbegin"], ["", "sublocale bot: ordering_top_ow U \\<open>(\\<ge>\\<^sub>o\\<^sub>w)\\<close> \\<open>(>\\<^sub>o\\<^sub>w)\\<close> \\<open>\\<bottom>\\<^sub>o\\<^sub>w\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordering_top_ow U (\\<lambda>x y. y \\<le>\\<^sub>o\\<^sub>w x)\n     (\\<lambda>x y. y <\\<^sub>o\\<^sub>w x) \\<bottom>\\<^sub>o\\<^sub>w", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<bottom>\\<^sub>o\\<^sub>w \\<in> U\n 2. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       \\<bottom>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom>\\<^sub>o\\<^sub>w \\<in> U", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       \\<bottom>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_ \\<in> U \\<Longrightarrow>\n    \\<bottom>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a_", "by (simp add: bot_least)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "no_notation le (infix \"\\<^bold>\\<le>\\<^sub>o\\<^sub>w\" 50)\n  and ls (infix \"\\<^bold><\\<^sub>o\\<^sub>w\" 50)\n  and top (\"\\<^bold>\\<top>\\<^sub>o\\<^sub>w\")"], ["", "end"], ["", "locale order_bot_pair_ow = \n  ord\\<^sub>1: order_bot_ow U\\<^sub>1 bot\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 + ord\\<^sub>2: order_bot_ow U\\<^sub>2 bot\\<^sub>2 le\\<^sub>2 ls\\<^sub>2 \n  for U\\<^sub>1 :: \"'ao set\" and bot\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and bot\\<^sub>2 le\\<^sub>2 ls\\<^sub>2  \nbegin"], ["", "sublocale bot_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. bot_pair_ow U\\<^sub>1 bot\\<^sub>1 U\\<^sub>2 bot\\<^sub>2", ".."], ["", "sublocale order_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 U\\<^sub>2 le\\<^sub>2\n     ls\\<^sub>2", ".."], ["", "end"], ["", "locale top_ow = \n  fixes U :: \"'ao set\" and top (\\<open>\\<top>\\<^sub>o\\<^sub>w\\<close>)\n  assumes top_closed[simp]: \"\\<top>\\<^sub>o\\<^sub>w \\<in> U\"\nbegin"], ["", "notation top (\\<open>\\<top>\\<^sub>o\\<^sub>w\\<close>)"], ["", "end"], ["", "locale top_pair_ow = ord\\<^sub>1: top_ow U\\<^sub>1 top\\<^sub>1 + ord\\<^sub>2: top_ow U\\<^sub>2 top\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and top\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and top\\<^sub>2\nbegin"], ["", "notation top\\<^sub>1 (\\<open>\\<top>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>1\\<close>)"], ["", "notation top\\<^sub>2 (\\<open>\\<top>\\<^sub>o\\<^sub>w\\<^sub>.\\<^sub>2\\<close>)"], ["", "end"], ["", "locale order_top_ow = order_ow U le ls + top_ow U top\n  for U :: \"'ao set\" and le ls top  +\n  assumes top_greatest: \"a \\<in> U \\<Longrightarrow> a \\<le>\\<^sub>o\\<^sub>w \\<top>\\<^sub>o\\<^sub>w\"\nbegin"], ["", "sublocale top: ordering_top_ow U \\<open>(\\<le>\\<^sub>o\\<^sub>w)\\<close> \\<open>(<\\<^sub>o\\<^sub>w)\\<close> \\<open>\\<top>\\<^sub>o\\<^sub>w\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordering_top_ow U (\\<le>\\<^sub>o\\<^sub>w) (<\\<^sub>o\\<^sub>w)\n     \\<top>\\<^sub>o\\<^sub>w", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<top>\\<^sub>o\\<^sub>w \\<in> U\n 2. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       a \\<le>\\<^sub>o\\<^sub>w \\<top>\\<^sub>o\\<^sub>w", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top>\\<^sub>o\\<^sub>w \\<in> U", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       a \\<le>\\<^sub>o\\<^sub>w \\<top>\\<^sub>o\\<^sub>w", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_ \\<in> U \\<Longrightarrow>\n    a_ \\<le>\\<^sub>o\\<^sub>w \\<top>\\<^sub>o\\<^sub>w", "by (simp add: top_greatest)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "no_notation le (infix \"\\<^bold>\\<le>\\<^sub>o\\<^sub>w\" 50)\n  and ls (infix \"\\<^bold><\\<^sub>o\\<^sub>w\" 50)\n  and top (\"\\<^bold>\\<top>\\<^sub>o\\<^sub>w\")"], ["", "end"], ["", "locale order_top_pair_ow = \n  ord\\<^sub>1: order_top_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 top\\<^sub>1 + ord\\<^sub>2: order_top_ow U\\<^sub>2 le\\<^sub>2 ls\\<^sub>2 top\\<^sub>2\n  for U\\<^sub>1 :: \"'ao set\" and le\\<^sub>1 ls\\<^sub>1 top\\<^sub>1 and U\\<^sub>2 :: \"'bo set\" and le\\<^sub>2 ls\\<^sub>2 top\\<^sub>2 \nbegin"], ["", "sublocale top_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. top_pair_ow U\\<^sub>1 top\\<^sub>1 U\\<^sub>2 top\\<^sub>2", ".."], ["", "sublocale order_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>1 le\\<^sub>1 ls\\<^sub>1 U\\<^sub>2 le\\<^sub>2\n     ls\\<^sub>2", ".."], ["", "end"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma ordering_top_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=)) \n      (ordering_top_ow (Collect (Domainp A))) ordering_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "let ?P = \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "let ?ordering_top_ow = \"ordering_top_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "have \n    \"?P ?ordering_top_ow (\\<lambda>le ls ext. ext \\<in> UNIV \\<and> ordering_top le ls ext)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A)))\n     (\\<lambda>le ls ext. ext \\<in> UNIV \\<and> ordering_top le ls ext)", "unfolding \n      ordering_top_ow_def ordering_top_def\n      ordering_top_ow_axioms_def ordering_top_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (\\<lambda>le ls top.\n         ordering_ow (Collect (Domainp A)) le ls \\<and>\n         top \\<in> Collect (Domainp A) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> le a top))\n     (\\<lambda>le ls ext.\n         ext \\<in> UNIV \\<and> ordering le ls \\<and> (\\<forall>a. le a ext))", "apply transfer_prover_start"], ["proof (prove)\ngoal (7 subgoals):\n 1. Transfer.Rel ((A ===> (=)) ===> ?Rl14) ?ae14 All\n 2. Transfer.Rel ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> ?Rk14)\n     ?ad14 ordering\n 3. Transfer.Rel (?Rk14 ===> ?Rl14 ===> ?Rh14) ?ac14 (\\<and>)\n 4. Transfer.Rel ?Rj14 ?ab14 UNIV\n 5. Transfer.Rel (A ===> ?Rj14 ===> ?Rg14) ?aa14 (\\<in>)\n 6. Transfer.Rel (?Rg14 ===> ?Rh14 ===> (=)) ?a14 (\\<and>)\n 7. (\\<lambda>le ls top.\n        ordering_ow (Collect (Domainp A)) le ls \\<and>\n        top \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le a top)) =\n    (\\<lambda>le ls ext.\n        ?a14 (?aa14 ext ?ab14)\n         (?ac14 (?ad14 le ls) (?ae14 (\\<lambda>a. le a ext))))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls top.\n        ordering_ow (Collect (Domainp A)) le ls \\<and>\n        top \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le a top)) =\n    (\\<lambda>le ls ext.\n        ext \\<in> Collect (Domainp A) \\<and>\n        ordering_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). le a ext))", "by blast"], ["proof (state)\nthis:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (ordering_top_ow (Collect (Domainp A)))\n   (\\<lambda>le ls ext. ext \\<in> UNIV \\<and> ordering_top le ls ext)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (ordering_top_ow (Collect (Domainp A)))\n   (\\<lambda>le ls ext. ext \\<in> UNIV \\<and> ordering_top le ls ext)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (ordering_top_ow (Collect (Domainp A))) ordering_top", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (ordering_top_ow (Collect (Domainp A))) ordering_top\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_bot_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      (order_bot_ow (Collect (Domainp A))) class.order_bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "let ?P = \"(A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "let ?order_bot_ow = \"order_bot_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "have \n    \"?P ?order_bot_ow (\\<lambda>bot le ls. bot \\<in> UNIV \\<and> class.order_bot bot le ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A)))\n     (\\<lambda>bot le ls. bot \\<in> UNIV \\<and> class.order_bot bot le ls)", "unfolding \n      class.order_bot_def order_bot_ow_def \n      class.order_bot_axioms_def order_bot_ow_axioms_def\n      bot_ow_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (\\<lambda>bot le ls.\n         order_ow (Collect (Domainp A)) le ls \\<and>\n         bot \\<in> Collect (Domainp A) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> le bot a))\n     (\\<lambda>bot le ls.\n         bot \\<in> UNIV \\<and>\n         class.order le ls \\<and> (\\<forall>a. le bot a))", "apply transfer_prover_start"], ["proof (prove)\ngoal (7 subgoals):\n 1. Transfer.Rel ((A ===> (=)) ===> ?Rl14) ?ae14 All\n 2. Transfer.Rel ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> ?Rk14)\n     ?ad14 class.order\n 3. Transfer.Rel (?Rk14 ===> ?Rl14 ===> ?Rh14) ?ac14 (\\<and>)\n 4. Transfer.Rel ?Rj14 ?ab14 UNIV\n 5. Transfer.Rel (A ===> ?Rj14 ===> ?Rg14) ?aa14 (\\<in>)\n 6. Transfer.Rel (?Rg14 ===> ?Rh14 ===> (=)) ?a14 (\\<and>)\n 7. (\\<lambda>bot le ls.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        bot \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le bot a)) =\n    (\\<lambda>bot le ls.\n        ?a14 (?aa14 bot ?ab14) (?ac14 (?ad14 le ls) (?ae14 (le bot))))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>bot le ls.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        bot \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le bot a)) =\n    (\\<lambda>bot le ls.\n        bot \\<in> Collect (Domainp A) \\<and>\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). le bot a))", "by blast"], ["proof (state)\nthis:\n  (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n   (order_bot_ow (Collect (Domainp A)))\n   (\\<lambda>bot le ls. bot \\<in> UNIV \\<and> class.order_bot bot le ls)\n\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "thus ?thesis"], ["proof (prove)\nusing this:\n  (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n   (order_bot_ow (Collect (Domainp A)))\n   (\\<lambda>bot le ls. bot \\<in> UNIV \\<and> class.order_bot bot le ls)\n\ngoal (1 subgoal):\n 1. (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     (order_bot_ow (Collect (Domainp A))) class.order_bot", "by simp"], ["proof (state)\nthis:\n  (A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n   (order_bot_ow (Collect (Domainp A))) class.order_bot\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_top_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=)) \n      (order_top_ow (Collect (Domainp A))) class.order_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "let ?P = \"((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "let ?order_top_ow = \"order_top_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "have \n    \"?P ?order_top_ow (\\<lambda>le ls top. top \\<in> UNIV \\<and> class.order_top le ls top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A)))\n     (\\<lambda>le ls top. top \\<in> UNIV \\<and> class.order_top le ls top)", "unfolding \n      class.order_top_def order_top_ow_def \n      class.order_top_axioms_def order_top_ow_axioms_def\n      top_ow_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (\\<lambda>le ls top.\n         order_ow (Collect (Domainp A)) le ls \\<and>\n         top \\<in> Collect (Domainp A) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> le a top))\n     (\\<lambda>le ls top.\n         top \\<in> UNIV \\<and>\n         class.order le ls \\<and> (\\<forall>a. le a top))", "apply transfer_prover_start"], ["proof (prove)\ngoal (7 subgoals):\n 1. Transfer.Rel ((A ===> (=)) ===> ?Rl14) ?ae14 All\n 2. Transfer.Rel ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> ?Rk14)\n     ?ad14 class.order\n 3. Transfer.Rel (?Rk14 ===> ?Rl14 ===> ?Rh14) ?ac14 (\\<and>)\n 4. Transfer.Rel ?Rj14 ?ab14 UNIV\n 5. Transfer.Rel (A ===> ?Rj14 ===> ?Rg14) ?aa14 (\\<in>)\n 6. Transfer.Rel (?Rg14 ===> ?Rh14 ===> (=)) ?a14 (\\<and>)\n 7. (\\<lambda>le ls top.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        top \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le a top)) =\n    (\\<lambda>le ls top.\n        ?a14 (?aa14 top ?ab14)\n         (?ac14 (?ad14 le ls) (?ae14 (\\<lambda>a. le a top))))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls top.\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        top \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> le a top)) =\n    (\\<lambda>le ls top.\n        top \\<in> Collect (Domainp A) \\<and>\n        order_ow (Collect (Domainp A)) le ls \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). le a top))", "by blast"], ["proof (state)\nthis:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (order_top_ow (Collect (Domainp A)))\n   (\\<lambda>le ls top. top \\<in> UNIV \\<and> class.order_top le ls top)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (order_top_ow (Collect (Domainp A)))\n   (\\<lambda>le ls top. top \\<in> UNIV \\<and> class.order_top le ls top)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     (order_top_ow (Collect (Domainp A))) class.order_top", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n   (order_top_ow (Collect (Domainp A))) class.order_top\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context ordering_top_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting ordering_top_ow_axioms\n  eliminating through simp\n  applying [OF top_closed]\nbegin"], ["", "tts_lemma extremum_uniqueI:\n  assumes \"\\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<^bold>\\<le>\\<^sub>o\\<^sub>w \\<^bold>\\<top>\\<^sub>o\\<^sub>w\"\n  shows \"\\<^bold>\\<top>\\<^sub>o\\<^sub>w = \\<^bold>\\<top>\\<^sub>o\\<^sub>w\"\n    is ordering_top.extremum_uniqueI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma extremum_unique:\n  shows \"(\\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<^bold>\\<le>\\<^sub>o\\<^sub>w \\<^bold>\\<top>\\<^sub>o\\<^sub>w) = (\\<^bold>\\<top>\\<^sub>o\\<^sub>w = \\<^bold>\\<top>\\<^sub>o\\<^sub>w)\"\n    is ordering_top.extremum_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma extremum_strict:\n  shows \"\\<not> \\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<^bold><\\<^sub>o\\<^sub>w \\<^bold>\\<top>\\<^sub>o\\<^sub>w\"\n    is ordering_top.extremum_strict"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_eq_extremum:\n  shows \"(\\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<noteq> \\<^bold>\\<top>\\<^sub>o\\<^sub>w) = (\\<^bold>\\<top>\\<^sub>o\\<^sub>w \\<^bold><\\<^sub>o\\<^sub>w \\<^bold>\\<top>\\<^sub>o\\<^sub>w)\"\n    is ordering_top.not_eq_extremum"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context order_bot_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting order_bot_ow_axioms\n  eliminating through simp\nbegin"], ["", "tts_lemma bdd_above_bot:\n  assumes \"A \\<subseteq> U\"\n  shows \"bdd_below A\"\n    is order_bot_class.bdd_above_bot"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_less_bot:\n  assumes \"a \\<in> U\"\n  shows \"\\<not> a <\\<^sub>o\\<^sub>w \\<bottom>\\<^sub>o\\<^sub>w\"\n  is order_bot_class.not_less_bot"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_bot:\n  assumes \"x \\<in> U\"\n  shows \"max \\<bottom>\\<^sub>o\\<^sub>w x = x\"\n    is order_bot_class.max_bot"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_bot2:\n  assumes \"x \\<in> U\"\n  shows \"max x \\<bottom>\\<^sub>o\\<^sub>w = x\"\n    is order_bot_class.max_bot2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_bot:\n  assumes \"x \\<in> U\"\n  shows \"min \\<bottom>\\<^sub>o\\<^sub>w x = \\<bottom>\\<^sub>o\\<^sub>w\"\n    is order_bot_class.min_bot"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_bot2:\n  assumes \"x \\<in> U\"\n  shows \"min x \\<bottom>\\<^sub>o\\<^sub>w = \\<bottom>\\<^sub>o\\<^sub>w\"\n    is order_bot_class.min_bot2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bot_unique:\n  assumes \"a \\<in> U\"\n  shows \"(a \\<le>\\<^sub>o\\<^sub>w \\<bottom>\\<^sub>o\\<^sub>w) = (a = \\<bottom>\\<^sub>o\\<^sub>w)\"\n    is order_bot_class.bot_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bot_less:\n  assumes \"a \\<in> U\"\n  shows \"(a \\<noteq> \\<bottom>\\<^sub>o\\<^sub>w) = (\\<bottom>\\<^sub>o\\<^sub>w <\\<^sub>o\\<^sub>w a)\"\n    is order_bot_class.bot_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeast_eq_UNIV_iff:\n  assumes \"x \\<in> U\"\n  shows \"({x..\\<^sub>o\\<^sub>w} = U) = (x = \\<bottom>\\<^sub>o\\<^sub>w)\"\n    is order_bot_class.atLeast_eq_UNIV_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_bot:\n  assumes \"a \\<in> U\" and \"a \\<le>\\<^sub>o\\<^sub>w \\<bottom>\\<^sub>o\\<^sub>w\"\n  shows \"a = \\<bottom>\\<^sub>o\\<^sub>w\"\n    is order_bot_class.le_bot"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context order_top_ow \nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting order_top_ow_axioms\n  eliminating through simp\nbegin"], ["", "tts_lemma bdd_above_top:\n  assumes \"A \\<subseteq> U\"\n  shows \"bdd_above A\"\n  is order_top_class.bdd_above_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_top_less:\n  assumes \"a \\<in> U\"\n  shows \"\\<not> \\<top>\\<^sub>o\\<^sub>w <\\<^sub>o\\<^sub>w a\"\n    is order_top_class.not_top_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_top:\n  assumes \"x \\<in> U\"\n  shows \"max \\<top>\\<^sub>o\\<^sub>w x = \\<top>\\<^sub>o\\<^sub>w\"\n    is order_top_class.max_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_top2:\n  assumes \"x \\<in> U\"\n  shows \"max x \\<top>\\<^sub>o\\<^sub>w = \\<top>\\<^sub>o\\<^sub>w\"\n    is order_top_class.max_top2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_top:\n  assumes \"x \\<in> U\"\n  shows \"min \\<top>\\<^sub>o\\<^sub>w x = x\"\n    is order_top_class.min_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_top2:\n  assumes \"x \\<in> U\"\n  shows \"min x \\<top>\\<^sub>o\\<^sub>w = x\"\n    is order_top_class.min_top2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma top_unique:\n  assumes \"a \\<in> U\"\n  shows \"(\\<top>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a) = (a = \\<top>\\<^sub>o\\<^sub>w)\"\n    is order_top_class.top_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_top:\n  assumes \"a \\<in> U\"\n  shows \"(a \\<noteq> \\<top>\\<^sub>o\\<^sub>w) = (a <\\<^sub>o\\<^sub>w \\<top>\\<^sub>o\\<^sub>w)\"\n    is order_top_class.less_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atMost_eq_UNIV_iff:\n  assumes \"x \\<in> U\"\n  shows \"({..\\<^sub>o\\<^sub>wx} = U) = (x = \\<top>\\<^sub>o\\<^sub>w)\"\n    is order_top_class.atMost_eq_UNIV_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma top_le:\n  assumes \"a \\<in> U\" and \"\\<top>\\<^sub>o\\<^sub>w \\<le>\\<^sub>o\\<^sub>w a\"\n  shows \"a = \\<top>\\<^sub>o\\<^sub>w\"\n    is order_top_class.top_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}