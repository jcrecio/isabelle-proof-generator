{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/Vector_Spaces/VS_Prerequisites.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma bij_betw_parametric'[transfer_rule]:\n  includes lifting_syntax\n  assumes \"bi_unique A\"\n  shows \"((A ===> A) ===> rel_set A ===> rel_set A ===> (=)) \n    bij_betw bij_betw\"", "lemma vimage_transfer[transfer_rule]: \n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique B\" \"right_total A\" \n  shows \n    \"((A ===> B) ===> (rel_set B) ===> rel_set A) \n      (\\<lambda>f s. (vimage f s) \\<inter> (Collect (Domainp A))) (-`)\"", "lemma Eps_unique_transfer_lemma:\n  includes lifting_syntax\n  assumes [transfer_rule]: \n    \"right_total A\" \"(A ===> (=)) f g\" \"(A ===> (=)) f' g'\"\n    and holds: \"\\<exists>x. Domainp A x \\<and> f x\"\n    and unique_g: \"\\<And>x y. \\<lbrakk> g x; g y \\<rbrakk> \\<Longrightarrow> g' x = g' y\"\n  shows \"f' (Eps (\\<lambda>x. Domainp A x \\<and> f x)) = g' (Eps g)\""], "translations": [["", "lemma bij_betw_parametric'[transfer_rule]:\n  includes lifting_syntax\n  assumes \"bi_unique A\"\n  shows \"((A ===> A) ===> rel_set A ===> rel_set A ===> (=)) \n    bij_betw bij_betw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A) ===> rel_set A ===> rel_set A ===> (=)) bij_betw bij_betw", "by (rule bij_betw_ow.transfer[OF assms assms])"], ["", "lemma vimage_transfer[transfer_rule]: \n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique B\" \"right_total A\" \n  shows \n    \"((A ===> B) ===> (rel_set B) ===> rel_set A) \n      (\\<lambda>f s. (vimage f s) \\<inter> (Collect (Domainp A))) (-`)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_set B ===> rel_set A)\n     (\\<lambda>f s. f -` s \\<inter> Collect (Domainp A)) (-`)", "by transfer_prover"], ["", "lemma Eps_unique_transfer_lemma:\n  includes lifting_syntax\n  assumes [transfer_rule]: \n    \"right_total A\" \"(A ===> (=)) f g\" \"(A ===> (=)) f' g'\"\n    and holds: \"\\<exists>x. Domainp A x \\<and> f x\"\n    and unique_g: \"\\<And>x y. \\<lbrakk> g x; g y \\<rbrakk> \\<Longrightarrow> g' x = g' y\"\n  shows \"f' (Eps (\\<lambda>x. Domainp A x \\<and> f x)) = g' (Eps g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "define Epsg where \"Epsg = Eps g\""], ["proof (state)\nthis:\n  Epsg = Eps g\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "have \"\\<exists>x. g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. g x", "by transfer (simp add: holds)"], ["proof (state)\nthis:\n  \\<exists>x. g x\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. g x", "have \"g Epsg\""], ["proof (prove)\nusing this:\n  \\<exists>x. g x\n\ngoal (1 subgoal):\n 1. g Epsg", "unfolding Epsg_def"], ["proof (prove)\nusing this:\n  \\<exists>x. g x\n\ngoal (1 subgoal):\n 1. g (Eps g)", "by (rule someI_ex)"], ["proof (state)\nthis:\n  g Epsg\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "obtain x where x[transfer_rule]: \"A x Epsg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. A x Epsg \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (meson \\<open>right_total A\\<close> right_totalE)"], ["proof (state)\nthis:\n  A x Epsg\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "then"], ["proof (chain)\npicking this:\n  A x Epsg", "have \"Domainp A x\""], ["proof (prove)\nusing this:\n  A x Epsg\n\ngoal (1 subgoal):\n 1. Domainp A x", "by auto"], ["proof (state)\nthis:\n  Domainp A x\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "from \\<open>g Epsg\\<close>[untransferred]"], ["proof (chain)\npicking this:\n  f x", "have \"f x\""], ["proof (prove)\nusing this:\n  f x\n\ngoal (1 subgoal):\n 1. f x", "."], ["proof (state)\nthis:\n  f x\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "from unique_g"], ["proof (chain)\npicking this:\n  \\<lbrakk>g ?x; g ?y\\<rbrakk> \\<Longrightarrow> g' ?x = g' ?y", "have unique:\n    \"\\<And>x y. \\<lbrakk> Domainp A x; Domainp A y; f x; f y \\<rbrakk> \\<Longrightarrow> f' x = f' y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>g ?x; g ?y\\<rbrakk> \\<Longrightarrow> g' ?x = g' ?y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Domainp A x; Domainp A y; f x; f y\\<rbrakk>\n       \\<Longrightarrow> f' x = f' y", "by transfer"], ["proof (state)\nthis:\n  \\<lbrakk>Domainp A ?x; Domainp A ?y; f ?x; f ?y\\<rbrakk>\n  \\<Longrightarrow> f' ?x = f' ?y\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "have \"f' (Eps (\\<lambda>x. Domainp A x \\<and> f x)) = f' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = f' x", "by (rule unique[OF _ \\<open>Domainp A x\\<close> _ \\<open>f x\\<close>]) \n      (metis (mono_tags, lifting) local.holds someI_ex)+"], ["proof (state)\nthis:\n  f' (SOME x. Domainp A x \\<and> f x) = f' x\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "show \"f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "using x \\<open>f' (Eps _) = f' x\\<close> Epsg_def rel_funE assms(3)"], ["proof (prove)\nusing this:\n  A x Epsg\n  f' (SOME x. Domainp A x \\<and> f x) = f' x\n  Epsg = Eps g\n  \\<lbrakk>(?A ===> ?B) ?f ?g; ?A ?x ?y;\n   ?B (?f ?x) (?g ?y) \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  (A ===> (=)) f' g'\n\ngoal (1 subgoal):\n 1. f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)", "by fastforce"], ["proof (state)\nthis:\n  f' (SOME x. Domainp A x \\<and> f x) = g' (Eps g)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}