{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/TTS_Foundations/Foundations/FNDS_Lifting_Set_Ext.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma set_pred_eq_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \n  shows\n    \"((rel_set A ===> (=)) ===> (rel_set A ===> (=)) ===> (=)) \n      (\\<lambda>X Y. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s) \n      ((=)::['b set \\<Rightarrow> bool, 'b set \\<Rightarrow> bool] \\<Rightarrow> bool)\"", "lemma vimage_fst_transfer_h:\n  \"\n  pred_prod (Domainp A) (Domainp B) x = \n    (x \\<in> Collect (Domainp A) \\<times> Collect (Domainp B))\n  \"", "lemma vimage_fst_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \"right_total B\" \n  shows \n    \"((rel_prod A B ===> A) ===> rel_set A ===> rel_set (rel_prod A B)) \n      (\\<lambda>f S. (f -` S) \\<inter> ((Collect (Domainp A)) \\<times> (Collect (Domainp B)))) \n      vimage\"", "lemma vimage_snd_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\" \n  shows \n    \"((rel_prod A B ===> B) ===> rel_set B ===> rel_set (rel_prod A B)) \n      (\\<lambda>f S. (f -` S) \\<inter> ((Collect (Domainp A)) \\<times> (Collect (Domainp B)))) \n      vimage\"", "lemma vimage_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique B\" \"right_total A\" \n  shows \n    \"((A ===> B) ===> (rel_set B) ===> rel_set A) \n      (\\<lambda>f s. (vimage f s) \\<inter> (Collect (Domainp A))) (-`)\"", "lemma pairwise_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"((A ===> A ===> (=)) ===> rel_set A  ===> (=)) pairwise pairwise\"", "lemma disjnt_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> rel_set A  ===> (=)) disjnt disjnt\"", "lemma bij_betw_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"bi_unique B\"\n  shows \"((A ===> B) ===> rel_set A ===> rel_set B ===> (=)) bij_betw bij_betw\""], "translations": [["", "lemma set_pred_eq_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \n  shows\n    \"((rel_set A ===> (=)) ===> (rel_set A ===> (=)) ===> (=)) \n      (\\<lambda>X Y. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s) \n      ((=)::['b set \\<Rightarrow> bool, 'b set \\<Rightarrow> bool] \\<Rightarrow> bool)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_set A ===> (=)) ===> (rel_set A ===> (=)) ===> (=))\n     (\\<lambda>X Y. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s) (=)", "proof(intro rel_funI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(rel_set A ===> (=)) x y;\n        (rel_set A ===> (=)) xa ya\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<subseteq>Collect (Domainp A).\n                             x s = xa s) =\n                         (y = ya)", "let ?sA = \"Collect (Domainp A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(rel_set A ===> (=)) x y;\n        (rel_set A ===> (=)) xa ya\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<subseteq>Collect (Domainp A).\n                             x s = xa s) =\n                         (y = ya)", "fix X Y :: \"'a set \\<Rightarrow> bool\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(rel_set A ===> (=)) x y;\n        (rel_set A ===> (=)) xa ya\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<subseteq>Collect (Domainp A).\n                             x s = xa s) =\n                         (y = ya)", "fix X' Y' :: \"'b set \\<Rightarrow> bool\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(rel_set A ===> (=)) x y;\n        (rel_set A ===> (=)) xa ya\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<subseteq>Collect (Domainp A).\n                             x s = xa s) =\n                         (y = ya)", "assume rs: \"(rel_set A ===> (=)) X X'\" \"(rel_set A ===> (=)) Y Y'\""], ["proof (state)\nthis:\n  (rel_set A ===> (=)) X X'\n  (rel_set A ===> (=)) Y Y'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(rel_set A ===> (=)) x y;\n        (rel_set A ===> (=)) xa ya\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s\\<subseteq>Collect (Domainp A).\n                             x s = xa s) =\n                         (y = ya)", "show \"(\\<forall>s\\<subseteq>?sA. X s = Y s) = (X' = Y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s) = (X' = Y')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "assume X_eq_Y: \"\\<forall>s\\<subseteq>?sA. X s = Y s\""], ["proof (state)\nthis:\n  \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "{"], ["proof (state)\nthis:\n  \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "fix s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "assume \"X' s'\""], ["proof (state)\nthis:\n  X' s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "then"], ["proof (chain)\npicking this:\n  X' s'", "obtain s where \"rel_set A s s'\""], ["proof (prove)\nusing this:\n  X' s'\n\ngoal (1 subgoal):\n 1. (\\<And>s. rel_set A s s' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson assms right_total_def right_total_rel_set)"], ["proof (state)\nthis:\n  rel_set A s s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "then"], ["proof (chain)\npicking this:\n  rel_set A s s'", "have \"X s\""], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. X s", "using rs(1)"], ["proof (prove)\nusing this:\n  rel_set A s s'\n  (rel_set A ===> (=)) X X'\n\ngoal (1 subgoal):\n 1. X s", "unfolding rel_fun_def"], ["proof (prove)\nusing this:\n  rel_set A s s'\n  \\<forall>x y. rel_set A x y \\<longrightarrow> X x = X' y\n\ngoal (1 subgoal):\n 1. X s", "by (simp add: \\<open>X' s'\\<close>)"], ["proof (state)\nthis:\n  X s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "moreover"], ["proof (state)\nthis:\n  X s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "from \\<open>rel_set A s s'\\<close>"], ["proof (chain)\npicking this:\n  rel_set A s s'", "have \"s \\<subseteq> ?sA\""], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. s \\<subseteq> Collect (Domainp A)", "unfolding Ball_Collect[symmetric]"], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. Ball s (Domainp A)", "by (auto dest: rel_setD1)"], ["proof (state)\nthis:\n  s \\<subseteq> Collect (Domainp A)\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "ultimately"], ["proof (chain)\npicking this:\n  X s\n  s \\<subseteq> Collect (Domainp A)", "have \"Y' s'\""], ["proof (prove)\nusing this:\n  X s\n  s \\<subseteq> Collect (Domainp A)\n\ngoal (1 subgoal):\n 1. Y' s'", "using rs(2)[unfolded rel_fun_def] \\<open>rel_set A s s'\\<close>"], ["proof (prove)\nusing this:\n  X s\n  s \\<subseteq> Collect (Domainp A)\n  \\<forall>x y. rel_set A x y \\<longrightarrow> Y x = Y' y\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. Y' s'", "by (simp add: X_eq_Y)"], ["proof (state)\nthis:\n  Y' s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "}"], ["proof (state)\nthis:\n  X' ?s'2 \\<Longrightarrow> Y' ?s'2\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "note XY = this"], ["proof (state)\nthis:\n  X' ?s'2 \\<Longrightarrow> Y' ?s'2\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "{"], ["proof (state)\nthis:\n  X' ?s'2 \\<Longrightarrow> Y' ?s'2\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "fix s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "assume \"Y' s'\""], ["proof (state)\nthis:\n  Y' s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "then"], ["proof (chain)\npicking this:\n  Y' s'", "obtain s where \"rel_set A s s'\""], ["proof (prove)\nusing this:\n  Y' s'\n\ngoal (1 subgoal):\n 1. (\\<And>s. rel_set A s s' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson assms right_total_def right_total_rel_set)"], ["proof (state)\nthis:\n  rel_set A s s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "then"], ["proof (chain)\npicking this:\n  rel_set A s s'", "have \"Y s\""], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. Y s", "using rs(2)[unfolded rel_fun_def]"], ["proof (prove)\nusing this:\n  rel_set A s s'\n  \\<forall>x y. rel_set A x y \\<longrightarrow> Y x = Y' y\n\ngoal (1 subgoal):\n 1. Y s", "by (simp add: \\<open>Y' s'\\<close>)"], ["proof (state)\nthis:\n  Y s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "moreover"], ["proof (state)\nthis:\n  Y s\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "from \\<open>rel_set A s s'\\<close>"], ["proof (chain)\npicking this:\n  rel_set A s s'", "have \"s \\<subseteq> ?sA\""], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. s \\<subseteq> Collect (Domainp A)", "unfolding Ball_Collect[symmetric]"], ["proof (prove)\nusing this:\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. Ball s (Domainp A)", "by (auto dest: rel_setD1)"], ["proof (state)\nthis:\n  s \\<subseteq> Collect (Domainp A)\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "ultimately"], ["proof (chain)\npicking this:\n  Y s\n  s \\<subseteq> Collect (Domainp A)", "have \"X' s'\""], ["proof (prove)\nusing this:\n  Y s\n  s \\<subseteq> Collect (Domainp A)\n\ngoal (1 subgoal):\n 1. X' s'", "using X_eq_Y rs(1)[unfolded rel_fun_def] \\<open>rel_set A s s'\\<close>"], ["proof (prove)\nusing this:\n  Y s\n  s \\<subseteq> Collect (Domainp A)\n  \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s\n  \\<forall>x y. rel_set A x y \\<longrightarrow> X x = X' y\n  rel_set A s s'\n\ngoal (1 subgoal):\n 1. X' s'", "by auto"], ["proof (state)\nthis:\n  X' s'\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "}"], ["proof (state)\nthis:\n  Y' ?s'2 \\<Longrightarrow> X' ?s'2\n\ngoal (2 subgoals):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s \\<Longrightarrow>\n    X' = Y'\n 2. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "with XY"], ["proof (chain)\npicking this:\n  X' ?s'2 \\<Longrightarrow> Y' ?s'2\n  Y' ?s'2 \\<Longrightarrow> X' ?s'2", "show \"X' = Y'\""], ["proof (prove)\nusing this:\n  X' ?s'2 \\<Longrightarrow> Y' ?s'2\n  Y' ?s'2 \\<Longrightarrow> X' ?s'2\n\ngoal (1 subgoal):\n 1. X' = Y'", "by auto"], ["proof (state)\nthis:\n  X' = Y'\n\ngoal (1 subgoal):\n 1. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "assume \"X' = Y'\""], ["proof (state)\nthis:\n  X' = Y'\n\ngoal (1 subgoal):\n 1. X' = Y' \\<Longrightarrow>\n    \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "show \"\\<forall>s\\<subseteq>?sA. X s = Y s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s", "unfolding Ball_Collect[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. Ball s (Domainp A) \\<longrightarrow> X s = Y s", "using rs[unfolded rel_fun_def] \\<open>X' = Y'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x y. rel_set A x y \\<longrightarrow> X x = X' y\n  \\<forall>x y. rel_set A x y \\<longrightarrow> Y x = Y' y\n  X' = Y'\n\ngoal (1 subgoal):\n 1. \\<forall>s. Ball s (Domainp A) \\<longrightarrow> X s = Y s", "by (metis DomainpE Domainp_set)+"], ["proof (state)\nthis:\n  \\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>s\\<subseteq>Collect (Domainp A). X s = Y s) = (X' = Y')\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma vimage_fst_transfer_h:\n  \"\n  pred_prod (Domainp A) (Domainp B) x = \n    (x \\<in> Collect (Domainp A) \\<times> Collect (Domainp B))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_prod (Domainp A) (Domainp B) x =\n    (x \\<in> Collect (Domainp A) \\<times> Collect (Domainp B))", "unfolding pred_prod_beta mem_Times_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Domainp A (fst x) \\<and> Domainp B (snd x)) =\n    (fst x \\<in> Collect (Domainp A) \\<and> snd x \\<in> Collect (Domainp B))", "by simp"], ["", "lemma vimage_fst_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \"right_total B\" \n  shows \n    \"((rel_prod A B ===> A) ===> rel_set A ===> rel_set (rel_prod A B)) \n      (\\<lambda>f S. (f -` S) \\<inter> ((Collect (Domainp A)) \\<times> (Collect (Domainp B)))) \n      vimage\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_prod A B ===> A) ===> rel_set A ===> rel_set (rel_prod A B))\n     (\\<lambda>f S.\n         f -` S \\<inter> Collect (Domainp A) \\<times> Collect (Domainp B))\n     (-`)", "unfolding vimage_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_prod A B ===> A) ===> rel_set A ===> rel_set (rel_prod A B))\n     (\\<lambda>f S.\n         {x. f x \\<in> S} \\<inter>\n         Collect (Domainp A) \\<times> Collect (Domainp B))\n     (\\<lambda>f B. {x. f x \\<in> B})", "apply transfer_prover_start"], ["proof (prove)\ngoal (3 subgoals):\n 1. Transfer.Rel (A ===> rel_set A ===> ?Rh7) ?aa7 (\\<in>)\n 2. Transfer.Rel ((rel_prod A B ===> ?Rh7) ===> rel_set (rel_prod A B)) ?a7\n     Collect\n 3. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f B. ?a7 (\\<lambda>x. ?aa7 (f x) B))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f Ba.\n        {x. f x \\<in> Ba \\<and> pred_prod (Domainp A) (Domainp B) x})", "unfolding vimage_fst_transfer_h"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f Ba.\n        {x. f x \\<in> Ba \\<and>\n            x \\<in> Collect (Domainp A) \\<times> Collect (Domainp B)})", "by auto"], ["", "lemma vimage_snd_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\" \n  shows \n    \"((rel_prod A B ===> B) ===> rel_set B ===> rel_set (rel_prod A B)) \n      (\\<lambda>f S. (f -` S) \\<inter> ((Collect (Domainp A)) \\<times> (Collect (Domainp B)))) \n      vimage\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_prod A B ===> B) ===> rel_set B ===> rel_set (rel_prod A B))\n     (\\<lambda>f S.\n         f -` S \\<inter> Collect (Domainp A) \\<times> Collect (Domainp B))\n     (-`)", "unfolding vimage_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rel_prod A B ===> B) ===> rel_set B ===> rel_set (rel_prod A B))\n     (\\<lambda>f S.\n         {x. f x \\<in> S} \\<inter>\n         Collect (Domainp A) \\<times> Collect (Domainp B))\n     (\\<lambda>f B. {x. f x \\<in> B})", "apply transfer_prover_start"], ["proof (prove)\ngoal (3 subgoals):\n 1. Transfer.Rel (B ===> rel_set B ===> ?Rh7) ?aa7 (\\<in>)\n 2. Transfer.Rel ((rel_prod A B ===> ?Rh7) ===> rel_set (rel_prod A B)) ?a7\n     Collect\n 3. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f B. ?a7 (\\<lambda>x. ?aa7 (f x) B))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f Ba.\n        {x. f x \\<in> Ba \\<and> pred_prod (Domainp A) (Domainp B) x})", "unfolding vimage_fst_transfer_h"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f S.\n        {x. f x \\<in> S} \\<inter>\n        Collect (Domainp A) \\<times> Collect (Domainp B)) =\n    (\\<lambda>f Ba.\n        {x. f x \\<in> Ba \\<and>\n            x \\<in> Collect (Domainp A) \\<times> Collect (Domainp B)})", "by auto"], ["", "lemma vimage_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique B\" \"right_total A\" \n  shows \n    \"((A ===> B) ===> (rel_set B) ===> rel_set A) \n      (\\<lambda>f s. (vimage f s) \\<inter> (Collect (Domainp A))) (-`)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_set B ===> rel_set A)\n     (\\<lambda>f s. f -` s \\<inter> Collect (Domainp A)) (-`)", "by transfer_prover"], ["", "lemma pairwise_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"((A ===> A ===> (=)) ===> rel_set A  ===> (=)) pairwise pairwise\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> rel_set A ===> (=)) pairwise pairwise", "unfolding pairwise_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> (=)) ===> rel_set A ===> (=))\n     (\\<lambda>R S.\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. x \\<noteq> y \\<longrightarrow> R x y)\n     (\\<lambda>R S.\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. x \\<noteq> y \\<longrightarrow> R x y)", "by transfer_prover"], ["", "lemma disjnt_transfer[transfer_rule]: \n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> rel_set A  ===> (=)) disjnt disjnt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> rel_set A ===> (=)) disjnt disjnt", "unfolding disjnt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> rel_set A ===> (=)) (\\<lambda>A B. A \\<inter> B = {})\n     (\\<lambda>A B. A \\<inter> B = {})", "by transfer_prover"], ["", "lemma bij_betw_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"bi_unique B\"\n  shows \"((A ===> B) ===> rel_set A ===> rel_set B ===> (=)) bij_betw bij_betw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_set A ===> rel_set B ===> (=)) bij_betw bij_betw", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> B) ===> rel_set A ===> rel_set B ===> (=))\n     (\\<lambda>f A B. inj_on f A \\<and> f ` A = B)\n     (\\<lambda>f A B. inj_on f A \\<and> f ` A = B)", "apply transfer_prover_start"], ["proof (prove)\ngoal (5 subgoals):\n 1. Transfer.Rel ((A ===> B) ===> rel_set A ===> ?Rk11) ?ac11 (`)\n 2. Transfer.Rel (?Rk11 ===> rel_set B ===> ?Ri11) ?ab11 (=)\n 3. Transfer.Rel ((A ===> B) ===> rel_set A ===> ?Rh11) ?aa11 inj_on\n 4. Transfer.Rel (?Rh11 ===> ?Ri11 ===> (=)) ?a11 (\\<and>)\n 5. (\\<lambda>f A B. inj_on f A \\<and> f ` A = B) =\n    (\\<lambda>f A B. ?a11 (?aa11 f A) (?ab11 (?ac11 f A) B))", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f A B. inj_on f A \\<and> f ` A = B) =\n    (\\<lambda>f A B. inj_on f A \\<and> f ` A = B)", "by simp"], ["", "end"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}