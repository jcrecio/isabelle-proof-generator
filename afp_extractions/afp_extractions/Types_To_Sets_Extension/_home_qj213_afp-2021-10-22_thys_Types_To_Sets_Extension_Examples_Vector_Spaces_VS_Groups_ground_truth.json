{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/Vector_Spaces/VS_Groups.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma add_closed'[simp]: \"\\<forall>x\\<in>S. \\<forall>y\\<in>S. x \\<oplus>\\<^sub>o\\<^sub>w y \\<in> S\"", "lemma carrier_ne[simp]: \"S \\<noteq> {}\"", "lemma sum_with_empty[simp]: \"sum_with pls z f {} = z\"", "lemma sum_with_cases[case_names comm zero]:\n  assumes \"\\<And>C. \\<lbrakk> f ` S \\<subseteq> C; comm_monoid_add_ow C pls z \\<rbrakk> \\<Longrightarrow> \n      P (Finite_Set.fold (pls o f) z S)\"\n    and \"(\\<And>C. comm_monoid_add_ow C pls z \\<Longrightarrow> (\\<exists>s\\<in>S. f s \\<notin> C)) \\<Longrightarrow> P z\"\n  shows \"P (sum_with pls z f S)\"", "lemma sum_with_infinite: \"infinite A \\<Longrightarrow> sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A = z\"", "lemma fold_pls'_closed: \"Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\" if \"g ` A \\<subseteq> S\"", "lemma fold_pls'_eq: \n  assumes \"g ` A \\<subseteq> S\"\n  shows \"Finite_Set.fold (pls' \\<circ> g) z A = Finite_Set.fold (pls \\<circ> g) z A\"", "lemma sum_with_closed: \n  assumes \"g ` A \\<subseteq> S\"\n  shows \"sum_with pls z g A \\<in> S\"", "lemma sum_with_insert:\n  assumes g_into: \"g x \\<in> S\" \"g ` A \\<subseteq> S\"\n    and A: \"finite A\" \n    and x: \"x \\<notin> A\"\n  shows \"sum_with pls z g (insert x A) = (g x) \\<oplus>\\<^sub>o\\<^sub>w (sum_with pls z g A)\"", "lemma semigroup_add_ow_Ball_def: \n  \"semigroup_add_ow S pls \\<longleftrightarrow>\n  (\\<forall>a\\<in>S. \\<forall>b\\<in>S. \\<forall>c\\<in>S. pls (pls a b) c = \n    pls a (pls b c)) \\<and> (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b \\<in> S)\"", "lemma ab_semigroup_add_ow_Ball_def:\n  \"ab_semigroup_add_ow S pls \\<longleftrightarrow> \n    semigroup_add_ow S pls \\<and> (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b = pls b a)\"", "lemma comm_monoid_add_ow_Ball_def:\n  \"comm_monoid_add_ow S pls z \\<longleftrightarrow> \n    ab_semigroup_add_ow S pls \\<and> (\\<forall>a\\<in>S. pls z a = a) \\<and> z \\<in> S\"", "lemma comm_monoid_add_ow[simp]: \n  \"comm_monoid_add_ow UNIV (+) (0::'a::comm_monoid_add)\"", "lemma ab_group_add_ow_Ball_def:\n  \"ab_group_add_ow S pls z mns um \\<longleftrightarrow> \n    comm_monoid_add_ow S pls z \\<and>\n    (\\<forall>a\\<in>S. pls (um a) a = z) \\<and> \n    (\\<forall>a\\<in>S. \\<forall>b\\<in>S. mns a b = pls a (um b)) \\<and> \n    (\\<forall>a\\<in>S. um a \\<in> S)\"", "lemma sum_with[ud_with]: \"sum = sum_with (+) 0\"", "lemmas [tts_implicit] = sum_with[symmetric]", "lemma semigroup_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> (A ===> A ===> A) ===> (=)) \n    semigroup_add_ow semigroup_add_ow\"", "lemma Domainp_applyI:\n  includes lifting_syntax\n  shows \"(A ===> B) f g \\<Longrightarrow> A x y \\<Longrightarrow> Domainp B (f x)\"", "lemma Domainp_apply2I:\n  includes lifting_syntax\n  shows \"(A ===> B ===> C) f g \\<Longrightarrow> A x y \\<Longrightarrow> B x' y' \\<Longrightarrow> Domainp C (f x x')\"", "lemma ab_semigroup_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows\n    \"(rel_set A ===> (A ===> A ===> A) ===> (=)) \n      ab_semigroup_add_ow ab_semigroup_add_ow\"", "lemma right_total_semigroup_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \"((A ===> A ===> A) ===> (=)) \n    (semigroup_add_ow (Collect (Domainp A))) class.semigroup_add\"", "lemma comm_monoid_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows\n    \"(rel_set A ===> (A ===> A ===> A) ===> A ===> (=)) \n      comm_monoid_add_ow comm_monoid_add_ow\"", "lemma right_total_ab_semigroup_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows\n    \"((A ===> A ===> A) ===> (=)) \n      (ab_semigroup_add_ow (Collect (Domainp A))) class.ab_semigroup_add\"", "lemma right_total_comm_monoid_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \"((A ===> A ===> A) ===> A ===> (=))\n    (comm_monoid_add_ow (Collect (Domainp A))) class.comm_monoid_add\"", "lemma ab_group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \n    \"((A ===> A ===> A) ===> A  ===> (A ===> A ===> A) ===> (A ===> A)===> (=))\n      (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add\"", "lemma ex_comm_monoid_add_around_imageE:\n  assumes ex_comm: \"\\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\"\n    and transfers: \n    \"(A ===> A ===> A) pls pls'\" \n    \"A zero zero'\" \n    \"Domainp (rel_set B) S\"\n    and in_dom: \"\\<And>x. x \\<in> S \\<Longrightarrow> Domainp A (f x)\"\n  obtains C where \n    \"comm_monoid_add_ow C pls zero\" \"f ` S \\<subseteq> C\" \"Domainp (rel_set A) C\"", "lemma Domainp_sum_with:\n  includes lifting_syntax\n  assumes \"\\<And>x. x \\<in> t \\<Longrightarrow> Domainp A (r x)\" \"t \\<subseteq> Collect (Domainp A)\"\n    and transfer_rules[transfer_rule]: \"(A ===> A ===> A) p p'\" \"A z z'\" \n  shows DsI: \"Domainp A (sum_with p z r t)\"", "lemma sum_with_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\" \"bi_unique B\"\n  shows \"((A ===> A ===> A) ===> A ===> (B ===> A) ===> rel_set B ===> A)\n    sum_with sum_with\""], "translations": [["", "lemma add_closed'[simp]: \"\\<forall>x\\<in>S. \\<forall>y\\<in>S. x \\<oplus>\\<^sub>o\\<^sub>w y \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. \\<forall>y\\<in>S. x \\<oplus>\\<^sub>o\\<^sub>w y \\<in> S", "by (auto simp: add_closed)"], ["", "end"], ["", "locale ab_semigroup_add_ow = semigroup_add_ow +\n  assumes add_commute: \"\\<lbrakk> a \\<in> S; b \\<in> S \\<rbrakk> \\<Longrightarrow> a \\<oplus>\\<^sub>o\\<^sub>w b = b \\<oplus>\\<^sub>o\\<^sub>w a\""], ["", "locale comm_monoid_add_ow = ab_semigroup_add_ow +\n  fixes z\n  assumes add_zero: \"a \\<in> S \\<Longrightarrow> z \\<oplus>\\<^sub>o\\<^sub>w a = a\"\n    and zero_closed[simp]: \"z \\<in> S\"\nbegin"], ["", "lemma carrier_ne[simp]: \"S \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "using zero_closed"], ["proof (prove)\nusing this:\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "by blast"], ["", "end"], ["", "definition \"sum_with pls z f S =\n  (\n    if \\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls z \n    then Finite_Set.fold (pls o f) z S \n    else z\n  )\""], ["", "lemma sum_with_empty[simp]: \"sum_with pls z f {} = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with pls z f {} = z", "by (auto simp: sum_with_def)"], ["", "lemma sum_with_cases[case_names comm zero]:\n  assumes \"\\<And>C. \\<lbrakk> f ` S \\<subseteq> C; comm_monoid_add_ow C pls z \\<rbrakk> \\<Longrightarrow> \n      P (Finite_Set.fold (pls o f) z S)\"\n    and \"(\\<And>C. comm_monoid_add_ow C pls z \\<Longrightarrow> (\\<exists>s\\<in>S. f s \\<notin> C)) \\<Longrightarrow> P z\"\n  shows \"P (sum_with pls z f S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (sum_with pls z f S)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>f ` S \\<subseteq> ?C; comm_monoid_add_ow ?C pls z\\<rbrakk>\n  \\<Longrightarrow> P (Finite_Set.fold (pls \\<circ> f) z S)\n  (\\<And>C.\n      comm_monoid_add_ow C pls z \\<Longrightarrow>\n      \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n  P z\n\ngoal (1 subgoal):\n 1. P (sum_with pls z f S)", "by (auto simp: sum_with_def)"], ["", "context comm_monoid_add_ow \nbegin"], ["", "lemma sum_with_infinite: \"infinite A \\<Longrightarrow> sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A = z", "by (induction rule: sum_with_cases) auto"], ["", "context \nbegin"], ["", "abbreviation pls' :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  where \"pls' \\<equiv> \\<lambda>x y. (if x \\<in> S then x else z) \\<oplus>\\<^sub>o\\<^sub>w (if y \\<in> S then y else z)\""], ["", "lemma fold_pls'_closed: \"Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\" if \"g ` A \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "assume A: \"finite A\""], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "interpret comp_fun_commute \"pls' o g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "using that add_assoc add_commute add_closed zero_closed"], ["proof (prove)\nusing this:\n  g ` A \\<subseteq> S\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "by unfold_locales auto"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "from fold_graph_fold[OF A]"], ["proof (chain)\npicking this:\n  fold_graph (pls' \\<circ> g) ?z A (Finite_Set.fold (pls' \\<circ> g) ?z A)", "have \n    \"fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)\""], ["proof (prove)\nusing this:\n  fold_graph (pls' \\<circ> g) ?z A (Finite_Set.fold (pls' \\<circ> g) ?z A)\n\ngoal (1 subgoal):\n 1. fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)", "."], ["proof (state)\nthis:\n  fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "from \n    fold_graph_closed_lemma[OF this, of S \"pls' \\<circ> g\"]\n    add_assoc \n    add_commute \n    add_closed \n    zero_closed"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>a b.\n              \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n              \\<Longrightarrow> (pls' \\<circ> g) a b = (pls' \\<circ> g) a b;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n      \\<Longrightarrow> (pls' \\<circ> g) a b \\<in> S;\n   z \\<in> S\\<rbrakk>\n  \\<Longrightarrow> fold_graph (pls' \\<circ> g) z A\n                     (Finite_Set.fold (pls' \\<circ> g) z A) \\<and>\n                    Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a b.\n              \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n              \\<Longrightarrow> (pls' \\<circ> g) a b = (pls' \\<circ> g) a b;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n      \\<Longrightarrow> (pls' \\<circ> g) a b \\<in> S;\n   z \\<in> S\\<rbrakk>\n  \\<Longrightarrow> fold_graph (pls' \\<circ> g) z A\n                     (Finite_Set.fold (pls' \\<circ> g) z A) \\<and>\n                    Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "by auto"], ["proof (state)\nthis:\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "qed (use add_assoc add_commute add_closed zero_closed in simp)"], ["", "lemma fold_pls'_eq: \n  assumes \"g ` A \\<subseteq> S\"\n  shows \"Finite_Set.fold (pls' \\<circ> g) z A = Finite_Set.fold (pls \\<circ> g) z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A =\n    Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "using add_assoc add_commute add_closed zero_closed assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A =\n    Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "by (intro fold_closed_eq[where B=S]) auto"], ["", "lemma sum_with_closed: \n  assumes \"g ` A \\<subseteq> S\"\n  shows \"sum_with pls z g A \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "interpret comp_fun_commute \"pls' o g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "using add_assoc add_commute add_closed zero_closed assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "have \"\\<exists>C. g ` A \\<subseteq> C \\<and> comm_monoid_add_ow C pls z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       g ` A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "using assms comm_monoid_add_ow_axioms"], ["proof (prove)\nusing this:\n  g ` A \\<subseteq> S\n  comm_monoid_add_ow S (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       g ` A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "then"], ["proof (chain)\npicking this:\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "using fold_pls'_closed[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S", "by (simp add: sum_with_def fold_pls'_eq assms)"], ["proof (state)\nthis:\n  sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_with_insert:\n  assumes g_into: \"g x \\<in> S\" \"g ` A \\<subseteq> S\"\n    and A: \"finite A\" \n    and x: \"x \\<notin> A\"\n  shows \"sum_with pls z g (insert x A) = (g x) \\<oplus>\\<^sub>o\\<^sub>w (sum_with pls z g A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "interpret comp_fun_commute \"pls' o g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "using add_assoc add_commute add_closed zero_closed g_into"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n  g x \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. comp_fun_commute (pls' \\<circ> g)", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "have \n    \"Finite_Set.fold (pls \\<circ> g) z (insert x A) = \n      Finite_Set.fold (pls' \\<circ> g) z (insert x A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n    Finite_Set.fold (pls' \\<circ> g) z (insert x A)", "using g_into"], ["proof (prove)\nusing this:\n  g x \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n    Finite_Set.fold (pls' \\<circ> g) z (insert x A)", "by (subst fold_pls'_eq) auto"], ["proof (state)\nthis:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  Finite_Set.fold (pls' \\<circ> g) z (insert x A)\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "also"], ["proof (state)\nthis:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  Finite_Set.fold (pls' \\<circ> g) z (insert x A)\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "have \"\\<dots> = pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z (insert x A) =\n    pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A)", "unfolding fold_insert[OF A x]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (pls' \\<circ> g) x (Finite_Set.fold (pls' \\<circ> g) z A) =\n    pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A)", "by (auto simp: o_def)"], ["proof (state)\nthis:\n  Finite_Set.fold (pls' \\<circ> g) z (insert x A) =\n  pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A)\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "also"], ["proof (state)\nthis:\n  Finite_Set.fold (pls' \\<circ> g) z (insert x A) =\n  pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A)\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "have \"\\<dots> = (g x) \\<oplus>\\<^sub>o\\<^sub>w (Finite_Set.fold (pls' \\<circ> g) z A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "from fold_graph_fold[OF A]"], ["proof (chain)\npicking this:\n  fold_graph (pls' \\<circ> g) ?z A (Finite_Set.fold (pls' \\<circ> g) ?z A)", "have \n      \"fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)\""], ["proof (prove)\nusing this:\n  fold_graph (pls' \\<circ> g) ?z A (Finite_Set.fold (pls' \\<circ> g) ?z A)\n\ngoal (1 subgoal):\n 1. fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)", "."], ["proof (state)\nthis:\n  fold_graph (pls' \\<circ> g) z A (Finite_Set.fold (pls' \\<circ> g) z A)\n\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "from \n      fold_graph_closed_lemma[OF this, of S \"pls' \\<circ> g\"] \n      add_assoc \n      add_commute \n      add_closed \n      zero_closed"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>a b.\n              \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n              \\<Longrightarrow> (pls' \\<circ> g) a b = (pls' \\<circ> g) a b;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n      \\<Longrightarrow> (pls' \\<circ> g) a b \\<in> S;\n   z \\<in> S\\<rbrakk>\n  \\<Longrightarrow> fold_graph (pls' \\<circ> g) z A\n                     (Finite_Set.fold (pls' \\<circ> g) z A) \\<and>\n                    Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S", "have \"Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a b.\n              \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n              \\<Longrightarrow> (pls' \\<circ> g) a b = (pls' \\<circ> g) a b;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> A; b \\<in> S\\<rbrakk>\n      \\<Longrightarrow> (pls' \\<circ> g) a b \\<in> S;\n   z \\<in> S\\<rbrakk>\n  \\<Longrightarrow> fold_graph (pls' \\<circ> g) z A\n                     (Finite_Set.fold (pls' \\<circ> g) z A) \\<and>\n                    Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S; ?c \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<oplus>\\<^sub>o\\<^sub>w\n                    ?c =\n                    ?a \\<oplus>\\<^sub>o\\<^sub>w\n                    (?b \\<oplus>\\<^sub>o\\<^sub>w ?c)\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b =\n                    ?b \\<oplus>\\<^sub>o\\<^sub>w ?a\n  \\<lbrakk>?a \\<in> S; ?b \\<in> S\\<rbrakk>\n  \\<Longrightarrow> ?a \\<oplus>\\<^sub>o\\<^sub>w ?b \\<in> S\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "by auto"], ["proof (state)\nthis:\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "then"], ["proof (chain)\npicking this:\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "using g_into"], ["proof (prove)\nusing this:\n  Finite_Set.fold (pls' \\<circ> g) z A \\<in> S\n  g x \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A", "by auto"], ["proof (state)\nthis:\n  pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "also"], ["proof (state)\nthis:\n  pls' (g x) (Finite_Set.fold (pls' \\<circ> g) z A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w Finite_Set.fold (pls' \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "have \n    \"Finite_Set.fold (pls' \\<circ> g) z A = Finite_Set.fold (pls \\<circ> g) z A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A =\n    Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "using g_into"], ["proof (prove)\nusing this:\n  g x \\<in> S\n  g ` A \\<subseteq> S\n\ngoal (1 subgoal):\n 1. Finite_Set.fold (pls' \\<circ> g) z A =\n    Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "by (subst fold_pls'_eq) auto"], ["proof (state)\nthis:\n  Finite_Set.fold (pls' \\<circ> g) z A =\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "finally"], ["proof (chain)\npicking this:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "have \n    \"Finite_Set.fold (pls \\<circ> g) z (insert x A) = \n      pls (g x) (Finite_Set.fold (pls \\<circ> g) z A)\""], ["proof (prove)\nusing this:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w\n    Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A", "."], ["proof (state)\nthis:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "moreover"], ["proof (state)\nthis:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "have \n    \"\\<exists>C. g ` insert x A \\<subseteq> C \\<and> comm_monoid_add_ow C pls z\"\n    \"\\<exists>C. g ` A \\<subseteq> C \\<and> comm_monoid_add_ow C pls z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C.\n       g ` insert x A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z &&&\n    \\<exists>C.\n       g ` A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "using assms(1,2) comm_monoid_add_ow_axioms"], ["proof (prove)\nusing this:\n  g x \\<in> S\n  g ` A \\<subseteq> S\n  comm_monoid_add_ow S (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       g ` insert x A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z &&&\n    \\<exists>C.\n       g ` A \\<subseteq> C \\<and>\n       comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     g ` insert x A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "ultimately"], ["proof (chain)\npicking this:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n  \\<exists>C.\n     g ` insert x A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z", "show ?thesis"], ["proof (prove)\nusing this:\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w\n  Finite_Set.fold ((\\<oplus>\\<^sub>o\\<^sub>w) \\<circ> g) z A\n  \\<exists>C.\n     g ` insert x A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n  \\<exists>C.\n     g ` A \\<subseteq> C \\<and>\n     comm_monoid_add_ow C (\\<oplus>\\<^sub>o\\<^sub>w) z\n\ngoal (1 subgoal):\n 1. sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n    g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A", "by (simp add: sum_with_def)"], ["proof (state)\nthis:\n  sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g (insert x A) =\n  g x \\<oplus>\\<^sub>o\\<^sub>w sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g A\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "locale ab_group_add_ow = comm_monoid_add_ow +\n  fixes mns um\n  assumes ab_left_minus: \"a \\<in> S \\<Longrightarrow> (um a) \\<oplus>\\<^sub>o\\<^sub>w a = z\"\n    and ab_diff_conv_add_uminus: \n      \"\\<lbrakk> a \\<in> S; b \\<in> S \\<rbrakk> \\<Longrightarrow> mns a b = a \\<oplus>\\<^sub>o\\<^sub>w (um b)\"\n    and uminus_closed: \"a \\<in> S \\<Longrightarrow> um a \\<in> S\""], ["", "subsection\\<open>Instances (by type class constraints)\\<close>"], ["", "lemma semigroup_add_ow_Ball_def: \n  \"semigroup_add_ow S pls \\<longleftrightarrow>\n  (\\<forall>a\\<in>S. \\<forall>b\\<in>S. \\<forall>c\\<in>S. pls (pls a b) c = \n    pls a (pls b c)) \\<and> (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b \\<in> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup_add_ow S pls =\n    ((\\<forall>a\\<in>S.\n         \\<forall>b\\<in>S.\n            \\<forall>c\\<in>S. pls (pls a b) c = pls a (pls b c)) \\<and>\n     (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b \\<in> S))", "by (auto simp: semigroup_add_ow_def)"], ["", "lemma ab_semigroup_add_ow_Ball_def:\n  \"ab_semigroup_add_ow S pls \\<longleftrightarrow> \n    semigroup_add_ow S pls \\<and> (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b = pls b a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_semigroup_add_ow S pls =\n    (semigroup_add_ow S pls \\<and>\n     (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b = pls b a))", "by  (auto simp: ab_semigroup_add_ow_def ab_semigroup_add_ow_axioms_def)"], ["", "lemma comm_monoid_add_ow_Ball_def:\n  \"comm_monoid_add_ow S pls z \\<longleftrightarrow> \n    ab_semigroup_add_ow S pls \\<and> (\\<forall>a\\<in>S. pls z a = a) \\<and> z \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow S pls z =\n    (ab_semigroup_add_ow S pls \\<and>\n     (\\<forall>a\\<in>S. pls z a = a) \\<and> z \\<in> S)", "by (auto simp: comm_monoid_add_ow_def comm_monoid_add_ow_axioms_def)"], ["", "lemma comm_monoid_add_ow[simp]: \n  \"comm_monoid_add_ow UNIV (+) (0::'a::comm_monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow UNIV (+) (0::'a)", "by \n    (\n      auto simp: \n        comm_monoid_add_ow_Ball_def \n        ab_semigroup_add_ow_Ball_def\n        semigroup_add_ow_Ball_def \n        ac_simps\n    )"], ["", "lemma ab_group_add_ow_Ball_def:\n  \"ab_group_add_ow S pls z mns um \\<longleftrightarrow> \n    comm_monoid_add_ow S pls z \\<and>\n    (\\<forall>a\\<in>S. pls (um a) a = z) \\<and> \n    (\\<forall>a\\<in>S. \\<forall>b\\<in>S. mns a b = pls a (um b)) \\<and> \n    (\\<forall>a\\<in>S. um a \\<in> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_group_add_ow S pls z mns um =\n    (comm_monoid_add_ow S pls z \\<and>\n     (\\<forall>a\\<in>S. pls (um a) a = z) \\<and>\n     (\\<forall>a\\<in>S. \\<forall>b\\<in>S. mns a b = pls a (um b)) \\<and>\n     (\\<forall>a\\<in>S. um a \\<in> S))", "by (auto simp: ab_group_add_ow_def ab_group_add_ow_axioms_def)"], ["", "lemma sum_with[ud_with]: \"sum = sum_with (+) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum = sum_with (+) (0::'b)", "proof(intro HOL.ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. sum x xa = sum_with (+) (0::'b) x xa", "fix f :: \"'a \\<Rightarrow> 'b\" and S :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. sum x xa = sum_with (+) (0::'b) x xa", "show \"sum f S = sum_with (+) 0 f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f S = sum_with (+) (0::'b) f S", "proof(induction rule: sum_with_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>f ` S \\<subseteq> C;\n        comm_monoid_add_ow C (+) (0::'b)\\<rbrakk>\n       \\<Longrightarrow> sum f S = Finite_Set.fold ((+) \\<circ> f) (0::'b) S\n 2. (\\<And>C.\n        comm_monoid_add_ow C (+) (0::'b) \\<Longrightarrow>\n        \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n    sum f S = (0::'b)", "case (comm C)"], ["proof (state)\nthis:\n  f ` S \\<subseteq> C\n  comm_monoid_add_ow C (+) (0::'b)\n\ngoal (2 subgoals):\n 1. \\<And>C.\n       \\<lbrakk>f ` S \\<subseteq> C;\n        comm_monoid_add_ow C (+) (0::'b)\\<rbrakk>\n       \\<Longrightarrow> sum f S = Finite_Set.fold ((+) \\<circ> f) (0::'b) S\n 2. (\\<And>C.\n        comm_monoid_add_ow C (+) (0::'b) \\<Longrightarrow>\n        \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n    sum f S = (0::'b)", "then"], ["proof (chain)\npicking this:\n  f ` S \\<subseteq> C\n  comm_monoid_add_ow C (+) (0::'b)", "show ?case"], ["proof (prove)\nusing this:\n  f ` S \\<subseteq> C\n  comm_monoid_add_ow C (+) (0::'b)\n\ngoal (1 subgoal):\n 1. sum f S = Finite_Set.fold ((+) \\<circ> f) (0::'b) S", "unfolding sum.eq_fold"], ["proof (prove)\nusing this:\n  f ` S \\<subseteq> C\n  comm_monoid_add_ow C (+) (0::'b)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold ((+) \\<circ> f) (0::'b) S =\n    Finite_Set.fold ((+) \\<circ> f) (0::'b) S", "by simp"], ["proof (state)\nthis:\n  sum f S = Finite_Set.fold ((+) \\<circ> f) (0::'b) S\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        comm_monoid_add_ow C (+) (0::'b) \\<Longrightarrow>\n        \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n    sum f S = (0::'b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        comm_monoid_add_ow C (+) (0::'b) \\<Longrightarrow>\n        \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n    sum f S = (0::'b)", "case zero"], ["proof (state)\nthis:\n  comm_monoid_add_ow ?C (+) (0::'b) \\<Longrightarrow>\n  \\<exists>s\\<in>S. f s \\<notin> ?C\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        comm_monoid_add_ow C (+) (0::'b) \\<Longrightarrow>\n        \\<exists>s\\<in>S. f s \\<notin> C) \\<Longrightarrow>\n    sum f S = (0::'b)", "from zero[OF comm_monoid_add_ow]"], ["proof (chain)\npicking this:\n  \\<exists>s\\<in>S. f s \\<notin> UNIV", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>s\\<in>S. f s \\<notin> UNIV\n\ngoal (1 subgoal):\n 1. sum f S = (0::'b)", "by simp"], ["proof (state)\nthis:\n  sum f S = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum f S = sum_with (+) (0::'b) f S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [tts_implicit] = sum_with[symmetric]"], ["", "subsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma semigroup_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> (A ===> A ===> A) ===> (=)) \n    semigroup_add_ow semigroup_add_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> (=)) semigroup_add_ow\n     semigroup_add_ow", "unfolding semigroup_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> (=))\n     (\\<lambda>S pls.\n         (\\<forall>a\\<in>S.\n             \\<forall>b\\<in>S.\n                \\<forall>c\\<in>S. pls (pls a b) c = pls a (pls b c)) \\<and>\n         (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b \\<in> S))\n     (\\<lambda>S pls.\n         (\\<forall>a\\<in>S.\n             \\<forall>b\\<in>S.\n                \\<forall>c\\<in>S. pls (pls a b) c = pls a (pls b c)) \\<and>\n         (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b \\<in> S))", "by transfer_prover"], ["", "lemma Domainp_applyI:\n  includes lifting_syntax\n  shows \"(A ===> B) f g \\<Longrightarrow> A x y \\<Longrightarrow> Domainp B (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A ===> B) f g; A x y\\<rbrakk>\n    \\<Longrightarrow> Domainp B (f x)", "by (auto simp: rel_fun_def)"], ["", "lemma Domainp_apply2I:\n  includes lifting_syntax\n  shows \"(A ===> B ===> C) f g \\<Longrightarrow> A x y \\<Longrightarrow> B x' y' \\<Longrightarrow> Domainp C (f x x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A ===> B ===> C) f g; A x y; B x' y'\\<rbrakk>\n    \\<Longrightarrow> Domainp C (f x x')", "by (force simp: rel_fun_def)"], ["", "lemma ab_semigroup_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows\n    \"(rel_set A ===> (A ===> A ===> A) ===> (=)) \n      ab_semigroup_add_ow ab_semigroup_add_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> (=)) ab_semigroup_add_ow\n     ab_semigroup_add_ow", "unfolding ab_semigroup_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> (=))\n     (\\<lambda>S pls.\n         semigroup_add_ow S pls \\<and>\n         (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b = pls b a))\n     (\\<lambda>S pls.\n         semigroup_add_ow S pls \\<and>\n         (\\<forall>a\\<in>S. \\<forall>b\\<in>S. pls a b = pls b a))", "by transfer_prover"], ["", "lemma right_total_semigroup_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \"((A ===> A ===> A) ===> (=)) \n    (semigroup_add_ow (Collect (Domainp A))) class.semigroup_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "let ?P = \"((A ===> A ===> A) ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "let ?semigroup_add_ow = \"(\\<lambda>f. semigroup_add_ow (Collect (Domainp A)) f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "let ?rf_UNIV = \n    \"(\\<lambda>f::['b, 'b] \\<Rightarrow> 'b. (\\<forall>x y. x \\<in> UNIV \\<longrightarrow> y \\<in> UNIV \\<longrightarrow> f x y \\<in> UNIV))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "have \"?P ?semigroup_add_ow (\\<lambda>f. ?rf_UNIV f \\<and> class.semigroup_add f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     (\\<lambda>f.\n         (\\<forall>x y.\n             x \\<in> UNIV \\<longrightarrow>\n             y \\<in> UNIV \\<longrightarrow> f x y \\<in> UNIV) \\<and>\n         class.semigroup_add f)", "unfolding semigroup_add_ow_def class.semigroup_add_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=))\n     (\\<lambda>f.\n         (\\<forall>a b c.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             c \\<in> Collect (Domainp A) \\<longrightarrow>\n             f (f a b) c = f a (f b c)) \\<and>\n         (\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             f a b \\<in> Collect (Domainp A)))\n     (\\<lambda>f.\n         (\\<forall>x y.\n             x \\<in> UNIV \\<longrightarrow>\n             y \\<in> UNIV \\<longrightarrow> f x y \\<in> UNIV) \\<and>\n         (\\<forall>a b c. f (f a b) c = f a (f b c)))", "apply transfer_prover_start"], ["proof (prove)\ngoal (16 subgoals):\n 1. Transfer.Rel (A ===> A ===> ?Rr32) ?an32 (=)\n 2. Transfer.Rel ((A ===> ?Rr32) ===> ?Rq32) ?am32 All\n 3. Transfer.Rel ((A ===> ?Rq32) ===> ?Rp32) ?al32 All\n 4. Transfer.Rel ((A ===> ?Rp32) ===> ?Re32) ?ak32 All\n 5. Transfer.Rel ?Ro32 ?aj32 UNIV\n 6. Transfer.Rel (A ===> ?Ro32 ===> ?Rm32) ?ai32 (\\<in>)\n 7. Transfer.Rel ?Rn32 ?ah32 UNIV\n 8. Transfer.Rel (A ===> ?Rn32 ===> ?Rl32) ?ag32 (\\<in>)\n 9. Transfer.Rel (?Rl32 ===> ?Rm32 ===> ?Rj32) ?af32 (\\<longrightarrow>)\n 10. Transfer.Rel ?Rk32 ?ae32 UNIV\nA total of 16 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f.\n        (\\<forall>a b c.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            c \\<in> Collect (Domainp A) \\<longrightarrow>\n            f (f a b) c = f a (f b c)) \\<and>\n        (\\<forall>a b.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            f a b \\<in> Collect (Domainp A))) =\n    (\\<lambda>f.\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               x \\<in> Collect (Domainp A) \\<longrightarrow>\n               y \\<in> Collect (Domainp A) \\<longrightarrow>\n               f x y \\<in> Collect (Domainp A)) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               \\<forall>c\\<in>Collect (Domainp A).\n                  f (f a b) c = f a (f b c)))", "by auto"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n   (\\<lambda>f.\n       (\\<forall>x y.\n           x \\<in> UNIV \\<longrightarrow>\n           y \\<in> UNIV \\<longrightarrow> f x y \\<in> UNIV) \\<and>\n       class.semigroup_add f)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n   (\\<lambda>f.\n       (\\<forall>x y.\n           x \\<in> UNIV \\<longrightarrow>\n           y \\<in> UNIV \\<longrightarrow> f x y \\<in> UNIV) \\<and>\n       class.semigroup_add f)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n     class.semigroup_add", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> (=)) (semigroup_add_ow (Collect (Domainp A)))\n   class.semigroup_add\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comm_monoid_add_on_with_transfer[transfer_rule]:\n  includes lifting_syntax\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows\n    \"(rel_set A ===> (A ===> A ===> A) ===> A ===> (=)) \n      comm_monoid_add_ow comm_monoid_add_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> A ===> (=)) comm_monoid_add_ow\n     comm_monoid_add_ow", "unfolding comm_monoid_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> A) ===> A ===> (=))\n     (\\<lambda>S pls z.\n         ab_semigroup_add_ow S pls \\<and>\n         (\\<forall>a\\<in>S. pls z a = a) \\<and> z \\<in> S)\n     (\\<lambda>S pls z.\n         ab_semigroup_add_ow S pls \\<and>\n         (\\<forall>a\\<in>S. pls z a = a) \\<and> z \\<in> S)", "by transfer_prover"], ["", "lemma right_total_ab_semigroup_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows\n    \"((A ===> A ===> A) ===> (=)) \n      (ab_semigroup_add_ow (Collect (Domainp A))) class.ab_semigroup_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=)) (ab_semigroup_add_ow (Collect (Domainp A)))\n     class.ab_semigroup_add", "unfolding \n    class.ab_semigroup_add_def \n    class.ab_semigroup_add_axioms_def \n    ab_semigroup_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> (=))\n     (\\<lambda>pls.\n         semigroup_add_ow (Collect (Domainp A)) pls \\<and>\n         (\\<forall>a\\<in>Collect (Domainp A).\n             \\<forall>b\\<in>Collect (Domainp A). pls a b = pls b a))\n     (\\<lambda>plus.\n         class.semigroup_add plus \\<and>\n         (\\<forall>a b. plus a b = plus b a))", "by transfer_prover"], ["", "lemma right_total_comm_monoid_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \"((A ===> A ===> A) ===> A ===> (=))\n    (comm_monoid_add_ow (Collect (Domainp A))) class.comm_monoid_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (=))\n     (comm_monoid_add_ow (Collect (Domainp A))) class.comm_monoid_add", "proof(intro rel_funI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya\\<rbrakk>\n       \\<Longrightarrow> comm_monoid_add_ow (Collect (Domainp A)) x xa =\n                         class.comm_monoid_add y ya", "fix p p' z z'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya\\<rbrakk>\n       \\<Longrightarrow> comm_monoid_add_ow (Collect (Domainp A)) x xa =\n                         class.comm_monoid_add y ya", "assume [transfer_rule]: \"(A ===> A ===> A) p p'\" \"A z z'\""], ["proof (state)\nthis:\n  (A ===> A ===> A) p p'\n  A z z'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa ya.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya\\<rbrakk>\n       \\<Longrightarrow> comm_monoid_add_ow (Collect (Domainp A)) x xa =\n                         class.comm_monoid_add y ya", "show \n    \"comm_monoid_add_ow (Collect (Domainp A)) p z = \n      class.comm_monoid_add p' z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow (Collect (Domainp A)) p z =\n    class.comm_monoid_add p' z'", "unfolding \n      class.comm_monoid_add_def \n      class.comm_monoid_add_axioms_def \n      comm_monoid_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab_semigroup_add_ow (Collect (Domainp A)) p \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A). p z a = a) \\<and>\n     z \\<in> Collect (Domainp A)) =\n    (class.ab_semigroup_add p' \\<and> (\\<forall>a. p' z' a = a))", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ab_semigroup_add_ow {x. Domainp A x \\<and> x \\<in> UNIV} p \\<and>\n     (\\<forall>a\\<in>{x. Domainp A x \\<and> x \\<in> UNIV}. p z a = a) \\<and>\n     z \\<in> {x. Domainp A x \\<and> x \\<in> UNIV}) =\n    (ab_semigroup_add_ow (Collect (Domainp A)) p \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A). p z a = a))", "using \\<open>A z z'\\<close>"], ["proof (prove)\nusing this:\n  A z z'\n\ngoal (1 subgoal):\n 1. (ab_semigroup_add_ow {x. Domainp A x \\<and> x \\<in> UNIV} p \\<and>\n     (\\<forall>a\\<in>{x. Domainp A x \\<and> x \\<in> UNIV}. p z a = a) \\<and>\n     z \\<in> {x. Domainp A x \\<and> x \\<in> UNIV}) =\n    (ab_semigroup_add_ow (Collect (Domainp A)) p \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A). p z a = a))", "by auto"], ["proof (state)\nthis:\n  comm_monoid_add_ow (Collect (Domainp A)) p z = class.comm_monoid_add p' z'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ab_group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\"\n  shows \n    \"((A ===> A ===> A) ===> A  ===> (A ===> A ===> A) ===> (A ===> A)===> (=))\n      (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "proof (intro rel_funI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (A ===> A ===> A) xb yb;\n        (A ===> A) xc yc\\<rbrakk>\n       \\<Longrightarrow> ab_group_add_ow (Collect (Domainp A)) x xa xb xc =\n                         class.ab_group_add y ya yb yc", "fix p p' z z' m m' um um'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (A ===> A ===> A) xb yb;\n        (A ===> A) xc yc\\<rbrakk>\n       \\<Longrightarrow> ab_group_add_ow (Collect (Domainp A)) x xa xb xc =\n                         class.ab_group_add y ya yb yc", "assume [transfer_rule]:\n    \"(A ===> A ===> A) p p'\" \"A z z'\" \"(A ===> A ===> A) m m'\"\n    and um[transfer_rule]: \"(A ===> A) um um'\""], ["proof (state)\nthis:\n  (A ===> A ===> A) p p'\n  A z z'\n  (A ===> A ===> A) m m'\n  (A ===> A) um um'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (A ===> A ===> A) xb yb;\n        (A ===> A) xc yc\\<rbrakk>\n       \\<Longrightarrow> ab_group_add_ow (Collect (Domainp A)) x xa xb xc =\n                         class.ab_group_add y ya yb yc", "show \n    \"ab_group_add_ow (Collect (Domainp A)) p z m um = \n      class.ab_group_add p' z' m' um'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_group_add_ow (Collect (Domainp A)) p z m um =\n    class.ab_group_add p' z' m' um'", "unfolding \n      class.ab_group_add_def \n      class.ab_group_add_axioms_def \n      ab_group_add_ow_Ball_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (comm_monoid_add_ow (Collect (Domainp A)) p z \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A). p (um a) a = z) \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A).\n         \\<forall>b\\<in>Collect (Domainp A). m a b = p a (um b)) \\<and>\n     (\\<forall>a\\<in>Collect (Domainp A). um a \\<in> Collect (Domainp A))) =\n    (class.comm_monoid_add p' z' \\<and>\n     (\\<forall>a. p' (um' a) a = z') \\<and>\n     (\\<forall>a b. m' a b = p' a (um' b)))", "by transfer (use um in \\<open>auto simp: rel_fun_def\\<close>)"], ["proof (state)\nthis:\n  ab_group_add_ow (Collect (Domainp A)) p z m um =\n  class.ab_group_add p' z' m' um'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_comm_monoid_add_around_imageE:\n  assumes ex_comm: \"\\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\"\n    and transfers: \n    \"(A ===> A ===> A) pls pls'\" \n    \"A zero zero'\" \n    \"Domainp (rel_set B) S\"\n    and in_dom: \"\\<And>x. x \\<in> S \\<Longrightarrow> Domainp A (f x)\"\n  obtains C where \n    \"comm_monoid_add_ow C pls zero\" \"f ` S \\<subseteq> C\" \"Domainp (rel_set A) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ex_comm"], ["proof (chain)\npicking this:\n  \\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero", "obtain C0 where C0: \"f ` S \\<subseteq> C0\" \n    and comm: \"comm_monoid_add_ow C0 pls zero\""], ["proof (prove)\nusing this:\n  \\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\n\ngoal (1 subgoal):\n 1. (\\<And>C0.\n        \\<lbrakk>f ` S \\<subseteq> C0;\n         comm_monoid_add_ow C0 pls zero\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f ` S \\<subseteq> C0\n  comm_monoid_add_ow C0 pls zero\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define C where \"C = C0 \\<inter> Collect (Domainp A)\""], ["proof (state)\nthis:\n  C = C0 \\<inter> Collect (Domainp A)\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"comm_monoid_add_ow C pls zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C pls zero", "using comm Domainp_apply2I[OF \\<open>(A ===> A ===> A) pls pls'\\<close>] \\<open>A zero zero'\\<close>"], ["proof (prove)\nusing this:\n  comm_monoid_add_ow C0 pls zero\n  \\<lbrakk>A ?x ?y; A ?x' ?y'\\<rbrakk>\n  \\<Longrightarrow> Domainp A (pls ?x ?x')\n  A zero zero'\n\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C pls zero", "by \n      (\n        auto simp: \n          comm_monoid_add_ow_Ball_def \n          ab_semigroup_add_ow_Ball_def\n          semigroup_add_ow_def \n          C_def\n      )"], ["proof (state)\nthis:\n  comm_monoid_add_ow C pls zero\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  comm_monoid_add_ow C pls zero\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"f ` S \\<subseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` S \\<subseteq> C", "using C0"], ["proof (prove)\nusing this:\n  f ` S \\<subseteq> C0\n\ngoal (1 subgoal):\n 1. f ` S \\<subseteq> C", "by (auto simp: C_def in_dom)"], ["proof (state)\nthis:\n  f ` S \\<subseteq> C\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  f ` S \\<subseteq> C\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"Domainp (rel_set A) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp (rel_set A) C", "by (auto simp: C_def Domainp_set)"], ["proof (state)\nthis:\n  Domainp (rel_set A) C\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  comm_monoid_add_ow C pls zero\n  f ` S \\<subseteq> C\n  Domainp (rel_set A) C", "show ?thesis"], ["proof (prove)\nusing this:\n  comm_monoid_add_ow C pls zero\n  f ` S \\<subseteq> C\n  Domainp (rel_set A) C\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Domainp_sum_with:\n  includes lifting_syntax\n  assumes \"\\<And>x. x \\<in> t \\<Longrightarrow> Domainp A (r x)\" \"t \\<subseteq> Collect (Domainp A)\"\n    and transfer_rules[transfer_rule]: \"(A ===> A ===> A) p p'\" \"A z z'\" \n  shows DsI: \"Domainp A (sum_with p z r t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp A (sum_with p z r t)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Domainp A (sum_with p z r t)\n 2. \\<not> ?P \\<Longrightarrow> Domainp A (sum_with p z r t)", "assume ex: \"\\<exists>C. r ` t \\<subseteq> C \\<and> comm_monoid_add_ow C p z\""], ["proof (state)\nthis:\n  \\<exists>C. r ` t \\<subseteq> C \\<and> comm_monoid_add_ow C p z\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Domainp A (sum_with p z r t)\n 2. \\<not> ?P \\<Longrightarrow> Domainp A (sum_with p z r t)", "have \"Domainp (rel_set A) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp (rel_set A) t", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> t \\<Longrightarrow> Domainp A (r ?x)\n  t \\<subseteq> Collect (Domainp A)\n  (A ===> A ===> A) p p'\n  A z z'\n\ngoal (1 subgoal):\n 1. Domainp (rel_set A) t", "by (auto simp: Domainp_set)"], ["proof (state)\nthis:\n  Domainp (rel_set A) t\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Domainp A (sum_with p z r t)\n 2. \\<not> ?P \\<Longrightarrow> Domainp A (sum_with p z r t)", "from ex_comm_monoid_add_around_imageE[\n        OF ex transfer_rules(1,2) this assms(1)\n        ]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. x \\<in> t \\<Longrightarrow> x \\<in> t;\n   \\<And>C.\n      \\<lbrakk>comm_monoid_add_ow C p z; r ` t \\<subseteq> C;\n       Domainp (rel_set A) C\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain C where C: \n      \"comm_monoid_add_ow C p z\" \"r ` t \\<subseteq> C\" \"Domainp (rel_set A) C\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. x \\<in> t \\<Longrightarrow> x \\<in> t;\n   \\<And>C.\n      \\<lbrakk>comm_monoid_add_ow C p z; r ` t \\<subseteq> C;\n       Domainp (rel_set A) C\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C p z; r ` t \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  comm_monoid_add_ow C p z\n  r ` t \\<subseteq> C\n  Domainp (rel_set A) C\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Domainp A (sum_with p z r t)\n 2. \\<not> ?P \\<Longrightarrow> Domainp A (sum_with p z r t)", "interpret comm_monoid_add_ow C p z"], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C p z", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Domainp A (sum_with p z r t)\n 2. \\<not> ?P \\<Longrightarrow> Domainp A (sum_with p z r t)", "from sum_with_closed[OF C(2)] C(3)"], ["proof (chain)\npicking this:\n  sum_with p z r t \\<in> C\n  Domainp (rel_set A) C", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_with p z r t \\<in> C\n  Domainp (rel_set A) C\n\ngoal (1 subgoal):\n 1. Domainp A (sum_with p z r t)", "by auto (meson C(3) Domainp_set)"], ["proof (state)\nthis:\n  Domainp A (sum_with p z r t)\n\ngoal (1 subgoal):\n 1. \\<nexists>C.\n       r ` t \\<subseteq> C \\<and> comm_monoid_add_ow C p z \\<Longrightarrow>\n    Domainp A (sum_with p z r t)", "qed (use \\<open>A z _\\<close> in \\<open>auto simp: sum_with_def\\<close>)"], ["", "lemma sum_with_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique A\" \"bi_unique B\"\n  shows \"((A ===> A ===> A) ===> A ===> (B ===> A) ===> rel_set B ===> A)\n    sum_with sum_with\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (B ===> A) ===> rel_set B ===> A)\n     sum_with sum_with", "proof(intro rel_funI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (B ===> A) xb yb;\n        rel_set B xc yc\\<rbrakk>\n       \\<Longrightarrow> A (sum_with x xa xb xc) (sum_with y ya yb yc)", "fix pls pls' zero zero' f g S T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (B ===> A) xb yb;\n        rel_set B xc yc\\<rbrakk>\n       \\<Longrightarrow> A (sum_with x xa xb xc) (sum_with y ya yb yc)", "assume transfer_pls[transfer_rule]: \"(A ===> A ===> A) pls pls'\"\n    and transfer_zero[transfer_rule]: \"A zero zero'\""], ["proof (state)\nthis:\n  (A ===> A ===> A) pls pls'\n  A zero zero'\n\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (B ===> A) xb yb;\n        rel_set B xc yc\\<rbrakk>\n       \\<Longrightarrow> A (sum_with x xa xb xc) (sum_with y ya yb yc)", "assume transfer_g[transfer_rule]: \"(B ===> A) f g\"\n    and transfer_T[transfer_rule]: \"rel_set B S T\""], ["proof (state)\nthis:\n  (B ===> A) f g\n  rel_set B S T\n\ngoal (1 subgoal):\n 1. \\<And>x y xa ya xb yb xc yc.\n       \\<lbrakk>(A ===> A ===> A) x y; A xa ya; (B ===> A) xb yb;\n        rel_set B xc yc\\<rbrakk>\n       \\<Longrightarrow> A (sum_with x xa xb xc) (sum_with y ya yb yc)", "show \"A (sum_with pls zero f S) (sum_with pls' zero' g T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (sum_with pls zero f S) (sum_with pls' zero' g T)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "assume ex_comm: \"\\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\""], ["proof (state)\nthis:\n  \\<exists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "have Domains: \"Domainp (rel_set B) S\" \"(\\<And>x. x \\<in> S \\<Longrightarrow> Domainp A (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Domainp (rel_set B) S &&&\n    (\\<And>x. x \\<in> S \\<Longrightarrow> Domainp A (f x))", "using transfer_T transfer_g"], ["proof (prove)\nusing this:\n  rel_set B S T\n  (B ===> A) f g\n\ngoal (1 subgoal):\n 1. Domainp (rel_set B) S &&&\n    (\\<And>x. x \\<in> S \\<Longrightarrow> Domainp A (f x))", "by auto (meson Domainp_applyI rel_set_def)"], ["proof (state)\nthis:\n  Domainp (rel_set B) S\n  ?x \\<in> S \\<Longrightarrow> Domainp A (f ?x)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "from ex_comm_monoid_add_around_imageE[\n        OF ex_comm transfer_pls transfer_zero Domains\n        ]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> S;\n   \\<And>C.\n      \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n       Domainp (rel_set A) C\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain C where comm: \"comm_monoid_add_ow C pls zero\"\n      and C: \"f ` S \\<subseteq> C\"\n      and \"Domainp (rel_set A) C\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> S;\n   \\<And>C.\n      \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n       Domainp (rel_set A) C\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>comm_monoid_add_ow C pls zero; f ` S \\<subseteq> C;\n         Domainp (rel_set A) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  comm_monoid_add_ow C pls zero\n  f ` S \\<subseteq> C\n  Domainp (rel_set A) C\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  comm_monoid_add_ow C pls zero\n  f ` S \\<subseteq> C\n  Domainp (rel_set A) C", "obtain C' where [transfer_rule]: \"rel_set A C C'\""], ["proof (prove)\nusing this:\n  comm_monoid_add_ow C pls zero\n  f ` S \\<subseteq> C\n  Domainp (rel_set A) C\n\ngoal (1 subgoal):\n 1. (\\<And>C'. rel_set A C C' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rel_set A C C'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "interpret comm: comm_monoid_add_ow C pls zero"], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C pls zero", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "have C': \"g ` T \\<subseteq> C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g ` T \\<subseteq> C'", "by transfer (rule C)"], ["proof (state)\nthis:\n  g ` T \\<subseteq> C'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "have comm': \"comm_monoid_add_ow C' pls' zero'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C' pls' zero'", "by transfer (rule comm)"], ["proof (state)\nthis:\n  comm_monoid_add_ow C' pls' zero'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  comm_monoid_add_ow C' pls' zero'", "interpret comm': comm_monoid_add_ow C' pls' zero'"], ["proof (prove)\nusing this:\n  comm_monoid_add_ow C' pls' zero'\n\ngoal (1 subgoal):\n 1. comm_monoid_add_ow C' pls' zero'", "."], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "from C' comm'"], ["proof (chain)\npicking this:\n  g ` T \\<subseteq> C'\n  comm_monoid_add_ow C' pls' zero'", "have ex_comm': \n      \"\\<exists>C. g ` T \\<subseteq> C \\<and> comm_monoid_add_ow C pls' zero'\""], ["proof (prove)\nusing this:\n  g ` T \\<subseteq> C'\n  comm_monoid_add_ow C' pls' zero'\n\ngoal (1 subgoal):\n 1. \\<exists>C. g ` T \\<subseteq> C \\<and> comm_monoid_add_ow C pls' zero'", "by auto"], ["proof (state)\nthis:\n  \\<exists>C. g ` T \\<subseteq> C \\<and> comm_monoid_add_ow C pls' zero'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> A (sum_with pls zero f S) (sum_with pls' zero' g T)\n 2. \\<not> ?P \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A (sum_with pls zero f S) (sum_with pls' zero' g T)", "using transfer_T C C'"], ["proof (prove)\nusing this:\n  rel_set B S T\n  f ` S \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. A (sum_with pls zero f S) (sum_with pls' zero' g T)", "proof (induction S arbitrary: T rule: infinite_finite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>Aa T.\n       \\<lbrakk>infinite Aa; rel_set B Aa T; f ` Aa \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f Aa)\n                          (sum_with pls' zero' g T)\n 2. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 3. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "case (infinite S)"], ["proof (state)\nthis:\n  infinite S\n  rel_set B S T\n  f ` S \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (3 subgoals):\n 1. \\<And>Aa T.\n       \\<lbrakk>infinite Aa; rel_set B Aa T; f ` Aa \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f Aa)\n                          (sum_with pls' zero' g T)\n 2. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 3. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "note [transfer_rule] = infinite.prems"], ["proof (state)\nthis:\n  rel_set B S T\n  f ` S \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (3 subgoals):\n 1. \\<And>Aa T.\n       \\<lbrakk>infinite Aa; rel_set B Aa T; f ` Aa \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f Aa)\n                          (sum_with pls' zero' g T)\n 2. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 3. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "from infinite.hyps"], ["proof (chain)\npicking this:\n  infinite S", "have \"infinite T\""], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. infinite T", "by transfer"], ["proof (state)\nthis:\n  infinite T\n\ngoal (3 subgoals):\n 1. \\<And>Aa T.\n       \\<lbrakk>infinite Aa; rel_set B Aa T; f ` Aa \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f Aa)\n                          (sum_with pls' zero' g T)\n 2. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 3. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  infinite T", "show ?case"], ["proof (prove)\nusing this:\n  infinite T\n\ngoal (1 subgoal):\n 1. A (sum_with pls zero f S) (sum_with pls' zero' g T)", "by (simp add: sum_with_def infinite.hyps \\<open>A zero zero'\\<close>)"], ["proof (state)\nthis:\n  A (sum_with pls zero f S) (sum_with pls' zero' g T)\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 2. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 2. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "case [transfer_rule]: empty"], ["proof (state)\nthis:\n  rel_set B {} T\n  f ` {} \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 2. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have \"T = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = {}", "by transfer rule"], ["proof (state)\nthis:\n  T = {}\n\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>rel_set B {} T; f ` {} \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f {})\n                          (sum_with pls' zero' g T)\n 2. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  T = {}", "show ?case"], ["proof (prove)\nusing this:\n  T = {}\n\ngoal (1 subgoal):\n 1. A (sum_with pls zero f {}) (sum_with pls' zero' g T)", "by (simp add: sum_with_def \\<open>A zero zero'\\<close>)"], ["proof (state)\nthis:\n  A (sum_with pls zero f {}) (sum_with pls' zero' g T)\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>rel_set B F ?T; f ` F \\<subseteq> C;\n   g ` ?T \\<subseteq> C'\\<rbrakk>\n  \\<Longrightarrow> A (sum_with pls zero f F) (sum_with pls' zero' g ?T)\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "note [transfer_rule] = insert.prems(1)"], ["proof (state)\nthis:\n  rel_set B (insert x F) T\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have [simp]: \"finite T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite T", "by transfer (simp add: insert.hyps)"], ["proof (state)\nthis:\n  finite T\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "obtain y where [transfer_rule]: \"B x y\" and y: \"y \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>B x y; y \\<in> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson insert.prems insertI1 rel_setD1)"], ["proof (state)\nthis:\n  B x y\n  y \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "define T' where \"T' = T - {y}\""], ["proof (state)\nthis:\n  T' = T - {y}\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have T_def: \"T = insert y T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = insert y T'", "by (auto simp: T'_def y)"], ["proof (state)\nthis:\n  T = insert y T'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "define sF where \"sF = sum_with pls zero f F\""], ["proof (state)\nthis:\n  sF = sum_with pls zero f F\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "define sT where \"sT = sum_with pls' zero' g T'\""], ["proof (state)\nthis:\n  sT = sum_with pls' zero' g T'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have [simp]: \"y \\<notin> T'\" \"finite T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> T' &&& finite T'", "by (auto simp: y T'_def)"], ["proof (state)\nthis:\n  y \\<notin> T'\n  finite T'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have \"rel_set B (insert x F - {x}) T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set B (insert x F - {x}) T'", "unfolding T'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set B (insert x F - {x}) (T - {y})", "by transfer_prover"], ["proof (state)\nthis:\n  rel_set B (insert x F - {x}) T'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  rel_set B (insert x F - {x}) T'", "have transfer_T'[transfer_rule]: \"rel_set B F T'\""], ["proof (prove)\nusing this:\n  rel_set B (insert x F - {x}) T'\n\ngoal (1 subgoal):\n 1. rel_set B F T'", "using insert.hyps"], ["proof (prove)\nusing this:\n  rel_set B (insert x F - {x}) T'\n  finite F\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. rel_set B F T'", "by simp"], ["proof (state)\nthis:\n  rel_set B F T'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "from insert.prems"], ["proof (chain)\npicking this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'", "have \"f ` F \\<subseteq> C\" \"g ` T' \\<subseteq> C'\""], ["proof (prove)\nusing this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. f ` F \\<subseteq> C &&& g ` T' \\<subseteq> C'", "by (auto simp: T'_def)"], ["proof (state)\nthis:\n  f ` F \\<subseteq> C\n  g ` T' \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "from insert.IH[OF transfer_T' this]"], ["proof (chain)\npicking this:\n  A (sum_with pls zero f F) (sum_with pls' zero' g T')", "have [transfer_rule]: \"A sF sT\""], ["proof (prove)\nusing this:\n  A (sum_with pls zero f F) (sum_with pls' zero' g T')\n\ngoal (1 subgoal):\n 1. A sF sT", "by (auto simp: sF_def sT_def o_def)"], ["proof (state)\nthis:\n  A sF sT\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have rew: \n        \"(sum_with pls zero f (insert x F)) = \n          pls (f x) (sum_with pls zero f F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with pls zero f (insert x F) = pls (f x) (sum_with pls zero f F)", "apply (subst comm.sum_with_insert)"], ["proof (prove)\ngoal (5 subgoals):\n 1. f x \\<in> C\n 2. f ` F \\<subseteq> C\n 3. finite F\n 4. x \\<notin> F\n 5. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<in> C", "using insert.prems"], ["proof (prove)\nusing this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. f x \\<in> C", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. f ` F \\<subseteq> C\n 2. finite F\n 3. x \\<notin> F\n 4. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` F \\<subseteq> C", "using insert.prems"], ["proof (prove)\nusing this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. f ` F \\<subseteq> C", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite F\n 2. x \\<notin> F\n 3. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F", "by fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<notin> F\n 2. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> F", "by fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. pls (f x) (sum_with pls zero f F) = pls (f x) (sum_with pls zero f F)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum_with pls zero f (insert x F) = pls (f x) (sum_with pls zero f F)\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have rew': \n        \"(sum_with pls' zero' g (insert y T')) = \n          pls' (g y) (sum_with pls' zero' g T')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_with pls' zero' g (insert y T') =\n    pls' (g y) (sum_with pls' zero' g T')", "apply (subst comm'.sum_with_insert)"], ["proof (prove)\ngoal (5 subgoals):\n 1. g y \\<in> C'\n 2. g ` T' \\<subseteq> C'\n 3. finite T'\n 4. y \\<notin> T'\n 5. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. g y \\<in> C'", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<in> C", "using insert.prems"], ["proof (prove)\nusing this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. f x \\<in> C", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. g ` T' \\<subseteq> C'\n 2. finite T'\n 3. y \\<notin> T'\n 4. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. g ` T' \\<subseteq> C'", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` F \\<subseteq> C", "using insert.prems"], ["proof (prove)\nusing this:\n  rel_set B (insert x F) T\n  f ` insert x F \\<subseteq> C\n  g ` T \\<subseteq> C'\n\ngoal (1 subgoal):\n 1. f ` F \\<subseteq> C", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite T'\n 2. y \\<notin> T'\n 3. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite T'", "by fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. y \\<notin> T'\n 2. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> T'", "by fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. pls' (g y) (sum_with pls' zero' g T') =\n    pls' (g y) (sum_with pls' zero' g T')", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sum_with pls' zero' g (insert y T') =\n  pls' (g y) (sum_with pls' zero' g T')\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "have \n        \"A \n          (sum_with pls zero f (insert x F)) \n          (sum_with pls' zero' g (insert y T'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A (sum_with pls zero f (insert x F))\n     (sum_with pls' zero' g (insert y T'))", "unfolding sT_def[symmetric] sF_def[symmetric] rew rew'"], ["proof (prove)\ngoal (1 subgoal):\n 1. A (pls (f x) sF) (pls' (g y) sT)", "by transfer_prover"], ["proof (state)\nthis:\n  A (sum_with pls zero f (insert x F)) (sum_with pls' zero' g (insert y T'))\n\ngoal (1 subgoal):\n 1. \\<And>x F T.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>T.\n           \\<lbrakk>rel_set B F T; f ` F \\<subseteq> C;\n            g ` T \\<subseteq> C'\\<rbrakk>\n           \\<Longrightarrow> A (sum_with pls zero f F)\n                              (sum_with pls' zero' g T);\n        rel_set B (insert x F) T; f ` insert x F \\<subseteq> C;\n        g ` T \\<subseteq> C'\\<rbrakk>\n       \\<Longrightarrow> A (sum_with pls zero f (insert x F))\n                          (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  A (sum_with pls zero f (insert x F)) (sum_with pls' zero' g (insert y T'))", "show ?case"], ["proof (prove)\nusing this:\n  A (sum_with pls zero f (insert x F)) (sum_with pls' zero' g (insert y T'))\n\ngoal (1 subgoal):\n 1. A (sum_with pls zero f (insert x F)) (sum_with pls' zero' g T)", "by (simp add: T_def)"], ["proof (state)\nthis:\n  A (sum_with pls zero f (insert x F)) (sum_with pls' zero' g T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A (sum_with pls zero f S) (sum_with pls' zero' g T)\n\ngoal (1 subgoal):\n 1. \\<nexists>C.\n       f ` S \\<subseteq> C \\<and>\n       comm_monoid_add_ow C pls zero \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>C.\n       f ` S \\<subseteq> C \\<and>\n       comm_monoid_add_ow C pls zero \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "assume *: \"\\<nexists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\""], ["proof (state)\nthis:\n  \\<nexists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\n\ngoal (1 subgoal):\n 1. \\<nexists>C.\n       f ` S \\<subseteq> C \\<and>\n       comm_monoid_add_ow C pls zero \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "then"], ["proof (chain)\npicking this:\n  \\<nexists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero", "have **: \"\\<nexists>C'. g ` T \\<subseteq> C' \\<and> comm_monoid_add_ow C' pls' zero'\""], ["proof (prove)\nusing this:\n  \\<nexists>C. f ` S \\<subseteq> C \\<and> comm_monoid_add_ow C pls zero\n\ngoal (1 subgoal):\n 1. \\<nexists>C'.\n       g ` T \\<subseteq> C' \\<and> comm_monoid_add_ow C' pls' zero'", "by transfer simp"], ["proof (state)\nthis:\n  \\<nexists>C'. g ` T \\<subseteq> C' \\<and> comm_monoid_add_ow C' pls' zero'\n\ngoal (1 subgoal):\n 1. \\<nexists>C.\n       f ` S \\<subseteq> C \\<and>\n       comm_monoid_add_ow C pls zero \\<Longrightarrow>\n    A (sum_with pls zero f S) (sum_with pls' zero' g T)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A (sum_with pls zero f S) (sum_with pls' zero' g T)", "by (simp add: sum_with_def * ** \\<open>A zero zero'\\<close>)"], ["proof (state)\nthis:\n  A (sum_with pls zero f S) (sum_with pls' zero' g T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A (sum_with pls zero f S) (sum_with pls' zero' g T)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection\\<open>Relativization.\\<close>"], ["", "context ab_group_add_ow\nbegin"], ["", "tts_context\n  tts: (?'a to S) \n  rewriting ctr_simps\n  substituting comm_monoid_add_ow_axioms\n  eliminating \\<open>S \\<noteq> {}\\<close> through auto\n  applying [OF add_closed' zero_closed]\nbegin"], ["", "tts_lemma mono_neutral_cong_left:\n  assumes \"range h \\<subseteq> S\"\n    and \"range g \\<subseteq> S\"\n    and \"finite T\"\n    and \"Sa \\<subseteq> T\"\n    and \"\\<forall>x\\<in>T - Sa. h x = z\"\n    and \"\\<And>x. x \\<in> Sa \\<Longrightarrow> g x = h x\"\n  shows \"sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z g Sa = sum_with (\\<oplus>\\<^sub>o\\<^sub>w) z h T\"\n    is sum.mono_neutral_cong_left"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}