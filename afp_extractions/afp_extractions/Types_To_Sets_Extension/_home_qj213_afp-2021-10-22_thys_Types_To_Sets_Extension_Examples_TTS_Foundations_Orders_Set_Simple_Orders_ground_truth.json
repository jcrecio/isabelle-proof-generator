{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/TTS_Foundations/Orders/Set_Simple_Orders.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma preorder_ow[ud_with]: \"preorder = preorder_ow UNIV\"", "lemma ord_preorder_ow[ud_with]: \"ord_preorder = ord_preorder_ow UNIV\"", "lemma preorder_pair_ow[ud_with]: \n  \"preorder_pair = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma preorder_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      preorder_ow preorder_ow\"", "lemma ord_preorder_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      ord_preorder_ow ord_preorder_ow\"", "lemma preorder_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_pair_ow preorder_pair_ow\"", "lemma order_ow[ud_with]: \"order = order_ow UNIV\"", "lemma ord_order_ow[ud_with]: \"ord_order = ord_order_ow UNIV\"", "lemma preorder_order_ow[ud_with]: \n  \"preorder_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma order_pair_ow[ud_with]: \n  \"order_pair = (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      order_ow order_ow\"", "lemma ord_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===>\n      (=)\n    ) ord_order_ow ord_order_ow\"", "lemma preorder_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_order_ow preorder_order_ow\"", "lemma order_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) order_pair_ow order_pair_ow\"", "lemma dense_order_ow[ud_with]: \"dense_order = dense_order_ow UNIV\"", "lemma ord_dense_order_ow[ud_with]: \"ord_dense_order = ord_dense_order_ow UNIV\"", "lemma preorder_dense_order_ow[ud_with]: \n  \"preorder_dense_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma order_dense_order_ow[ud_with]: \n  \"order_dense_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. order_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma dense_order_pair_ow[ud_with]: \n  \"dense_order_pair = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. dense_order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\"", "lemma desne_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      dense_order_ow dense_order_ow\"", "lemma ord_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===>\n      (=)\n    ) ord_dense_order_ow ord_dense_order_ow\"", "lemma preorder_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_dense_order_ow preorder_dense_order_ow\"", "lemma order_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) order_dense_order_ow order_dense_order_ow\"", "lemma dense_order_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) dense_order_pair_ow dense_order_pair_ow\"", "lemma order_extremum_ow[ud_with]: \"order_extremum = order_extremum_ow UNIV\"", "lemma extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> A ===> (=)) extremum_ow extremum_ow\"", "lemma ord_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> A ===> (=)) ord_extremum_ow ord_extremum_ow\"", "lemma order_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> \n      (=)\n    ) order_extremum_ow order_extremum_ow\"", "lemma no_extremum_ow[ud_with]: \"no_extremum = no_extremum_ow UNIV\"", "lemma no_extremum_ow_axioms_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (=)) \n      no_extremum_ow_axioms no_extremum_ow_axioms\"", "lemma no_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      no_extremum_ow no_extremum_ow\"", "lemma right_total_UNIV_transfer'[transfer_rule]: \n  assumes \"right_total A\" and \"Domainp A = (\\<lambda>x. x \\<in> U)\"\n  shows \"rel_set A U UNIV\""], "translations": [["", "lemma preorder_ow[ud_with]: \"preorder = preorder_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder = preorder_ow UNIV", "unfolding preorder_def preorder_ow_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        (\\<forall>x y. ls x y = (le x y \\<and> \\<not> le y x)) \\<and>\n        (\\<forall>x. le x x) \\<and>\n        (\\<forall>x y z.\n            le x y \\<longrightarrow> le y z \\<longrightarrow> le x z)) =\n    (\\<lambda>le ls.\n        (\\<forall>x y.\n            x \\<in> UNIV \\<longrightarrow>\n            y \\<in> UNIV \\<longrightarrow>\n            ls x y = (le x y \\<and> \\<not> le y x)) \\<and>\n        (\\<forall>x. x \\<in> UNIV \\<longrightarrow> le x x) \\<and>\n        (\\<forall>x y z.\n            x \\<in> UNIV \\<longrightarrow>\n            y \\<in> UNIV \\<longrightarrow>\n            z \\<in> UNIV \\<longrightarrow>\n            le x y \\<longrightarrow> le y z \\<longrightarrow> le x z))", "by simp"], ["", "lemma ord_preorder_ow[ud_with]: \"ord_preorder = ord_preorder_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_preorder = ord_preorder_ow UNIV", "unfolding ord_preorder_def ord_preorder_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_ow UNIV = preorder_ow UNIV", "by simp"], ["", "lemma preorder_pair_ow[ud_with]: \n  \"preorder_pair = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_pair =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        preorder_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding preorder_pair_def preorder_pair_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_preorder_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_preorder_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma preorder_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      preorder_ow preorder_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     preorder_ow preorder_ow", "by (ow_locale_transfer locale_defs: preorder_ow_def)"], ["", "lemma ord_preorder_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      ord_preorder_ow ord_preorder_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     ord_preorder_ow ord_preorder_ow", "by (ow_locale_transfer locale_defs: ord_preorder_ow_def)"], ["", "lemma preorder_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_pair_ow preorder_pair_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     preorder_pair_ow preorder_pair_ow", "by (ow_locale_transfer locale_defs: preorder_pair_ow_def)"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context preorder_ow\nbegin"], ["", "interpretation ord_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_context\n  tts: (?'a to U) \n  sbterms: (\\<open>?ls::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls)\n    and (\\<open>?le::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le)\n  rewriting ctr_simps\n  substituting preorder_ow_axioms\n  eliminating through auto\nbegin"], ["", "tts_lemma less_irrefl:\n  assumes \"x \\<in> U\"\n  shows \"\\<not> x <\\<^sub>a x\"\n    is preorder.less_irrefl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_refl:\n  assumes \"y \\<in> U\" and \"x = y\"\n  shows \"x \\<le>\\<^sub>a y\"\n  is preorder.eq_refl"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_le:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"x \\<le>\\<^sub>a y\"\n    is preorder.less_imp_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma strict_implies_not_eq:\n  assumes \"b \\<in> U\" and \"a <\\<^sub>a b\"\n  shows \"a \\<noteq> b\"\n    is preorder.strict_implies_not_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_not_sym:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"\\<not> y <\\<^sub>a x\"\n    is preorder.less_not_sym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_empty_eq_Ici_eq_empty:\n  assumes \"l \\<in> U\"\n  shows \"{} \\<noteq> {l\\<le>\\<^sub>a..}\"\n    is preorder.not_empty_eq_Ici_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_eq_empty:\n  assumes \"l \\<in> U\"\n  shows \"{l\\<le>\\<^sub>a..} \\<noteq> {}\"\n    is preorder.not_Ici_eq_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma asym:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a <\\<^sub>a b\" and \"b <\\<^sub>a a\"\n  shows False\n    is preorder.asym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_asym':\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a <\\<^sub>a b\" and \"b <\\<^sub>a a\"\n  shows P\n    is preorder.less_asym'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_less:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"(\\<not> y <\\<^sub>a x) = True\"\n    is preorder.less_imp_not_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma single_Diff_lessThan:\n  assumes \"k \\<in> U\"\n  shows \"{k} - {..<\\<^sub>ak} = {k}\"\n    is preorder.single_Diff_lessThan"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_triv:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"(y <\\<^sub>a x \\<longrightarrow> P) = True\"\n    is preorder.less_imp_triv"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma ivl_disj_int_one:\n  assumes \"l \\<in> U\" and \"u \\<in> U\"\n  shows \n    \"{..\\<le>\\<^sub>al} \\<inter> {l<\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{..<\\<^sub>al} \\<inter> {l\\<le>\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{..\\<le>\\<^sub>al} \\<inter> {l<\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    \"{..<\\<^sub>al} \\<inter> {l\\<le>\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    \"{l<\\<^sub>a..\\<le>\\<^sub>au} \\<inter> {u<\\<^sub>a..} = {}\"\n    \"{l<\\<^sub>a..<\\<^sub>au} \\<inter> {u\\<le>\\<^sub>a..} = {}\"\n    \"{l\\<le>\\<^sub>a..\\<le>\\<^sub>au} \\<inter> {u<\\<^sub>a..} = {}\"\n    \"{l\\<le>\\<^sub>a..<\\<^sub>au} \\<inter> {u\\<le>\\<^sub>a..} = {}\"\n    is preorder.ivl_disj_int_one"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty_iff2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({} = {a\\<le>\\<^sub>a..\\<le>\\<^sub>ab}) = (\\<not> a \\<le>\\<^sub>a b)\"\n    is preorder.atLeastatMost_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty_iff2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({} = {a\\<le>\\<^sub>a..<\\<^sub>ab}) = (\\<not> a <\\<^sub>a b)\"\n    is preorder.atLeastLessThan_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty_iff2:\n  assumes \"k \\<in> U\" and \"l \\<in> U\"\n  shows \"({} = {k<\\<^sub>a..\\<le>\\<^sub>al}) = (\\<not> k <\\<^sub>a l)\"\n    is preorder.greaterThanAtMost_empty_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} = {}) = (\\<not> a \\<le>\\<^sub>a b)\"\n    is preorder.atLeastatMost_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"({a\\<le>\\<^sub>a..<\\<^sub>ab} = {}) = (\\<not> a <\\<^sub>a b)\"\n    is preorder.atLeastLessThan_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty_iff:\n  assumes \"k \\<in> U\" and \"l \\<in> U\"\n  shows \"({k<\\<^sub>a..\\<le>\\<^sub>al} = {}) = (\\<not> k <\\<^sub>a l)\"\n    is preorder.greaterThanAtMost_empty_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_empty:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"b \\<le>\\<^sub>a a\"\n  shows \"{a\\<le>\\<^sub>a..<\\<^sub>ab} = {}\"\n    is preorder.atLeastLessThan_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_empty:\n  assumes \"l \\<in> U\" and \"k \\<in> U\" and \"l \\<le>\\<^sub>a k\"\n  shows \"{k<\\<^sub>a..\\<le>\\<^sub>al} = {}\"\n    is preorder.greaterThanAtMost_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanLessThan_empty:\n  assumes \"l \\<in> U\" and \"k \\<in> U\" and \"l \\<le>\\<^sub>a k\"\n  shows \"{k<\\<^sub>a..<\\<^sub>al} = {}\"\n    is preorder.greaterThanLessThan_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_less_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x \\<le>\\<^sub>a y\" and \"y <\\<^sub>a z\"\n  shows \"x <\\<^sub>a z\"\n    is preorder.le_less_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_empty:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"b <\\<^sub>a a\"\n  shows \"{a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} = {}\"\n    is preorder.atLeastatMost_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_le_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x <\\<^sub>a y\" and \"y \\<le>\\<^sub>a z\"\n  shows \"x <\\<^sub>a z\"\n    is preorder.less_le_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_trans:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"z \\<in> U\" and \"x <\\<^sub>a y\" and \"y <\\<^sub>a z\"\n  shows \"x <\\<^sub>a z\"\n    is preorder.less_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma ivl_disj_int_two:\n  assumes \"l \\<in> U\" and \"m \\<in> U\" and \"u \\<in> U\"\n  shows \n    \"{l<\\<^sub>a..<\\<^sub>am} \\<inter> {m\\<le>\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{l<\\<^sub>a..\\<le>\\<^sub>am} \\<inter> {m<\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{l\\<le>\\<^sub>a..<\\<^sub>am} \\<inter> {m\\<le>\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{l\\<le>\\<^sub>a..\\<le>\\<^sub>am} \\<inter> {m<\\<^sub>a..<\\<^sub>au} = {}\"\n    \"{l<\\<^sub>a..<\\<^sub>am} \\<inter> {m\\<le>\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    \"{l<\\<^sub>a..\\<le>\\<^sub>am} \\<inter> {m<\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    \"{l\\<le>\\<^sub>a..<\\<^sub>am} \\<inter> {m\\<le>\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    \"{l\\<le>\\<^sub>a..\\<le>\\<^sub>am} \\<inter> {m<\\<^sub>a..\\<le>\\<^sub>au} = {}\"\n    is preorder.ivl_disj_int_two"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_asym:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x <\\<^sub>a y\" and \"\\<not> P \\<Longrightarrow> y <\\<^sub>a x\"\n  shows P\n    is preorder.less_asym"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Iio_Int_singleton:\n  assumes \"k \\<in> U\" and \"x \\<in> U\"\n  shows \"{..<\\<^sub>ak} \\<inter> {x} = (if x <\\<^sub>a k then {x} else {})\"\n    is preorder.Iio_Int_singleton"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Ioi_le_Ico:\n  assumes \"a \\<in> U\"\n  shows \"{a<\\<^sub>a..} \\<subseteq> {a\\<le>\\<^sub>a..}\"\n    is preorder.Ioi_le_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_subset_Iic_iff:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"h' \\<in> U\"\n  shows \"({l\\<le>\\<^sub>a..\\<le>\\<^sub>ah} \\<subseteq> {..\\<le>\\<^sub>ah'}) = (\\<not> l \\<le>\\<^sub>a h \\<or> h \\<le>\\<^sub>a h')\"\n    is preorder.Icc_subset_Iic_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeast_subset_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"({x\\<le>\\<^sub>a..} \\<subseteq> {y\\<le>\\<^sub>a..}) = (y \\<le>\\<^sub>a x)\"\n    is preorder.atLeast_subset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_subset_Ici_iff:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"l' \\<in> U\"\n  shows \"({l\\<le>\\<^sub>a..\\<le>\\<^sub>ah} \\<subseteq> {l'\\<le>\\<^sub>a..}) = (\\<not> l \\<le>\\<^sub>a h \\<or> l' \\<le>\\<^sub>a l)\"\n    is preorder.Icc_subset_Ici_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_subset_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"d \\<in> U\"\n  shows \"({a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} \\<subseteq> {c\\<le>\\<^sub>a..\\<le>\\<^sub>ad}) = (\\<not> a \\<le>\\<^sub>a b \\<or> b \\<le>\\<^sub>a d \\<and> c \\<le>\\<^sub>a a)\"\n    is preorder.atLeastatMost_subset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastatMost_psubset_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"d \\<in> U\"\n  shows \"({a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} \\<subset> {c\\<le>\\<^sub>a..\\<le>\\<^sub>ad}) = \n    (c \\<le>\\<^sub>a d \\<and> (\\<not> a \\<le>\\<^sub>a b \\<or> c \\<le>\\<^sub>a a \\<and> b \\<le>\\<^sub>a d \\<and> (c <\\<^sub>a a \\<or> b <\\<^sub>a d)))\"\n    is preorder.atLeastatMost_psubset_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_empty:\n  assumes \"U \\<noteq> {}\"\n  shows \"bdd_above {}\"\n    is preorder.bdd_above_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Iic:\n  assumes \"b \\<in> U\"\n  shows \"bdd_above {..\\<le>\\<^sub>ab}\"\n    is preorder.bdd_above_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Iio:\n  assumes \"b \\<in> U\"\n  shows \"bdd_above {..<\\<^sub>ab}\"\n    is preorder.bdd_above_Iio"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_empty:\n  assumes \"U \\<noteq> {}\"\n  shows \"bdd_below {}\"\n    is preorder.bdd_below_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Icc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a\\<le>\\<^sub>a..\\<le>\\<^sub>ab}\"\n    is preorder.bdd_above_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ico:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a\\<le>\\<^sub>a..<\\<^sub>ab}\"\n    is preorder.bdd_above_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ioc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a<\\<^sub>a..\\<le>\\<^sub>ab}\"\n    is preorder.bdd_above_Ioc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Ioo:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_above {a<\\<^sub>a..<\\<^sub>ab}\"\n    is preorder.bdd_above_Ioo"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Int1:\n  assumes \"A \\<subseteq> U\" and \"B \\<subseteq> U\" and \"bdd_above A\"\n  shows \"bdd_above (A \\<inter> B)\"\n    is preorder.bdd_above_Int1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_Int2:\n  assumes \"B \\<subseteq> U\" and \"A \\<subseteq> U\" and \"bdd_above B\"\n  shows \"bdd_above (A \\<inter> B)\"\n    is preorder.bdd_above_Int2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Icc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a\\<le>\\<^sub>a..\\<le>\\<^sub>ab}\"\n    is preorder.bdd_below_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ico:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a\\<le>\\<^sub>a..<\\<^sub>ab}\"\n    is preorder.bdd_below_Ico"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioc:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>a..\\<le>\\<^sub>ab}\"\n    is preorder.bdd_below_Ioc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioo:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>a..<\\<^sub>ab}\"\n    is preorder.bdd_below_Ioo"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ici:\n  assumes \"a \\<in> U\"\n  shows \"bdd_below {a\\<le>\\<^sub>a..}\"\n    is preorder.bdd_below_Ici"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Ioi:\n  assumes \"a \\<in> U\"\n  shows \"bdd_below {a<\\<^sub>a..}\"\n    is preorder.bdd_below_Ioi"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_mono:\n  assumes \"B \\<subseteq> U\" and \"bdd_above B\" and \"A \\<subseteq> B\"\n  shows \"bdd_above A\"\n    is preorder.bdd_above_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_aboveI:\n  assumes \"A \\<subseteq> U\" and \"M \\<in> U\" and \"\\<And>x. \\<lbrakk>x \\<in> U; x \\<in> A\\<rbrakk> \\<Longrightarrow> x \\<le>\\<^sub>a M\"\n  shows \"bdd_above A\"\n    is preorder.bdd_aboveI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_aboveI2:\n  assumes \"range f \\<subseteq> U\" and \"M \\<in> U\" and \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le>\\<^sub>a M\"\n  shows \"bdd_above (f ` A)\"\n    is preorder.bdd_aboveI2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Int1:\n  assumes \"A \\<subseteq> U\" and \"B \\<subseteq> U\" and \"bdd_below A\" \n  shows \"bdd_below (A \\<inter> B)\"\n    is preorder.bdd_below_Int1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_Int2:\n  assumes \"B \\<subseteq> U\" and \"A \\<subseteq> U\" and \"bdd_below B\"\n  shows \"bdd_below (A \\<inter> B)\"\n    is preorder.bdd_below_Int2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_belowI:\n  assumes \"A \\<subseteq> U\" and \"m \\<in> U\" and \"\\<And>x. \\<lbrakk>x \\<in> U; x \\<in> A\\<rbrakk> \\<Longrightarrow> m \\<le>\\<^sub>a x\"\n  shows \"bdd_below A\"\n    is preorder.bdd_belowI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_mono:\n  assumes \"B \\<subseteq> U\" and \"bdd_below B\" and \"A \\<subseteq> B\"\n  shows \"bdd_below A\"\n    is preorder.bdd_below_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_belowI2:\n  assumes \"m \\<in> U\" and \"range f \\<subseteq> U\" and \"\\<And>x. x \\<in> A \\<Longrightarrow> m \\<le>\\<^sub>a f x\"\n  shows \"bdd_below (f ` A)\"\n    is preorder.bdd_belowI2[where 'b='d]"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "subsection\\<open>Partial orders\\<close>"], ["", "locale order_ow = preorder_ow U le ls \n  for U :: \"'a set\" and le ls +\n  assumes antisym: \"x \\<in> U \\<Longrightarrow> y \\<in> U \\<Longrightarrow> le x y \\<Longrightarrow> le y x \\<Longrightarrow> x = y\""], ["", "locale order_dual_ow = order_ow U le ls \n  for U :: \"'a set\" and le ls\nbegin"], ["", "sublocale preorder_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dual_ow U le ls", ".."], ["", "sublocale dual: order_ow U ge gt"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x)", "unfolding order_ow_def order_ow_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) \\<and>\n    (\\<forall>x y.\n        x \\<in> U \\<longrightarrow>\n        y \\<in> U \\<longrightarrow>\n        y \\<le>\\<^sub>a x \\<longrightarrow>\n        x \\<le>\\<^sub>a y \\<longrightarrow> x = y)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) \\<and>\n    (\\<forall>x y.\n        x \\<in> U \\<longrightarrow>\n        y \\<in> U \\<longrightarrow>\n        y \\<le>\\<^sub>a x \\<longrightarrow>\n        x \\<le>\\<^sub>a y \\<longrightarrow> x = y)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. preorder_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x)\n 2. \\<forall>x y.\n       x \\<in> U \\<longrightarrow>\n       y \\<in> U \\<longrightarrow>\n       y \\<le>\\<^sub>a x \\<longrightarrow>\n       x \\<le>\\<^sub>a y \\<longrightarrow> x = y", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x)", "by (rule dual.preorder_ow_axioms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<in> U \\<longrightarrow>\n       y \\<in> U \\<longrightarrow>\n       y \\<le>\\<^sub>a x \\<longrightarrow>\n       x \\<le>\\<^sub>a y \\<longrightarrow> x = y", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<in> U \\<longrightarrow>\n       y \\<in> U \\<longrightarrow>\n       y \\<le>\\<^sub>a x \\<longrightarrow>\n       x \\<le>\\<^sub>a y \\<longrightarrow> x = y", "by (simp add: antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "locale ord_order_ow = \n  ord_preorder_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>b: order_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b"], ["", "locale ord_order_dual_ow = ord_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale ord_preorder_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_preorder_dual_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale ord_dual: ord_order_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order_ow U\\<^sub>b (\\<lambda>x y. y \\<le>\\<^sub>b x)\n     (\\<lambda>x y. y <\\<^sub>b x)", "by unfold_locales (simp add: ord\\<^sub>b.antisym)"], ["", "sublocale dual_ord: ord_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order_ow U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", "by (rule ord_order_ow_axioms)"], ["", "sublocale dual_dual: ord_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order_ow U\\<^sub>b (\\<lambda>x y. y \\<le>\\<^sub>b x)\n     (\\<lambda>x y. y <\\<^sub>b x)", "by (rule ord_dual.ord_order_ow_axioms)"], ["", "end"], ["", "locale preorder_order_ow = \n  ord_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>a: preorder_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale preorder_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_pair_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b\n     ls\\<^sub>b", ".."], ["", "end"], ["", "locale preorder_order_dual_ow = preorder_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale ord_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order_dual_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale preorder_pair_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_pair_dual_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale ord_dual: preorder_order_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "sublocale dual_ord: preorder_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale dual_dual: preorder_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "end"], ["", "locale order_pair_ow = \n  preorder_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>a: order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale rev: order_pair_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b U\\<^sub>a le\\<^sub>a ls\\<^sub>a"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b U\\<^sub>a le\\<^sub>a\n     ls\\<^sub>a", ".."], ["", "end"], ["", "locale order_pair_dual_ow = order_pair_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale preorder_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_dual_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b\n     le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale ord_dual: order_pair_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "sublocale dual_ord: order_pair_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", "by unfold_locales (simp add: ord\\<^sub>a.antisym)"], ["", "sublocale dual_dual: order_pair_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "end"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "lemma order_ow[ud_with]: \"order = order_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order = order_ow UNIV", "unfolding \n    order_def order_ow_def order_axioms_def order_ow_axioms_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        preorder_ow UNIV le ls \\<and>\n        (\\<forall>x y.\n            le x y \\<longrightarrow> le y x \\<longrightarrow> x = y)) =\n    (\\<lambda>le ls.\n        preorder_ow UNIV le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> UNIV \\<longrightarrow>\n            y \\<in> UNIV \\<longrightarrow>\n            le x y \\<longrightarrow> le y x \\<longrightarrow> x = y))", "by simp"], ["", "lemma ord_order_ow[ud_with]: \"ord_order = ord_order_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order = ord_order_ow UNIV", "unfolding ord_order_def ord_order_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>b ls\\<^sub>b.\n        ord_preorder_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>b ls\\<^sub>b) =\n    (\\<lambda>le\\<^sub>b ls\\<^sub>b.\n        ord_preorder_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>b ls\\<^sub>b)", "by simp"], ["", "lemma preorder_order_ow[ud_with]: \n  \"preorder_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        preorder_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding preorder_order_def preorder_order_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "lemma order_pair_ow[ud_with]: \n  \"order_pair = (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding order_pair_def order_pair_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        preorder_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        preorder_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      order_ow order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     order_ow order_ow", "by (ow_locale_transfer locale_defs: order_ow_def order_ow_axioms_def)"], ["", "lemma ord_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===>\n      (=)\n    ) ord_order_ow ord_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     ord_order_ow ord_order_ow", "by (ow_locale_transfer locale_defs: ord_order_ow_def)"], ["", "lemma preorder_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_order_ow preorder_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     preorder_order_ow preorder_order_ow", "by (ow_locale_transfer locale_defs: preorder_order_ow_def)"], ["", "lemma order_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) order_pair_ow order_pair_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     order_pair_ow order_pair_ow", "by (ow_locale_transfer locale_defs: order_pair_ow_def)"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context order_ow\nbegin"], ["", "interpretation ord_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_context\n  tts: (?'a to U)\n  sbterms: (\\<open>?ls::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls)\n    and (\\<open>?le::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating through auto\nbegin"], ["", "tts_lemma atLeastAtMost_singleton:\n  assumes \"a \\<in> U\"\n  shows \"{a\\<le>\\<^sub>a..\\<le>\\<^sub>aa} = {a}\"\n  is order.atLeastAtMost_singleton"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_eq:\n  assumes \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"(x = y) = False\"\n  is order.less_imp_not_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_imp_not_eq2:\n  assumes \"y \\<in> U\" and \"x <\\<^sub>a y\"\n  shows \"(y = x) = False\"\n    is order.less_imp_not_eq2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x = y) = (x \\<le>\\<^sub>a y \\<and> y \\<le>\\<^sub>a x)\"\n    is order.eq_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_less:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x \\<le>\\<^sub>a y) = (x <\\<^sub>a y \\<or> x = y)\"\n    is order.le_less"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_absorb2:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>a x\"\n  shows \"min x y = y\"\n    is order.min_absorb2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma less_le:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"(x <\\<^sub>a y) = (x \\<le>\\<^sub>a y \\<and> x \\<noteq> y)\"\n    is order.less_le"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_imp_less_or_eq:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x \\<le>\\<^sub>a y\"\n  shows \"x <\\<^sub>a y \\<or> x = y\"\n    is order.le_imp_less_or_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>a x\"\n  shows \"(x \\<le>\\<^sub>a y) = (x = y)\"\n    is order.antisym_conv"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma le_neq_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<le>\\<^sub>a b\" and \"a \\<noteq> b\"\n  shows \"a <\\<^sub>a b\"\n    is order.le_neq_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neq_le_trans:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<noteq> b\" and \"a \\<le>\\<^sub>a b\"\n  shows \"a <\\<^sub>a b\"\n    is order.neq_le_trans"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastAtMost_singleton':\n  assumes \"b \\<in> U\" and \"a = b\"\n  shows \"{a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} = {a}\"\n    is order.atLeastAtMost_singleton'"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeastLessThan_eq_atLeastAtMost_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"{a\\<le>\\<^sub>a..<\\<^sub>ab} = {a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} - {b}\"\n    is order.atLeastLessThan_eq_atLeastAtMost_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThanAtMost_eq_atLeastAtMost_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"{a<\\<^sub>a..\\<le>\\<^sub>ab} = {a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} - {a}\"\n    is order.greaterThanAtMost_eq_atLeastAtMost_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atMost_Int_atLeast:\n  assumes \"n \\<in> U\"\n  shows \"{..\\<le>\\<^sub>an} \\<inter> {n\\<le>\\<^sub>a..} = {n}\"\n    is order.atMost_Int_atLeast"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atLeast_eq_iff:\n  assumes \"x \\<in> U\" and \"y \\<in> U\"\n  shows \"({x\\<le>\\<^sub>a..} = {y\\<le>\\<^sub>a..}) = (x = y)\"\n    is order.atLeast_eq_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Least_equality:\n  assumes \"x \\<in> U\" and \"P x\" \n    and \"\\<And>y. \\<lbrakk>y \\<in> U; P y\\<rbrakk> \\<Longrightarrow> x \\<le>\\<^sub>a y\"\n  shows \"Least P = Some x\"\n    is order.Least_equality"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma Icc_eq_Icc:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"l' \\<in> U\" and \"h' \\<in> U\"\n  shows \"({l\\<le>\\<^sub>a..\\<le>\\<^sub>ah} = {l'\\<le>\\<^sub>a..\\<le>\\<^sub>ah'}) = \n    (h = h' \\<and> l = l' \\<or> \\<not> l' \\<le>\\<^sub>a h' \\<and> \\<not> l \\<le>\\<^sub>a h)\"\n    is order.Icc_eq_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma LeastI2_order:\n  assumes \"x \\<in> U\"\n    and \"P x\"\n    and \"\\<And>y. \\<lbrakk>y \\<in> U; P y\\<rbrakk> \\<Longrightarrow> x \\<le>\\<^sub>a y\"\n    and \"\\<And>x. \\<lbrakk>x \\<in> U; P x; \\<forall>y\\<in>U. P y \\<longrightarrow> x \\<le>\\<^sub>a y\\<rbrakk> \\<Longrightarrow> Q x\"\n    and \"\\<And>z. \\<lbrakk>z \\<in> U; Least P = Some z; Q z\\<rbrakk> \\<Longrightarrow> thesis\"\n  shows thesis\n    is order.LeastI2_order"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma mono_image_least:\n  assumes \"\\<forall>x\\<in>U. f x \\<in> U\"\n    and \"m \\<in> U\"\n    and \"n \\<in> U\"\n    and \"m' \\<in> U\"\n    and \"n' \\<in> U\"\n    and \"on U with (\\<le>\\<^sub>a) (\\<le>\\<^sub>a) : \\<guillemotleft>mono\\<guillemotright> f\"\n    and \"f ` {m\\<le>\\<^sub>a..<\\<^sub>an} = {m'\\<le>\\<^sub>a..<\\<^sub>an'}\"\n    and \"m <\\<^sub>a n\"\n  shows \"f m = m'\"\n    is order.mono_image_least"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv1:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"\\<not> x <\\<^sub>a y\"\n  shows \"(x \\<le>\\<^sub>a y) = (x = y)\"\n    is order.antisym_conv1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma antisym_conv2:\n  assumes \"x \\<in> U\" and \"y \\<in> U\" and \"x \\<le>\\<^sub>a y\"\n  shows \"(\\<not> x <\\<^sub>a y) = (x = y)\"\n    is order.antisym_conv2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma leD:\n  assumes \"y \\<in> U\" and \"x \\<in> U\" and \"y \\<le>\\<^sub>a x\"\n  shows \"\\<not> x <\\<^sub>a y\"\n    is order.leD"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating \\<open>?A \\<noteq> {}\\<close> through auto\nbegin"], ["", "tts_lemma atLeastAtMost_singleton_iff:\n  assumes \"a \\<in> U\"\n    and \"b \\<in> U\"\n    and \"c \\<in> U\"\n  shows \"({a\\<le>\\<^sub>a..\\<le>\\<^sub>ab} = {c}) = (a = b \\<and> b = c)\"\n    is order.atLeastAtMost_singleton_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "tts_context\n  tts: (?'a to U)\n  sbterms: (\\<open>?ls::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls)\n    and (\\<open>?le::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le)\n  rewriting ctr_simps\n  substituting order_ow_axioms\n  eliminating through auto\nbegin"], ["", "tts_lemma Least_ex1:\n  assumes \"z \\<in> U\"\n    and \"\\<exists>!x. x \\<in> U \\<and> P x \\<and> (\\<forall>y\\<in>U. P y \\<longrightarrow> x \\<le>\\<^sub>a y)\"\n    and \"\\<And>x. \\<lbrakk>x \\<in> U; Least P = Some x; P x; P z \\<Longrightarrow> x \\<le>\\<^sub>a z\\<rbrakk> \\<Longrightarrow> thesis\"\n  shows thesis\n    is order.Least_ex1"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context order_pair_ow\nbegin"], ["", "interpretation ord_pair_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_context\n  tts: (?'a to U\\<^sub>a) and (?'b to U\\<^sub>b)\n  sbterms: (\\<open>?ls\\<^sub>a::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls\\<^sub>a)\n    and (\\<open>?le\\<^sub>a::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le\\<^sub>a)\n    and (\\<open>?ls\\<^sub>b::?'b \\<Rightarrow> ?'b \\<Rightarrow> bool\\<close> to ls\\<^sub>b)\n    and (\\<open>?le\\<^sub>b::?'b \\<Rightarrow> ?'b \\<Rightarrow> bool\\<close> to le\\<^sub>b)\n  rewriting ctr_simps\n  substituting order_pair_ow_axioms\n  eliminating through (auto simp: mono_def bdd_def)\nbegin"], ["", "tts_lemma strict_mono_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>a. f x \\<in> U\\<^sub>b\" and \"strict_mono\\<^sub>a\\<^sub>b f\"\n  shows \"mono\\<^sub>a\\<^sub>b f\"\n    is order_pair.strict_mono_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_image_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>a. f x \\<in> U\\<^sub>b\" and \"A \\<subseteq> U\\<^sub>a\" and \"mono\\<^sub>a\\<^sub>b f\" and \"ord\\<^sub>a.bdd_above A\"\n  shows \"ord\\<^sub>b.bdd_above (f ` A)\"\n    is order_pair.bdd_above_image_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_image_mono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>a. f x \\<in> U\\<^sub>b\" and \"A \\<subseteq> U\\<^sub>a\" and \"mono\\<^sub>a\\<^sub>b f\" and \"ord\\<^sub>a.bdd_below A\"\n  shows \"ord\\<^sub>b.bdd_below (f ` A)\"\n    is order_pair.bdd_below_image_mono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_below_image_antimono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>a. f x \\<in> U\\<^sub>b\" \n    and \"A \\<subseteq> U\\<^sub>a\" \n    and \"antimono\\<^sub>a\\<^sub>b f\" \n    and \"ord\\<^sub>a.bdd_above A\"\n  shows \"ord\\<^sub>b.bdd_below (f ` A)\"\n    is order_pair.bdd_below_image_antimono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_image_antimono:\n  assumes \"\\<forall>x\\<in>U\\<^sub>a. f x \\<in> U\\<^sub>b\"\n    and \"A \\<subseteq> U\\<^sub>a\"\n    and \"antimono\\<^sub>a\\<^sub>b f\"\n    and \"ord\\<^sub>a.bdd_below A\"\n  shows \"ord\\<^sub>b.bdd_above (f ` A)\"\n    is order_pair.bdd_above_image_antimono"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "subsection\\<open>Dense orders\\<close>"], ["", "subsubsection\\<open>Definitions and common properties\\<close>"], ["", "locale dense_order_ow = order_ow U le ls\n  for U :: \"'a set\" and le ls +\n  assumes dense: \"\\<lbrakk> x \\<in> U; y \\<in> U; ls x y \\<rbrakk> \\<Longrightarrow> (\\<exists>z\\<in>U. ls x z \\<and> ls z y)\""], ["", "locale dense_order_dual_ow = dense_order_ow U le ls\n  for U :: \"'a set\" and le ls\nbegin"], ["", "interpretation ord_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "sublocale order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dual_ow U (\\<le>\\<^sub>a) (<\\<^sub>a)", ".."], ["", "sublocale dual: dense_order_ow U ge gt"], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x)", "using dense"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> U; ?y \\<in> U; ?x <\\<^sub>a ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>U. ?x <\\<^sub>a z \\<and> z <\\<^sub>a ?y\n\ngoal (1 subgoal):\n 1. dense_order_ow U (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x)", "by unfold_locales auto"], ["", "end"], ["", "locale ord_dense_order_ow = \n  ord_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>b: dense_order_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b"], ["", "locale ord_dense_order_dual_ow = ord_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b  \nbegin"], ["", "sublocale ord_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_order_dual_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale ord_dual: ord_dense_order_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_dense_order_ow U\\<^sub>b (\\<lambda>x y. y \\<le>\\<^sub>b x)\n     (\\<lambda>x y. y <\\<^sub>b x)", "using ord\\<^sub>b.dense"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> U\\<^sub>b; ?y \\<in> U\\<^sub>b; ?x <\\<^sub>b ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>U\\<^sub>b.\n                       ?x <\\<^sub>b z \\<and> z <\\<^sub>b ?y\n\ngoal (1 subgoal):\n 1. ord_dense_order_ow U\\<^sub>b (\\<lambda>x y. y \\<le>\\<^sub>b x)\n     (\\<lambda>x y. y <\\<^sub>b x)", "by unfold_locales blast"], ["", "sublocale dual_ord: ord_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_dense_order_ow U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", "by (rule ord_dense_order_ow_axioms)"], ["", "sublocale dual_dual: ord_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_dense_order_ow U\\<^sub>b (\\<lambda>x y. y \\<le>\\<^sub>b x)\n     (\\<lambda>x y. y <\\<^sub>b x)", "by (rule ord_dual.ord_dense_order_ow_axioms)"], ["", "end"], ["", "locale preorder_dense_order_ow = \n  ord_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>a: preorder_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale preorder_order_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b\n     ls\\<^sub>b", ".."], ["", "end"], ["", "locale preorder_dense_order_dual_ow = \n  preorder_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale ord_dense_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_dense_order_dual_ow U\\<^sub>b le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale preorder_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_order_dual_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale ord_dual: preorder_dense_order_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dense_order_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "sublocale dual_ord: preorder_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dense_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale dual_dual: preorder_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dense_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "end"], ["", "locale order_dense_order_ow = \n  preorder_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>a: order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale order_pair_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b\n     ls\\<^sub>b", ".."], ["", "end"], ["", "locale order_dense_order_dual_ow = order_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale preorder_dense_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dense_order_dual_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b\n     le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale order_pair_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair_dual_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale ord_dual: order_dense_order_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dense_order_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "sublocale dual_ord: order_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dense_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", ".."], ["", "sublocale dual_dual: order_dense_order_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dense_order_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "end"], ["", "locale dense_order_pair_ow = \n  order_dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b + ord\\<^sub>a: dense_order_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b"], ["", "locale dense_order_pair_dual_ow = dense_order_pair_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b le\\<^sub>b ls\\<^sub>b\n  for U\\<^sub>a :: \"'a set\" and le\\<^sub>a ls\\<^sub>a and U\\<^sub>b :: \"'b set\" and le\\<^sub>b ls\\<^sub>b\nbegin"], ["", "sublocale order_dense_order_dual_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dense_order_dual_ow U\\<^sub>a le\\<^sub>a ls\\<^sub>a U\\<^sub>b\n     le\\<^sub>b ls\\<^sub>b", ".."], ["", "sublocale ord_dual: dense_order_pair_ow U\\<^sub>a \\<open>(\\<le>\\<^sub>a)\\<close> \\<open>(<\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order_pair_ow U\\<^sub>a (\\<le>\\<^sub>a) (<\\<^sub>a) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "sublocale dual_ord: dense_order_pair_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<le>\\<^sub>b)\\<close> \\<open>(<\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order_pair_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", "using ord\\<^sub>a.dense"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> U\\<^sub>a; ?y \\<in> U\\<^sub>a; ?x <\\<^sub>a ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>U\\<^sub>a.\n                       ?x <\\<^sub>a z \\<and> z <\\<^sub>a ?y\n\ngoal (1 subgoal):\n 1. dense_order_pair_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b (\\<le>\\<^sub>b) (<\\<^sub>b)", "by unfold_locales auto"], ["", "sublocale dual_dual: dense_order_pair_ow U\\<^sub>a \\<open>(\\<ge>\\<^sub>a)\\<close> \\<open>(>\\<^sub>a)\\<close> U\\<^sub>b \\<open>(\\<ge>\\<^sub>b)\\<close> \\<open>(>\\<^sub>b)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order_pair_ow U\\<^sub>a (\\<lambda>x y. y \\<le>\\<^sub>a x)\n     (\\<lambda>x y. y <\\<^sub>a x) U\\<^sub>b\n     (\\<lambda>x y. y \\<le>\\<^sub>b x) (\\<lambda>x y. y <\\<^sub>b x)", ".."], ["", "end"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "lemma dense_order_ow[ud_with]: \"dense_order = dense_order_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order = dense_order_ow UNIV", "unfolding \n    dense_order_def dense_order_ow_def \n    dense_order_axioms_def dense_order_ow_axioms_def \n    ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls.\n        order_ow UNIV le ls \\<and>\n        (\\<forall>x y.\n            ls x y \\<longrightarrow> (\\<exists>z. ls x z \\<and> ls z y))) =\n    (\\<lambda>le ls.\n        order_ow UNIV le ls \\<and>\n        (\\<forall>x y.\n            x \\<in> UNIV \\<longrightarrow>\n            y \\<in> UNIV \\<longrightarrow>\n            ls x y \\<longrightarrow>\n            (\\<exists>z\\<in>UNIV. ls x z \\<and> ls z y)))", "by simp"], ["", "lemma ord_dense_order_ow[ud_with]: \"ord_dense_order = ord_dense_order_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_dense_order = ord_dense_order_ow UNIV", "unfolding ord_dense_order_def ord_dense_order_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>b ls\\<^sub>b.\n        ord_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        dense_order_ow UNIV le\\<^sub>b ls\\<^sub>b) =\n    (\\<lambda>le\\<^sub>b ls\\<^sub>b.\n        ord_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        dense_order_ow UNIV le\\<^sub>b ls\\<^sub>b)", "by simp"], ["", "lemma preorder_dense_order_ow[ud_with]: \n  \"preorder_dense_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. preorder_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preorder_dense_order =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        preorder_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding preorder_dense_order_def preorder_dense_order_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_dense_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        ord_dense_order_ow UNIV le\\<^sub>b ls\\<^sub>b \\<and>\n        preorder_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "lemma order_dense_order_ow[ud_with]: \n  \"order_dense_order = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. order_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_dense_order =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        order_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding order_dense_order_def order_dense_order_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        preorder_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        preorder_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        order_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "lemma dense_order_pair_ow[ud_with]: \n  \"dense_order_pair = \n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b. dense_order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b ls\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dense_order_pair =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a.\n        dense_order_pair_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV)", "unfolding dense_order_pair_def dense_order_pair_ow_def ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        order_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a) =\n    (\\<lambda>le\\<^sub>a ls\\<^sub>a le\\<^sub>b ls\\<^sub>b.\n        order_dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a UNIV le\\<^sub>b\n         ls\\<^sub>b \\<and>\n        dense_order_ow UNIV le\\<^sub>a ls\\<^sub>a)", "by simp"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma desne_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      dense_order_ow dense_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     dense_order_ow dense_order_ow", "by \n    (\n      ow_locale_transfer locale_defs: \n        dense_order_ow_def dense_order_ow_axioms_def\n    )"], ["", "lemma ord_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===>\n      (=)\n    ) ord_dense_order_ow ord_dense_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     ord_dense_order_ow ord_dense_order_ow", "by (ow_locale_transfer locale_defs: ord_dense_order_ow_def)"], ["", "lemma preorder_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) preorder_dense_order_ow preorder_dense_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     preorder_dense_order_ow preorder_dense_order_ow", "by (ow_locale_transfer locale_defs: preorder_dense_order_ow_def)"], ["", "lemma order_dense_order_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) order_dense_order_ow order_dense_order_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     order_dense_order_ow order_dense_order_ow", "by (ow_locale_transfer locale_defs: order_dense_order_ow_def)"], ["", "lemma dense_order_pair_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \n    \"bi_unique A\" \"right_total A\" \"bi_unique B\" \"right_total B\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> \n      rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> \n      (=)\n    ) dense_order_pair_ow dense_order_pair_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===>\n     (A ===> A ===> (=)) ===>\n     rel_set B ===> (B ===> B ===> (=)) ===> (B ===> B ===> (=)) ===> (=))\n     dense_order_pair_ow dense_order_pair_ow", "by (ow_locale_transfer locale_defs: dense_order_pair_ow_def)"], ["", "end"], ["", "subsection\\<open>(Unique) top and bottom elements\\<close>"], ["", "locale extremum_ow =\n  fixes U :: \"'a set\" and extremum \n  assumes extremum_closed[simp]: \"extremum \\<in> U\""], ["", "locale bot_ow = extremum_ow U bot for U :: \"'a set\" and bot\nbegin"], ["", "notation bot (\"\\<bottom>\")"], ["", "end"], ["", "locale top_ow = extremum_ow U top for U :: \"'a set\" and top\nbegin"], ["", "notation top (\"\\<top>\")"], ["", "end"], ["", "locale ord_extremum_ow = ord_ow U le ls + extremum_ow U extremum \n  for U :: \"'a set\" and le ls extremum"], ["", "locale order_extremum_ow = ord_extremum_ow U le ls extremum + order_ow U le ls\n  for U :: \"'a set\" and le ls extremum +\n  assumes extremum[simp]: \"a \\<in> U \\<Longrightarrow> le a extremum\""], ["", "locale order_bot_ow = \n  order_dual_ow U le ls + dual: order_extremum_ow U ge gt bot + bot_ow U bot \n  for U :: \"'a set\" and le ls bot"], ["", "locale order_top = \n  order_dual_ow U le ls + order_extremum_ow U le ls top + top_ow U top\n  for U :: \"'a set\" and le ls top"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "lemma order_extremum_ow[ud_with]: \"order_extremum = order_extremum_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_extremum = order_extremum_ow UNIV", "unfolding \n    order_extremum_def order_extremum_axioms_def \n    order_extremum_ow_def order_extremum_ow_axioms_def\n    ord_extremum_ow_def extremum_ow_def\n    ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls extremum.\n        order_ow UNIV le ls \\<and> (\\<forall>a. le a extremum)) =\n    (\\<lambda>le ls extremum.\n        extremum \\<in> UNIV \\<and>\n        order_ow UNIV le ls \\<and>\n        (\\<forall>a. a \\<in> UNIV \\<longrightarrow> le a extremum))", "by simp"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> A ===> (=)) extremum_ow extremum_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> A ===> (=)) extremum_ow extremum_ow", "by (ow_locale_transfer locale_defs: extremum_ow_def)"], ["", "lemma ord_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\"\n  shows \"(rel_set A ===> A ===> (=)) ord_extremum_ow ord_extremum_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> A ===> (=)) ord_extremum_ow ord_extremum_ow", "by (ow_locale_transfer locale_defs: ord_extremum_ow_def)"], ["", "lemma order_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(\n      rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> \n      (=)\n    ) order_extremum_ow order_extremum_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===>\n     (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> A ===> (=))\n     order_extremum_ow order_extremum_ow", "by \n    (\n      ow_locale_transfer locale_defs: \n        order_extremum_ow_def order_extremum_ow_axioms_def\n    )"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context order_extremum_ow\nbegin"], ["", "interpretation ord_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_context\n  tts: (?'a to U)\n  sbterms: (\\<open>?le::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le)\n    and (\\<open>?ls::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls)\n  rewriting ctr_simps\n  substituting order_extremum_ow_axioms\n  eliminating through force\nbegin"], ["", "tts_lemma extremum_strict:\n  assumes \"a \\<in> U\"\n  shows \"\\<not> extremum <\\<^sub>a a\"\n    is order_extremum.extremum_strict"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma bdd_above_top:\n  assumes \"A \\<subseteq> U\"\n  shows \"bdd_above A\"\n    is order_extremum.bdd_above_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_top:\n  assumes \"x \\<in> U\"\n  shows \"min extremum x = x\"\n  is order_extremum.min_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma min_top2:\n  assumes \"x \\<in> U\"\n  shows \"min x extremum = x\"\n  is order_extremum.min_top2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma extremum_unique:\n  assumes \"a \\<in> U\"\n  shows \"(extremum \\<le>\\<^sub>a a) = (a = extremum)\"\nis order_extremum.extremum_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_eq_extremum:\n  assumes \"a \\<in> U\"\n  shows \"(a \\<noteq> extremum) = (a <\\<^sub>a extremum)\"\n  is order_extremum.not_eq_extremum"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma extremum_uniqueI:\n  assumes \"a \\<in> U\" and \"extremum \\<le>\\<^sub>a a\"\n  shows \"a = extremum\"\n    is order_extremum.extremum_uniqueI"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_top:\n  assumes \"x \\<in> U\"\n  shows \"max extremum x = extremum\"\n    is order_extremum.max_top"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma max_top2:\n  assumes \"x \\<in> U\"\n  shows \"max x extremum = extremum\"\n    is order_extremum.max_top2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma atMost_eq_UNIV_iff:\n  assumes \"x \\<in> U\"\n  shows \"({..\\<le>\\<^sub>ax} = U) = (x = extremum)\"\n    is order_extremum.atMost_eq_UNIV_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "subsection\\<open>Absence of top or bottom elements\\<close>"], ["", "locale no_extremum_ow = order_ow U le ls for U :: \"'a set\" and le ls +\n  assumes gt_ex: \"x \\<in> U \\<Longrightarrow> \\<exists>y\\<in>U. ls x y\""], ["", "locale no_top_ow = order_dual_ow U le ls + no_extremum_ow U le ls \n  for U :: \"'a set\" and le ls"], ["", "locale no_bot_ow = order_dual_ow U le ls + dual: no_extremum_ow U ge gt \n  for U :: \"'a set\" and le ls"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "lemma no_extremum_ow[ud_with]: \"no_extremum = no_extremum_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_extremum = no_extremum_ow UNIV", "unfolding \n    no_extremum_def no_extremum_ow_def \n    no_extremum_axioms_def no_extremum_ow_axioms_def\n    ud_with"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>le ls. order_ow UNIV le ls \\<and> (\\<forall>x. Ex (ls x))) =\n    (\\<lambda>le ls.\n        order_ow UNIV le ls \\<and>\n        (\\<forall>x. x \\<in> UNIV \\<longrightarrow> Bex UNIV (ls x)))", "by simp"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma no_extremum_ow_axioms_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (=)) \n      no_extremum_ow_axioms no_extremum_ow_axioms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (=)) no_extremum_ow_axioms\n     no_extremum_ow_axioms", "by (ow_locale_transfer locale_defs:  no_extremum_ow_axioms_def)"], ["", "lemma no_extremum_ow_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"(rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=)) \n      no_extremum_ow no_extremum_ow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_set A ===> (A ===> A ===> (=)) ===> (A ===> A ===> (=)) ===> (=))\n     no_extremum_ow no_extremum_ow", "by (ow_locale_transfer locale_defs: no_extremum_ow_def)"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "lemma right_total_UNIV_transfer'[transfer_rule]: \n  assumes \"right_total A\" and \"Domainp A = (\\<lambda>x. x \\<in> U)\"\n  shows \"rel_set A U UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set A U UNIV", "using assms right_total_UNIV_transfer"], ["proof (prove)\nusing this:\n  right_total A\n  Domainp A = (\\<lambda>x. x \\<in> U)\n  right_total ?A \\<Longrightarrow> rel_set ?A (Collect (Domainp ?A)) UNIV\n\ngoal (1 subgoal):\n 1. rel_set A U UNIV", "by fastforce"], ["", "context no_extremum_ow\nbegin"], ["", "interpretation ord_syntax_ow"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_context\n  tts: (?'a to U)\n  sbterms: (\\<open>?le::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to le)\n    and (\\<open>?ls::?'a \\<Rightarrow> ?'a \\<Rightarrow> bool\\<close> to ls)\n  rewriting ctr_simps\n  substituting no_extremum_ow_axioms\n  eliminating through force\nbegin"], ["", "tts_lemma not_UNIV_eq_Iic:\n  assumes \"h' \\<in> U\"\n  shows \"U \\<noteq> {..\\<le>\\<^sub>ah'}\"\n  is no_extremum.not_UNIV_eq_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Iic_eq_UNIV:\n  assumes \"h' \\<in> U\"\n  shows \"{..\\<le>\\<^sub>ah'} \\<noteq> U\"\n    is no_extremum.not_Iic_eq_UNIV"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_UNIV_le_Iic:\n  assumes \"h \\<in> U\"\n  shows \"\\<not> U \\<subseteq> {..\\<le>\\<^sub>ah}\"\n    is no_extremum.not_UNIV_le_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_UNIV_eq_Icc:\n  assumes \"l' \\<in> U\" and \"h' \\<in> U\"\n  shows \"U \\<noteq> {l'\\<le>\\<^sub>a..\\<le>\\<^sub>ah'}\"\n    is no_extremum.not_UNIV_eq_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Icc_eq_UNIV:\n  assumes \"l' \\<in> U\" and \"h' \\<in> U\"\n  shows \"{l'\\<le>\\<^sub>a..\\<le>\\<^sub>ah'} \\<noteq> U\"\n    is no_extremum.not_Icc_eq_UNIV"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_UNIV_le_Icc:\n  assumes \"l \\<in> U\" and \"h \\<in> U\"\n  shows \"\\<not> U \\<subseteq> {l\\<le>\\<^sub>a..\\<le>\\<^sub>ah}\"\n    is no_extremum.not_UNIV_le_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma greaterThan_non_empty:\n  assumes \"x \\<in> U\"\n  shows \"{x<\\<^sub>a..} \\<noteq> {}\"\n    is no_extremum.greaterThan_non_empty"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Iic_eq_Ici:\n  assumes \"h \\<in> U\" and \"l' \\<in> U\"\n  shows \"{..\\<le>\\<^sub>ah} \\<noteq> {l'\\<le>\\<^sub>a..}\"\n    is no_extremum.not_Iic_eq_Ici"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_eq_Iic:\n  assumes \"l' \\<in> U\" and \"h \\<in> U\"\n  shows \"{l'\\<le>\\<^sub>a..} \\<noteq> {..\\<le>\\<^sub>ah}\"\n    is no_extremum.not_Ici_eq_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_le_Iic:\n  assumes \"l \\<in> U\" and \"h' \\<in> U\"\n  shows \"\\<not> {l\\<le>\\<^sub>a..} \\<subseteq> {..\\<le>\\<^sub>ah'}\"\n    is no_extremum.not_Ici_le_Iic"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Icc_eq_Ici:\n  assumes \"l \\<in> U\" and \"h \\<in> U\" and \"l' \\<in> U\"\n  shows \"{l\\<le>\\<^sub>a..\\<le>\\<^sub>ah} \\<noteq> {l'\\<le>\\<^sub>a..}\"\n    is no_extremum.not_Icc_eq_Ici"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_eq_Icc:\n  assumes \"l' \\<in> U\" and \"l \\<in> U\" and \"h \\<in> U\"\n  shows \"{l'\\<le>\\<^sub>a..} \\<noteq> {l\\<le>\\<^sub>a..\\<le>\\<^sub>ah}\"\n    is no_extremum.not_Ici_eq_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma not_Ici_le_Icc:\n  assumes \"l \\<in> U\" and \"l' \\<in> U\" and \"h' \\<in> U\"\n  shows \"\\<not> {l\\<le>\\<^sub>a..} \\<subseteq> {l'\\<le>\\<^sub>a..\\<le>\\<^sub>ah'}\"\n    is no_extremum.not_Ici_le_Icc"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "declare right_total_UNIV_transfer'[transfer_rule del]"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}