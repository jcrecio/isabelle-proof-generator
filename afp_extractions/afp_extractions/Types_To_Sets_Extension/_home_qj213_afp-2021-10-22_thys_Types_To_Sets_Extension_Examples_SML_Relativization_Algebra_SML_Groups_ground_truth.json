{"file_name": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension/Examples/SML_Relativization/Algebra/SML_Groups.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Types_To_Sets_Extension", "problem_names": ["lemma inverse_closed': \"inverse ` U \\<subseteq> U\"", "lemma inverse_closed'': \"\\<forall>x\\<in>U. inverse x \\<in> U\"", "lemma left_cancel: \n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" \n  shows \"a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c \\<longleftrightarrow> b = c\"", "lemma inverse_image[simp]: \"inverse ` U \\<subseteq> U\"", "lemma group_ow: \"group = group_ow UNIV\"", "lemma uminus_closed': \"uminus ` U \\<subseteq> U\"", "lemma uminus_closed'': \"\\<forall>a\\<in>U. -\\<^sub>o\\<^sub>w a \\<in> U\"", "lemma inverse_unique:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w\"\n  shows \"-\\<^sub>o\\<^sub>w a = b\"", "lemma inverse_neutral[simp]: \"-\\<^sub>o\\<^sub>w 0\\<^sub>o\\<^sub>w = 0\\<^sub>o\\<^sub>w\"", "lemma inverse_inverse: \n  assumes \"a \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = a\"", "lemma right_inverse: \n  assumes \"a \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = 0\\<^sub>o\\<^sub>w\"", "lemma group_add_ow: \"class.group_add = group_add_ow UNIV\"", "lemma group_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \"((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=)) \n    (group_ow (Collect (Domainp A))) group\"", "lemma group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=)) \n      (group_add_ow (Collect (Domainp A))) class.group_add\"", "lemma ab_group_add_ow: \"class.ab_group_add = ab_group_add_ow UNIV\"", "lemma ab_group_add_ow_UNIV_axioms: \n  \"ab_group_add_ow (UNIV::'a::ab_group_add set) (+) 0 (-) uminus\"", "lemma ab_group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n      (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add\""], "translations": [["", "lemma inverse_closed': \"inverse ` U \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse ` U \\<subseteq> U", "by auto"], ["", "lemma inverse_closed'': \"\\<forall>x\\<in>U. inverse x \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>U. inverse x \\<in> U", "by auto"], ["", "lemma left_cancel: \n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" \n  shows \"a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c \\<longleftrightarrow> b = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c) =\n    (b = c)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<^bold>*\\<^sub>o\\<^sub>w b =\n    a \\<^bold>*\\<^sub>o\\<^sub>w c \\<Longrightarrow>\n    b = c\n 2. b = c \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "assume \"a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c\""], ["proof (state)\nthis:\n  a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c\n\ngoal (2 subgoals):\n 1. a \\<^bold>*\\<^sub>o\\<^sub>w b =\n    a \\<^bold>*\\<^sub>o\\<^sub>w c \\<Longrightarrow>\n    b = c\n 2. b = c \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "then"], ["proof (chain)\npicking this:\n  a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "have \"inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w b) = inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w c)\""], ["proof (prove)\nusing this:\n  a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c\n\ngoal (1 subgoal):\n 1. inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w b) =\n    inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w c)", "by simp"], ["proof (state)\nthis:\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w b) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w c)\n\ngoal (2 subgoals):\n 1. a \\<^bold>*\\<^sub>o\\<^sub>w b =\n    a \\<^bold>*\\<^sub>o\\<^sub>w c \\<Longrightarrow>\n    b = c\n 2. b = c \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "with assms"], ["proof (chain)\npicking this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w b) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w c)", "have \"(inverse a \\<^bold>*\\<^sub>o\\<^sub>w a) \\<^bold>*\\<^sub>o\\<^sub>w b = (inverse a \\<^bold>*\\<^sub>o\\<^sub>w a) \\<^bold>*\\<^sub>o\\<^sub>w c\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w b) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w c)\n\ngoal (1 subgoal):\n 1. inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w b =\n    inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w c", "by (metis assoc inverse_closed)"], ["proof (state)\nthis:\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w b =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w c\n\ngoal (2 subgoals):\n 1. a \\<^bold>*\\<^sub>o\\<^sub>w b =\n    a \\<^bold>*\\<^sub>o\\<^sub>w c \\<Longrightarrow>\n    b = c\n 2. b = c \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "with assms"], ["proof (chain)\npicking this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w b =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w c", "show \"b = c\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w b =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w c\n\ngoal (1 subgoal):\n 1. b = c", "using group_ow_axioms"], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w b =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a \\<^bold>*\\<^sub>o\\<^sub>w c\n  group_ow U (\\<^bold>*\\<^sub>o\\<^sub>w) \\<^bold>1\\<^sub>o\\<^sub>w inverse\n\ngoal (1 subgoal):\n 1. b = c", "by (fastforce simp: group_ow.group_left_neutral)"], ["proof (state)\nthis:\n  b = c\n\ngoal (1 subgoal):\n 1. b = c \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w b = a \\<^bold>*\\<^sub>o\\<^sub>w c", "qed simp"], ["", "sublocale monoid_ow U \\<open>(\\<^bold>*\\<^sub>o\\<^sub>w)\\<close> \\<open>\\<^bold>1\\<^sub>o\\<^sub>w\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. monoid_ow U (\\<^bold>*\\<^sub>o\\<^sub>w) \\<^bold>1\\<^sub>o\\<^sub>w", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<^bold>1\\<^sub>o\\<^sub>w \\<in> U\n 2. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       \\<^bold>1\\<^sub>o\\<^sub>w \\<^bold>*\\<^sub>o\\<^sub>w a = a\n 3. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "show \"a \\<in> U \\<Longrightarrow> a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> U \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> U \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "assume \"a \\<in> U\""], ["proof (state)\nthis:\n  a \\<in> U\n\ngoal (1 subgoal):\n 1. a \\<in> U \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "with left_inverse[OF this]"], ["proof (chain)\npicking this:\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a = \\<^bold>1\\<^sub>o\\<^sub>w\n  a \\<in> U", "have \"inverse a \\<^bold>*\\<^sub>o\\<^sub>w (a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w) = inverse a \\<^bold>*\\<^sub>o\\<^sub>w a\""], ["proof (prove)\nusing this:\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a = \\<^bold>1\\<^sub>o\\<^sub>w\n  a \\<in> U\n\ngoal (1 subgoal):\n 1. inverse a \\<^bold>*\\<^sub>o\\<^sub>w\n    (a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w) =\n    inverse a \\<^bold>*\\<^sub>o\\<^sub>w a", "by (metis assoc group_left_neutral inverse_closed z_closed)"], ["proof (state)\nthis:\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w\n  (a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. a \\<in> U \\<Longrightarrow>\n    a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "with \\<open>a \\<in> U\\<close> z_closed"], ["proof (chain)\npicking this:\n  a \\<in> U\n  \\<^bold>1\\<^sub>o\\<^sub>w \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w\n  (a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a", "show \"a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  \\<^bold>1\\<^sub>o\\<^sub>w \\<in> U\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w\n  (a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w) =\n  inverse a \\<^bold>*\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a", "by (meson left_cancel f_closed inverse_closed)"], ["proof (state)\nthis:\n  a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?a \\<in> U \\<Longrightarrow>\n  ?a \\<^bold>*\\<^sub>o\\<^sub>w \\<^bold>1\\<^sub>o\\<^sub>w = ?a\n\ngoal (2 subgoals):\n 1. \\<^bold>1\\<^sub>o\\<^sub>w \\<in> U\n 2. \\<And>a.\n       a \\<in> U \\<Longrightarrow>\n       \\<^bold>1\\<^sub>o\\<^sub>w \\<^bold>*\\<^sub>o\\<^sub>w a = a", "qed (simp add: group_left_neutral)+"], ["", "lemma inverse_image[simp]: \"inverse ` U \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse ` U \\<subseteq> U", "by (simp add: image_subsetI)"], ["", "end"], ["", "lemma group_ow: \"group = group_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group = group_ow UNIV", "unfolding \n    group_def group_ow_def  group_axioms_def group_ow_axioms_def semigroup_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f z inverse.\n        semigroup_ow UNIV f \\<and>\n        (\\<forall>a. f z a = a) \\<and> (\\<forall>a. f (inverse a) a = z)) =\n    (\\<lambda>f z inverse.\n        semigroup_ow UNIV f \\<and>\n        (z \\<in> UNIV \\<and>\n         (\\<forall>a.\n             a \\<in> UNIV \\<longrightarrow> inverse a \\<in> UNIV)) \\<and>\n        (\\<forall>a. a \\<in> UNIV \\<longrightarrow> f z a = a) \\<and>\n        (\\<forall>a. a \\<in> UNIV \\<longrightarrow> f (inverse a) a = z))", "by simp"], ["", "locale uminus_ow =\n  fixes U :: \"'ag set\" and uminus :: \"'ag \\<Rightarrow> 'ag\" (\\<open>-\\<^sub>o\\<^sub>w _\\<close> [81] 80) \n  assumes uminus_closed: \"a \\<in> U \\<Longrightarrow> -\\<^sub>o\\<^sub>w a \\<in> U\"\nbegin"], ["", "notation uminus (\\<open>-\\<^sub>o\\<^sub>w _\\<close> [81] 80)"], ["", "lemma uminus_closed': \"uminus ` U \\<subseteq> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uminus ` U \\<subseteq> U", "by (auto simp: uminus_closed)"], ["", "lemma uminus_closed'': \"\\<forall>a\\<in>U. -\\<^sub>o\\<^sub>w a \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>U. -\\<^sub>o\\<^sub>w a \\<in> U", "by (simp add: uminus_closed)"], ["", "tts_register_sbts uminus | U"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Domainp AGA = (\\<lambda>x. x \\<in> U); bi_unique AGA;\n     right_total AGA\\<rbrakk>\n    \\<Longrightarrow> \\<exists>rcdt. rel_fun AGA AGA uminus rcdt", "by (rule tts_AB_transfer[OF uminus_closed'])"], ["", "end"], ["", "locale group_add_ow =\n  minus_ow U minus + uminus_ow U uminus + monoid_add_ow U plus zero\n  for U :: \"'ag set\" and minus plus zero uminus +\n  assumes left_inverse: \"a \\<in> U \\<Longrightarrow> (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\"\n    and add_inv_conv_diff: \"\\<lbrakk> a \\<in> U; b \\<in> U \\<rbrakk> \\<Longrightarrow> a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w b) = a -\\<^sub>o\\<^sub>w b\"\nbegin"], ["", "sublocale add: group_ow U \\<open>(+\\<^sub>o\\<^sub>w)\\<close> \\<open>0\\<^sub>o\\<^sub>w\\<close> uminus"], ["proof (prove)\ngoal (1 subgoal):\n 1. group_ow U (+\\<^sub>o\\<^sub>w) 0\\<^sub>o\\<^sub>w uminus", "by unfold_locales (auto simp: uminus_closed left_inverse)"], ["", "lemma inverse_unique:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w\"\n  shows \"-\\<^sub>o\\<^sub>w a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a = b", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a = b", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> U\n  b \\<in> U\n  a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w", "have \"(-\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w b = -\\<^sub>o\\<^sub>w a\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w\n\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n    -\\<^sub>o\\<^sub>w a", "by (metis add.assoc uminus_closed add.right_neutral_mow)"], ["proof (state)\nthis:\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n  -\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n  -\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a = b", "unfolding left_inverse[OF \\<open>a \\<in> U\\<close>] add.left_neutral_mow[OF \\<open>b \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  b = -\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a = b", "by simp"], ["proof (state)\nthis:\n  -\\<^sub>o\\<^sub>w a = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_neutral[simp]: \"-\\<^sub>o\\<^sub>w 0\\<^sub>o\\<^sub>w = 0\\<^sub>o\\<^sub>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w 0\\<^sub>o\\<^sub>w = 0\\<^sub>o\\<^sub>w", "by \n    (\n      rule inverse_unique[\n        OF zero_closed zero_closed add.left_neutral_mow[OF zero_closed]\n        ]                                     \n    )"], ["", "lemma inverse_inverse: \n  assumes \"a \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = a", "by \n    (\n      rule inverse_unique[\n        OF uminus_closed[OF assms] assms left_inverse[OF assms]\n      ]\n    )"], ["", "lemma right_inverse: \n  assumes \"a \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = 0\\<^sub>o\\<^sub>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> U", "have \"a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a)\""], ["proof (prove)\nusing this:\n  a \\<in> U\n\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a =\n    -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n    -\\<^sub>o\\<^sub>w a", "by (simp add: inverse_inverse)"], ["proof (state)\nthis:\n  a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a =\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "moreover"], ["proof (state)\nthis:\n  a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a =\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "have \"\\<dots> = 0\\<^sub>o\\<^sub>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n    -\\<^sub>o\\<^sub>w a =\n    0\\<^sub>o\\<^sub>w", "by (rule left_inverse[OF uminus_closed[OF assms]])"], ["proof (state)\nthis:\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a =\n  0\\<^sub>o\\<^sub>w\n\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "ultimately"], ["proof (chain)\npicking this:\n  a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a =\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a =\n  0\\<^sub>o\\<^sub>w", "show ?thesis"], ["proof (prove)\nusing this:\n  a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a =\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a\n  -\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w\n  -\\<^sub>o\\<^sub>w a =\n  0\\<^sub>o\\<^sub>w\n\ngoal (1 subgoal):\n 1. a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w", "by simp"], ["proof (state)\nthis:\n  a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale cancel_semigroup_add_ow U \\<open>(+\\<^sub>o\\<^sub>w)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cancel_semigroup_add_ow U (+\\<^sub>o\\<^sub>w)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U;\n        a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> b = c\n 2. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "fix a b c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U;\n        a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> b = c\n 2. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "assume \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\""], ["proof (state)\nthis:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U;\n        a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> b = c\n 2. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "from \\<open>a \\<in> U\\<close> \\<open>b \\<in> U\\<close> \\<open>c \\<in> U\\<close> this"], ["proof (chain)\npicking this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c", "have \n    \"((-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w b = ((-\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w a) +\\<^sub>o\\<^sub>w c\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\n\ngoal (1 subgoal):\n 1. -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n    -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w c", "by (auto simp: add.left_cancel)"], ["proof (state)\nthis:\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w c\n\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U;\n        a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c\\<rbrakk>\n       \\<Longrightarrow> b = c\n 2. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "thus \"b = c\""], ["proof (prove)\nusing this:\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b =\n  -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w c\n\ngoal (1 subgoal):\n 1. b = c", "unfolding\n      left_inverse[OF \\<open>a \\<in> U\\<close>]\n      add.left_neutral_mow[OF \\<open>b \\<in> U\\<close>] \n      add.left_neutral_mow[OF \\<open>c \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  b = c\n\ngoal (1 subgoal):\n 1. b = c", "by simp"], ["proof (state)\nthis:\n  b = c\n\ngoal (1 subgoal):\n 1. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "fix a b c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "assume \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\""], ["proof (state)\nthis:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "then"], ["proof (chain)\npicking this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a", "have \"b +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a)) = c +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a))\""], ["proof (prove)\nusing this:\n  a \\<in> U\n  b \\<in> U\n  c \\<in> U\n  b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\n\ngoal (1 subgoal):\n 1. b +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a) =\n    c +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a)", "by (metis add.assoc uminus_closed)"], ["proof (state)\nthis:\n  b +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a) =\n  c +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a)\n\ngoal (1 subgoal):\n 1. \\<And>b a c.\n       \\<lbrakk>b \\<in> U; a \\<in> U; c \\<in> U;\n        b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a\\<rbrakk>\n       \\<Longrightarrow> b = c", "thus \"b = c\""], ["proof (prove)\nusing this:\n  b +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a) =\n  c +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a)\n\ngoal (1 subgoal):\n 1. b = c", "unfolding \n      right_inverse[OF \\<open>a \\<in> U\\<close>]\n      add.left_neutral_mow[OF \\<open>b \\<in> U\\<close>] \n      add.right_neutral_mow[OF \\<open>c \\<in> U\\<close>]"], ["proof (prove)\nusing this:\n  b +\\<^sub>o\\<^sub>w 0\\<^sub>o\\<^sub>w = c\n\ngoal (1 subgoal):\n 1. b = c", "by (simp add: \\<open>b \\<in> U\\<close>)"], ["proof (state)\nthis:\n  b = c\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma group_add_ow: \"class.group_add = group_add_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.group_add = group_add_ow UNIV", "unfolding \n    class.group_add_def group_add_ow_def\n    class.group_add_axioms_def group_add_ow_axioms_def\n    minus_ow_def uminus_ow_def\n    monoid_add_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>minus plus zero uminus.\n        monoid_add_ow UNIV plus zero \\<and>\n        (\\<forall>a. plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b. plus a (uminus b) = minus a b)) =\n    (\\<lambda>minus plus zero uminus.\n        ((\\<forall>a b.\n             a \\<in> UNIV \\<longrightarrow>\n             b \\<in> UNIV \\<longrightarrow> minus a b \\<in> UNIV) \\<and>\n         (\\<forall>a.\n             a \\<in> UNIV \\<longrightarrow> uminus a \\<in> UNIV)) \\<and>\n        monoid_add_ow UNIV plus zero \\<and>\n        (\\<forall>a.\n            a \\<in> UNIV \\<longrightarrow> plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b.\n            a \\<in> UNIV \\<longrightarrow>\n            b \\<in> UNIV \\<longrightarrow> plus a (uminus b) = minus a b))", "by simp"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma group_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \"((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=)) \n    (group_ow (Collect (Domainp A))) group\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "let ?P = \"((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "let ?group_ow = \"group_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "have \n    \"?P \n      (\\<lambda>f z inv. ?group_ow f z inv) \n      (\\<lambda>f z inv. z \\<in> UNIV \\<and> (\\<forall>x\\<in>UNIV. inv x \\<in> UNIV) \\<and> group f z inv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A)))\n     (\\<lambda>f z inv.\n         z \\<in> UNIV \\<and>\n         (\\<forall>x\\<in>UNIV. inv x \\<in> UNIV) \\<and> group f z inv)", "unfolding group_ow_def group_def group_ow_axioms_def group_axioms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (\\<lambda>f z inv.\n         semigroup_ow (Collect (Domainp A)) f \\<and>\n         (z \\<in> Collect (Domainp A) \\<and>\n          (\\<forall>a.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              inv a \\<in> Collect (Domainp A))) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> f z a = a) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow> f (inv a) a = z))\n     (\\<lambda>f z inv.\n         z \\<in> UNIV \\<and>\n         (\\<forall>x\\<in>UNIV. inv x \\<in> UNIV) \\<and>\n         semigroup f \\<and>\n         (\\<forall>a. f z a = a) \\<and> (\\<forall>a. f (inv a) a = z))", "apply transfer_prover_start"], ["proof (prove)\ngoal (16 subgoals):\n 1. Transfer.Rel (A ===> A ===> ?Rt30) ?an30 (=)\n 2. Transfer.Rel ((A ===> ?Rt30) ===> ?Rr30) ?am30 All\n 3. Transfer.Rel (A ===> A ===> ?Rs30) ?al30 (=)\n 4. Transfer.Rel ((A ===> ?Rs30) ===> ?Rq30) ?ak30 All\n 5. Transfer.Rel (?Rq30 ===> ?Rr30 ===> ?Rp30) ?aj30 (\\<and>)\n 6. Transfer.Rel ((A ===> A ===> A) ===> ?Ro30) ?ai30 semigroup\n 7. Transfer.Rel (?Ro30 ===> ?Rp30 ===> ?Rk30) ?ah30 (\\<and>)\n 8. Transfer.Rel ?Rn30 ?ag30 UNIV\n 9. Transfer.Rel (A ===> ?Rn30 ===> ?Rm30) ?af30 (\\<in>)\n 10. Transfer.Rel ?Rl30 ?ae30 UNIV\nA total of 16 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f z inv.\n        semigroup_ow (Collect (Domainp A)) f \\<and>\n        (z \\<in> Collect (Domainp A) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             inv a \\<in> Collect (Domainp A))) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow> f z a = a) \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            f (inv a) a = z)) =\n    (\\<lambda>f z inv.\n        z \\<in> Collect (Domainp A) \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            inv x \\<in> Collect (Domainp A)) \\<and>\n        semigroup_ow (Collect (Domainp A)) f \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). f z a = a) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). f (inv a) a = z))", "by blast"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_ow (Collect (Domainp A)))\n   (\\<lambda>f z inv.\n       z \\<in> UNIV \\<and>\n       (\\<forall>x\\<in>UNIV. inv x \\<in> UNIV) \\<and> group f z inv)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_ow (Collect (Domainp A)))\n   (\\<lambda>f z inv.\n       z \\<in> UNIV \\<and>\n       (\\<forall>x\\<in>UNIV. inv x \\<in> UNIV) \\<and> group f z inv)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_ow (Collect (Domainp A))) group", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_ow (Collect (Domainp A))) group\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\"\n  shows \n    \"((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=)) \n      (group_add_ow (Collect (Domainp A))) class.group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "let ?P = \n    \"((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "let ?group_add_ow = \"group_add_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "have \n    \"?P \n      (\\<lambda>minus plus zero uminus. ?group_add_ow minus plus zero uminus) \n      (\n        \\<lambda>fi f z inv_f. \n          (\\<forall>x\\<in>UNIV. \\<forall>y\\<in>UNIV. fi x y \\<in> UNIV) \\<and>\n          (\\<forall>x\\<in>UNIV. inv_f x \\<in> UNIV) \\<and>  \n          class.group_add fi f z inv_f\n      )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A)))\n     (\\<lambda>fi f z inv_f.\n         (\\<forall>x\\<in>UNIV.\n             \\<forall>y\\<in>UNIV. fi x y \\<in> UNIV) \\<and>\n         (\\<forall>x\\<in>UNIV. inv_f x \\<in> UNIV) \\<and>\n         class.group_add fi f z inv_f)", "unfolding \n      group_add_ow_def class.group_add_def\n      group_add_ow_axioms_def class.group_add_axioms_def\n      minus_ow_def uminus_ow_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (\\<lambda>minus plus zero uminus.\n         ((\\<forall>a b.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              b \\<in> Collect (Domainp A) \\<longrightarrow>\n              minus a b \\<in> Collect (Domainp A)) \\<and>\n          (\\<forall>a.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              uminus a \\<in> Collect (Domainp A))) \\<and>\n         monoid_add_ow (Collect (Domainp A)) plus zero \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             plus (uminus a) a = zero) \\<and>\n         (\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             plus a (uminus b) = minus a b))\n     (\\<lambda>fi f z inv_f.\n         (\\<forall>x\\<in>UNIV.\n             \\<forall>y\\<in>UNIV. fi x y \\<in> UNIV) \\<and>\n         (\\<forall>x\\<in>UNIV. inv_f x \\<in> UNIV) \\<and>\n         class.monoid_add f z \\<and>\n         (\\<forall>a. f (inv_f a) a = z) \\<and>\n         (\\<forall>a b. f a (inv_f b) = fi a b))", "apply transfer_prover_start"], ["proof (prove)\ngoal (21 subgoals):\n 1. Transfer.Rel (A ===> A ===> ?Rz41) ?as41 (=)\n 2. Transfer.Rel ((A ===> ?Rz41) ===> ?Ry41) ?ar41 All\n 3. Transfer.Rel ((A ===> ?Ry41) ===> ?Rw41) ?aq41 All\n 4. Transfer.Rel (A ===> A ===> ?Rx41) ?ap41 (=)\n 5. Transfer.Rel ((A ===> ?Rx41) ===> ?Rv41) ?ao41 All\n 6. Transfer.Rel (?Rv41 ===> ?Rw41 ===> ?Ru41) ?an41 (\\<and>)\n 7. Transfer.Rel ((A ===> A ===> A) ===> A ===> ?Rt41) ?am41\n     class.monoid_add\n 8. Transfer.Rel (?Rt41 ===> ?Ru41 ===> ?Rp41) ?al41 (\\<and>)\n 9. Transfer.Rel ?Rs41 ?ak41 UNIV\n 10. Transfer.Rel (A ===> ?Rs41 ===> ?Rr41) ?aj41 (\\<in>)\nA total of 21 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>minus plus zero uminus.\n        ((\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             minus a b \\<in> Collect (Domainp A)) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             uminus a \\<in> Collect (Domainp A))) \\<and>\n        monoid_add_ow (Collect (Domainp A)) plus zero \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            plus a (uminus b) = minus a b)) =\n    (\\<lambda>fi f z inv_f.\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               fi x y \\<in> Collect (Domainp A)) \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            inv_f x \\<in> Collect (Domainp A)) \\<and>\n        monoid_add_ow (Collect (Domainp A)) f z \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A). f (inv_f a) a = z) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A). f a (inv_f b) = fi a b))", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_add_ow (Collect (Domainp A)))\n   (\\<lambda>fi f z inv_f.\n       (\\<forall>x\\<in>UNIV. \\<forall>y\\<in>UNIV. fi x y \\<in> UNIV) \\<and>\n       (\\<forall>x\\<in>UNIV. inv_f x \\<in> UNIV) \\<and>\n       class.group_add fi f z inv_f)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_add_ow (Collect (Domainp A)))\n   (\\<lambda>fi f z inv_f.\n       (\\<forall>x\\<in>UNIV. \\<forall>y\\<in>UNIV. fi x y \\<in> UNIV) \\<and>\n       (\\<forall>x\\<in>UNIV. inv_f x \\<in> UNIV) \\<and>\n       class.group_add fi f z inv_f)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n     (group_add_ow (Collect (Domainp A))) class.group_add", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> (A ===> A ===> A) ===> A ===> (A ===> A) ===> (=))\n   (group_add_ow (Collect (Domainp A))) class.group_add\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context group_ow\nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting group_ow_axioms and not_empty\n  applying [OF f_closed' z_closed inverse_closed'']\nbegin"], ["", "tts_lemma inverse_neutral: \"inverse \\<^bold>1\\<^sub>o\\<^sub>w = \\<^bold>1\\<^sub>o\\<^sub>w\"\n  is group.inverse_neutral"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma inverse_inverse:\n  assumes \"a \\<in> U\"\n  shows \"inverse (inverse a) = a\"\n    is group.inverse_inverse"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma right_inverse:\n  assumes \"a \\<in> U\"\n  shows \"a \\<^bold>*\\<^sub>o\\<^sub>w inverse a = \\<^bold>1\\<^sub>o\\<^sub>w\"\n    is group.right_inverse"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma inverse_distrib_swap:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"inverse (a \\<^bold>*\\<^sub>o\\<^sub>w b) = inverse b \\<^bold>*\\<^sub>o\\<^sub>w inverse a\"\n    is group.inverse_distrib_swap"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma right_cancel:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"c \\<in> U\"\n  shows \"(b \\<^bold>*\\<^sub>o\\<^sub>w a = c \\<^bold>*\\<^sub>o\\<^sub>w a) = (b = c)\"\n    is group.right_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma inverse_unique:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a \\<^bold>*\\<^sub>o\\<^sub>w b = \\<^bold>1\\<^sub>o\\<^sub>w\"\n  shows \"inverse a = b\"\n    is group.inverse_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "context group_add_ow\nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting group_add_ow_axioms and zero.not_empty\n  applying [OF minus_closed' plus_closed' zero_closed add.inverse_closed'']\nbegin"], ["", "tts_lemma diff_0:\n  assumes \"a \\<in> U\"\n  shows \"0\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = -\\<^sub>o\\<^sub>w a\"\n    is group_add_class.diff_0"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_0_right:\n  assumes \"a \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w 0\\<^sub>o\\<^sub>w = a\"\n    is group_add_class.diff_0_right"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_self:\n  assumes \"a \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\"\n    is group_add_class.diff_self"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma group_left_neutral:\n  assumes \"a \\<in> U\"\n  shows \"0\\<^sub>o\\<^sub>w +\\<^sub>o\\<^sub>w a = a\"\n    is group_add_class.add.group_left_neutral"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_minus:\n  assumes \"a \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a) = a\"\n  is group_add_class.minus_minus"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma right_minus:\n  assumes \"a \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\"\n  is group_add_class.right_minus"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma left_minus:\n  assumes \"a \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\"\n    is group_add_class.left_minus"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_diff_cancel:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w b -\\<^sub>o\\<^sub>w b = a\"\n  is group_add_class.add_diff_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_add_cancel:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w b +\\<^sub>o\\<^sub>w b = a\"\n    is group_add_class.diff_add_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_conv_add_uminus:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w b\"\n    is group_add_class.diff_conv_add_uminus"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_minus_eq_add:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w b\"\n    is group_add_class.diff_minus_eq_add"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_uminus_conv_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w b = a -\\<^sub>o\\<^sub>w b\"\n    is group_add_class.add_uminus_conv_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_diff_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w (a -\\<^sub>o\\<^sub>w b) = b -\\<^sub>o\\<^sub>w a\"\n    is group_add_class.minus_diff_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_minus_cancel:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b) = b\"\n    is group_add_class.add_minus_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_add_cancel:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w b) = b\"\n    is group_add_class.minus_add_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neg_0_equal_iff_equal:\n  assumes \"a \\<in> U\"\n  shows \"(0\\<^sub>o\\<^sub>w = -\\<^sub>o\\<^sub>w a) = (0\\<^sub>o\\<^sub>w = a)\"\n    is group_add_class.neg_0_equal_iff_equal"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neg_equal_0_iff_equal:\n  assumes \"a \\<in> U\"\n  shows \"(-\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w) = (a = 0\\<^sub>o\\<^sub>w)\"\n    is group_add_class.neg_equal_0_iff_equal"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_iff_diff_eq_0:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a = b) = (a -\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w)\"\n    is group_add_class.eq_iff_diff_eq_0"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma equation_minus_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a = -\\<^sub>o\\<^sub>w b) = (b = -\\<^sub>o\\<^sub>w a)\"\n    is group_add_class.equation_minus_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_equation_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(-\\<^sub>o\\<^sub>w a = b) = (-\\<^sub>o\\<^sub>w b = a)\"\n    is group_add_class.minus_equation_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neg_equal_iff_equal:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(-\\<^sub>o\\<^sub>w a = -\\<^sub>o\\<^sub>w b) = (a = b)\"\n    is group_add_class.neg_equal_iff_equal"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma right_minus_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a -\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w) = (a = b)\"\n    is group_add_class.right_minus_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_add:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w (a +\\<^sub>o\\<^sub>w b) = -\\<^sub>o\\<^sub>w b +\\<^sub>o\\<^sub>w -\\<^sub>o\\<^sub>w a\"\n    is group_add_class.minus_add"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_neg_iff_add_eq_0:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a = -\\<^sub>o\\<^sub>w b) = (a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w)\"\n    is group_add_class.eq_neg_iff_add_eq_0"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma neg_eq_iff_add_eq_0:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(-\\<^sub>o\\<^sub>w a = b) = (a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w)\"\n    is group_add_class.neg_eq_iff_add_eq_0"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_eq_0_iff2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w) = (a = -\\<^sub>o\\<^sub>w b)\"\n    is group_add_class.add_eq_0_iff2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_eq_0_iff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"(a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w) = (b = -\\<^sub>o\\<^sub>w a)\"\n    is group_add_class.add_eq_0_iff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_diff_eq2:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w (b -\\<^sub>o\\<^sub>w c) = a +\\<^sub>o\\<^sub>w c -\\<^sub>o\\<^sub>w b\"\n    is group_add_class.diff_diff_eq2"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_add_eq_diff_diff_swap:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w (b +\\<^sub>o\\<^sub>w c) = a -\\<^sub>o\\<^sub>w c -\\<^sub>o\\<^sub>w b\"\n    is group_add_class.diff_add_eq_diff_diff_swap"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma add_diff_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"a +\\<^sub>o\\<^sub>w (b -\\<^sub>o\\<^sub>w c) = a +\\<^sub>o\\<^sub>w b -\\<^sub>o\\<^sub>w c\"\n    is group_add_class.add_diff_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma eq_diff_eq:\n  assumes \"a \\<in> U\" and \"c \\<in> U\" and \"b \\<in> U\"\n  shows \"(a = c -\\<^sub>o\\<^sub>w b) = (a +\\<^sub>o\\<^sub>w b = c)\"\n    is group_add_class.eq_diff_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_eq_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"(a -\\<^sub>o\\<^sub>w b = c) = (a = c +\\<^sub>o\\<^sub>w b)\"\n    is group_add_class.diff_eq_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma left_cancel:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"(a +\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w c) = (b = c)\"\n    is group_add_class.add.left_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma right_cancel:\n  assumes \"b \\<in> U\" and \"a \\<in> U\" and \"c \\<in> U\"\n  shows \"(b +\\<^sub>o\\<^sub>w a = c +\\<^sub>o\\<^sub>w a) = (b = c)\"\n    is group_add_class.add.right_cancel"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma minus_unique:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"a +\\<^sub>o\\<^sub>w b = 0\\<^sub>o\\<^sub>w\"\n  shows \"-\\<^sub>o\\<^sub>w a = b\"\n    is group_add_class.minus_unique"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_eq_diff_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\" and \"d \\<in> U\" and \"a -\\<^sub>o\\<^sub>w b = c -\\<^sub>o\\<^sub>w d\"\n  shows \"(a = b) = (c = d)\"\n    is group_add_class.diff_eq_diff_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "subsection\\<open>Abelian groups\\<close>"], ["", "subsubsection\\<open>Definitions and common properties\\<close>"], ["", "locale ab_group_add_ow =\n  minus_ow U minus + uminus_ow U uminus + comm_monoid_add_ow U plus zero\n  for U :: \"'ag set\" and plus zero minus uminus +\n  assumes ab_left_minus: \"a \\<in> U \\<Longrightarrow> -\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w a = 0\\<^sub>o\\<^sub>w\"\n  assumes ab_diff_conv_add_uminus: \n    \"\\<lbrakk> a \\<in> U; b \\<in> U \\<rbrakk> \\<Longrightarrow> a -\\<^sub>o\\<^sub>w b = a +\\<^sub>o\\<^sub>w (-\\<^sub>o\\<^sub>w b)\"\nbegin"], ["", "sublocale group_add_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. group_add_ow U (-\\<^sub>o\\<^sub>w) (+\\<^sub>o\\<^sub>w) 0\\<^sub>o\\<^sub>w\n     uminus", "by unfold_locales (simp_all add: ab_left_minus ab_diff_conv_add_uminus)"], ["", "sublocale cancel_comm_monoid_add_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. cancel_comm_monoid_add_ow U (+\\<^sub>o\\<^sub>w) (-\\<^sub>o\\<^sub>w)\n     0\\<^sub>o\\<^sub>w", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> U; b \\<in> U\\<rbrakk>\n       \\<Longrightarrow> a +\\<^sub>o\\<^sub>w b -\\<^sub>o\\<^sub>w a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U\\<rbrakk>\n       \\<Longrightarrow> a -\\<^sub>o\\<^sub>w b -\\<^sub>o\\<^sub>w c =\n                         a -\\<^sub>o\\<^sub>w (b +\\<^sub>o\\<^sub>w c)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U\\<rbrakk>\n    \\<Longrightarrow> a_ +\\<^sub>o\\<^sub>w b_ -\\<^sub>o\\<^sub>w a_ = b_", "using add.commute"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> U; ?b \\<in> U\\<rbrakk>\n  \\<Longrightarrow> ?a +\\<^sub>o\\<^sub>w ?b = ?b +\\<^sub>o\\<^sub>w ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U\\<rbrakk>\n    \\<Longrightarrow> a_ +\\<^sub>o\\<^sub>w b_ -\\<^sub>o\\<^sub>w a_ = b_", "by (fastforce simp: add_diff_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> U; b \\<in> U; c \\<in> U\\<rbrakk>\n       \\<Longrightarrow> a -\\<^sub>o\\<^sub>w b -\\<^sub>o\\<^sub>w c =\n                         a -\\<^sub>o\\<^sub>w (b +\\<^sub>o\\<^sub>w c)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a_ \\<in> U; b_ \\<in> U; c_ \\<in> U\\<rbrakk>\n    \\<Longrightarrow> a_ -\\<^sub>o\\<^sub>w b_ -\\<^sub>o\\<^sub>w c_ =\n                      a_ -\\<^sub>o\\<^sub>w (b_ +\\<^sub>o\\<^sub>w c_)", "by (metis add.commute diff_add_eq_diff_diff_swap)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma ab_group_add_ow: \"class.ab_group_add = ab_group_add_ow UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.ab_group_add = ab_group_add_ow UNIV", "unfolding \n  class.ab_group_add_def ab_group_add_ow_def\n  class.ab_group_add_axioms_def ab_group_add_ow_axioms_def\n  minus_ow_def uminus_ow_def\n  comm_monoid_add_ow"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>plus zero minus uminus.\n        comm_monoid_add_ow UNIV plus zero \\<and>\n        (\\<forall>a. plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b. minus a b = plus a (uminus b))) =\n    (\\<lambda>plus zero minus uminus.\n        ((\\<forall>a b.\n             a \\<in> UNIV \\<longrightarrow>\n             b \\<in> UNIV \\<longrightarrow> minus a b \\<in> UNIV) \\<and>\n         (\\<forall>a.\n             a \\<in> UNIV \\<longrightarrow> uminus a \\<in> UNIV)) \\<and>\n        comm_monoid_add_ow UNIV plus zero \\<and>\n        (\\<forall>a.\n            a \\<in> UNIV \\<longrightarrow> plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b.\n            a \\<in> UNIV \\<longrightarrow>\n            b \\<in> UNIV \\<longrightarrow> minus a b = plus a (uminus b)))", "by simp"], ["", "lemma ab_group_add_ow_UNIV_axioms: \n  \"ab_group_add_ow (UNIV::'a::ab_group_add set) (+) 0 (-) uminus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ab_group_add_ow UNIV (+) (0::'a) (-) uminus", "by (fold ab_group_add_ow) (rule ab_group_add_class.ab_group_add_axioms)"], ["", "subsubsection\\<open>Transfer rules\\<close>"], ["", "context\n  includes lifting_syntax\nbegin"], ["", "lemma ab_group_add_transfer[transfer_rule]:\n  assumes [transfer_rule]: \"bi_unique A\" \"right_total A\" \n  shows \n    \"((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n      (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "let ?P = \n    \"((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "let ?ab_group_add_ow = \"ab_group_add_ow (Collect (Domainp A))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "have \n    \"?P \n      ?ab_group_add_ow \n      (\n        \\<lambda>plus zero minus uminus. \n          (\\<forall>x\\<in>UNIV. \\<forall>y\\<in>UNIV. minus x y \\<in> UNIV) \\<and>\n          (\\<forall>x\\<in>UNIV. uminus x \\<in> UNIV) \\<and>  \n          class.ab_group_add plus zero minus uminus\n      )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A)))\n     (\\<lambda>plus zero minus uminus.\n         (\\<forall>x\\<in>UNIV.\n             \\<forall>y\\<in>UNIV. minus x y \\<in> UNIV) \\<and>\n         (\\<forall>x\\<in>UNIV. uminus x \\<in> UNIV) \\<and>\n         class.ab_group_add plus zero minus uminus)", "unfolding \n      ab_group_add_ow_def class.ab_group_add_def\n      ab_group_add_ow_axioms_def class.ab_group_add_axioms_def\n      minus_ow_def uminus_ow_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (\\<lambda>plus zero minus uminus.\n         ((\\<forall>a b.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              b \\<in> Collect (Domainp A) \\<longrightarrow>\n              minus a b \\<in> Collect (Domainp A)) \\<and>\n          (\\<forall>a.\n              a \\<in> Collect (Domainp A) \\<longrightarrow>\n              uminus a \\<in> Collect (Domainp A))) \\<and>\n         comm_monoid_add_ow (Collect (Domainp A)) plus zero \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             plus (uminus a) a = zero) \\<and>\n         (\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             minus a b = plus a (uminus b)))\n     (\\<lambda>plus zero minus uminus.\n         (\\<forall>x\\<in>UNIV.\n             \\<forall>y\\<in>UNIV. minus x y \\<in> UNIV) \\<and>\n         (\\<forall>x\\<in>UNIV. uminus x \\<in> UNIV) \\<and>\n         class.comm_monoid_add plus zero \\<and>\n         (\\<forall>a. plus (uminus a) a = zero) \\<and>\n         (\\<forall>a b. minus a b = plus a (uminus b)))", "apply transfer_prover_start"], ["proof (prove)\ngoal (21 subgoals):\n 1. Transfer.Rel (A ===> A ===> ?Rz41) ?as41 (=)\n 2. Transfer.Rel ((A ===> ?Rz41) ===> ?Ry41) ?ar41 All\n 3. Transfer.Rel ((A ===> ?Ry41) ===> ?Rw41) ?aq41 All\n 4. Transfer.Rel (A ===> A ===> ?Rx41) ?ap41 (=)\n 5. Transfer.Rel ((A ===> ?Rx41) ===> ?Rv41) ?ao41 All\n 6. Transfer.Rel (?Rv41 ===> ?Rw41 ===> ?Ru41) ?an41 (\\<and>)\n 7. Transfer.Rel ((A ===> A ===> A) ===> A ===> ?Rt41) ?am41\n     class.comm_monoid_add\n 8. Transfer.Rel (?Rt41 ===> ?Ru41 ===> ?Rp41) ?al41 (\\<and>)\n 9. Transfer.Rel ?Rs41 ?ak41 UNIV\n 10. Transfer.Rel (A ===> ?Rs41 ===> ?Rr41) ?aj41 (\\<in>)\nA total of 21 subgoals...", "apply transfer_step+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>plus zero minus uminus.\n        ((\\<forall>a b.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             b \\<in> Collect (Domainp A) \\<longrightarrow>\n             minus a b \\<in> Collect (Domainp A)) \\<and>\n         (\\<forall>a.\n             a \\<in> Collect (Domainp A) \\<longrightarrow>\n             uminus a \\<in> Collect (Domainp A))) \\<and>\n        comm_monoid_add_ow (Collect (Domainp A)) plus zero \\<and>\n        (\\<forall>a.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            plus (uminus a) a = zero) \\<and>\n        (\\<forall>a b.\n            a \\<in> Collect (Domainp A) \\<longrightarrow>\n            b \\<in> Collect (Domainp A) \\<longrightarrow>\n            minus a b = plus a (uminus b))) =\n    (\\<lambda>plus zero minus uminus.\n        (\\<forall>x\\<in>Collect (Domainp A).\n            \\<forall>y\\<in>Collect (Domainp A).\n               minus x y \\<in> Collect (Domainp A)) \\<and>\n        (\\<forall>x\\<in>Collect (Domainp A).\n            uminus x \\<in> Collect (Domainp A)) \\<and>\n        comm_monoid_add_ow (Collect (Domainp A)) plus zero \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            plus (uminus a) a = zero) \\<and>\n        (\\<forall>a\\<in>Collect (Domainp A).\n            \\<forall>b\\<in>Collect (Domainp A).\n               minus a b = plus a (uminus b)))", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n   (ab_group_add_ow (Collect (Domainp A)))\n   (\\<lambda>plus zero minus uminus.\n       (\\<forall>x\\<in>UNIV.\n           \\<forall>y\\<in>UNIV. minus x y \\<in> UNIV) \\<and>\n       (\\<forall>x\\<in>UNIV. uminus x \\<in> UNIV) \\<and>\n       class.ab_group_add plus zero minus uminus)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n   (ab_group_add_ow (Collect (Domainp A)))\n   (\\<lambda>plus zero minus uminus.\n       (\\<forall>x\\<in>UNIV.\n           \\<forall>y\\<in>UNIV. minus x y \\<in> UNIV) \\<and>\n       (\\<forall>x\\<in>UNIV. uminus x \\<in> UNIV) \\<and>\n       class.ab_group_add plus zero minus uminus)\n\ngoal (1 subgoal):\n 1. ((A ===> A ===> A) ===>\n     A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n     (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add", "by simp"], ["proof (state)\nthis:\n  ((A ===> A ===> A) ===> A ===> (A ===> A ===> A) ===> (A ===> A) ===> (=))\n   (ab_group_add_ow (Collect (Domainp A))) class.ab_group_add\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection\\<open>Relativization\\<close>"], ["", "context ab_group_add_ow\nbegin"], ["", "tts_context\n  tts: (?'a to U)\n  rewriting ctr_simps\n  substituting ab_group_add_ow_axioms and zero.not_empty\n  applying [OF plus_closed' zero_closed minus_closed' add.inverse_closed'']\nbegin"], ["", "tts_lemma uminus_add_conv_diff:\n  assumes \"a \\<in> U\" and \"b \\<in> U\"\n  shows \"-\\<^sub>o\\<^sub>w a +\\<^sub>o\\<^sub>w b = b -\\<^sub>o\\<^sub>w a\"\n    is ab_group_add_class.uminus_add_conv_diff"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "tts_lemma diff_add_eq:\n  assumes \"a \\<in> U\" and \"b \\<in> U\" and \"c \\<in> U\"\n  shows \"a -\\<^sub>o\\<^sub>w b +\\<^sub>o\\<^sub>w c = a +\\<^sub>o\\<^sub>w c -\\<^sub>o\\<^sub>w b\"\n    is ab_group_add_class.diff_add_eq"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"], ["", "end"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}