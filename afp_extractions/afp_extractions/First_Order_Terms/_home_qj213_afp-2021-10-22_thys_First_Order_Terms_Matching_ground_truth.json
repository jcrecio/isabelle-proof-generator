{"file_name": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms/Matching.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms", "problem_names": ["lemma match_term_list_Some_matchrel:\n  assumes \"match_term_list P \\<sigma> = Some \\<tau>\"\n  shows \"((mset P, \\<sigma>), ({#}, \\<tau>)) \\<in> matchrel\\<^sup>*\"", "lemma match_term_list_None:\n  assumes \"match_term_list P \\<sigma> = None\"\n  shows \"matchers_map \\<sigma> \\<inter> matchers (set P) = {}\"", "lemma match_list_sound:\n  assumes \"match_list d P = Some \\<sigma>\"\n  shows \"\\<sigma> \\<in> matchers (set P)\"", "lemma match_list_matches:\n  assumes \"match_list d P = Some \\<sigma>\"\n  shows \"\\<And>p t. (p, t) \\<in> set P \\<Longrightarrow> p \\<cdot> \\<sigma> = t\"", "lemma match_list_complete:\n  assumes \"match_list d P = None\"\n  shows \"matchers (set P) = {}\"", "lemma match_list_None_conv:\n  \"match_list d P = None \\<longleftrightarrow> matchers (set P) = {}\"", "lemma match_sound:\n  assumes \"match t p = Some \\<sigma>\"\n  shows \"\\<sigma> \\<in> matchers {(p, t)}\"", "lemma match_matches:\n  assumes \"match t p = Some \\<sigma>\"\n  shows \"p \\<cdot> \\<sigma> = t\"", "lemma match_complete:\n  assumes \"match t p = None\"\n  shows \"matchers {(p, t)} = {}\"", "lemma matches_iff:\n  \"matches t p \\<longleftrightarrow> (\\<exists>\\<sigma>. p \\<cdot> \\<sigma> = t)\"", "lemma match_complete':\n  assumes \"p \\<cdot> \\<sigma> = t\"\n  shows \"\\<exists>\\<tau>. match t p = Some \\<tau> \\<and> (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)\"", "lemma match_list_complete':\n  assumes \"\\<And>s t. (s, t) \\<in> set P \\<Longrightarrow> s \\<cdot> \\<sigma> = t\"\n  shows \"\\<exists>\\<tau>. match_list d P = Some \\<tau> \\<and> (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)\""], "translations": [["", "lemma match_term_list_Some_matchrel:\n  assumes \"match_term_list P \\<sigma> = Some \\<tau>\"\n  shows \"((mset P, \\<sigma>), ({#}, \\<tau>)) \\<in> matchrel\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((mset P, \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*", "using assms"], ["proof (prove)\nusing this:\n  match_term_list P \\<sigma> = Some \\<tau>\n\ngoal (1 subgoal):\n 1. ((mset P, \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*", "proof (induction P \\<sigma> rule: match_term_list.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) =\n                 Some \\<tau>\\<rbrakk>\n                \\<Longrightarrow> ((mset P, \\<sigma>(x \\<mapsto> t)), {#},\n                                   \\<tau>)\n                                  \\<in> matchrel\\<^sup>*;\n        match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "case (2 x t P \\<sigma>)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n   match_term_list P (\\<sigma>(x \\<mapsto> t)) = Some \\<tau>\\<rbrakk>\n  \\<Longrightarrow> ((mset P, \\<sigma>(x \\<mapsto> t)), {#}, \\<tau>)\n                    \\<in> matchrel\\<^sup>*\n  match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) =\n                 Some \\<tau>\\<rbrakk>\n                \\<Longrightarrow> ((mset P, \\<sigma>(x \\<mapsto> t)), {#},\n                                   \\<tau>)\n                                  \\<in> matchrel\\<^sup>*;\n        match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "from \"2.prems\""], ["proof (chain)\npicking this:\n  match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>", "have *: \"\\<sigma> x = None \\<or> \\<sigma> x = Some t\"\n    and **: \"match_term_list P (\\<sigma> (x \\<mapsto> t)) = Some \\<tau>\""], ["proof (prove)\nusing this:\n  match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<sigma> x = None \\<or> \\<sigma> x = Some t &&&\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = Some \\<tau>", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<sigma> x = None \\<or> \\<sigma> x = Some t\n  match_term_list P (\\<sigma>(x \\<mapsto> t)) = Some \\<tau>\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) =\n                 Some \\<tau>\\<rbrakk>\n                \\<Longrightarrow> ((mset P, \\<sigma>(x \\<mapsto> t)), {#},\n                                   \\<tau>)\n                                  \\<in> matchrel\\<^sup>*;\n        match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "from MATCH1.Var [of \\<sigma> x t \"mset P\", OF *]"], ["proof (chain)\npicking this:\n  MATCH1 (mset P + {#(Var x, t)#}, \\<sigma>)\n   (mset P, \\<sigma>(x \\<mapsto> t))", "have \"((mset ((Var x, t) # P), \\<sigma>), (mset P, \\<sigma> (x \\<mapsto> t))) \\<in> matchrel\\<^sup>*\""], ["proof (prove)\nusing this:\n  MATCH1 (mset P + {#(Var x, t)#}, \\<sigma>)\n   (mset P, \\<sigma>(x \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. ((mset ((Var x, t) # P), \\<sigma>), mset P, \\<sigma>(x \\<mapsto> t))\n    \\<in> matchrel\\<^sup>*", "by (simp add: MATCH1_matchrel_conv)"], ["proof (state)\nthis:\n  ((mset ((Var x, t) # P), \\<sigma>), mset P, \\<sigma>(x \\<mapsto> t))\n  \\<in> matchrel\\<^sup>*\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) =\n                 Some \\<tau>\\<rbrakk>\n                \\<Longrightarrow> ((mset P, \\<sigma>(x \\<mapsto> t)), {#},\n                                   \\<tau>)\n                                  \\<in> matchrel\\<^sup>*;\n        match_term_list ((Var x, t) # P) \\<sigma> = Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "with \"2.IH\" [OF * **]"], ["proof (chain)\npicking this:\n  ((mset P, \\<sigma>(x \\<mapsto> t)), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n  ((mset ((Var x, t) # P), \\<sigma>), mset P, \\<sigma>(x \\<mapsto> t))\n  \\<in> matchrel\\<^sup>*", "show ?case"], ["proof (prove)\nusing this:\n  ((mset P, \\<sigma>(x \\<mapsto> t)), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n  ((mset ((Var x, t) # P), \\<sigma>), mset P, \\<sigma>(x \\<mapsto> t))\n  \\<in> matchrel\\<^sup>*\n\ngoal (1 subgoal):\n 1. ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*", "by (blast dest: rtrancl_trans)"], ["proof (state)\nthis:\n  ((mset ((Var x, t) # P), \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "case (3 f ss g ts P \\<sigma>)"], ["proof (state)\nthis:\n  \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some ?x2.0;\n   match_term_list (?x2.0 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n  \\<Longrightarrow> ((mset (?x2.0 @ P), \\<sigma>), {#}, \\<tau>)\n                    \\<in> matchrel\\<^sup>*\n  match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "let ?s = \"Fun f ss\" and ?t = \"Fun g ts\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "from \"3.prems\""], ["proof (chain)\npicking this:\n  match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = Some \\<tau>", "have [simp]: \"f = g\"\n    and *: \"length ss = length ts\"\n    and **: \"decompose ?s ?t = Some (zip ss ts)\"\n      \"match_term_list (zip ss ts @ P) \\<sigma> = Some \\<tau>\""], ["proof (prove)\nusing this:\n  match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = Some \\<tau>\n\ngoal (1 subgoal):\n 1. f = g &&&\n    length ss = length ts &&&\n    decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) &&&\n    match_term_list (zip ss ts @ P) \\<sigma> = Some \\<tau>", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  f = g\n  length ss = length ts\n  decompose (Fun f ss) (Fun g ts) = Some (zip ss ts)\n  match_term_list (zip ss ts @ P) \\<sigma> = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "from MATCH1.Fun [OF *, of \"mset P\" g \\<sigma>]"], ["proof (chain)\npicking this:\n  MATCH1 (mset P + {#(Fun g ss, Fun g ts)#}, \\<sigma>)\n   (mset P + mset (zip ss ts), \\<sigma>)", "have \"((mset ((?s, ?t) # P), \\<sigma>), (mset (zip ss ts @ P), \\<sigma>)) \\<in> matchrel\\<^sup>*\""], ["proof (prove)\nusing this:\n  MATCH1 (mset P + {#(Fun g ss, Fun g ts)#}, \\<sigma>)\n   (mset P + mset (zip ss ts), \\<sigma>)\n\ngoal (1 subgoal):\n 1. ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), mset (zip ss ts @ P),\n     \\<sigma>)\n    \\<in> matchrel\\<^sup>*", "by (simp add: MATCH1_matchrel_conv ac_simps)"], ["proof (state)\nthis:\n  ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), mset (zip ss ts @ P),\n   \\<sigma>)\n  \\<in> matchrel\\<^sup>*\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = Some \\<tau>\\<rbrakk>\n                   \\<Longrightarrow> ((mset (x2 @ P), \\<sigma>), {#},\n\\<tau>)\n                                     \\<in> matchrel\\<^sup>*;\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> =\n        Some \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#},\n                          \\<tau>)\n                         \\<in> matchrel\\<^sup>*\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "with \"3.IH\" [OF **]"], ["proof (chain)\npicking this:\n  ((mset (zip ss ts @ P), \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n  ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), mset (zip ss ts @ P),\n   \\<sigma>)\n  \\<in> matchrel\\<^sup>*", "show ?case"], ["proof (prove)\nusing this:\n  ((mset (zip ss ts @ P), \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n  ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), mset (zip ss ts @ P),\n   \\<sigma>)\n  \\<in> matchrel\\<^sup>*\n\ngoal (1 subgoal):\n 1. ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#}, \\<tau>)\n    \\<in> matchrel\\<^sup>*", "by (blast dest: rtrancl_trans)"], ["proof (state)\nthis:\n  ((mset ((Fun f ss, Fun g ts) # P), \\<sigma>), {#}, \\<tau>)\n  \\<in> matchrel\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = Some \\<tau> \\<Longrightarrow>\n       ((mset [], \\<sigma>), {#}, \\<tau>) \\<in> matchrel\\<^sup>*\n 2. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       Some \\<tau> \\<Longrightarrow>\n       ((mset ((Fun f ss, Var x) # P), \\<sigma>), {#}, \\<tau>)\n       \\<in> matchrel\\<^sup>*", "qed simp_all"], ["", "lemma match_term_list_None:\n  assumes \"match_term_list P \\<sigma> = None\"\n  shows \"matchers_map \\<sigma> \\<inter> matchers (set P) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers (set P) = {}", "using assms"], ["proof (prove)\nusing this:\n  match_term_list P \\<sigma> = None\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers (set P) = {}", "proof (induction P \\<sigma> rule: match_term_list.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\\<rbrakk>\n                \\<Longrightarrow> matchers_map\n                                   (\\<sigma>(x \\<mapsto> t)) \\<inter>\n                                  matchers (set P) =\n                                  {};\n        match_term_list ((Var x, t) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Var x, t) # P)) =\n                         {}\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "case (2 x t P \\<sigma>)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n   match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\\<rbrakk>\n  \\<Longrightarrow> matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter>\n                    matchers (set P) =\n                    {}\n  match_term_list ((Var x, t) # P) \\<sigma> = None\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\\<rbrakk>\n                \\<Longrightarrow> matchers_map\n                                   (\\<sigma>(x \\<mapsto> t)) \\<inter>\n                                  matchers (set P) =\n                                  {};\n        match_term_list ((Var x, t) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Var x, t) # P)) =\n                         {}\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "have \"\\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n    (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and> match_term_list P (\\<sigma> (x \\<mapsto> t)) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n    (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None", "using \"2.prems\""], ["proof (prove)\nusing this:\n  match_term_list ((Var x, t) # P) \\<sigma> = None\n\ngoal (1 subgoal):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n    (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n  (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n  match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>x t P \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<sigma> x = None \\<or> \\<sigma> x = Some t;\n                 match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\\<rbrakk>\n                \\<Longrightarrow> matchers_map\n                                   (\\<sigma>(x \\<mapsto> t)) \\<inter>\n                                  matchers (set P) =\n                                  {};\n        match_term_list ((Var x, t) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Var x, t) # P)) =\n                         {}\n 3. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 4. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n  (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n  match_term_list P (\\<sigma>(x \\<mapsto> t)) = None", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<or>\n  (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n  match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "assume *: \"\\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t)\""], ["proof (state)\nthis:\n  \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t)\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "have \"\\<not> (\\<exists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel \\<Longrightarrow>\n    False", "presume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (\\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel)", "obtain y where \"MATCH1 ({#(Var x, t)#}, \\<sigma>) y\""], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        MATCH1 ({#(Var x, t)#}, \\<sigma>) y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: MATCH1_matchrel_conv)"], ["proof (state)\nthis:\n  MATCH1 ({#(Var x, t)#}, \\<sigma>) y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  MATCH1 ({#(Var x, t)#}, \\<sigma>) y", "show False"], ["proof (prove)\nusing this:\n  MATCH1 ({#(Var x, t)#}, \\<sigma>) y\n\ngoal (1 subgoal):\n 1. False", "using *"], ["proof (prove)\nusing this:\n  MATCH1 ({#(Var x, t)#}, \\<sigma>) y\n  \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t)\n\ngoal (1 subgoal):\n 1. False", "by (cases) simp_all"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel \\<Longrightarrow>\n    \\<not> (\\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel)", "qed simp"], ["proof (state)\nthis:\n  \\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "moreover"], ["proof (state)\nthis:\n  \\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "have \"(({#(Var x, t)#}, \\<sigma>), ({#(Var x, t)#}, \\<sigma>)) \\<in> matchrel\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n    \\<in> matchrel\\<^sup>*", "by simp"], ["proof (state)\nthis:\n  (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n  \\<in> matchrel\\<^sup>*\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel\n  (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n  \\<in> matchrel\\<^sup>*", "have \"(({#(Var x, t)#}, \\<sigma>), ({#(Var x, t)#}, \\<sigma>)) \\<in> matchrel\\<^sup>!\""], ["proof (prove)\nusing this:\n  \\<nexists>y. (({#(Var x, t)#}, \\<sigma>), y) \\<in> matchrel\n  (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n  \\<in> matchrel\\<^sup>*\n\ngoal (1 subgoal):\n 1. (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n    \\<in> matchrel\\<^sup>!", "by (metis NF_I normalizability_I)"], ["proof (state)\nthis:\n  (({#(Var x, t)#}, \\<sigma>), {#(Var x, t)#}, \\<sigma>)\n  \\<in> matchrel\\<^sup>!\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "from irreducible_reachable_imp_matchers_empty [OF this]"], ["proof (chain)\npicking this:\n  fst ({#(Var x, t)#}, \\<sigma>) \\<noteq> {#} \\<Longrightarrow>\n  matchers_map \\<sigma> \\<inter> matchers (set_mset {#(Var x, t)#}) = {}", "have \"matchers_map \\<sigma> \\<inter> matchers {(Var x, t)} = {}\""], ["proof (prove)\nusing this:\n  fst ({#(Var x, t)#}, \\<sigma>) \\<noteq> {#} \\<Longrightarrow>\n  matchers_map \\<sigma> \\<inter> matchers (set_mset {#(Var x, t)#}) = {}\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers {(Var x, t)} = {}", "by simp"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers {(Var x, t)} = {}\n\ngoal (2 subgoals):\n 1. \\<not> (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "then"], ["proof (chain)\npicking this:\n  matchers_map \\<sigma> \\<inter> matchers {(Var x, t)} = {}", "show ?case"], ["proof (prove)\nusing this:\n  matchers_map \\<sigma> \\<inter> matchers {(Var x, t)} = {}\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "by auto"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n\ngoal (1 subgoal):\n 1. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "presume *: \"\\<sigma> x = None \\<or> \\<sigma> x = Some t\"\n      and \"match_term_list P (\\<sigma> (x \\<mapsto> t)) = None\""], ["proof (state)\nthis:\n  \\<sigma> x = None \\<or> \\<sigma> x = Some t\n  match_term_list P (\\<sigma>(x \\<mapsto> t)) = None\n\ngoal (1 subgoal):\n 1. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "from \"2.IH\" [OF this]"], ["proof (chain)\npicking this:\n  matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}", "have \"matchers_map (\\<sigma> (x \\<mapsto> t)) \\<inter> matchers (set P) = {}\""], ["proof (prove)\nusing this:\n  matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}\n\ngoal (1 subgoal):\n 1. matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}", "."], ["proof (state)\nthis:\n  matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}\n\ngoal (1 subgoal):\n 1. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "with MATCH1_matchers [OF MATCH1.Var [of \\<sigma> x, OF *], of \"mset P\"]"], ["proof (chain)\npicking this:\n  matchers_map (snd (mset P + {#(Var x, t)#}, \\<sigma>)) \\<inter>\n  matchers (set_mset (fst (mset P + {#(Var x, t)#}, \\<sigma>))) =\n  matchers_map (snd (mset P, \\<sigma>(x \\<mapsto> t))) \\<inter>\n  matchers (set_mset (fst (mset P, \\<sigma>(x \\<mapsto> t))))\n  matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}", "show ?case"], ["proof (prove)\nusing this:\n  matchers_map (snd (mset P + {#(Var x, t)#}, \\<sigma>)) \\<inter>\n  matchers (set_mset (fst (mset P + {#(Var x, t)#}, \\<sigma>))) =\n  matchers_map (snd (mset P, \\<sigma>(x \\<mapsto> t))) \\<inter>\n  matchers (set_mset (fst (mset P, \\<sigma>(x \\<mapsto> t))))\n  matchers_map (\\<sigma>(x \\<mapsto> t)) \\<inter> matchers (set P) = {}\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}", "by simp"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n\ngoal (2 subgoals):\n 1. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    \\<sigma> x = None \\<or> \\<sigma> x = Some t\n 2. (\\<sigma> x = None \\<or> \\<sigma> x = Some t) \\<and>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None \\<Longrightarrow>\n    match_term_list P (\\<sigma>(x \\<mapsto> t)) = None", "qed auto"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Var x, t) # P)) = {}\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "case (3 f ss g ts P \\<sigma>)"], ["proof (state)\nthis:\n  \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some ?x2.0;\n   match_term_list (?x2.0 @ P) \\<sigma> = None\\<rbrakk>\n  \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                    matchers (set (?x2.0 @ P)) =\n                    {}\n  match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "let ?s = \"Fun f ss\" and ?t = \"Fun g ts\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "have \"decompose ?s ?t = None \\<or>\n    decompose ?s ?t = Some (zip ss ts) \\<and> match_term_list (zip ss ts @ P) \\<sigma> = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decompose (Fun f ss) (Fun g ts) = None \\<or>\n    decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None", "using \"3.prems\""], ["proof (prove)\nusing this:\n  match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\n\ngoal (1 subgoal):\n 1. decompose (Fun f ss) (Fun g ts) = None \\<or>\n    decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  decompose (Fun f ss) (Fun g ts) = None \\<or>\n  decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n  match_term_list (zip ss ts @ P) \\<sigma> = None\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss g ts P \\<sigma>.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>decompose (Fun f ss) (Fun g ts) = Some x2;\n                    match_term_list (x2 @ P) \\<sigma> = None\\<rbrakk>\n                   \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                                     matchers (set (x2 @ P)) =\n                                     {};\n        match_term_list ((Fun f ss, Fun g ts) # P) \\<sigma> = None\\<rbrakk>\n       \\<Longrightarrow> matchers_map \\<sigma> \\<inter>\n                         matchers (set ((Fun f ss, Fun g ts) # P)) =\n                         {}\n 3. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "then"], ["proof (chain)\npicking this:\n  decompose (Fun f ss) (Fun g ts) = None \\<or>\n  decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n  match_term_list (zip ss ts @ P) \\<sigma> = None", "show ?case"], ["proof (prove)\nusing this:\n  decompose (Fun f ss) (Fun g ts) = None \\<or>\n  decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n  match_term_list (zip ss ts @ P) \\<sigma> = None\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. decompose (Fun f ss) (Fun g ts) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}\n 2. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "assume \"decompose ?s ?t = None\""], ["proof (state)\nthis:\n  decompose (Fun f ss) (Fun g ts) = None\n\ngoal (2 subgoals):\n 1. decompose (Fun f ss) (Fun g ts) = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}\n 2. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "then"], ["proof (chain)\npicking this:\n  decompose (Fun f ss) (Fun g ts) = None", "show ?case"], ["proof (prove)\nusing this:\n  decompose (Fun f ss) (Fun g ts) = None\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "by auto"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Fun f ss, Fun g ts) # P)) =\n  {}\n\ngoal (1 subgoal):\n 1. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "presume \"decompose ?s ?t = Some (zip ss ts)\"\n      and \"match_term_list (zip ss ts @ P) \\<sigma> = None\""], ["proof (state)\nthis:\n  decompose (Fun f ss) (Fun g ts) = Some (zip ss ts)\n  match_term_list (zip ss ts @ P) \\<sigma> = None\n\ngoal (1 subgoal):\n 1. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "from \"3.IH\" [OF this]"], ["proof (chain)\npicking this:\n  matchers_map \\<sigma> \\<inter> matchers (set (zip ss ts @ P)) = {}", "show ?case"], ["proof (prove)\nusing this:\n  matchers_map \\<sigma> \\<inter> matchers (set (zip ss ts @ P)) = {}\n\ngoal (1 subgoal):\n 1. matchers_map \\<sigma> \\<inter>\n    matchers (set ((Fun f ss, Fun g ts) # P)) =\n    {}", "by auto"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Fun f ss, Fun g ts) # P)) =\n  {}\n\ngoal (2 subgoals):\n 1. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    decompose (Fun f ss) (Fun g ts) = Some (zip ss ts)\n 2. decompose (Fun f ss) (Fun g ts) = Some (zip ss ts) \\<and>\n    match_term_list (zip ss ts @ P) \\<sigma> = None \\<Longrightarrow>\n    match_term_list (zip ss ts @ P) \\<sigma> = None", "qed auto"], ["proof (state)\nthis:\n  matchers_map \\<sigma> \\<inter> matchers (set ((Fun f ss, Fun g ts) # P)) =\n  {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       match_term_list [] \\<sigma> = None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter> matchers (set []) = {}\n 2. \\<And>f ss x P \\<sigma>.\n       match_term_list ((Fun f ss, Var x) # P) \\<sigma> =\n       None \\<Longrightarrow>\n       matchers_map \\<sigma> \\<inter>\n       matchers (set ((Fun f ss, Var x) # P)) =\n       {}", "qed simp_all"], ["", "text \\<open>Compute a matching substitution for a list of term pairs @{term P},\nwhere left-hand sides are \"patterns\" against which the right-hand sides are matched.\\<close>"], ["", "definition match_list ::\n  \"('v \\<Rightarrow> ('f, 'w) term) \\<Rightarrow> (('f, 'v) term \\<times> ('f, 'w) term) list \\<Rightarrow> ('f, 'v, 'w) gsubst option\"\n  where\n    \"match_list d P = map_option (subst_of_map d) (match_term_list P Map.empty)\""], ["", "lemma match_list_sound:\n  assumes \"match_list d P = Some \\<sigma>\"\n  shows \"\\<sigma> \\<in> matchers (set P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers (set P)", "using matchrel_sound [of \"mset P\"]\n    and match_term_list_Some_matchrel [of P Map.empty]\n    and assms"], ["proof (prove)\nusing this:\n  ((mset P, Map.empty), {#}, ?\\<sigma>)\n  \\<in> matchrel\\<^sup>* \\<Longrightarrow>\n  subst_of_map ?d ?\\<sigma> \\<in> matchers (set_mset (mset P))\n  match_term_list P Map.empty = Some ?\\<tau> \\<Longrightarrow>\n  ((mset P, Map.empty), {#}, ?\\<tau>) \\<in> matchrel\\<^sup>*\n  match_list d P = Some \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers (set P)", "by (auto simp: match_list_def)"], ["", "lemma match_list_matches:\n  assumes \"match_list d P = Some \\<sigma>\"\n  shows \"\\<And>p t. (p, t) \\<in> set P \\<Longrightarrow> p \\<cdot> \\<sigma> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p t. (p, t) \\<in> set P \\<Longrightarrow> p \\<cdot> \\<sigma> = t", "using match_list_sound [OF assms]"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. \\<And>p t. (p, t) \\<in> set P \\<Longrightarrow> p \\<cdot> \\<sigma> = t", "by (force simp: matchers_def)"], ["", "lemma match_list_complete:\n  assumes \"match_list d P = None\"\n  shows \"matchers (set P) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matchers (set P) = {}", "using match_term_list_None [of P Map.empty] and assms"], ["proof (prove)\nusing this:\n  match_term_list P Map.empty = None \\<Longrightarrow>\n  matchers_map Map.empty \\<inter> matchers (set P) = {}\n  match_list d P = None\n\ngoal (1 subgoal):\n 1. matchers (set P) = {}", "by (simp add: match_list_def)"], ["", "lemma match_list_None_conv:\n  \"match_list d P = None \\<longleftrightarrow> matchers (set P) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_list d P = None) = (matchers (set P) = {})", "using match_list_sound [of d P] and match_list_complete [of d P]"], ["proof (prove)\nusing this:\n  match_list d P = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma> \\<in> matchers (set P)\n  match_list d P = None \\<Longrightarrow> matchers (set P) = {}\n\ngoal (1 subgoal):\n 1. (match_list d P = None) = (matchers (set P) = {})", "by (metis empty_iff not_None_eq)"], ["", "definition \"match t l = match_list Var [(l, t)]\""], ["", "lemma match_sound:\n  assumes \"match t p = Some \\<sigma>\"\n  shows \"\\<sigma> \\<in> matchers {(p, t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers {(p, t)}", "using match_list_sound [of Var \"[(p, t)]\"] and assms"], ["proof (prove)\nusing this:\n  match_list Var [(p, t)] = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma> \\<in> matchers (set [(p, t)])\n  match t p = Some \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers {(p, t)}", "by (simp add: match_def)"], ["", "lemma match_matches:\n  assumes \"match t p = Some \\<sigma>\"\n  shows \"p \\<cdot> \\<sigma> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<cdot> \\<sigma> = t", "using match_sound [OF assms]"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> matchers {(p, t)}\n\ngoal (1 subgoal):\n 1. p \\<cdot> \\<sigma> = t", "by (force simp: matchers_def)"], ["", "lemma match_complete:\n  assumes \"match t p = None\"\n  shows \"matchers {(p, t)} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matchers {(p, t)} = {}", "using match_list_complete [of Var \"[(p, t)]\"] and assms"], ["proof (prove)\nusing this:\n  match_list Var [(p, t)] = None \\<Longrightarrow>\n  matchers (set [(p, t)]) = {}\n  match t p = None\n\ngoal (1 subgoal):\n 1. matchers {(p, t)} = {}", "by (simp add: match_def)"], ["", "definition matches :: \"('f, 'w) term \\<Rightarrow> ('f, 'v) term \\<Rightarrow> bool\"\nwhere\n  \"matches t p = (case match_list (\\<lambda> _. t) [(p,t)] of None \\<Rightarrow> False | Some _ \\<Rightarrow> True)\""], ["", "lemma matches_iff:\n  \"matches t p \\<longleftrightarrow> (\\<exists>\\<sigma>. p \\<cdot> \\<sigma> = t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches t p = (\\<exists>\\<sigma>. p \\<cdot> \\<sigma> = t)", "using match_list_sound [of _ \"[(p,t)]\"]  \n  and match_list_complete [of _ \"[(p,t)]\"]"], ["proof (prove)\nusing this:\n  match_list ?d [(p, t)] = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma> \\<in> matchers (set [(p, t)])\n  match_list ?d [(p, t)] = None \\<Longrightarrow>\n  matchers (set [(p, t)]) = {}\n\ngoal (1 subgoal):\n 1. matches t p = (\\<exists>\\<sigma>. p \\<cdot> \\<sigma> = t)", "unfolding matches_def matchers_def"], ["proof (prove)\nusing this:\n  match_list ?d [(p, t)] = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma>\n  \\<in> {\\<sigma>.\n         \\<forall>e\\<in>set [(p, t)]. fst e \\<cdot> \\<sigma> = snd e}\n  match_list ?d [(p, t)] = None \\<Longrightarrow>\n  {\\<sigma>. \\<forall>e\\<in>set [(p, t)]. fst e \\<cdot> \\<sigma> = snd e} =\n  {}\n\ngoal (1 subgoal):\n 1. (case match_list (\\<lambda>_. t) [(p, t)] of None \\<Rightarrow> False\n     | Some x \\<Rightarrow> True) =\n    (\\<exists>\\<sigma>. p \\<cdot> \\<sigma> = t)", "by (force simp: split: option.splits)"], ["", "lemma match_complete':\n  assumes \"p \\<cdot> \\<sigma> = t\"\n  shows \"\\<exists>\\<tau>. match t p = Some \\<tau> \\<and> (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "from assms"], ["proof (chain)\npicking this:\n  p \\<cdot> \\<sigma> = t", "have \\<sigma>: \"\\<sigma> \\<in> matchers {(p,t)}\""], ["proof (prove)\nusing this:\n  p \\<cdot> \\<sigma> = t\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers {(p, t)}", "by (simp add: matchers_def)"], ["proof (state)\nthis:\n  \\<sigma> \\<in> matchers {(p, t)}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "with match_complete[of t p]"], ["proof (chain)\npicking this:\n  match t p = None \\<Longrightarrow> matchers {(p, t)} = {}\n  \\<sigma> \\<in> matchers {(p, t)}", "obtain \\<tau> where match: \"match t p = Some \\<tau>\""], ["proof (prove)\nusing this:\n  match t p = None \\<Longrightarrow> matchers {(p, t)} = {}\n  \\<sigma> \\<in> matchers {(p, t)}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        match t p = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  match t p = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "from match_sound[OF this]"], ["proof (chain)\npicking this:\n  \\<tau> \\<in> matchers {(p, t)}", "have \"\\<tau> \\<in> matchers {(p, t)}\""], ["proof (prove)\nusing this:\n  \\<tau> \\<in> matchers {(p, t)}\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> matchers {(p, t)}", "."], ["proof (state)\nthis:\n  \\<tau> \\<in> matchers {(p, t)}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "from matchers_vars_term_eq[OF \\<sigma> this] match"], ["proof (chain)\npicking this:\n  (?s, ?t) \\<in> {(p, t)} \\<Longrightarrow>\n  \\<forall>x\\<in>vars_term ?s. \\<sigma> x = \\<tau> x\n  match t p = Some \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  (?s, ?t) \\<in> {(p, t)} \\<Longrightarrow>\n  \\<forall>x\\<in>vars_term ?s. \\<sigma> x = \\<tau> x\n  match t p = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match t p = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<tau>.\n     match t p = Some \\<tau> \\<and>\n     (\\<forall>x\\<in>vars_term p. \\<sigma> x = \\<tau> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation lvars :: \"(('f, 'v) term \\<times> ('f, 'w) term) list \\<Rightarrow> 'v set\"\nwhere\n  \"lvars P \\<equiv> \\<Union> ((vars_term \\<circ> fst) ` set P)\""], ["", "lemma match_list_complete':\n  assumes \"\\<And>s t. (s, t) \\<in> set P \\<Longrightarrow> s \\<cdot> \\<sigma> = t\"\n  shows \"\\<exists>\\<tau>. match_list d P = Some \\<tau> \\<and> (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "from assms"], ["proof (chain)\npicking this:\n  (?s, ?t) \\<in> set P \\<Longrightarrow> ?s \\<cdot> \\<sigma> = ?t", "have \"\\<sigma> \\<in> matchers (set P)\""], ["proof (prove)\nusing this:\n  (?s, ?t) \\<in> set P \\<Longrightarrow> ?s \\<cdot> \\<sigma> = ?t\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> matchers (set P)", "by (force simp: matchers_def)"], ["proof (state)\nthis:\n  \\<sigma> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "moreover"], ["proof (state)\nthis:\n  \\<sigma> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "with match_list_complete [of d P]"], ["proof (chain)\npicking this:\n  match_list d P = None \\<Longrightarrow> matchers (set P) = {}\n  \\<sigma> \\<in> matchers (set P)", "obtain \\<tau>\n    where \"match_list d P = Some \\<tau>\""], ["proof (prove)\nusing this:\n  match_list d P = None \\<Longrightarrow> matchers (set P) = {}\n  \\<sigma> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        match_list d P = Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  match_list d P = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "moreover"], ["proof (state)\nthis:\n  match_list d P = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "with match_list_sound [of d P]"], ["proof (chain)\npicking this:\n  match_list d P = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma> \\<in> matchers (set P)\n  match_list d P = Some \\<tau>", "have \"\\<tau> \\<in> matchers (set P)\""], ["proof (prove)\nusing this:\n  match_list d P = Some ?\\<sigma> \\<Longrightarrow>\n  ?\\<sigma> \\<in> matchers (set P)\n  match_list d P = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau> \\<in> matchers (set P)", "by (auto simp: match_def split: option.splits)"], ["proof (state)\nthis:\n  \\<tau> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> \\<in> matchers (set P)\n  match_list d P = Some \\<tau>\n  \\<tau> \\<in> matchers (set P)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> matchers (set P)\n  match_list d P = Some \\<tau>\n  \\<tau> \\<in> matchers (set P)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "using matchers_vars_term_eq [of \\<sigma> \"set P\" \"\\<tau>\"]"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> matchers (set P)\n  match_list d P = Some \\<tau>\n  \\<tau> \\<in> matchers (set P)\n  \\<lbrakk>\\<sigma> \\<in> matchers (set P); \\<tau> \\<in> matchers (set P);\n   (?s, ?t) \\<in> set P\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>vars_term ?s. \\<sigma> x = \\<tau> x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<tau>.\n       match_list d P = Some \\<tau> \\<and>\n       (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<tau>.\n     match_list d P = Some \\<tau> \\<and>\n     (\\<forall>x\\<in>lvars P. \\<sigma> x = \\<tau> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}