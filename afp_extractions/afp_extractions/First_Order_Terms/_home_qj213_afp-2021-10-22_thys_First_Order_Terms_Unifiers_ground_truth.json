{"file_name": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms/Unifiers.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms", "problem_names": ["lemma map_eq_set_zipD [dest]:\n  assumes \"map f xs = map f ys\"\n    and \"(x, y) \\<in> set (zip xs ys)\"\n  shows \"f x = f y\"", "lemma in_unifiersE [elim]:\n  \"\\<lbrakk>\\<sigma> \\<in> unifiers E; (\\<And>e. e \\<in> E \\<Longrightarrow> fst e \\<cdot> \\<sigma> = snd e \\<cdot> \\<sigma>) \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"", "lemma unifiers_Un [simp]:\n  \"unifiers (s \\<union> t) = unifiers s \\<inter> unifiers t\"", "lemma unifiers_empty [simp]:\n  \"unifiers {} = UNIV\"", "lemma unifiers_insert: (* \"simp not added for readability (and termination)\" *)\n  \"unifiers (insert p t) = {\\<sigma>. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>} \\<inter> unifiers t\"", "lemma unifiers_insert_ident [simp]:\n  \"unifiers (insert (t, t) E) = unifiers E\"", "lemma unifiers_insert_swap:\n  \"unifiers (insert (s, t) E) = unifiers (insert (t, s) E)\"", "lemma unifiers_insert_Var_swap [simp]:\n  \"unifiers (insert (t, Var x) E) = unifiers (insert (Var x, t) E)\"", "lemma unifiers_subst_set [simp]:\n  \"\\<tau> \\<in> unifiers (subst_set \\<sigma> E) \\<longleftrightarrow> \\<sigma> \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E\"", "lemma unifiers_insert_VarD:\n  shows \"\\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow> subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>\"\n    and \"\\<sigma> \\<in> unifiers (insert (t, Var x) E) \\<Longrightarrow> subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>\"", "lemma unifiers_insert_Var_left:\n  \"\\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow> \\<sigma> \\<in> unifiers (subst_set (subst x t) E)\"", "lemma unifiers_set_zip [simp]:\n  assumes \"length ss = length ts\"\n  shows \"unifiers (set (zip ss ts)) = {\\<sigma>. map (\\<lambda>t. t \\<cdot> \\<sigma>) ss = map (\\<lambda>t. t \\<cdot> \\<sigma>) ts}\"", "lemma unifiers_Fun [simp]:\n  \"\\<sigma> \\<in> unifiers {(Fun f ss, Fun g ts)} \\<longleftrightarrow>\n    length ss = length ts \\<and> f = g \\<and> \\<sigma> \\<in> unifiers (set (zip ss ts))\"", "lemma unifiers_occur_left_is_Fun:\n  fixes t :: \"('f, 'v) term\"\n  assumes \"x \\<in> vars_term t\" and \"is_Fun t\"\n  shows \"unifiers (insert (Var x, t) E) = {}\"", "lemma unifiers_occur_left_not_Var:\n  \"x \\<in> vars_term t \\<Longrightarrow> t \\<noteq> Var x \\<Longrightarrow> unifiers (insert (Var x, t) E) = {}\"", "lemma unifiers_occur_left_Fun:\n  \"x \\<in> (\\<Union>t\\<in>set ts. vars_term t) \\<Longrightarrow> unifiers (insert (Var x, Fun f ts) E) = {}\"", "lemmas unifiers_occur_left_simps [simp] =\n  unifiers_occur_left_is_Fun\n  unifiers_occur_left_not_Var\n  unifiers_occur_left_Fun", "lemma in_vars_is_Fun_not_unifiable:\n  assumes \"x \\<in> vars_term t\" and \"is_Fun t\"\n  shows \"\\<not> unifiable {(Var x, t)}\"", "lemma unifiable_insert_swap:\n  \"unifiable (insert (s, t) E) = unifiable (insert (t, s) E)\"", "lemma subst_set_reflects_unifiable:\n  fixes \\<sigma> :: \"('f, 'v) subst\"\n  assumes \"unifiable (subst_set \\<sigma> E)\"\n  shows \"unifiable E\"", "lemma is_mgu_empty [simp]:\n  \"is_mgu Var {}\"", "lemma is_mgu_insert_trivial [simp]:\n  \"is_mgu \\<sigma> (insert (t, t) E) = is_mgu \\<sigma> E\"", "lemma is_mgu_insert_decomp [simp]:\n  assumes \"length ss = length ts\"\n  shows \"is_mgu \\<sigma> (insert (Fun f ss, Fun f ts) E) \\<longleftrightarrow>\n    is_mgu \\<sigma> (E \\<union> set (zip ss ts))\"", "lemma is_mgu_insert_swap:\n  \"is_mgu \\<sigma> (insert (s, t) E) = is_mgu \\<sigma> (insert (t, s) E)\"", "lemma is_mgu_insert_Var_swap [simp]:\n  \"is_mgu \\<sigma> (insert (t, Var x) E) = is_mgu \\<sigma> (insert (Var x, t) E)\"", "lemma is_mgu_subst_set_subst:\n  assumes \"x \\<notin> vars_term t\"\n    and \"is_mgu \\<sigma> (subst_set (subst x t) E)\" (is \"is_mgu \\<sigma> ?E\")\n  shows \"is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)\" (is \"is_mgu ?\\<sigma> ?E'\")", "lemma is_imgu_imp_is_mgu:\n  assumes \"is_imgu \\<sigma> E\"\n  shows \"is_mgu \\<sigma> E\""], "translations": [["", "lemma map_eq_set_zipD [dest]:\n  assumes \"map f xs = map f ys\"\n    and \"(x, y) \\<in> set (zip xs ys)\"\n  shows \"f x = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = f y", "using assms"], ["proof (prove)\nusing this:\n  map f xs = map f ys\n  (x, y) \\<in> set (zip xs ys)\n\ngoal (1 subgoal):\n 1. f x = f y", "proof (induct xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>map f [] = map f ys; (x, y) \\<in> set (zip [] ys)\\<rbrakk>\n       \\<Longrightarrow> f x = f y\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>map f xs = map f ys;\n                    (x, y) \\<in> set (zip xs ys)\\<rbrakk>\n                   \\<Longrightarrow> f x = f y;\n        map f (a # xs) = map f ys;\n        (x, y) \\<in> set (zip (a # xs) ys)\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>map f xs = map f ?ys; (x, y) \\<in> set (zip xs ?ys)\\<rbrakk>\n  \\<Longrightarrow> f x = f y\n  map f (x # xs) = map f ys\n  (x, y) \\<in> set (zip (x # xs) ys)\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>map f [] = map f ys; (x, y) \\<in> set (zip [] ys)\\<rbrakk>\n       \\<Longrightarrow> f x = f y\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>map f xs = map f ys;\n                    (x, y) \\<in> set (zip xs ys)\\<rbrakk>\n                   \\<Longrightarrow> f x = f y;\n        map f (a # xs) = map f ys;\n        (x, y) \\<in> set (zip (a # xs) ys)\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>map f xs = map f ?ys; (x, y) \\<in> set (zip xs ?ys)\\<rbrakk>\n  \\<Longrightarrow> f x = f y\n  map f (x # xs) = map f ys\n  (x, y) \\<in> set (zip (x # xs) ys)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>map f xs = map f ?ys; (x, y) \\<in> set (zip xs ?ys)\\<rbrakk>\n  \\<Longrightarrow> f x = f y\n  map f (x # xs) = map f ys\n  (x, y) \\<in> set (zip (x # xs) ys)\n\ngoal (1 subgoal):\n 1. f x = f y", "by (cases ys) auto"], ["proof (state)\nthis:\n  f x = f y\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>map f [] = map f ys; (x, y) \\<in> set (zip [] ys)\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "qed simp"], ["", "type_synonym ('f, 'v) equation = \"('f, 'v) term \\<times> ('f, 'v) term\""], ["", "type_synonym ('f, 'v) equations = \"('f, 'v) equation set\""], ["", "text \\<open>The set of unifiers for a given set of equations.\\<close>"], ["", "definition unifiers :: \"('f, 'v) equations \\<Rightarrow> ('f, 'v) subst set\"\n  where\n    \"unifiers E = {\\<sigma>. \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>}\""], ["", "text \\<open>Check whether a set of equations is unifiable.\\<close>"], ["", "definition \"unifiable E \\<longleftrightarrow> (\\<exists>\\<sigma>. \\<sigma> \\<in> unifiers E)\""], ["", "lemma in_unifiersE [elim]:\n  \"\\<lbrakk>\\<sigma> \\<in> unifiers E; (\\<And>e. e \\<in> E \\<Longrightarrow> fst e \\<cdot> \\<sigma> = snd e \\<cdot> \\<sigma>) \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> \\<in> unifiers E;\n     (\\<And>e.\n         e \\<in> E \\<Longrightarrow>\n         fst e \\<cdot> \\<sigma> = snd e \\<cdot> \\<sigma>) \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "by (force simp: unifiers_def)"], ["", "text \\<open>Applying a substitution to a set of equations.\\<close>"], ["", "definition subst_set :: \"('f, 'v) subst \\<Rightarrow> ('f, 'v) equations \\<Rightarrow> ('f, 'v) equations\"\n  where\n    \"subst_set \\<sigma> E = (\\<lambda>e. (fst e \\<cdot> \\<sigma>, snd e \\<cdot> \\<sigma>)) ` E\""], ["", "text \\<open>Check whether a substitution is a most-general unifier (mgu) of a set of equations.\\<close>"], ["", "definition is_mgu :: \"('f, 'v) subst \\<Rightarrow> ('f, 'v) equations \\<Rightarrow> bool\"\n  where\n    \"is_mgu \\<sigma> E \\<longleftrightarrow> \\<sigma> \\<in> unifiers E \\<and> (\\<forall>\\<tau> \\<in> unifiers E. (\\<exists>\\<gamma>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<gamma>))\""], ["", "text \\<open>The following property characterizes idempotent mgus, that is,\n  mgus \\<^term>\\<open>\\<sigma>\\<close> for which \\<^prop>\\<open>\\<sigma> \\<circ>\\<^sub>s \\<sigma> = \\<sigma>\\<close> holds.\\<close>"], ["", "definition is_imgu :: \"('f, 'v) subst \\<Rightarrow> ('f, 'v) equations \\<Rightarrow> bool\"\n  where\n    \"is_imgu \\<sigma> E \\<longleftrightarrow> \\<sigma> \\<in> unifiers E \\<and> (\\<forall>\\<tau> \\<in> unifiers E. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<tau>)\""], ["", "subsubsection \\<open>Properties of sets of unifiers\\<close>"], ["", "lemma unifiers_Un [simp]:\n  \"unifiers (s \\<union> t) = unifiers s \\<inter> unifiers t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (s \\<union> t) = unifiers s \\<inter> unifiers t", "by (auto simp: unifiers_def)"], ["", "lemma unifiers_empty [simp]:\n  \"unifiers {} = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers {} = UNIV", "by (auto simp: unifiers_def)"], ["", "lemma unifiers_insert: (* \"simp not added for readability (and termination)\" *)\n  \"unifiers (insert p t) = {\\<sigma>. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>} \\<inter> unifiers t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (insert p t) =\n    {\\<sigma>. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>} \\<inter>\n    unifiers t", "by (auto simp: unifiers_def)"], ["", "lemma unifiers_insert_ident [simp]:\n  \"unifiers (insert (t, t) E) = unifiers E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (insert (t, t) E) = unifiers E", "by (auto simp: unifiers_insert)"], ["", "lemma unifiers_insert_swap:\n  \"unifiers (insert (s, t) E) = unifiers (insert (t, s) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (insert (s, t) E) = unifiers (insert (t, s) E)", "by (auto simp: unifiers_insert)"], ["", "lemma unifiers_insert_Var_swap [simp]:\n  \"unifiers (insert (t, Var x) E) = unifiers (insert (Var x, t) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (insert (t, Var x) E) = unifiers (insert (Var x, t) E)", "by (rule unifiers_insert_swap)"], ["", "lemma unifiers_subst_set [simp]:\n  \"\\<tau> \\<in> unifiers (subst_set \\<sigma> E) \\<longleftrightarrow> \\<sigma> \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<in> unifiers (subst_set \\<sigma> E)) =\n    (\\<sigma> \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E)", "by (auto simp: unifiers_def subst_set_def)"], ["", "lemma unifiers_insert_VarD:\n  shows \"\\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow> subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>\"\n    and \"\\<sigma> \\<in> unifiers (insert (t, Var x) E) \\<Longrightarrow> subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n     subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>) &&&\n    (\\<sigma> \\<in> unifiers (insert (t, Var x) E) \\<Longrightarrow>\n     subst x t \\<circ>\\<^sub>s \\<sigma> = \\<sigma>)", "by (auto simp: unifiers_def)"], ["", "lemma unifiers_insert_Var_left:\n  \"\\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow> \\<sigma> \\<in> unifiers (subst_set (subst x t) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n    \\<sigma> \\<in> unifiers (subst_set (subst x t) E)", "by (auto simp: unifiers_def subst_set_def)"], ["", "lemma unifiers_set_zip [simp]:\n  assumes \"length ss = length ts\"\n  shows \"unifiers (set (zip ss ts)) = {\\<sigma>. map (\\<lambda>t. t \\<cdot> \\<sigma>) ss = map (\\<lambda>t. t \\<cdot> \\<sigma>) ts}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (set (zip ss ts)) =\n    {\\<sigma>.\n     map (\\<lambda>t. t \\<cdot> \\<sigma>) ss =\n     map (\\<lambda>t. t \\<cdot> \\<sigma>) ts}", "using assms"], ["proof (prove)\nusing this:\n  length ss = length ts\n\ngoal (1 subgoal):\n 1. unifiers (set (zip ss ts)) =\n    {\\<sigma>.\n     map (\\<lambda>t. t \\<cdot> \\<sigma>) ss =\n     map (\\<lambda>t. t \\<cdot> \\<sigma>) ts}", "by (induct ss ts rule: list_induct2) (auto simp: unifiers_def)"], ["", "lemma unifiers_Fun [simp]:\n  \"\\<sigma> \\<in> unifiers {(Fun f ss, Fun g ts)} \\<longleftrightarrow>\n    length ss = length ts \\<and> f = g \\<and> \\<sigma> \\<in> unifiers (set (zip ss ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<in> unifiers {(Fun f ss, Fun g ts)}) =\n    (length ss = length ts \\<and>\n     f = g \\<and> \\<sigma> \\<in> unifiers (set (zip ss ts)))", "by (auto simp: unifiers_def dest: map_eq_imp_length_eq)\n    (induct ss ts rule: list_induct2, simp_all)"], ["", "lemma unifiers_occur_left_is_Fun:\n  fixes t :: \"('f, 'v) term\"\n  assumes \"x \\<in> vars_term t\" and \"is_Fun t\"\n  shows \"unifiers (insert (Var x, t) E) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiers (insert (Var x, t) E) = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. unifiers (insert (Var x, t) E) \\<noteq> {} \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  unifiers (insert (Var x, t) E) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. unifiers (insert (Var x, t) E) \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  unifiers (insert (Var x, t) E) \\<noteq> {}", "obtain \\<sigma> :: \"('f, 'v) subst\" where \"\\<sigma> x = t \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  unifiers (insert (Var x, t) E) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<sigma> x = t \\<cdot> \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: unifiers_def)"], ["proof (state)\nthis:\n  \\<sigma> x = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiers (insert (Var x, t) E) \\<noteq> {} \\<Longrightarrow> False", "with is_Fun_num_funs_less [OF assms, of \\<sigma>]"], ["proof (chain)\npicking this:\n  num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)\n  \\<sigma> x = t \\<cdot> \\<sigma>", "show False"], ["proof (prove)\nusing this:\n  num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)\n  \\<sigma> x = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unifiers_occur_left_not_Var:\n  \"x \\<in> vars_term t \\<Longrightarrow> t \\<noteq> Var x \\<Longrightarrow> unifiers (insert (Var x, t) E) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> vars_term t; t \\<noteq> Var x\\<rbrakk>\n    \\<Longrightarrow> unifiers (insert (Var x, t) E) = {}", "using unifiers_occur_left_is_Fun [of x t]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> vars_term t; is_Fun t\\<rbrakk>\n  \\<Longrightarrow> unifiers (insert (Var x, t) ?E) = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> vars_term t; t \\<noteq> Var x\\<rbrakk>\n    \\<Longrightarrow> unifiers (insert (Var x, t) E) = {}", "by (cases t) simp_all"], ["", "lemma unifiers_occur_left_Fun:\n  \"x \\<in> (\\<Union>t\\<in>set ts. vars_term t) \\<Longrightarrow> unifiers (insert (Var x, Fun f ts) E) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (vars_term ` set ts) \\<Longrightarrow>\n    unifiers (insert (Var x, Fun f ts) E) = {}", "using unifiers_occur_left_is_Fun [of x \"Fun f ts\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> vars_term (Fun f ts); is_Fun (Fun f ts)\\<rbrakk>\n  \\<Longrightarrow> unifiers (insert (Var x, Fun f ts) ?E) = {}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> (vars_term ` set ts) \\<Longrightarrow>\n    unifiers (insert (Var x, Fun f ts) E) = {}", "by simp"], ["", "lemmas unifiers_occur_left_simps [simp] =\n  unifiers_occur_left_is_Fun\n  unifiers_occur_left_not_Var\n  unifiers_occur_left_Fun"], ["", "subsubsection \\<open>Properties of unifiability\\<close>"], ["", "lemma in_vars_is_Fun_not_unifiable:\n  assumes \"x \\<in> vars_term t\" and \"is_Fun t\"\n  shows \"\\<not> unifiable {(Var x, t)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> unifiable {(Var x, t)}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "assume \"unifiable {(Var x, t)}\""], ["proof (state)\nthis:\n  unifiable {(Var x, t)}\n\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  unifiable {(Var x, t)}", "obtain \\<sigma> where \"\\<sigma> \\<in> unifiers {(Var x, t)}\""], ["proof (prove)\nusing this:\n  unifiable {(Var x, t)}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<sigma> \\<in> unifiers {(Var x, t)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: unifiable_def)"], ["proof (state)\nthis:\n  \\<sigma> \\<in> unifiers {(Var x, t)}\n\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<sigma> \\<in> unifiers {(Var x, t)}", "have \"\\<sigma> x = t \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> unifiers {(Var x, t)}\n\ngoal (1 subgoal):\n 1. \\<sigma> x = t \\<cdot> \\<sigma>", "by (auto)"], ["proof (state)\nthis:\n  \\<sigma> x = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<sigma> x = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "have \"num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)", "using is_Fun_num_funs_less [OF assms]"], ["proof (prove)\nusing this:\n  num_funs (?\\<sigma> x) < num_funs (t \\<cdot> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. unifiable {(Var x, t)} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> x = t \\<cdot> \\<sigma>\n  num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)", "show False"], ["proof (prove)\nusing this:\n  \\<sigma> x = t \\<cdot> \\<sigma>\n  num_funs (\\<sigma> x) < num_funs (t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unifiable_insert_swap:\n  \"unifiable (insert (s, t) E) = unifiable (insert (t, s) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiable (insert (s, t) E) = unifiable (insert (t, s) E)", "by (auto simp: unifiable_def unifiers_insert_swap)"], ["", "lemma subst_set_reflects_unifiable:\n  fixes \\<sigma> :: \"('f, 'v) subst\"\n  assumes \"unifiable (subst_set \\<sigma> E)\"\n  shows \"unifiable E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unifiable E", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unifiable E", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. unifiable E", "fix \\<tau> :: \"('f, 'v) subst\""], ["proof (state)\ngoal (1 subgoal):\n 1. unifiable E", "assume \"\\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> \\<cdot> \\<tau> = snd p \\<cdot> \\<sigma> \\<cdot> \\<tau>\""], ["proof (state)\nthis:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> \\<tau> =\n     snd p \\<cdot> \\<sigma> \\<cdot> \\<tau>\n\ngoal (1 subgoal):\n 1. unifiable E", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> \\<tau> =\n     snd p \\<cdot> \\<sigma> \\<cdot> \\<tau>", "have \"\\<exists>\\<sigma> :: ('f, 'v) subst. \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> \\<tau> =\n     snd p \\<cdot> \\<sigma> \\<cdot> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>", "by (intro exI [of _ \"\\<sigma> \\<circ>\\<^sub>s \\<tau>\"]) auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiable E", "}"], ["proof (state)\nthis:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 =\n     snd p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiable E", "then"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 =\n     snd p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 =\n     snd p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. unifiable E", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>E.\n     fst p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 =\n     snd p \\<cdot> \\<sigma> \\<cdot> ?\\<tau>2 \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     \\<forall>p\\<in>E. fst p \\<cdot> \\<sigma> = snd p \\<cdot> \\<sigma>\n  unifiable (subst_set \\<sigma> E)\n\ngoal (1 subgoal):\n 1. unifiable E", "by (auto simp: unifiable_def unifiers_def subst_set_def)"], ["proof (state)\nthis:\n  unifiable E\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Properties of \\<^term>\\<open>is_mgu\\<close>\\<close>"], ["", "lemma is_mgu_empty [simp]:\n  \"is_mgu Var {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu Var {}", "by (auto simp: is_mgu_def)"], ["", "lemma is_mgu_insert_trivial [simp]:\n  \"is_mgu \\<sigma> (insert (t, t) E) = is_mgu \\<sigma> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> (insert (t, t) E) = is_mgu \\<sigma> E", "by (auto simp: is_mgu_def)"], ["", "lemma is_mgu_insert_decomp [simp]:\n  assumes \"length ss = length ts\"\n  shows \"is_mgu \\<sigma> (insert (Fun f ss, Fun f ts) E) \\<longleftrightarrow>\n    is_mgu \\<sigma> (E \\<union> set (zip ss ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> (insert (Fun f ss, Fun f ts) E) =\n    is_mgu \\<sigma> (E \\<union> set (zip ss ts))", "using assms"], ["proof (prove)\nusing this:\n  length ss = length ts\n\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> (insert (Fun f ss, Fun f ts) E) =\n    is_mgu \\<sigma> (E \\<union> set (zip ss ts))", "by (auto simp: is_mgu_def unifiers_insert)"], ["", "lemma is_mgu_insert_swap:\n  \"is_mgu \\<sigma> (insert (s, t) E) = is_mgu \\<sigma> (insert (t, s) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> (insert (s, t) E) = is_mgu \\<sigma> (insert (t, s) E)", "by (auto simp: is_mgu_def unifiers_def)"], ["", "lemma is_mgu_insert_Var_swap [simp]:\n  \"is_mgu \\<sigma> (insert (t, Var x) E) = is_mgu \\<sigma> (insert (Var x, t) E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> (insert (t, Var x) E) =\n    is_mgu \\<sigma> (insert (Var x, t) E)", "by (rule is_mgu_insert_swap)"], ["", "lemma is_mgu_subst_set_subst:\n  assumes \"x \\<notin> vars_term t\"\n    and \"is_mgu \\<sigma> (subst_set (subst x t) E)\" (is \"is_mgu \\<sigma> ?E\")\n  shows \"is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)\" (is \"is_mgu ?\\<sigma> ?E'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "from \\<open>is_mgu \\<sigma> ?E\\<close>"], ["proof (chain)\npicking this:\n  is_mgu \\<sigma> (subst_set (subst x t) E)", "have \"?\\<sigma> \\<in> unifiers E\"\n    and *: \"\\<forall>\\<tau>. (subst x t \\<circ>\\<^sub>s \\<tau>) \\<in> unifiers E \\<longrightarrow> (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\""], ["proof (prove)\nusing this:\n  is_mgu \\<sigma> (subst_set (subst x t) E)\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers E &&&\n    \\<forall>\\<tau>.\n       subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n       (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)", "by (auto simp: is_mgu_def)"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers E\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "then"], ["proof (chain)\npicking this:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers E\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)", "have \"?\\<sigma> \\<in> unifiers ?E'\""], ["proof (prove)\nusing this:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers E\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)", "using assms"], ["proof (prove)\nusing this:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers E\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n  x \\<notin> vars_term t\n  is_mgu \\<sigma> (subst_set (subst x t) E)\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)", "by (simp add: unifiers_insert subst_compose)"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)\n\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "moreover"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)\n\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "have \"\\<forall>\\<tau>. \\<tau> \\<in> unifiers ?E' \\<longrightarrow> (\\<exists>\\<mu>. \\<tau> = ?\\<sigma> \\<circ>\\<^sub>s \\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<longrightarrow>\n       (\\<exists>\\<mu>.\n           \\<tau> =\n           subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "assume **: \"\\<tau> \\<in> unifiers ?E'\""], ["proof (state)\nthis:\n  \\<tau> \\<in> unifiers (insert (Var x, t) E)\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "then"], ["proof (chain)\npicking this:\n  \\<tau> \\<in> unifiers (insert (Var x, t) E)", "have [simp]: \"subst x t \\<circ>\\<^sub>s \\<tau> = \\<tau>\""], ["proof (prove)\nusing this:\n  \\<tau> \\<in> unifiers (insert (Var x, t) E)\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<tau> = \\<tau>", "by (blast dest: unifiers_insert_VarD)"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<tau> = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "from unifiers_insert_Var_left [OF **]"], ["proof (chain)\npicking this:\n  \\<tau> \\<in> unifiers (subst_set (subst x t) E)", "have \"subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E\""], ["proof (prove)\nusing this:\n  \\<tau> \\<in> unifiers (subst_set (subst x t) E)\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E", "by (simp)"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "with *"], ["proof (chain)\npicking this:\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n  subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E", "obtain \\<mu> where \"\\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>\""], ["proof (prove)\nusing this:\n  \\<forall>\\<tau>.\n     subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E \\<longrightarrow>\n     (\\<exists>\\<mu>. \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n  subst x t \\<circ>\\<^sub>s \\<tau> \\<in> unifiers E\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "then"], ["proof (chain)\npicking this:\n  \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>", "have \"subst x t \\<circ>\\<^sub>s \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>\""], ["proof (prove)\nusing this:\n  \\<tau> = \\<sigma> \\<circ>\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. subst x t \\<circ>\\<^sub>s \\<tau> =\n    subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  subst x t \\<circ>\\<^sub>s \\<tau> =\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<Longrightarrow>\n       \\<exists>\\<mu>.\n          \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "then"], ["proof (chain)\npicking this:\n  subst x t \\<circ>\\<^sub>s \\<tau> =\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "show \"\\<exists>\\<mu>. \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>\""], ["proof (prove)\nusing this:\n  subst x t \\<circ>\\<^sub>s \\<tau> =\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<mu>.\n       \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<mu>.\n     \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<tau>.\n     \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<longrightarrow>\n     (\\<exists>\\<mu>.\n         \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "ultimately"], ["proof (chain)\npicking this:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)\n  \\<forall>\\<tau>.\n     \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<longrightarrow>\n     (\\<exists>\\<mu>.\n         \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>)", "show \"is_mgu ?\\<sigma> ?E'\""], ["proof (prove)\nusing this:\n  subst x t \\<circ>\\<^sub>s \\<sigma> \\<in> unifiers (insert (Var x, t) E)\n  \\<forall>\\<tau>.\n     \\<tau> \\<in> unifiers (insert (Var x, t) E) \\<longrightarrow>\n     (\\<exists>\\<mu>.\n         \\<tau> = subst x t \\<circ>\\<^sub>s \\<sigma> \\<circ>\\<^sub>s \\<mu>)\n\ngoal (1 subgoal):\n 1. is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)", "by (simp add: is_mgu_def)"], ["proof (state)\nthis:\n  is_mgu (subst x t \\<circ>\\<^sub>s \\<sigma>) (insert (Var x, t) E)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_imgu_imp_is_mgu:\n  assumes \"is_imgu \\<sigma> E\"\n  shows \"is_mgu \\<sigma> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> E", "using assms"], ["proof (prove)\nusing this:\n  is_imgu \\<sigma> E\n\ngoal (1 subgoal):\n 1. is_mgu \\<sigma> E", "by (auto simp: is_imgu_def is_mgu_def)"], ["", "end"]]}