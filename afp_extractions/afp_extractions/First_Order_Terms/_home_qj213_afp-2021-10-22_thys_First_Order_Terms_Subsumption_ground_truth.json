{"file_name": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms/Subsumption.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/First_Order_Terms", "problem_names": ["lemma litsim_refl [simp]:\n  \"s \\<doteq> s\"", "lemma litsim_sym:\n  \"s \\<doteq> t \\<Longrightarrow> t \\<doteq> s\"", "lemma litsim_trans:\n  \"s \\<doteq> t \\<Longrightarrow> t \\<doteq> u \\<Longrightarrow> s \\<doteq> u\"", "lemma subsumeseq_termE [elim]:\n  assumes \"s \\<le>\\<cdot> t\"\n  obtains \\<sigma> where \"t = s \\<cdot> \\<sigma>\"", "lemma subsumeseq_term_refl:\n  fixes t :: \"('a, 'b) term\"\n  shows \"t \\<le>\\<cdot> t\"", "lemma subsumeseq_term_trans:\n  fixes s t u :: \"('a, 'b) term\"\n  assumes \"s \\<le>\\<cdot> t\" and \"t \\<le>\\<cdot> u\"\n  shows \"s \\<le>\\<cdot> u\"", "lemma subsumeseq_term_iff:\n  \"s \\<cdot>\\<ge> t \\<longleftrightarrow> (\\<exists>\\<sigma>. s = t \\<cdot> \\<sigma>)\"", "lemma num_syms_1: \"num_syms t \\<ge> 1\"", "lemma num_syms_subst:\n  \"num_syms (t \\<cdot> \\<sigma>) \\<ge> num_syms t\"", "lemma sum_list_map_num_syms_subst:\n  assumes \"sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) = sum_list (map num_syms ts)\"\n  shows \"\\<forall>i < length ts. num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\"", "lemma subst_size_emv:\n  assumes \"s = t \\<cdot> \\<tau>\" and \"num_syms s = num_syms t\" and \"num_funs s = num_funs t\"\n  shows \"emv s t\"", "lemma subsumeseq_term_size_emv:\n  assumes \"s \\<cdot>\\<ge> t\" and \"num_syms s = num_syms t\" and \"num_funs s = num_funs t\"\n  shows \"emv s t\"", "lemma emv_subst_vars_term:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\"", "lemma emv_subst_imp_num_unique_vars_le:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"num_unique_vars s \\<le> num_unique_vars t\"", "lemma emv_subsumeseq_term_imp_num_unique_vars_le:\n  assumes \"emv s t\"\n    and \"s \\<cdot>\\<ge> t\"\n  shows \"num_unique_vars s \\<le> num_unique_vars t\"", "lemma num_syms_geq_num_vars:\n  \"num_syms t \\<ge> num_vars t\"", "lemma num_unique_vars_Fun_Cons:\n  \"num_unique_vars (Fun f (t # ts)) \\<le> num_unique_vars t + num_unique_vars (Fun f ts)\"", "lemma sum_list_map_unique_vars:\n  \"sum_list (map num_unique_vars ts) \\<ge> num_unique_vars (Fun f ts)\"", "lemma num_unique_vars_Var_1 [simp]:\n  \"num_unique_vars (Var x) = 1\"", "lemma num_vars_geq_num_unique_vars:\n  \"num_vars t \\<ge> num_unique_vars t\"", "lemma num_syms_ge_num_unique_vars:\n  \"num_syms t \\<ge> num_unique_vars t\"", "lemma num_syms_num_unique_vars_clash:\n  assumes \"\\<forall>i. num_syms (f i) = num_syms (f (Suc i))\"\n    and \"\\<forall>i. num_unique_vars (f i) < num_unique_vars (f (Suc i))\"\n  shows False", "lemma emv_subst_imp_is_Var:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"\\<forall>x \\<in> vars_term t. is_Var (\\<sigma> x)\"", "lemma bij_Var_subst_compose_Var:\n  assumes \"bij g\"\n  shows \"(Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g) = Var\"", "lemma wf_subsumes:\n  \"wf ({<\\<cdot>} :: ('f, 'v) term rel)\""], "translations": [["", "lemma litsim_refl [simp]:\n  \"s \\<doteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<doteq> s", "by (auto simp: litsim_def refl)"], ["", "lemma litsim_sym:\n  \"s \\<doteq> t \\<Longrightarrow> t \\<doteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<doteq> t \\<Longrightarrow> t \\<doteq> s", "by (auto simp: litsim_def)"], ["", "lemma litsim_trans:\n  \"s \\<doteq> t \\<Longrightarrow> t \\<doteq> u \\<Longrightarrow> s \\<doteq> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<doteq> t; t \\<doteq> u\\<rbrakk>\n    \\<Longrightarrow> s \\<doteq> u", "by (auto simp: litsim_def dest: trans)"], ["", "end"], ["", "sublocale subsumable \\<subseteq> subsumption: preorder \"(\\<le>\\<cdot>)\" \"(<\\<cdot>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.preorder (\\<le>\\<cdot>) (<\\<cdot>)", "by (unfold_locales) (auto simp: subsumes_def refl elim: trans)"], ["", "inductive subsumeseq_term :: \"('a, 'b) term \\<Rightarrow> ('a, 'b) term \\<Rightarrow> bool\"\n  where\n    [intro]: \"t = s \\<cdot> \\<sigma> \\<Longrightarrow> subsumeseq_term s t\""], ["", "adhoc_overloading\n  SUBSUMESEQ subsumeseq_term"], ["", "lemma subsumeseq_termE [elim]:\n  assumes \"s \\<le>\\<cdot> t\"\n  obtains \\<sigma> where \"t = s \\<cdot> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        t = s \\<cdot> \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<le>\\<cdot> t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        t = s \\<cdot> \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases)"], ["", "lemma subsumeseq_term_refl:\n  fixes t :: \"('a, 'b) term\"\n  shows \"t \\<le>\\<cdot> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<le>\\<cdot> t", "by (rule subsumeseq_term.intros [of t t Var]) simp"], ["", "lemma subsumeseq_term_trans:\n  fixes s t u :: \"('a, 'b) term\"\n  assumes \"s \\<le>\\<cdot> t\" and \"t \\<le>\\<cdot> u\"\n  shows \"s \\<le>\\<cdot> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<le>\\<cdot> u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<le>\\<cdot> u", "obtain \\<sigma> \\<tau>\n    where [simp]: \"t = s \\<cdot> \\<sigma>\" \"u = t \\<cdot> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<tau>.\n        \\<lbrakk>t = s \\<cdot> \\<sigma>; u = t \\<cdot> \\<tau>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<le>\\<cdot> t\n  t \\<le>\\<cdot> u\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<tau>.\n        \\<lbrakk>t = s \\<cdot> \\<sigma>; u = t \\<cdot> \\<tau>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t = s \\<cdot> \\<sigma>\n  u = t \\<cdot> \\<tau>\n\ngoal (1 subgoal):\n 1. s \\<le>\\<cdot> u", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<le>\\<cdot> u", "by (rule subsumeseq_term.intros [of _ _ \"\\<sigma> \\<circ>\\<^sub>s \\<tau>\"]) simp"], ["proof (state)\nthis:\n  s \\<le>\\<cdot> u\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation term_subsumable: subsumable subsumeseq_term"], ["proof (prove)\ngoal (1 subgoal):\n 1. subsumable (\\<le>\\<cdot>)", "by standard (force simp: subsumeseq_term_refl dest: subsumeseq_term_trans)+"], ["", "adhoc_overloading\n  SUBSUMES term_subsumable.subsumes and\n  LITSIM term_subsumable.litsim"], ["", "lemma subsumeseq_term_iff:\n  \"s \\<cdot>\\<ge> t \\<longleftrightarrow> (\\<exists>\\<sigma>. s = t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t \\<le>\\<cdot> s) = (\\<exists>\\<sigma>. s = t \\<cdot> \\<sigma>)", "by auto"], ["", "fun num_syms :: \"('f, 'v) term \\<Rightarrow> nat\"\n  where\n    \"num_syms (Var x) = 1\" |\n    \"num_syms (Fun f ts) = Suc (sum_list (map num_syms ts))\""], ["", "fun num_vars :: \"('f, 'v) term \\<Rightarrow> nat\"\n  where\n    \"num_vars (Var x) = 1\" |\n    \"num_vars (Fun f ts) = sum_list (map num_vars ts)\""], ["", "definition num_unique_vars :: \"('f, 'v) term \\<Rightarrow> nat\"\n  where\n    \"num_unique_vars t = card (vars_term t)\""], ["", "lemma num_syms_1: \"num_syms t \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> num_syms t", "by (induct t) auto"], ["", "lemma num_syms_subst:\n  \"num_syms (t \\<cdot> \\<sigma>) \\<ge> num_syms t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)", "using num_syms_1"], ["proof (prove)\nusing this:\n  1 \\<le> num_syms ?t\n\ngoal (1 subgoal):\n 1. num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)", "by (induct t) (auto, metis comp_apply sum_list_mono)"], ["", "subsection \\<open>Equality of terms modulo variables\\<close>"], ["", "inductive emv where\n  Var [simp, intro!]: \"emv (Var x) (Var y)\" |\n  Fun [intro]: \"\\<lbrakk>f = g; length ss = length ts; \\<forall>i < length ts. emv (ss ! i) (ts ! i)\\<rbrakk> \\<Longrightarrow>\n    emv (Fun f ss) (Fun g ts)\""], ["", "lemma sum_list_map_num_syms_subst:\n  assumes \"sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) = sum_list (map num_syms ts)\"\n  shows \"\\<forall>i < length ts. num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length ts.\n       num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)", "using assms"], ["proof (prove)\nusing this:\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  sum_list (map num_syms ts)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ts.\n       num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)", "proof (induct ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "case (Cons t ts)"], ["proof (state)\nthis:\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts.\n     num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\n  sum_list\n   (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) (t # ts)) =\n  sum_list (map num_syms (t # ts))\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "then"], ["proof (chain)\npicking this:\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts.\n     num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\n  sum_list\n   (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) (t # ts)) =\n  sum_list (map num_syms (t # ts))", "have \"num_syms (t \\<cdot> \\<sigma>) + sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)\n    = num_syms t + sum_list (map num_syms ts)\""], ["proof (prove)\nusing this:\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts.\n     num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\n  sum_list\n   (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) (t # ts)) =\n  sum_list (map num_syms (t # ts))\n\ngoal (1 subgoal):\n 1. num_syms (t \\<cdot> \\<sigma>) +\n    sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n    num_syms t + sum_list (map num_syms ts)", "by (simp add: o_def)"], ["proof (state)\nthis:\n  num_syms (t \\<cdot> \\<sigma>) +\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  num_syms t + sum_list (map num_syms ts)\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "moreover"], ["proof (state)\nthis:\n  num_syms (t \\<cdot> \\<sigma>) +\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  num_syms t + sum_list (map num_syms ts)\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "have \"num_syms (t \\<cdot> \\<sigma>) \\<ge> num_syms t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)", "by (metis num_syms_subst)"], ["proof (state)\nthis:\n  num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "moreover"], ["proof (state)\nthis:\n  num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "have \"sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) \\<ge> sum_list (map num_syms ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map num_syms ts)\n    \\<le> sum_list\n           (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)", "using num_syms_subst [of _ \\<sigma>]"], ["proof (prove)\nusing this:\n  num_syms ?t \\<le> num_syms (?t \\<cdot> \\<sigma>)\n\ngoal (1 subgoal):\n 1. sum_list (map num_syms ts)\n    \\<le> sum_list\n           (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)", "by (induct ts) (auto intro: add_mono)"], ["proof (state)\nthis:\n  sum_list (map num_syms ts)\n  \\<le> sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)\n\ngoal (2 subgoals):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)\n 2. \\<And>a ts.\n       \\<lbrakk>sum_list\n                 (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n                   ts) =\n                sum_list (map num_syms ts) \\<Longrightarrow>\n                \\<forall>i<length ts.\n                   num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i);\n        sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>))\n           (a # ts)) =\n        sum_list (map num_syms (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (a # ts).\n                            num_syms ((a # ts) ! i \\<cdot> \\<sigma>) =\n                            num_syms ((a # ts) ! i)", "ultimately"], ["proof (chain)\npicking this:\n  num_syms (t \\<cdot> \\<sigma>) +\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  num_syms t + sum_list (map num_syms ts)\n  num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)\n  sum_list (map num_syms ts)\n  \\<le> sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)", "show ?case"], ["proof (prove)\nusing this:\n  num_syms (t \\<cdot> \\<sigma>) +\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  num_syms t + sum_list (map num_syms ts)\n  num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)\n  sum_list (map num_syms ts)\n  \\<le> sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (t # ts).\n       num_syms ((t # ts) ! i \\<cdot> \\<sigma>) = num_syms ((t # ts) ! i)", "using Cons"], ["proof (prove)\nusing this:\n  num_syms (t \\<cdot> \\<sigma>) +\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  num_syms t + sum_list (map num_syms ts)\n  num_syms t \\<le> num_syms (t \\<cdot> \\<sigma>)\n  sum_list (map num_syms ts)\n  \\<le> sum_list\n         (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts)\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts.\n     num_syms (ts ! i \\<cdot> \\<sigma>) = num_syms (ts ! i)\n  sum_list\n   (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) (t # ts)) =\n  sum_list (map num_syms (t # ts))\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (t # ts).\n       num_syms ((t # ts) ! i \\<cdot> \\<sigma>) = num_syms ((t # ts) ! i)", "by (auto) (case_tac i, auto)"], ["proof (state)\nthis:\n  \\<forall>i<length (t # ts).\n     num_syms ((t # ts) ! i \\<cdot> \\<sigma>) = num_syms ((t # ts) ! i)\n\ngoal (1 subgoal):\n 1. sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<sigma>)) []) =\n    sum_list (map num_syms []) \\<Longrightarrow>\n    \\<forall>i<length [].\n       num_syms ([] ! i \\<cdot> \\<sigma>) = num_syms ([] ! i)", "qed simp"], ["", "lemma subst_size_emv:\n  assumes \"s = t \\<cdot> \\<tau>\" and \"num_syms s = num_syms t\" and \"num_funs s = num_funs t\"\n  shows \"emv s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emv s t", "using assms"], ["proof (prove)\nusing this:\n  s = t \\<cdot> \\<tau>\n  num_syms s = num_syms t\n  num_funs s = num_funs t\n\ngoal (1 subgoal):\n 1. emv s t", "proof (induct t arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>s = Var x \\<cdot> \\<tau>; num_syms s = num_syms (Var x);\n        num_funs s = num_funs (Var x)\\<rbrakk>\n       \\<Longrightarrow> emv s (Var x)\n 2. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "case (Var x)"], ["proof (state)\nthis:\n  s = Var x \\<cdot> \\<tau>\n  num_syms s = num_syms (Var x)\n  num_funs s = num_funs (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>s = Var x \\<cdot> \\<tau>; num_syms s = num_syms (Var x);\n        num_funs s = num_funs (Var x)\\<rbrakk>\n       \\<Longrightarrow> emv s (Var x)\n 2. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  s = Var x \\<cdot> \\<tau>\n  num_syms s = num_syms (Var x)\n  num_funs s = num_funs (Var x)", "show ?case"], ["proof (prove)\nusing this:\n  s = Var x \\<cdot> \\<tau>\n  num_syms s = num_syms (Var x)\n  num_funs s = num_funs (Var x)\n\ngoal (1 subgoal):\n 1. emv s (Var x)", "by (force elim: num_funs_0)"], ["proof (state)\nthis:\n  emv s (Var x)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "case (Fun g ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> set ts; ?s = ?x2a \\<cdot> \\<tau>;\n   num_syms ?s = num_syms ?x2a; num_funs ?s = num_funs ?x2a\\<rbrakk>\n  \\<Longrightarrow> emv ?s ?x2a\n  s = Fun g ts \\<cdot> \\<tau>\n  num_syms s = num_syms (Fun g ts)\n  num_funs s = num_funs (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "note IH = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> set ts; ?s = ?x2a \\<cdot> \\<tau>;\n   num_syms ?s = num_syms ?x2a; num_funs ?s = num_funs ?x2a\\<rbrakk>\n  \\<Longrightarrow> emv ?s ?x2a\n  s = Fun g ts \\<cdot> \\<tau>\n  num_syms s = num_syms (Fun g ts)\n  num_funs s = num_funs (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 s.\n       \\<lbrakk>\\<And>x2a s.\n                   \\<lbrakk>x2a \\<in> set x2; s = x2a \\<cdot> \\<tau>;\n                    num_syms s = num_syms x2a;\n                    num_funs s = num_funs x2a\\<rbrakk>\n                   \\<Longrightarrow> emv s x2a;\n        s = Fun x1a x2 \\<cdot> \\<tau>; num_syms s = num_syms (Fun x1a x2);\n        num_funs s = num_funs (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> emv s (Fun x1a x2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. emv s (Fun g ts)", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. s = Var x1 \\<Longrightarrow> emv s (Fun g ts)\n 2. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "case (Var x)"], ["proof (state)\nthis:\n  s = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Var x1 \\<Longrightarrow> emv s (Fun g ts)\n 2. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "then"], ["proof (chain)\npicking this:\n  s = Var x", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Var x\n\ngoal (1 subgoal):\n 1. emv s (Fun g ts)", "using Fun"], ["proof (prove)\nusing this:\n  s = Var x\n  \\<lbrakk>?x2a \\<in> set ts; ?s = ?x2a \\<cdot> \\<tau>;\n   num_syms ?s = num_syms ?x2a; num_funs ?s = num_funs ?x2a\\<rbrakk>\n  \\<Longrightarrow> emv ?s ?x2a\n  s = Fun g ts \\<cdot> \\<tau>\n  num_syms s = num_syms (Fun g ts)\n  num_funs s = num_funs (Fun g ts)\n\ngoal (1 subgoal):\n 1. emv s (Fun g ts)", "by simp"], ["proof (state)\nthis:\n  emv s (Fun g ts)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "case (Fun f ss)"], ["proof (state)\nthis:\n  s = Fun f ss\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "from IH(2-) [unfolded Fun]\n      and sum_list_map_num_syms_subst [of \\<tau> ts]\n      and sum_list_map_num_funs_subst [of \\<tau> ts]"], ["proof (chain)\npicking this:\n  Fun f ss = Fun g ts \\<cdot> \\<tau>\n  num_syms (Fun f ss) = num_syms (Fun g ts)\n  num_funs (Fun f ss) = num_funs (Fun g ts)\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<tau>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts. num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i)\n  sum_list (map (num_funs \\<circ> (\\<lambda>t. t \\<cdot> \\<tau>)) ts) =\n  sum_list (map num_funs ts) \\<Longrightarrow>\n  \\<forall>i<length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)", "have \"\\<forall>i < length ts. num_syms (ts ! i  \\<cdot> \\<tau>) = num_syms (ts ! i)\"\n      and \"\\<forall>i < length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)\""], ["proof (prove)\nusing this:\n  Fun f ss = Fun g ts \\<cdot> \\<tau>\n  num_syms (Fun f ss) = num_syms (Fun g ts)\n  num_funs (Fun f ss) = num_funs (Fun g ts)\n  sum_list (map (num_syms \\<circ> (\\<lambda>t. t \\<cdot> \\<tau>)) ts) =\n  sum_list (map num_syms ts) \\<Longrightarrow>\n  \\<forall>i<length ts. num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i)\n  sum_list (map (num_funs \\<circ> (\\<lambda>t. t \\<cdot> \\<tau>)) ts) =\n  sum_list (map num_funs ts) \\<Longrightarrow>\n  \\<forall>i<length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ts.\n       num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i) &&&\n    \\<forall>i<length ts.\n       num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length ts. num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i)\n  \\<forall>i<length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22. s = Fun x21 x22 \\<Longrightarrow> emv s (Fun g ts)", "with Fun and IH"], ["proof (chain)\npicking this:\n  s = Fun f ss\n  \\<lbrakk>?x2a \\<in> set ts; ?s = ?x2a \\<cdot> \\<tau>;\n   num_syms ?s = num_syms ?x2a; num_funs ?s = num_funs ?x2a\\<rbrakk>\n  \\<Longrightarrow> emv ?s ?x2a\n  s = Fun g ts \\<cdot> \\<tau>\n  num_syms s = num_syms (Fun g ts)\n  num_funs s = num_funs (Fun g ts)\n  \\<forall>i<length ts. num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i)\n  \\<forall>i<length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = Fun f ss\n  \\<lbrakk>?x2a \\<in> set ts; ?s = ?x2a \\<cdot> \\<tau>;\n   num_syms ?s = num_syms ?x2a; num_funs ?s = num_funs ?x2a\\<rbrakk>\n  \\<Longrightarrow> emv ?s ?x2a\n  s = Fun g ts \\<cdot> \\<tau>\n  num_syms s = num_syms (Fun g ts)\n  num_funs s = num_funs (Fun g ts)\n  \\<forall>i<length ts. num_syms (ts ! i \\<cdot> \\<tau>) = num_syms (ts ! i)\n  \\<forall>i<length ts. num_funs (ts ! i \\<cdot> \\<tau>) = num_funs (ts ! i)\n\ngoal (1 subgoal):\n 1. emv s (Fun g ts)", "by auto"], ["proof (state)\nthis:\n  emv s (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  emv s (Fun g ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subsumeseq_term_size_emv:\n  assumes \"s \\<cdot>\\<ge> t\" and \"num_syms s = num_syms t\" and \"num_funs s = num_funs t\"\n  shows \"emv s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emv s t", "using assms(1) and subst_size_emv [OF _ assms(2-)]"], ["proof (prove)\nusing this:\n  t \\<le>\\<cdot> s\n  s = t \\<cdot> ?\\<tau> \\<Longrightarrow> emv s t\n\ngoal (1 subgoal):\n 1. emv s t", "by (cases) simp"], ["", "lemma emv_subst_vars_term:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t", "using assms [unfolded subsumeseq_term_iff]"], ["proof (prove)\nusing this:\n  emv s t\n  s = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t", "apply (induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       Var x = Var y \\<cdot> \\<sigma> \\<Longrightarrow>\n       vars_term (Var x) = (the_Var \\<circ> \\<sigma>) ` vars_term (Var y)\n 2. \\<And>f g ss ts.\n       \\<lbrakk>f = g; length ss = length ts;\n        \\<forall>i<length ts.\n           emv (ss ! i) (ts ! i) \\<and>\n           (ss ! i = ts ! i \\<cdot> \\<sigma> \\<longrightarrow>\n            vars_term (ss ! i) =\n            (the_Var \\<circ> \\<sigma>) ` vars_term (ts ! i));\n        Fun f ss = Fun g ts \\<cdot> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> vars_term (Fun f ss) =\n                         (the_Var \\<circ> \\<sigma>) ` vars_term (Fun g ts)", "apply (auto simp: in_set_conv_nth iff: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ts i xa.\n       \\<lbrakk>\\<forall>i<length ts.\n                   emv (ts ! i \\<cdot> \\<sigma>) (ts ! i) \\<and>\n                   vars_term (ts ! i \\<cdot> \\<sigma>) =\n                   (\\<lambda>x. the_Var (\\<sigma> x)) ` vars_term (ts ! i);\n        i < length ts; xa \\<in> vars_term (ts ! i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>set ts.\n                            \\<exists>x\\<in>vars_term y.\n                               the_Var (\\<sigma> xa) = the_Var (\\<sigma> x)\n 2. \\<And>ts xa i.\n       \\<lbrakk>\\<forall>i<length ts.\n                   emv (ts ! i \\<cdot> \\<sigma>) (ts ! i) \\<and>\n                   vars_term (ts ! i \\<cdot> \\<sigma>) =\n                   (\\<lambda>x. the_Var (\\<sigma> x)) ` vars_term (ts ! i);\n        xa \\<in> vars_term (ts ! i); i < length ts\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set ts.\n                            the_Var (\\<sigma> xa)\n                            \\<in> vars_term (x \\<cdot> \\<sigma>)", "apply (metis nth_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ts xa i.\n       \\<lbrakk>\\<forall>i<length ts.\n                   emv (ts ! i \\<cdot> \\<sigma>) (ts ! i) \\<and>\n                   vars_term (ts ! i \\<cdot> \\<sigma>) =\n                   (\\<lambda>x. the_Var (\\<sigma> x)) ` vars_term (ts ! i);\n        xa \\<in> vars_term (ts ! i); i < length ts\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>set ts.\n                            the_Var (\\<sigma> xa)\n                            \\<in> vars_term (x \\<cdot> \\<sigma>)", "by (metis comp_apply imageI nth_mem)"], ["", "lemma emv_subst_imp_num_unique_vars_le:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"num_unique_vars s \\<le> num_unique_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars s \\<le> num_unique_vars t", "using emv_subst_vars_term [OF assms]"], ["proof (prove)\nusing this:\n  vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\n\ngoal (1 subgoal):\n 1. num_unique_vars s \\<le> num_unique_vars t", "apply (simp add: num_unique_vars_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term s =\n    (\\<lambda>x. the_Var (\\<sigma> x)) ` vars_term t \\<Longrightarrow>\n    card ((\\<lambda>x. the_Var (\\<sigma> x)) ` vars_term t)\n    \\<le> card (vars_term t)", "by (metis card_image_le finite_vars_term)"], ["", "lemma emv_subsumeseq_term_imp_num_unique_vars_le:\n  assumes \"emv s t\"\n    and \"s \\<cdot>\\<ge> t\"\n  shows \"num_unique_vars s \\<le> num_unique_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars s \\<le> num_unique_vars t", "using assms(2) and emv_subst_imp_num_unique_vars_le [OF assms(1)]"], ["proof (prove)\nusing this:\n  t \\<le>\\<cdot> s\n  s = t \\<cdot> ?\\<sigma> \\<Longrightarrow>\n  num_unique_vars s \\<le> num_unique_vars t\n\ngoal (1 subgoal):\n 1. num_unique_vars s \\<le> num_unique_vars t", "by (cases) simp"], ["", "lemma num_syms_geq_num_vars:\n  \"num_syms t \\<ge> num_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_vars t \\<le> num_syms t", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. num_vars (Var x) \\<le> num_syms (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           num_vars x2a \\<le> num_syms x2a) \\<Longrightarrow>\n       num_vars (Fun x1a x2) \\<le> num_syms (Fun x1a x2)", "case (Fun f ts)"], ["proof (state)\nthis:\n  ?x2a \\<in> set ts \\<Longrightarrow> num_vars ?x2a \\<le> num_syms ?x2a\n\ngoal (2 subgoals):\n 1. \\<And>x. num_vars (Var x) \\<le> num_syms (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           num_vars x2a \\<le> num_syms x2a) \\<Longrightarrow>\n       num_vars (Fun x1a x2) \\<le> num_syms (Fun x1a x2)", "with sum_list_mono [of ts num_vars num_syms]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      x \\<in> set ts \\<Longrightarrow>\n      num_vars x \\<le> num_syms x) \\<Longrightarrow>\n  sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)\n  ?x2a \\<in> set ts \\<Longrightarrow> num_vars ?x2a \\<le> num_syms ?x2a", "have \"sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> set ts \\<Longrightarrow>\n      num_vars x \\<le> num_syms x) \\<Longrightarrow>\n  sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)\n  ?x2a \\<in> set ts \\<Longrightarrow> num_vars ?x2a \\<le> num_syms ?x2a\n\ngoal (1 subgoal):\n 1. sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)", "by simp"], ["proof (state)\nthis:\n  sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)\n\ngoal (2 subgoals):\n 1. \\<And>x. num_vars (Var x) \\<le> num_syms (Var x)\n 2. \\<And>x1a x2.\n       (\\<And>x2a.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           num_vars x2a \\<le> num_syms x2a) \\<Longrightarrow>\n       num_vars (Fun x1a x2) \\<le> num_syms (Fun x1a x2)", "then"], ["proof (chain)\npicking this:\n  sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)", "show ?case"], ["proof (prove)\nusing this:\n  sum_list (map num_vars ts) \\<le> sum_list (map num_syms ts)\n\ngoal (1 subgoal):\n 1. num_vars (Fun f ts) \\<le> num_syms (Fun f ts)", "by simp"], ["proof (state)\nthis:\n  num_vars (Fun f ts) \\<le> num_syms (Fun f ts)\n\ngoal (1 subgoal):\n 1. \\<And>x. num_vars (Var x) \\<le> num_syms (Var x)", "qed simp"], ["", "lemma num_unique_vars_Fun_Cons:\n  \"num_unique_vars (Fun f (t # ts)) \\<le> num_unique_vars t + num_unique_vars (Fun f ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars (Fun f (t # ts))\n    \\<le> num_unique_vars t + num_unique_vars (Fun f ts)", "apply (simp_all add: num_unique_vars_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars_term t \\<union> \\<Union> (vars_term ` set ts))\n    \\<le> card (vars_term t) + card (\\<Union> (vars_term ` set ts))", "unfolding card_Un_Int [OF finite_vars_term finite_Union_vars_term]"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (vars_term t \\<union> \\<Union> (vars_term ` set ts))\n    \\<le> card (vars_term t \\<union> \\<Union> (vars_term ` set ts)) +\n          card (vars_term t \\<inter> \\<Union> (vars_term ` set ts))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_list_map_unique_vars:\n  \"sum_list (map num_unique_vars ts) \\<ge> num_unique_vars (Fun f ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars (Fun f ts) \\<le> sum_list (map num_unique_vars ts)", "proof (induct ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. num_unique_vars (Fun f []) \\<le> sum_list (map num_unique_vars [])\n 2. \\<And>a ts.\n       num_unique_vars (Fun f ts)\n       \\<le> sum_list (map num_unique_vars ts) \\<Longrightarrow>\n       num_unique_vars (Fun f (a # ts))\n       \\<le> sum_list (map num_unique_vars (a # ts))", "case (Cons t ts)"], ["proof (state)\nthis:\n  num_unique_vars (Fun f ts) \\<le> sum_list (map num_unique_vars ts)\n\ngoal (2 subgoals):\n 1. num_unique_vars (Fun f []) \\<le> sum_list (map num_unique_vars [])\n 2. \\<And>a ts.\n       num_unique_vars (Fun f ts)\n       \\<le> sum_list (map num_unique_vars ts) \\<Longrightarrow>\n       num_unique_vars (Fun f (a # ts))\n       \\<le> sum_list (map num_unique_vars (a # ts))", "with num_unique_vars_Fun_Cons [of f t ts]"], ["proof (chain)\npicking this:\n  num_unique_vars (Fun f (t # ts))\n  \\<le> num_unique_vars t + num_unique_vars (Fun f ts)\n  num_unique_vars (Fun f ts) \\<le> sum_list (map num_unique_vars ts)", "show ?case"], ["proof (prove)\nusing this:\n  num_unique_vars (Fun f (t # ts))\n  \\<le> num_unique_vars t + num_unique_vars (Fun f ts)\n  num_unique_vars (Fun f ts) \\<le> sum_list (map num_unique_vars ts)\n\ngoal (1 subgoal):\n 1. num_unique_vars (Fun f (t # ts))\n    \\<le> sum_list (map num_unique_vars (t # ts))", "by simp"], ["proof (state)\nthis:\n  num_unique_vars (Fun f (t # ts))\n  \\<le> sum_list (map num_unique_vars (t # ts))\n\ngoal (1 subgoal):\n 1. num_unique_vars (Fun f []) \\<le> sum_list (map num_unique_vars [])", "qed (simp add: num_unique_vars_def)"], ["", "lemma num_unique_vars_Var_1 [simp]:\n  \"num_unique_vars (Var x) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars (Var x) = 1", "by (simp_all add: num_unique_vars_def)"], ["", "lemma num_vars_geq_num_unique_vars:\n  \"num_vars t \\<ge> num_unique_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars t \\<le> num_vars t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. num_unique_vars t \\<le> num_vars t", "note * =\n    sum_list_mono [of _ num_unique_vars num_vars, THEN sum_list_map_unique_vars [THEN le_trans]]"], ["proof (state)\nthis:\n  (\\<And>x.\n      x \\<in> set ?ts1 \\<Longrightarrow>\n      num_unique_vars x \\<le> num_vars x) \\<Longrightarrow>\n  num_unique_vars (Fun ?f1 ?ts1) \\<le> sum_list (map num_vars ?ts1)\n\ngoal (1 subgoal):\n 1. num_unique_vars t \\<le> num_vars t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars t \\<le> num_vars t", "by (induct t) (auto intro: *)"], ["proof (state)\nthis:\n  num_unique_vars t \\<le> num_vars t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma num_syms_ge_num_unique_vars:\n  \"num_syms t \\<ge> num_unique_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_unique_vars t \\<le> num_syms t", "by (metis le_trans num_syms_geq_num_vars num_vars_geq_num_unique_vars)"], ["", "lemma num_syms_num_unique_vars_clash:\n  assumes \"\\<forall>i. num_syms (f i) = num_syms (f (Suc i))\"\n    and \"\\<forall>i. num_unique_vars (f i) < num_unique_vars (f (Suc i))\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have *: \"\\<forall>i j. i \\<le> j \\<longrightarrow> num_syms (f i) = num_syms (f j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j.\n       i \\<le> j \\<longrightarrow> num_syms (f i) = num_syms (f j)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. i \\<le> j \\<Longrightarrow> num_syms (f i) = num_syms (f j)", "fix i j :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. i \\<le> j \\<Longrightarrow> num_syms (f i) = num_syms (f j)", "assume \"i \\<le> j\""], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>i j. i \\<le> j \\<Longrightarrow> num_syms (f i) = num_syms (f j)", "then"], ["proof (chain)\npicking this:\n  i \\<le> j", "show \"num_syms (f i) = num_syms (f j)\""], ["proof (prove)\nusing this:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. num_syms (f i) = num_syms (f j)", "using assms(1)"], ["proof (prove)\nusing this:\n  i \\<le> j\n  \\<forall>i. num_syms (f i) = num_syms (f (Suc i))\n\ngoal (1 subgoal):\n 1. num_syms (f i) = num_syms (f j)", "apply (induct \"j - i\" arbitrary: i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 = j - i; i \\<le> j;\n        \\<forall>i. num_syms (f i) = num_syms (f (Suc i))\\<rbrakk>\n       \\<Longrightarrow> num_syms (f i) = num_syms (f j)\n 2. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = j - i; i \\<le> j;\n                    \\<forall>i.\n                       num_syms (f i) = num_syms (f (Suc i))\\<rbrakk>\n                   \\<Longrightarrow> num_syms (f i) = num_syms (f j);\n        Suc x = j - i; i \\<le> j;\n        \\<forall>i. num_syms (f i) = num_syms (f (Suc i))\\<rbrakk>\n       \\<Longrightarrow> num_syms (f i) = num_syms (f j)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>x = j - i; i \\<le> j\\<rbrakk>\n                   \\<Longrightarrow> num_syms (f i) = num_syms (f j);\n        Suc x = j - i; i \\<le> j;\n        \\<forall>i. num_syms (f i) = num_syms (f (Suc i))\\<rbrakk>\n       \\<Longrightarrow> num_syms (f i) = num_syms (f j)", "by (metis Suc_diff_diff diff_zero less_eq_Suc_le order.not_eq_order_implies_strict)"], ["proof (state)\nthis:\n  num_syms (f i) = num_syms (f j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i j. i \\<le> j \\<longrightarrow> num_syms (f i) = num_syms (f j)\n\ngoal (1 subgoal):\n 1. False", "have \"\\<exists>i. num_unique_vars (f i) \\<ge> num_syms (f 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. num_syms (f 0) \\<le> num_unique_vars (f i)", "using inc_seq_greater [OF assms(2), of \"num_syms (f 0)\"]"], ["proof (prove)\nusing this:\n  \\<exists>i. num_syms (f 0) < num_unique_vars (f i)\n\ngoal (1 subgoal):\n 1. \\<exists>i. num_syms (f 0) \\<le> num_unique_vars (f i)", "by (metis nat_less_le)"], ["proof (state)\nthis:\n  \\<exists>i. num_syms (f 0) \\<le> num_unique_vars (f i)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. num_syms (f 0) \\<le> num_unique_vars (f i)", "obtain i where \"num_unique_vars (f i) \\<ge> num_syms (f 0)\""], ["proof (prove)\nusing this:\n  \\<exists>i. num_syms (f 0) \\<le> num_unique_vars (f i)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        num_syms (f 0) \\<le> num_unique_vars (f i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  num_syms (f 0) \\<le> num_unique_vars (f i)\n\ngoal (1 subgoal):\n 1. False", "with * and assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>i j. i \\<le> j \\<longrightarrow> num_syms (f i) = num_syms (f j)\n  \\<forall>i. num_unique_vars (f i) < num_unique_vars (f (Suc i))\n  num_syms (f 0) \\<le> num_unique_vars (f i)", "have \"num_unique_vars (f (Suc i)) > num_syms (f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i j. i \\<le> j \\<longrightarrow> num_syms (f i) = num_syms (f j)\n  \\<forall>i. num_unique_vars (f i) < num_unique_vars (f (Suc i))\n  num_syms (f 0) \\<le> num_unique_vars (f i)\n\ngoal (1 subgoal):\n 1. num_syms (f (Suc i)) < num_unique_vars (f (Suc i))", "by (metis le0 le_antisym num_syms_ge_num_unique_vars)"], ["proof (state)\nthis:\n  num_syms (f (Suc i)) < num_unique_vars (f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  num_syms (f (Suc i)) < num_unique_vars (f (Suc i))", "show False"], ["proof (prove)\nusing this:\n  num_syms (f (Suc i)) < num_unique_vars (f (Suc i))\n\ngoal (1 subgoal):\n 1. False", "by (metis less_Suc_eq_le not_less_eq num_syms_ge_num_unique_vars)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emv_subst_imp_is_Var:\n  assumes \"emv s t\"\n    and \"s = t \\<cdot> \\<sigma>\"\n  shows \"\\<forall>x \\<in> vars_term t. is_Var (\\<sigma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars_term t. is_Var (\\<sigma> x)", "using assms"], ["proof (prove)\nusing this:\n  emv s t\n  s = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars_term t. is_Var (\\<sigma> x)", "apply (induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       Var x = Var y \\<cdot> \\<sigma> \\<Longrightarrow>\n       \\<forall>x\\<in>vars_term (Var y). is_Var (\\<sigma> x)\n 2. \\<And>f g ss ts.\n       \\<lbrakk>f = g; length ss = length ts;\n        \\<forall>i<length ts.\n           emv (ss ! i) (ts ! i) \\<and>\n           (ss ! i = ts ! i \\<cdot> \\<sigma> \\<longrightarrow>\n            (\\<forall>x\\<in>vars_term (ts ! i). is_Var (\\<sigma> x)));\n        Fun f ss = Fun g ts \\<cdot> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>vars_term (Fun g ts).\n                            is_Var (\\<sigma> x)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ts y x.\n       \\<lbrakk>\\<forall>i<length ts.\n                   emv (ts ! i \\<cdot> \\<sigma>) (ts ! i) \\<and>\n                   (\\<forall>x\\<in>vars_term (ts ! i). is_Var (\\<sigma> x));\n        y \\<in> set ts; x \\<in> vars_term y\\<rbrakk>\n       \\<Longrightarrow> is_Var (\\<sigma> x)", "by (metis in_set_conv_nth)"], ["", "lemma bij_Var_subst_compose_Var:\n  assumes \"bij g\"\n  shows \"(Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g) = Var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g) = Var", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x", "show \"((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x", "using assms"], ["proof (prove)\nusing this:\n  bij g\n\ngoal (1 subgoal):\n 1. ((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x", "apply (auto simp: subst_compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij g \\<Longrightarrow> inv g (g x) = x", "by (metis UNIV_I bij_is_inj inv_into_f_f)"], ["proof (state)\nthis:\n  ((Var \\<circ> g) \\<circ>\\<^sub>s (Var \\<circ> inv g)) x = Var x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Well-foundedness\\<close>"], ["", "lemma wf_subsumes:\n  \"wf ({<\\<cdot>} :: ('f, 'v) term rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {<\\<cdot>}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> wf {<\\<cdot>}\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> wf {<\\<cdot>}", "obtain f :: \"('f, 'v) term seq\"\n    where strict: \"\\<forall>i. f i \\<cdot>> f (Suc i)\""], ["proof (prove)\nusing this:\n  \\<not> wf {<\\<cdot>}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>i. f (Suc i) <\\<cdot> f i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis mem_Collect_eq case_prodD wf_iff_no_infinite_down_chain)"], ["proof (state)\nthis:\n  \\<forall>i. f (Suc i) <\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. f (Suc i) <\\<cdot> f i", "have *: \"\\<forall>i. f i \\<cdot>\\<ge> f (Suc i)\""], ["proof (prove)\nusing this:\n  \\<forall>i. f (Suc i) <\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<forall>i. f (Suc i) \\<le>\\<cdot> f i", "by (metis term_subsumable.subsumption.less_imp_le)"], ["proof (state)\nthis:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i", "have \"\\<forall>i. num_syms (f i) \\<ge> num_syms (f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<forall>i. num_syms (f (Suc i)) \\<le> num_syms (f i)", "by (auto simp: subsumeseq_term_iff) (metis num_syms_subst)"], ["proof (state)\nthis:\n  \\<forall>i. num_syms (f (Suc i)) \\<le> num_syms (f i)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from down_chain_imp_eq [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>N. \\<forall>i>N. num_syms (f i) = num_syms (f (Suc i))", "obtain N\n    where N_syms: \"\\<forall>i > N. num_syms (f i) = num_syms (f (Suc i))\""], ["proof (prove)\nusing this:\n  \\<exists>N. \\<forall>i>N. num_syms (f i) = num_syms (f (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        \\<forall>i>N.\n           num_syms (f i) = num_syms (f (Suc i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>i>N. num_syms (f i) = num_syms (f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "define g where \"g i = f (i + N)\" for i"], ["proof (state)\nthis:\n  g ?i = f (?i + N)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from *"], ["proof (chain)\npicking this:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i", "have \"\\<forall>i. num_funs (g i) \\<ge> num_funs (g (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<forall>i. num_funs (g (Suc i)) \\<le> num_funs (g i)", "by (auto simp: subsumeseq_term_iff g_def) (metis num_funs_subst)"], ["proof (state)\nthis:\n  \\<forall>i. num_funs (g (Suc i)) \\<le> num_funs (g i)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from down_chain_imp_eq [OF this]"], ["proof (chain)\npicking this:\n  \\<exists>N. \\<forall>i>N. num_funs (g i) = num_funs (g (Suc i))", "obtain K\n    where K_funs: \"\\<forall>i > K. num_funs (g i) = num_funs (g (Suc i))\""], ["proof (prove)\nusing this:\n  \\<exists>N. \\<forall>i>N. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>K.\n        \\<forall>i>K.\n           num_funs (g i) = num_funs (g (Suc i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>i>K. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "define M where \"M = max K N\""], ["proof (state)\nthis:\n  M = max K N\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "have strict_g: \"\\<forall>i > M. g i \\<cdot>> g (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i>M. g (Suc i) <\\<cdot> g i", "using strict"], ["proof (prove)\nusing this:\n  \\<forall>i. f (Suc i) <\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. g (Suc i) <\\<cdot> g i", "by (simp add: g_def M_def)"], ["proof (state)\nthis:\n  \\<forall>i>M. g (Suc i) <\\<cdot> g i\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "have g: \"\\<forall>i > M. g i \\<cdot>\\<ge> g (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i", "using *"], ["proof (prove)\nusing this:\n  \\<forall>i. f (Suc i) \\<le>\\<cdot> f i\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i", "by (simp add: g_def M_def)"], ["proof (state)\nthis:\n  \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "have \"\\<forall>i > M. num_funs (g i) = num_funs (g (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))", "using K_funs"], ["proof (prove)\nusing this:\n  \\<forall>i>K. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))", "unfolding M_def"], ["proof (prove)\nusing this:\n  \\<forall>i>K. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>max K N. num_funs (g i) = num_funs (g (Suc i))", "by (metis max_less_iff_conj)"], ["proof (state)\nthis:\n  \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "have syms: \"\\<forall>i > M. num_syms (g i) = num_syms (g (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))", "using N_syms"], ["proof (prove)\nusing this:\n  \\<forall>i>N. num_syms (f i) = num_syms (f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))", "unfolding M_def g_def"], ["proof (prove)\nusing this:\n  \\<forall>i>N. num_syms (f i) = num_syms (f (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>max K N. num_syms (f (i + N)) = num_syms (f (Suc i + N))", "by (metis add_Suc_right add_lessD1 add_strict_left_mono add.commute)"], ["proof (state)\nthis:\n  \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i\n  \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))\n  \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))", "have emv: \"\\<forall>i > M. emv (g i) (g (Suc i))\""], ["proof (prove)\nusing this:\n  \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i\n  \\<forall>i>M. num_funs (g i) = num_funs (g (Suc i))\n  \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. emv (g i) (g (Suc i))", "by (metis subsumeseq_term_size_emv)"], ["proof (state)\nthis:\n  \\<forall>i>M. emv (g i) (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i>M. emv (g i) (g (Suc i))", "have \"\\<forall>i > M. num_unique_vars (g (Suc i)) \\<ge> num_unique_vars (g i)\""], ["proof (prove)\nusing this:\n  \\<forall>i>M. emv (g i) (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))", "using emv_subsumeseq_term_imp_num_unique_vars_le and g"], ["proof (prove)\nusing this:\n  \\<forall>i>M. emv (g i) (g (Suc i))\n  \\<lbrakk>emv ?s ?t; ?t \\<le>\\<cdot> ?s\\<rbrakk>\n  \\<Longrightarrow> num_unique_vars ?s \\<le> num_unique_vars ?t\n  \\<forall>i>M. g (Suc i) \\<le>\\<cdot> g i\n\ngoal (1 subgoal):\n 1. \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))", "by fast"], ["proof (state)\nthis:\n  \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))", "obtain i where \"i > M\"\n    and nuv: \"num_unique_vars (g (Suc i)) = num_unique_vars (g i)\""], ["proof (prove)\nusing this:\n  \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>M < i;\n         num_unique_vars (g (Suc i)) = num_unique_vars (g i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using num_syms_num_unique_vars_clash [of \"\\<lambda>i. g (i + Suc M)\"] and syms"], ["proof (prove)\nusing this:\n  \\<forall>i>M. num_unique_vars (g i) \\<le> num_unique_vars (g (Suc i))\n  \\<lbrakk>\\<forall>i.\n              num_syms (g (i + Suc M)) = num_syms (g (Suc i + Suc M));\n   \\<forall>i.\n      num_unique_vars (g (i + Suc M))\n      < num_unique_vars (g (Suc i + Suc M))\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<forall>i>M. num_syms (g i) = num_syms (g (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>M < i;\n         num_unique_vars (g (Suc i)) = num_unique_vars (g i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_Suc_right add_Suc_shift le_eq_less_or_eq less_add_Suc2)"], ["proof (state)\nthis:\n  M < i\n  num_unique_vars (g (Suc i)) = num_unique_vars (g i)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "define s and t where \"s = g i\" and \"t = g (Suc i)\""], ["proof (state)\nthis:\n  s = g i\n  t = g (Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from nuv"], ["proof (chain)\npicking this:\n  num_unique_vars (g (Suc i)) = num_unique_vars (g i)", "have card: \"card (vars_term s) = card (vars_term t)\""], ["proof (prove)\nusing this:\n  num_unique_vars (g (Suc i)) = num_unique_vars (g i)\n\ngoal (1 subgoal):\n 1. card (vars_term s) = card (vars_term t)", "by (simp add: num_unique_vars_def s_def t_def)"], ["proof (state)\nthis:\n  card (vars_term s) = card (vars_term t)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from g [THEN spec, THEN mp, OF \\<open>i > M\\<close>]"], ["proof (chain)\npicking this:\n  g (Suc i) \\<le>\\<cdot> g i", "obtain \\<sigma>\n    where \"s = t \\<cdot> \\<sigma>\""], ["proof (prove)\nusing this:\n  g (Suc i) \\<le>\\<cdot> g i\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        s = t \\<cdot> \\<sigma> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases) (auto simp: s_def t_def)"], ["proof (state)\nthis:\n  s = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  s = t \\<cdot> \\<sigma>", "have \"emv s t\" and \"vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\""], ["proof (prove)\nusing this:\n  s = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. emv s t &&& vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t", "using emv_subst_vars_term [of s t \\<sigma>] and emv and \\<open>i > M\\<close>"], ["proof (prove)\nusing this:\n  s = t \\<cdot> \\<sigma>\n  \\<lbrakk>emv s t; s = t \\<cdot> \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\n  \\<forall>i>M. emv (g i) (g (Suc i))\n  M < i\n\ngoal (1 subgoal):\n 1. emv s t &&& vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t", "by (auto simp: s_def t_def)"], ["proof (state)\nthis:\n  emv s t\n  vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "with card"], ["proof (chain)\npicking this:\n  card (vars_term s) = card (vars_term t)\n  emv s t\n  vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t", "have \"card ((the_Var \\<circ> \\<sigma>) ` vars_term t) = card (vars_term t)\""], ["proof (prove)\nusing this:\n  card (vars_term s) = card (vars_term t)\n  emv s t\n  vars_term s = (the_Var \\<circ> \\<sigma>) ` vars_term t\n\ngoal (1 subgoal):\n 1. card ((the_Var \\<circ> \\<sigma>) ` vars_term t) = card (vars_term t)", "by simp"], ["proof (state)\nthis:\n  card ((the_Var \\<circ> \\<sigma>) ` vars_term t) = card (vars_term t)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from finite_card_eq_imp_bij_betw [OF finite_vars_term this]"], ["proof (chain)\npicking this:\n  bij_betw (the_Var \\<circ> \\<sigma>) (vars_term t)\n   ((the_Var \\<circ> \\<sigma>) ` vars_term t)", "have \"bij_betw (the_Var \\<circ> \\<sigma>) (vars_term t) ((the_Var \\<circ> \\<sigma>) ` vars_term t)\""], ["proof (prove)\nusing this:\n  bij_betw (the_Var \\<circ> \\<sigma>) (vars_term t)\n   ((the_Var \\<circ> \\<sigma>) ` vars_term t)\n\ngoal (1 subgoal):\n 1. bij_betw (the_Var \\<circ> \\<sigma>) (vars_term t)\n     ((the_Var \\<circ> \\<sigma>) ` vars_term t)", "."], ["proof (state)\nthis:\n  bij_betw (the_Var \\<circ> \\<sigma>) (vars_term t)\n   ((the_Var \\<circ> \\<sigma>) ` vars_term t)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "from bij_betw_extend [OF this, of UNIV]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vars_term t \\<subseteq> UNIV;\n   (the_Var \\<circ> \\<sigma>) ` vars_term t \\<subseteq> UNIV;\n   finite (vars_term t)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>g.\n                       finite {x. g x \\<noteq> x} \\<and>\n                       (\\<forall>x\\<in>UNIV -\n (vars_term t \\<union> (the_Var \\<circ> \\<sigma>) ` vars_term t).\n                           g x = x) \\<and>\n                       (\\<forall>x\\<in>vars_term t.\n                           g x = (the_Var \\<circ> \\<sigma>) x) \\<and>\n                       bij g", "obtain h where *: \"\\<forall>x\\<in>vars_term t. h x = (the_Var \\<circ> \\<sigma>) x\"\n    and \"finite {x. h x \\<noteq> x}\"\n    and \"bij h\""], ["proof (prove)\nusing this:\n  \\<lbrakk>vars_term t \\<subseteq> UNIV;\n   (the_Var \\<circ> \\<sigma>) ` vars_term t \\<subseteq> UNIV;\n   finite (vars_term t)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>g.\n                       finite {x. g x \\<noteq> x} \\<and>\n                       (\\<forall>x\\<in>UNIV -\n (vars_term t \\<union> (the_Var \\<circ> \\<sigma>) ` vars_term t).\n                           g x = x) \\<and>\n                       (\\<forall>x\\<in>vars_term t.\n                           g x = (the_Var \\<circ> \\<sigma>) x) \\<and>\n                       bij g\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<forall>x\\<in>vars_term t.\n                    h x = (the_Var \\<circ> \\<sigma>) x;\n         finite {x. h x \\<noteq> x}; bij h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars_term t. h x = (the_Var \\<circ> \\<sigma>) x\n  finite {x. h x \\<noteq> x}\n  bij h\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "have \"\\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> vars_term t \\<Longrightarrow> (Var \\<circ> h) x = \\<sigma> x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> vars_term t \\<Longrightarrow> (Var \\<circ> h) x = \\<sigma> x", "assume \"x \\<in> vars_term t\""], ["proof (state)\nthis:\n  x \\<in> vars_term t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> vars_term t \\<Longrightarrow> (Var \\<circ> h) x = \\<sigma> x", "with *"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars_term t. h x = (the_Var \\<circ> \\<sigma>) x\n  x \\<in> vars_term t", "have \"h x = (the_Var \\<circ> \\<sigma>) x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars_term t. h x = (the_Var \\<circ> \\<sigma>) x\n  x \\<in> vars_term t\n\ngoal (1 subgoal):\n 1. h x = (the_Var \\<circ> \\<sigma>) x", "by simp"], ["proof (state)\nthis:\n  h x = (the_Var \\<circ> \\<sigma>) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> vars_term t \\<Longrightarrow> (Var \\<circ> h) x = \\<sigma> x", "with emv_subst_imp_is_Var [OF \\<open>emv s t\\<close> \\<open>s = t \\<cdot> \\<sigma>\\<close>] \\<open>x \\<in> vars_term t\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars_term t. is_Var (\\<sigma> x)\n  x \\<in> vars_term t\n  h x = (the_Var \\<circ> \\<sigma>) x", "show \"(Var \\<circ> h) x = \\<sigma> x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars_term t. is_Var (\\<sigma> x)\n  x \\<in> vars_term t\n  h x = (the_Var \\<circ> \\<sigma>) x\n\ngoal (1 subgoal):\n 1. (Var \\<circ> h) x = \\<sigma> x", "by simp"], ["proof (state)\nthis:\n  (Var \\<circ> h) x = \\<sigma> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x", "have \"t \\<cdot> (Var \\<circ> h) = s\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x\n\ngoal (1 subgoal):\n 1. t \\<cdot> (Var \\<circ> h) = s", "using \\<open>s = t \\<cdot> \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>vars_term t. (Var \\<circ> h) x = \\<sigma> x\n  s = t \\<cdot> \\<sigma>\n\ngoal (1 subgoal):\n 1. t \\<cdot> (Var \\<circ> h) = s", "by (auto simp: term_subst_eq_conv)"], ["proof (state)\nthis:\n  t \\<cdot> (Var \\<circ> h) = s\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  t \\<cdot> (Var \\<circ> h) = s", "have \"t \\<cdot> (Var \\<circ> h) \\<circ>\\<^sub>s (Var \\<circ> inv h) = s \\<cdot> (Var \\<circ> inv h)\""], ["proof (prove)\nusing this:\n  t \\<cdot> (Var \\<circ> h) = s\n\ngoal (1 subgoal):\n 1. t \\<cdot> (Var \\<circ> h) \\<circ>\\<^sub>s (Var \\<circ> inv h) =\n    s \\<cdot> (Var \\<circ> inv h)", "by auto"], ["proof (state)\nthis:\n  t \\<cdot> (Var \\<circ> h) \\<circ>\\<^sub>s (Var \\<circ> inv h) =\n  s \\<cdot> (Var \\<circ> inv h)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  t \\<cdot> (Var \\<circ> h) \\<circ>\\<^sub>s (Var \\<circ> inv h) =\n  s \\<cdot> (Var \\<circ> inv h)", "have \"t = s \\<cdot> (Var \\<circ> inv h)\""], ["proof (prove)\nusing this:\n  t \\<cdot> (Var \\<circ> h) \\<circ>\\<^sub>s (Var \\<circ> inv h) =\n  s \\<cdot> (Var \\<circ> inv h)\n\ngoal (1 subgoal):\n 1. t = s \\<cdot> (Var \\<circ> inv h)", "unfolding bij_Var_subst_compose_Var [OF \\<open>bij h\\<close>]"], ["proof (prove)\nusing this:\n  t \\<cdot> Var = s \\<cdot> (Var \\<circ> inv h)\n\ngoal (1 subgoal):\n 1. t = s \\<cdot> (Var \\<circ> inv h)", "by simp"], ["proof (state)\nthis:\n  t = s \\<cdot> (Var \\<circ> inv h)\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  t = s \\<cdot> (Var \\<circ> inv h)", "have \"t \\<cdot>\\<ge> s\""], ["proof (prove)\nusing this:\n  t = s \\<cdot> (Var \\<circ> inv h)\n\ngoal (1 subgoal):\n 1. s \\<le>\\<cdot> t", "by auto"], ["proof (state)\nthis:\n  s \\<le>\\<cdot> t\n\ngoal (1 subgoal):\n 1. \\<not> wf {<\\<cdot>} \\<Longrightarrow> False", "with strict_g and \\<open>i > M\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>i>M. g (Suc i) <\\<cdot> g i\n  M < i\n  s \\<le>\\<cdot> t", "show False"], ["proof (prove)\nusing this:\n  \\<forall>i>M. g (Suc i) <\\<cdot> g i\n  M < i\n  s \\<le>\\<cdot> t\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: s_def t_def term_subsumable.subsumes_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}