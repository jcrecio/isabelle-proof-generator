{"file_name": "/home/qj213/afp-2021-10-22/thys/Hello_World/HelloWorld_Proof.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hello_World", "problem_names": ["theorem (in io_stdio)\n  assumes stdout: \"stdout_of world = []\"\n       and stdin: \"stdin_of world = [''corny'']\"\n     shows \"stdout_of (exec main world) =\n              [''Hello World! What is your name?'',\n               ''Hello, corny!'']\""], "translations": [["", "theorem (in io_stdio)\n  assumes stdout: \"stdout_of world = []\"\n       and stdin: \"stdin_of world = [''corny'']\"\n     shows \"stdout_of (exec main world) =\n              [''Hello World! What is your name?'',\n               ''Hello, corny!'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "let ?world1=\"exec (println (STR ''Hello World! What is your name?'')) world\""], ["proof (state)\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "have stdout_world2:\n    \"literal.explode STR ''Hello World! What is your name?'' =\n     ''Hello World! What is your name?''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. literal.explode STR ''Hello World! What is your name?'' =\n    ''Hello World! What is your name?''", "by code_simp"], ["proof (state)\nthis:\n  literal.explode STR ''Hello World! What is your name?'' =\n  ''Hello World! What is your name?''\n\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "from stdin_of_getLine[where stdin=\"[]\", OF stdin]"], ["proof (chain)\npicking this:\n  stdin_of (exec getLine world) = [] \\<and>\n  eval getLine world = String.implode ''corny''", "have stdin_world2:\n    \"eval getLine ?world1 = String.implode ''corny''\""], ["proof (prove)\nusing this:\n  stdin_of (exec getLine world) = [] \\<and>\n  eval getLine world = String.implode ''corny''\n\ngoal (1 subgoal):\n 1. eval getLine\n     (exec (println STR ''Hello World! What is your name?'') world) =\n    String.implode ''corny''", "by (simp add: stdin_of_getLine stdin)"], ["proof (state)\nthis:\n  eval getLine\n   (exec (println STR ''Hello World! What is your name?'') world) =\n  String.implode ''corny''\n\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. stdout_of (exec main world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "unfolding main_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. stdout_of\n     (exec\n       (println STR ''Hello World! What is your name?'' \\<bind>\n        (\\<lambda>_.\n            getLine \\<bind>\n            (\\<lambda>name. println (STR ''Hello, '' + name + STR ''!''))))\n       world) =\n    [''Hello World! What is your name?'', ''Hello, corny!'']", "apply(simp add: exec_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. stdout_of world = [] \\<and>\n    literal.explode STR ''Hello World! What is your name?'' =\n    ''Hello World! What is your name?'' \\<and>\n    literal.explode\n     (STR ''Hello, '' +\n      eval getLine\n       (exec (println STR ''Hello World! What is your name?'') world) +\n      STR ''!'') =\n    ''Hello, corny!''", "apply(simp add: stdout)"], ["proof (prove)\ngoal (1 subgoal):\n 1. literal.explode STR ''Hello World! What is your name?'' =\n    ''Hello World! What is your name?'' \\<and>\n    literal.explode\n     (STR ''Hello, '' +\n      eval getLine\n       (exec (println STR ''Hello World! What is your name?'') world) +\n      STR ''!'') =\n    ''Hello, corny!''", "apply(simp add: stdout_world2 stdin_world2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. literal.explode\n     (STR ''Hello, '' + String.implode ''corny'' + STR ''!'') =\n    ''Hello, corny!''", "apply(simp add: plus_literal.rep_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. literal.explode STR ''Hello, '' @\n    CHR ''c'' #\n    CHR ''o'' #\n    CHR ''r'' # CHR ''n'' # CHR ''y'' # literal.explode STR ''!'' =\n    ''Hello, corny!''", "apply code_simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  stdout_of (exec main world) =\n  [''Hello World! What is your name?'', ''Hello, corny!'']\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}