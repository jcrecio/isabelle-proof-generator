{"file_name": "/home/qj213/afp-2021-10-22/thys/JiveDataStoreModel/Isabelle_Store/AttributesIndep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JiveDataStoreModel", "problem_names": ["lemma cls_catt [simp]: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> cls (catt c f) = c\"", "lemma att_catt [simp]: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> att (catt c f) = f\"", "lemma rtype_att_catt: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> rtype (att (catt c f)) = rtype f\"", "lemma widen_cls_dtype_att [simp,intro]: \n  \"(CClassT (cls cf) \\<le> dtype (att cf)) \""], "translations": [["", "lemma cls_catt [simp]: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> cls (catt c f) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CClassT c \\<le> dtype f \\<Longrightarrow> cls (catt c f) = c", "apply (case_tac c)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 2. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 3. \\<lbrakk>CClassT c \\<le> dtype f; c = Object\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 4. \\<lbrakk>CClassT c \\<le> dtype f; c = Exception\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 5. \\<lbrakk>CClassT c \\<le> dtype f; c = ClassCastException\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 6. \\<lbrakk>CClassT c \\<le> dtype f; c = NullPointerException\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c", "apply (case_tac [!] f)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 2. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 3. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 4. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 5. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 6. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 7. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 8. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 9. \\<lbrakk>CClassT c \\<le> dtype f; c = Object;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> cls (catt c f) = c\n 10. \\<lbrakk>CClassT c \\<le> dtype f; c = Object;\n      f = UndoCounter'save\\<rbrakk>\n     \\<Longrightarrow> cls (catt c f) = c\nA total of 24 subgoals...", "apply simp_all\n   \\<comment> \\<open>solves all goals where @{text \"CClassT c \\<le> dtype f\"}\\<close>"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>CClassT CounterImpl \\<le> CClassT UndoCounter; c = CounterImpl;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> cls (catt CounterImpl UndoCounter'save) = CounterImpl\n 2. \\<lbrakk>CClassT CounterImpl \\<le> AClassT Dummy; c = CounterImpl;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt CounterImpl Dummy'dummy) = CounterImpl\n 3. \\<lbrakk>CClassT UndoCounter \\<le> AClassT Dummy; c = UndoCounter;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt UndoCounter Dummy'dummy) = UndoCounter\n 4. \\<lbrakk>CClassT Object \\<le> CClassT CounterImpl; c = Object;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> cls (catt Object CounterImpl'value) = Object\n 5. \\<lbrakk>CClassT Object \\<le> CClassT UndoCounter; c = Object;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> cls (catt Object UndoCounter'save) = Object\n 6. \\<lbrakk>CClassT Object \\<le> AClassT Dummy; c = Object;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt Object Dummy'dummy) = Object\n 7. \\<lbrakk>CClassT Object \\<le> InterfaceT Counter; c = Object;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> cls (catt Object Counter'dummy) = Object\n 8. \\<lbrakk>CClassT Exception \\<le> CClassT CounterImpl; c = Exception;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> cls (catt Exception CounterImpl'value) = Exception\n 9. \\<lbrakk>CClassT Exception \\<le> CClassT UndoCounter; c = Exception;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> cls (catt Exception UndoCounter'save) = Exception\n 10. \\<lbrakk>CClassT Exception \\<le> AClassT Dummy; c = Exception;\n      f = Dummy'dummy\\<rbrakk>\n     \\<Longrightarrow> cls (catt Exception Dummy'dummy) = Exception\nA total of 19 subgoals...", "apply (fastforce elim: subtype_wrong_elims simp add: subtype_defs)+\n   \\<comment> \\<open>solves all the rest where @{text \"\\<not> CClassT c \\<le> dtype f\"} can be derived\\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma att_catt [simp]: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> att (catt c f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CClassT c \\<le> dtype f \\<Longrightarrow> att (catt c f) = f", "apply (case_tac c)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 2. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 3. \\<lbrakk>CClassT c \\<le> dtype f; c = Object\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 4. \\<lbrakk>CClassT c \\<le> dtype f; c = Exception\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 5. \\<lbrakk>CClassT c \\<le> dtype f; c = ClassCastException\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 6. \\<lbrakk>CClassT c \\<le> dtype f; c = NullPointerException\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f", "apply (case_tac [!] f)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 2. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 3. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 4. \\<lbrakk>CClassT c \\<le> dtype f; c = CounterImpl;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 5. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 6. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 7. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 8. \\<lbrakk>CClassT c \\<le> dtype f; c = UndoCounter;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 9. \\<lbrakk>CClassT c \\<le> dtype f; c = Object;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> att (catt c f) = f\n 10. \\<lbrakk>CClassT c \\<le> dtype f; c = Object;\n      f = UndoCounter'save\\<rbrakk>\n     \\<Longrightarrow> att (catt c f) = f\nA total of 24 subgoals...", "apply simp_all\n   \\<comment> \\<open>solves all goals where @{text \"CClassT c \\<le> dtype f\"}\\<close>"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>CClassT CounterImpl \\<le> CClassT UndoCounter; c = CounterImpl;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> att (catt CounterImpl UndoCounter'save) =\n                      UndoCounter'save\n 2. \\<lbrakk>CClassT CounterImpl \\<le> AClassT Dummy; c = CounterImpl;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt CounterImpl Dummy'dummy) = Dummy'dummy\n 3. \\<lbrakk>CClassT UndoCounter \\<le> AClassT Dummy; c = UndoCounter;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt UndoCounter Dummy'dummy) = Dummy'dummy\n 4. \\<lbrakk>CClassT Object \\<le> CClassT CounterImpl; c = Object;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> att (catt Object CounterImpl'value) =\n                      CounterImpl'value\n 5. \\<lbrakk>CClassT Object \\<le> CClassT UndoCounter; c = Object;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> att (catt Object UndoCounter'save) = UndoCounter'save\n 6. \\<lbrakk>CClassT Object \\<le> AClassT Dummy; c = Object;\n     f = Dummy'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt Object Dummy'dummy) = Dummy'dummy\n 7. \\<lbrakk>CClassT Object \\<le> InterfaceT Counter; c = Object;\n     f = Counter'dummy\\<rbrakk>\n    \\<Longrightarrow> att (catt Object Counter'dummy) = Counter'dummy\n 8. \\<lbrakk>CClassT Exception \\<le> CClassT CounterImpl; c = Exception;\n     f = CounterImpl'value\\<rbrakk>\n    \\<Longrightarrow> att (catt Exception CounterImpl'value) =\n                      CounterImpl'value\n 9. \\<lbrakk>CClassT Exception \\<le> CClassT UndoCounter; c = Exception;\n     f = UndoCounter'save\\<rbrakk>\n    \\<Longrightarrow> att (catt Exception UndoCounter'save) =\n                      UndoCounter'save\n 10. \\<lbrakk>CClassT Exception \\<le> AClassT Dummy; c = Exception;\n      f = Dummy'dummy\\<rbrakk>\n     \\<Longrightarrow> att (catt Exception Dummy'dummy) = Dummy'dummy\nA total of 19 subgoals...", "apply (fastforce elim: subtype_wrong_elims simp add: subtype_defs)+\n   \\<comment> \\<open>solves all the rest where @{text \"\\<not> CClassT c \\<le> dtype f\"} can be \n        derived\\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The following lemmas are just a demonstration of simplification.\\<close>"], ["", "lemma rtype_att_catt: \n  \"CClassT c \\<le> dtype f \\<Longrightarrow> rtype (att (catt c f)) = rtype f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CClassT c \\<le> dtype f \\<Longrightarrow>\n    rtype (att (catt c f)) = rtype f", "by simp"], ["", "lemma widen_cls_dtype_att [simp,intro]: \n  \"(CClassT (cls cf) \\<le> dtype (att cf)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. CClassT (cls cf) \\<le> dtype (att cf)", "by (cases cf, simp_all)"], ["", "end"]]}