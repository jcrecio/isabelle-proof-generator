{"file_name": "/home/qj213/afp-2021-10-22/thys/JiveDataStoreModel/Isabelle_Store/StoreProperties.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JiveDataStoreModel", "problem_names": ["lemma unreachable_Null: \n  assumes reach: \"s\\<turnstile> l reachable_from x\" shows \"x\\<noteq>nullV\"", "lemma reachObjLoc [simp,intro]: \n  \"C=cls cf \\<Longrightarrow> s\\<turnstile> objLoc cf a reachable_from objV C a\"", "lemma reachArrLoc [simp,intro]: \"s\\<turnstile> arrLoc T a i reachable_from arrV T a\"", "lemma reachArrLen [simp,intro]: \"s\\<turnstile> arrLenLoc T a reachable_from arrV T a\"", "lemma unreachStatic [simp]: \"\\<not> s\\<turnstile> staticLoc f reachable_from x\"", "lemma unreachStaticE [elim]: \"s\\<turnstile> staticLoc f reachable_from x \\<Longrightarrow> P\"", "lemma reachable_from_ArrLoc_impl_Arr [simp,intro]:\n  assumes reach_loc: \"s\\<turnstile> l reachable_from (s@@arrLoc T a i)\"\n  shows \"s\\<turnstile> l reachable_from (arrV T a)\"", "lemma reachable_from_ObjLoc_impl_Obj [simp,intro]:\n  assumes reach_loc: \"s\\<turnstile> l reachable_from (s@@objLoc cf a)\"\n  assumes C: \"C=cls cf\"\n  shows \"s\\<turnstile> l reachable_from (objV C a)\"", "lemma reach_update [simp]:\n  assumes unreachable_l_x: \"\\<not> s\\<turnstile> l reachable_from x\" \n  shows \"s\\<langle>l:=y\\<rangle>\\<turnstile> k reachable_from  x = s\\<turnstile> k reachable_from x\"", "lemma reach2: \n  \"\\<not> s\\<turnstile> l reachable_from x \\<Longrightarrow> \\<not> s\\<langle>l:=y\\<rangle>\\<turnstile> l reachable_from x\"", "lemma reach4: \"\\<not> s \\<turnstile> l reachable_from (ref k) \\<Longrightarrow> k \\<noteq> l \\<or> (ref k) = nullV\"", "lemma reachable_isRef: \n  assumes reach: \"s\\<turnstile>l reachable_from x\" \n  shows \"isRefV x\"", "lemma val_ArrLen_IntgT: \"isArrLenLoc l \\<Longrightarrow> typeof (s@@l) = IntgT\"", "lemma access_alloc' [simp]:\n  assumes no_arr_len: \"\\<not> isArrLenLoc l\"\n  shows \"s\\<langle>t\\<rangle>@@l = s@@l\"", "lemma reach_alloc [simp]: \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x = s\\<turnstile> l reachable_from x\"", "lemma reach6: \"isprimitive(typeof x) \\<Longrightarrow> \\<not> s \\<turnstile> l reachable_from x\"", "lemma reach3: \n  assumes k_y: \"\\<not> s\\<turnstile> k reachable_from y\"\n  assumes k_x: \"\\<not> s\\<turnstile> k reachable_from x\"\n  shows \"\\<not> s\\<langle>l:=y\\<rangle>\\<turnstile> k reachable_from x\"", "lemma unreachable_from_init [simp,intro]: \"\\<not> s\\<turnstile> l reachable_from (init T)\"", "lemma ref_reach_unalive: \n  assumes unalive_x:\"\\<not> alive x s\" \n  assumes l_x: \"s\\<turnstile> l reachable_from x\" \n  shows \"x = ref l\"", "lemma loc_new_reach: \n  assumes l: \"ref l = new s t\"\n  assumes l_x: \"s\\<turnstile> l reachable_from x\"\n  shows \"x = new s t\"", "lemma alive_reach_alive: \n  assumes alive_x: \"alive x s\" \n  assumes reach_l: \"s \\<turnstile> l reachable_from x\" \n  shows \"alive (ref l) s\"", "lemma reach9: \n  assumes reach_impl_access_eq: \"\\<forall>l. s1\\<turnstile>l reachable_from x \\<longrightarrow> (s1@@l = s2@@l)\"\n  shows \"s1\\<turnstile> l reachable_from x = s2\\<turnstile> l reachable_from x\"", "lemma disjI1: \"\\<lbrakk>\\<And> l. s\\<turnstile> l reachable_from x \\<Longrightarrow> \\<not> s\\<turnstile> l reachable_from y\\<rbrakk> \n \\<Longrightarrow> disj x y s\"", "lemma disjI2: \"\\<lbrakk>\\<And> l. s\\<turnstile> l reachable_from y \\<Longrightarrow> \\<not> s\\<turnstile> l reachable_from x\\<rbrakk> \n \\<Longrightarrow> disj x y s\"", "lemma disj_cases [consumes 1]: \n  assumes \"disj x y s\"\n  assumes \"\\<And> l.  \\<not> s\\<turnstile> l reachable_from x \\<Longrightarrow> P\"\n  assumes \"\\<And> l.  \\<not> s\\<turnstile> l reachable_from y \\<Longrightarrow> P\"\n  shows \"P\"", "lemma disj1: \"\\<lbrakk>disj x y s; \\<not> s\\<turnstile> l reachable_from x; \\<not> s\\<turnstile> l reachable_from y\\<rbrakk> \n              \\<Longrightarrow> disj x y (s\\<langle>l:=z\\<rangle>)\"", "lemma disj2: \n  assumes disj_x_y: \"disj x y s\" \n  assumes disj_x_z: \"disj x z s\"\n  assumes unreach_l_x: \"\\<not> s\\<turnstile> l reachable_from x\"\n  shows \"disj x y (s\\<langle>l:=z\\<rangle>)\"", "lemma disj3: assumes alive_x_s: \"alive x s\" \n  shows \"disj x (new s t) (s\\<langle>t\\<rangle>)\"", "lemma disj4: \"\\<lbrakk>disj (objV C a) y s; CClassT C \\<le> dtype f \\<rbrakk>  \n              \\<Longrightarrow> disj (s@@(objV C a)..f) y s\"", "lemma disj4': \"\\<lbrakk>disj (arrV T a) y s \\<rbrakk>  \n              \\<Longrightarrow> disj (s@@(arrV T a).[i]) y s\"", "lemma xeqI: \"\\<lbrakk>alive x s = alive x t;  \n             \\<And> l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l\n             \\<rbrakk> \\<Longrightarrow> s \\<equiv>[x] t\"", "lemma xeq1_refl: \"s \\<equiv>[x] s\"", "lemma xeq1_sym': \n  assumes s_t: \"s \\<equiv>[x] t\"\n  shows \"t \\<equiv>[x] s\"", "lemma xeq1_sym: \"s \\<equiv>[x] t = t \\<equiv>[x] s\"", "lemma xeq1_trans [trans]: \n  assumes s_t: \"s \\<equiv>[x] t\" \n  assumes t_r: \"t \\<equiv>[x] r\" \n  shows \"s \\<equiv>[x] r\"", "lemma xeq2: \n  assumes xeq: \"\\<forall> x. s \\<equiv>[x] t\" \n  assumes static_eq: \"\\<forall> f. s@@(staticLoc f) = t@@(staticLoc f)\" \n  shows \"s = t\"", "lemma xeq3: \n  assumes unreach_l: \"\\<not> s\\<turnstile> l reachable_from x\" \n  shows \"s \\<equiv>[x] s\\<langle>l:=y\\<rangle>\"", "lemma xeq4: assumes not_new: \"x \\<noteq> new s t\" \n  shows \"s \\<equiv>[x] s\\<langle>t\\<rangle>\"", "lemma xeq5: \"s \\<equiv>[x] t \\<Longrightarrow> s\\<turnstile> l reachable_from x = t\\<turnstile> l reachable_from x\"", "lemma lessaliveI: \n  \"\\<lbrakk>\\<And> x. alive x s \\<Longrightarrow>  s \\<equiv>[x] t; \\<And> f. s@@staticLoc f = t@@staticLoc f\\<rbrakk>\n   \\<Longrightarrow> s \\<lless> t\"", "lemma lessalive_refl: \"s \\<lless> s\"", "lemma lessalive_trans [trans]: \n  assumes s_t: \"s \\<lless> t\"\n  assumes t_w: \"t \\<lless> w\"\n  shows \"s \\<lless> w\"", "lemma lessalive_antisym:\n  assumes s_t: \"s \\<lless> t\"\n  assumes t_s: \"t \\<lless> s\"\n  shows \"s = t\"", "lemma lessalive2: \"\\<lbrakk>s \\<lless> t; alive x s\\<rbrakk> \\<Longrightarrow> alive x t\"", "lemma lessalive3: \n  assumes s_t: \"s \\<lless> t\" \n  assumes alive: \"alive x s \\<or> \\<not> alive x t\"\n  shows \"s \\<equiv>[x] t\"", "lemma lessalive_update [simp,intro]: \n  assumes s_t: \"s \\<lless> t\" \n  assumes unalive_l: \"\\<not> alive (ref l) t\"\n  shows \"s \\<lless> t\\<langle>l:=x\\<rangle>\"", "lemma Xequ4':  \n  assumes alive: \"alive x s\" \n  shows \"s \\<equiv>[x] s\\<langle>t\\<rangle>\"", "lemma lessalive_alloc [simp,intro]: \"s \\<lless> s\\<langle>t\\<rangle>\"", "lemma treach_ref_l [simp,intro]: \n  assumes not_Null: \"ref l \\<noteq> nullV\"\n  shows \"treach (typeof (ref l)) (ltype l)\"", "lemma treach_ref_l' [simp,intro]:\n  assumes not_Null: \"ref l \\<noteq> nullV\"\n  shows \"treach (typeof (ref l)) (typeof (s@@l))\"", "lemma reach_impl_treach: \n  assumes reach_l: \"s \\<turnstile> l reachable_from x\"\n  shows \"treach (typeof x) (ltype l)\"", "lemma not_treach_ref_impl_not_reach: \n  assumes not_treach: \"\\<not> treach (typeof x) (typeof (ref l))\"\n  shows \"\\<not> s \\<turnstile> l reachable_from x\"", "lemma treach1: \n  assumes x_t: \"typeof x \\<le> T\" \n  assumes not_treach: \"\\<not> treach T (typeof (ref l))\"\n  shows \"\\<not> s \\<turnstile> l reachable_from x\""], "translations": [["", "lemma unreachable_Null: \n  assumes reach: \"s\\<turnstile> l reachable_from x\" shows \"x\\<noteq>nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> nullV", "using reach"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. x \\<noteq> nullV", "by (induct) auto"], ["", "corollary unreachable_Null_simp [simp]:\n  \"\\<not> s\\<turnstile> l reachable_from nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from nullV", "by (iprover dest: unreachable_Null)"], ["", "corollary unreachable_NullE [elim]:\n  \"s\\<turnstile> l reachable_from nullV \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from nullV \\<Longrightarrow> P", "by (simp)"], ["", "lemma reachObjLoc [simp,intro]: \n  \"C=cls cf \\<Longrightarrow> s\\<turnstile> objLoc cf a reachable_from objV C a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C = cls cf \\<Longrightarrow>\n    s\\<turnstile> objLoc cf a reachable_from objV C a", "by (iprover intro: reach.Immediate [of \"objLoc cf a\",simplified])"], ["", "lemma reachArrLoc [simp,intro]: \"s\\<turnstile> arrLoc T a i reachable_from arrV T a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> arrLoc T a i reachable_from arrV T a", "by (rule reach.Immediate [of \"arrLoc T a i\",simplified])"], ["", "lemma reachArrLen [simp,intro]: \"s\\<turnstile> arrLenLoc T a reachable_from arrV T a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> arrLenLoc T a reachable_from arrV T a", "by (rule reach.Immediate [of \"arrLenLoc T a\",simplified])"], ["", "lemma unreachStatic [simp]: \"\\<not> s\\<turnstile> staticLoc f reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "assume \"s\\<turnstile> y reachable_from x\" \"y=staticLoc f\""], ["proof (state)\nthis:\n  s\\<turnstile> y reachable_from x\n  y = staticLoc f\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "then"], ["proof (chain)\npicking this:\n  s\\<turnstile> y reachable_from x\n  y = staticLoc f", "have False"], ["proof (prove)\nusing this:\n  s\\<turnstile> y reachable_from x\n  y = staticLoc f\n\ngoal (1 subgoal):\n 1. False", "by induct auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>s\\<turnstile> ?y2 reachable_from x; ?y2 = staticLoc f\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>s\\<turnstile> ?y2 reachable_from x; ?y2 = staticLoc f\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> staticLoc f reachable_from x", "by auto"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> staticLoc f reachable_from x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unreachStaticE [elim]: \"s\\<turnstile> staticLoc f reachable_from x \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> staticLoc f reachable_from x \\<Longrightarrow> P", "by (simp add: unreachStatic)"], ["", "lemma reachable_from_ArrLoc_impl_Arr [simp,intro]:\n  assumes reach_loc: \"s\\<turnstile> l reachable_from (s@@arrLoc T a i)\"\n  shows \"s\\<turnstile> l reachable_from (arrV T a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from arrV T a", "using reach.Indirect [OF reach_loc]"], ["proof (prove)\nusing this:\n  ref (arrLoc T a i) \\<noteq> nullV \\<Longrightarrow>\n  s\\<turnstile> l reachable_from ref (arrLoc T a i)\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from arrV T a", "by simp"], ["", "lemma reachable_from_ObjLoc_impl_Obj [simp,intro]:\n  assumes reach_loc: \"s\\<turnstile> l reachable_from (s@@objLoc cf a)\"\n  assumes C: \"C=cls cf\"\n  shows \"s\\<turnstile> l reachable_from (objV C a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from objV C a", "using C reach.Indirect [OF reach_loc]"], ["proof (prove)\nusing this:\n  C = cls cf\n  ref (objLoc cf a) \\<noteq> nullV \\<Longrightarrow>\n  s\\<turnstile> l reachable_from ref (objLoc cf a)\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from objV C a", "by simp"], ["", "text \\<open>Lemma 3.2 (i)\\<close>"], ["", "lemma reach_update [simp]:\n  assumes unreachable_l_x: \"\\<not> s\\<turnstile> l reachable_from x\" \n  shows \"s\\<langle>l:=y\\<rangle>\\<turnstile> k reachable_from  x = s\\<turnstile> k reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x =\n    s\\<turnstile> k reachable_from x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<turnstile> k reachable_from x\n 2. s\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x", "assume \"s\\<turnstile> k reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from x\n\ngoal (2 subgoals):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<turnstile> k reachable_from x\n 2. s\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x", "from this unreachable_l_x"], ["proof (chain)\npicking this:\n  s\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> l reachable_from x", "show \"s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "case (Immediate k)"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref k\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "have \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "then"], ["proof (chain)\npicking this:\n  ref k \\<noteq> nullV", "show \"s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (ref k)\""], ["proof (prove)\nusing this:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from ref k", "by (rule reach.Immediate)"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from ref k\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "case (Indirect k m)"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from (s@@m)\n  \\<not> s\\<turnstile> l reachable_from (s@@m) \\<Longrightarrow>\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s@@m)\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "have hyp: \"\\<not> s\\<turnstile> l reachable_from (s@@m) \n               \\<Longrightarrow> s\\<langle>l:=y\\<rangle> \\<turnstile> k reachable_from (s@@m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from (s@@m) \\<Longrightarrow>\n    s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s@@m)", "by fact"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> l reachable_from (s@@m) \\<Longrightarrow>\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "have \"ref m \\<noteq> nullV\" and \"\\<not> s\\<turnstile> l reachable_from (ref m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref m \\<noteq> nullV &&& \\<not> s\\<turnstile> l reachable_from ref m", "by fact+"], ["proof (state)\nthis:\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "hence \"l\\<noteq>m\" \"\\<not> s\\<turnstile> l reachable_from (s@@m)\""], ["proof (prove)\nusing this:\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. l \\<noteq> m &&& \\<not> s\\<turnstile> l reachable_from (s@@m)", "by (auto intro: reach.intros)"], ["proof (state)\nthis:\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> l reachable_from (s@@m) \\<Longrightarrow>\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s@@m)\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)", "have \"s\\<langle>l := y\\<rangle> \\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> l reachable_from (s@@m) \\<Longrightarrow>\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s@@m)\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                      \\<langle>l := y\\<rangle>@@m)", "by simp"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<turnstile> la reachable_from (s@@k);\n        \\<not> s\\<turnstile> l reachable_from (s@@k) \\<Longrightarrow>\n        s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from ref\n      k", "then"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)", "show \"s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (ref m)\""], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from ref m", "by (rule reach.Indirect) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from ref m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<turnstile> k reachable_from x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<turnstile> k reachable_from x", "assume \"s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\""], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    s\\<turnstile> k reachable_from x", "from this unreachable_l_x"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> l reachable_from x", "show \"s\\<turnstile> k reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> k reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "case (Immediate k)"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref k\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "have \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>la.\n       \\<lbrakk>ref la \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref la\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref la\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "then"], ["proof (chain)\npicking this:\n  ref k \\<noteq> nullV", "show \"s \\<turnstile> k reachable_from (ref k)\""], ["proof (prove)\nusing this:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. s\\<turnstile> k reachable_from ref k", "by (rule reach.Immediate)"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from ref k\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "case (Indirect k m)"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "with Indirect.hyps"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  ref m \\<noteq> nullV\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m", "have hyp: \"\\<not> s\\<turnstile> l reachable_from (s\\<langle>l := y\\<rangle>@@m)  \n               \\<Longrightarrow> s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\""], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  ref m \\<noteq> nullV\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from (s\n                    \\<langle>l := y\\<rangle>@@m)\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from (s\n     \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n    s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)", "by simp"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "have \"ref m \\<noteq> nullV\" and \"\\<not> s\\<turnstile> l reachable_from (ref m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref m \\<noteq> nullV &&& \\<not> s\\<turnstile> l reachable_from ref m", "by fact+"], ["proof (state)\nthis:\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "hence \"l\\<noteq>m\" \"\\<not> s \\<turnstile> l reachable_from (s@@m)\""], ["proof (prove)\nusing this:\n  ref m \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from ref m\n\ngoal (1 subgoal):\n 1. l \\<noteq> m &&& \\<not> s\\<turnstile> l reachable_from (s@@m)", "by (auto intro: reach.intros)"], ["proof (state)\nthis:\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "with hyp"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)", "have \"s \\<turnstile> k reachable_from (s@@m)\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> l reachable_from (s\n   \\<langle>l := y\\<rangle>@@m) \\<Longrightarrow>\n  s\\<turnstile> k reachable_from (s\\<langle>l := y\\<rangle>@@m)\n  l \\<noteq> m\n  \\<not> s\\<turnstile> l reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. s\\<turnstile> k reachable_from (s@@m)", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<not> s\\<turnstile> l reachable_from (s\n         \\<langle>l := y\\<rangle>@@k) \\<Longrightarrow>\n        s\\<turnstile> la reachable_from (s\\<langle>l := y\\<rangle>@@k);\n        ref k \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> la reachable_from ref k", "thus \"s\\<turnstile> k reachable_from (ref m)\""], ["proof (prove)\nusing this:\n  s\\<turnstile> k reachable_from (s@@m)\n\ngoal (1 subgoal):\n 1. s\\<turnstile> k reachable_from ref m", "by (rule reach.Indirect) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from ref m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (ii)\\<close>"], ["", "lemma reach2: \n  \"\\<not> s\\<turnstile> l reachable_from x \\<Longrightarrow> \\<not> s\\<langle>l:=y\\<rangle>\\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    \\<not> s\\<langle>l := y\\<rangle>\\<turnstile> l reachable_from x", "by (simp)"], ["", "text \\<open>Lemma 3.2 (iv)\\<close>"], ["", "lemma reach4: \"\\<not> s \\<turnstile> l reachable_from (ref k) \\<Longrightarrow> k \\<noteq> l \\<or> (ref k) = nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from ref k \\<Longrightarrow>\n    k \\<noteq> l \\<or> ref k = nullV", "by (auto intro: reach.intros)"], ["", "lemma reachable_isRef: \n  assumes reach: \"s\\<turnstile>l reachable_from x\" \n  shows \"isRefV x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isRefV x", "using reach"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. isRefV x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l. ref l \\<noteq> nullV \\<Longrightarrow> isRefV (ref l)\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k); isRefV (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> isRefV (ref k)", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l. ref l \\<noteq> nullV \\<Longrightarrow> isRefV (ref l)\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k); isRefV (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> isRefV (ref k)", "show \"isRefV (ref l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isRefV (ref l)", "by (cases l) simp_all"], ["proof (state)\nthis:\n  isRefV (ref l)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k); isRefV (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> isRefV (ref k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k); isRefV (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> isRefV (ref k)", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  isRefV (s@@k)\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k); isRefV (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> isRefV (ref k)", "show \"isRefV (ref k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isRefV (ref k)", "by (cases k) simp_all"], ["proof (state)\nthis:\n  isRefV (ref k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma val_ArrLen_IntgT: \"isArrLenLoc l \\<Longrightarrow> typeof (s@@l) = IntgT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "assume isArrLen: \"isArrLenLoc l\""], ["proof (state)\nthis:\n  isArrLenLoc l\n\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "have T: \"typeof (s@@l) \\<le> ltype l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> s@@l \\<le> ltype l", "by (simp)"], ["proof (state)\nthis:\n  \\<tau> s@@l \\<le> ltype l\n\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "also"], ["proof (state)\nthis:\n  \\<tau> s@@l \\<le> ltype l\n\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "from isArrLen"], ["proof (chain)\npicking this:\n  isArrLenLoc l", "have I: \"ltype l = IntgT\""], ["proof (prove)\nusing this:\n  isArrLenLoc l\n\ngoal (1 subgoal):\n 1. ltype l = IntgT", "by (cases l) simp_all"], ["proof (state)\nthis:\n  ltype l = IntgT\n\ngoal (1 subgoal):\n 1. isArrLenLoc l \\<Longrightarrow> \\<tau> s@@l = IntgT", "finally"], ["proof (chain)\npicking this:\n  \\<tau> s@@l \\<le> IntgT", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau> s@@l \\<le> IntgT\n\ngoal (1 subgoal):\n 1. \\<tau> s@@l = IntgT", "by (auto elim: rtranclE simp add: le_Javatype_def subtype_defs)"], ["proof (state)\nthis:\n  \\<tau> s@@l = IntgT\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma access_alloc' [simp]:\n  assumes no_arr_len: \"\\<not> isArrLenLoc l\"\n  shows \"s\\<langle>t\\<rangle>@@l = s@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@l = s@@l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@l = s@@l", "from no_arr_len"], ["proof (chain)\npicking this:\n  \\<not> isArrLenLoc l", "have \"isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\""], ["proof (prove)\nusing this:\n  \\<not> isArrLenLoc l\n\ngoal (1 subgoal):\n 1. isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)", "by (cases t) (auto simp add: new_def isArrLenLoc_def split: Location.splits)"], ["proof (state)\nthis:\n  isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@l = s@@l", "thus ?thesis"], ["proof (prove)\nusing this:\n  isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@l = s@@l", "by (rule access_alloc)"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>@@l = s@@l\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (v)\\<close>"], ["", "lemma reach_alloc [simp]: \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x = s\\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x =\n    s\\<turnstile> l reachable_from x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<turnstile> l reachable_from x\n 2. s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "assume \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x\n\ngoal (2 subgoals):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<turnstile> l reachable_from x\n 2. s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "thus \"s\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow>\n       s\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow>\n       s\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "thus \"s\\<turnstile> l reachable_from ref l\""], ["proof (prove)\nusing this:\n  ref l \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from ref l", "by (rule reach.intros)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n               \\<langle>t\\<rangle>@@k)\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "have reach_k: \"s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)", "by fact"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "moreover"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "have \"s\\<langle>t\\<rangle>@@k = s@@k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "from reach_k"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)", "have isRef: \"isRefV (s\\<langle>t\\<rangle>@@k)\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. isRefV (s\\<langle>t\\<rangle>@@k)", "by (rule reachable_isRef)"], ["proof (state)\nthis:\n  isRefV (s\\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "have \"\\<not> isArrLenLoc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> isArrLenLoc k", "proof (rule ccontr,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "assume \"isArrLenLoc k\""], ["proof (state)\nthis:\n  isArrLenLoc k\n\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isArrLenLoc k", "have \"typeof (s\\<langle>t\\<rangle>@@k) = IntgT\""], ["proof (prove)\nusing this:\n  isArrLenLoc k\n\ngoal (1 subgoal):\n 1. \\<tau> s\\<langle>t\\<rangle>@@k = IntgT", "by (rule val_ArrLen_IntgT)"], ["proof (state)\nthis:\n  \\<tau> s\\<langle>t\\<rangle>@@k = IntgT\n\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "with isRef"], ["proof (chain)\npicking this:\n  isRefV (s\\<langle>t\\<rangle>@@k)\n  \\<tau> s\\<langle>t\\<rangle>@@k = IntgT", "show \"False\""], ["proof (prove)\nusing this:\n  isRefV (s\\<langle>t\\<rangle>@@k)\n  \\<tau> s\\<langle>t\\<rangle>@@k = IntgT\n\ngoal (1 subgoal):\n 1. False", "by (cases \"(s\\<langle>t\\<rangle>@@k)\") simp_all"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> isArrLenLoc k\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> isArrLenLoc k\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "by (rule access_alloc')"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "ultimately"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n  s\\<langle>t\\<rangle>@@k = s@@k", "have \"s\\<turnstile> l reachable_from (s@@k)\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from (s@@k)", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                             \\<langle>t\\<rangle>@@k);\n        s\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<turnstile> l reachable_from ref k", "thus \"s\\<turnstile> l reachable_from ref k\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from ref k", "by (rule reach.intros) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from ref k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "assume \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "thus \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow>\n       s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow>\n       s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "thus \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref l\""], ["proof (prove)\nusing this:\n  ref l \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref l", "by (rule reach.intros)"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "have reach_k: \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)", "by fact"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "moreover"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "have \"s\\<langle>t\\<rangle>@@k = s@@k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "from reach_k"], ["proof (chain)\npicking this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)", "have isRef: \"isRefV (s@@k)\""], ["proof (prove)\nusing this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. isRefV (s@@k)", "by (rule reachable_isRef)"], ["proof (state)\nthis:\n  isRefV (s@@k)\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "have \"\\<not> isArrLenLoc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> isArrLenLoc k", "proof (rule ccontr,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "assume \"isArrLenLoc k\""], ["proof (state)\nthis:\n  isArrLenLoc k\n\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isArrLenLoc k", "have \"typeof (s@@k) = IntgT\""], ["proof (prove)\nusing this:\n  isArrLenLoc k\n\ngoal (1 subgoal):\n 1. \\<tau> s@@k = IntgT", "by (rule val_ArrLen_IntgT)"], ["proof (state)\nthis:\n  \\<tau> s@@k = IntgT\n\ngoal (1 subgoal):\n 1. isArrLenLoc k \\<Longrightarrow> False", "with isRef"], ["proof (chain)\npicking this:\n  isRefV (s@@k)\n  \\<tau> s@@k = IntgT", "show \"False\""], ["proof (prove)\nusing this:\n  isRefV (s@@k)\n  \\<tau> s@@k = IntgT\n\ngoal (1 subgoal):\n 1. False", "by (cases \"(s@@k)\") simp_all"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> isArrLenLoc k\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> isArrLenLoc k\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>@@k = s@@k", "by (rule access_alloc')"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "ultimately"], ["proof (chain)\npicking this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n  s\\<langle>t\\<rangle>@@k = s@@k", "have \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\\<langle>t\\<rangle>@@k)\""], ["proof (prove)\nusing this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k)\n  s\\<langle>t\\<rangle>@@k = s@@k\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n                 \\<langle>t\\<rangle>@@k)", "by simp"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n               \\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s@@k);\n        ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref\nk", "thus \"s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref k\""], ["proof (prove)\nusing this:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from (s\n               \\<langle>t\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref k", "by (rule reach.intros) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from ref k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s\\<langle>t\\<rangle>\\<turnstile> l reachable_from x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (vi)\\<close>"], ["", "lemma reach6: \"isprimitive(typeof x) \\<Longrightarrow> \\<not> s \\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isprimitive \\<tau> x \\<Longrightarrow>\n    \\<not> s\\<turnstile> l reachable_from x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>isprimitive \\<tau> x; s\\<turnstile> l reachable_from x\\<rbrakk>\n    \\<Longrightarrow> False", "assume prim: \"isprimitive(typeof x)\""], ["proof (state)\nthis:\n  isprimitive \\<tau> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isprimitive \\<tau> x; s\\<turnstile> l reachable_from x\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"s \\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isprimitive \\<tau> x; s\\<turnstile> l reachable_from x\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"isRefV x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. isRefV x", "by (rule reachable_isRef)"], ["proof (state)\nthis:\n  isRefV x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isprimitive \\<tau> x; s\\<turnstile> l reachable_from x\\<rbrakk>\n    \\<Longrightarrow> False", "with prim"], ["proof (chain)\npicking this:\n  isprimitive \\<tau> x\n  isRefV x", "show False"], ["proof (prove)\nusing this:\n  isprimitive \\<tau> x\n  isRefV x\n\ngoal (1 subgoal):\n 1. False", "by (cases x) simp_all"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (iii)\\<close>"], ["", "lemma reach3: \n  assumes k_y: \"\\<not> s\\<turnstile> k reachable_from y\"\n  assumes k_x: \"\\<not> s\\<turnstile> k reachable_from x\"\n  shows \"\\<not> s\\<langle>l:=y\\<rangle>\\<turnstile> k reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    False", "assume \"s\\<langle>l:=y\\<rangle>\\<turnstile> k reachable_from x\""], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x \\<Longrightarrow>\n    False", "from this k_y k_x"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> k reachable_from y\n  \\<not> s\\<turnstile> k reachable_from x", "show False"], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>\\<turnstile> k reachable_from x\n  \\<not> s\\<turnstile> k reachable_from y\n  \\<not> s\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. False", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from y;\n        \\<not> s\\<turnstile> l reachable_from ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  \\<not> s\\<turnstile> l reachable_from y\n  \\<not> s\\<turnstile> l reachable_from ref l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from y;\n        \\<not> s\\<turnstile> l reachable_from ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not> s\\<turnstile> l reachable_from ref l\" and \"ref l \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from ref l &&& ref l \\<noteq> nullV", "by fact+"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> l reachable_from ref l\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> s\\<turnstile> l reachable_from y;\n        \\<not> s\\<turnstile> l reachable_from ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> l reachable_from ref l\n  ref l \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. False", "by (iprover intro: reach.intros)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "case (Indirect m k)"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> m reachable_from (s\n                    \\<langle>l := y\\<rangle>@@k)\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n  ref k \\<noteq> nullV\n  \\<not> s\\<turnstile> m reachable_from y\n  \\<not> s\\<turnstile> m reachable_from ref k\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have k_not_Null: \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have not_m_y: \"\\<not> s\\<turnstile> m reachable_from y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> m reachable_from y", "by fact"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> m reachable_from y\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have not_m_k: \"\\<not> s\\<turnstile> m reachable_from ref k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> m reachable_from ref k", "by fact"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> m reachable_from ref k\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp: \"\\<lbrakk>\\<not> s\\<turnstile> m reachable_from y; \\<not> s\\<turnstile> m reachable_from (s\\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n               \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n     \\<not> s\\<turnstile> m reachable_from (s\n      \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n    \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "have m_upd_k: \"s\\<langle>l := y\\<rangle>\\<turnstile> m reachable_from (s\\<langle>l := y\\<rangle>@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>\\<turnstile> m reachable_from (s\n                      \\<langle>l := y\\<rangle>@@k)", "by fact"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>\\<turnstile> m reachable_from (s\n                    \\<langle>l := y\\<rangle>@@k)\n\ngoal (1 subgoal):\n 1. \\<And>la k.\n       \\<lbrakk>s\\<langle>l := y\\<rangle>\\<turnstile> la reachable_from (s\n                                   \\<langle>l := y\\<rangle>@@k);\n        \\<lbrakk>\\<not> s\\<turnstile> la reachable_from y;\n         \\<not> s\\<turnstile> la reachable_from (s\n           \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n        \\<Longrightarrow> False;\n        ref k \\<noteq> nullV; \\<not> s\\<turnstile> la reachable_from y;\n        \\<not> s\\<turnstile> la reachable_from ref k\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"l=k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = k \\<Longrightarrow> False\n 2. l \\<noteq> k \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  l \\<noteq> k\n\ngoal (2 subgoals):\n 1. l = k \\<Longrightarrow> False\n 2. l \\<noteq> k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  l \\<noteq> k", "have \"s\\<langle>l := y\\<rangle>@@k = s@@k\""], ["proof (prove)\nusing this:\n  l \\<noteq> k\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>@@k = s@@k", "by simp"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>@@k = s@@k\n\ngoal (2 subgoals):\n 1. l = k \\<Longrightarrow> False\n 2. l \\<noteq> k \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>@@k = s@@k\n\ngoal (2 subgoals):\n 1. l = k \\<Longrightarrow> False\n 2. l \\<noteq> k \\<Longrightarrow> False", "from not_m_k k_not_Null"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> m reachable_from ref k\n  ref k \\<noteq> nullV", "have \"\\<not> s\\<turnstile> m reachable_from (s@@k)\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> m reachable_from ref k\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> m reachable_from (s@@k)", "by (iprover intro: reach.intros)"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n\ngoal (2 subgoals):\n 1. l = k \\<Longrightarrow> False\n 2. l \\<noteq> k \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle>@@k = s@@k\n  \\<not> s\\<turnstile> m reachable_from (s@@k)", "show False"], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>@@k = s@@k\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. False", "using not_m_y hyp"], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle>@@k = s@@k\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n  \\<not> s\\<turnstile> m reachable_from y\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. l = k \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l = k \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  l = k\n\ngoal (1 subgoal):\n 1. l = k \\<Longrightarrow> False", "note eq_l_k = this"], ["proof (state)\nthis:\n  l = k\n\ngoal (1 subgoal):\n 1. l = k \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"alive (ref l) s \\<and> alive y s \\<and> typeof y \\<le> ltype l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. alive (ref l) s \\<and>\n    alive y s \\<and> \\<tau> y \\<le> ltype l \\<Longrightarrow>\n    False\n 2. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "case True"], ["proof (state)\nthis:\n  alive (ref l) s \\<and> alive y s \\<and> \\<tau> y \\<le> ltype l\n\ngoal (2 subgoals):\n 1. alive (ref l) s \\<and>\n    alive y s \\<and> \\<tau> y \\<le> ltype l \\<Longrightarrow>\n    False\n 2. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "with eq_l_k"], ["proof (chain)\npicking this:\n  l = k\n  alive (ref l) s \\<and> alive y s \\<and> \\<tau> y \\<le> ltype l", "have \"s\\<langle>l := y\\<rangle>@@k = y\""], ["proof (prove)\nusing this:\n  l = k\n  alive (ref l) s \\<and> alive y s \\<and> \\<tau> y \\<le> ltype l\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle>@@k = y", "by simp"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle>@@k = y\n\ngoal (2 subgoals):\n 1. alive (ref l) s \\<and>\n    alive y s \\<and> \\<tau> y \\<le> ltype l \\<Longrightarrow>\n    False\n 2. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "with not_m_y hyp"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> m reachable_from y\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n  s\\<langle>l := y\\<rangle>@@k = y", "show False"], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> m reachable_from y\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n  s\\<langle>l := y\\<rangle>@@k = y\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "case False"], ["proof (state)\nthis:\n  \\<not> (alive (ref l) s \\<and> alive y s \\<and> \\<tau> y \\<le> ltype l)\n\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "hence \"s\\<langle>l := y\\<rangle> = s\""], ["proof (prove)\nusing this:\n  \\<not> (alive (ref l) s \\<and> alive y s \\<and> \\<tau> y \\<le> ltype l)\n\ngoal (1 subgoal):\n 1. s\\<langle>l := y\\<rangle> = s", "by auto"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle> = s\n\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  s\\<langle>l := y\\<rangle> = s\n\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "from not_m_k k_not_Null"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> m reachable_from ref k\n  ref k \\<noteq> nullV", "have \"\\<not> s\\<turnstile> m reachable_from (s@@k)\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> m reachable_from ref k\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> m reachable_from (s@@k)", "by (iprover intro: reach.intros)"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. \\<not> (alive (ref l) s \\<and>\n            alive y s \\<and> \\<tau> y \\<le> ltype l) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  s\\<langle>l := y\\<rangle> = s\n  \\<not> s\\<turnstile> m reachable_from (s@@k)", "show False"], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle> = s\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. False", "using not_m_y hyp"], ["proof (prove)\nusing this:\n  s\\<langle>l := y\\<rangle> = s\n  \\<not> s\\<turnstile> m reachable_from (s@@k)\n  \\<not> s\\<turnstile> m reachable_from y\n  \\<lbrakk>\\<not> s\\<turnstile> m reachable_from y;\n   \\<not> s\\<turnstile> m reachable_from (s\n    \\<langle>l := y\\<rangle>@@k)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (vii).\\<close>"], ["", "lemma unreachable_from_init [simp,intro]: \"\\<not> s\\<turnstile> l reachable_from (init T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from init T", "using reach6"], ["proof (prove)\nusing this:\n  isprimitive \\<tau> ?x \\<Longrightarrow>\n  \\<not> ?s\\<turnstile> ?l reachable_from ?x\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from init T", "by (cases T) simp_all"], ["", "lemma ref_reach_unalive: \n  assumes unalive_x:\"\\<not> alive x s\" \n  assumes l_x: \"s\\<turnstile> l reachable_from x\" \n  shows \"x = ref l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = ref l", "using l_x unalive_x"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. x = ref l", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; \\<not> alive (ref l) s\\<rbrakk>\n       \\<Longrightarrow> ref l = ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  \\<not> alive (ref l) s\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; \\<not> alive (ref l) s\\<rbrakk>\n       \\<Longrightarrow> ref l = ref l\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "show \"ref l = ref l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref l = ref l", "by simp"], ["proof (state)\nthis:\n  ref l = ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l\n  ref k \\<noteq> nullV\n  \\<not> alive (ref k) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "have \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "have \"\\<not> alive (ref k) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> alive (ref k) s", "by fact"], ["proof (state)\nthis:\n  \\<not> alive (ref k) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "hence \"s@@k = init (ltype k)\""], ["proof (prove)\nusing this:\n  \\<not> alive (ref k) s\n\ngoal (1 subgoal):\n 1. s@@k = init (ltype k)", "by simp"], ["proof (state)\nthis:\n  s@@k = init (ltype k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "moreover"], ["proof (state)\nthis:\n  s@@k = init (ltype k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "have \"s\\<turnstile> l reachable_from (s@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from (s@@k)", "by fact"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "ultimately"], ["proof (chain)\npicking this:\n  s@@k = init (ltype k)\n  s\\<turnstile> l reachable_from (s@@k)", "have False"], ["proof (prove)\nusing this:\n  s@@k = init (ltype k)\n  s\\<turnstile> l reachable_from (s@@k)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> alive (s@@k) s \\<Longrightarrow> s@@k = ref l;\n        ref k \\<noteq> nullV; \\<not> alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> ref k = ref l", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. ref k = ref l", ".."], ["proof (state)\nthis:\n  ref k = ref l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma loc_new_reach: \n  assumes l: \"ref l = new s t\"\n  assumes l_x: \"s\\<turnstile> l reachable_from x\"\n  shows \"x = new s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = new s t", "using l_x l"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  ref l = new s t\n\ngoal (1 subgoal):\n 1. x = new s t", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref l = new s t\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  ref l = new s t\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref l = new s t\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "show \"ref l = new s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref l = new s t", "by fact"], ["proof (state)\nthis:\n  ref l = new s t\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  ref l = new s t \\<Longrightarrow> s@@k = new s t\n  ref k \\<noteq> nullV\n  ref l = new s t\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "hence \"s@@k = new s t\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from (s@@k)\n  ref l = new s t \\<Longrightarrow> s@@k = new s t\n  ref k \\<noteq> nullV\n  ref l = new s t\n\ngoal (1 subgoal):\n 1. s@@k = new s t", "by iprover"], ["proof (state)\nthis:\n  s@@k = new s t\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "moreover"], ["proof (state)\nthis:\n  s@@k = new s t\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "have \"\\<not> alive (new s t) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> alive (new s t) s", "by simp"], ["proof (state)\nthis:\n  \\<not> alive (new s t) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "moreover"], ["proof (state)\nthis:\n  \\<not> alive (new s t) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "have \"alive (s@@k) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alive (s@@k) s", "by simp"], ["proof (state)\nthis:\n  alive (s@@k) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "ultimately"], ["proof (chain)\npicking this:\n  s@@k = new s t\n  \\<not> alive (new s t) s\n  alive (s@@k) s", "have False"], ["proof (prove)\nusing this:\n  s@@k = new s t\n  \\<not> alive (new s t) s\n  alive (s@@k) s\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        ref l = new s t \\<Longrightarrow> s@@k = new s t;\n        ref k \\<noteq> nullV; ref l = new s t\\<rbrakk>\n       \\<Longrightarrow> ref k = new s t", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. ref k = new s t", ".."], ["proof (state)\nthis:\n  ref k = new s t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (viii)\\<close>"], ["", "lemma alive_reach_alive: \n  assumes alive_x: \"alive x s\" \n  assumes reach_l: \"s \\<turnstile> l reachable_from x\" \n  shows \"alive (ref l) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alive (ref l) s", "using reach_l alive_x"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  alive x s\n\ngoal (1 subgoal):\n 1. alive (ref l) s", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; alive (ref l) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  alive (ref l) s\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV; alive (ref l) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. alive (ref l) s", "by fact"], ["proof (state)\nthis:\n  alive (ref l) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  alive (s@@k) s \\<Longrightarrow> alive (ref l) s\n  ref k \\<noteq> nullV\n  alive (ref k) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "have hyp: \"alive (s@@k) s \\<Longrightarrow> alive (ref l) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alive (s@@k) s \\<Longrightarrow> alive (ref l) s", "by fact"], ["proof (state)\nthis:\n  alive (s@@k) s \\<Longrightarrow> alive (ref l) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "moreover"], ["proof (state)\nthis:\n  alive (s@@k) s \\<Longrightarrow> alive (ref l) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "have \"alive (s@@k) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alive (s@@k) s", "by simp"], ["proof (state)\nthis:\n  alive (s@@k) s\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        alive (s@@k) s \\<Longrightarrow> alive (ref l) s;\n        ref k \\<noteq> nullV; alive (ref k) s\\<rbrakk>\n       \\<Longrightarrow> alive (ref l) s", "ultimately"], ["proof (chain)\npicking this:\n  alive (s@@k) s \\<Longrightarrow> alive (ref l) s\n  alive (s@@k) s", "show \"alive (ref l) s\""], ["proof (prove)\nusing this:\n  alive (s@@k) s \\<Longrightarrow> alive (ref l) s\n  alive (s@@k) s\n\ngoal (1 subgoal):\n 1. alive (ref l) s", "by iprover"], ["proof (state)\nthis:\n  alive (ref l) s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2 (ix)\\<close>"], ["", "lemma reach9: \n  assumes reach_impl_access_eq: \"\\<forall>l. s1\\<turnstile>l reachable_from x \\<longrightarrow> (s1@@l = s2@@l)\"\n  shows \"s1\\<turnstile> l reachable_from x = s2\\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from x = s2\\<turnstile> l reachable_from x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s1\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s2\\<turnstile> l reachable_from x\n 2. s2\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from x", "assume \"s1\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from x\n\ngoal (2 subgoals):\n 1. s1\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s2\\<turnstile> l reachable_from x\n 2. s2\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from x", "from this reach_impl_access_eq"], ["proof (chain)\npicking this:\n  s1\\<turnstile> l reachable_from x\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from x \\<longrightarrow> s1@@l = s2@@l", "show \"s2\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s1\\<turnstile> l reachable_from x\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from x \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<forall>la.\n           s1\\<turnstile> la reachable_from ref l \\<longrightarrow>\n           s1@@la = s2@@la\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref l \\<longrightarrow> s1@@l = s2@@l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<forall>la.\n           s1\\<turnstile> la reachable_from ref l \\<longrightarrow>\n           s1@@la = s2@@la\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "show \"s2\\<turnstile> l reachable_from ref l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from ref l", "by (rule reach.intros) (rule Immediate.hyps)"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "case (Indirect l k)"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from (s1@@k)\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s2\\<turnstile> l reachable_from (s1@@k)\n  ref k \\<noteq> nullV\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "have hyp: \"\\<forall>l. s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l \n               \\<Longrightarrow> s2\\<turnstile> l reachable_from (s1@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n       s1@@l = s2@@l \\<Longrightarrow>\n    s2\\<turnstile> l reachable_from (s1@@k)", "by fact"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s2\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "have k_not_Null: \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "have reach_impl_access_eq: \n      \"\\<forall>l. s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l", "by fact"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "have \"s1\\<turnstile> l reachable_from (s1@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from (s1@@k)", "by fact"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "with k_not_Null"], ["proof (chain)\npicking this:\n  ref k \\<noteq> nullV\n  s1\\<turnstile> l reachable_from (s1@@k)", "have \"s1@@k = s2@@k\""], ["proof (prove)\nusing this:\n  ref k \\<noteq> nullV\n  s1\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. s1@@k = s2@@k", "by (iprover intro: reach_impl_access_eq [rule_format] reach.intros)"], ["proof (state)\nthis:\n  s1@@k = s2@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "moreover"], ["proof (state)\nthis:\n  s1@@k = s2@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "from reach_impl_access_eq k_not_Null"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  ref k \\<noteq> nullV", "have \"\\<forall>l. s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n       s1@@l = s2@@l", "by (iprover intro: reach.intros)"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "then"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l", "have \"s2\\<turnstile> l reachable_from (s1@@k)\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from (s1@@k)", "by (rule hyp)"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "ultimately"], ["proof (chain)\npicking this:\n  s1@@k = s2@@k\n  s2\\<turnstile> l reachable_from (s1@@k)", "have \"s2\\<turnstile> l reachable_from (s2@@k)\""], ["proof (prove)\nusing this:\n  s1@@k = s2@@k\n  s2\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from (s2@@k)", "by simp"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from (s2@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s1\\<turnstile> l reachable_from (s1@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s2\\<turnstile> l reachable_from (s1@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s2\\<turnstile> l reachable_from ref k", "thus \"s2\\<turnstile> l reachable_from ref k\""], ["proof (prove)\nusing this:\n  s2\\<turnstile> l reachable_from (s2@@k)\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from ref k", "by (rule reach.intros) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from ref k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from x", "assume \"s2\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s2\\<turnstile> l reachable_from x \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from x", "from this reach_impl_access_eq"], ["proof (chain)\npicking this:\n  s2\\<turnstile> l reachable_from x\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from x \\<longrightarrow> s1@@l = s2@@l", "show \"s1\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s2\\<turnstile> l reachable_from x\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from x \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from x", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<forall>la.\n           s1\\<turnstile> la reachable_from ref l \\<longrightarrow>\n           s1@@la = s2@@la\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref l \\<longrightarrow> s1@@l = s2@@l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<forall>la.\n           s1\\<turnstile> la reachable_from ref l \\<longrightarrow>\n           s1@@la = s2@@la\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref l\n 2. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "show \"s1\\<turnstile> l reachable_from ref l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from ref l", "by (rule reach.intros) (rule Immediate.hyps)"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "case (Indirect l k)"], ["proof (state)\nthis:\n  s2\\<turnstile> l reachable_from (s2@@k)\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s1\\<turnstile> l reachable_from (s2@@k)\n  ref k \\<noteq> nullV\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "have hyp: \"\\<forall>l. s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow> s1@@l = s2@@l \n               \\<Longrightarrow> s1\\<turnstile> l reachable_from (s2@@k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n       s1@@l = s2@@l \\<Longrightarrow>\n    s1\\<turnstile> l reachable_from (s2@@k)", "by fact"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s1\\<turnstile> l reachable_from (s2@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "have k_not_Null: \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "have reach_impl_access_eq: \n      \"\\<forall>l. s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l", "by fact"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "have \"s1\\<turnstile> k reachable_from ref k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1\\<turnstile> k reachable_from ref k", "by (rule reach.intros) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s1\\<turnstile> k reachable_from ref k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "with reach_impl_access_eq"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  s1\\<turnstile> k reachable_from ref k", "have eq_k: \"s1@@k = s2@@k\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  s1\\<turnstile> k reachable_from ref k\n\ngoal (1 subgoal):\n 1. s1@@k = s2@@k", "by simp"], ["proof (state)\nthis:\n  s1@@k = s2@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "from reach_impl_access_eq k_not_Null"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  ref k \\<noteq> nullV", "have \"\\<forall>l. s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from ref k \\<longrightarrow> s1@@l = s2@@l\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow>\n       s1@@l = s2@@l", "by (iprover intro: reach.intros)"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "then"], ["proof (chain)\npicking this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l", "have \"\\<forall>l. s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow> s1@@l = s2@@l\""], ["proof (prove)\nusing this:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s1@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n       s1@@l = s2@@l", "by (simp add: eq_k)"], ["proof (state)\nthis:\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "with eq_k hyp"], ["proof (chain)\npicking this:\n  s1@@k = s2@@k\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s1\\<turnstile> l reachable_from (s2@@k)\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow> s1@@l = s2@@l", "have \"s1\\<turnstile> l reachable_from (s1@@k)\""], ["proof (prove)\nusing this:\n  s1@@k = s2@@k\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n     s1@@l = s2@@l \\<Longrightarrow>\n  s1\\<turnstile> l reachable_from (s2@@k)\n  \\<forall>l.\n     s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow> s1@@l = s2@@l\n\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from (s1@@k)", "by simp"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s2\\<turnstile> l reachable_from (s2@@k);\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from (s2@@k) \\<longrightarrow>\n           s1@@l = s2@@l \\<Longrightarrow>\n        s1\\<turnstile> l reachable_from (s2@@k);\n        ref k \\<noteq> nullV;\n        \\<forall>l.\n           s1\\<turnstile> l reachable_from ref k \\<longrightarrow>\n           s1@@l = s2@@l\\<rbrakk>\n       \\<Longrightarrow> s1\\<turnstile> l reachable_from ref k", "thus \"s1\\<turnstile> l reachable_from ref k\""], ["proof (prove)\nusing this:\n  s1\\<turnstile> l reachable_from (s1@@k)\n\ngoal (1 subgoal):\n 1. s1\\<turnstile> l reachable_from ref k", "by (rule reach.intros) (rule Indirect.hyps)"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from ref k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1\\<turnstile> l reachable_from x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reachability of a Reference from a Reference\\<close>"], ["", "text \\<open>The predicate \\<open>rreach\\<close> tests whether a value is reachable from\nanother value. This is an extension of the predicate \\<open>oreach\\<close> as described\nin \\cite[p. 54]{Poetzsch-Heffter97specification} because now arrays are handled as well.\n\\<close>"], ["", "definition rreach:: \"Store \\<Rightarrow> Value \\<Rightarrow> Value \\<Rightarrow> bool\" \n  (\"_\\<turnstile>Ref _ reachable'_from _\" [91,91,91]90) where\n\"s\\<turnstile>Ref y reachable_from x = (\\<exists> l. s\\<turnstile> l reachable_from x \\<and> y = ref l)\""], ["", "subsection \\<open>Disjointness of Reachable Locations\\<close>"], ["", "text \\<open>The predicate \\<open>disj\\<close> tests whether two values are disjoint\nin a given store. Its properties as given in \n\\cite[Lemma 3.3, p. 54]{Poetzsch-Heffter97specification} are then proven.\n\\<close>"], ["", "definition disj:: \"Value \\<Rightarrow> Value \\<Rightarrow> Store \\<Rightarrow> bool\" where\n\"disj x y s = (\\<forall> l. \\<not> s\\<turnstile> l reachable_from x \\<or> \\<not> s\\<turnstile> l reachable_from y)\""], ["", "lemma disjI1: \"\\<lbrakk>\\<And> l. s\\<turnstile> l reachable_from x \\<Longrightarrow> \\<not> s\\<turnstile> l reachable_from y\\<rbrakk> \n \\<Longrightarrow> disj x y s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        s\\<turnstile> l reachable_from x \\<Longrightarrow>\n        \\<not> s\\<turnstile> l reachable_from y) \\<Longrightarrow>\n    StoreProperties.disj x y s", "by (simp add: disj_def)"], ["", "lemma disjI2: \"\\<lbrakk>\\<And> l. s\\<turnstile> l reachable_from y \\<Longrightarrow> \\<not> s\\<turnstile> l reachable_from x\\<rbrakk> \n \\<Longrightarrow> disj x y s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        s\\<turnstile> l reachable_from y \\<Longrightarrow>\n        \\<not> s\\<turnstile> l reachable_from x) \\<Longrightarrow>\n    StoreProperties.disj x y s", "by (auto simp add: disj_def)"], ["", "lemma disj_cases [consumes 1]: \n  assumes \"disj x y s\"\n  assumes \"\\<And> l.  \\<not> s\\<turnstile> l reachable_from x \\<Longrightarrow> P\"\n  assumes \"\\<And> l.  \\<not> s\\<turnstile> l reachable_from y \\<Longrightarrow> P\"\n  shows \"P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  StoreProperties.disj x y s\n  \\<not> s\\<turnstile> ?l reachable_from x \\<Longrightarrow> P\n  \\<not> s\\<turnstile> ?l reachable_from y \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by (auto simp add: disj_def)"], ["", "text \\<open>Lemma 3.3 (i) in \\cite{Poetzsch-Heffter97specification}\\<close>"], ["", "lemma disj1: \"\\<lbrakk>disj x y s; \\<not> s\\<turnstile> l reachable_from x; \\<not> s\\<turnstile> l reachable_from y\\<rbrakk> \n              \\<Longrightarrow> disj x y (s\\<langle>l:=z\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>StoreProperties.disj x y s;\n     \\<not> s\\<turnstile> l reachable_from x;\n     \\<not> s\\<turnstile> l reachable_from y\\<rbrakk>\n    \\<Longrightarrow> StoreProperties.disj x y (s\\<langle>l := z\\<rangle>)", "by (auto simp add: disj_def)"], ["", "text \\<open>Lemma 3.3 (ii)\\<close>"], ["", "lemma disj2: \n  assumes disj_x_y: \"disj x y s\" \n  assumes disj_x_z: \"disj x z s\"\n  assumes unreach_l_x: \"\\<not> s\\<turnstile> l reachable_from x\"\n  shows \"disj x y (s\\<langle>l:=z\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StoreProperties.disj x y (s\\<langle>l := z\\<rangle>)", "proof (rule disjI1)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from x \\<Longrightarrow>\n       \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from y", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from x \\<Longrightarrow>\n       \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from y", "assume reach_k_x: \"s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from x\""], ["proof (state)\nthis:\n  s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from x \\<Longrightarrow>\n       \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> la reachable_from y", "show \"\\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "from unreach_l_x reach_k_x"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> l reachable_from x\n  s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from x", "have reach_s_k_x: \"s\\<turnstile> k reachable_from x\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> l reachable_from x\n  s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> k reachable_from x", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "with disj_x_z"], ["proof (chain)\npicking this:\n  StoreProperties.disj x z s\n  s\\<turnstile> k reachable_from x", "have \"\\<not> s\\<turnstile> k reachable_from z\""], ["proof (prove)\nusing this:\n  StoreProperties.disj x z s\n  s\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> k reachable_from z", "by (simp add: disj_def)"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> k reachable_from z\n\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "moreover"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> k reachable_from z\n\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "from reach_s_k_x disj_x_y"], ["proof (chain)\npicking this:\n  s\\<turnstile> k reachable_from x\n  StoreProperties.disj x y s", "have \"\\<not> s\\<turnstile> k reachable_from y\""], ["proof (prove)\nusing this:\n  s\\<turnstile> k reachable_from x\n  StoreProperties.disj x y s\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> k reachable_from y", "by (simp add: disj_def)"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> k reachable_from y\n\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> k reachable_from z\n  \\<not> s\\<turnstile> k reachable_from y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> k reachable_from z\n  \\<not> s\\<turnstile> k reachable_from y\n\ngoal (1 subgoal):\n 1. \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y", "by (rule reach3)"], ["proof (state)\nthis:\n  \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> s\\<langle>l := z\\<rangle>\\<turnstile> k reachable_from y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.3 (iii)\\<close>"], ["", "lemma disj3: assumes alive_x_s: \"alive x s\" \n  shows \"disj x (new s t) (s\\<langle>t\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StoreProperties.disj x (new s t) (s\\<langle>t\\<rangle>)", "proof (rule disjI1,simp only: reach_alloc)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       \\<not> s\\<turnstile> l reachable_from new s t", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       \\<not> s\\<turnstile> l reachable_from new s t", "assume reach_l_x: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       \\<not> s\\<turnstile> l reachable_from new s t", "show \"\\<not> s\\<turnstile> l reachable_from new s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from new s t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "assume reach_l_new: \"s\\<turnstile> l reachable_from new s t\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from new s t\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "have unalive_new: \"\\<not> alive (new s t) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> alive (new s t) s", "by simp"], ["proof (state)\nthis:\n  \\<not> alive (new s t) s\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "from this reach_l_new"], ["proof (chain)\npicking this:\n  \\<not> alive (new s t) s\n  s\\<turnstile> l reachable_from new s t", "have  \"new s t = ref l\""], ["proof (prove)\nusing this:\n  \\<not> alive (new s t) s\n  s\\<turnstile> l reachable_from new s t\n\ngoal (1 subgoal):\n 1. new s t = ref l", "by (rule ref_reach_unalive)"], ["proof (state)\nthis:\n  new s t = ref l\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  new s t = ref l\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "from alive_x_s reach_l_x"], ["proof (chain)\npicking this:\n  alive x s\n  s\\<turnstile> l reachable_from x", "have \"alive (ref l) s\""], ["proof (prove)\nusing this:\n  alive x s\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. alive (ref l) s", "by (rule alive_reach_alive)"], ["proof (state)\nthis:\n  alive (ref l) s\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from new s t \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  new s t = ref l\n  alive (ref l) s", "show False"], ["proof (prove)\nusing this:\n  new s t = ref l\n  alive (ref l) s\n\ngoal (1 subgoal):\n 1. False", "using unalive_new"], ["proof (prove)\nusing this:\n  new s t = ref l\n  alive (ref l) s\n  \\<not> alive (new s t) s\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> l reachable_from new s t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.3 (iv)\\<close>"], ["", "lemma disj4: \"\\<lbrakk>disj (objV C a) y s; CClassT C \\<le> dtype f \\<rbrakk>  \n              \\<Longrightarrow> disj (s@@(objV C a)..f) y s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>StoreProperties.disj (objV C a) y s;\n     CClassT C \\<le> dtype f\\<rbrakk>\n    \\<Longrightarrow> StoreProperties.disj (s@@objV C a..f) y s", "by (auto simp add: disj_def)"], ["", "lemma disj4': \"\\<lbrakk>disj (arrV T a) y s \\<rbrakk>  \n              \\<Longrightarrow> disj (s@@(arrV T a).[i]) y s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StoreProperties.disj (arrV T a) y s \\<Longrightarrow>\n    StoreProperties.disj (s@@arrV T a.[i]) y s", "by (auto simp add: disj_def)"], ["", "subsection \\<open>X-Equivalence\\<close>"], ["", "text \\<open>We call two stores $s_1$ and $s_2$ equivalent wrt. a given value $X$\n(which is called X-equivalence)\n iff $X$ and all values\nreachable from $X$ in $s_1$ or $s_2$ have the same state \\cite[p. 55]{Poetzsch-Heffter97specification}. \nThis is tested by  the predicate\n\\<open>xeq\\<close>. Lemma 3.4 of  \\cite{Poetzsch-Heffter97specification} is then proven for \\<open>xeq\\<close>.\n\\<close>"], ["", "definition xeq:: \"Value \\<Rightarrow> Store \\<Rightarrow> Store \\<Rightarrow> bool\" where\n\"xeq x s t = (alive x s = alive x t \\<and> \n             (\\<forall> l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l))\""], ["", "abbreviation xeq_syntax :: \"Store \\<Rightarrow> Value \\<Rightarrow> Store \\<Rightarrow> bool\"\n  (\"_/ (\\<equiv>[_])/ _\" [900,0,900] 900)\nwhere \"s \\<equiv>[x] t == xeq x s t\""], ["", "lemma xeqI: \"\\<lbrakk>alive x s = alive x t;  \n             \\<And> l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l\n             \\<rbrakk> \\<Longrightarrow> s \\<equiv>[x] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alive x s = alive x t;\n     \\<And>l.\n        s\\<turnstile> l reachable_from x \\<Longrightarrow>\n        s@@l = t@@l\\<rbrakk>\n    \\<Longrightarrow> s \\<equiv>[x] t", "by (auto simp add: xeq_def)"], ["", "text \\<open>Lemma 3.4 (i) in  \\cite{Poetzsch-Heffter97specification}.\\<close>"], ["", "lemma xeq1_refl: \"s \\<equiv>[x] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s", "by (simp add: xeq_def)"], ["", "text \\<open>Lemma 3.4 (i)\\<close>"], ["", "lemma xeq1_sym': \n  assumes s_t: \"s \\<equiv>[x] t\"\n  shows \"t \\<equiv>[x] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "from s_t"], ["proof (chain)\npicking this:\n  s \\<equiv>[x] t", "have \"alive x s = alive x t\""], ["proof (prove)\nusing this:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. alive x s = alive x t", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  alive x s = alive x t\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "moreover"], ["proof (state)\nthis:\n  alive x s = alive x t\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "from s_t"], ["proof (chain)\npicking this:\n  s \\<equiv>[x] t", "have \"\\<forall> l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l\""], ["proof (prove)\nusing this:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "with reach9 [OF this]"], ["proof (chain)\npicking this:\n  s\\<turnstile> ?l reachable_from x = t\\<turnstile> ?l reachable_from x\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l", "have \"\\<forall> l. t\\<turnstile> l reachable_from x \\<longrightarrow> t@@l = s@@l\""], ["proof (prove)\nusing this:\n  s\\<turnstile> ?l reachable_from x = t\\<turnstile> ?l reachable_from x\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       t\\<turnstile> l reachable_from x \\<longrightarrow> t@@l = s@@l", "by simp"], ["proof (state)\nthis:\n  \\<forall>l. t\\<turnstile> l reachable_from x \\<longrightarrow> t@@l = s@@l\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "ultimately"], ["proof (chain)\npicking this:\n  alive x s = alive x t\n  \\<forall>l. t\\<turnstile> l reachable_from x \\<longrightarrow> t@@l = s@@l", "show ?thesis"], ["proof (prove)\nusing this:\n  alive x s = alive x t\n  \\<forall>l. t\\<turnstile> l reachable_from x \\<longrightarrow> t@@l = s@@l\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] s", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  t \\<equiv>[x] s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma xeq1_sym: \"s \\<equiv>[x] t = t \\<equiv>[x] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t = t \\<equiv>[x] s", "by (auto intro: xeq1_sym')"], ["", "text \\<open>Lemma 3.4 (i)\\<close>"], ["", "lemma xeq1_trans [trans]: \n  assumes s_t: \"s \\<equiv>[x] t\" \n  assumes t_r: \"t \\<equiv>[x] r\" \n  shows \"s \\<equiv>[x] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "from s_t t_r"], ["proof (chain)\npicking this:\n  s \\<equiv>[x] t\n  t \\<equiv>[x] r", "have \"alive x s = alive x r\""], ["proof (prove)\nusing this:\n  s \\<equiv>[x] t\n  t \\<equiv>[x] r\n\ngoal (1 subgoal):\n 1. alive x s = alive x r", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  alive x s = alive x r\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "moreover"], ["proof (state)\nthis:\n  alive x s = alive x r\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "have \"\\<forall> l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = r@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = r@@l", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = r@@l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = r@@l", "assume reach_l: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = r@@l", "show \"s@@l = r@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s@@l = r@@l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s@@l = r@@l", "from reach_l s_t"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from x\n  s \\<equiv>[x] t", "have \"s@@l=t@@l\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal (1 subgoal):\n 1. s@@l = r@@l", "also"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal (1 subgoal):\n 1. s@@l = r@@l", "have \"t@@l = r@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t@@l = r@@l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t@@l = r@@l", "from s_t"], ["proof (chain)\npicking this:\n  s \\<equiv>[x] t", "have \"\\<forall> l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l\""], ["proof (prove)\nusing this:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<forall>l.\n       s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = t@@l\n\ngoal (1 subgoal):\n 1. t@@l = r@@l", "from reach9 [OF this] reach_l"], ["proof (chain)\npicking this:\n  s\\<turnstile> ?l reachable_from x = t\\<turnstile> ?l reachable_from x\n  s\\<turnstile> l reachable_from x", "have \"t\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> ?l reachable_from x = t\\<turnstile> ?l reachable_from x\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. t\\<turnstile> l reachable_from x", "by simp"], ["proof (state)\nthis:\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. t@@l = r@@l", "with t_r"], ["proof (chain)\npicking this:\n  t \\<equiv>[x] r\n  t\\<turnstile> l reachable_from x", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<equiv>[x] r\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. t@@l = r@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  t@@l = r@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t@@l = r@@l\n\ngoal (1 subgoal):\n 1. s@@l = r@@l", "finally"], ["proof (chain)\npicking this:\n  s@@l = r@@l", "show ?thesis"], ["proof (prove)\nusing this:\n  s@@l = r@@l\n\ngoal (1 subgoal):\n 1. s@@l = r@@l", "."], ["proof (state)\nthis:\n  s@@l = r@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s@@l = r@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = r@@l\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "ultimately"], ["proof (chain)\npicking this:\n  alive x s = alive x r\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = r@@l", "show ?thesis"], ["proof (prove)\nusing this:\n  alive x s = alive x r\n  \\<forall>l. s\\<turnstile> l reachable_from x \\<longrightarrow> s@@l = r@@l\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] r", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s \\<equiv>[x] r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.4 (ii)\\<close>"], ["", "lemma xeq2: \n  assumes xeq: \"\\<forall> x. s \\<equiv>[x] t\" \n  assumes static_eq: \"\\<forall> f. s@@(staticLoc f) = t@@(staticLoc f)\" \n  shows \"s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = t", "proof (rule Store_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x. alive x s = alive x t\n 2. \\<forall>l. s@@l = t@@l", "from xeq"], ["proof (chain)\npicking this:\n  \\<forall>x. s \\<equiv>[x] t", "show \"\\<forall>x. alive x s = alive x t\""], ["proof (prove)\nusing this:\n  \\<forall>x. s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<forall>x. alive x s = alive x t", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  \\<forall>x. alive x s = alive x t\n\ngoal (1 subgoal):\n 1. \\<forall>l. s@@l = t@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l. s@@l = t@@l", "show \"\\<forall>l. s@@l = t@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l. s@@l = t@@l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s@@l = t@@l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s@@l = t@@l", "show \"s@@l = t@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s@@l = t@@l", "proof (cases l)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12. l = objLoc x11 x12 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 4. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "case (objLoc cf a)"], ["proof (state)\nthis:\n  l = objLoc cf a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. l = objLoc x11 x12 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 4. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "have \"l = objLoc cf a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = objLoc cf a", "by fact"], ["proof (state)\nthis:\n  l = objLoc cf a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. l = objLoc x11 x12 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 4. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "hence \"s\\<turnstile> l reachable_from (objV (cls cf) a)\""], ["proof (prove)\nusing this:\n  l = objLoc cf a\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from objV (cls cf) a", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from objV (cls cf) a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. l = objLoc x11 x12 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 4. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "with xeq"], ["proof (chain)\npicking this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from objV (cls cf) a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from objV (cls cf) a\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal (3 subgoals):\n 1. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "case (staticLoc f)"], ["proof (state)\nthis:\n  l = staticLoc f\n\ngoal (3 subgoals):\n 1. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "have \"l = staticLoc f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = staticLoc f", "by fact"], ["proof (state)\nthis:\n  l = staticLoc f\n\ngoal (3 subgoals):\n 1. \\<And>x2. l = staticLoc x2 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 3. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "with static_eq"], ["proof (chain)\npicking this:\n  \\<forall>f. s@@staticLoc f = t@@staticLoc f\n  l = staticLoc f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f. s@@staticLoc f = t@@staticLoc f\n  l = staticLoc f\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "case (arrLenLoc T a)"], ["proof (state)\nthis:\n  l = arrLenLoc T a\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "have \"l = arrLenLoc T a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = arrLenLoc T a", "by fact"], ["proof (state)\nthis:\n  l = arrLenLoc T a\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "hence \"s\\<turnstile> l reachable_from (arrV T a)\""], ["proof (prove)\nusing this:\n  l = arrLenLoc T a\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from arrV T a", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from arrV T a\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32. l = arrLenLoc x31 x32 \\<Longrightarrow> s@@l = t@@l\n 2. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "with xeq"], ["proof (chain)\npicking this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from arrV T a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from arrV T a\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "case (arrLoc T a i)"], ["proof (state)\nthis:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "have \"l = arrLoc T a i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = arrLoc T a i", "by fact"], ["proof (state)\nthis:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "hence \"s\\<turnstile> l reachable_from (arrV T a)\""], ["proof (prove)\nusing this:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from arrV T a", "by simp"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from arrV T a\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43. l = arrLoc x41 x42 x43 \\<Longrightarrow> s@@l = t@@l", "with xeq"], ["proof (chain)\npicking this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from arrV T a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x. s \\<equiv>[x] t\n  s\\<turnstile> l reachable_from arrV T a\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by (simp add: xeq_def)"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l. s@@l = t@@l\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.4 (iii)\\<close>"], ["", "lemma xeq3: \n  assumes unreach_l: \"\\<not> s\\<turnstile> l reachable_from x\" \n  shows \"s \\<equiv>[x] s\\<langle>l:=y\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>l := y\\<rangle>", "proof (rule xeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s = alive x (s\\<langle>l := y\\<rangle>)\n 2. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "show \"alive x s = alive x (s\\<langle>l := y\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alive x s = alive x (s\\<langle>l := y\\<rangle>)", "by simp"], ["proof (state)\nthis:\n  alive x s = alive x (s\\<langle>l := y\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "assume reach_k: \"s\\<turnstile> k reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "with unreach_l"], ["proof (chain)\npicking this:\n  \\<not> s\\<turnstile> l reachable_from x\n  s\\<turnstile> k reachable_from x", "have \"l\\<noteq>k\""], ["proof (prove)\nusing this:\n  \\<not> s\\<turnstile> l reachable_from x\n  s\\<turnstile> k reachable_from x\n\ngoal (1 subgoal):\n 1. l \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  l \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       s\\<turnstile> la reachable_from x \\<Longrightarrow>\n       s@@la = s\\<langle>l := y\\<rangle>@@la", "then"], ["proof (chain)\npicking this:\n  l \\<noteq> k", "show \"s@@k = s\\<langle>l := y\\<rangle>@@k\""], ["proof (prove)\nusing this:\n  l \\<noteq> k\n\ngoal (1 subgoal):\n 1. s@@k = s\\<langle>l := y\\<rangle>@@k", "by simp"], ["proof (state)\nthis:\n  s@@k = s\\<langle>l := y\\<rangle>@@k\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.4 (iv)\\<close>"], ["", "lemma xeq4: assumes not_new: \"x \\<noteq> new s t\" \n  shows \"s \\<equiv>[x] s\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>t\\<rangle>", "proof (rule xeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s = alive x (s\\<langle>t\\<rangle>)\n 2. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       s@@l = s\\<langle>t\\<rangle>@@l", "from not_new"], ["proof (chain)\npicking this:\n  x \\<noteq> new s t", "show \"alive x s = alive x (s\\<langle>t\\<rangle>)\""], ["proof (prove)\nusing this:\n  x \\<noteq> new s t\n\ngoal (1 subgoal):\n 1. alive x s = alive x (s\\<langle>t\\<rangle>)", "by (simp add: alive_alloc_exhaust)"], ["proof (state)\nthis:\n  alive x s = alive x (s\\<langle>t\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       s@@l = s\\<langle>t\\<rangle>@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       s@@l = s\\<langle>t\\<rangle>@@l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       s@@l = s\\<langle>t\\<rangle>@@l", "assume reach_l: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       s\\<turnstile> l reachable_from x \\<Longrightarrow>\n       s@@l = s\\<langle>t\\<rangle>@@l", "show \"s@@l = s\\<langle>t\\<rangle>@@l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s@@l = s\\<langle>t\\<rangle>@@l", "proof (cases \"isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. isNewArr t \\<longrightarrow>\n    l \\<noteq> arr_len (new s t) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l\n 2. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "case True"], ["proof (state)\nthis:\n  isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\n\ngoal (2 subgoals):\n 1. isNewArr t \\<longrightarrow>\n    l \\<noteq> arr_len (new s t) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l\n 2. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "with reach_l"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from x\n  isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)", "show ?thesis"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t)\n\ngoal (1 subgoal):\n 1. s@@l = s\\<langle>t\\<rangle>@@l", "by simp"], ["proof (state)\nthis:\n  s@@l = s\\<langle>t\\<rangle>@@l\n\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "case False"], ["proof (state)\nthis:\n  \\<not> (isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t))\n\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "then"], ["proof (chain)\npicking this:\n  \\<not> (isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t))", "obtain T n where t: \"t = new_array T n\" and\n                          l: \"l = arr_len (new s t)\""], ["proof (prove)\nusing this:\n  \\<not> (isNewArr t \\<longrightarrow> l \\<noteq> arr_len (new s t))\n\ngoal (1 subgoal):\n 1. (\\<And>T n.\n        \\<lbrakk>t = new_array T n; l = arr_len (new s t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases t) auto"], ["proof (state)\nthis:\n  t = new_array T n\n  l = arr_len (new s t)\n\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "hence \"ref l = new s t\""], ["proof (prove)\nusing this:\n  t = new_array T n\n  l = arr_len (new s t)\n\ngoal (1 subgoal):\n 1. ref l = new s t", "by simp"], ["proof (state)\nthis:\n  ref l = new s t\n\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "from this reach_l"], ["proof (chain)\npicking this:\n  ref l = new s t\n  s\\<turnstile> l reachable_from x", "have \"x = new s t\""], ["proof (prove)\nusing this:\n  ref l = new s t\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. x = new s t", "by (rule loc_new_reach)"], ["proof (state)\nthis:\n  x = new s t\n\ngoal (1 subgoal):\n 1. \\<not> (isNewArr t \\<longrightarrow>\n            l \\<noteq> arr_len (new s t)) \\<Longrightarrow>\n    s@@l = s\\<langle>t\\<rangle>@@l", "with not_new"], ["proof (chain)\npicking this:\n  x \\<noteq> new s t\n  x = new s t", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> new s t\n  x = new s t\n\ngoal (1 subgoal):\n 1. s@@l = s\\<langle>t\\<rangle>@@l", ".."], ["proof (state)\nthis:\n  s@@l = s\\<langle>t\\<rangle>@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s@@l = s\\<langle>t\\<rangle>@@l\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.4 (v)\\<close>"], ["", "lemma xeq5: \"s \\<equiv>[x] t \\<Longrightarrow> s\\<turnstile> l reachable_from x = t\\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t \\<Longrightarrow>\n    s\\<turnstile> l reachable_from x = t\\<turnstile> l reachable_from x", "by (rule reach9) (simp add:  xeq_def)"], ["", "subsection \\<open>T-Equivalence\\<close>"], ["", "text \\<open>T-equivalence is the extension of X-equivalence from values to types. Two stores are\nT-equivalent iff they are X-equivalent for all values of type T. This is formalized by the\npredicate \\<open>teq\\<close> \\cite[p. 55]{Poetzsch-Heffter97specification}.\\<close>"], ["", "definition teq:: \"Javatype \\<Rightarrow> Store \\<Rightarrow> Store \\<Rightarrow> bool\" where\n\"teq t s1 s2 = (\\<forall> x. typeof x \\<le> t \\<longrightarrow> s1 \\<equiv>[x] s2)\""], ["", "subsection \\<open>Less Alive\\<close>"], ["", "text \\<open>To specify that methods have no side-effects, the following binary relation on stores \nplays a prominent role. It expresses that the two stores differ only in values that are alive\nin the store passed as first argument. This is formalized by the predicate \\<open>lessalive\\<close>\n\\cite[p. 55]{Poetzsch-Heffter97specification}.\nThe stores have to be X-equivalent for the references of the\nfirst store that are alive, and the values of the static fields have to be the same in both stores.\n\\<close>"], ["", "definition lessalive:: \"Store \\<Rightarrow> Store \\<Rightarrow> bool\" (\"_/ \\<lless> _\" [70,71] 70)\n  where \"lessalive s t = ((\\<forall> x. alive x s \\<longrightarrow> s \\<equiv>[x] t) \\<and> (\\<forall> f. s@@staticLoc f = t@@staticLoc f))\""], ["", "text \\<open>We define an introduction rule for the new operator.\\<close>"], ["", "lemma lessaliveI: \n  \"\\<lbrakk>\\<And> x. alive x s \\<Longrightarrow>  s \\<equiv>[x] t; \\<And> f. s@@staticLoc f = t@@staticLoc f\\<rbrakk>\n   \\<Longrightarrow> s \\<lless> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] t;\n     \\<And>f. s@@staticLoc f = t@@staticLoc f\\<rbrakk>\n    \\<Longrightarrow> s \\<lless> t", "by (simp add: lessalive_def)"], ["", "text \\<open>It can be shown that \\<open>lessalive\\<close> is reflexive, transitive and antisymmetric.\\<close>"], ["", "lemma lessalive_refl: \"s \\<lless> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<lless> s", "by (simp add: lessalive_def xeq1_refl)"], ["", "lemma lessalive_trans [trans]: \n  assumes s_t: \"s \\<lless> t\"\n  assumes t_w: \"t \\<lless> w\"\n  shows \"s \\<lless> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<lless> w", "proof (rule lessaliveI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "assume alive_x_s: \"alive x s\""], ["proof (state)\nthis:\n  alive x s\n\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "with s_t"], ["proof (chain)\npicking this:\n  s \\<lless> t\n  alive x s", "have \"s \\<equiv>[x] t\""], ["proof (prove)\nusing this:\n  s \\<lless> t\n  alive x s\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "also"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "have \"t \\<equiv>[x] w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<equiv>[x] w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<equiv>[x] w", "from alive_x_s s_t"], ["proof (chain)\npicking this:\n  alive x s\n  s \\<lless> t", "have \"alive x t\""], ["proof (prove)\nusing this:\n  alive x s\n  s \\<lless> t\n\ngoal (1 subgoal):\n 1. alive x t", "by (simp add: lessalive_def xeq_def)"], ["proof (state)\nthis:\n  alive x t\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] w", "with t_w"], ["proof (chain)\npicking this:\n  t \\<lless> w\n  alive x t", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<lless> w\n  alive x t\n\ngoal (1 subgoal):\n 1. t \\<equiv>[x] w", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  t \\<equiv>[x] w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<equiv>[x] w\n\ngoal (2 subgoals):\n 1. \\<And>x. alive x s \\<Longrightarrow> s \\<equiv>[x] w\n 2. \\<And>f. s@@staticLoc f = w@@staticLoc f", "finally"], ["proof (chain)\npicking this:\n  s \\<equiv>[x] w", "show \"s \\<equiv>[x] w\""], ["proof (prove)\nusing this:\n  s \\<equiv>[x] w\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] w", "."], ["proof (state)\nthis:\n  s \\<equiv>[x] w\n\ngoal (1 subgoal):\n 1. \\<And>f. s@@staticLoc f = w@@staticLoc f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. s@@staticLoc f = w@@staticLoc f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. s@@staticLoc f = w@@staticLoc f", "from s_t t_w"], ["proof (chain)\npicking this:\n  s \\<lless> t\n  t \\<lless> w", "show \"s@@staticLoc f = w@@staticLoc f\""], ["proof (prove)\nusing this:\n  s \\<lless> t\n  t \\<lless> w\n\ngoal (1 subgoal):\n 1. s@@staticLoc f = w@@staticLoc f", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  s@@staticLoc f = w@@staticLoc f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lessalive_antisym:\n  assumes s_t: \"s \\<lless> t\"\n  assumes t_s: \"t \\<lless> s\"\n  shows \"s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = t", "proof (rule xeq2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x. s \\<equiv>[x] t\n 2. \\<forall>f. s@@staticLoc f = t@@staticLoc f", "show \"\\<forall>x. s \\<equiv>[x] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. s \\<equiv>[x] t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. s \\<equiv>[x] t", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. s \\<equiv>[x] t", "show \"s \\<equiv>[x] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "proof (cases \"alive x s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "case True"], ["proof (state)\nthis:\n  alive x s\n\ngoal (2 subgoals):\n 1. alive x s \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "with s_t"], ["proof (chain)\npicking this:\n  s \\<lless> t\n  alive x s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<lless> t\n  alive x s\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "case False"], ["proof (state)\nthis:\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "note unalive_x_s = this"], ["proof (state)\nthis:\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "proof (cases \"alive x t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x t \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x t \\<Longrightarrow> s \\<equiv>[x] t", "case True"], ["proof (state)\nthis:\n  alive x t\n\ngoal (2 subgoals):\n 1. alive x t \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x t \\<Longrightarrow> s \\<equiv>[x] t", "with t_s"], ["proof (chain)\npicking this:\n  t \\<lless> s\n  alive x t", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<lless> s\n  alive x t\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "by (subst xeq1_sym) (simp add: lessalive_def)"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<not> alive x t \\<Longrightarrow> s \\<equiv>[x] t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> alive x t \\<Longrightarrow> s \\<equiv>[x] t", "case False"], ["proof (state)\nthis:\n  \\<not> alive x t\n\ngoal (1 subgoal):\n 1. \\<not> alive x t \\<Longrightarrow> s \\<equiv>[x] t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "proof (rule xeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s = alive x t\n 2. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "from False unalive_x_s"], ["proof (chain)\npicking this:\n  \\<not> alive x t\n  \\<not> alive x s", "show \"alive x s = alive x t\""], ["proof (prove)\nusing this:\n  \\<not> alive x t\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. alive x s = alive x t", "by simp"], ["proof (state)\nthis:\n  alive x s = alive x t\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "assume reach_s_x: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with unalive_x_s"], ["proof (chain)\npicking this:\n  \\<not> alive x s\n  s\\<turnstile> l reachable_from x", "have x: \"x = ref l\""], ["proof (prove)\nusing this:\n  \\<not> alive x s\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. x = ref l", "by (rule ref_reach_unalive)"], ["proof (state)\nthis:\n  x = ref l\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with unalive_x_s"], ["proof (chain)\npicking this:\n  \\<not> alive x s\n  x = ref l", "have \"s@@l = init (ltype l)\""], ["proof (prove)\nusing this:\n  \\<not> alive x s\n  x = ref l\n\ngoal (1 subgoal):\n 1. s@@l = init (ltype l)", "by simp"], ["proof (state)\nthis:\n  s@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "also"], ["proof (state)\nthis:\n  s@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "from reach_s_x x"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from x\n  x = ref l", "have \"t\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  x = ref l\n\ngoal (1 subgoal):\n 1. t\\<turnstile> l reachable_from x", "by (auto intro: reach.Immediate unreachable_Null)"], ["proof (state)\nthis:\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with False x"], ["proof (chain)\npicking this:\n  \\<not> alive x t\n  x = ref l\n  t\\<turnstile> l reachable_from x", "have \"t@@l = init (ltype l)\""], ["proof (prove)\nusing this:\n  \\<not> alive x t\n  x = ref l\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. t@@l = init (ltype l)", "by simp"], ["proof (state)\nthis:\n  t@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "finally"], ["proof (chain)\npicking this:\n  t@@l = s@@l", "show \"s@@l = t@@l\""], ["proof (prove)\nusing this:\n  t@@l = s@@l\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by simp"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x. s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<forall>f. s@@staticLoc f = t@@staticLoc f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>f. s@@staticLoc f = t@@staticLoc f", "from s_t"], ["proof (chain)\npicking this:\n  s \\<lless> t", "show \"\\<forall>f. s@@staticLoc f = t@@staticLoc f\""], ["proof (prove)\nusing this:\n  s \\<lless> t\n\ngoal (1 subgoal):\n 1. \\<forall>f. s@@staticLoc f = t@@staticLoc f", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  \\<forall>f. s@@staticLoc f = t@@staticLoc f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This gives us a partial ordering on the store. Thus, the type @{typ \"Store\"}\ncan be added to the appropriate type class @{term \"ord\"} which lets us define the $<$ and\n$\\leq$ symbols, and to the type class  @{term \"order\"} which axiomatizes partial orderings.\n\\<close>"], ["", "instantiation Store :: order\nbegin"], ["", "definition\n  le_Store_def: \"s \\<le> t \\<longleftrightarrow> s \\<lless> t\""], ["", "definition\n  less_Store_def: \"(s::Store) < t \\<longleftrightarrow> s \\<le> t \\<and> \\<not> t \\<le> s\""], ["", "text \\<open>We prove Lemma 3.5 of \\cite[p. 56]{Poetzsch-Heffter97specification} for this relation.\n\\<close>"], ["", "text \\<open>Lemma 3.5 (i)\\<close>"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Store, order_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix s t w:: \"Store\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"s \\<le> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<le> s", "by (simp add: le_Store_def lessalive_refl)"], ["proof (state)\nthis:\n  s \\<le> s\n\ngoal (3 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume \"s \\<le> t\" \"t \\<le> w\""], ["proof (state)\nthis:\n  s \\<le> t\n  t \\<le> w\n\ngoal (3 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  s \\<le> t\n  t \\<le> w", "show \"s \\<le> w\""], ["proof (prove)\nusing this:\n  s \\<le> t\n  t \\<le> w\n\ngoal (1 subgoal):\n 1. s \\<le> w", "by (unfold le_Store_def) (rule lessalive_trans)"], ["proof (state)\nthis:\n  s \\<le> w\n\ngoal (2 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "assume \"s \\<le> t\" \"t \\<le> s\""], ["proof (state)\nthis:\n  s \\<le> t\n  t \\<le> s\n\ngoal (2 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  s \\<le> t\n  t \\<le> s", "show \"s = t\""], ["proof (prove)\nusing this:\n  s \\<le> t\n  t \\<le> s\n\ngoal (1 subgoal):\n 1. s = t", "by (unfold le_Store_def) (rule lessalive_antisym)"], ["proof (state)\nthis:\n  s = t\n\ngoal (1 subgoal):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)", "show \"(s < t) = (s \\<le> t \\<and> \\<not> t \\<le> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s < t) = (s \\<le> t \\<and> \\<not> t \\<le> s)", "by (simp add: less_Store_def)"], ["proof (state)\nthis:\n  (s < t) = (s \\<le> t \\<and> \\<not> t \\<le> s)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  (s < t) = (s \\<le> t \\<and> \\<not> t \\<le> s)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Lemma 3.5 (ii)\\<close>"], ["", "lemma lessalive2: \"\\<lbrakk>s \\<lless> t; alive x s\\<rbrakk> \\<Longrightarrow> alive x t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<lless> t; alive x s\\<rbrakk> \\<Longrightarrow> alive x t", "by (simp add: lessalive_def xeq_def)"], ["", "text \\<open>Lemma 3.5 (iii)\\<close>"], ["", "lemma lessalive3: \n  assumes s_t: \"s \\<lless> t\" \n  assumes alive: \"alive x s \\<or> \\<not> alive x t\"\n  shows \"s \\<equiv>[x] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "proof (cases \"alive x s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "case True"], ["proof (state)\nthis:\n  alive x s\n\ngoal (2 subgoals):\n 1. alive x s \\<Longrightarrow> s \\<equiv>[x] t\n 2. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "with s_t"], ["proof (chain)\npicking this:\n  s \\<lless> t\n  alive x s", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<lless> t\n  alive x s\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "by (simp add: lessalive_def)"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "case False"], ["proof (state)\nthis:\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "note unalive_x_s = this"], ["proof (state)\nthis:\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "with alive"], ["proof (chain)\npicking this:\n  alive x s \\<or> \\<not> alive x t\n  \\<not> alive x s", "have unalive_x_t: \"\\<not> alive x t\""], ["proof (prove)\nusing this:\n  alive x s \\<or> \\<not> alive x t\n  \\<not> alive x s\n\ngoal (1 subgoal):\n 1. \\<not> alive x t", "by simp"], ["proof (state)\nthis:\n  \\<not> alive x t\n\ngoal (1 subgoal):\n 1. \\<not> alive x s \\<Longrightarrow> s \\<equiv>[x] t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] t", "proof (rule xeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. alive x s = alive x t\n 2. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "from False alive"], ["proof (chain)\npicking this:\n  \\<not> alive x s\n  alive x s \\<or> \\<not> alive x t", "show \"alive x s = alive x t\""], ["proof (prove)\nusing this:\n  \\<not> alive x s\n  alive x s \\<or> \\<not> alive x t\n\ngoal (1 subgoal):\n 1. alive x s = alive x t", "by simp"], ["proof (state)\nthis:\n  alive x s = alive x t\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "assume reach_s_x: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with unalive_x_s"], ["proof (chain)\npicking this:\n  \\<not> alive x s\n  s\\<turnstile> l reachable_from x", "have x: \"x = ref l\""], ["proof (prove)\nusing this:\n  \\<not> alive x s\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. x = ref l", "by (rule ref_reach_unalive)"], ["proof (state)\nthis:\n  x = ref l\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with unalive_x_s"], ["proof (chain)\npicking this:\n  \\<not> alive x s\n  x = ref l", "have \"s@@l = init (ltype l)\""], ["proof (prove)\nusing this:\n  \\<not> alive x s\n  x = ref l\n\ngoal (1 subgoal):\n 1. s@@l = init (ltype l)", "by simp"], ["proof (state)\nthis:\n  s@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "also"], ["proof (state)\nthis:\n  s@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "from reach_s_x x"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from x\n  x = ref l", "have \"t\\<turnstile> l reachable_from x\""], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  x = ref l\n\ngoal (1 subgoal):\n 1. t\\<turnstile> l reachable_from x", "by (auto intro: reach.Immediate unreachable_Null)"], ["proof (state)\nthis:\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "with unalive_x_t x"], ["proof (chain)\npicking this:\n  \\<not> alive x t\n  x = ref l\n  t\\<turnstile> l reachable_from x", "have \"t@@l = init (ltype l)\""], ["proof (prove)\nusing this:\n  \\<not> alive x t\n  x = ref l\n  t\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. t@@l = init (ltype l)", "by simp"], ["proof (state)\nthis:\n  t@@l = init (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l. s\\<turnstile> l reachable_from x \\<Longrightarrow> s@@l = t@@l", "finally"], ["proof (chain)\npicking this:\n  t@@l = s@@l", "show \"s@@l = t@@l\""], ["proof (prove)\nusing this:\n  t@@l = s@@l\n\ngoal (1 subgoal):\n 1. s@@l = t@@l", "by simp"], ["proof (state)\nthis:\n  s@@l = t@@l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<equiv>[x] t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.5 (iv)\\<close>"], ["", "lemma lessalive_update [simp,intro]: \n  assumes s_t: \"s \\<lless> t\" \n  assumes unalive_l: \"\\<not> alive (ref l) t\"\n  shows \"s \\<lless> t\\<langle>l:=x\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<lless> t\\<langle>l := x\\<rangle>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<lless> t\\<langle>l := x\\<rangle>", "from unalive_l"], ["proof (chain)\npicking this:\n  \\<not> alive (ref l) t", "have \"t\\<langle>l:=x\\<rangle> = t\""], ["proof (prove)\nusing this:\n  \\<not> alive (ref l) t\n\ngoal (1 subgoal):\n 1. t\\<langle>l := x\\<rangle> = t", "by simp"], ["proof (state)\nthis:\n  t\\<langle>l := x\\<rangle> = t\n\ngoal (1 subgoal):\n 1. s \\<lless> t\\<langle>l := x\\<rangle>", "with s_t"], ["proof (chain)\npicking this:\n  s \\<lless> t\n  t\\<langle>l := x\\<rangle> = t", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<lless> t\n  t\\<langle>l := x\\<rangle> = t\n\ngoal (1 subgoal):\n 1. s \\<lless> t\\<langle>l := x\\<rangle>", "by simp"], ["proof (state)\nthis:\n  s \\<lless> t\\<langle>l := x\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Xequ4':  \n  assumes alive: \"alive x s\" \n  shows \"s \\<equiv>[x] s\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>t\\<rangle>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>t\\<rangle>", "from alive"], ["proof (chain)\npicking this:\n  alive x s", "have \"x \\<noteq> new s t\""], ["proof (prove)\nusing this:\n  alive x s\n\ngoal (1 subgoal):\n 1. x \\<noteq> new s t", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> new s t\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>t\\<rangle>", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> new s t\n\ngoal (1 subgoal):\n 1. s \\<equiv>[x] s\\<langle>t\\<rangle>", "by (rule xeq4)"], ["proof (state)\nthis:\n  s \\<equiv>[x] s\\<langle>t\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.5 (v)\\<close>"], ["", "lemma lessalive_alloc [simp,intro]: \"s \\<lless> s\\<langle>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<lless> s\\<langle>t\\<rangle>", "by (simp add: lessalive_def Xequ4')"], ["", "subsection \\<open>Reachability of Types from Types\\<close>"], ["", "text \\<open>The predicate \\<open>treach\\<close> denotes the fact that the first type reaches \nthe second type by stepping finitely many times from a type to the range type of one \nof its fields. This formalization diverges from \\cite[p. 106]{Poetzsch-Heffter97specification} \nin that it does not include the number of steps that are allowed to reach the second type.\nReachability of types is a static approximation of reachability in\nthe store. If I cannot reach the type of a location from the type of a\nreference, I cannot reach the location from the reference. See lemma  \n\\<open>not_treach_ref_impl_not_reach\\<close> below.\n\\<close>"], ["", "inductive\n  treach :: \"Javatype \\<Rightarrow> Javatype \\<Rightarrow> bool\"\nwhere\n  Subtype:       \"U \\<le> T \\<Longrightarrow> treach T U\"\n| Attribute:     \"\\<lbrakk>treach T S; S \\<le> dtype f; U \\<le> rtype f\\<rbrakk>  \\<Longrightarrow> treach T U\"\n| ArrLength:     \"treach (ArrT AT) IntgT\"\n| ArrElem:       \"treach (ArrT AT) (at2jt AT)\"\n| Trans [trans]: \"\\<lbrakk>treach T U; treach U V\\<rbrakk> \\<Longrightarrow> treach T V\""], ["", "lemma treach_ref_l [simp,intro]: \n  assumes not_Null: \"ref l \\<noteq> nullV\"\n  shows \"treach (typeof (ref l)) (ltype l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "proof (cases l)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       l = objLoc x11 x12 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 4. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "case (objLoc cf a)"], ["proof (state)\nthis:\n  l = objLoc cf a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       l = objLoc x11 x12 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 4. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "have \"l=objLoc cf a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = objLoc cf a", "by fact"], ["proof (state)\nthis:\n  l = objLoc cf a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       l = objLoc x11 x12 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 4. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "moreover"], ["proof (state)\nthis:\n  l = objLoc cf a\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       l = objLoc x11 x12 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 4. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "have \"treach (CClassT (cls cf)) (rtype (att cf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treach (CClassT (cls cf)) (rtype (att cf))", "by (rule treach.Attribute [where ?f=\"att cf\" and ?S=\"CClassT (cls cf)\"])\n       (auto intro: treach.Subtype)"], ["proof (state)\nthis:\n  treach (CClassT (cls cf)) (rtype (att cf))\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       l = objLoc x11 x12 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 4. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "ultimately"], ["proof (chain)\npicking this:\n  l = objLoc cf a\n  treach (CClassT (cls cf)) (rtype (att cf))", "show ?thesis"], ["proof (prove)\nusing this:\n  l = objLoc cf a\n  treach (CClassT (cls cf)) (rtype (att cf))\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by simp"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "case (staticLoc f)"], ["proof (state)\nthis:\n  l = staticLoc f\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "have \"l=staticLoc f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = staticLoc f", "by fact"], ["proof (state)\nthis:\n  l = staticLoc f\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "hence \"ref l = nullV\""], ["proof (prove)\nusing this:\n  l = staticLoc f\n\ngoal (1 subgoal):\n 1. ref l = nullV", "by simp"], ["proof (state)\nthis:\n  ref l = nullV\n\ngoal (3 subgoals):\n 1. \\<And>x2.\n       l = staticLoc x2 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 3. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "with not_Null"], ["proof (chain)\npicking this:\n  ref l \\<noteq> nullV\n  ref l = nullV", "show ?thesis"], ["proof (prove)\nusing this:\n  ref l \\<noteq> nullV\n  ref l = nullV\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by simp"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "case (arrLenLoc T a)"], ["proof (state)\nthis:\n  l = arrLenLoc T a\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "have \"l=arrLenLoc T a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = arrLenLoc T a", "by fact"], ["proof (state)\nthis:\n  l = arrLenLoc T a\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       l = arrLenLoc x31 x32 \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "then"], ["proof (chain)\npicking this:\n  l = arrLenLoc T a", "show ?thesis"], ["proof (prove)\nusing this:\n  l = arrLenLoc T a\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by (auto intro: treach.ArrLength)"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "case (arrLoc T a i)"], ["proof (state)\nthis:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "have \"l=arrLoc T a i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = arrLoc T a i", "by fact"], ["proof (state)\nthis:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. \\<And>x41 x42 x43.\n       l = arrLoc x41 x42 x43 \\<Longrightarrow>\n       treach \\<tau> ref l (ltype l)", "then"], ["proof (chain)\npicking this:\n  l = arrLoc T a i", "show ?thesis"], ["proof (prove)\nusing this:\n  l = arrLoc T a i\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by (auto intro: treach.ArrElem)"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma treach_ref_l' [simp,intro]:\n  assumes not_Null: \"ref l \\<noteq> nullV\"\n  shows \"treach (typeof (ref l)) (typeof (s@@l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "from not_Null"], ["proof (chain)\npicking this:\n  ref l \\<noteq> nullV", "have \"treach (typeof (ref l)) (ltype l)\""], ["proof (prove)\nusing this:\n  ref l \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by (rule treach_ref_l)"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "also"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "have \"typeof (s@@l) \\<le> ltype l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> s@@l \\<le> ltype l", "by simp"], ["proof (state)\nthis:\n  \\<tau> s@@l \\<le> ltype l\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "hence \"treach (ltype l) (typeof (s@@l))\""], ["proof (prove)\nusing this:\n  \\<tau> s@@l \\<le> ltype l\n\ngoal (1 subgoal):\n 1. treach (ltype l) \\<tau> s@@l", "by (rule treach.intros)"], ["proof (state)\nthis:\n  treach (ltype l) \\<tau> s@@l\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "finally"], ["proof (chain)\npicking this:\n  treach \\<tau> ref l \\<tau> s@@l", "show ?thesis"], ["proof (prove)\nusing this:\n  treach \\<tau> ref l \\<tau> s@@l\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l \\<tau> s@@l", "."], ["proof (state)\nthis:\n  treach \\<tau> ref l \\<tau> s@@l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reach_impl_treach: \n  assumes reach_l: \"s \\<turnstile> l reachable_from x\"\n  shows \"treach (typeof x) (ltype l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treach \\<tau> x (ltype l)", "using reach_l"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. treach \\<tau> x (ltype l)", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "have \"ref l \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref l \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       ref l \\<noteq> nullV \\<Longrightarrow> treach \\<tau> ref l (ltype l)\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "then"], ["proof (chain)\npicking this:\n  ref l \\<noteq> nullV", "show \"treach (typeof (ref l)) (ltype l)\""], ["proof (prove)\nusing this:\n  ref l \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref l (ltype l)", "by (rule treach_ref_l)"], ["proof (state)\nthis:\n  treach \\<tau> ref l (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  treach \\<tau> s@@k (ltype l)\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "have \"treach (typeof (s@@k)) (ltype l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k (ltype l)", "by fact"], ["proof (state)\nthis:\n  treach \\<tau> s@@k (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "moreover"], ["proof (state)\nthis:\n  treach \\<tau> s@@k (ltype l)\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "have \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "hence \"treach (typeof (ref k)) (typeof (s@@k))\""], ["proof (prove)\nusing this:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref k \\<tau> s@@k", "by simp"], ["proof (state)\nthis:\n  treach \\<tau> ref k \\<tau> s@@k\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        treach \\<tau> s@@k (ltype l); ref k \\<noteq> nullV\\<rbrakk>\n       \\<Longrightarrow> treach \\<tau> ref k (ltype l)", "ultimately"], ["proof (chain)\npicking this:\n  treach \\<tau> s@@k (ltype l)\n  treach \\<tau> ref k \\<tau> s@@k", "show \"treach (typeof (ref k)) (ltype l)\""], ["proof (prove)\nusing this:\n  treach \\<tau> s@@k (ltype l)\n  treach \\<tau> ref k \\<tau> s@@k\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref k (ltype l)", "by (iprover intro: treach.Trans)"], ["proof (state)\nthis:\n  treach \\<tau> ref k (ltype l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_treach_ref_impl_not_reach: \n  assumes not_treach: \"\\<not> treach (typeof x) (typeof (ref l))\"\n  shows \"\\<not> s \\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x \\<Longrightarrow> False", "assume reach_l: \"s\\<turnstile> l reachable_from x\""], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from x\n\ngoal (1 subgoal):\n 1. s\\<turnstile> l reachable_from x \\<Longrightarrow> False", "from this not_treach"], ["proof (chain)\npicking this:\n  s\\<turnstile> l reachable_from x\n  \\<not> treach \\<tau> x \\<tau> ref l", "show False"], ["proof (prove)\nusing this:\n  s\\<turnstile> l reachable_from x\n  \\<not> treach \\<tau> x \\<tau> ref l\n\ngoal (1 subgoal):\n 1. False", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> treach \\<tau> ref l \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "case (Immediate l)"], ["proof (state)\nthis:\n  ref l \\<noteq> nullV\n  \\<not> treach \\<tau> ref l \\<tau> ref l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> treach \\<tau> ref l \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not> treach (typeof (ref l)) (typeof (ref l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> treach \\<tau> ref l \\<tau> ref l", "by fact"], ["proof (state)\nthis:\n  \\<not> treach \\<tau> ref l \\<tau> ref l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>ref l \\<noteq> nullV;\n        \\<not> treach \\<tau> ref l \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> treach \\<tau> ref l \\<tau> ref l\n\ngoal (1 subgoal):\n 1. False", "by (iprover intro: treach.intros order_refl)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "case (Indirect l k)"], ["proof (state)\nthis:\n  s\\<turnstile> l reachable_from (s@@k)\n  \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False\n  ref k \\<noteq> nullV\n  \\<not> treach \\<tau> ref k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "have hyp: \"\\<not> treach (typeof (s@@k)) (typeof (ref l)) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "by fact"], ["proof (state)\nthis:\n  \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "have not_Null: \"ref k \\<noteq> nullV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref k \\<noteq> nullV", "by fact"], ["proof (state)\nthis:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "have not_k_l:\"\\<not> treach (typeof (ref k)) (typeof (ref l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> treach \\<tau> ref k \\<tau> ref l", "by fact"], ["proof (state)\nthis:\n  \\<not> treach \\<tau> ref k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. \\<And>l k.\n       \\<lbrakk>s\\<turnstile> l reachable_from (s@@k);\n        \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False;\n        ref k \\<noteq> nullV;\n        \\<not> treach \\<tau> ref k \\<tau> ref l\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"treach (typeof (s@@k)) (typeof (ref l))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False\n 2. \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> treach \\<tau> s@@k \\<tau> ref l\n\ngoal (2 subgoals):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False\n 2. \\<not> treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> treach \\<tau> s@@k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. False", "by (rule hyp)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  treach \\<tau> s@@k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "from not_Null"], ["proof (chain)\npicking this:\n  ref k \\<noteq> nullV", "have \"treach (typeof (ref k)) (typeof (s@@k))\""], ["proof (prove)\nusing this:\n  ref k \\<noteq> nullV\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref k \\<tau> s@@k", "by (rule treach_ref_l')"], ["proof (state)\nthis:\n  treach \\<tau> ref k \\<tau> s@@k\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  treach \\<tau> ref k \\<tau> s@@k\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "note True"], ["proof (state)\nthis:\n  treach \\<tau> s@@k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  treach \\<tau> ref k \\<tau> ref l", "have \"treach (typeof (ref k)) (typeof (ref l))\""], ["proof (prove)\nusing this:\n  treach \\<tau> ref k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> ref k \\<tau> ref l", "."], ["proof (state)\nthis:\n  treach \\<tau> ref k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> s@@k \\<tau> ref l \\<Longrightarrow> False", "with not_k_l"], ["proof (chain)\npicking this:\n  \\<not> treach \\<tau> ref k \\<tau> ref l\n  treach \\<tau> ref k \\<tau> ref l", "show False"], ["proof (prove)\nusing this:\n  \\<not> treach \\<tau> ref k \\<tau> ref l\n  treach \\<tau> ref k \\<tau> ref l\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 4.6 in \\cite[p. 107]{Poetzsch-Heffter97specification}.\\<close>"], ["", "lemma treach1: \n  assumes x_t: \"typeof x \\<le> T\" \n  assumes not_treach: \"\\<not> treach T (typeof (ref l))\"\n  shows \"\\<not> s \\<turnstile> l reachable_from x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x", "have \"\\<not> treach (typeof x) (typeof (ref l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> treach \\<tau> x \\<tau> ref l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. treach \\<tau> x \\<tau> ref l \\<Longrightarrow> False", "from x_t"], ["proof (chain)\npicking this:\n  \\<tau> x \\<le> T", "have \"treach T (typeof x)\""], ["proof (prove)\nusing this:\n  \\<tau> x \\<le> T\n\ngoal (1 subgoal):\n 1. treach T \\<tau> x", "by (rule treach.intros)"], ["proof (state)\nthis:\n  treach T \\<tau> x\n\ngoal (1 subgoal):\n 1. treach \\<tau> x \\<tau> ref l \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  treach T \\<tau> x\n\ngoal (1 subgoal):\n 1. treach \\<tau> x \\<tau> ref l \\<Longrightarrow> False", "assume \"treach (typeof x) (typeof (ref l))\""], ["proof (state)\nthis:\n  treach \\<tau> x \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> x \\<tau> ref l \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  treach T \\<tau> ref l", "have \"treach T (typeof (ref l))\""], ["proof (prove)\nusing this:\n  treach T \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach T \\<tau> ref l", "."], ["proof (state)\nthis:\n  treach T \\<tau> ref l\n\ngoal (1 subgoal):\n 1. treach \\<tau> x \\<tau> ref l \\<Longrightarrow> False", "with not_treach"], ["proof (chain)\npicking this:\n  \\<not> treach T \\<tau> ref l\n  treach T \\<tau> ref l", "show False"], ["proof (prove)\nusing this:\n  \\<not> treach T \\<tau> ref l\n  treach T \\<tau> ref l\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> treach \\<tau> x \\<tau> ref l\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> treach \\<tau> x \\<tau> ref l\n\ngoal (1 subgoal):\n 1. \\<not> s\\<turnstile> l reachable_from x", "by (rule not_treach_ref_impl_not_reach)"], ["proof (state)\nthis:\n  \\<not> s\\<turnstile> l reachable_from x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}