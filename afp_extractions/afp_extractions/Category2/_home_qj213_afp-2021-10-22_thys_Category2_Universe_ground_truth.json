{"file_name": "/home/qj213/afp-2021-10-22/thys/Category2/Universe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category2", "problem_names": ["lemma ElemLambdaFun : \"(\\<And> x .Elem x u \\<Longrightarrow> Elem (f x) U) \\<Longrightarrow> Elem (Lambda u f) (Fun u U)\"", "lemma RangeRepl: \"Range (Lambda A f) = Repl A f\"", "lemma (in Universe) Utrans: \"\\<lbrakk>Elem a U ; Elem b a\\<rbrakk> \\<Longrightarrow> Elem b U\"", "lemma ReplId: \"Repl A id = A\"", "lemma (in Universe) UniverseSum : \"Elem u U \\<Longrightarrow> Elem (Sum u) U\"", "lemma (in Universe) UniverseUnion: \n  assumes \"Elem u U\" and \"Elem v U\"\n  shows \"Elem (union u v) U\"", "lemma UPairSingleton: \"Upair u v = union (Singleton u) (Singleton v)\"", "lemma (in Universe) UniverseUPair: \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Upair u v) U\"", "lemma (in Universe) UniversePair: \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Opair u v) U\"", "lemma (in Universe) \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Sum (Repl u (%x . Singleton (Opair x v)))) U\"", "lemma SumRepl: \"Sum (Repl A (Singleton o f)) = Repl A f\"", "lemma (in Universe) UniverseProd: \n  assumes \"Elem u U\" and \"Elem v U\" \n  shows   \"Elem (CartProd u v) U\"", "lemma (in Universe) UniverseSubset: \"\\<lbrakk>subset u v ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem u U\"", "lemma SepSubset: \"subset (Sep A p) A\"", "lemma SubsetSmall: \n  assumes \"subset A' A\" and \"subset A B\" shows \"subset A' B\"", "lemma SubsetTrans: \n  assumes \"(subset a b)\" and \"(subset b c)\"\n  shows \"(subset a c)\"", "lemma SubsetSepTrans: \"subset A B \\<Longrightarrow> subset (Sep A p) B\"", "lemma ProductSubset: \"subset (Product u) (Power (CartProd u (Sum u)))\"", "lemma (in Universe) UniverseProduct: \"Elem u U \\<Longrightarrow> Elem (Product u) U\"", "lemma ZFImageRangeExplode: \"x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode\"", "lemma subsetFn: \"\\<lbrakk>Y \\<noteq> {} ; Y \\<subseteq> X \\<rbrakk> \\<Longrightarrow> (subsetFn X Y) ` X = Y\"", "lemma ZFSubsetRangeExplode: \"\\<lbrakk>X \\<in> range explode ; Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> Y \\<in> range explode\"", "lemma ZFUnionRangeExplode: \n  assumes \"\\<And> x . x \\<in> A \\<Longrightarrow> f x \\<in> range explode\" and \"A \\<in> range explode\" \n  shows \"(\\<Union> x \\<in> A . f x) \\<in> range explode\"", "lemma ZFUnionNatInRangeExplode: \"(\\<And> (n :: nat) . f n \\<in> range explode) \\<Longrightarrow> (\\<Union> n . f n) \\<in> range explode\"", "lemma ZFProdFnInRangeExplode: \"\\<lbrakk>A \\<in> range explode ; B \\<in> range explode\\<rbrakk> \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode\"", "lemma ZFUnionInRangeExplode: \"\\<lbrakk>A \\<in> range explode ; B \\<in> range explode\\<rbrakk> \\<Longrightarrow> A \\<union> B \\<in> range explode\"", "lemma SingletonInRangeExplode: \"{x} \\<in> range explode\"", "lemma ZFTFst: \"ZFTFst (ZFTriple a b c) = a\"", "lemma ZFTSnd: \"ZFTSnd (ZFTriple a b c) = b\"", "lemma ZFTThd: \"ZFTThd (ZFTriple a b c) = c\"", "lemma ZFTriple: \"ZFTriple a b c = ZFTriple a' b' c' \\<Longrightarrow> (a = a' \\<and> b = b' \\<and> c = c')\"", "lemma ZFSucZero: \"Nat2nat (SucNat Empty) = 1\"", "lemma ZFZero: \"Nat2nat Empty = 0\"", "lemma ZFSucNeq0: \"Elem x Nat \\<Longrightarrow> Nat2nat (SucNat x) \\<noteq> 0\""], "translations": [["", "lemma ElemLambdaFun : \"(\\<And> x .Elem x u \\<Longrightarrow> Elem (f x) U) \\<Longrightarrow> Elem (Lambda u f) (Fun u U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. Elem x u \\<Longrightarrow> Elem (f x) U) \\<Longrightarrow>\n    Elem (Lambda u f) (Fun u U)", "apply (subst Elem_Lambda_Fun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. Elem x u \\<Longrightarrow> Elem (f x) U) \\<Longrightarrow>\n    u = u \\<and> (\\<forall>x. Elem x u \\<longrightarrow> Elem (f x) U)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RangeRepl: \"Range (Lambda A f) = Repl A f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.Range (Lambda A f) = Repl A f", "apply (subst Ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z. Elem z (HOLZF.Range (Lambda A f)) = Elem z (Repl A f)", "apply (subst Range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (\\<exists>x. Elem (Opair x z) (Lambda A f)) = Elem z (Repl A f)", "apply (simp add: Repl Opair Lambda_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Universe) Utrans: \"\\<lbrakk>Elem a U ; Elem b a\\<rbrakk> \\<Longrightarrow> Elem b U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem a U; Elem b a\\<rbrakk> \\<Longrightarrow> Elem b U", "apply (drule Usubset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem b a; HOLZF.subset a U\\<rbrakk> \\<Longrightarrow> Elem b U", "apply (insert HOLZF.subset_def [of a U])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem b a; HOLZF.subset a U;\n     HOLZF.subset a U \\<equiv>\n     \\<forall>x. Elem x a \\<longrightarrow> Elem x U\\<rbrakk>\n    \\<Longrightarrow> Elem b U", "apply (auto simp add: Usubset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ReplId: \"Repl A id = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Repl A id = A", "by (subst Ext, simp add: Repl)"], ["", "lemma (in Universe) UniverseSum : \"Elem u U \\<Longrightarrow> Elem (Sum u) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem u U \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (frule_tac u = \"Lambda u id\" in Uim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Elem u U \\<Longrightarrow> Elem (Lambda u id) (Fun u U)\n 2. \\<lbrakk>Elem u U;\n     Elem (HOLZF.Sum (HOLZF.Range (Lambda u id))) U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (subst Elem_Lambda_Fun)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Elem u U \\<Longrightarrow>\n    u = u \\<and> (\\<forall>x. Elem x u \\<longrightarrow> Elem (id x) U)\n 2. \\<lbrakk>Elem u U;\n     Elem (HOLZF.Sum (HOLZF.Range (Lambda u id))) U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (frule Usubset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Elem u U; HOLZF.subset u U\\<rbrakk>\n    \\<Longrightarrow> u = u \\<and>\n                      (\\<forall>x. Elem x u \\<longrightarrow> Elem (id x) U)\n 2. \\<lbrakk>Elem u U;\n     Elem (HOLZF.Sum (HOLZF.Range (Lambda u id))) U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (simp add: subset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U;\n     Elem (HOLZF.Sum (HOLZF.Range (Lambda u id))) U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (simp only: RangeRepl ReplId)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Universe) UniverseUnion: \n  assumes \"Elem u U\" and \"Elem v U\"\n  shows \"Elem (union u v) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "let ?f = \"(% x. if x = Empty then u else v)\" \n    and ?S = \"(Power (Power Empty))\""], ["proof (state)\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "have 1: \"(Upair u v) = Range (Lambda ?S ?f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Upair u v =\n    HOLZF.Range\n     (Lambda (Power (Power Empty)) (\\<lambda>x. if x = Empty then u else v))", "by (subst RangeRepl, simp add: Upair_def)"], ["proof (state)\nthis:\n  Upair u v =\n  HOLZF.Range\n   (Lambda (Power (Power Empty)) (\\<lambda>x. if x = Empty then u else v))\n\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "have 2: \"\\<lbrakk>Elem u U; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Lambda ?S ?f) (Fun ?S U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (Lambda (Power (Power Empty))\n                         (\\<lambda>x. if x = Empty then u else v))\n                       (Fun (Power (Power Empty)) U)", "by (rule ElemLambdaFun, simp)"], ["proof (state)\nthis:\n  \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n  \\<Longrightarrow> Elem\n                     (Lambda (Power (Power Empty))\n                       (\\<lambda>x. if x = Empty then u else v))\n                     (Fun (Power (Power Empty)) U)\n\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "using assms"], ["proof (prove)\nusing this:\n  Elem u U\n  Elem v U\n\ngoal (1 subgoal):\n 1. Elem (HOLZF.union u v) U", "apply (subst HOLZF.union_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum (Upair u v)) U", "apply (subst 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum\n                         (HOLZF.Range\n                           (Lambda (Power (Power Empty))\n                             (\\<lambda>x. if x = Empty then u else v))))\n                       U", "apply (rule_tac I=\"?S\" in Uim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Power (Power Empty)) U\n 2. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (Lambda (Power (Power Empty))\n                         (\\<lambda>x. if x = Empty then u else v))\n                       (Fun (Power (Power Empty)) U)", "apply (rule Upow)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk> \\<Longrightarrow> Elem Empty U\n 2. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (Lambda (Power (Power Empty))\n                         (\\<lambda>x. if x = Empty then u else v))\n                       (Fun (Power (Power Empty)) U)", "apply (rule Uempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (Lambda (Power (Power Empty))\n                         (\\<lambda>x. if x = Empty then u else v))\n                       (Fun (Power (Power Empty)) U)", "apply (rule 2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk> \\<Longrightarrow> Elem u U\n 2. \\<lbrakk>Elem u U; Elem v U\\<rbrakk> \\<Longrightarrow> Elem v U", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Elem (HOLZF.union u v) U\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UPairSingleton: \"Upair u v = union (Singleton u) (Singleton v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Upair u v = HOLZF.union (Singleton u) (Singleton v)", "apply (subst Ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       Elem z (Upair u v) = Elem z (HOLZF.union (Singleton u) (Singleton v))", "apply (subst Upair)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (z = u \\<or> z = v) =\n       Elem z (HOLZF.union (Singleton u) (Singleton v))", "apply (subst union)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (z = u \\<or> z = v) =\n       (Elem z (Singleton u) \\<or> Elem z (Singleton v))", "apply (subst Singleton)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z. (z = u \\<or> z = v) = (z = u \\<or> z = v)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Universe) UniverseUPair: \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Upair u v) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Upair u v) U", "apply (subst UPairSingleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.union (Singleton u) (Singleton v)) U", "apply (rule UniverseUnion)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Singleton u) U\n 2. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Singleton v) U", "apply (rule Usingle, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Universe) UniversePair: \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Opair u v) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Opair u v) U", "apply (subst Opair_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Upair (Upair u u) (Upair u v)) U", "apply ((rule UniverseUPair)+, simp+)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Universe) \"\\<lbrakk>Elem u U ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem (Sum (Repl u (%x . Singleton (Opair x v)))) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum\n                         (Repl u (\\<lambda>x. Singleton (Opair x v))))\n                       U", "apply (rule RangeRepl [THEN subst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum\n                         (HOLZF.Range\n                           (Lambda u (\\<lambda>x. Singleton (Opair x v)))))\n                       U", "apply (rule Uim [of u], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Lambda u (\\<lambda>x. Singleton (Opair x v)))\n                       (Fun u U)", "apply (rule ElemLambdaFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (Singleton (Opair x v)) U", "apply (rule Usingle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (Opair x v) U", "apply (rule UniversePair)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem x U\n 2. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem v U", "apply (rule Utrans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (?a13 x) U\n 2. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem x (?a13 x)\n 3. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem v U", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SumRepl: \"Sum (Repl A (Singleton o f)) = Repl A f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.Sum (Repl A (Singleton \\<circ> f)) = Repl A f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. HOLZF.Sum (Repl A (Singleton \\<circ> f)) = Repl A f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.Sum (Repl A (Singleton \\<circ> f)) = Repl A f", "apply (subst Ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       Elem z (HOLZF.Sum (Repl A (Singleton \\<circ> f))) = Elem z (Repl A f)", "apply (subst Sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (\\<exists>y. Elem z y \\<and> Elem y (Repl A (Singleton \\<circ> f))) =\n       Elem z (Repl A f)", "apply (subst Repl)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (\\<exists>y.\n           Elem z y \\<and>\n           (\\<exists>a. Elem a A \\<and> y = (Singleton \\<circ> f) a)) =\n       (\\<exists>a. Elem a A \\<and> z = f a)", "apply (auto simp add: Singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       Elem a A \\<Longrightarrow>\n       \\<exists>y.\n          Elem (f a) y \\<and>\n          (\\<exists>a. Elem a A \\<and> y = Singleton (f a))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       Elem a A \\<Longrightarrow>\n       \\<exists>y.\n          Elem (f a) y \\<and>\n          (\\<exists>a. Elem a A \\<and> y = Singleton (f a))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       Elem a A \\<Longrightarrow>\n       \\<exists>y.\n          Elem (f a) y \\<and>\n          (\\<exists>a. Elem a A \\<and> y = Singleton (f a))", "show \"Elem a A \\<Longrightarrow> \\<exists>y. Elem (f a) y \\<and> (\\<exists>a. Elem a A \\<and> y = Singleton (f a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem a A \\<Longrightarrow>\n    \\<exists>y.\n       Elem (f a) y \\<and> (\\<exists>a. Elem a A \\<and> y = Singleton (f a))", "apply (rule exI [of _ \"Singleton (f a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem a A \\<Longrightarrow>\n    Elem (f a) (Singleton (f a)) \\<and>\n    (\\<exists>aa. Elem aa A \\<and> Singleton (f a) = Singleton (f aa))", "apply (subst Singleton, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem a A \\<Longrightarrow>\n    \\<exists>aa. Elem aa A \\<and> Singleton (f a) = Singleton (f aa)", "apply (rule exI [of _ \"a\"], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Elem a A \\<Longrightarrow>\n  \\<exists>y.\n     Elem (f a) y \\<and> (\\<exists>a. Elem a A \\<and> y = Singleton (f a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  HOLZF.Sum (Repl A (Singleton \\<circ> f)) = Repl A f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Universe) UniverseProd: \n  assumes \"Elem u U\" and \"Elem v U\" \n  shows   \"Elem (CartProd u v) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem (CartProd u v) U", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Elem (CartProd u v) U", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem (CartProd u v) U", "using assms"], ["proof (prove)\nusing this:\n  Elem u U\n  Elem v U\n\ngoal (1 subgoal):\n 1. Elem (CartProd u v) U", "apply (subst CartProd_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum (Repl u (\\<lambda>a. Repl v (Opair a)))) U", "apply (rule RangeRepl [of u \"% x . (Repl v (Opair x))\", THEN subst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum\n                         (HOLZF.Range\n                           (Lambda u (\\<lambda>x. Repl v (Opair x)))))\n                       U", "apply (rule Uim [of u], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U\\<rbrakk>\n    \\<Longrightarrow> Elem (Lambda u (\\<lambda>x. Repl v (Opair x)))\n                       (Fun u U)", "apply (rule ElemLambdaFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (Repl v (Opair x)) U", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (Repl v (Opair x)) U", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n       \\<Longrightarrow> Elem (Repl v (Opair x)) U", "show \"\\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk> \\<Longrightarrow> Elem (Repl v (Opair x)) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n    \\<Longrightarrow> Elem (Repl v (Opair x)) U", "apply (drule Utrans [of u x], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem x u; Elem x U\\<rbrakk>\n    \\<Longrightarrow> Elem (Repl v (Opair x)) U", "apply (rule SumRepl [THEN subst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem x u; Elem x U\\<rbrakk>\n    \\<Longrightarrow> Elem (HOLZF.Sum (Repl v (Singleton \\<circ> Opair x)))\n                       U", "apply (rule RangeRepl [THEN subst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem x u; Elem x U\\<rbrakk>\n    \\<Longrightarrow> Elem\n                       (HOLZF.Sum\n                         (HOLZF.Range\n                           (Lambda v (Singleton \\<circ> Opair x))))\n                       U", "apply (rule Uim [of v], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem x u; Elem x U\\<rbrakk>\n    \\<Longrightarrow> Elem (Lambda v (Singleton \\<circ> Opair x)) (Fun v U)", "apply (rule ElemLambdaFun,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem (Singleton (Opair x xa)) U", "apply (rule Usingle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem (Opair x xa) U", "apply (rule UniversePair)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem x U\n 2. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem xa U", "apply (drule Usubset, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem xa U", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem xa U", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n       \\<Longrightarrow> Elem xa U", "show \"\\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk> \\<Longrightarrow> Elem xa U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n    \\<Longrightarrow> Elem xa U", "by (rule Utrans, simp+)"], ["proof (state)\nthis:\n  \\<lbrakk>Elem v U; Elem x u; Elem x U; Elem xa v\\<rbrakk>\n  \\<Longrightarrow> Elem xa U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>Elem u U; Elem v U; Elem x u\\<rbrakk>\n  \\<Longrightarrow> Elem (Repl v (Opair x)) U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Elem (CartProd u v) U\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Universe) UniverseSubset: \"\\<lbrakk>subset u v ; Elem v U\\<rbrakk> \\<Longrightarrow> Elem u U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>HOLZF.subset u v; Elem v U\\<rbrakk> \\<Longrightarrow> Elem u U", "apply (drule_tac HOLZF.Power [of u v, THEN ssubst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem v U; Elem u (Power v)\\<rbrakk> \\<Longrightarrow> Elem u U", "apply (drule Upow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Elem u (Power v); Elem (Power v) U\\<rbrakk>\n    \\<Longrightarrow> Elem u U", "apply (rule Utrans, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Product :: \"ZF \\<Rightarrow> ZF\" where\n  \"Product U = Sep (Fun U (Sum U)) (%f . (\\<forall> u . Elem u U \\<longrightarrow> Elem (app f u) u))\""], ["", "lemma SepSubset: \"subset (Sep A p) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset (Sep A p) A", "apply (subst subset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. Elem x (Sep A p) \\<longrightarrow> Elem x A", "apply (subst Sep, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SubsetSmall: \n  assumes \"subset A' A\" and \"subset A B\" shows \"subset A' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset A' B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. HOLZF.subset A' B", "have \"(subset A' A \\<and> subset A B) \\<longrightarrow> subset A' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset A' A \\<and> HOLZF.subset A B \\<longrightarrow>\n    HOLZF.subset A' B", "by ((subst subset_def)+, simp+)"], ["proof (state)\nthis:\n  HOLZF.subset A' A \\<and> HOLZF.subset A B \\<longrightarrow>\n  HOLZF.subset A' B\n\ngoal (1 subgoal):\n 1. HOLZF.subset A' B", "thus ?thesis"], ["proof (prove)\nusing this:\n  HOLZF.subset A' A \\<and> HOLZF.subset A B \\<longrightarrow>\n  HOLZF.subset A' B\n\ngoal (1 subgoal):\n 1. HOLZF.subset A' B", "using assms"], ["proof (prove)\nusing this:\n  HOLZF.subset A' A \\<and> HOLZF.subset A B \\<longrightarrow>\n  HOLZF.subset A' B\n  HOLZF.subset A' A\n  HOLZF.subset A B\n\ngoal (1 subgoal):\n 1. HOLZF.subset A' B", "by simp"], ["proof (state)\nthis:\n  HOLZF.subset A' B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubsetTrans: \n  assumes \"(subset a b)\" and \"(subset b c)\"\n  shows \"(subset a c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset a c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. HOLZF.subset a c", "have \"(subset a b) \\<and> (subset b c) \\<longrightarrow> (subset a c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset a b \\<and> HOLZF.subset b c \\<longrightarrow>\n    HOLZF.subset a c", "by ((subst subset_def)+, simp)"], ["proof (state)\nthis:\n  HOLZF.subset a b \\<and> HOLZF.subset b c \\<longrightarrow>\n  HOLZF.subset a c\n\ngoal (1 subgoal):\n 1. HOLZF.subset a c", "thus ?thesis"], ["proof (prove)\nusing this:\n  HOLZF.subset a b \\<and> HOLZF.subset b c \\<longrightarrow>\n  HOLZF.subset a c\n\ngoal (1 subgoal):\n 1. HOLZF.subset a c", "using assms"], ["proof (prove)\nusing this:\n  HOLZF.subset a b \\<and> HOLZF.subset b c \\<longrightarrow>\n  HOLZF.subset a c\n  HOLZF.subset a b\n  HOLZF.subset b c\n\ngoal (1 subgoal):\n 1. HOLZF.subset a c", "by simp"], ["proof (state)\nthis:\n  HOLZF.subset a c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubsetSepTrans: \"subset A B \\<Longrightarrow> subset (Sep A p) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset A B \\<Longrightarrow> HOLZF.subset (Sep A p) B", "apply (rule SubsetSmall [of \"Sep A p\" A B])"], ["proof (prove)\ngoal (2 subgoals):\n 1. HOLZF.subset A B \\<Longrightarrow> HOLZF.subset (Sep A p) A\n 2. HOLZF.subset A B \\<Longrightarrow> HOLZF.subset A B", "apply (rule SepSubset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset A B \\<Longrightarrow> HOLZF.subset A B", "by simp"], ["", "lemma ProductSubset: \"subset (Product u) (Power (CartProd u (Sum u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset (Product u) (Power (CartProd u (HOLZF.Sum u)))", "apply (subst Product_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset\n     (Sep (Fun u (HOLZF.Sum u))\n       (\\<lambda>f.\n           \\<forall>ua.\n              Elem ua u \\<longrightarrow> Elem (f \\<acute> ua) ua))\n     (Power (CartProd u (HOLZF.Sum u)))", "apply (subst Fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset\n     (Sep (Sep (PFun u (HOLZF.Sum u)) (\\<lambda>f. HOLZF.Domain f = u))\n       (\\<lambda>f.\n           \\<forall>ua.\n              Elem ua u \\<longrightarrow> Elem (f \\<acute> ua) ua))\n     (Power (CartProd u (HOLZF.Sum u)))", "apply (subst PFun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset\n     (Sep (Sep (Sep (Power (CartProd u (HOLZF.Sum u))) isFun)\n            (\\<lambda>f. HOLZF.Domain f = u))\n       (\\<lambda>f.\n           \\<forall>ua.\n              Elem ua u \\<longrightarrow> Elem (f \\<acute> ua) ua))\n     (Power (CartProd u (HOLZF.Sum u)))", "apply (rule SubsetSepTrans)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOLZF.subset (Power (CartProd u (HOLZF.Sum u)))\n     (Power (CartProd u (HOLZF.Sum u)))", "apply (subst subset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       Elem x (Power (CartProd u (HOLZF.Sum u))) \\<longrightarrow>\n       Elem x (Power (CartProd u (HOLZF.Sum u)))", "by simp"], ["", "lemma (in Universe) UniverseProduct: \"Elem u U \\<Longrightarrow> Elem (Product u) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem u U \\<Longrightarrow> Elem (Product u) U", "apply (rule_tac u=\"(Product u)\" and v=\"Power (CartProd u (Sum u))\" in UniverseSubset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Elem u U \\<Longrightarrow>\n    HOLZF.subset (Product u) (Power (CartProd u (HOLZF.Sum u)))\n 2. Elem u U \\<Longrightarrow> Elem (Power (CartProd u (HOLZF.Sum u))) U", "apply (rule ProductSubset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem u U \\<Longrightarrow> Elem (Power (CartProd u (HOLZF.Sum u))) U", "apply (rule Upow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem u U \\<Longrightarrow> Elem (CartProd u (HOLZF.Sum u)) U", "apply (rule UniverseProd, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem u U \\<Longrightarrow> Elem (HOLZF.Sum u) U", "apply (rule UniverseSum,simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ZFImageRangeExplode: \"x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode", "assume \"x \\<in> range explode\""], ["proof (state)\nthis:\n  x \\<in> range explode\n\ngoal (1 subgoal):\n 1. x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode", "from this"], ["proof (chain)\npicking this:\n  x \\<in> range explode", "obtain y where \"x = explode y\""], ["proof (prove)\nusing this:\n  x \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>y. x = explode y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using range_ex1_eq"], ["proof (prove)\nusing this:\n  x \\<in> range explode\n  inj ?f \\<Longrightarrow> (?b \\<in> range ?f) = (\\<exists>!x. ?b = ?f x)\n\ngoal (1 subgoal):\n 1. (\\<And>y. x = explode y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = explode y\n\ngoal (1 subgoal):\n 1. x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode", "hence \"f ` x = explode (Repl y f)\""], ["proof (prove)\nusing this:\n  x = explode y\n\ngoal (1 subgoal):\n 1. f ` x = explode (Repl y f)", "using explode_Repl_eq"], ["proof (prove)\nusing this:\n  x = explode y\n  explode (Repl ?A ?f) = ?f ` explode ?A\n\ngoal (1 subgoal):\n 1. f ` x = explode (Repl y f)", "by simp"], ["proof (state)\nthis:\n  f ` x = explode (Repl y f)\n\ngoal (1 subgoal):\n 1. x \\<in> range explode \\<Longrightarrow> f ` x \\<in> range explode", "thus \"f ` x \\<in> range explode\""], ["proof (prove)\nusing this:\n  f ` x = explode (Repl y f)\n\ngoal (1 subgoal):\n 1. f ` x \\<in> range explode", "by auto"], ["proof (state)\nthis:\n  f ` x \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"subsetFn X Y \\<equiv> \\<lambda> x . (if x \\<in> Y then x else SOME y . y \\<in> Y)\""], ["", "lemma subsetFn: \"\\<lbrakk>Y \\<noteq> {} ; Y \\<subseteq> X \\<rbrakk> \\<Longrightarrow> (subsetFn X Y) ` X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<noteq> {}; Y \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> subsetFn X Y ` X = Y", "proof(auto simp add: subsetFn_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>Y \\<subseteq> X; x \\<in> Y; xb \\<in> X;\n        xb \\<notin> Y\\<rbrakk>\n       \\<Longrightarrow> (SOME y. y \\<in> Y) \\<in> Y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>Y \\<subseteq> X; x \\<in> Y; xb \\<in> X;\n        xb \\<notin> Y\\<rbrakk>\n       \\<Longrightarrow> (SOME y. y \\<in> Y) \\<in> Y", "assume \"x \\<in> Y\""], ["proof (state)\nthis:\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<And>x xb.\n       \\<lbrakk>Y \\<subseteq> X; x \\<in> Y; xb \\<in> X;\n        xb \\<notin> Y\\<rbrakk>\n       \\<Longrightarrow> (SOME y. y \\<in> Y) \\<in> Y", "thus \"(SOME y. y \\<in> Y) \\<in> Y\""], ["proof (prove)\nusing this:\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. (SOME y. y \\<in> Y) \\<in> Y", "using someI_ex[of \"\\<lambda> x . x \\<in> Y\"]"], ["proof (prove)\nusing this:\n  x \\<in> Y\n  \\<exists>x. x \\<in> Y \\<Longrightarrow> (SOME x. x \\<in> Y) \\<in> Y\n\ngoal (1 subgoal):\n 1. (SOME y. y \\<in> Y) \\<in> Y", "by auto"], ["proof (state)\nthis:\n  (SOME y. y \\<in> Y) \\<in> Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFSubsetRangeExplode: \"\\<lbrakk>X \\<in> range explode ; Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> Y \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> range explode; Y \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> range explode", "proof(cases \"Y = {}\", simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<in> range explode; Y = {}\\<rbrakk>\n    \\<Longrightarrow> {} \\<in> range explode\n 2. \\<lbrakk>X \\<in> range explode; Y \\<subseteq> X; Y \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> range explode", "have \"explode Empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. explode Empty = {}", "using explode_Empty"], ["proof (prove)\nusing this:\n  (explode ?x = {}) = (?x = Empty)\n\ngoal (1 subgoal):\n 1. explode Empty = {}", "by simp"], ["proof (state)\nthis:\n  explode Empty = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<in> range explode; Y = {}\\<rbrakk>\n    \\<Longrightarrow> {} \\<in> range explode\n 2. \\<lbrakk>X \\<in> range explode; Y \\<subseteq> X; Y \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> range explode", "thus \"{} \\<in> range explode\""], ["proof (prove)\nusing this:\n  explode Empty = {}\n\ngoal (1 subgoal):\n 1. {} \\<in> range explode", "by (auto simp add: explode_def)"], ["proof (state)\nthis:\n  {} \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> range explode; Y \\<subseteq> X; Y \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> range explode", "assume \"Y \\<noteq> {}\" and \"Y \\<subseteq> X\" and \"X \\<in> range explode\""], ["proof (state)\nthis:\n  Y \\<noteq> {}\n  Y \\<subseteq> X\n  X \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> range explode; Y \\<subseteq> X; Y \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> range explode", "thus \"Y \\<in> range explode\""], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n  Y \\<subseteq> X\n  X \\<in> range explode\n\ngoal (1 subgoal):\n 1. Y \\<in> range explode", "using ZFImageRangeExplode[of X \"subsetFn X Y\"] subsetFn[of Y X]"], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n  Y \\<subseteq> X\n  X \\<in> range explode\n  X \\<in> range explode \\<Longrightarrow>\n  subsetFn X Y ` X \\<in> range explode\n  \\<lbrakk>Y \\<noteq> {}; Y \\<subseteq> X\\<rbrakk>\n  \\<Longrightarrow> subsetFn X Y ` X = Y\n\ngoal (1 subgoal):\n 1. Y \\<in> range explode", "by simp"], ["proof (state)\nthis:\n  Y \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFUnionRangeExplode: \n  assumes \"\\<And> x . x \\<in> A \\<Longrightarrow> f x \\<in> range explode\" and \"A \\<in> range explode\" \n  shows \"(\\<Union> x \\<in> A . f x) \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (f ` A) \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (f ` A) \\<in> range explode", "let ?S = \"Sep (Sum (Repl (implode A) (implode o f))) (\\<lambda> y . \\<exists> x  . (Elem x (implode A)) \\<and> (Elem y (implode (f x))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (f ` A) \\<in> range explode", "have \"explode ?S = (\\<Union> x \\<in> A . f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. explode\n     (Sep (HOLZF.Sum (Repl (implode A) (implode \\<circ> f)))\n       (\\<lambda>y.\n           \\<exists>x. Elem x (implode A) \\<and> Elem y (implode (f x)))) =\n    \\<Union> (f ` A)", "proof (auto simp add: UNION_eq explode_def Sep Sum Repl assms Elem_implode cong del: image_cong_simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<in> A; x \\<in> f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            Elem x y \\<and>\n                            (\\<exists>a. a \\<in> A \\<and> y = implode (f a))", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<in> A; x \\<in> f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            Elem x y \\<and>\n                            (\\<exists>a. a \\<in> A \\<and> y = implode (f a))", "assume a: \"y \\<in> A\" and b: \"x \\<in> f y\""], ["proof (state)\nthis:\n  y \\<in> A\n  x \\<in> f y\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<in> A; x \\<in> f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            Elem x y \\<and>\n                            (\\<exists>a. a \\<in> A \\<and> y = implode (f a))", "show \"\\<exists>z. Elem x z \\<and> (\\<exists>a. a \\<in> A \\<and> z = implode (f a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       Elem x z \\<and> (\\<exists>a. a \\<in> A \\<and> z = implode (f a))", "apply (rule exI [where ?x = \"implode (f y)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem x (implode (f y)) \\<and>\n    (\\<exists>a. a \\<in> A \\<and> implode (f y) = implode (f a))", "apply (auto simp add: explode_def Sep Sum Repl assms Elem_implode a b cong del: image_cong_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. a \\<in> A \\<and> implode (f y) = implode (f a)", "apply (rule exI [where ?x = y])"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A \\<and> implode (f y) = implode (f y)", "apply (simp add: a)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>z.\n     Elem x z \\<and> (\\<exists>a. a \\<in> A \\<and> z = implode (f a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  explode\n   (Sep (HOLZF.Sum (Repl (implode A) (implode \\<circ> f)))\n     (\\<lambda>y.\n         \\<exists>x. Elem x (implode A) \\<and> Elem y (implode (f x)))) =\n  \\<Union> (f ` A)\n\ngoal (1 subgoal):\n 1. \\<Union> (f ` A) \\<in> range explode", "thus ?thesis"], ["proof (prove)\nusing this:\n  explode\n   (Sep (HOLZF.Sum (Repl (implode A) (implode \\<circ> f)))\n     (\\<lambda>y.\n         \\<exists>x. Elem x (implode A) \\<and> Elem y (implode (f x)))) =\n  \\<Union> (f ` A)\n\ngoal (1 subgoal):\n 1. \\<Union> (f ` A) \\<in> range explode", "by auto"], ["proof (state)\nthis:\n  \\<Union> (f ` A) \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFUnionNatInRangeExplode: \"(\\<And> (n :: nat) . f n \\<in> range explode) \\<Longrightarrow> (\\<Union> n . f n) \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "assume a: \"(\\<And> (n :: nat) . f n \\<in> range explode)\""], ["proof (state)\nthis:\n  f ?n \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "have \"explode Nat \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. explode HOLZF.Nat \\<in> range explode", "by simp"], ["proof (state)\nthis:\n  explode HOLZF.Nat \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "moreover"], ["proof (state)\nthis:\n  explode HOLZF.Nat \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "have \"\\<And> n . n \\<in> (explode Nat) \\<Longrightarrow> (f o Nat2nat) n \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n       (f \\<circ> Nat2nat) n \\<in> range explode", "using a"], ["proof (prove)\nusing this:\n  f ?n \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n       (f \\<circ> Nat2nat) n \\<in> range explode", "by(auto simp add: explode_def)"], ["proof (state)\nthis:\n  ?n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n  (f \\<circ> Nat2nat) ?n \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "moreover"], ["proof (state)\nthis:\n  ?n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n  (f \\<circ> Nat2nat) ?n \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "have \"(\\<Union> n . f n) = (\\<Union> n \\<in> (explode Nat) . (f o Nat2nat) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range f) = \\<Union> ((f \\<circ> Nat2nat) ` explode HOLZF.Nat)", "proof(auto simp add: Nat2nat_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       x \\<in> f n \\<Longrightarrow>\n       \\<exists>xa\\<in>explode HOLZF.Nat. x \\<in> f (inv nat2Nat xa)", "fix x n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       x \\<in> f n \\<Longrightarrow>\n       \\<exists>xa\\<in>explode HOLZF.Nat. x \\<in> f (inv nat2Nat xa)", "assume aa: \"x \\<in> f n\""], ["proof (state)\nthis:\n  x \\<in> f n\n\ngoal (1 subgoal):\n 1. \\<And>x n.\n       x \\<in> f n \\<Longrightarrow>\n       \\<exists>xa\\<in>explode HOLZF.Nat. x \\<in> f (inv nat2Nat xa)", "show \"\\<exists> n \\<in> (explode Nat) . x \\<in> f (inv nat2Nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<in>explode HOLZF.Nat. x \\<in> f (inv nat2Nat n)", "apply(rule bexI[where ?x = \"nat2Nat n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<in> f (inv nat2Nat (nat2Nat n))\n 2. nat2Nat n \\<in> explode HOLZF.Nat", "by(auto simp add: aa inj_nat2Nat explode_Elem)"], ["proof (state)\nthis:\n  \\<exists>n\\<in>explode HOLZF.Nat. x \\<in> f (inv nat2Nat n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (range f) = \\<Union> ((f \\<circ> Nat2nat) ` explode HOLZF.Nat)\n\ngoal (1 subgoal):\n 1. (\\<And>n. f n \\<in> range explode) \\<Longrightarrow>\n    \\<Union> (range f) \\<in> range explode", "ultimately"], ["proof (chain)\npicking this:\n  explode HOLZF.Nat \\<in> range explode\n  ?n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n  (f \\<circ> Nat2nat) ?n \\<in> range explode\n  \\<Union> (range f) = \\<Union> ((f \\<circ> Nat2nat) ` explode HOLZF.Nat)", "show \"(\\<Union> n . f n) \\<in> range explode\""], ["proof (prove)\nusing this:\n  explode HOLZF.Nat \\<in> range explode\n  ?n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n  (f \\<circ> Nat2nat) ?n \\<in> range explode\n  \\<Union> (range f) = \\<Union> ((f \\<circ> Nat2nat) ` explode HOLZF.Nat)\n\ngoal (1 subgoal):\n 1. \\<Union> (range f) \\<in> range explode", "using ZFUnionRangeExplode"], ["proof (prove)\nusing this:\n  explode HOLZF.Nat \\<in> range explode\n  ?n \\<in> explode HOLZF.Nat \\<Longrightarrow>\n  (f \\<circ> Nat2nat) ?n \\<in> range explode\n  \\<Union> (range f) = \\<Union> ((f \\<circ> Nat2nat) ` explode HOLZF.Nat)\n  \\<lbrakk>\\<And>x. x \\<in> ?A \\<Longrightarrow> ?f x \\<in> range explode;\n   ?A \\<in> range explode\\<rbrakk>\n  \\<Longrightarrow> \\<Union> (?f ` ?A) \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<Union> (range f) \\<in> range explode", "by simp"], ["proof (state)\nthis:\n  \\<Union> (range f) \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFProdFnInRangeExplode: \"\\<lbrakk>A \\<in> range explode ; B \\<in> range explode\\<rbrakk> \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "assume a: \"A \\<in> range explode\" and b: \"B \\<in> range explode\""], ["proof (state)\nthis:\n  A \\<in> range explode\n  B \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "let ?X = \"(explode (CartProd (implode A) (implode B)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "have \"f ` (A \\<times> B) = (f  o (\\<lambda> z . (Fst z, Snd z))) ` ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (A \\<times> B) =\n    (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n    explode (CartProd (implode A) (implode B))", "proof(auto simp add: explode_def CartProd image_def Fst Snd)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>xa \\<in> A; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                Elem a (implode A) \\<and>\n                                (\\<exists>b.\n                                    Elem b (implode B) \\<and>\n                                    x = Opair a b)) \\<and>\n                            f (xa, y) = f (Fst x, Snd x)\n 2. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>xa \\<in> A; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                Elem a (implode A) \\<and>\n                                (\\<exists>b.\n                                    Elem b (implode B) \\<and>\n                                    x = Opair a b)) \\<and>\n                            f (xa, y) = f (Fst x, Snd x)\n 2. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "fix z y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>xa \\<in> A; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                Elem a (implode A) \\<and>\n                                (\\<exists>b.\n                                    Elem b (implode B) \\<and>\n                                    x = Opair a b)) \\<and>\n                            f (xa, y) = f (Fst x, Snd x)\n 2. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "assume z: \"z \\<in> A\" and y: \"y \\<in> B\""], ["proof (state)\nthis:\n  z \\<in> A\n  y \\<in> B\n\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>xa \\<in> A; y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                Elem a (implode A) \\<and>\n                                (\\<exists>b.\n                                    Elem b (implode B) \\<and>\n                                    x = Opair a b)) \\<and>\n                            f (xa, y) = f (Fst x, Snd x)\n 2. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "show \"\\<exists>x. (\\<exists>a. Elem a (implode A) \\<and>\n        (\\<exists>b. Elem b (implode B) \\<and> x = Opair a b)) \\<and> f (z, y) = f (Fst x, Snd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>a.\n           Elem a (implode A) \\<and>\n           (\\<exists>b. Elem b (implode B) \\<and> x = Opair a b)) \\<and>\n       f (z, y) = f (Fst x, Snd x)", "apply(insert z y a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> A; y \\<in> B; A \\<in> range explode;\n     B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (\\<exists>a.\n                             Elem a (implode A) \\<and>\n                             (\\<exists>b.\n                                 Elem b (implode B) \\<and>\n                                 x = Opair a b)) \\<and>\n                         f (z, y) = f (Fst x, Snd x)", "apply(rule exI[where ?x = \"Opair z y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> A; y \\<in> B; A \\<in> range explode;\n     B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          Elem a (implode A) \\<and>\n                          (\\<exists>b.\n                              Elem b (implode B) \\<and>\n                              Opair z y = Opair a b)) \\<and>\n                      f (z, y) = f (Fst (Opair z y), Snd (Opair z y))", "apply(auto simp add: Opair explode_Elem Fst Snd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>a.\n         Elem a (implode A) \\<and>\n         (\\<exists>b. Elem b (implode B) \\<and> x = Opair a b)) \\<and>\n     f (z, y) = f (Fst x, Snd x)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?z2 \\<in> A; ?y2 \\<in> B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       (\\<exists>a.\n                           Elem a (implode A) \\<and>\n                           (\\<exists>b.\n                               Elem b (implode B) \\<and>\n                               x = Opair a b)) \\<and>\n                       f (?z2, ?y2) = f (Fst x, Snd x)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?z2 \\<in> A; ?y2 \\<in> B\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       (\\<exists>a.\n                           Elem a (implode A) \\<and>\n                           (\\<exists>b.\n                               Elem b (implode B) \\<and>\n                               x = Opair a b)) \\<and>\n                       f (?z2, ?y2) = f (Fst x, Snd x)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "assume aa: \"Elem a (implode A)\" and bb: \"Elem b (implode B)\""], ["proof (state)\nthis:\n  Elem a (implode A)\n  Elem b (implode B)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Elem a (implode A); Elem b (implode B)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A.\n                            \\<exists>y\\<in>B. f (a, b) = f (x, y)", "show \"\\<exists> x \\<in> A . \\<exists> y \\<in> B . f (a,b) = f (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. \\<exists>y\\<in>B. f (a, b) = f (x, y)", "by(rule bexI[where ?x = a], rule bexI[where ?x = b], simp, insert a b aa bb, auto simp add: explode_Elem)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>A. \\<exists>y\\<in>B. f (a, b) = f (x, y)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Elem ?a2 (implode A); Elem ?b2 (implode B)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>A.\n                       \\<exists>y\\<in>B. f (?a2, ?b2) = f (x, y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ` (A \\<times> B) =\n  (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n  explode (CartProd (implode A) (implode B))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "moreover"], ["proof (state)\nthis:\n  f ` (A \\<times> B) =\n  (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n  explode (CartProd (implode A) (implode B))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "have \"?X \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. explode (CartProd (implode A) (implode B)) \\<in> range explode", "by simp"], ["proof (state)\nthis:\n  explode (CartProd (implode A) (implode B)) \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> f ` (A \\<times> B) \\<in> range explode", "ultimately"], ["proof (chain)\npicking this:\n  f ` (A \\<times> B) =\n  (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n  explode (CartProd (implode A) (implode B))\n  explode (CartProd (implode A) (implode B)) \\<in> range explode", "show \"f ` (A \\<times> B) \\<in> range explode\""], ["proof (prove)\nusing this:\n  f ` (A \\<times> B) =\n  (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n  explode (CartProd (implode A) (implode B))\n  explode (CartProd (implode A) (implode B)) \\<in> range explode\n\ngoal (1 subgoal):\n 1. f ` (A \\<times> B) \\<in> range explode", "using ZFImageRangeExplode"], ["proof (prove)\nusing this:\n  f ` (A \\<times> B) =\n  (f \\<circ> (\\<lambda>z. (Fst z, Snd z))) `\n  explode (CartProd (implode A) (implode B))\n  explode (CartProd (implode A) (implode B)) \\<in> range explode\n  ?x \\<in> range explode \\<Longrightarrow> ?f ` ?x \\<in> range explode\n\ngoal (1 subgoal):\n 1. f ` (A \\<times> B) \\<in> range explode", "by simp"], ["proof (state)\nthis:\n  f ` (A \\<times> B) \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFUnionInRangeExplode: \"\\<lbrakk>A \\<in> range explode ; B \\<in> range explode\\<rbrakk> \\<Longrightarrow> A \\<union> B \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<in> range explode", "assume \"A \\<in> range explode\" and \"B \\<in> range explode\""], ["proof (state)\nthis:\n  A \\<in> range explode\n  B \\<in> range explode\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<in> range explode", "from this"], ["proof (chain)\npicking this:\n  A \\<in> range explode\n  B \\<in> range explode", "obtain A' B' where A': \"A = explode A'\" and B': \"B = explode B'\""], ["proof (prove)\nusing this:\n  A \\<in> range explode\n  B \\<in> range explode\n\ngoal (1 subgoal):\n 1. (\\<And>A' B'.\n        \\<lbrakk>A = explode A'; B = explode B'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A = explode A'\n  B = explode B'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<in> range explode", "have \"A \\<union> B = explode (union (implode A) (implode B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<union> B = explode (HOLZF.union (implode A) (implode B))", "by(auto simp add: explode_union  union explode_Elem A' B')"], ["proof (state)\nthis:\n  A \\<union> B = explode (HOLZF.union (implode A) (implode B))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> range explode; B \\<in> range explode\\<rbrakk>\n    \\<Longrightarrow> A \\<union> B \\<in> range explode", "thus \"A \\<union> B \\<in> range explode\""], ["proof (prove)\nusing this:\n  A \\<union> B = explode (HOLZF.union (implode A) (implode B))\n\ngoal (1 subgoal):\n 1. A \\<union> B \\<in> range explode", "by auto"], ["proof (state)\nthis:\n  A \\<union> B \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SingletonInRangeExplode: \"{x} \\<in> range explode\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<in> range explode", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. {x} \\<in> range explode", "have \"explode (Singleton x) = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. explode (Singleton x) = {x}", "by(auto simp add: explode_def Singleton)"], ["proof (state)\nthis:\n  explode (Singleton x) = {x}\n\ngoal (1 subgoal):\n 1. {x} \\<in> range explode", "thus ?thesis"], ["proof (prove)\nusing this:\n  explode (Singleton x) = {x}\n\ngoal (1 subgoal):\n 1. {x} \\<in> range explode", "by auto"], ["proof (state)\nthis:\n  {x} \\<in> range explode\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ZFTriple :: \"[ZF,ZF,ZF] \\<Rightarrow> ZF\" where\n  \"ZFTriple a b c = Opair (Opair a b) c\""], ["", "definition \"ZFTFst = Fst o Fst\""], ["", "definition \"ZFTSnd = Snd o Fst\""], ["", "definition \"ZFTThd = Snd\""], ["", "lemma ZFTFst: \"ZFTFst (ZFTriple a b c) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFTFst (ZFTriple a b c) = a", "by(auto simp add: ZFTriple_def ZFTFst_def Fst)"], ["", "lemma ZFTSnd: \"ZFTSnd (ZFTriple a b c) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFTSnd (ZFTriple a b c) = b", "by(auto simp add: ZFTriple_def ZFTSnd_def Snd Fst)"], ["", "lemma ZFTThd: \"ZFTThd (ZFTriple a b c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFTThd (ZFTriple a b c) = c", "by(auto simp add: ZFTriple_def ZFTThd_def Snd Fst)"], ["", "lemma ZFTriple: \"ZFTriple a b c = ZFTriple a' b' c' \\<Longrightarrow> (a = a' \\<and> b = b' \\<and> c = c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFTriple a b c = ZFTriple a' b' c' \\<Longrightarrow>\n    a = a' \\<and> b = b' \\<and> c = c'", "by(auto simp add: ZFTriple_def Opair)"], ["", "lemma ZFSucZero: \"Nat2nat (SucNat Empty) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "have \"nat2Nat 0 = Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat2Nat 0 = Empty", "by auto"], ["proof (state)\nthis:\n  nat2Nat 0 = Empty\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "hence \"(SucNat Empty) = nat2Nat (Suc 0)\""], ["proof (prove)\nusing this:\n  nat2Nat 0 = Empty\n\ngoal (1 subgoal):\n 1. SucNat Empty = nat2Nat (Suc 0)", "by auto"], ["proof (state)\nthis:\n  SucNat Empty = nat2Nat (Suc 0)\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "hence \"Nat2nat (SucNat Empty) = Nat2nat (nat2Nat (Suc 0))\""], ["proof (prove)\nusing this:\n  SucNat Empty = nat2Nat (Suc 0)\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = Nat2nat (nat2Nat (Suc 0))", "by simp"], ["proof (state)\nthis:\n  Nat2nat (SucNat Empty) = Nat2nat (nat2Nat (Suc 0))\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "also"], ["proof (state)\nthis:\n  Nat2nat (SucNat Empty) = Nat2nat (nat2Nat (Suc 0))\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "have \"... = Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nat2nat (nat2Nat (Suc 0)) = Suc 0", "using Nat2nat_nat2Nat[of \"Suc 0\"]"], ["proof (prove)\nusing this:\n  Nat2nat (nat2Nat (Suc 0)) = Suc 0\n\ngoal (1 subgoal):\n 1. Nat2nat (nat2Nat (Suc 0)) = Suc 0", "by simp"], ["proof (state)\nthis:\n  Nat2nat (nat2Nat (Suc 0)) = Suc 0\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "finally"], ["proof (chain)\npicking this:\n  Nat2nat (SucNat Empty) = Suc 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Nat2nat (SucNat Empty) = Suc 0\n\ngoal (1 subgoal):\n 1. Nat2nat (SucNat Empty) = 1", "by simp"], ["proof (state)\nthis:\n  Nat2nat (SucNat Empty) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFZero: \"Nat2nat Empty = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "have \"nat2Nat 0 = Empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat2Nat 0 = Empty", "by auto"], ["proof (state)\nthis:\n  nat2Nat 0 = Empty\n\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "hence \"Nat2nat Empty = Nat2nat (nat2Nat 0)\""], ["proof (prove)\nusing this:\n  nat2Nat 0 = Empty\n\ngoal (1 subgoal):\n 1. Nat2nat Empty = Nat2nat (nat2Nat 0)", "by simp"], ["proof (state)\nthis:\n  Nat2nat Empty = Nat2nat (nat2Nat 0)\n\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  Nat2nat Empty = Nat2nat (nat2Nat 0)\n\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "using Nat2nat_nat2Nat[of \"0\"]"], ["proof (prove)\nusing this:\n  Nat2nat Empty = Nat2nat (nat2Nat 0)\n  Nat2nat (nat2Nat 0) = 0\n\ngoal (1 subgoal):\n 1. Nat2nat Empty = 0", "by simp"], ["proof (state)\nthis:\n  Nat2nat Empty = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ZFSucNeq0: \"Elem x Nat \\<Longrightarrow> Nat2nat (SucNat x) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Elem x HOLZF.Nat \\<Longrightarrow> Nat2nat (SucNat x) \\<noteq> 0", "by(auto simp add: Nat2nat_SucNat)"], ["", "end"]]}