{"file_name": "/home/qj213/afp-2021-10-22/thys/Category2/Category.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category2", "problem_names": ["lemma MakeCatMapsTo: \"f maps\\<^bsub>C\\<^esub> X to Y \\<Longrightarrow> f maps\\<^bsub>MakeCat C\\<^esub> X to Y\"", "lemma MakeCatComp: \"f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow> f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g\"", "lemma MakeCatId: \"X \\<in> obj\\<^bsub>C\\<^esub> \\<Longrightarrow> id\\<^bsub>C\\<^esub> X = id\\<^bsub>MakeCat C\\<^esub> X\"", "lemma MakeCatObj: \"obj\\<^bsub>MakeCat C\\<^esub> = obj\\<^bsub>C\\<^esub>\"", "lemma MakeCatMor: \"mor\\<^bsub>MakeCat C\\<^esub> = mor\\<^bsub>C\\<^esub>\"", "lemma MakeCatDom: \"f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow> dom\\<^bsub>C\\<^esub> f = dom\\<^bsub>MakeCat C\\<^esub> f\"", "lemma MakeCatCod: \"f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow> cod\\<^bsub>C\\<^esub> f = cod\\<^bsub>MakeCat C\\<^esub> f\"", "lemma MakeCatCompDef: \"f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g = f \\<approx>>\\<^bsub>C\\<^esub> g\"", "lemma MakeCatComp2: \"f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g \\<Longrightarrow> f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g\"", "lemma ExtCategoryMakeCat: \"ExtCategory (MakeCat C)\"", "lemma MakeCat: \"Category_axioms C \\<Longrightarrow> Category (MakeCat C)\"", "lemma MapsToE[elim]: \"\\<lbrakk>f maps\\<^bsub>C\\<^esub> X to Y ; \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; dom\\<^bsub>C\\<^esub> f = X ; cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk> \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\"", "lemma MapsToI[intro]: \"\\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; dom\\<^bsub>C\\<^esub> f = X ; cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk> \\<Longrightarrow> f maps\\<^bsub>C\\<^esub> X to Y\"", "lemma CompDefinedE[elim]: \"\\<lbrakk>f \\<approx>>\\<^bsub>C\\<^esub> g ; \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; g \\<in> mor\\<^bsub>C\\<^esub> ; cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk> \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\"", "lemma CompDefinedI[intro]: \"\\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; g \\<in> mor\\<^bsub>C\\<^esub> ; cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk> \\<Longrightarrow> f \\<approx>>\\<^bsub>C\\<^esub> g\"", "lemma (in Category) MapsToCompI: assumes \"f \\<approx>> g\" shows \"(f ;; g) maps (dom f) to (cod g)\"", "lemma MapsToCompDef:\n  assumes \"f maps\\<^bsub>C\\<^esub> X to Y\" and \"g maps\\<^bsub>C\\<^esub> Y to Z\"\n  shows \"f \\<approx>>\\<^bsub>C\\<^esub> g\"", "lemma (in Category) MapsToMorDomCod: \n  assumes \"f \\<approx>> g\" \n  shows \"f ;; g \\<in> mor\" and \"dom (f ;; g) = dom f\" and \"cod (f ;; g) = cod g\"", "lemma (in Category) MapsToObj: \n  assumes \"f maps X to Y\"\n  shows \"X \\<in> obj\" and \"Y \\<in> obj\"", "lemma (in Category) IdInj: \n  assumes \"X \\<in> obj\" and \"Y \\<in> obj\" and \"id X = id Y\"\n  shows   \"X = Y\"", "lemma (in Category) CompDefComp:\n  assumes \"f \\<approx>> g\" and \"g \\<approx>> h\"\n  shows \"f \\<approx>> (g ;; h)\" and \"(f ;; g) \\<approx>> h\"", "lemma (in Category) CatIdInMor: \"X \\<in> obj \\<Longrightarrow> id X \\<in> mor\"", "lemma (in Category) MapsToId: assumes \"X \\<in> obj\" shows \"id X \\<approx>> id X\"", "lemmas (in Category) Simps = Cdom Ccod Cidm Cidl Cidr MapsToCompI IdInj MapsToId", "lemma (in Category) LeftRightInvUniq: \n  assumes 0: \"h \\<approx>> f\" and  z: \"f \\<approx>> g\"\n  assumes 1: \"f ;; g = id (dom f)\" \n  and     2: \"h ;; f = id (cod f)\"\n  shows   \"h = g\"", "lemma (in Category) CatIdDomCod:\n  assumes \"X \\<in> obj\"\n  shows \"dom (id X) = X\" and \"cod (id X) = X\"", "lemma (in Category) CatIdCompId:\n  assumes \"X \\<in> obj\"\n  shows   \"id X ;; id X = id X\"", "lemma (in Category) CatIdUniqR: \n  assumes iota: \"\\<iota> maps X to X\"\n  and     rid:  \"\\<forall> f . f \\<approx>> \\<iota> \\<longrightarrow> f ;; \\<iota> = f\"\n  shows \"id X = \\<iota>\"", "lemma (in Category) Inverse_relI: \"\\<lbrakk>f \\<approx>> g ; f ;; g = id (dom f) ; g ;; f = id (cod f)\\<rbrakk> \\<Longrightarrow> (cinv f g)\"", "lemma (in Category) Inverse_relE[elim]: \"\\<lbrakk>cinv f g ; \\<lbrakk>f \\<approx>> g ; f ;; g = id (dom f) ; g ;; f = id (cod f)\\<rbrakk> \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"", "lemma (in Category) Inverse_relSym: \n  assumes \"cinv f g\"\n  shows   \"cinv g f\"", "lemma (in Category) InverseUnique: \n  assumes 1: \"cinv f g\"\n  and     2: \"cinv f h\"\n  shows   \"g = h\"", "lemma (in Category) InvId: assumes \"X \\<in> obj\" shows \"(cinv (id X) (id X))\"", "lemma (in Category) inv2Inv:\n  assumes \"cinv f g\"\n  shows   \"ciso f\" and \"Cinv f = g\"", "lemma (in Category) iso2Inv:\n  assumes \"ciso f\"\n  shows   \"cinv f (Cinv f)\"", "lemma (in Category) InvInv:\n  assumes \"ciso f\" \n  shows   \"ciso (Cinv f)\" and \"(Cinv (Cinv f)) = f\"", "lemma (in Category) InvIsMor: \"(cinv f g) \\<Longrightarrow> (f \\<in> mor \\<and> g \\<in> mor)\"", "lemma (in Category) IsoIsMor: \"ciso f \\<Longrightarrow> f \\<in> mor\"", "lemma (in Category) InvDomCod:\n  assumes \"ciso f\"\n  shows \"dom (Cinv f) = cod f\" and \"cod (Cinv f) = dom f\" and \"Cinv f \\<in> mor\"", "lemma (in Category) IsoCompInv: \"ciso f \\<Longrightarrow> f \\<approx>> Cinv f\"", "lemma (in Category) InvCompIso: \"ciso f \\<Longrightarrow> Cinv f \\<approx>> f\"", "lemma (in Category) IsoInvId1 : \"ciso f \\<Longrightarrow> (Cinv f) ;; f = (id (cod f))\"", "lemma (in Category) IsoInvId2 :  \"ciso f \\<Longrightarrow> f ;; (Cinv f) = (id (dom f))\"", "lemma (in Category) IsoCompDef:\n  assumes 1: \"f \\<approx>> g\" and 2: \"ciso f\" and 3: \"ciso g\"\n  shows \"(Cinv g) \\<approx>> (Cinv f)\"", "lemma (in Category) IsoCompose: \n  assumes 1: \"f \\<approx>> g\" and 2: \"ciso f\" and 3: \"ciso g\"\n  shows \"ciso (f ;; g)\" and \"Cinv (f ;; g) = (Cinv g) ;; (Cinv f)\"", "lemma [simp]: \"Category(UnitCategory)\"", "lemma OpCatOpCat: \"Op (Op C) = C\"", "lemma OpCatCatAx: \"Category_axioms C \\<Longrightarrow> Category_axioms (Op C)\"", "lemma OpCatCatExt: \"ExtCategory C \\<Longrightarrow> ExtCategory (Op C)\"", "lemma OpCatCat: \"Category C \\<Longrightarrow> Category (Op C)\"", "lemma MapsToOp: \"f maps\\<^bsub>C \\<^esub>X to Y \\<Longrightarrow> f maps\\<^bsub>Op C \\<^esub>Y to X\"", "lemma MapsToOpOp: \"f maps\\<^bsub>Op C \\<^esub>X to Y \\<Longrightarrow> f maps\\<^bsub>C \\<^esub>Y to X\"", "lemma CompDefOp: \"f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow> g \\<approx>>\\<^bsub>Op C\\<^esub> f\""], "translations": [["", "lemma MakeCatMapsTo: \"f maps\\<^bsub>C\\<^esub> X to Y \\<Longrightarrow> f maps\\<^bsub>MakeCat C\\<^esub> X to Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f maps\\<^bsub>C\\<^esub> X to Y \\<Longrightarrow>\n    f maps\\<^bsub>MakeCat C\\<^esub> X to Y", "by (auto simp add: MapsTo_def MakeCat_def)"], ["", "lemma MakeCatComp: \"f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow> f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow>\n    f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g", "by (auto simp add: MapsTo_def MakeCat_def)"], ["", "lemma MakeCatId: \"X \\<in> obj\\<^bsub>C\\<^esub> \\<Longrightarrow> id\\<^bsub>C\\<^esub> X = id\\<^bsub>MakeCat C\\<^esub> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> obj\\<^bsub>C\\<^esub> \\<Longrightarrow>\n    id\\<^bsub>C\\<^esub> X = id\\<^bsub>MakeCat C\\<^esub> X", "by (auto simp add: MapsTo_def MakeCat_def)"], ["", "lemma MakeCatObj: \"obj\\<^bsub>MakeCat C\\<^esub> = obj\\<^bsub>C\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj\\<^bsub>MakeCat C\\<^esub> = obj\\<^bsub>C\\<^esub>", "by (simp add: MakeCat_def)"], ["", "lemma MakeCatMor: \"mor\\<^bsub>MakeCat C\\<^esub> = mor\\<^bsub>C\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mor\\<^bsub>MakeCat C\\<^esub> = mor\\<^bsub>C\\<^esub>", "by (simp add: MakeCat_def)"], ["", "lemma MakeCatDom: \"f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow> dom\\<^bsub>C\\<^esub> f = dom\\<^bsub>MakeCat C\\<^esub> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow>\n    dom\\<^bsub>C\\<^esub> f = dom\\<^bsub>MakeCat C\\<^esub> f", "by (simp add: MakeCat_def)"], ["", "lemma MakeCatCod: \"f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow> cod\\<^bsub>C\\<^esub> f = cod\\<^bsub>MakeCat C\\<^esub> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> mor\\<^bsub>C\\<^esub> \\<Longrightarrow>\n    cod\\<^bsub>C\\<^esub> f = cod\\<^bsub>MakeCat C\\<^esub> f", "by (simp add: MakeCat_def)"], ["", "lemma MakeCatCompDef: \"f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g = f \\<approx>>\\<^bsub>C\\<^esub> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g =\n    f \\<approx>>\\<^bsub>C\\<^esub> g", "by (auto simp add: CompDefined_def MakeCat_def)"], ["", "lemma MakeCatComp2: \"f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g \\<Longrightarrow> f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g \\<Longrightarrow>\n    f ;;\\<^bsub>MakeCat C\\<^esub> g = f ;;\\<^bsub>C\\<^esub> g", "by (simp add: MakeCatCompDef MakeCatComp)"], ["", "lemma ExtCategoryMakeCat: \"ExtCategory (MakeCat C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ExtCategory (MakeCat C)", "by (unfold_locales, simp_all add: MakeCat_def extensional_def CompDefined_def)"], ["", "lemma MakeCat: \"Category_axioms C \\<Longrightarrow> Category (MakeCat C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Category_axioms C \\<Longrightarrow> Category (MakeCat C)", "apply(intro_locales, simp add: ExtCategoryMakeCat)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Category_axioms C \\<Longrightarrow> Category_axioms (MakeCat C)", "apply (simp add: Category_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>f.\n        f \\<in> mor\\<^bsub>C\\<^esub> \\<longrightarrow>\n        dom\\<^bsub>C\\<^esub> f \\<in> obj\\<^bsub>C\\<^esub>) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>C\\<^esub> \\<longrightarrow>\n        cod\\<^bsub>C\\<^esub> f \\<in> obj\\<^bsub>C\\<^esub>) \\<and>\n    (\\<forall>X.\n        X \\<in> obj\\<^bsub>C\\<^esub> \\<longrightarrow>\n        id\\<^bsub>C\\<^esub> X maps\\<^bsub>C\\<^esub> X to X) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>C\\<^esub> \\<longrightarrow>\n        id\\<^bsub>C\\<^esub> (dom\\<^bsub>C\\<^esub> f) ;;\\<^bsub>C\\<^esub> f =\n        f) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>C\\<^esub> \\<longrightarrow>\n        f ;;\\<^bsub>C\\<^esub> id\\<^bsub>C\\<^esub> (cod\\<^bsub>C\\<^esub> f) =\n        f) \\<and>\n    (\\<forall>f g.\n        f \\<approx>>\\<^bsub>C\\<^esub> g \\<longrightarrow>\n        (\\<forall>h.\n            g \\<approx>>\\<^bsub>C\\<^esub> h \\<longrightarrow>\n            f ;;\\<^bsub>C\\<^esub> g ;;\\<^bsub>C\\<^esub> h =\n            f ;;\\<^bsub>C\\<^esub> (g ;;\\<^bsub>C\\<^esub> h))) \\<and>\n    (\\<forall>f X Y.\n        f maps\\<^bsub>C\\<^esub> X to Y \\<longrightarrow>\n        (\\<forall>g Z.\n            g maps\\<^bsub>C\\<^esub> Y to Z \\<longrightarrow>\n            f ;;\\<^bsub>C\\<^esub>\n            g maps\\<^bsub>C\\<^esub> X to Z)) \\<Longrightarrow>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>MakeCat C\\<^esub> \\<longrightarrow>\n        dom\\<^bsub>MakeCat C\\<^esub> f\n        \\<in> obj\\<^bsub>MakeCat C\\<^esub>) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>MakeCat C\\<^esub> \\<longrightarrow>\n        cod\\<^bsub>MakeCat C\\<^esub> f\n        \\<in> obj\\<^bsub>MakeCat C\\<^esub>) \\<and>\n    (\\<forall>X.\n        X \\<in> obj\\<^bsub>MakeCat C\\<^esub> \\<longrightarrow>\n        id\\<^bsub>MakeCat C\\<^esub> X maps\\<^bsub>MakeCat C\\<^esub> X to X) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>MakeCat C\\<^esub> \\<longrightarrow>\n        id\\<^bsub>MakeCat C\\<^esub> (dom\\<^bsub>MakeCat C\\<^esub> f) ;;\\<^bsub>MakeCat C\\<^esub>\n        f =\n        f) \\<and>\n    (\\<forall>f.\n        f \\<in> mor\\<^bsub>MakeCat C\\<^esub> \\<longrightarrow>\n        f ;;\\<^bsub>MakeCat C\\<^esub>\n        id\\<^bsub>MakeCat C\\<^esub> (cod\\<^bsub>MakeCat C\\<^esub> f) =\n        f) \\<and>\n    (\\<forall>f g.\n        f \\<approx>>\\<^bsub>MakeCat C\\<^esub> g \\<longrightarrow>\n        (\\<forall>h.\n            g \\<approx>>\\<^bsub>MakeCat C\\<^esub> h \\<longrightarrow>\n            f ;;\\<^bsub>MakeCat C\\<^esub> g ;;\\<^bsub>MakeCat C\\<^esub> h =\n            f ;;\\<^bsub>MakeCat C\\<^esub>\n            (g ;;\\<^bsub>MakeCat C\\<^esub> h))) \\<and>\n    (\\<forall>f X Y.\n        f maps\\<^bsub>MakeCat C\\<^esub> X to Y \\<longrightarrow>\n        (\\<forall>g Z.\n            g maps\\<^bsub>MakeCat C\\<^esub> Y to Z \\<longrightarrow>\n            f ;;\\<^bsub>MakeCat C\\<^esub>\n            g maps\\<^bsub>MakeCat C\\<^esub> X to Z))", "apply (auto simp add: MakeCat_def CompDefined_def MapsTo_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma MapsToE[elim]: \"\\<lbrakk>f maps\\<^bsub>C\\<^esub> X to Y ; \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; dom\\<^bsub>C\\<^esub> f = X ; cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk> \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f maps\\<^bsub>C\\<^esub> X to Y;\n     \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub>; dom\\<^bsub>C\\<^esub> f = X;\n      cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk>\n     \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by (auto simp add: MapsTo_def)"], ["", "lemma MapsToI[intro]: \"\\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; dom\\<^bsub>C\\<^esub> f = X ; cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk> \\<Longrightarrow> f maps\\<^bsub>C\\<^esub> X to Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub>; dom\\<^bsub>C\\<^esub> f = X;\n     cod\\<^bsub>C\\<^esub> f = Y\\<rbrakk>\n    \\<Longrightarrow> f maps\\<^bsub>C\\<^esub> X to Y", "by (auto simp add: MapsTo_def)"], ["", "lemma CompDefinedE[elim]: \"\\<lbrakk>f \\<approx>>\\<^bsub>C\\<^esub> g ; \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; g \\<in> mor\\<^bsub>C\\<^esub> ; cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk> \\<Longrightarrow> R\\<rbrakk> \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<approx>>\\<^bsub>C\\<^esub> g;\n     \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub>; g \\<in> mor\\<^bsub>C\\<^esub>;\n      cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk>\n     \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by (auto simp add: CompDefined_def)"], ["", "lemma CompDefinedI[intro]: \"\\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub> ; g \\<in> mor\\<^bsub>C\\<^esub> ; cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk> \\<Longrightarrow> f \\<approx>>\\<^bsub>C\\<^esub> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> mor\\<^bsub>C\\<^esub>; g \\<in> mor\\<^bsub>C\\<^esub>;\n     cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\\<rbrakk>\n    \\<Longrightarrow> f \\<approx>>\\<^bsub>C\\<^esub> g", "by (auto simp add: CompDefined_def)"], ["", "lemma (in Category) MapsToCompI: assumes \"f \\<approx>> g\" shows \"(f ;; g) maps (dom f) to (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "have \"f maps (dom f) to (dom g)\" \n  and  \"g maps (dom g) to (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f maps dom f to dom g &&& g maps dom g to cod g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f maps dom f to dom g &&& g maps dom g to cod g", "by auto"], ["proof (state)\nthis:\n  f maps dom f to dom g\n  g maps dom g to cod g\n\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f maps dom f to dom g\n  g maps dom g to cod g\n\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "by (simp add: Ccompt[of f \"dom f\" \"dom g\" g \"cod g\"])"], ["proof (state)\nthis:\n  f ;; g maps dom f to cod g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MapsToCompDef:\n  assumes \"f maps\\<^bsub>C\\<^esub> X to Y\" and \"g maps\\<^bsub>C\\<^esub> Y to Z\"\n  shows \"f \\<approx>>\\<^bsub>C\\<^esub> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>>\\<^bsub>C\\<^esub> g", "proof(rule CompDefinedI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<in> mor\\<^bsub>C\\<^esub>\n 2. g \\<in> mor\\<^bsub>C\\<^esub>\n 3. cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g", "show \"f \\<in> mor\\<^bsub>C\\<^esub>\" and \"g \\<in> mor\\<^bsub>C\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> mor\\<^bsub>C\\<^esub> &&& g \\<in> mor\\<^bsub>C\\<^esub>", "using assms"], ["proof (prove)\nusing this:\n  f maps\\<^bsub>C\\<^esub> X to Y\n  g maps\\<^bsub>C\\<^esub> Y to Z\n\ngoal (1 subgoal):\n 1. f \\<in> mor\\<^bsub>C\\<^esub> &&& g \\<in> mor\\<^bsub>C\\<^esub>", "by auto"], ["proof (state)\nthis:\n  f \\<in> mor\\<^bsub>C\\<^esub>\n  g \\<in> mor\\<^bsub>C\\<^esub>\n\ngoal (1 subgoal):\n 1. cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g", "have \"cod\\<^bsub>C\\<^esub> f = Y\" and \"dom\\<^bsub>C\\<^esub> g = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod\\<^bsub>C\\<^esub> f = Y &&& dom\\<^bsub>C\\<^esub> g = Y", "using assms"], ["proof (prove)\nusing this:\n  f maps\\<^bsub>C\\<^esub> X to Y\n  g maps\\<^bsub>C\\<^esub> Y to Z\n\ngoal (1 subgoal):\n 1. cod\\<^bsub>C\\<^esub> f = Y &&& dom\\<^bsub>C\\<^esub> g = Y", "by auto"], ["proof (state)\nthis:\n  cod\\<^bsub>C\\<^esub> f = Y\n  dom\\<^bsub>C\\<^esub> g = Y\n\ngoal (1 subgoal):\n 1. cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g", "thus \"cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\""], ["proof (prove)\nusing this:\n  cod\\<^bsub>C\\<^esub> f = Y\n  dom\\<^bsub>C\\<^esub> g = Y\n\ngoal (1 subgoal):\n 1. cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g", "by simp"], ["proof (state)\nthis:\n  cod\\<^bsub>C\\<^esub> f = dom\\<^bsub>C\\<^esub> g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) MapsToMorDomCod: \n  assumes \"f \\<approx>> g\" \n  shows \"f ;; g \\<in> mor\" and \"dom (f ;; g) = dom f\" and \"cod (f ;; g) = cod g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g \\<in> mor &&& dom (f ;; g) = dom f &&& cod (f ;; g) = cod g", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. f ;; g \\<in> mor\n 2. dom (f ;; g) = dom f\n 3. cod (f ;; g) = cod g", "have \"(f ;; g) maps (dom f) to (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "by (simp add: MapsToCompI)"], ["proof (state)\nthis:\n  f ;; g maps dom f to cod g\n\ngoal (3 subgoals):\n 1. f ;; g \\<in> mor\n 2. dom (f ;; g) = dom f\n 3. cod (f ;; g) = cod g", "thus \"f ;; g \\<in> mor\" and \"dom (f ;; g) = dom f\" and \"cod (f ;; g) = cod g\""], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. f ;; g \\<in> mor &&& dom (f ;; g) = dom f &&& cod (f ;; g) = cod g", "by auto"], ["proof (state)\nthis:\n  f ;; g \\<in> mor\n  dom (f ;; g) = dom f\n  cod (f ;; g) = cod g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) MapsToObj: \n  assumes \"f maps X to Y\"\n  shows \"X \\<in> obj\" and \"Y \\<in> obj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> obj &&& Y \\<in> obj", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<in> obj\n 2. Y \\<in> obj", "have \"dom f = X\" and \"cod f = Y\" and \"f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f = X &&& cod f = Y &&& f \\<in> mor", "using assms"], ["proof (prove)\nusing this:\n  f maps X to Y\n\ngoal (1 subgoal):\n 1. dom f = X &&& cod f = Y &&& f \\<in> mor", "by auto"], ["proof (state)\nthis:\n  dom f = X\n  cod f = Y\n  f \\<in> mor\n\ngoal (2 subgoals):\n 1. X \\<in> obj\n 2. Y \\<in> obj", "thus \"X \\<in> obj\" and \"Y \\<in> obj\""], ["proof (prove)\nusing this:\n  dom f = X\n  cod f = Y\n  f \\<in> mor\n\ngoal (1 subgoal):\n 1. X \\<in> obj &&& Y \\<in> obj", "by (auto simp add: Cdom Ccod)"], ["proof (state)\nthis:\n  X \\<in> obj\n  Y \\<in> obj\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) IdInj: \n  assumes \"X \\<in> obj\" and \"Y \\<in> obj\" and \"id X = id Y\"\n  shows   \"X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. X = Y", "have \"dom (id X) = dom (id Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (id X) = dom (id Y)", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n  Y \\<in> obj\n  id X = id Y\n\ngoal (1 subgoal):\n 1. dom (id X) = dom (id Y)", "by simp"], ["proof (state)\nthis:\n  dom (id X) = dom (id Y)\n\ngoal (1 subgoal):\n 1. X = Y", "moreover"], ["proof (state)\nthis:\n  dom (id X) = dom (id Y)\n\ngoal (1 subgoal):\n 1. X = Y", "have \"dom (id X) = X\" and \"dom (id Y) = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (id X) = X &&& dom (id Y) = Y", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n  Y \\<in> obj\n  id X = id Y\n\ngoal (1 subgoal):\n 1. dom (id X) = X &&& dom (id Y) = Y", "by (auto simp add: MapsTo_def)"], ["proof (state)\nthis:\n  dom (id X) = X\n  dom (id Y) = Y\n\ngoal (1 subgoal):\n 1. X = Y", "ultimately"], ["proof (chain)\npicking this:\n  dom (id X) = dom (id Y)\n  dom (id X) = X\n  dom (id Y) = Y", "show ?thesis"], ["proof (prove)\nusing this:\n  dom (id X) = dom (id Y)\n  dom (id X) = X\n  dom (id Y) = Y\n\ngoal (1 subgoal):\n 1. X = Y", "by simp"], ["proof (state)\nthis:\n  X = Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) CompDefComp:\n  assumes \"f \\<approx>> g\" and \"g \\<approx>> h\"\n  shows \"f \\<approx>> (g ;; h)\" and \"(f ;; g) \\<approx>> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>> g ;; h &&& f ;; g \\<approx>> h", "proof(auto simp add: CompDefined_def)"], ["proof (state)\ngoal (6 subgoals):\n 1. f \\<in> mor\n 2. g ;; h \\<in> mor\n 3. cod f = dom (g ;; h)\n 4. f ;; g \\<in> mor\n 5. h \\<in> mor\n 6. cod (f ;; g) = dom h", "show \"f \\<in> mor\" and \"h \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> mor &&& h \\<in> mor", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  g \\<approx>> h\n\ngoal (1 subgoal):\n 1. f \\<in> mor &&& h \\<in> mor", "by auto"], ["proof (state)\nthis:\n  f \\<in> mor\n  h \\<in> mor\n\ngoal (4 subgoals):\n 1. g ;; h \\<in> mor\n 2. cod f = dom (g ;; h)\n 3. f ;; g \\<in> mor\n 4. cod (f ;; g) = dom h", "have  1: \"g ;; h maps (dom g) to (cod h)\" \n    and 2: \"f ;; g maps (dom f) to (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g ;; h maps dom g to cod h &&& f ;; g maps dom f to cod g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  g \\<approx>> h\n\ngoal (1 subgoal):\n 1. g ;; h maps dom g to cod h &&& f ;; g maps dom f to cod g", "by (simp add: MapsToCompI)+"], ["proof (state)\nthis:\n  g ;; h maps dom g to cod h\n  f ;; g maps dom f to cod g\n\ngoal (4 subgoals):\n 1. g ;; h \\<in> mor\n 2. cod f = dom (g ;; h)\n 3. f ;; g \\<in> mor\n 4. cod (f ;; g) = dom h", "thus \"g ;; h \\<in> mor\" and \"f ;; g \\<in> mor\""], ["proof (prove)\nusing this:\n  g ;; h maps dom g to cod h\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. g ;; h \\<in> mor &&& f ;; g \\<in> mor", "by auto"], ["proof (state)\nthis:\n  g ;; h \\<in> mor\n  f ;; g \\<in> mor\n\ngoal (2 subgoals):\n 1. cod f = dom (g ;; h)\n 2. cod (f ;; g) = dom h", "have \"cod f = dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = dom g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  g \\<approx>> h\n\ngoal (1 subgoal):\n 1. cod f = dom g", "by auto"], ["proof (state)\nthis:\n  cod f = dom g\n\ngoal (2 subgoals):\n 1. cod f = dom (g ;; h)\n 2. cod (f ;; g) = dom h", "also"], ["proof (state)\nthis:\n  cod f = dom g\n\ngoal (2 subgoals):\n 1. cod f = dom (g ;; h)\n 2. cod (f ;; g) = dom h", "have \"... = dom (g ;; h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = dom (g ;; h)", "using 1"], ["proof (prove)\nusing this:\n  g ;; h maps dom g to cod h\n\ngoal (1 subgoal):\n 1. dom g = dom (g ;; h)", "by auto"], ["proof (state)\nthis:\n  dom g = dom (g ;; h)\n\ngoal (2 subgoals):\n 1. cod f = dom (g ;; h)\n 2. cod (f ;; g) = dom h", "finally"], ["proof (chain)\npicking this:\n  cod f = dom (g ;; h)", "show \"cod f = dom (g ;; h)\""], ["proof (prove)\nusing this:\n  cod f = dom (g ;; h)\n\ngoal (1 subgoal):\n 1. cod f = dom (g ;; h)", "."], ["proof (state)\nthis:\n  cod f = dom (g ;; h)\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom h", "have \"dom h = cod g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom h = cod g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  g \\<approx>> h\n\ngoal (1 subgoal):\n 1. dom h = cod g", "by auto"], ["proof (state)\nthis:\n  dom h = cod g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom h", "also"], ["proof (state)\nthis:\n  dom h = cod g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom h", "have \"... = cod (f ;; g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod g = cod (f ;; g)", "using 2"], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. cod g = cod (f ;; g)", "by auto"], ["proof (state)\nthis:\n  cod g = cod (f ;; g)\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom h", "finally"], ["proof (chain)\npicking this:\n  dom h = cod (f ;; g)", "show \"cod (f ;; g) = dom h\""], ["proof (prove)\nusing this:\n  dom h = cod (f ;; g)\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom h", "by simp"], ["proof (state)\nthis:\n  cod (f ;; g) = dom h\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) CatIdInMor: \"X \\<in> obj \\<Longrightarrow> id X \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> obj \\<Longrightarrow> id X \\<in> mor", "by (auto simp add: Cidm)"], ["", "lemma (in Category) MapsToId: assumes \"X \\<in> obj\" shows \"id X \\<approx>> id X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X \\<approx>> id X", "proof(rule CompDefinedI)"], ["proof (state)\ngoal (3 subgoals):\n 1. id X \\<in> mor\n 2. id X \\<in> mor\n 3. cod (id X) = dom (id X)", "have \"id X maps X to X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X maps X to X", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X maps X to X", "by (simp add: Cidm)"], ["proof (state)\nthis:\n  id X maps X to X\n\ngoal (3 subgoals):\n 1. id X \\<in> mor\n 2. id X \\<in> mor\n 3. cod (id X) = dom (id X)", "thus \"id X \\<in> mor\" and \"id X \\<in> mor\" and \"cod (id X) = dom (id X)\""], ["proof (prove)\nusing this:\n  id X maps X to X\n\ngoal (1 subgoal):\n 1. id X \\<in> mor &&& id X \\<in> mor &&& cod (id X) = dom (id X)", "by auto"], ["proof (state)\nthis:\n  id X \\<in> mor\n  id X \\<in> mor\n  cod (id X) = dom (id X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas (in Category) Simps = Cdom Ccod Cidm Cidl Cidr MapsToCompI IdInj MapsToId"], ["", "lemma (in Category) LeftRightInvUniq: \n  assumes 0: \"h \\<approx>> f\" and  z: \"f \\<approx>> g\"\n  assumes 1: \"f ;; g = id (dom f)\" \n  and     2: \"h ;; f = id (cod f)\"\n  shows   \"h = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. h = g", "have mor: \"h \\<in> mor \\<and> g \\<in> mor\" \n  and  dc : \"dom f = cod h \\<and> cod f = dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> mor \\<and> g \\<in> mor &&& dom f = cod h \\<and> cod f = dom g", "using 0 z"], ["proof (prove)\nusing this:\n  h \\<approx>> f\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. h \\<in> mor \\<and> g \\<in> mor &&& dom f = cod h \\<and> cod f = dom g", "by auto"], ["proof (state)\nthis:\n  h \\<in> mor \\<and> g \\<in> mor\n  dom f = cod h \\<and> cod f = dom g\n\ngoal (1 subgoal):\n 1. h = g", "then"], ["proof (chain)\npicking this:\n  h \\<in> mor \\<and> g \\<in> mor\n  dom f = cod h \\<and> cod f = dom g", "have \"h = h ;; id (dom f)\""], ["proof (prove)\nusing this:\n  h \\<in> mor \\<and> g \\<in> mor\n  dom f = cod h \\<and> cod f = dom g\n\ngoal (1 subgoal):\n 1. h = h ;; id (dom f)", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  h = h ;; id (dom f)\n\ngoal (1 subgoal):\n 1. h = g", "also"], ["proof (state)\nthis:\n  h = h ;; id (dom f)\n\ngoal (1 subgoal):\n 1. h = g", "have \"... = h ;; (f ;; g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h ;; id (dom f) = h ;; (f ;; g)", "using 1"], ["proof (prove)\nusing this:\n  f ;; g = id (dom f)\n\ngoal (1 subgoal):\n 1. h ;; id (dom f) = h ;; (f ;; g)", "by simp+"], ["proof (state)\nthis:\n  h ;; id (dom f) = h ;; (f ;; g)\n\ngoal (1 subgoal):\n 1. h = g", "also"], ["proof (state)\nthis:\n  h ;; id (dom f) = h ;; (f ;; g)\n\ngoal (1 subgoal):\n 1. h = g", "have \"... = (h ;; f) ;; g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h ;; (f ;; g) = h ;; f ;; g", "using 0 z"], ["proof (prove)\nusing this:\n  h \\<approx>> f\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. h ;; (f ;; g) = h ;; f ;; g", "by (simp add: Cassoc)"], ["proof (state)\nthis:\n  h ;; (f ;; g) = h ;; f ;; g\n\ngoal (1 subgoal):\n 1. h = g", "also"], ["proof (state)\nthis:\n  h ;; (f ;; g) = h ;; f ;; g\n\ngoal (1 subgoal):\n 1. h = g", "have \"... = (id (cod f)) ;; g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h ;; f ;; g = id (cod f) ;; g", "using 2"], ["proof (prove)\nusing this:\n  h ;; f = id (cod f)\n\ngoal (1 subgoal):\n 1. h ;; f ;; g = id (cod f) ;; g", "by simp+"], ["proof (state)\nthis:\n  h ;; f ;; g = id (cod f) ;; g\n\ngoal (1 subgoal):\n 1. h = g", "also"], ["proof (state)\nthis:\n  h ;; f ;; g = id (cod f) ;; g\n\ngoal (1 subgoal):\n 1. h = g", "have \"... = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id (cod f) ;; g = g", "using mor dc"], ["proof (prove)\nusing this:\n  h \\<in> mor \\<and> g \\<in> mor\n  dom f = cod h \\<and> cod f = dom g\n\ngoal (1 subgoal):\n 1. id (cod f) ;; g = g", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  id (cod f) ;; g = g\n\ngoal (1 subgoal):\n 1. h = g", "finally"], ["proof (chain)\npicking this:\n  h = g", "show ?thesis"], ["proof (prove)\nusing this:\n  h = g\n\ngoal (1 subgoal):\n 1. h = g", "."], ["proof (state)\nthis:\n  h = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) CatIdDomCod:\n  assumes \"X \\<in> obj\"\n  shows \"dom (id X) = X\" and \"cod (id X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (id X) = X &&& cod (id X) = X", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. dom (id X) = X\n 2. cod (id X) = X", "have \"id X maps X to X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X maps X to X", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X maps X to X", "by (simp add: Simps)"], ["proof (state)\nthis:\n  id X maps X to X\n\ngoal (2 subgoals):\n 1. dom (id X) = X\n 2. cod (id X) = X", "thus \"dom (id X) = X\" and \"cod (id X) = X\""], ["proof (prove)\nusing this:\n  id X maps X to X\n\ngoal (1 subgoal):\n 1. dom (id X) = X &&& cod (id X) = X", "by auto"], ["proof (state)\nthis:\n  dom (id X) = X\n  cod (id X) = X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) CatIdCompId:\n  assumes \"X \\<in> obj\"\n  shows   \"id X ;; id X = id X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "have 0: \"id X \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X \\<in> mor", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X \\<in> mor", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  id X \\<in> mor\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "moreover"], ["proof (state)\nthis:\n  id X \\<in> mor\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "have \"cod (id X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod (id X) = X", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. cod (id X) = X", "by auto"], ["proof (state)\nthis:\n  cod (id X) = X\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "moreover"], ["proof (state)\nthis:\n  cod (id X) = X\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "have \"id X ;; id (cod (id X)) = id X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X ;; id (cod (id X)) = id X", "using 0"], ["proof (prove)\nusing this:\n  id X \\<in> mor\n\ngoal (1 subgoal):\n 1. id X ;; id (cod (id X)) = id X", "by (simp add: Simps)"], ["proof (state)\nthis:\n  id X ;; id (cod (id X)) = id X\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "ultimately"], ["proof (chain)\npicking this:\n  id X \\<in> mor\n  cod (id X) = X\n  id X ;; id (cod (id X)) = id X", "show ?thesis"], ["proof (prove)\nusing this:\n  id X \\<in> mor\n  cod (id X) = X\n  id X ;; id (cod (id X)) = id X\n\ngoal (1 subgoal):\n 1. id X ;; id X = id X", "by simp"], ["proof (state)\nthis:\n  id X ;; id X = id X\n\ngoal:\nNo subgoals!", "qed"], ["", "(*lemmas (in Category) simps2 = simps CatIdCompId Cassoc CatIdDomCod*)"], ["", "lemma (in Category) CatIdUniqR: \n  assumes iota: \"\\<iota> maps X to X\"\n  and     rid:  \"\\<forall> f . f \\<approx>> \\<iota> \\<longrightarrow> f ;; \\<iota> = f\"\n  shows \"id X = \\<iota>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X = \\<iota>", "proof(rule LeftRightInvUniq [of \"id X\" \"id X\" \\<iota> ])"], ["proof (state)\ngoal (4 subgoals):\n 1. id X \\<approx>> id X\n 2. id X \\<approx>> \\<iota>\n 3. id X ;; \\<iota> = id (dom (id X))\n 4. id X ;; id X = id (cod (id X))", "have 0: \"X \\<in> obj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> obj", "using iota"], ["proof (prove)\nusing this:\n  \\<iota> maps X to X\n\ngoal (1 subgoal):\n 1. X \\<in> obj", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  X \\<in> obj\n\ngoal (4 subgoals):\n 1. id X \\<approx>> id X\n 2. id X \\<approx>> \\<iota>\n 3. id X ;; \\<iota> = id (dom (id X))\n 4. id X ;; id X = id (cod (id X))", "hence \"id X maps X to X\""], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X maps X to X", "by (simp add: Cidm)"], ["proof (state)\nthis:\n  id X maps X to X\n\ngoal (4 subgoals):\n 1. id X \\<approx>> id X\n 2. id X \\<approx>> \\<iota>\n 3. id X ;; \\<iota> = id (dom (id X))\n 4. id X ;; id X = id (cod (id X))", "thus 1: \"id X \\<approx>> \\<iota>\""], ["proof (prove)\nusing this:\n  id X maps X to X\n\ngoal (1 subgoal):\n 1. id X \\<approx>> \\<iota>", "using iota"], ["proof (prove)\nusing this:\n  id X maps X to X\n  \\<iota> maps X to X\n\ngoal (1 subgoal):\n 1. id X \\<approx>> \\<iota>", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  id X \\<approx>> \\<iota>\n\ngoal (3 subgoals):\n 1. id X \\<approx>> id X\n 2. id X ;; \\<iota> = id (dom (id X))\n 3. id X ;; id X = id (cod (id X))", "show    \"id X \\<approx>> id X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X \\<approx>> id X", "using 0"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X \\<approx>> id X", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  id X \\<approx>> id X\n\ngoal (2 subgoals):\n 1. id X ;; \\<iota> = id (dom (id X))\n 2. id X ;; id X = id (cod (id X))", "show    \"(id X) ;; \\<iota> = (id (dom (id X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X ;; \\<iota> = id (dom (id X))", "using 0 1 rid"], ["proof (prove)\nusing this:\n  X \\<in> obj\n  id X \\<approx>> \\<iota>\n  \\<forall>f. f \\<approx>> \\<iota> \\<longrightarrow> f ;; \\<iota> = f\n\ngoal (1 subgoal):\n 1. id X ;; \\<iota> = id (dom (id X))", "by (auto simp add: Simps CompDefined_def MapsTo_def)"], ["proof (state)\nthis:\n  id X ;; \\<iota> = id (dom (id X))\n\ngoal (1 subgoal):\n 1. id X ;; id X = id (cod (id X))", "show    \"(id X) ;; (id X) = (id (cod (id X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X ;; id X = id (cod (id X))", "using 0"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X ;; id X = id (cod (id X))", "by (auto simp add: CatIdCompId CompDefined_def MapsTo_def)"], ["proof (state)\nthis:\n  id X ;; id X = id (cod (id X))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  inverse_rel :: \"('o,'m,'a) Category_scheme \\<Rightarrow> 'm \\<Rightarrow> 'm \\<Rightarrow> bool\" (\"cinv\\<index> _ _\" 60) where\n  \"inverse_rel C f g \\<equiv> (f \\<approx>>\\<^bsub>C\\<^esub> g) \\<and> (f ;;\\<^bsub>C\\<^esub> g) = (id\\<^bsub>C\\<^esub> (dom\\<^bsub>C\\<^esub> f)) \\<and> (g ;;\\<^bsub>C\\<^esub> f) = (id\\<^bsub>C\\<^esub> (cod\\<^bsub>C\\<^esub> f))\""], ["", "definition \n  isomorphism :: \"('o,'m,'a) Category_scheme \\<Rightarrow> 'm \\<Rightarrow> bool\" (\"ciso\\<index> _\" [70]) where\n  \"isomorphism C f \\<equiv> \\<exists> g . inverse_rel C f g\""], ["", "lemma (in Category) Inverse_relI: \"\\<lbrakk>f \\<approx>> g ; f ;; g = id (dom f) ; g ;; f = id (cod f)\\<rbrakk> \\<Longrightarrow> (cinv f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<approx>> g; f ;; g = id (dom f);\n     g ;; f = id (cod f)\\<rbrakk>\n    \\<Longrightarrow> cinv f g", "by (auto simp add: inverse_rel_def)"], ["", "lemma (in Category) Inverse_relE[elim]: \"\\<lbrakk>cinv f g ; \\<lbrakk>f \\<approx>> g ; f ;; g = id (dom f) ; g ;; f = id (cod f)\\<rbrakk> \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cinv f g;\n     \\<lbrakk>f \\<approx>> g; f ;; g = id (dom f);\n      g ;; f = id (cod f)\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto simp add: inverse_rel_def)"], ["", "lemma (in Category) Inverse_relSym: \n  assumes \"cinv f g\"\n  shows   \"cinv g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv g f", "proof(rule Inverse_relI)"], ["proof (state)\ngoal (3 subgoals):\n 1. g \\<approx>> f\n 2. g ;; f = id (dom g)\n 3. f ;; g = id (cod g)", "have 1: \"f \\<approx>> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>> g", "using assms"], ["proof (prove)\nusing this:\n  cinv f g\n\ngoal (1 subgoal):\n 1. f \\<approx>> g", "by auto"], ["proof (state)\nthis:\n  f \\<approx>> g\n\ngoal (3 subgoals):\n 1. g \\<approx>> f\n 2. g ;; f = id (dom g)\n 3. f ;; g = id (cod g)", "show 2: \"g \\<approx>> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<approx>> f", "proof(rule CompDefinedI)"], ["proof (state)\ngoal (3 subgoals):\n 1. g \\<in> mor\n 2. f \\<in> mor\n 3. cod g = dom f", "show \"g \\<in> mor\" and 0: \"f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> mor &&& f \\<in> mor", "using assms"], ["proof (prove)\nusing this:\n  cinv f g\n\ngoal (1 subgoal):\n 1. g \\<in> mor &&& f \\<in> mor", "by auto"], ["proof (state)\nthis:\n  g \\<in> mor\n  f \\<in> mor\n\ngoal (1 subgoal):\n 1. cod g = dom f", "have \"f ;; g maps dom f to cod g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "by (simp add: MapsToCompI)"], ["proof (state)\nthis:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. cod g = dom f", "hence \"cod g = cod (f ;; g)\""], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. cod g = cod (f ;; g)", "by auto"], ["proof (state)\nthis:\n  cod g = cod (f ;; g)\n\ngoal (1 subgoal):\n 1. cod g = dom f", "also"], ["proof (state)\nthis:\n  cod g = cod (f ;; g)\n\ngoal (1 subgoal):\n 1. cod g = dom f", "have \"... = cod (id (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod (f ;; g) = cod (id (dom f))", "using assms"], ["proof (prove)\nusing this:\n  cinv f g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = cod (id (dom f))", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  cod (f ;; g) = cod (id (dom f))\n\ngoal (1 subgoal):\n 1. cod g = dom f", "also"], ["proof (state)\nthis:\n  cod (f ;; g) = cod (id (dom f))\n\ngoal (1 subgoal):\n 1. cod g = dom f", "have \"... = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod (id (dom f)) = dom f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. cod (id (dom f)) = dom f", "have \"dom f \\<in> obj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom f \\<in> obj", "using 0"], ["proof (prove)\nusing this:\n  f \\<in> mor\n\ngoal (1 subgoal):\n 1. dom f \\<in> obj", "by (simp add: Simps)"], ["proof (state)\nthis:\n  dom f \\<in> obj\n\ngoal (1 subgoal):\n 1. cod (id (dom f)) = dom f", "hence \"id (dom f) maps (dom f) to (dom f)\""], ["proof (prove)\nusing this:\n  dom f \\<in> obj\n\ngoal (1 subgoal):\n 1. id (dom f) maps dom f to dom f", "by (simp add: Simps)"], ["proof (state)\nthis:\n  id (dom f) maps dom f to dom f\n\ngoal (1 subgoal):\n 1. cod (id (dom f)) = dom f", "thus ?thesis"], ["proof (prove)\nusing this:\n  id (dom f) maps dom f to dom f\n\ngoal (1 subgoal):\n 1. cod (id (dom f)) = dom f", "by auto"], ["proof (state)\nthis:\n  cod (id (dom f)) = dom f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cod (id (dom f)) = dom f\n\ngoal (1 subgoal):\n 1. cod g = dom f", "finally"], ["proof (chain)\npicking this:\n  cod g = dom f", "show 2: \"cod g = dom f\""], ["proof (prove)\nusing this:\n  cod g = dom f\n\ngoal (1 subgoal):\n 1. cod g = dom f", "by simp"], ["proof (state)\nthis:\n  cod g = dom f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<approx>> f\n\ngoal (2 subgoals):\n 1. g ;; f = id (dom g)\n 2. f ;; g = id (cod g)", "show \"g ;; f = id (dom g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g ;; f = id (dom g)", "using assms"], ["proof (prove)\nusing this:\n  cinv f g\n\ngoal (1 subgoal):\n 1. g ;; f = id (dom g)", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  g ;; f = id (dom g)\n\ngoal (1 subgoal):\n 1. f ;; g = id (cod g)", "show \"f ;; g = id (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g = id (cod g)", "using assms 1 2"], ["proof (prove)\nusing this:\n  cinv f g\n  f \\<approx>> g\n  g \\<approx>> f\n\ngoal (1 subgoal):\n 1. f ;; g = id (cod g)", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  f ;; g = id (cod g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) InverseUnique: \n  assumes 1: \"cinv f g\"\n  and     2: \"cinv f h\"\n  shows   \"g = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = h", "proof(rule LeftRightInvUniq [of g f h])"], ["proof (state)\ngoal (4 subgoals):\n 1. g \\<approx>> f\n 2. f \\<approx>> h\n 3. f ;; h = id (dom f)\n 4. g ;; f = id (cod f)", "have \"cinv g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv g f", "using 1 2"], ["proof (prove)\nusing this:\n  cinv f g\n  cinv f h\n\ngoal (1 subgoal):\n 1. cinv g f", "by (simp only: Inverse_relSym[of f g])"], ["proof (state)\nthis:\n  cinv g f\n\ngoal (4 subgoals):\n 1. g \\<approx>> f\n 2. f \\<approx>> h\n 3. f ;; h = id (dom f)\n 4. g ;; f = id (cod f)", "thus \"g \\<approx>> f\" and\n    \"g ;; f = id (cod f)\""], ["proof (prove)\nusing this:\n  cinv g f\n\ngoal (1 subgoal):\n 1. g \\<approx>> f &&& g ;; f = id (cod f)", "using 1"], ["proof (prove)\nusing this:\n  cinv g f\n  cinv f g\n\ngoal (1 subgoal):\n 1. g \\<approx>> f &&& g ;; f = id (cod f)", "by auto"], ["proof (state)\nthis:\n  g \\<approx>> f\n  g ;; f = id (cod f)\n\ngoal (2 subgoals):\n 1. f \\<approx>> h\n 2. f ;; h = id (dom f)", "show \"f \\<approx>> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>> h", "using 2"], ["proof (prove)\nusing this:\n  cinv f h\n\ngoal (1 subgoal):\n 1. f \\<approx>> h", "by auto"], ["proof (state)\nthis:\n  f \\<approx>> h\n\ngoal (1 subgoal):\n 1. f ;; h = id (dom f)", "show \"f ;; h = id (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; h = id (dom f)", "using 2"], ["proof (prove)\nusing this:\n  cinv f h\n\ngoal (1 subgoal):\n 1. f ;; h = id (dom f)", "by auto"], ["proof (state)\nthis:\n  f ;; h = id (dom f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) InvId: assumes \"X \\<in> obj\" shows \"(cinv (id X) (id X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv id X id X", "proof(rule Inverse_relI)"], ["proof (state)\ngoal (3 subgoals):\n 1. id X \\<approx>> id X\n 2. id X ;; id X = id (dom (id X))\n 3. id X ;; id X = id (cod (id X))", "show \"id X \\<approx>> id X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id X \\<approx>> id X", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X \\<approx>> id X", "by (simp add: Simps)"], ["proof (state)\nthis:\n  id X \\<approx>> id X\n\ngoal (2 subgoals):\n 1. id X ;; id X = id (dom (id X))\n 2. id X ;; id X = id (cod (id X))", "have \"dom (id X) = X\" and \"dom (id X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (id X) = X &&& dom (id X) = X", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. dom (id X) = X &&& dom (id X) = X", "by (simp add: CatIdDomCod)+"], ["proof (state)\nthis:\n  dom (id X) = X\n  dom (id X) = X\n\ngoal (2 subgoals):\n 1. id X ;; id X = id (dom (id X))\n 2. id X ;; id X = id (cod (id X))", "thus \"id X ;; id X = id (dom (id X))\" and \"id X ;; id X = id (cod (id X))\""], ["proof (prove)\nusing this:\n  dom (id X) = X\n  dom (id X) = X\n\ngoal (1 subgoal):\n 1. id X ;; id X = id (dom (id X)) &&& id X ;; id X = id (cod (id X))", "using assms"], ["proof (prove)\nusing this:\n  dom (id X) = X\n  dom (id X) = X\n  X \\<in> obj\n\ngoal (1 subgoal):\n 1. id X ;; id X = id (dom (id X)) &&& id X ;; id X = id (cod (id X))", "by (simp add: CatIdCompId CatIdDomCod)+"], ["proof (state)\nthis:\n  id X ;; id X = id (dom (id X))\n  id X ;; id X = id (cod (id X))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  inverse :: \"('o,'m,'a) Category_scheme \\<Rightarrow> 'm \\<Rightarrow> 'm\" (\"Cinv\\<index> _\" [70]) where\n  \"inverse C f \\<equiv> THE g . inverse_rel C f g\""], ["", "lemma (in Category) inv2Inv:\n  assumes \"cinv f g\"\n  shows   \"ciso f\" and \"Cinv f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f &&& Cinv f = g", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. ciso f\n 2. Cinv f = g", "show \"ciso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f", "using assms"], ["proof (prove)\nusing this:\n  cinv f g\n\ngoal (1 subgoal):\n 1. ciso f", "by (auto simp add: isomorphism_def)"], ["proof (state)\nthis:\n  ciso f\n\ngoal (1 subgoal):\n 1. Cinv f = g", "hence \"\\<exists>! g . cinv f g\""], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. \\<exists>!g. cinv f g", "using assms"], ["proof (prove)\nusing this:\n  ciso f\n  cinv f g\n\ngoal (1 subgoal):\n 1. \\<exists>!g. cinv f g", "by (auto simp add: InverseUnique)"], ["proof (state)\nthis:\n  \\<exists>!g. cinv f g\n\ngoal (1 subgoal):\n 1. Cinv f = g", "thus \"Cinv f = g\""], ["proof (prove)\nusing this:\n  \\<exists>!g. cinv f g\n\ngoal (1 subgoal):\n 1. Cinv f = g", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>!g. cinv f g\n  cinv f g\n\ngoal (1 subgoal):\n 1. Cinv f = g", "by (auto simp add: inverse_def)"], ["proof (state)\nthis:\n  Cinv f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) iso2Inv:\n  assumes \"ciso f\"\n  shows   \"cinv f (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv f Cinv f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. cinv f Cinv f", "have \"\\<exists>! g . cinv f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!g. cinv f g", "using assms"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. \\<exists>!g. cinv f g", "by (auto simp add: InverseUnique isomorphism_def)"], ["proof (state)\nthis:\n  \\<exists>!g. cinv f g\n\ngoal (1 subgoal):\n 1. cinv f Cinv f", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>!g. cinv f g\n\ngoal (1 subgoal):\n 1. cinv f Cinv f", "by (auto simp add:  inverse_def intro:theI')"], ["proof (state)\nthis:\n  cinv f Cinv f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) InvInv:\n  assumes \"ciso f\" \n  shows   \"ciso (Cinv f)\" and \"(Cinv (Cinv f)) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso Cinv f &&& Cinv Cinv f = f", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. ciso Cinv f\n 2. Cinv Cinv f = f", "have \"cinv f (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv f Cinv f", "using assms"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. cinv f Cinv f", "by (simp add: iso2Inv)"], ["proof (state)\nthis:\n  cinv f Cinv f\n\ngoal (2 subgoals):\n 1. ciso Cinv f\n 2. Cinv Cinv f = f", "hence \"cinv (Cinv f) f\""], ["proof (prove)\nusing this:\n  cinv f Cinv f\n\ngoal (1 subgoal):\n 1. cinv Cinv f f", "by (simp add: Inverse_relSym[of f])"], ["proof (state)\nthis:\n  cinv Cinv f f\n\ngoal (2 subgoals):\n 1. ciso Cinv f\n 2. Cinv Cinv f = f", "thus  \"ciso (Cinv f)\" and \"Cinv (Cinv f) = f\""], ["proof (prove)\nusing this:\n  cinv Cinv f f\n\ngoal (1 subgoal):\n 1. ciso Cinv f &&& Cinv Cinv f = f", "by (auto simp add: inv2Inv)"], ["proof (state)\nthis:\n  ciso Cinv f\n  Cinv Cinv f = f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) InvIsMor: \"(cinv f g) \\<Longrightarrow> (f \\<in> mor \\<and> g \\<in> mor)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv f g \\<Longrightarrow> f \\<in> mor \\<and> g \\<in> mor", "by (auto simp add: inverse_rel_def)"], ["", "lemma (in Category) IsoIsMor: \"ciso f \\<Longrightarrow> f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f \\<Longrightarrow> f \\<in> mor", "by (auto simp add: InvIsMor dest: iso2Inv)"], ["", "lemma (in Category) InvDomCod:\n  assumes \"ciso f\"\n  shows \"dom (Cinv f) = cod f\" and \"cod (Cinv f) = dom f\" and \"Cinv f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom Cinv f = cod f &&& cod Cinv f = dom f &&& Cinv f \\<in> mor", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. dom Cinv f = cod f\n 2. cod Cinv f = dom f\n 3. Cinv f \\<in> mor", "have 1: \"cinv f (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv f Cinv f", "using assms"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. cinv f Cinv f", "by (auto simp add: iso2Inv)"], ["proof (state)\nthis:\n  cinv f Cinv f\n\ngoal (3 subgoals):\n 1. dom Cinv f = cod f\n 2. cod Cinv f = dom f\n 3. Cinv f \\<in> mor", "thus \"dom (Cinv f) = cod f\""], ["proof (prove)\nusing this:\n  cinv f Cinv f\n\ngoal (1 subgoal):\n 1. dom Cinv f = cod f", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  dom Cinv f = cod f\n\ngoal (2 subgoals):\n 1. cod Cinv f = dom f\n 2. Cinv f \\<in> mor", "from 1"], ["proof (chain)\npicking this:\n  cinv f Cinv f", "have \"cinv (Cinv f) f\""], ["proof (prove)\nusing this:\n  cinv f Cinv f\n\ngoal (1 subgoal):\n 1. cinv Cinv f f", "by (auto simp add: Inverse_relSym[of f])"], ["proof (state)\nthis:\n  cinv Cinv f f\n\ngoal (2 subgoals):\n 1. cod Cinv f = dom f\n 2. Cinv f \\<in> mor", "thus  \"cod (Cinv f) = dom f\""], ["proof (prove)\nusing this:\n  cinv Cinv f f\n\ngoal (1 subgoal):\n 1. cod Cinv f = dom f", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  cod Cinv f = dom f\n\ngoal (1 subgoal):\n 1. Cinv f \\<in> mor", "show \"Cinv f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv f \\<in> mor", "using 1"], ["proof (prove)\nusing this:\n  cinv f Cinv f\n\ngoal (1 subgoal):\n 1. Cinv f \\<in> mor", "by (auto simp add: inverse_rel_def)"], ["proof (state)\nthis:\n  Cinv f \\<in> mor\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) IsoCompInv: \"ciso f \\<Longrightarrow> f \\<approx>> Cinv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f \\<Longrightarrow> f \\<approx>> Cinv f", "by (auto simp add: IsoIsMor InvDomCod)"], ["", "lemma (in Category) InvCompIso: \"ciso f \\<Longrightarrow> Cinv f \\<approx>> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f \\<Longrightarrow> Cinv f \\<approx>> f", "by (auto simp add: IsoIsMor InvDomCod)"], ["", "lemma (in Category) IsoInvId1 : \"ciso f \\<Longrightarrow> (Cinv f) ;; f = (id (cod f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f \\<Longrightarrow> Cinv f ;; f = id (cod f)", "by (auto dest: iso2Inv)"], ["", "lemma (in Category) IsoInvId2 :  \"ciso f \\<Longrightarrow> f ;; (Cinv f) = (id (dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f \\<Longrightarrow> f ;; Cinv f = id (dom f)", "by (auto dest: iso2Inv)"], ["", "lemma (in Category) IsoCompDef:\n  assumes 1: \"f \\<approx>> g\" and 2: \"ciso f\" and 3: \"ciso g\"\n  shows \"(Cinv g) \\<approx>> (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g \\<approx>> Cinv f", "proof(rule CompDefinedI)"], ["proof (state)\ngoal (3 subgoals):\n 1. Cinv g \\<in> mor\n 2. Cinv f \\<in> mor\n 3. cod Cinv g = dom Cinv f", "show \"Cinv g \\<in> mor\" and \"Cinv f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g \\<in> mor &&& Cinv f \\<in> mor", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. Cinv g \\<in> mor &&& Cinv f \\<in> mor", "by (auto simp add: InvDomCod)"], ["proof (state)\nthis:\n  Cinv g \\<in> mor\n  Cinv f \\<in> mor\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "have \"cod (Cinv g) = dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod Cinv g = dom g", "using 3"], ["proof (prove)\nusing this:\n  ciso g\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom g", "by (simp add: InvDomCod)"], ["proof (state)\nthis:\n  cod Cinv g = dom g\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "also"], ["proof (state)\nthis:\n  cod Cinv g = dom g\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "have \"... = cod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom g = cod f", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. dom g = cod f", "by auto"], ["proof (state)\nthis:\n  dom g = cod f\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "also"], ["proof (state)\nthis:\n  dom g = cod f\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "have \"... = dom (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = dom Cinv f", "using 2"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. cod f = dom Cinv f", "by (simp add: InvDomCod)"], ["proof (state)\nthis:\n  cod f = dom Cinv f\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "finally"], ["proof (chain)\npicking this:\n  cod Cinv g = dom Cinv f", "show \"cod (Cinv g) = dom (Cinv f)\""], ["proof (prove)\nusing this:\n  cod Cinv g = dom Cinv f\n\ngoal (1 subgoal):\n 1. cod Cinv g = dom Cinv f", "."], ["proof (state)\nthis:\n  cod Cinv g = dom Cinv f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in Category) IsoCompose: \n  assumes 1: \"f \\<approx>> g\" and 2: \"ciso f\" and 3: \"ciso g\"\n  shows \"ciso (f ;; g)\" and \"Cinv (f ;; g) = (Cinv g) ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ciso f ;; g &&& Cinv f ;; g = Cinv g ;; Cinv f", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "have  a: \"(Cinv g) \\<approx>> (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g \\<approx>> Cinv f", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. Cinv g \\<approx>> Cinv f", "by (simp add: IsoCompDef)"], ["proof (state)\nthis:\n  Cinv g \\<approx>> Cinv f\n\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "hence b: \"(Cinv g) ;; (Cinv f) maps (dom (Cinv g)) to (cod (Cinv f))\""], ["proof (prove)\nusing this:\n  Cinv g \\<approx>> Cinv f\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f maps dom Cinv g to cod Cinv f", "by (simp add: MapsToCompI)"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f maps dom Cinv g to cod Cinv f\n\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "hence c: \"(Cinv g) ;; (Cinv f) maps (cod g) to (dom f)\""], ["proof (prove)\nusing this:\n  Cinv g ;; Cinv f maps dom Cinv g to cod Cinv f\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f maps cod g to dom f", "using 2 3"], ["proof (prove)\nusing this:\n  Cinv g ;; Cinv f maps dom Cinv g to cod Cinv f\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f maps cod g to dom f", "by (simp add: InvDomCod)"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f maps cod g to dom f\n\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "have  d: \"f ;; g maps (dom f) to (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f ;; g maps dom f to cod g", "by (simp add: Simps)"], ["proof (state)\nthis:\n  f ;; g maps dom f to cod g\n\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "have \"cinv (f ;; g) ((Cinv g) ;; (Cinv f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cinv f ;; g Cinv g ;; Cinv f", "proof(auto simp add: inverse_rel_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. f ;; g \\<approx>> Cinv g ;; Cinv f\n 2. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))\n 3. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "show \"f ;; g \\<approx>> (Cinv g) ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g \\<approx>> Cinv g ;; Cinv f", "proof(rule CompDefinedI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f ;; g \\<in> mor\n 2. Cinv g ;; Cinv f \\<in> mor\n 3. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "show \"f ;; g \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g \\<in> mor", "using d"], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. f ;; g \\<in> mor", "by auto"], ["proof (state)\nthis:\n  f ;; g \\<in> mor\n\ngoal (2 subgoals):\n 1. Cinv g ;; Cinv f \\<in> mor\n 2. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "show \"(Cinv g) ;; (Cinv f) \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f \\<in> mor", "using c"], ["proof (prove)\nusing this:\n  Cinv g ;; Cinv f maps cod g to dom f\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f \\<in> mor", "by auto"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f \\<in> mor\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "have \"cod (f ;; g) = cod g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod (f ;; g) = cod g", "using d"], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = cod g", "by auto"], ["proof (state)\nthis:\n  cod (f ;; g) = cod g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "also"], ["proof (state)\nthis:\n  cod (f ;; g) = cod g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "have \"... = dom (Cinv g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod g = dom Cinv g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. cod g = dom Cinv g", "by (simp add: InvDomCod)"], ["proof (state)\nthis:\n  cod g = dom Cinv g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "also"], ["proof (state)\nthis:\n  cod g = dom Cinv g\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "have \"... = dom ((Cinv g) ;; (Cinv f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom Cinv g = dom (Cinv g ;; Cinv f)", "using b"], ["proof (prove)\nusing this:\n  Cinv g ;; Cinv f maps dom Cinv g to cod Cinv f\n\ngoal (1 subgoal):\n 1. dom Cinv g = dom (Cinv g ;; Cinv f)", "by auto"], ["proof (state)\nthis:\n  dom Cinv g = dom (Cinv g ;; Cinv f)\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "finally"], ["proof (chain)\npicking this:\n  cod (f ;; g) = dom (Cinv g ;; Cinv f)", "show \"cod (f ;; g) = dom ((Cinv g) ;; (Cinv f))\""], ["proof (prove)\nusing this:\n  cod (f ;; g) = dom (Cinv g ;; Cinv f)\n\ngoal (1 subgoal):\n 1. cod (f ;; g) = dom (Cinv g ;; Cinv f)", "."], ["proof (state)\nthis:\n  cod (f ;; g) = dom (Cinv g ;; Cinv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ;; g \\<approx>> Cinv g ;; Cinv f\n\ngoal (2 subgoals):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))\n 2. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "show \"f ;; g ;; ((Cinv g) ;; (Cinv f)) = id (dom (f ;; g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have e: \"g \\<approx>> (Cinv g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<approx>> Cinv g", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. g \\<approx>> Cinv g", "by (simp add: IsoCompInv)"], ["proof (state)\nthis:\n  g \\<approx>> Cinv g\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have f: \"f \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> mor", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f \\<in> mor", "by auto"], ["proof (state)\nthis:\n  f \\<in> mor\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"(f ;; g) ;; ((Cinv g) ;; (Cinv f)) = (f ;; (g ;; (Cinv g))) ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = f ;; (g ;; Cinv g) ;; Cinv f", "using 1 e a"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  g \\<approx>> Cinv g\n  Cinv g \\<approx>> Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = f ;; (g ;; Cinv g) ;; Cinv f", "by (auto simp add: Cassoc CompDefComp)"], ["proof (state)\nthis:\n  f ;; g ;; (Cinv g ;; Cinv f) = f ;; (g ;; Cinv g) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "also"], ["proof (state)\nthis:\n  f ;; g ;; (Cinv g ;; Cinv f) = f ;; (g ;; Cinv g) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"... = f ;; (id (dom g)) ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; (g ;; Cinv g) ;; Cinv f = f ;; id (dom g) ;; Cinv f", "using 3"], ["proof (prove)\nusing this:\n  ciso g\n\ngoal (1 subgoal):\n 1. f ;; (g ;; Cinv g) ;; Cinv f = f ;; id (dom g) ;; Cinv f", "by (simp add: IsoInvId2)"], ["proof (state)\nthis:\n  f ;; (g ;; Cinv g) ;; Cinv f = f ;; id (dom g) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "also"], ["proof (state)\nthis:\n  f ;; (g ;; Cinv g) ;; Cinv f = f ;; id (dom g) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"... = f ;; id (cod f) ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; id (dom g) ;; Cinv f = f ;; id (cod f) ;; Cinv f", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. f ;; id (dom g) ;; Cinv f = f ;; id (cod f) ;; Cinv f", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  f ;; id (dom g) ;; Cinv f = f ;; id (cod f) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "also"], ["proof (state)\nthis:\n  f ;; id (dom g) ;; Cinv f = f ;; id (cod f) ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"... = f ;; (Cinv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; id (cod f) ;; Cinv f = f ;; Cinv f", "using f"], ["proof (prove)\nusing this:\n  f \\<in> mor\n\ngoal (1 subgoal):\n 1. f ;; id (cod f) ;; Cinv f = f ;; Cinv f", "by (auto simp add: Cidr)"], ["proof (state)\nthis:\n  f ;; id (cod f) ;; Cinv f = f ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "also"], ["proof (state)\nthis:\n  f ;; id (cod f) ;; Cinv f = f ;; Cinv f\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"... = id (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ;; Cinv f = id (dom f)", "using 2"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. f ;; Cinv f = id (dom f)", "by (simp add: IsoInvId2)"], ["proof (state)\nthis:\n  f ;; Cinv f = id (dom f)\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "also"], ["proof (state)\nthis:\n  f ;; Cinv f = id (dom f)\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "have \"... = id (dom (f ;; g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id (dom f) = id (dom (f ;; g))", "using d"], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. id (dom f) = id (dom (f ;; g))", "by auto"], ["proof (state)\nthis:\n  id (dom f) = id (dom (f ;; g))\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "finally"], ["proof (chain)\npicking this:\n  f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "show ?thesis"], ["proof (prove)\nusing this:\n  f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))\n\ngoal (1 subgoal):\n 1. f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))", "by simp"], ["proof (state)\nthis:\n  f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ;; g ;; (Cinv g ;; Cinv f) = id (dom (f ;; g))\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "show \"((Cinv g) ;; (Cinv f)) ;; (f ;; g) = id (cod (f ;; g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have e: \"(Cinv f) \\<approx>> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv f \\<approx>> f", "using assms"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  ciso f\n  ciso g\n\ngoal (1 subgoal):\n 1. Cinv f \\<approx>> f", "by (simp add: InvCompIso)"], ["proof (state)\nthis:\n  Cinv f \\<approx>> f\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have f: \"g \\<in> mor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> mor", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. g \\<in> mor", "by auto"], ["proof (state)\nthis:\n  g \\<in> mor\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"((Cinv g) ;; (Cinv f)) ;; (f ;; g) = (Cinv g) ;; (((Cinv f) ;; f) ;; g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = Cinv g ;; (Cinv f ;; f ;; g)", "using 1 e a"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n  Cinv f \\<approx>> f\n  Cinv g \\<approx>> Cinv f\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = Cinv g ;; (Cinv f ;; f ;; g)", "by (auto simp add: Cassoc CompDefComp)"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f ;; (f ;; g) = Cinv g ;; (Cinv f ;; f ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "also"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f ;; (f ;; g) = Cinv g ;; (Cinv f ;; f ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"... = (Cinv g) ;; ((id (cod f)) ;; g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; (Cinv f ;; f ;; g) = Cinv g ;; (id (cod f) ;; g)", "using 2"], ["proof (prove)\nusing this:\n  ciso f\n\ngoal (1 subgoal):\n 1. Cinv g ;; (Cinv f ;; f ;; g) = Cinv g ;; (id (cod f) ;; g)", "by (simp add: IsoInvId1)"], ["proof (state)\nthis:\n  Cinv g ;; (Cinv f ;; f ;; g) = Cinv g ;; (id (cod f) ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "also"], ["proof (state)\nthis:\n  Cinv g ;; (Cinv f ;; f ;; g) = Cinv g ;; (id (cod f) ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"... = (Cinv g) ;; ((id (dom g)) ;; g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; (id (cod f) ;; g) = Cinv g ;; (id (dom g) ;; g)", "using 1"], ["proof (prove)\nusing this:\n  f \\<approx>> g\n\ngoal (1 subgoal):\n 1. Cinv g ;; (id (cod f) ;; g) = Cinv g ;; (id (dom g) ;; g)", "by (auto simp add: Simps)"], ["proof (state)\nthis:\n  Cinv g ;; (id (cod f) ;; g) = Cinv g ;; (id (dom g) ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "also"], ["proof (state)\nthis:\n  Cinv g ;; (id (cod f) ;; g) = Cinv g ;; (id (dom g) ;; g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"... = (Cinv g) ;; g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; (id (dom g) ;; g) = Cinv g ;; g", "using f"], ["proof (prove)\nusing this:\n  g \\<in> mor\n\ngoal (1 subgoal):\n 1. Cinv g ;; (id (dom g) ;; g) = Cinv g ;; g", "by (auto simp add: Cidl)"], ["proof (state)\nthis:\n  Cinv g ;; (id (dom g) ;; g) = Cinv g ;; g\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "also"], ["proof (state)\nthis:\n  Cinv g ;; (id (dom g) ;; g) = Cinv g ;; g\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"... = id (cod g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cinv g ;; g = id (cod g)", "using 3"], ["proof (prove)\nusing this:\n  ciso g\n\ngoal (1 subgoal):\n 1. Cinv g ;; g = id (cod g)", "by (simp add: IsoInvId1)"], ["proof (state)\nthis:\n  Cinv g ;; g = id (cod g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "also"], ["proof (state)\nthis:\n  Cinv g ;; g = id (cod g)\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "have \"... = id (cod (f ;; g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id (cod g) = id (cod (f ;; g))", "using d"], ["proof (prove)\nusing this:\n  f ;; g maps dom f to cod g\n\ngoal (1 subgoal):\n 1. id (cod g) = id (cod (f ;; g))", "by auto"], ["proof (state)\nthis:\n  id (cod g) = id (cod (f ;; g))\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "finally"], ["proof (chain)\npicking this:\n  Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "show ?thesis"], ["proof (prove)\nusing this:\n  Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))\n\ngoal (1 subgoal):\n 1. Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))", "by simp"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cinv g ;; Cinv f ;; (f ;; g) = id (cod (f ;; g))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cinv f ;; g Cinv g ;; Cinv f\n\ngoal (2 subgoals):\n 1. ciso f ;; g\n 2. Cinv f ;; g = Cinv g ;; Cinv f", "thus \"ciso (f ;; g)\" and \"Cinv (f ;; g) = (Cinv g) ;; (Cinv f)\""], ["proof (prove)\nusing this:\n  cinv f ;; g Cinv g ;; Cinv f\n\ngoal (1 subgoal):\n 1. ciso f ;; g &&& Cinv f ;; g = Cinv g ;; Cinv f", "by (auto simp add: inv2Inv)"], ["proof (state)\nthis:\n  ciso f ;; g\n  Cinv f ;; g = Cinv g ;; Cinv f\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"ObjIso C A B \\<equiv> \\<exists> k . (k maps\\<^bsub>C\\<^esub> A to B) \\<and> ciso\\<^bsub>C \\<^esub>k\""], ["", "definition \n  UnitCategory :: \"(unit, unit) Category\" where\n  \"UnitCategory = MakeCat \\<lparr>\n      Obj = {()} , \n      Mor = {()} , \n      Dom = (\\<lambda>f.()) , \n      Cod = (\\<lambda>f.()) , \n      Id = (\\<lambda>f.()) , \n      Comp = (\\<lambda>f g. ())\n  \\<rparr>\""], ["", "lemma [simp]: \"Category(UnitCategory)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Category UnitCategory", "apply (simp add: UnitCategory_def, rule MakeCat)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Category_axioms\n     \\<lparr>Obj = {()}, Mor = {()}, Dom = \\<lambda>f. (),\n        Cod = \\<lambda>f. (), Id = \\<lambda>f. (),\n        Comp = \\<lambda>f g. ()\\<rparr>", "by (unfold_locales, auto simp add: UnitCategory_def)"], ["", "definition \n  OppositeCategory :: \"('o,'m,'a) Category_scheme \\<Rightarrow> ('o,'m,'a) Category_scheme\" (\"Op _\" [65] 65) where\n  \"OppositeCategory C \\<equiv> \\<lparr>\n      Obj = Obj C , \n      Mor = Mor C , \n      Dom = Cod C , \n      Cod = Dom C , \n      Id  = Id C , \n      Comp = (\\<lambda>f g. g ;;\\<^bsub>C\\<^esub> f), \n      \\<dots> = Category.more C\n  \\<rparr>\""], ["", "lemma OpCatOpCat: \"Op (Op C) = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Op Op C = C", "by (simp add: OppositeCategory_def)"], ["", "lemma OpCatCatAx: \"Category_axioms C \\<Longrightarrow> Category_axioms (Op C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Category_axioms C \\<Longrightarrow> Category_axioms (Op C)", "by (simp add: OppositeCategory_def Category_axioms_def MapsTo_def CompDefined_def)"], ["", "lemma OpCatCatExt: \"ExtCategory C \\<Longrightarrow> ExtCategory (Op C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ExtCategory C \\<Longrightarrow> ExtCategory (Op C)", "by (auto simp add: OppositeCategory_def ExtCategory_def MapsTo_def CompDefined_def extensional_def)"], ["", "lemma OpCatCat: \"Category C \\<Longrightarrow> Category (Op C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Category C \\<Longrightarrow> Category (Op C)", "by (intro_locales, simp_all add: Category_def OpCatCatAx OpCatCatExt)"], ["", "lemma MapsToOp: \"f maps\\<^bsub>C \\<^esub>X to Y \\<Longrightarrow> f maps\\<^bsub>Op C \\<^esub>Y to X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f maps\\<^bsub>C\\<^esub> X to Y \\<Longrightarrow>\n    f maps\\<^bsub>Op C\\<^esub> Y to X", "by (simp add: MapsTo_def OppositeCategory_def)"], ["", "lemma MapsToOpOp: \"f maps\\<^bsub>Op C \\<^esub>X to Y \\<Longrightarrow> f maps\\<^bsub>C \\<^esub>Y to X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f maps\\<^bsub>Op C\\<^esub> X to Y \\<Longrightarrow>\n    f maps\\<^bsub>C\\<^esub> Y to X", "by (simp add: MapsTo_def OppositeCategory_def)"], ["", "lemma CompDefOp: \"f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow> g \\<approx>>\\<^bsub>Op C\\<^esub> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<approx>>\\<^bsub>C\\<^esub> g \\<Longrightarrow>\n    g \\<approx>>\\<^bsub>Op C\\<^esub> f", "by (simp add: CompDefined_def OppositeCategory_def)"], ["", "end"]]}