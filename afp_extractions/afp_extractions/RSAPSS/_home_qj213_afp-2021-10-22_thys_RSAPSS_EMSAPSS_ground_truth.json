{"file_name": "/home/qj213/afp-2021-10-22/thys/RSAPSS/EMSAPSS.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RSAPSS", "problem_names": ["lemma roundup_positiv: \"0 < emBits \\<Longrightarrow> 0 < roundup emBits 160\"", "lemma roundup_ge_emBits:\" 0 < emBits \\<Longrightarrow> 0 < x \\<Longrightarrow> emBits \\<le> (roundup emBits x) * x\"", "lemma roundup_ge_0: \"0 < emBits \\<Longrightarrow> 0 < x \\<Longrightarrow> 0 \\<le> roundup emBits x * x - emBits\"", "lemma roundup_le_7: \"0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le>  7\"", "lemma roundup_nat_ge_8_help:\n  \"length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\"", "lemma roundup_nat_ge_8:\n  \"length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\"", "lemma roundup_le_ub:\n  \"\\<lbrakk> 176 + sLen \\<le> emBits; emBits \\<le> 2^32 * 160\\<rbrakk> \\<Longrightarrow> (roundup emBits 8) * 8 - 168 \\<le> 2^32 * 160\"", "lemma modify_roundup_ge1: \"\\<lbrakk>8 \\<le> roundup emBits 8 * 8 - 168\\<rbrakk> \\<Longrightarrow> 176 \\<le>  roundup emBits 8 * 8\"", "lemma modify_roundup_ge2: \"\\<lbrakk> 176 \\<le> roundup emBits 8 * 8\\<rbrakk> \\<Longrightarrow> 21 < roundup emBits 8\"", "lemma roundup_help1: \"\\<lbrakk> 0 < roundup l 160\\<rbrakk> \\<Longrightarrow> (roundup l 160 - 1) + 1 = (roundup l 160)\"", "lemma roundup_help1_new: \"\\<lbrakk> 0 < l\\<rbrakk> \\<Longrightarrow> (roundup l 160 - 1) + 1 = (roundup l 160)\"", "lemma roundup_help2: \"\\<lbrakk>176 + sLen \\<le> emBits\\<rbrakk> \\<Longrightarrow> roundup emBits 8 * 8 - emBits <=  roundup emBits 8 * 8 - 160 - sLen - 16\"", "lemma bv_prepend_equal: \"bv_prepend (Suc n) b l = b#bv_prepend n b l\"", "lemma length_bv_prepend: \"length (bv_prepend n b l) = n+length l\"", "lemma length_bv_prepend_drop: \"a <= length xs \\<longrightarrow> length (bv_prepend a b (drop a xs)) = length xs\"", "lemma take_bv_prepend: \"take n (bv_prepend n b x) = bv_prepend n b []\"", "lemma take_bv_prepend2: \"take n (bv_prepend n b xs@ys@zs) = bv_prepend n b []\"", "lemma bv_prepend_append: \"bv_prepend a b x = bv_prepend a b [] @ x\"", "lemma bv_prepend_append2:\n  \"x < y \\<Longrightarrow> bv_prepend y b xs = (bv_prepend x b [])@(bv_prepend (y-x) b [])@xs\"", "lemma drop_bv_prepend_help2: \"\\<lbrakk>x < y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\"", "lemma drop_bv_prepend_help3: \"\\<lbrakk>x = y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\"", "lemma drop_bv_prepend_help4: \"\\<lbrakk>x \\<le> y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\"", "lemma bv_prepend_add: \"bv_prepend x b [] @ bv_prepend y b [] = bv_prepend (x + y) b []\"", "lemma bv_prepend_drop: \"x \\<le> y \\<longrightarrow> bv_prepend x b (drop x (bv_prepend y b [])) = bv_prepend y b []\"", "lemma bv_prepend_split: \"bv_prepend x b (left @ right) = bv_prepend x b left @ right\"", "lemma length_generate_DB: \"length (generate_DB PS) = length PS + 8 + sLen\"", "lemma length_generate_PS: \"length (generate_PS emBits 160) = (roundup emBits 8)*8 - sLen - 160 - 16\"", "lemma length_bvxor: \"length a = length b \\<Longrightarrow> length (bvxor a b) = length a\"", "lemma length_MGF2: \"length (MGF2 Z m) = Suc m * length (sha1 (Z @ nat_to_bv_length m 32))\"", "lemma length_MGF1: \"l \\<le> (Suc n) * 160 \\<Longrightarrow> length (MGF1 Z n l) = l\"", "lemma length_MGF: \"0 < l \\<Longrightarrow> l \\<le>  2^32 * length (sha1 x) \\<Longrightarrow> length (MGF x l) = l\"", "lemma solve_length_generate_DB:\n  \"\\<lbrakk> 0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n  \\<Longrightarrow> length (generate_DB (generate_PS emBits (length (sha1 x)) )) = (roundup emBits 8) * 8 - 168\"", "lemma length_maskedDB_zero:\n  \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length maskedDB\\<rbrakk>\n  \\<Longrightarrow> length (maskedDB_zero maskedDB emBits) = length maskedDB\"", "lemma take_equal_bv_prepend:\n  \"\\<lbrakk> 176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n  \\<Longrightarrow> take (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16) (maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits) =\n    bv_prepend (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16) \\<zero> []\"", "lemma lastbits_BC: \"BC = show_rightmost_bits (xs @ ys @ BC) 8\"", "lemma equal_zero:\n  \"176 + sLen \\<le> emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> roundup emBits 8 * 8 - (176 + sLen)\n  \\<Longrightarrow> 0 = roundup emBits 8 * 8 - emBits - (roundup emBits 8 * 8 - (176 + sLen))\"", "lemma get_salt: \"\\<lbrakk> 176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk> \\<Longrightarrow> (generate_salt (maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits)) = salt\"", "lemma generate_maskedDB_elim: \"\\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x; ( roundup emBits 8) * 8 - (length (sha1 M)) - 8 = length (maskedDB_zero x emBits)\\<rbrakk> \\<Longrightarrow> generate_maskedDB (maskedDB_zero x emBits @ y @ z) emBits (length(sha1 M)) = maskedDB_zero x emBits\"", "lemma generate_H_elim: \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length x; length (maskedDB_zero x emBits) =  (roundup emBits 8) * 8 - 168; length y = 160\\<rbrakk> \\<Longrightarrow> generate_H (maskedDB_zero x emBits @ y @ z) emBits 160 = y\"", "lemma length_bv_prepend_drop_special: \"[|roundup emBits 8 * 8 - emBits <= roundup emBits 8 * 8 - (176 + sLen); length (generate_PS emBits 160) = roundup emBits 8 * 8 - (176 + sLen)|] ==> length ( bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> (drop (roundup emBits 8 * 8 - emBits) (generate_PS emBits 160))) = length (generate_PS emBits 160)\"", "lemma x01_elim: \"\\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk> \\<Longrightarrow> take 8 (drop (roundup emBits 8 * 8 - (length (sha1 M) + sLen + 16))(maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits)) = [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<one>]\"", "lemma drop_bv_mapzip:\n  assumes \"n <= length x\" \"length x = length y\"\n  shows \"drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)\"", "lemma [simp]:\n  assumes \"length a = length b\"\n  shows \"bvxor (bvxor a b) b = a\"", "lemma bvxorxor_elim_help:\n  assumes \"x <= length a\" and \"length a = length b\"\n  shows \"bv_prepend x \\<zero> (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)\"", "lemma bvxorxor_elim: \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length a; length a = length b\\<rbrakk> \\<Longrightarrow> (maskedDB_zero (bvxor (maskedDB_zero (bvxor a b) emBits)b) emBits) = bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> (drop (roundup emBits 8 * 8 - emBits) a)\"", "lemma verify: \"\\<lbrakk>(emsapss_encode M emBits) \\<noteq> []; EM=(emsapss_encode M emBits)\\<rbrakk> \\<Longrightarrow> emsapss_decode M EM emBits = True\""], "translations": [["", "lemma roundup_positiv: \"0 < emBits \\<Longrightarrow> 0 < roundup emBits 160\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < emBits \\<Longrightarrow> 0 < roundup emBits 160", "by (auto simp add: roundup)"], ["", "lemma roundup_ge_emBits:\" 0 < emBits \\<Longrightarrow> 0 < x \\<Longrightarrow> emBits \\<le> (roundup emBits x) * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> roundup emBits x * x", "apply (simp add: roundup mult.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x\\<rbrakk>\n    \\<Longrightarrow> (emBits mod x = 0 \\<longrightarrow>\n                       emBits \\<le> x * (emBits div x)) \\<and>\n                      (0 < emBits mod x \\<longrightarrow>\n                       emBits \\<le> x + x * (emBits div x))", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < emBits; 0 < x; x dvd emBits\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x * (emBits div x)\n 2. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x + x * (emBits div x)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x + x * (emBits div x)", "apply (simp add: add.commute [of x \"x*(emBits div x)\" ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x * (emBits div x) + x", "apply (insert mult_div_mod_eq [of x emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x;\n     x * (emBits div x) + emBits mod x = emBits\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x * (emBits div x) + x", "apply (subgoal_tac \"emBits mod x < x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x;\n     x * (emBits div x) + emBits mod x = emBits; emBits mod x < x\\<rbrakk>\n    \\<Longrightarrow> emBits \\<le> x * (emBits div x) + x\n 2. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x;\n     x * (emBits div x) + emBits mod x = emBits\\<rbrakk>\n    \\<Longrightarrow> emBits mod x < x", "apply (arith)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x; 0 < emBits mod x;\n     x * (emBits div x) + emBits mod x = emBits\\<rbrakk>\n    \\<Longrightarrow> emBits mod x < x", "apply (simp only: mod_less_divisor)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma roundup_ge_0: \"0 < emBits \\<Longrightarrow> 0 < x \\<Longrightarrow> 0 \\<le> roundup emBits x * x - emBits\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; 0 < x\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> roundup emBits x * x - emBits", "by (simp add: roundup)"], ["", "lemma roundup_le_7: \"0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le>  7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7", "by (auto simp add: roundup) arith"], ["", "lemma roundup_nat_ge_8_help:\n  \"length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n    8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)", "apply (insert roundup_ge_emBits [of emBits 8])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length (sha1 M) + sLen + 16 \\<le> emBits;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> emBits \\<le> roundup emBits 8 * 8\\<rbrakk>\n    \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)", "apply (simp add: roundup sha1len sLen_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma roundup_nat_ge_8:\n  \"length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n    8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)", "apply (insert roundup_nat_ge_8_help [of M emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length (sha1 M) + sLen + 16 \\<le> emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> 8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma roundup_le_ub:\n  \"\\<lbrakk> 176 + sLen \\<le> emBits; emBits \\<le> 2^32 * 160\\<rbrakk> \\<Longrightarrow> (roundup emBits 8) * 8 - 168 \\<le> 2^32 * 160\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 2 ^ 32 * 160\\<rbrakk>\n    \\<Longrightarrow> roundup emBits 8 * 8 - 168 \\<le> 2 ^ 32 * 160", "apply (simp add: roundup)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 687194767360\\<rbrakk>\n    \\<Longrightarrow> (emBits mod 8 = 0 \\<longrightarrow>\n                       emBits div 8 * 8 - 168 \\<le> 687194767360) \\<and>\n                      (0 < emBits mod 8 \\<longrightarrow>\n                       emBits div 8 * 8 - 160 \\<le> 687194767360)", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 687194767360;\n     8 dvd emBits\\<rbrakk>\n    \\<Longrightarrow> emBits div 8 * 8 - 168 \\<le> 687194767360\n 2. \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 687194767360;\n     0 < emBits mod 8\\<rbrakk>\n    \\<Longrightarrow> emBits div 8 * 8 - 160 \\<le> 687194767360", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 687194767360;\n     0 < emBits mod 8\\<rbrakk>\n    \\<Longrightarrow> emBits div 8 * 8 - 160 \\<le> 687194767360", "apply (arith)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma modify_roundup_ge1: \"\\<lbrakk>8 \\<le> roundup emBits 8 * 8 - 168\\<rbrakk> \\<Longrightarrow> 176 \\<le>  roundup emBits 8 * 8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 8 \\<le> roundup emBits 8 * 8 - 168 \\<Longrightarrow>\n    176 \\<le> roundup emBits 8 * 8", "by arith"], ["", "lemma modify_roundup_ge2: \"\\<lbrakk> 176 \\<le> roundup emBits 8 * 8\\<rbrakk> \\<Longrightarrow> 21 < roundup emBits 8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 176 \\<le> roundup emBits 8 * 8 \\<Longrightarrow> 21 < roundup emBits 8", "by simp"], ["", "lemma roundup_help1: \"\\<lbrakk> 0 < roundup l 160\\<rbrakk> \\<Longrightarrow> (roundup l 160 - 1) + 1 = (roundup l 160)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < roundup l 160 \\<Longrightarrow>\n    roundup l 160 - 1 + 1 = roundup l 160", "by arith"], ["", "lemma roundup_help1_new: \"\\<lbrakk> 0 < l\\<rbrakk> \\<Longrightarrow> (roundup l 160 - 1) + 1 = (roundup l 160)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < l \\<Longrightarrow> roundup l 160 - 1 + 1 = roundup l 160", "apply (drule roundup_positiv [of l])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < roundup l 160 \\<Longrightarrow>\n    roundup l 160 - 1 + 1 = roundup l 160", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma roundup_help2: \"\\<lbrakk>176 + sLen \\<le> emBits\\<rbrakk> \\<Longrightarrow> roundup emBits 8 * 8 - emBits <=  roundup emBits 8 * 8 - 160 - sLen - 16\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 176 + sLen \\<le> emBits \\<Longrightarrow>\n    roundup emBits 8 * 8 - emBits\n    \\<le> roundup emBits 8 * 8 - 160 - sLen - 16", "by (simp add: sLen_def)"], ["", "lemma bv_prepend_equal: \"bv_prepend (Suc n) b l = b#bv_prepend n b l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_prepend (Suc n) b l = b # bv_prepend n b l", "by (simp add: bv_prepend)"], ["", "lemma length_bv_prepend: \"length (bv_prepend n b l) = n+length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (bv_prepend n b l) = n + length l", "by (induct n) (simp_all add: bv_prepend)"], ["", "lemma length_bv_prepend_drop: \"a <= length xs \\<longrightarrow> length (bv_prepend a b (drop a xs)) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> length xs \\<longrightarrow>\n    length (bv_prepend a b (drop a xs)) = length xs", "by (simp add:length_bv_prepend)"], ["", "lemma take_bv_prepend: \"take n (bv_prepend n b x) = bv_prepend n b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n (bv_prepend n b x) = bv_prepend n b []", "by (induct n) (simp add: bv_prepend)+"], ["", "lemma take_bv_prepend2: \"take n (bv_prepend n b xs@ys@zs) = bv_prepend n b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n (bv_prepend n b xs @ ys @ zs) = bv_prepend n b []", "by (induct n) (simp add: bv_prepend)+"], ["", "lemma bv_prepend_append: \"bv_prepend a b x = bv_prepend a b [] @ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_prepend a b x = bv_prepend a b [] @ x", "by (induct a) (simp add: bv_prepend, simp add: bv_prepend_equal)"], ["", "lemma bv_prepend_append2:\n  \"x < y \\<Longrightarrow> bv_prepend y b xs = (bv_prepend x b [])@(bv_prepend (y-x) b [])@xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow>\n    bv_prepend y b xs = bv_prepend x b [] @ bv_prepend (y - x) b [] @ xs", "by (simp add: bv_prepend replicate_add [symmetric])"], ["", "lemma drop_bv_prepend_help2: \"\\<lbrakk>x < y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow>\n    drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "apply (insert bv_prepend_append2 [of \"x\" \"y\" b \"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y;\n     x < y \\<Longrightarrow>\n     bv_prepend y b [] =\n     bv_prepend x b [] @ bv_prepend (y - x) b [] @ []\\<rbrakk>\n    \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "by (simp add: length_bv_prepend)"], ["", "lemma drop_bv_prepend_help3: \"\\<lbrakk>x = y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow>\n    drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "apply (insert length_bv_prepend [of y b \"[]\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; length (bv_prepend y b []) = y + length []\\<rbrakk>\n    \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "by (simp add: bv_prepend)"], ["", "lemma drop_bv_prepend_help4: \"\\<lbrakk>x \\<le> y\\<rbrakk> \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y-x) b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow>\n    drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "apply (insert drop_bv_prepend_help2 [of x y b] drop_bv_prepend_help3 [of x y b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y;\n     x < y \\<Longrightarrow>\n     drop x (bv_prepend y b []) = bv_prepend (y - x) b [];\n     x = y \\<Longrightarrow>\n     drop x (bv_prepend y b []) = bv_prepend (y - x) b []\\<rbrakk>\n    \\<Longrightarrow> drop x (bv_prepend y b []) = bv_prepend (y - x) b []", "by (arith)"], ["", "lemma bv_prepend_add: \"bv_prepend x b [] @ bv_prepend y b [] = bv_prepend (x + y) b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_prepend x b [] @ bv_prepend y b [] = bv_prepend (x + y) b []", "by (induct x) (simp add: bv_prepend)+"], ["", "lemma bv_prepend_drop: \"x \\<le> y \\<longrightarrow> bv_prepend x b (drop x (bv_prepend y b [])) = bv_prepend y b []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<longrightarrow>\n    bv_prepend x b (drop x (bv_prepend y b [])) = bv_prepend y b []", "apply (simp add: drop_bv_prepend_help4 [of x y b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<longrightarrow>\n    bv_prepend x b (bv_prepend (y - x) b []) = bv_prepend y b []", "by (simp add: bv_prepend_append [of \"x\" b \"(bv_prepend (y - x) b [])\"] bv_prepend_add)"], ["", "lemma bv_prepend_split: \"bv_prepend x b (left @ right) = bv_prepend x b left @ right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_prepend x b (left @ right) = bv_prepend x b left @ right", "by (induct x) (simp add: bv_prepend)+"], ["", "lemma length_generate_DB: \"length (generate_DB PS) = length PS + 8 + sLen\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (generate_DB PS) = length PS + 8 + sLen", "by (simp add: generate_DB_def sLen_def)"], ["", "lemma length_generate_PS: \"length (generate_PS emBits 160) = (roundup emBits 8)*8 - sLen - 160 - 16\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (generate_PS emBits 160) = roundup emBits 8 * 8 - sLen - 160 - 16", "by (simp add: generate_PS_def length_bv_prepend)"], ["", "lemma length_bvxor: \"length a = length b \\<Longrightarrow> length (bvxor a b) = length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a = length b \\<Longrightarrow> length (bvxor a b) = length a", "by (simp add: bvxor)"], ["", "lemma length_MGF2: \"length (MGF2 Z m) = Suc m * length (sha1 (Z @ nat_to_bv_length m 32))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (MGF2 Z m) = Suc m * length (sha1 (Z @ nat_to_bv_length m 32))", "by (induct m) (simp+, simp add: sha1len)"], ["", "lemma length_MGF1: \"l \\<le> (Suc n) * 160 \\<Longrightarrow> length (MGF1 Z n l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> Suc n * 160 \\<Longrightarrow> length (MGF1 Z n l) = l", "by (simp add: MGF1_def length_MGF2 sha1len)"], ["", "lemma length_MGF: \"0 < l \\<Longrightarrow> l \\<le>  2^32 * length (sha1 x) \\<Longrightarrow> length (MGF x l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 2 ^ 32 * length (sha1 x)\\<rbrakk>\n    \\<Longrightarrow> length (MGF x l) = l", "apply (simp add: MGF_def sha1len)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 687194767360\\<rbrakk>\n    \\<Longrightarrow> length (MGF1 x (roundup l 160 - Suc 0) l) = l", "apply (insert roundup_help1_new [of l])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 687194767360;\n     0 < l \\<Longrightarrow> roundup l 160 - 1 + 1 = roundup l 160\\<rbrakk>\n    \\<Longrightarrow> length (MGF1 x (roundup l 160 - Suc 0) l) = l", "apply (rule length_MGF1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 687194767360;\n     0 < l \\<Longrightarrow> roundup l 160 - 1 + 1 = roundup l 160\\<rbrakk>\n    \\<Longrightarrow> l \\<le> Suc (roundup l 160 - Suc 0) * 160", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 687194767360;\n     Suc (roundup l 160 - Suc 0) = roundup l 160\\<rbrakk>\n    \\<Longrightarrow> l \\<le> roundup l 160 * 160", "apply (insert roundup_ge_emBits [of l 160])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < l; l \\<le> 687194767360;\n     Suc (roundup l 160 - Suc 0) = roundup l 160;\n     \\<lbrakk>0 < l; 0 < 160\\<rbrakk>\n     \\<Longrightarrow> l \\<le> roundup l 160 * 160\\<rbrakk>\n    \\<Longrightarrow> l \\<le> roundup l 160 * 160", "apply (arith)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma solve_length_generate_DB:\n  \"\\<lbrakk> 0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n  \\<Longrightarrow> length (generate_DB (generate_PS emBits (length (sha1 x)) )) = (roundup emBits 8) * 8 - 168\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n    \\<Longrightarrow> length\n                       (generate_DB\n                         (generate_PS emBits (length (sha1 x)))) =\n                      roundup emBits 8 * 8 - 168", "apply (insert roundup_ge_emBits [of emBits 8])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> emBits \\<le> roundup emBits 8 * 8\\<rbrakk>\n    \\<Longrightarrow> length\n                       (generate_DB\n                         (generate_PS emBits (length (sha1 x)))) =\n                      roundup emBits 8 * 8 - 168", "apply (simp add: length_generate_DB length_generate_PS sha1len)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_maskedDB_zero:\n  \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length maskedDB\\<rbrakk>\n  \\<Longrightarrow> length (maskedDB_zero maskedDB emBits) = length maskedDB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. roundup emBits 8 * 8 - emBits \\<le> length maskedDB \\<Longrightarrow>\n    length (maskedDB_zero maskedDB emBits) = length maskedDB", "by (simp add: maskedDB_zero_def length_bv_prepend)"], ["", "lemma take_equal_bv_prepend:\n  \"\\<lbrakk> 176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n  \\<Longrightarrow> take (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16) (maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits) =\n    bv_prepend (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16) \\<zero> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits;\n     roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n    \\<Longrightarrow> take\n                       (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                       (maskedDB_zero (generate_DB (generate_PS emBits 160))\n                         emBits) =\n                      bv_prepend\n                       (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                       \\<zero> []", "apply (insert roundup_help2 [of emBits] length_generate_PS [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7;\n     176 + sLen \\<le> emBits \\<Longrightarrow>\n     roundup emBits 8 * 8 - emBits\n     \\<le> roundup emBits 8 * 8 - 160 - sLen - 16;\n     length (generate_PS emBits 160) =\n     roundup emBits 8 * 8 - sLen - 160 - 16\\<rbrakk>\n    \\<Longrightarrow> take\n                       (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                       (maskedDB_zero (generate_DB (generate_PS emBits 160))\n                         emBits) =\n                      bv_prepend\n                       (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                       \\<zero> []", "apply (simp add: sha1len maskedDB_zero_def generate_DB_def generate_PS_def\n    bv_prepend_split bv_prepend_drop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lastbits_BC: \"BC = show_rightmost_bits (xs @ ys @ BC) 8\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BC = show_rightmost_bits (xs @ ys @ BC) 8", "by (simp add: show_rightmost_bits_def BC_def)"], ["", "lemma equal_zero:\n  \"176 + sLen \\<le> emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> roundup emBits 8 * 8 - (176 + sLen)\n  \\<Longrightarrow> 0 = roundup emBits 8 * 8 - emBits - (roundup emBits 8 * 8 - (176 + sLen))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits;\n     roundup emBits 8 * 8 - emBits\n     \\<le> roundup emBits 8 * 8 - (176 + sLen)\\<rbrakk>\n    \\<Longrightarrow> 0 =\n                      roundup emBits 8 * 8 - emBits -\n                      (roundup emBits 8 * 8 - (176 + sLen))", "by arith"], ["", "lemma get_salt: \"\\<lbrakk> 176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk> \\<Longrightarrow> (generate_salt (maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits)) = salt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits;\n     roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n    \\<Longrightarrow> generate_salt\n                       (maskedDB_zero (generate_DB (generate_PS emBits 160))\n                         emBits) =\n                      salt", "apply (insert roundup_help2 [of emBits] length_generate_PS [of emBits] equal_zero [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7;\n     176 + sLen \\<le> emBits \\<Longrightarrow>\n     roundup emBits 8 * 8 - emBits\n     \\<le> roundup emBits 8 * 8 - 160 - sLen - 16;\n     length (generate_PS emBits 160) =\n     roundup emBits 8 * 8 - sLen - 160 - 16;\n     \\<lbrakk>176 + sLen \\<le> emBits;\n      roundup emBits 8 * 8 - emBits\n      \\<le> roundup emBits 8 * 8 - (176 + sLen)\\<rbrakk>\n     \\<Longrightarrow> 0 =\n                       roundup emBits 8 * 8 - emBits -\n                       (roundup emBits 8 * 8 - (176 + sLen))\\<rbrakk>\n    \\<Longrightarrow> generate_salt\n                       (maskedDB_zero (generate_DB (generate_PS emBits 160))\n                         emBits) =\n                      salt", "apply (simp add: generate_DB_def generate_PS_def maskedDB_zero_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7;\n     roundup emBits 8 * 8 - emBits\n     \\<le> roundup emBits 8 * 8 - (176 + sLen);\n     length (bv_prepend (roundup emBits 8 * 8 - (176 + sLen)) \\<zero> []) =\n     roundup emBits 8 * 8 - (176 + sLen)\\<rbrakk>\n    \\<Longrightarrow> generate_salt\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits)\n                           (bv_prepend (roundup emBits 8 * 8 - (176 + sLen))\n                             \\<zero> []) @\n                          \\<zero> #\n                          \\<zero> #\n                          \\<zero> #\n                          \\<zero> #\n                          \\<zero> # \\<zero> # \\<zero> # \\<one> # salt)) =\n                      salt", "apply (simp add: bv_prepend_split bv_prepend_drop generate_salt_def\n    show_rightmost_bits_def sLen_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma generate_maskedDB_elim: \"\\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x; ( roundup emBits 8) * 8 - (length (sha1 M)) - 8 = length (maskedDB_zero x emBits)\\<rbrakk> \\<Longrightarrow> generate_maskedDB (maskedDB_zero x emBits @ y @ z) emBits (length(sha1 M)) = maskedDB_zero x emBits\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     roundup emBits 8 * 8 - length (sha1 M) - 8 =\n     length (maskedDB_zero x emBits)\\<rbrakk>\n    \\<Longrightarrow> generate_maskedDB (maskedDB_zero x emBits @ y @ z)\n                       emBits (length (sha1 M)) =\n                      maskedDB_zero x emBits", "apply (simp add: maskedDB_zero_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     roundup emBits 8 * 8 - (length (sha1 M) + 8) =\n     length\n      (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n        (drop (roundup emBits 8 * 8 - emBits) x))\\<rbrakk>\n    \\<Longrightarrow> generate_maskedDB\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits) x) @\n                        y @ z)\n                       emBits (length (sha1 M)) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                       (drop (roundup emBits 8 * 8 - emBits) x)", "apply (insert length_bv_prepend_drop [of \"(roundup emBits 8 * 8 - emBits)\" \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     roundup emBits 8 * 8 - (length (sha1 M) + 8) =\n     length\n      (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n        (drop (roundup emBits 8 * 8 - emBits) x));\n     \\<And>b.\n        roundup emBits 8 * 8 - emBits \\<le> length x \\<longrightarrow>\n        length\n         (bv_prepend (roundup emBits 8 * 8 - emBits) b\n           (drop (roundup emBits 8 * 8 - emBits) x)) =\n        length x\\<rbrakk>\n    \\<Longrightarrow> generate_maskedDB\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits) x) @\n                        y @ z)\n                       emBits (length (sha1 M)) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                       (drop (roundup emBits 8 * 8 - emBits) x)", "apply (simp add: generate_maskedDB_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma generate_H_elim: \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length x; length (maskedDB_zero x emBits) =  (roundup emBits 8) * 8 - 168; length y = 160\\<rbrakk> \\<Longrightarrow> generate_H (maskedDB_zero x emBits @ y @ z) emBits 160 = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     length (maskedDB_zero x emBits) = roundup emBits 8 * 8 - 168;\n     length y = 160\\<rbrakk>\n    \\<Longrightarrow> generate_H (maskedDB_zero x emBits @ y @ z) emBits\n                       160 =\n                      y", "apply (simp add: maskedDB_zero_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     length\n      (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n        (drop (roundup emBits 8 * 8 - emBits) x)) =\n     roundup emBits 8 * 8 - 168;\n     length y = 160\\<rbrakk>\n    \\<Longrightarrow> generate_H\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits) x) @\n                        y @ z)\n                       emBits 160 =\n                      y", "apply (insert length_bv_prepend_drop [of \"roundup emBits 8 * 8 - emBits\" \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length x;\n     length\n      (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n        (drop (roundup emBits 8 * 8 - emBits) x)) =\n     roundup emBits 8 * 8 - 168;\n     length y = 160;\n     \\<And>b.\n        roundup emBits 8 * 8 - emBits \\<le> length x \\<longrightarrow>\n        length\n         (bv_prepend (roundup emBits 8 * 8 - emBits) b\n           (drop (roundup emBits 8 * 8 - emBits) x)) =\n        length x\\<rbrakk>\n    \\<Longrightarrow> generate_H\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits) x) @\n                        y @ z)\n                       emBits 160 =\n                      y", "apply (simp add: generate_H_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_bv_prepend_drop_special: \"[|roundup emBits 8 * 8 - emBits <= roundup emBits 8 * 8 - (176 + sLen); length (generate_PS emBits 160) = roundup emBits 8 * 8 - (176 + sLen)|] ==> length ( bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> (drop (roundup emBits 8 * 8 - emBits) (generate_PS emBits 160))) = length (generate_PS emBits 160)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits\n             \\<le> roundup emBits 8 * 8 - (176 + sLen);\n     length (generate_PS emBits 160) =\n     roundup emBits 8 * 8 - (176 + sLen)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits)\n                           (generate_PS emBits 160))) =\n                      length (generate_PS emBits 160)", "by (simp add: length_bv_prepend_drop)"], ["", "lemma x01_elim: \"\\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk> \\<Longrightarrow> take 8 (drop (roundup emBits 8 * 8 - (length (sha1 M) + sLen + 16))(maskedDB_zero (generate_DB (generate_PS emBits 160)) emBits)) = [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<one>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits;\n     roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n    \\<Longrightarrow> take 8\n                       (drop\n                         (roundup emBits 8 * 8 -\n                          (length (sha1 M) + sLen + 16))\n                         (maskedDB_zero\n                           (generate_DB (generate_PS emBits 160)) emBits)) =\n                      [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                       \\<zero>, \\<one>]", "apply (insert roundup_help2 [of emBits] length_generate_PS [of emBits] equal_zero [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>176 + sLen \\<le> emBits; roundup emBits 8 * 8 - emBits \\<le> 7;\n     176 + sLen \\<le> emBits \\<Longrightarrow>\n     roundup emBits 8 * 8 - emBits\n     \\<le> roundup emBits 8 * 8 - 160 - sLen - 16;\n     length (generate_PS emBits 160) =\n     roundup emBits 8 * 8 - sLen - 160 - 16;\n     \\<lbrakk>176 + sLen \\<le> emBits;\n      roundup emBits 8 * 8 - emBits\n      \\<le> roundup emBits 8 * 8 - (176 + sLen)\\<rbrakk>\n     \\<Longrightarrow> 0 =\n                       roundup emBits 8 * 8 - emBits -\n                       (roundup emBits 8 * 8 - (176 + sLen))\\<rbrakk>\n    \\<Longrightarrow> take 8\n                       (drop\n                         (roundup emBits 8 * 8 -\n                          (length (sha1 M) + sLen + 16))\n                         (maskedDB_zero\n                           (generate_DB (generate_PS emBits 160)) emBits)) =\n                      [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                       \\<zero>, \\<one>]", "apply (simp add: sha1len maskedDB_zero_def generate_DB_def generate_PS_def\n    bv_prepend_split bv_prepend_drop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma drop_bv_mapzip:\n  assumes \"n <= length x\" \"length x = length y\"\n  shows \"drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)", "have \"\\<And>x y. n <= length x \\<Longrightarrow> length x = length y \\<Longrightarrow>\n      drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>n \\<le> length x; length x = length y\\<rbrakk>\n       \\<Longrightarrow> drop n (bv_mapzip f x y) =\n                         bv_mapzip f (drop n x) (drop n y)", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>0 \\<le> length x; length x = length y\\<rbrakk>\n       \\<Longrightarrow> drop 0 (bv_mapzip f x y) =\n                         bv_mapzip f (drop 0 x) (drop 0 y)\n 2. \\<And>n x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>n \\<le> length x; length x = length y\\<rbrakk>\n                   \\<Longrightarrow> drop n (bv_mapzip f x y) =\n                                     bv_mapzip f (drop n x) (drop n y);\n        Suc n \\<le> length x; length x = length y\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (bv_mapzip f x y) =\n                         bv_mapzip f (drop (Suc n) x) (drop (Suc n) y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x y.\n       \\<lbrakk>\\<And>x y.\n                   \\<lbrakk>n \\<le> length x; length x = length y\\<rbrakk>\n                   \\<Longrightarrow> drop n (bv_mapzip f x y) =\n                                     bv_mapzip f (drop n x) (drop n y);\n        Suc n \\<le> length x; length x = length y\\<rbrakk>\n       \\<Longrightarrow> drop (Suc n) (bv_mapzip f x y) =\n                         bv_mapzip f (drop (Suc n) x) (drop (Suc n) y)", "apply (case_tac x, case_tac[!] y, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<le> length ?x; length ?x = length ?y\\<rbrakk>\n  \\<Longrightarrow> drop n (bv_mapzip f ?x ?y) =\n                    bv_mapzip f (drop n ?x) (drop n ?y)\n\ngoal (1 subgoal):\n 1. drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)", "with assms"], ["proof (chain)\npicking this:\n  n \\<le> length x\n  length x = length y\n  \\<lbrakk>n \\<le> length ?x; length ?x = length ?y\\<rbrakk>\n  \\<Longrightarrow> drop n (bv_mapzip f ?x ?y) =\n                    bv_mapzip f (drop n ?x) (drop n ?y)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> length x\n  length x = length y\n  \\<lbrakk>n \\<le> length ?x; length ?x = length ?y\\<rbrakk>\n  \\<Longrightarrow> drop n (bv_mapzip f ?x ?y) =\n                    bv_mapzip f (drop n ?x) (drop n ?y)\n\ngoal (1 subgoal):\n 1. drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)", "by simp"], ["proof (state)\nthis:\n  drop n (bv_mapzip f x y) = bv_mapzip f (drop n x) (drop n y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]:\n  assumes \"length a = length b\"\n  shows \"bvxor (bvxor a b) b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bvxor (bvxor a b) b = a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bvxor (bvxor a b) b = a", "have \"\\<And>b. length a = length b \\<Longrightarrow> bvxor (bvxor a b) b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. length a = length b \\<Longrightarrow> bvxor (bvxor a b) b = a", "apply (induct a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       length [] = length b \\<Longrightarrow> bvxor (bvxor [] b) b = []\n 2. \\<And>a1 a2 b.\n       \\<lbrakk>\\<And>b.\n                   length a2 = length b \\<Longrightarrow>\n                   bvxor (bvxor a2 b) b = a2;\n        length (a1 # a2) = length b\\<rbrakk>\n       \\<Longrightarrow> bvxor (bvxor (a1 # a2) b) b = a1 # a2", "apply (auto simp add: bvxor)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 b.\n       \\<lbrakk>\\<And>b.\n                   length a2 = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        Suc (length a2) = length b\\<rbrakk>\n       \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                          (bv_mapzip (\\<oplus>\\<^sub>b) (a1 # a2) b) b =\n                         a1 # a2", "apply (case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a1 a2 b.\n       \\<lbrakk>\\<And>b.\n                   length a2 = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        Suc (length a2) = length b; b = []\\<rbrakk>\n       \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                          (bv_mapzip (\\<oplus>\\<^sub>b) (a1 # a2) b) b =\n                         a1 # a2\n 2. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length a2 = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        Suc (length a2) = length b; b = a # list\\<rbrakk>\n       \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                          (bv_mapzip (\\<oplus>\\<^sub>b) (a1 # a2) b) b =\n                         a1 # a2", "apply (simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1", "apply (case_tac a1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list; a1 = \\<zero>\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1\n 2. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list; a1 = \\<one>\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1", "apply (case_tac a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list; a1 = \\<zero>;\n        a = \\<zero>\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1\n 2. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list; a1 = \\<zero>;\n        a = \\<one>\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1\n 3. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; b = a # list; a1 = \\<one>\\<rbrakk>\n       \\<Longrightarrow> ((a1 \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) = a1", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list\\<rbrakk>\n       \\<Longrightarrow> ((\\<zero> \\<oplus>\\<^sub>b\n                           \\<zero>) \\<oplus>\\<^sub>b\n                          \\<zero>) =\n                         \\<zero>\n 2. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list\\<rbrakk>\n       \\<Longrightarrow> ((\\<zero> \\<oplus>\\<^sub>b \\<one>) \\<oplus>\\<^sub>b\n                          \\<one>) =\n                         \\<zero>\n 3. \\<And>a1 a2 b a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list\\<rbrakk>\n       \\<Longrightarrow> ((\\<one> \\<oplus>\\<^sub>b a) \\<oplus>\\<^sub>b a) =\n                         \\<one>", "apply (simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a2 a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list\\<rbrakk>\n       \\<Longrightarrow> (\\<not>\\<^sub>b a \\<oplus>\\<^sub>b a) = \\<one>", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a2 a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; a = \\<zero>\\<rbrakk>\n       \\<Longrightarrow> (\\<not>\\<^sub>b a \\<oplus>\\<^sub>b a) = \\<one>\n 2. \\<And>a2 a list.\n       \\<lbrakk>\\<And>b.\n                   length list = length b \\<Longrightarrow>\n                   bv_mapzip (\\<oplus>\\<^sub>b)\n                    (bv_mapzip (\\<oplus>\\<^sub>b) a2 b) b =\n                   a2;\n        length a2 = length list; a = \\<one>\\<rbrakk>\n       \\<Longrightarrow> (\\<not>\\<^sub>b a \\<oplus>\\<^sub>b a) = \\<one>", "apply (simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  length a = length ?b \\<Longrightarrow> bvxor (bvxor a ?b) ?b = a\n\ngoal (1 subgoal):\n 1. bvxor (bvxor a b) b = a", "with assms"], ["proof (chain)\npicking this:\n  length a = length b\n  length a = length ?b \\<Longrightarrow> bvxor (bvxor a ?b) ?b = a", "show ?thesis"], ["proof (prove)\nusing this:\n  length a = length b\n  length a = length ?b \\<Longrightarrow> bvxor (bvxor a ?b) ?b = a\n\ngoal (1 subgoal):\n 1. bvxor (bvxor a b) b = a", "by simp"], ["proof (state)\nthis:\n  bvxor (bvxor a b) b = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bvxorxor_elim_help:\n  assumes \"x <= length a\" and \"length a = length b\"\n  shows \"bv_prepend x \\<zero> (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_prepend x \\<zero>\n     (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bv_prepend x \\<zero>\n     (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)", "have \"drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b) = drop x a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b) = drop x a", "apply (unfold bvxor bv_prepend)"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop x\n     (bv_mapzip (\\<oplus>\\<^sub>b)\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n       b) =\n    drop x a", "apply (cut_tac assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a", "apply (insert length_replicate [of x \\<zero> ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a", "apply (insert length_drop [of x a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x;\n     length (drop x a) = length a - x\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a", "apply (insert length_drop [of x b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a", "apply (insert length_bvxor [of \"drop x a\" \"drop x b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a)\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a", "apply (subgoal_tac \"length (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) = length b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (subgoal_tac \"b = (take x b)@(drop x b)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     b = take x b @ drop x b\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (insert drop_bv_mapzip [of x \"(replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\" b \"(\\<oplus>\\<^sub>b)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     b = take x b @ drop x b;\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> drop x\n                       (bv_mapzip (\\<oplus>\\<^sub>b)\n                         (replicate x \\<zero> @\n                          drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                         b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length b; length a = length b;\n     length (bvxor (drop x a) (drop x b)) = length b - x;\n     drop x\n      (bv_mapzip (\\<oplus>\\<^sub>b)\n        (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n        b) =\n     bv_mapzip (\\<oplus>\\<^sub>b)\n      (drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) (drop x b)\\<rbrakk>\n    \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                       (drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                       (drop x b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (insert drop_bv_mapzip [of x a b \"(\\<oplus>\\<^sub>b)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length b; length a = length b;\n     length (bvxor (drop x a) (drop x b)) = length b - x;\n     drop x\n      (bv_mapzip (\\<oplus>\\<^sub>b)\n        (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n        b) =\n     bv_mapzip (\\<oplus>\\<^sub>b)\n      (drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b) (drop x a)\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                       (drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                       (drop x b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b) (drop x a)\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b) (drop x a)\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length b; length a = length b;\n     length (bvxor (drop x a) (drop x b)) = length b - x;\n     drop x\n      (bv_mapzip (\\<oplus>\\<^sub>b)\n        (replicate x \\<zero> @\n         bv_mapzip (\\<oplus>\\<^sub>b) (drop x a) (drop x b))\n        b) =\n     bv_mapzip (\\<oplus>\\<^sub>b)\n      (bv_mapzip (\\<oplus>\\<^sub>b) (drop x a) (drop x b)) (drop x b);\n     drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n     bv_mapzip (\\<oplus>\\<^sub>b) (drop x a) (drop x b)\\<rbrakk>\n    \\<Longrightarrow> bv_mapzip (\\<oplus>\\<^sub>b)\n                       (bv_mapzip (\\<oplus>\\<^sub>b) (drop x a) (drop x b))\n                       (drop x b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length\n      (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n     length b;\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b) (drop x a)\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     \\<lbrakk>x \\<le> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b));\n      length\n       (replicate x \\<zero> @ drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n      length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bv_mapzip (\\<oplus>\\<^sub>b)\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b))\n                          b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b)\n                        (drop x\n                          (replicate x \\<zero> @\n                           drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b) =\n                       bv_mapzip (\\<oplus>\\<^sub>b) (drop x a)\n                        (drop x b)\\<rbrakk>\n    \\<Longrightarrow> length\n                       (replicate x \\<zero> @\n                        drop x (bv_mapzip (\\<oplus>\\<^sub>b) a b)) =\n                      length b", "apply (fold bvxor)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> length b; length a = length b;\n     length (bvxor (drop x a) (drop x b)) = length b - x;\n     drop x (bvxor (replicate x \\<zero> @ bvxor (drop x a) (drop x b)) b) =\n     bvxor (bvxor (drop x a) (drop x b)) (drop x b);\n     drop x (bvxor a b) = bvxor (drop x a) (drop x b)\\<rbrakk>\n    \\<Longrightarrow> bvxor (bvxor (drop x a) (drop x b)) (drop x b) =\n                      drop x a\n 2. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     length (replicate x \\<zero> @ drop x (bvxor a b)) = length b;\n     \\<lbrakk>x \\<le> length (replicate x \\<zero> @ drop x (bvxor a b));\n      length (replicate x \\<zero> @ drop x (bvxor a b)) = length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bvxor (replicate x \\<zero> @ drop x (bvxor a b))\n                          b) =\n                       bvxor\n                        (drop x (replicate x \\<zero> @ drop x (bvxor a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bvxor a b) =\n                       bvxor (drop x a) (drop x b)\\<rbrakk>\n    \\<Longrightarrow> b = take x b @ drop x b\n 3. \\<lbrakk>x \\<le> length a; length a = length b;\n     length (replicate x \\<zero>) = x; length (drop x a) = length a - x;\n     length (drop x b) = length b - x;\n     length (drop x a) = length (drop x b) \\<Longrightarrow>\n     length (bvxor (drop x a) (drop x b)) = length (drop x a);\n     \\<lbrakk>x \\<le> length (replicate x \\<zero> @ drop x (bvxor a b));\n      length (replicate x \\<zero> @ drop x (bvxor a b)) = length b\\<rbrakk>\n     \\<Longrightarrow> drop x\n                        (bvxor (replicate x \\<zero> @ drop x (bvxor a b))\n                          b) =\n                       bvxor\n                        (drop x (replicate x \\<zero> @ drop x (bvxor a b)))\n                        (drop x b);\n     \\<lbrakk>x \\<le> length a; length a = length b\\<rbrakk>\n     \\<Longrightarrow> drop x (bvxor a b) =\n                       bvxor (drop x a) (drop x b)\\<rbrakk>\n    \\<Longrightarrow> length (replicate x \\<zero> @ drop x (bvxor a b)) =\n                      length b", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b) = drop x a\n\ngoal (1 subgoal):\n 1. bv_prepend x \\<zero>\n     (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)", "with assms"], ["proof (chain)\npicking this:\n  x \\<le> length a\n  length a = length b\n  drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b) = drop x a", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<le> length a\n  length a = length b\n  drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b) = drop x a\n\ngoal (1 subgoal):\n 1. bv_prepend x \\<zero>\n     (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n    bv_prepend x \\<zero> (drop x a)", "by simp"], ["proof (state)\nthis:\n  bv_prepend x \\<zero>\n   (drop x (bvxor (bv_prepend x \\<zero> (drop x (bvxor a b))) b)) =\n  bv_prepend x \\<zero> (drop x a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bvxorxor_elim: \"\\<lbrakk> roundup emBits 8 * 8 - emBits \\<le> length a; length a = length b\\<rbrakk> \\<Longrightarrow> (maskedDB_zero (bvxor (maskedDB_zero (bvxor a b) emBits)b) emBits) = bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> (drop (roundup emBits 8 * 8 - emBits) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>roundup emBits 8 * 8 - emBits \\<le> length a;\n     length a = length b\\<rbrakk>\n    \\<Longrightarrow> maskedDB_zero\n                       (bvxor (maskedDB_zero (bvxor a b) emBits) b) emBits =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                       (drop (roundup emBits 8 * 8 - emBits) a)", "by (simp add: maskedDB_zero_def bvxorxor_elim_help)"], ["", "lemma verify: \"\\<lbrakk>(emsapss_encode M emBits) \\<noteq> []; EM=(emsapss_encode M emBits)\\<rbrakk> \\<Longrightarrow> emsapss_decode M EM emBits = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode M emBits \\<noteq> [];\n     EM = emsapss_encode M emBits\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode M EM emBits = True", "apply (simp add: emsapss_decode_def emsapss_encode_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if 18446744073709551616 \\<le> length M \\<or>\n                 687194767360 < emBits\n              then [] else emsapss_encode_help1 (sha1 M) emBits) \\<noteq>\n             [];\n     EM =\n     (if 18446744073709551616 \\<le> length M \\<or> 687194767360 < emBits\n      then [] else emsapss_encode_help1 (sha1 M) emBits)\\<rbrakk>\n    \\<Longrightarrow> \\<not> 18446744073709551616 \\<le> length M \\<and>\n                      \\<not> 687194767360 < emBits \\<and>\n                      (\\<not> 18446744073709551616 \\<le> length M \\<and>\n                       \\<not> 687194767360 < emBits \\<longrightarrow>\n                       emsapss_decode_help1 (sha1 M)\n                        (emsapss_encode_help1 (sha1 M) emBits) emBits)", "apply (safe, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help1 (sha1 M) emBits \\<noteq> [];\n     EM = emsapss_encode_help1 (sha1 M) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help1 (sha1 M)\n                       (emsapss_encode_help1 (sha1 M) emBits) emBits", "apply (simp add: emsapss_decode_help1_def emsapss_encode_help1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if emBits < length (sha1 M) + sLen + 16 then []\n              else emsapss_encode_help2 (generate_M' (sha1 M) salt)\n                    emBits) \\<noteq>\n             [];\n     EM =\n     (if emBits < length (sha1 M) + sLen + 16 then []\n      else emsapss_encode_help2 (generate_M' (sha1 M) salt) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits\\<rbrakk>\n    \\<Longrightarrow> \\<not> emBits < length (sha1 M) + sLen + 16 \\<and>\n                      (\\<not> emBits\n                              < length (sha1 M) + sLen +\n                                16 \\<longrightarrow>\n                       emsapss_decode_help2 (sha1 M)\n                        (emsapss_encode_help2 (generate_M' (sha1 M) salt)\n                          emBits)\n                        emBits)", "apply (safe, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help2 (generate_M' (sha1 M) salt)\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help2 (generate_M' (sha1 M) salt) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help2 (sha1 M)\n                       (emsapss_encode_help2 (generate_M' (sha1 M) salt)\n                         emBits)\n                       emBits", "apply (simp add: emsapss_decode_help2_def emsapss_encode_help2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16\\<rbrakk>\n    \\<Longrightarrow> show_rightmost_bits\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       8 =\n                      BC \\<and>\n                      (show_rightmost_bits\n                        (emsapss_encode_help3\n                          (sha1 (generate_M' (sha1 M) salt)) emBits)\n                        8 =\n                       BC \\<longrightarrow>\n                       emsapss_decode_help3 (sha1 M)\n                        (emsapss_encode_help3\n                          (sha1 (generate_M' (sha1 M) salt)) emBits)\n                        emBits)", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16\\<rbrakk>\n    \\<Longrightarrow> show_rightmost_bits\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       8 =\n                      BC\n 2. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits) 8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help3 (sha1 M)\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       emBits", "apply (simp add: emsapss_encode_help3_def emsapss_encode_help4_def\n    emsapss_encode_help5_def emsapss_encode_help6_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16\\<rbrakk>\n    \\<Longrightarrow> (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt)))))) =\n                       [] \\<longrightarrow>\n                       show_rightmost_bits [] 8 = BC) \\<and>\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1\n                                  (generate_M' (sha1 M) salt)))))) \\<noteq>\n                       [] \\<longrightarrow>\n                       show_rightmost_bits\n                        (emsapss_encode_help7\n                          (bvxor\n                            (generate_DB\n                              (generate_PS emBits\n                                (length\n                                  (sha1 (generate_M' (sha1 M) salt)))))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (length\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt))))))))\n                          (sha1 (generate_M' (sha1 M) salt)) emBits)\n                        8 =\n                       BC)\n 2. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits) 8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help3 (sha1 M)\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       emBits", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) =\n     []\\<rbrakk>\n    \\<Longrightarrow> show_rightmost_bits [] 8 = BC\n 2. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> show_rightmost_bits\n                       (emsapss_encode_help7\n                         (bvxor\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (MGF (sha1 (generate_M' (sha1 M) salt))\n                             (length\n                               (generate_DB\n                                 (generate_PS emBits\n                                   (length\n                                     (sha1\n (generate_M' (sha1 M) salt))))))))\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       8 =\n                      BC\n 3. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits) 8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help3 (sha1 M)\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       emBits", "apply (simp add: emsapss_encode_help7_def emsapss_encode_help8_def lastbits_BC [symmetric])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt))\n              emBits \\<noteq>\n             [];\n     EM = emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help3 (sha1 (generate_M' (sha1 M) salt)) emBits) 8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help3 (sha1 M)\n                       (emsapss_encode_help3\n                         (sha1 (generate_M' (sha1 M) salt)) emBits)\n                       emBits", "apply (simp add: emsapss_decode_help3_def emsapss_encode_help3_def\n    emsapss_decode_help4_def emsapss_encode_help4_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> take (roundup emBits 8 * 8 - emBits)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M))) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                       [] \\<and>\n                      (take (roundup emBits 8 * 8 - emBits)\n                        (generate_maskedDB\n                          (emsapss_encode_help5\n                            (generate_DB\n                              (generate_PS emBits\n                                (length\n                                  (sha1 (generate_M' (sha1 M) salt)))))\n                            (sha1 (generate_M' (sha1 M) salt)) emBits)\n                          emBits (length (sha1 M))) =\n                       bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                        [] \\<longrightarrow>\n                       emsapss_decode_help5 (sha1 M)\n                        (generate_maskedDB\n                          (emsapss_encode_help5\n                            (generate_DB\n                              (generate_PS emBits\n                                (length\n                                  (sha1 (generate_M' (sha1 M) salt)))))\n                            (sha1 (generate_M' (sha1 M) salt)) emBits)\n                          emBits (length (sha1 M)))\n                        (MGF (generate_H\n                               (emsapss_encode_help5\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt)))))\n                                 (sha1 (generate_M' (sha1 M) salt)) emBits)\n                               emBits (length (sha1 M)))\n                          (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                        (generate_H\n                          (emsapss_encode_help5\n                            (generate_DB\n                              (generate_PS emBits\n                                (length\n                                  (sha1 (generate_M' (sha1 M) salt)))))\n                            (sha1 (generate_M' (sha1 M) salt)) emBits)\n                          emBits (length (sha1 M)))\n                        emBits)", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC\\<rbrakk>\n    \\<Longrightarrow> take (roundup emBits 8 * 8 - emBits)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M))) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (insert roundup_le_7 [of emBits] roundup_ge_0 [of emBits 8] roundup_nat_ge_8 [of M emBits])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> take (roundup emBits 8 * 8 - emBits)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M))) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp add: generate_maskedDB_def emsapss_encode_help5_def emsapss_encode_help6_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt)))))) =\n                       [] \\<longrightarrow>\n                       [] =\n                       bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                        []) \\<and>\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1\n                                  (generate_M' (sha1 M) salt)))))) \\<noteq>\n                       [] \\<longrightarrow>\n                       take\n                        (min (roundup emBits 8 * 8 - emBits)\n                          (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                        (emsapss_encode_help7\n                          (bvxor\n                            (generate_DB\n                              (generate_PS emBits\n                                (length\n                                  (sha1 (generate_M' (sha1 M) salt)))))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (length\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt))))))))\n                          (sha1 (generate_M' (sha1 M) salt)) emBits) =\n                       bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                        [])\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) =\n     []\\<rbrakk>\n    \\<Longrightarrow> [] =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> take\n                       (min (roundup emBits 8 * 8 - emBits)\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (emsapss_encode_help7\n                         (bvxor\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (MGF (sha1 (generate_M' (sha1 M) salt))\n                             (length\n                               (generate_DB\n                                 (generate_PS emBits\n                                   (length\n                                     (sha1\n (generate_M' (sha1 M) salt))))))))\n                         (sha1 (generate_M' (sha1 M) salt)) emBits) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 3. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> take\n                       (min (roundup emBits 8 * 8 - emBits)\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (emsapss_encode_help7\n                         (bvxor\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (MGF (sha1 (generate_M' (sha1 M) salt))\n                             (length\n                               (generate_DB\n                                 (generate_PS emBits\n                                   (length\n                                     (sha1\n (generate_M' (sha1 M) salt))))))))\n                         (sha1 (generate_M' (sha1 M) salt)) emBits) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp add: emsapss_encode_help7_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>emsapss_encode_help8\n              (maskedDB_zero\n                (bvxor\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt)))))\n                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                    (length\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt))))))))\n                emBits)\n              (sha1 (generate_M' (sha1 M) salt)) \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help8\n      (maskedDB_zero\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        emBits)\n      (sha1 (generate_M' (sha1 M) salt));\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help8\n        (maskedDB_zero\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))\n          emBits)\n        (sha1 (generate_M' (sha1 M) salt)))\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> take\n                       (min (roundup emBits 8 * 8 - emBits)\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (emsapss_encode_help8\n                         (maskedDB_zero\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           emBits)\n                         (sha1 (generate_M' (sha1 M) salt))) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp only: emsapss_encode_help8_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>maskedDB_zero\n              (bvxor\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt)))))\n                (MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt))))))))\n              emBits @\n             sha1 (generate_M' (sha1 M) salt) @ BC \\<noteq>\n             [];\n     EM =\n     maskedDB_zero\n      (bvxor\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt))))))))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> take\n                       (min (roundup emBits 8 * 8 - emBits)\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (maskedDB_zero\n                         (bvxor\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (MGF (sha1 (generate_M' (sha1 M) salt))\n                             (length\n                               (generate_DB\n                                 (generate_PS emBits\n                                   (length\n                                     (sha1\n (generate_M' (sha1 M) salt))))))))\n                         emBits @\n                        sha1 (generate_M' (sha1 M) salt) @ BC) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp only: maskedDB_zero_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n              (drop (roundup emBits 8 * 8 - emBits)\n                (bvxor\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt)))))\n                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                    (length\n                      (generate_DB\n                        (generate_PS emBits\n                          (length\n                            (sha1 (generate_M' (sha1 M) salt))))))))) @\n             sha1 (generate_M' (sha1 M) salt) @ BC \\<noteq>\n             [];\n     EM =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n      (drop (roundup emBits 8 * 8 - emBits)\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))) @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n        (drop (roundup emBits 8 * 8 - emBits)\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))) @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> take\n                       (min (roundup emBits 8 * 8 - emBits)\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                         (drop (roundup emBits 8 * 8 - emBits)\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))) @\n                        sha1 (generate_M' (sha1 M) salt) @ BC) =\n                      bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> []\n 2. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp only: take_bv_prepend2 min.absorb1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     0 < emBits \\<Longrightarrow> roundup emBits 8 * 8 - emBits \\<le> 7;\n     \\<lbrakk>0 < emBits; 0 < 8\\<rbrakk>\n     \\<Longrightarrow> 0 \\<le> roundup emBits 8 * 8 - emBits;\n     length (sha1 M) + sLen + 16 \\<le> emBits \\<Longrightarrow>\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help5\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help5\n      (generate_DB\n        (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help5\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help5\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help5\n                                (generate_DB\n                                  (generate_PS emBits\n                                    (length\n(sha1 (generate_M' (sha1 M) salt)))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help5\n                           (generate_DB\n                             (generate_PS emBits\n                               (length (sha1 (generate_M' (sha1 M) salt)))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp add: emsapss_encode_help5_def emsapss_encode_help6_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (if MGF (sha1 (generate_M' (sha1 M) salt))\n             (length\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))) =\n            []\n         then []\n         else emsapss_encode_help7\n               (bvxor\n                 (generate_DB\n                   (generate_PS emBits\n                     (length (sha1 (generate_M' (sha1 M) salt)))))\n                 (MGF (sha1 (generate_M' (sha1 M) salt))\n                   (length\n                     (generate_DB\n                       (generate_PS emBits\n                         (length (sha1 (generate_M' (sha1 M) salt))))))))\n               (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8)\\<rbrakk>\n    \\<Longrightarrow> (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt)))))) =\n                       [] \\<longrightarrow>\n                       emsapss_decode_help5 (sha1 M)\n                        (generate_maskedDB [] emBits (length (sha1 M)))\n                        (MGF (generate_H [] emBits (length (sha1 M)))\n                          (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                        (generate_H [] emBits (length (sha1 M)))\n                        emBits) \\<and>\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1\n                                  (generate_M' (sha1 M) salt)))))) \\<noteq>\n                       [] \\<longrightarrow>\n                       emsapss_decode_help5 (sha1 M)\n                        (generate_maskedDB\n                          (emsapss_encode_help7\n                            (bvxor\n                              (generate_DB\n                                (generate_PS emBits\n                                  (length\n                                    (sha1 (generate_M' (sha1 M) salt)))))\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (length\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt))))))))\n                            (sha1 (generate_M' (sha1 M) salt)) emBits)\n                          emBits (length (sha1 M)))\n                        (MGF (generate_H\n                               (emsapss_encode_help7\n                                 (bvxor\n                                   (generate_DB\n                                     (generate_PS emBits\n (length (sha1 (generate_M' (sha1 M) salt)))))\n                                   (MGF (sha1 (generate_M' (sha1 M) salt))\n                                     (length\n (generate_DB\n   (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                 (sha1 (generate_M' (sha1 M) salt)) emBits)\n                               emBits (length (sha1 M)))\n                          (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                        (generate_H\n                          (emsapss_encode_help7\n                            (bvxor\n                              (generate_DB\n                                (generate_PS emBits\n                                  (length\n                                    (sha1 (generate_M' (sha1 M) salt)))))\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (length\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt))))))))\n                            (sha1 (generate_M' (sha1 M) salt)) emBits)\n                          emBits (length (sha1 M)))\n                        emBits)", "apply (safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (if MGF (sha1 (generate_M' (sha1 M) salt))\n             (length\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))) =\n            []\n         then []\n         else emsapss_encode_help7\n               (bvxor\n                 (generate_DB\n                   (generate_PS emBits\n                     (length (sha1 (generate_M' (sha1 M) salt)))))\n                 (MGF (sha1 (generate_M' (sha1 M) salt))\n                   (length\n                     (generate_DB\n                       (generate_PS emBits\n                         (length (sha1 (generate_M' (sha1 M) salt))))))))\n               (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) =\n     []\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB [] emBits (length (sha1 M)))\n                       (MGF (generate_H [] emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H [] emBits (length (sha1 M))) emBits\n 2. \\<lbrakk>(if MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt)))))) =\n                 []\n              then []\n              else emsapss_encode_help7\n                    (bvxor\n                      (generate_DB\n                        (generate_PS emBits\n                          (length (sha1 (generate_M' (sha1 M) salt)))))\n                      (MGF (sha1 (generate_M' (sha1 M) salt))\n                        (length\n                          (generate_DB\n                            (generate_PS emBits\n                              (length\n                                (sha1 (generate_M' (sha1 M) salt))))))))\n                    (sha1 (generate_M' (sha1 M) salt)) emBits) \\<noteq>\n             [];\n     EM =\n     (if MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))) =\n         []\n      then []\n      else emsapss_encode_help7\n            (bvxor\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt)))))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (length\n                  (generate_DB\n                    (generate_PS emBits\n                      (length (sha1 (generate_M' (sha1 M) salt))))))))\n            (sha1 (generate_M' (sha1 M) salt)) emBits);\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (if MGF (sha1 (generate_M' (sha1 M) salt))\n           (length\n             (generate_DB\n               (generate_PS emBits\n                 (length (sha1 (generate_M' (sha1 M) salt)))))) =\n          []\n       then []\n       else emsapss_encode_help7\n             (bvxor\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))\n               (MGF (sha1 (generate_M' (sha1 M) salt))\n                 (length\n                   (generate_DB\n                     (generate_PS emBits\n                       (length (sha1 (generate_M' (sha1 M) salt))))))))\n             (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (if MGF (sha1 (generate_M' (sha1 M) salt))\n             (length\n               (generate_DB\n                 (generate_PS emBits\n                   (length (sha1 (generate_M' (sha1 M) salt)))))) =\n            []\n         then []\n         else emsapss_encode_help7\n               (bvxor\n                 (generate_DB\n                   (generate_PS emBits\n                     (length (sha1 (generate_M' (sha1 M) salt)))))\n                 (MGF (sha1 (generate_M' (sha1 M) salt))\n                   (length\n                     (generate_DB\n                       (generate_PS emBits\n                         (length (sha1 (generate_M' (sha1 M) salt))))))))\n               (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help7\n                                (bvxor\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt)))))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (length\n(generate_DB\n  (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help7\n              (bvxor\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt)))))\n                (MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt))))))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help7\n      (bvxor\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt))))))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help7\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help7\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help7\n                                (bvxor\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt)))))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (length\n(generate_DB\n  (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (insert solve_length_generate_DB [of emBits M \"generate_M' (sha1 M) salt\"] roundup_le_ub [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help7\n              (bvxor\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt)))))\n                (MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt))))))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help7\n      (bvxor\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt))))))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help7\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help7\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     [];\n     \\<lbrakk>0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n     \\<Longrightarrow> length\n                        (generate_DB\n                          (generate_PS emBits\n                            (length (sha1 (generate_M' (sha1 M) salt))))) =\n                       roundup emBits 8 * 8 - 168;\n     \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 2 ^ 32 * 160\\<rbrakk>\n     \\<Longrightarrow> roundup emBits 8 * 8 - 168\n                       \\<le> 2 ^ 32 * 160\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help7\n                                (bvxor\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt)))))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (length\n(generate_DB\n  (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (insert length_MGF [of \"(roundup emBits 8) * 8 - 168\" \"(sha1 (generate_M' (sha1 M) salt))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help7\n              (bvxor\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt)))))\n                (MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt))))))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help7\n      (bvxor\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt))))))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help7\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help7\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     [];\n     \\<lbrakk>0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n     \\<Longrightarrow> length\n                        (generate_DB\n                          (generate_PS emBits\n                            (length (sha1 (generate_M' (sha1 M) salt))))) =\n                       roundup emBits 8 * 8 - 168;\n     \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 2 ^ 32 * 160\\<rbrakk>\n     \\<Longrightarrow> roundup emBits 8 * 8 - 168 \\<le> 2 ^ 32 * 160;\n     \\<lbrakk>0 < roundup emBits 8 * 8 - 168;\n      roundup emBits 8 * 8 - 168\n      \\<le> 2 ^ 32 *\n            length (sha1 (sha1 (generate_M' (sha1 M) salt)))\\<rbrakk>\n     \\<Longrightarrow> length\n                        (MGF (sha1 (generate_M' (sha1 M) salt))\n                          (roundup emBits 8 * 8 - 168)) =\n                       roundup emBits 8 * 8 - 168\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help7\n                                (bvxor\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt)))))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (length\n(generate_DB\n  (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (insert modify_roundup_ge1 [of emBits] modify_roundup_ge2 [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>emsapss_encode_help7\n              (bvxor\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt)))))\n                (MGF (sha1 (generate_M' (sha1 M) salt))\n                  (length\n                    (generate_DB\n                      (generate_PS emBits\n                        (length (sha1 (generate_M' (sha1 M) salt))))))))\n              (sha1 (generate_M' (sha1 M) salt)) emBits \\<noteq>\n             [];\n     EM =\n     emsapss_encode_help7\n      (bvxor\n        (generate_DB\n          (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt)))))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (length\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt))))))))\n      (sha1 (generate_M' (sha1 M) salt)) emBits;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits;\n     \\<not> emBits < length (sha1 M) + sLen + 16;\n     show_rightmost_bits\n      (emsapss_encode_help7\n        (bvxor\n          (generate_DB\n            (generate_PS emBits\n              (length (sha1 (generate_M' (sha1 M) salt)))))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (length\n              (generate_DB\n                (generate_PS emBits\n                  (length (sha1 (generate_M' (sha1 M) salt))))))))\n        (sha1 (generate_M' (sha1 M) salt)) emBits)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (emsapss_encode_help7\n          (bvxor\n            (generate_DB\n              (generate_PS emBits\n                (length (sha1 (generate_M' (sha1 M) salt)))))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (length\n                (generate_DB\n                  (generate_PS emBits\n                    (length (sha1 (generate_M' (sha1 M) salt))))))))\n          (sha1 (generate_M' (sha1 M) salt)) emBits)\n        emBits (length (sha1 M))) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - (length (sha1 M) + 8);\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (length\n        (generate_DB\n          (generate_PS emBits\n            (length (sha1 (generate_M' (sha1 M) salt)))))) \\<noteq>\n     [];\n     \\<lbrakk>0 < emBits; length (sha1 M) + sLen + 16 \\<le> emBits\\<rbrakk>\n     \\<Longrightarrow> length\n                        (generate_DB\n                          (generate_PS emBits\n                            (length (sha1 (generate_M' (sha1 M) salt))))) =\n                       roundup emBits 8 * 8 - 168;\n     \\<lbrakk>176 + sLen \\<le> emBits; emBits \\<le> 2 ^ 32 * 160\\<rbrakk>\n     \\<Longrightarrow> roundup emBits 8 * 8 - 168 \\<le> 2 ^ 32 * 160;\n     \\<lbrakk>0 < roundup emBits 8 * 8 - 168;\n      roundup emBits 8 * 8 - 168\n      \\<le> 2 ^ 32 *\n            length (sha1 (sha1 (generate_M' (sha1 M) salt)))\\<rbrakk>\n     \\<Longrightarrow> length\n                        (MGF (sha1 (generate_M' (sha1 M) salt))\n                          (roundup emBits 8 * 8 - 168)) =\n                       roundup emBits 8 * 8 - 168;\n     8 \\<le> roundup emBits 8 * 8 - 168 \\<Longrightarrow>\n     176 \\<le> roundup emBits 8 * 8;\n     176 \\<le> roundup emBits 8 * 8 \\<Longrightarrow>\n     21 < roundup emBits 8\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       (MGF (generate_H\n                              (emsapss_encode_help7\n                                (bvxor\n                                  (generate_DB\n                                    (generate_PS emBits\n(length (sha1 (generate_M' (sha1 M) salt)))))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (length\n(generate_DB\n  (generate_PS emBits (length (sha1 (generate_M' (sha1 M) salt))))))))\n                                (sha1 (generate_M' (sha1 M) salt)) emBits)\n                              emBits (length (sha1 M)))\n                         (roundup emBits 8 * 8 - (length (sha1 M) + 8)))\n                       (generate_H\n                         (emsapss_encode_help7\n                           (bvxor\n                             (generate_DB\n                               (generate_PS emBits\n                                 (length\n                                   (sha1 (generate_M' (sha1 M) salt)))))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (length\n                                 (generate_DB\n                                   (generate_PS emBits\n                                     (length\n (sha1 (generate_M' (sha1 M) salt))))))))\n                           (sha1 (generate_M' (sha1 M) salt)) emBits)\n                         emBits (length (sha1 M)))\n                       emBits", "apply (simp add: sha1len emsapss_encode_help7_def emsapss_encode_help8_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (maskedDB_zero\n          (bvxor (generate_DB (generate_PS emBits 160))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (roundup emBits 8 * 8 - 168)))\n          emBits @\n         sha1 (generate_M' (sha1 M) salt) @ BC)\n        emBits 160) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       (MGF (generate_H\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits @\n                               sha1 (generate_M' (sha1 M) salt) @ BC)\n                              emBits 160)\n                         (roundup emBits 8 * 8 - 168))\n                       (generate_H\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       emBits", "apply (insert length_bvxor [of \"(generate_DB (generate_PS emBits 160))\" \"(MGF (sha1 (generate_M' (sha1 M) salt)) ((roundup emBits 8) * 8 - 168))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (maskedDB_zero\n          (bvxor (generate_DB (generate_PS emBits 160))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (roundup emBits 8 * 8 - 168)))\n          emBits @\n         sha1 (generate_M' (sha1 M) salt) @ BC)\n        emBits 160) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length (generate_DB (generate_PS emBits 160)) =\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) \\<Longrightarrow>\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     length (generate_DB (generate_PS emBits 160))\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       (MGF (generate_H\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits @\n                               sha1 (generate_M' (sha1 M) salt) @ BC)\n                              emBits 160)\n                         (roundup emBits 8 * 8 - 168))\n                       (generate_H\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       emBits", "apply (insert generate_maskedDB_elim [of emBits \"(bvxor (generate_DB (generate_PS emBits 160))(MGF (sha1 (generate_M' (sha1 M) salt)) ((roundup emBits 8) * 8 - 168)))\" M \"sha1 (generate_M' (sha1 M) salt)\" BC])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (maskedDB_zero\n          (bvxor (generate_DB (generate_PS emBits 160))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (roundup emBits 8 * 8 - 168)))\n          emBits @\n         sha1 (generate_M' (sha1 M) salt) @ BC)\n        emBits 160) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length (generate_DB (generate_PS emBits 160)) =\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) \\<Longrightarrow>\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     length (generate_DB (generate_PS emBits 160));\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length\n                     (bvxor (generate_DB (generate_PS emBits 160))\n                       (MGF (sha1 (generate_M' (sha1 M) salt))\n                         (roundup emBits 8 * 8 - 168)));\n      roundup emBits 8 * 8 - length (sha1 M) - 8 =\n      length\n       (maskedDB_zero\n         (bvxor (generate_DB (generate_PS emBits 160))\n           (MGF (sha1 (generate_M' (sha1 M) salt))\n             (roundup emBits 8 * 8 - 168)))\n         emBits)\\<rbrakk>\n     \\<Longrightarrow> generate_maskedDB\n                        (maskedDB_zero\n                          (bvxor (generate_DB (generate_PS emBits 160))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (roundup emBits 8 * 8 - 168)))\n                          emBits @\n                         sha1 (generate_M' (sha1 M) salt) @ BC)\n                        emBits (length (sha1 M)) =\n                       maskedDB_zero\n                        (bvxor (generate_DB (generate_PS emBits 160))\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       (MGF (generate_H\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits @\n                               sha1 (generate_M' (sha1 M) salt) @ BC)\n                              emBits 160)\n                         (roundup emBits 8 * 8 - 168))\n                       (generate_H\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       emBits", "apply (insert length_maskedDB_zero [of emBits \"(bvxor (generate_DB (generate_PS emBits 160))(MGF (sha1 (generate_M' (sha1 M) salt)) ((roundup emBits 8) * 8 - 168)))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (maskedDB_zero\n          (bvxor (generate_DB (generate_PS emBits 160))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (roundup emBits 8 * 8 - 168)))\n          emBits @\n         sha1 (generate_M' (sha1 M) salt) @ BC)\n        emBits 160) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length (generate_DB (generate_PS emBits 160)) =\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) \\<Longrightarrow>\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     length (generate_DB (generate_PS emBits 160));\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length\n                     (bvxor (generate_DB (generate_PS emBits 160))\n                       (MGF (sha1 (generate_M' (sha1 M) salt))\n                         (roundup emBits 8 * 8 - 168)));\n      roundup emBits 8 * 8 - length (sha1 M) - 8 =\n      length\n       (maskedDB_zero\n         (bvxor (generate_DB (generate_PS emBits 160))\n           (MGF (sha1 (generate_M' (sha1 M) salt))\n             (roundup emBits 8 * 8 - 168)))\n         emBits)\\<rbrakk>\n     \\<Longrightarrow> generate_maskedDB\n                        (maskedDB_zero\n                          (bvxor (generate_DB (generate_PS emBits 160))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (roundup emBits 8 * 8 - 168)))\n                          emBits @\n                         sha1 (generate_M' (sha1 M) salt) @ BC)\n                        emBits (length (sha1 M)) =\n                       maskedDB_zero\n                        (bvxor (generate_DB (generate_PS emBits 160))\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits;\n     roundup emBits 8 * 8 - emBits\n     \\<le> length\n            (bvxor (generate_DB (generate_PS emBits 160))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (roundup emBits 8 * 8 - 168))) \\<Longrightarrow>\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       (MGF (generate_H\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits @\n                               sha1 (generate_M' (sha1 M) salt) @ BC)\n                              emBits 160)\n                         (roundup emBits 8 * 8 - 168))\n                       (generate_H\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       emBits", "apply (insert generate_H_elim [of emBits \"(bvxor (generate_DB (generate_PS emBits 160))(MGF (sha1 (generate_M' (sha1 M) salt)) (roundup emBits 8 * 8 - 168)))\" \"sha1 (generate_M' (sha1 M) salt)\" BC])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (generate_maskedDB\n        (maskedDB_zero\n          (bvxor (generate_DB (generate_PS emBits 160))\n            (MGF (sha1 (generate_M' (sha1 M) salt))\n              (roundup emBits 8 * 8 - 168)))\n          emBits @\n         sha1 (generate_M' (sha1 M) salt) @ BC)\n        emBits 160) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length (generate_DB (generate_PS emBits 160)) =\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) \\<Longrightarrow>\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     length (generate_DB (generate_PS emBits 160));\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length\n                     (bvxor (generate_DB (generate_PS emBits 160))\n                       (MGF (sha1 (generate_M' (sha1 M) salt))\n                         (roundup emBits 8 * 8 - 168)));\n      roundup emBits 8 * 8 - length (sha1 M) - 8 =\n      length\n       (maskedDB_zero\n         (bvxor (generate_DB (generate_PS emBits 160))\n           (MGF (sha1 (generate_M' (sha1 M) salt))\n             (roundup emBits 8 * 8 - 168)))\n         emBits)\\<rbrakk>\n     \\<Longrightarrow> generate_maskedDB\n                        (maskedDB_zero\n                          (bvxor (generate_DB (generate_PS emBits 160))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (roundup emBits 8 * 8 - 168)))\n                          emBits @\n                         sha1 (generate_M' (sha1 M) salt) @ BC)\n                        emBits (length (sha1 M)) =\n                       maskedDB_zero\n                        (bvxor (generate_DB (generate_PS emBits 160))\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits;\n     roundup emBits 8 * 8 - emBits\n     \\<le> length\n            (bvxor (generate_DB (generate_PS emBits 160))\n              (MGF (sha1 (generate_M' (sha1 M) salt))\n                (roundup emBits 8 * 8 - 168))) \\<Longrightarrow>\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)));\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length\n                     (bvxor (generate_DB (generate_PS emBits 160))\n                       (MGF (sha1 (generate_M' (sha1 M) salt))\n                         (roundup emBits 8 * 8 - 168)));\n      length\n       (maskedDB_zero\n         (bvxor (generate_DB (generate_PS emBits 160))\n           (MGF (sha1 (generate_M' (sha1 M) salt))\n             (roundup emBits 8 * 8 - 168)))\n         emBits) =\n      roundup emBits 8 * 8 - 168;\n      length (sha1 (generate_M' (sha1 M) salt)) = 160\\<rbrakk>\n     \\<Longrightarrow> generate_H\n                        (maskedDB_zero\n                          (bvxor (generate_DB (generate_PS emBits 160))\n                            (MGF (sha1 (generate_M' (sha1 M) salt))\n                              (roundup emBits 8 * 8 - 168)))\n                          emBits @\n                         sha1 (generate_M' (sha1 M) salt) @ BC)\n                        emBits 160 =\n                       sha1 (generate_M' (sha1 M) salt)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help5 (sha1 M)\n                       (generate_maskedDB\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       (MGF (generate_H\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits @\n                               sha1 (generate_M' (sha1 M) salt) @ BC)\n                              emBits 160)\n                         (roundup emBits 8 * 8 - 168))\n                       (generate_H\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits @\n                          sha1 (generate_M' (sha1 M) salt) @ BC)\n                         emBits 160)\n                       emBits", "apply (simp add: sha1len emsapss_decode_help5_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     roundup emBits 8 * 8 - 168;\n     generate_maskedDB\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits;\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     roundup emBits 8 * 8 - 168;\n     generate_H\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     sha1 (generate_M' (sha1 M) salt)\\<rbrakk>\n    \\<Longrightarrow> emsapss_decode_help6 (sha1 M)\n                       (bvxor\n                         (maskedDB_zero\n                           (bvxor (generate_DB (generate_PS emBits 160))\n                             (MGF (sha1 (generate_M' (sha1 M) salt))\n                               (roundup emBits 8 * 8 - 168)))\n                           emBits)\n                         (MGF (sha1 (generate_M' (sha1 M) salt))\n                           (roundup emBits 8 * 8 - 168)))\n                       (sha1 (generate_M' (sha1 M) salt)) emBits", "apply (simp only: emsapss_decode_help6_def emsapss_decode_help7_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     roundup emBits 8 * 8 - 168;\n     generate_maskedDB\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits;\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     roundup emBits 8 * 8 - 168;\n     generate_H\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     sha1 (generate_M' (sha1 M) salt)\\<rbrakk>\n    \\<Longrightarrow> if take\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          (maskedDB_zero\n                            (bvxor\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits)\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits) \\<noteq>\n                         bv_prepend\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          \\<zero> [] \\<or>\n                         take 8\n                          (drop\n                            (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                             16)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)) \\<noteq>\n                         [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                          \\<zero>, \\<zero>, \\<one>]\n                      then False\n                      else emsapss_decode_help8 (sha1 M)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)\n                            (sha1 (generate_M' (sha1 M) salt))", "apply (insert bvxorxor_elim [of emBits \"(generate_DB (generate_PS emBits 160))\" \"(MGF (sha1 (generate_M' (sha1 M) salt)) ((roundup emBits 8) * 8 - 168))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     roundup emBits 8 * 8 - 168;\n     generate_maskedDB\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits;\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     roundup emBits 8 * 8 - 168;\n     generate_H\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     sha1 (generate_M' (sha1 M) salt);\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length (generate_DB (generate_PS emBits 160));\n      length (generate_DB (generate_PS emBits 160)) =\n      length\n       (MGF (sha1 (generate_M' (sha1 M) salt))\n         (roundup emBits 8 * 8 - 168))\\<rbrakk>\n     \\<Longrightarrow> maskedDB_zero\n                        (bvxor\n                          (maskedDB_zero\n                            (bvxor (generate_DB (generate_PS emBits 160))\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits)\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits =\n                       bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero>\n                        (drop (roundup emBits 8 * 8 - emBits)\n                          (generate_DB (generate_PS emBits 160)))\\<rbrakk>\n    \\<Longrightarrow> if take\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          (maskedDB_zero\n                            (bvxor\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits)\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits) \\<noteq>\n                         bv_prepend\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          \\<zero> [] \\<or>\n                         take 8\n                          (drop\n                            (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                             16)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)) \\<noteq>\n                         [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                          \\<zero>, \\<zero>, \\<one>]\n                      then False\n                      else emsapss_decode_help8 (sha1 M)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)\n                            (sha1 (generate_M' (sha1 M) salt))", "apply (fold maskedDB_zero_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     roundup emBits 8 * 8 - 168;\n     generate_maskedDB\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits;\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     roundup emBits 8 * 8 - 168;\n     generate_H\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     sha1 (generate_M' (sha1 M) salt);\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length (generate_DB (generate_PS emBits 160));\n      length (generate_DB (generate_PS emBits 160)) =\n      length\n       (MGF (sha1 (generate_M' (sha1 M) salt))\n         (roundup emBits 8 * 8 - 168))\\<rbrakk>\n     \\<Longrightarrow> maskedDB_zero\n                        (bvxor\n                          (maskedDB_zero\n                            (bvxor (generate_DB (generate_PS emBits 160))\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits)\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits =\n                       maskedDB_zero (generate_DB (generate_PS emBits 160))\n                        emBits\\<rbrakk>\n    \\<Longrightarrow> if take\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          (maskedDB_zero\n                            (bvxor\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits)\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits) \\<noteq>\n                         bv_prepend\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          \\<zero> [] \\<or>\n                         take 8\n                          (drop\n                            (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                             16)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)) \\<noteq>\n                         [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                          \\<zero>, \\<zero>, \\<one>]\n                      then False\n                      else emsapss_decode_help8 (sha1 M)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)\n                            (sha1 (generate_M' (sha1 M) salt))", "apply (insert take_equal_bv_prepend [of emBits M] x01_elim [of emBits M] get_salt [of emBits])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sha1 (generate_M' (sha1 M) salt) = [] \\<longrightarrow>\n             maskedDB_zero\n              (bvxor (generate_DB (generate_PS emBits 160))\n                (MGF [] (roundup emBits 8 * 8 - 168)))\n              emBits =\n             [] \\<longrightarrow>\n             BC \\<noteq> [];\n     EM =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits @\n     sha1 (generate_M' (sha1 M) salt) @ BC;\n     \\<not> 18446744073709551616 \\<le> length M;\n     \\<not> 687194767360 < emBits; \\<not> emBits < 176 + sLen;\n     show_rightmost_bits\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      8 =\n     BC;\n     take (roundup emBits 8 * 8 - emBits)\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     bv_prepend (roundup emBits 8 * 8 - emBits) \\<zero> [];\n     roundup emBits 8 * 8 - emBits \\<le> 7;\n     8 \\<le> roundup emBits 8 * 8 - 168;\n     MGF (sha1 (generate_M' (sha1 M) salt))\n      (roundup emBits 8 * 8 - 168) \\<noteq>\n     [];\n     length (generate_DB (generate_PS emBits 160)) =\n     roundup emBits 8 * 8 - 168;\n     roundup emBits 8 * 8 - 168 \\<le> 687194767360;\n     length\n      (MGF (sha1 (generate_M' (sha1 M) salt))\n        (roundup emBits 8 * 8 - 168)) =\n     roundup emBits 8 * 8 - 168;\n     22 \\<le> roundup emBits 8;\n     length\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168))) =\n     roundup emBits 8 * 8 - 168;\n     generate_maskedDB\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     maskedDB_zero\n      (bvxor (generate_DB (generate_PS emBits 160))\n        (MGF (sha1 (generate_M' (sha1 M) salt))\n          (roundup emBits 8 * 8 - 168)))\n      emBits;\n     length\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits) =\n     roundup emBits 8 * 8 - 168;\n     generate_H\n      (maskedDB_zero\n        (bvxor (generate_DB (generate_PS emBits 160))\n          (MGF (sha1 (generate_M' (sha1 M) salt))\n            (roundup emBits 8 * 8 - 168)))\n        emBits @\n       sha1 (generate_M' (sha1 M) salt) @ BC)\n      emBits 160 =\n     sha1 (generate_M' (sha1 M) salt);\n     \\<lbrakk>roundup emBits 8 * 8 - emBits\n              \\<le> length (generate_DB (generate_PS emBits 160));\n      length (generate_DB (generate_PS emBits 160)) =\n      length\n       (MGF (sha1 (generate_M' (sha1 M) salt))\n         (roundup emBits 8 * 8 - 168))\\<rbrakk>\n     \\<Longrightarrow> maskedDB_zero\n                        (bvxor\n                          (maskedDB_zero\n                            (bvxor (generate_DB (generate_PS emBits 160))\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits)\n                          (MGF (sha1 (generate_M' (sha1 M) salt))\n                            (roundup emBits 8 * 8 - 168)))\n                        emBits =\n                       maskedDB_zero (generate_DB (generate_PS emBits 160))\n                        emBits;\n     \\<lbrakk>176 + sLen \\<le> emBits;\n      roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n     \\<Longrightarrow> take\n                        (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                        (maskedDB_zero\n                          (generate_DB (generate_PS emBits 160)) emBits) =\n                       bv_prepend\n                        (roundup emBits 8 * 8 - length (sha1 M) - sLen - 16)\n                        \\<zero> [];\n     \\<lbrakk>176 + sLen \\<le> emBits;\n      roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n     \\<Longrightarrow> take 8\n                        (drop\n                          (roundup emBits 8 * 8 -\n                           (length (sha1 M) + sLen + 16))\n                          (maskedDB_zero\n                            (generate_DB (generate_PS emBits 160))\n                            emBits)) =\n                       [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                        \\<zero>, \\<zero>, \\<one>];\n     \\<lbrakk>176 + sLen \\<le> emBits;\n      roundup emBits 8 * 8 - emBits \\<le> 7\\<rbrakk>\n     \\<Longrightarrow> generate_salt\n                        (maskedDB_zero\n                          (generate_DB (generate_PS emBits 160)) emBits) =\n                       salt\\<rbrakk>\n    \\<Longrightarrow> if take\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          (maskedDB_zero\n                            (bvxor\n                              (maskedDB_zero\n                                (bvxor\n                                  (generate_DB (generate_PS emBits 160))\n                                  (MGF (sha1 (generate_M' (sha1 M) salt))\n                                    (roundup emBits 8 * 8 - 168)))\n                                emBits)\n                              (MGF (sha1 (generate_M' (sha1 M) salt))\n                                (roundup emBits 8 * 8 - 168)))\n                            emBits) \\<noteq>\n                         bv_prepend\n                          (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                           16)\n                          \\<zero> [] \\<or>\n                         take 8\n                          (drop\n                            (roundup emBits 8 * 8 - length (sha1 M) - sLen -\n                             16)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)) \\<noteq>\n                         [\\<zero>, \\<zero>, \\<zero>, \\<zero>, \\<zero>,\n                          \\<zero>, \\<zero>, \\<one>]\n                      then False\n                      else emsapss_decode_help8 (sha1 M)\n                            (maskedDB_zero\n                              (bvxor\n                                (maskedDB_zero\n                                  (bvxor\n                                    (generate_DB (generate_PS emBits 160))\n                                    (MGF (sha1 (generate_M' (sha1 M) salt))\n(roundup emBits 8 * 8 - 168)))\n                                  emBits)\n                                (MGF (sha1 (generate_M' (sha1 M) salt))\n                                  (roundup emBits 8 * 8 - 168)))\n                              emBits)\n                            (sha1 (generate_M' (sha1 M) salt))", "apply (simp add: emsapss_decode_help8_def emsapss_decode_help9_def emsapss_decode_help10_def emsapss_decode_help11_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}