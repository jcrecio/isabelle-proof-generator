{"file_name": "/home/qj213/afp-2021-10-22/thys/RSAPSS/SHA1.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RSAPSS", "problem_names": ["lemma sha1blocklen: \"length (sha1block b x A B C D E) = 160\"", "lemma sha1len: \"length (sha1 m) = 160\""], "translations": [["", "lemma sha1blocklen: \"length (sha1block b x A B C D E) = 160\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sha1block b x A B C D E) = 160", "proof (induct b x A B C D E rule: sha1block.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b A B C D E. length (sha1block b [] A B C D E) = 160\n 2. \\<And>b v va A B C D E.\n       (\\<And>x xa xb xc xd xe.\n           \\<lbrakk>x = sha1compressstart 79 b A B C D E;\n            xa = addmod32 A (select x 0 31);\n            xb = addmod32 B (select x 32 63);\n            xc = addmod32 C (select x 64 95);\n            xd = addmod32 D (select x 96 127);\n            xe = addmod32 E (select x 128 159)\\<rbrakk>\n           \\<Longrightarrow> length\n                              (sha1block (getblock (v # va))\n                                (delblock (v # va)) xa xb xc xd E) =\n                             160) \\<Longrightarrow>\n       length (sha1block b (v # va) A B C D E) = 160", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>b A B C D E. length (sha1block b [] A B C D E) = 160\n 2. \\<And>b v va A B C D E.\n       (\\<And>x xa xb xc xd xe.\n           \\<lbrakk>x = sha1compressstart 79 b A B C D E;\n            xa = addmod32 A (select x 0 31);\n            xb = addmod32 B (select x 32 63);\n            xc = addmod32 C (select x 64 95);\n            xd = addmod32 D (select x 96 127);\n            xe = addmod32 E (select x 128 159)\\<rbrakk>\n           \\<Longrightarrow> length\n                              (sha1block (getblock (v # va))\n                                (delblock (v # va)) xa xb xc xd E) =\n                             160) \\<Longrightarrow>\n       length (sha1block b (v # va) A B C D E) = 160", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sha1block b_ [] A_ B_ C_ D_ E_) = 160", "by (simp add: Let_def addmod32len)"], ["proof (state)\nthis:\n  length (sha1block b_ [] A_ B_ C_ D_ E_) = 160\n\ngoal (1 subgoal):\n 1. \\<And>b v va A B C D E.\n       (\\<And>x xa xb xc xd xe.\n           \\<lbrakk>x = sha1compressstart 79 b A B C D E;\n            xa = addmod32 A (select x 0 31);\n            xb = addmod32 B (select x 32 63);\n            xc = addmod32 C (select x 64 95);\n            xd = addmod32 D (select x 96 127);\n            xe = addmod32 E (select x 128 159)\\<rbrakk>\n           \\<Longrightarrow> length\n                              (sha1block (getblock (v # va))\n                                (delblock (v # va)) xa xb xc xd E) =\n                             160) \\<Longrightarrow>\n       length (sha1block b (v # va) A B C D E) = 160", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b v va A B C D E.\n       (\\<And>x xa xb xc xd xe.\n           \\<lbrakk>x = sha1compressstart 79 b A B C D E;\n            xa = addmod32 A (select x 0 31);\n            xb = addmod32 B (select x 32 63);\n            xc = addmod32 C (select x 64 95);\n            xd = addmod32 D (select x 96 127);\n            xe = addmod32 E (select x 128 159)\\<rbrakk>\n           \\<Longrightarrow> length\n                              (sha1block (getblock (v # va))\n                                (delblock (v # va)) xa xb xc xd E) =\n                             160) \\<Longrightarrow>\n       length (sha1block b (v # va) A B C D E) = 160", "case 2"], ["proof (state)\nthis:\n  \\<lbrakk>?x = sha1compressstart 79 b_ A_ B_ C_ D_ E_;\n   ?xa = addmod32 A_ (select ?x 0 31); ?xb = addmod32 B_ (select ?x 32 63);\n   ?xc = addmod32 C_ (select ?x 64 95);\n   ?xd = addmod32 D_ (select ?x 96 127);\n   ?xe = addmod32 E_ (select ?x 128 159)\\<rbrakk>\n  \\<Longrightarrow> length\n                     (sha1block (getblock (v_ # va_)) (delblock (v_ # va_))\n                       ?xa ?xb ?xc ?xd E_) =\n                    160\n\ngoal (1 subgoal):\n 1. \\<And>b v va A B C D E.\n       (\\<And>x xa xb xc xd xe.\n           \\<lbrakk>x = sha1compressstart 79 b A B C D E;\n            xa = addmod32 A (select x 0 31);\n            xb = addmod32 B (select x 32 63);\n            xc = addmod32 C (select x 64 95);\n            xd = addmod32 D (select x 96 127);\n            xe = addmod32 E (select x 128 159)\\<rbrakk>\n           \\<Longrightarrow> length\n                              (sha1block (getblock (v # va))\n                                (delblock (v # va)) xa xb xc xd E) =\n                             160) \\<Longrightarrow>\n       length (sha1block b (v # va) A B C D E) = 160", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = sha1compressstart 79 b_ A_ B_ C_ D_ E_;\n   ?xa = addmod32 A_ (select ?x 0 31); ?xb = addmod32 B_ (select ?x 32 63);\n   ?xc = addmod32 C_ (select ?x 64 95);\n   ?xd = addmod32 D_ (select ?x 96 127);\n   ?xe = addmod32 E_ (select ?x 128 159)\\<rbrakk>\n  \\<Longrightarrow> length\n                     (sha1block (getblock (v_ # va_)) (delblock (v_ # va_))\n                       ?xa ?xb ?xc ?xd E_) =\n                    160", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = sha1compressstart 79 b_ A_ B_ C_ D_ E_;\n   ?xa = addmod32 A_ (select ?x 0 31); ?xb = addmod32 B_ (select ?x 32 63);\n   ?xc = addmod32 C_ (select ?x 64 95);\n   ?xd = addmod32 D_ (select ?x 96 127);\n   ?xe = addmod32 E_ (select ?x 128 159)\\<rbrakk>\n  \\<Longrightarrow> length\n                     (sha1block (getblock (v_ # va_)) (delblock (v_ # va_))\n                       ?xa ?xb ?xc ?xd E_) =\n                    160\n\ngoal (1 subgoal):\n 1. length (sha1block b_ (v_ # va_) A_ B_ C_ D_ E_) = 160", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  length (sha1block b_ (v_ # va_) A_ B_ C_ D_ E_) = 160\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sha1len: \"length (sha1 m) = 160\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (sha1 m) = 160", "unfolding sha1 Let_def sha1blocklen"], ["proof (prove)\ngoal (1 subgoal):\n 1. 160 = 160", ".."], ["", "end"]]}