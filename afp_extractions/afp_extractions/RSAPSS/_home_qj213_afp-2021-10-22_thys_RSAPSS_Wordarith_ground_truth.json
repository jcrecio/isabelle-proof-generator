{"file_name": "/home/qj213/afp-2021-10-22/thys/RSAPSS/Wordarith.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RSAPSS", "problem_names": ["lemma length_nat_to_bv_length:\n  \"nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow> length (nat_to_bv_length x y) = y\"", "lemma bv_to_nat_nat_to_bv_length:\n  \"nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow> bv_to_nat (nat_to_bv_length x y) = x\"", "lemma rnddvd: \"b dvd a \\<Longrightarrow> roundup a b * b = a\"", "lemma bv_to_nat_zero_prepend: \"bv_to_nat a = bv_to_nat (\\<zero>#a)\"", "lemma remzeroeq: \"bv_to_nat a = bv_to_nat (remzero a)\"", "lemma len_nat_to_bv_pos: assumes x: \"1 < a\" shows \"0< length (nat_to_bv a)\"", "lemma remzero_replicate: \"remzero ((replicate n \\<zero>)@l) = remzero l\"", "lemma length_bvxor_bound: \"a <= length l \\<Longrightarrow> a <= length (bvxor l l2)\"", "lemma nat_to_bv_helper_legacy_induct:\n  \"(\\<And>n. n \\<noteq> (0::nat) \\<longrightarrow> P (n div 2) \\<Longrightarrow> P n) \\<Longrightarrow> P x\"", "lemma len_lower_bound:\n  assumes \"0 < n\"\n  shows \"2^(length (nat_to_bv n) - Suc 0) \\<le> n\"", "lemma length_lower: assumes a: \"length a < length b\" and b: \"(hd b) ~= \\<zero>\" shows \"bv_to_nat a < bv_to_nat b\"", "lemma nat_to_bv_non_empty: assumes a: \"0<n\" shows \"nat_to_bv n ~= []\"", "lemma hd_append: \"x ~= [] \\<Longrightarrow> hd (x @ xs) = hd x\"", "lemma hd_one: \"0<n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\"", "lemma prime_hd_non_zero: \n  fixes p::nat assumes a: \"prime p\" and b: \"prime q\" shows \"hd (nat_to_bv (p*q)) ~= \\<zero>\"", "lemma primerew: fixes p::nat shows  \"\\<lbrakk>m dvd p; m~=1; m~=p\\<rbrakk> \\<Longrightarrow> ~ prime p\"", "lemma two_dvd_exp: \"0<x \\<Longrightarrow> (2::nat) dvd 2^x\"", "lemma exp_prod1: \"\\<lbrakk>1<b;2^x=2*(b::nat)\\<rbrakk> \\<Longrightarrow> 2 dvd b\"", "lemma exp_prod2: \"\\<lbrakk>1<a; 2^x=a*2\\<rbrakk> \\<Longrightarrow> (2::nat) dvd a\"", "lemma odd_mul_odd: \"\\<lbrakk>~(2::nat) dvd p; ~2 dvd q\\<rbrakk> \\<Longrightarrow> ~2 dvd p*q\"", "lemma prime_equal: fixes p::nat shows \"\\<lbrakk>prime p; prime q; 2^x=p*q\\<rbrakk> \\<Longrightarrow> (p=q)\"", "lemma nat_to_bv_length_bv_to_nat:\n  \"length xs = n \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> nat_to_bv_length (bv_to_nat xs) n = xs\""], "translations": [["", "lemma length_nat_to_bv_length:\n  \"nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow> length (nat_to_bv_length x y) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow>\n    length (nat_to_bv_length x y) = y", "unfolding nat_to_bv_length"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if length (nat_to_bv x) \\<le> y then bv_extend y \\<zero> (nat_to_bv x)\n     else []) \\<noteq>\n    [] \\<Longrightarrow>\n    length\n     (if length (nat_to_bv x) \\<le> y then bv_extend y \\<zero> (nat_to_bv x)\n      else []) =\n    y", "by auto"], ["", "lemma bv_to_nat_nat_to_bv_length:\n  \"nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow> bv_to_nat (nat_to_bv_length x y) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv_length x y \\<noteq> [] \\<Longrightarrow>\n    bv_to_nat (nat_to_bv_length x y) = x", "unfolding nat_to_bv_length"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if length (nat_to_bv x) \\<le> y then bv_extend y \\<zero> (nat_to_bv x)\n     else []) \\<noteq>\n    [] \\<Longrightarrow>\n    bv_to_nat\n     (if length (nat_to_bv x) \\<le> y then bv_extend y \\<zero> (nat_to_bv x)\n      else []) =\n    x", "by auto"], ["", "definition\n  roundup :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  roundup: \"roundup x y = (if (x mod y = 0) then (x div y) else (x div y) + 1)\""], ["", "lemma rnddvd: \"b dvd a \\<Longrightarrow> roundup a b * b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b dvd a \\<Longrightarrow> roundup a b * b = a", "by (auto simp add: roundup dvd_eq_mod_eq_0)"], ["", "lemma bv_to_nat_zero_prepend: \"bv_to_nat a = bv_to_nat (\\<zero>#a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat a = bv_to_nat (\\<zero> # a)", "by auto"], ["", "primrec remzero:: \"bv \\<Rightarrow> bv\" where\n  \"remzero [] = []\"\n| \"remzero (a#b) = (if a = \\<one> then (a#b) else remzero b)\""], ["", "lemma remzeroeq: \"bv_to_nat a = bv_to_nat (remzero a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat a = bv_to_nat (remzero a)", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. bv_to_nat [] = bv_to_nat (remzero [])\n 2. \\<And>a1 a2.\n       bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n       bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "show \"bv_to_nat [] = bv_to_nat (remzero [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat [] = bv_to_nat (remzero [])", "by simp"], ["proof (state)\nthis:\n  bv_to_nat [] = bv_to_nat (remzero [])\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n       bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n       bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "case (Cons a1 a2)"], ["proof (state)\nthis:\n  bv_to_nat a2 = bv_to_nat (remzero a2)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n       bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "show \"bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n       bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n    bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "proof (cases a1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n 2. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "assume a: \"a1=\\<zero>\""], ["proof (state)\nthis:\n  a1 = \\<zero>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n 2. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "then"], ["proof (chain)\npicking this:\n  a1 = \\<zero>", "have \"bv_to_nat (a1#a2) = bv_to_nat a2\""], ["proof (prove)\nusing this:\n  a1 = \\<zero>\n\ngoal (1 subgoal):\n 1. bv_to_nat (a1 # a2) = bv_to_nat a2", "using bv_to_nat_zero_prepend"], ["proof (prove)\nusing this:\n  a1 = \\<zero>\n  bv_to_nat ?a = bv_to_nat (\\<zero> # ?a)\n\ngoal (1 subgoal):\n 1. bv_to_nat (a1 # a2) = bv_to_nat a2", "by simp"], ["proof (state)\nthis:\n  bv_to_nat (a1 # a2) = bv_to_nat a2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n 2. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "moreover"], ["proof (state)\nthis:\n  bv_to_nat (a1 # a2) = bv_to_nat a2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n 2. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "have \"remzero (a1 # a2) = remzero a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remzero (a1 # a2) = remzero a2", "using a"], ["proof (prove)\nusing this:\n  a1 = \\<zero>\n\ngoal (1 subgoal):\n 1. remzero (a1 # a2) = remzero a2", "by simp"], ["proof (state)\nthis:\n  remzero (a1 # a2) = remzero a2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<zero>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n 2. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "ultimately"], ["proof (chain)\npicking this:\n  bv_to_nat (a1 # a2) = bv_to_nat a2\n  remzero (a1 # a2) = remzero a2", "show ?thesis"], ["proof (prove)\nusing this:\n  bv_to_nat (a1 # a2) = bv_to_nat a2\n  remzero (a1 # a2) = remzero a2\n\ngoal (1 subgoal):\n 1. bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "using Cons"], ["proof (prove)\nusing this:\n  bv_to_nat (a1 # a2) = bv_to_nat a2\n  remzero (a1 # a2) = remzero a2\n  bv_to_nat a2 = bv_to_nat (remzero a2)\n\ngoal (1 subgoal):\n 1. bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "by simp"], ["proof (state)\nthis:\n  bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "assume \"a1=\\<one>\""], ["proof (state)\nthis:\n  a1 = \\<one>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bv_to_nat a2 = bv_to_nat (remzero a2); a1 = \\<one>\\<rbrakk>\n    \\<Longrightarrow> bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "then"], ["proof (chain)\npicking this:\n  a1 = \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  a1 = \\<one>\n\ngoal (1 subgoal):\n 1. bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))", "by simp"], ["proof (state)\nthis:\n  bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bv_to_nat a2 = bv_to_nat (remzero a2) \\<Longrightarrow>\n  bv_to_nat (a1 # a2) = bv_to_nat (remzero (a1 # a2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_nat_to_bv_pos: assumes x: \"1 < a\" shows \"0< length (nat_to_bv a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (nat_to_bv a)", "proof (auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "assume b: \"nat_to_bv a = []\""], ["proof (state)\nthis:\n  nat_to_bv a = []\n\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "have a: \"bv_to_nat [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat [] = 0", "by simp"], ["proof (state)\nthis:\n  bv_to_nat [] = 0\n\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "have c: \"bv_to_nat (nat_to_bv a) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat (nat_to_bv a) = 0", "using a and b"], ["proof (prove)\nusing this:\n  bv_to_nat [] = 0\n  nat_to_bv a = []\n\ngoal (1 subgoal):\n 1. bv_to_nat (nat_to_bv a) = 0", "by simp"], ["proof (state)\nthis:\n  bv_to_nat (nat_to_bv a) = 0\n\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "from x"], ["proof (chain)\npicking this:\n  1 < a", "have d: \"bv_to_nat (nat_to_bv a) = a\""], ["proof (prove)\nusing this:\n  1 < a\n\ngoal (1 subgoal):\n 1. bv_to_nat (nat_to_bv a) = a", "by simp"], ["proof (state)\nthis:\n  bv_to_nat (nat_to_bv a) = a\n\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "from d and c"], ["proof (chain)\npicking this:\n  bv_to_nat (nat_to_bv a) = a\n  bv_to_nat (nat_to_bv a) = 0", "have \"a=0\""], ["proof (prove)\nusing this:\n  bv_to_nat (nat_to_bv a) = a\n  bv_to_nat (nat_to_bv a) = 0\n\ngoal (1 subgoal):\n 1. a = 0", "by simp"], ["proof (state)\nthis:\n  a = 0\n\ngoal (1 subgoal):\n 1. nat_to_bv a = [] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a = 0", "show False"], ["proof (prove)\nusing this:\n  a = 0\n\ngoal (1 subgoal):\n 1. False", "using x"], ["proof (prove)\nusing this:\n  a = 0\n  1 < a\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remzero_replicate: \"remzero ((replicate n \\<zero>)@l) = remzero l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remzero (replicate n \\<zero> @ l) = remzero l", "by (induct n, auto)"], ["", "lemma length_bvxor_bound: \"a <= length l \\<Longrightarrow> a <= length (bvxor l l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> length l \\<Longrightarrow> a \\<le> length (bvxor l l2)", "proof (induct a)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> length l \\<Longrightarrow> 0 \\<le> length (bvxor l l2)\n 2. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "case 0"], ["proof (state)\nthis:\n  0 \\<le> length l\n\ngoal (2 subgoals):\n 1. 0 \\<le> length l \\<Longrightarrow> 0 \\<le> length (bvxor l l2)\n 2. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> length l", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<le> length l\n\ngoal (1 subgoal):\n 1. 0 \\<le> length (bvxor l l2)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "case (Suc a)"], ["proof (state)\nthis:\n  a \\<le> length l \\<Longrightarrow> a \\<le> length (bvxor l l2)\n  Suc a \\<le> length l\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "have a: \"Suc a \\<le> length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc a \\<le> length l", "by fact"], ["proof (state)\nthis:\n  Suc a \\<le> length l\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "with Suc.hyps"], ["proof (chain)\npicking this:\n  a \\<le> length l \\<Longrightarrow> a \\<le> length (bvxor l l2)\n  Suc a \\<le> length l", "have b: \"a \\<le> length (bvxor l l2)\""], ["proof (prove)\nusing this:\n  a \\<le> length l \\<Longrightarrow> a \\<le> length (bvxor l l2)\n  Suc a \\<le> length l\n\ngoal (1 subgoal):\n 1. a \\<le> length (bvxor l l2)", "by simp"], ["proof (state)\nthis:\n  a \\<le> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> length l \\<Longrightarrow>\n                a \\<le> length (bvxor l l2);\n        Suc a \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "show \"Suc a \\<le> length (bvxor l l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc a \\<le> length (bvxor l l2)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)\n 2. \\<not> ?P \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "assume c: \"a = length (bvxor l l2)\""], ["proof (state)\nthis:\n  a = length (bvxor l l2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)\n 2. \\<not> ?P \\<Longrightarrow> Suc a \\<le> length (bvxor l l2)", "show \"Suc a \\<le> length (bvxor l l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc a \\<le> length (bvxor l l2)", "proof (simp add: bvxor)"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc a \\<le> max (length l) (length l2)", "have \"length l <= max (length l) (length l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length l \\<le> max (length l) (length l2)", "by simp"], ["proof (state)\nthis:\n  length l \\<le> max (length l) (length l2)\n\ngoal (1 subgoal):\n 1. Suc a \\<le> max (length l) (length l2)", "then"], ["proof (chain)\npicking this:\n  length l \\<le> max (length l) (length l2)", "show \"Suc a \\<le> max (length l) (length l2)\""], ["proof (prove)\nusing this:\n  length l \\<le> max (length l) (length l2)\n\ngoal (1 subgoal):\n 1. Suc a \\<le> max (length l) (length l2)", "using a"], ["proof (prove)\nusing this:\n  length l \\<le> max (length l) (length l2)\n  Suc a \\<le> length l\n\ngoal (1 subgoal):\n 1. Suc a \\<le> max (length l) (length l2)", "by simp"], ["proof (state)\nthis:\n  Suc a \\<le> max (length l) (length l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc a \\<le> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. a \\<noteq> length (bvxor l l2) \\<Longrightarrow>\n    Suc a \\<le> length (bvxor l l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> length (bvxor l l2) \\<Longrightarrow>\n    Suc a \\<le> length (bvxor l l2)", "assume \"a \\<noteq> length (bvxor l l2)\""], ["proof (state)\nthis:\n  a \\<noteq> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. a \\<noteq> length (bvxor l l2) \\<Longrightarrow>\n    Suc a \\<le> length (bvxor l l2)", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> length (bvxor l l2)", "have \"a < length (bvxor l l2)\""], ["proof (prove)\nusing this:\n  a \\<noteq> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. a < length (bvxor l l2)", "using b"], ["proof (prove)\nusing this:\n  a \\<noteq> length (bvxor l l2)\n  a \\<le> length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. a < length (bvxor l l2)", "by simp"], ["proof (state)\nthis:\n  a < length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. a \\<noteq> length (bvxor l l2) \\<Longrightarrow>\n    Suc a \\<le> length (bvxor l l2)", "then"], ["proof (chain)\npicking this:\n  a < length (bvxor l l2)", "show ?thesis"], ["proof (prove)\nusing this:\n  a < length (bvxor l l2)\n\ngoal (1 subgoal):\n 1. Suc a \\<le> length (bvxor l l2)", "by simp"], ["proof (state)\nthis:\n  Suc a \\<le> length (bvxor l l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc a \\<le> length (bvxor l l2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_to_bv_helper_legacy_induct:\n  \"(\\<And>n. n \\<noteq> (0::nat) \\<longrightarrow> P (n div 2) \\<Longrightarrow> P n) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        n \\<noteq> 0 \\<longrightarrow> P (n div 2) \\<Longrightarrow>\n        P n) \\<Longrightarrow>\n    P x", "unfolding atomize_imp[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (n \\<noteq> 0 \\<Longrightarrow> P (n div 2)) \\<Longrightarrow>\n        P n) \\<Longrightarrow>\n    P x", "by (induction_schema, simp, lexicographic_order)"], ["", "lemma len_lower_bound:\n  assumes \"0 < n\"\n  shows \"2^(length (nat_to_bv n) - Suc 0) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "proof (cases \"1<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n 2. \\<not> 1 < n \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "assume l1: \"1<n\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n 2. \\<not> 1 < n \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  1 < n", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "proof (simp add: nat_to_bv_def, induct n rule: nat_to_bv_helper_legacy_induct, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n; \\<not> Suc 0 < na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na\n 2. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n; \\<not> Suc 0 < na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na\n 2. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "assume a: \"Suc 0 < (n::nat)\" and b: \"~Suc 0<n div 2\""], ["proof (state)\nthis:\n  Suc 0 < n\n  \\<not> Suc 0 < n div 2\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n; \\<not> Suc 0 < na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na\n 2. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "then"], ["proof (chain)\npicking this:\n  Suc 0 < n\n  \\<not> Suc 0 < n div 2", "have \"n=2 \\<or> n=3\""], ["proof (prove)\nusing this:\n  Suc 0 < n\n  \\<not> Suc 0 < n div 2\n\ngoal (1 subgoal):\n 1. n = 2 \\<or> n = 3", "proof (cases \"n<=3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3\n 2. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "assume \"n<=3\" and \"Suc 0<n\""], ["proof (state)\nthis:\n  n \\<le> 3\n  Suc 0 < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3\n 2. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "then"], ["proof (chain)\npicking this:\n  n \\<le> 3\n  Suc 0 < n", "show \"n=2 \\<or> n=3\""], ["proof (prove)\nusing this:\n  n \\<le> 3\n  Suc 0 < n\n\ngoal (1 subgoal):\n 1. n = 2 \\<or> n = 3", "by auto"], ["proof (state)\nthis:\n  n = 2 \\<or> n = 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "assume \"~n<=3\""], ["proof (state)\nthis:\n  \\<not> n \\<le> 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "then"], ["proof (chain)\npicking this:\n  \\<not> n \\<le> 3", "have \"3<n\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> 3\n\ngoal (1 subgoal):\n 1. 3 < n", "by simp"], ["proof (state)\nthis:\n  3 < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "then"], ["proof (chain)\npicking this:\n  3 < n", "have \"1 < n div 2\""], ["proof (prove)\nusing this:\n  3 < n\n\ngoal (1 subgoal):\n 1. 1 < n div 2", "by arith"], ["proof (state)\nthis:\n  1 < n div 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < n; \\<not> Suc 0 < n div 2; \\<not> n \\<le> 3\\<rbrakk>\n    \\<Longrightarrow> n = 2 \\<or> n = 3", "then"], ["proof (chain)\npicking this:\n  1 < n div 2", "show \"n=2 \\<or> n=3\""], ["proof (prove)\nusing this:\n  1 < n div 2\n\ngoal (1 subgoal):\n 1. n = 2 \\<or> n = 3", "using b"], ["proof (prove)\nusing this:\n  1 < n div 2\n  \\<not> Suc 0 < n div 2\n\ngoal (1 subgoal):\n 1. n = 2 \\<or> n = 3", "by simp"], ["proof (state)\nthis:\n  n = 2 \\<or> n = 3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = 2 \\<or> n = 3\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n; \\<not> Suc 0 < na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na\n 2. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "then"], ["proof (chain)\npicking this:\n  n = 2 \\<or> n = 3", "show \"2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\""], ["proof (prove)\nusing this:\n  n = 2 \\<or> n = 3\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "proof (cases \"n=2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n = 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n 2. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "assume a: \"n=2\""], ["proof (state)\nthis:\n  n = 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n = 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n 2. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  n = 2", "have \"nat_to_bv_helper n [] = [\\<one>, \\<zero>]\""], ["proof (prove)\nusing this:\n  n = 2\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 2 \\<Longrightarrow> nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "have \"nat_to_bv_helper n [] = nat_to_bv n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = nat_to_bv n", "using b"], ["proof (prove)\nusing this:\n  \\<not> Suc 0 < n div 2\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = nat_to_bv n", "by (simp add: nat_to_bv_def)"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = nat_to_bv n\n\ngoal (1 subgoal):\n 1. n = 2 \\<Longrightarrow> nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "then"], ["proof (chain)\npicking this:\n  nat_to_bv_helper n [] = nat_to_bv n", "show ?thesis"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = nat_to_bv n\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "using a"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = nat_to_bv n\n  n = 2\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "by (simp add: nat_to_bv_non0)"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = [\\<one>, \\<zero>]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = [\\<one>, \\<zero>]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n = 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n 2. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  nat_to_bv_helper n [] = [\\<one>, \\<zero>]", "show \"2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\""], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = [\\<one>, \\<zero>]\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "using a"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = [\\<one>, \\<zero>]\n  n = 2\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "assume \"n=2 \\<or> n=3\" and \"n~=2\""], ["proof (state)\nthis:\n  n = 2 \\<or> n = 3\n  n \\<noteq> 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  n = 2 \\<or> n = 3\n  n \\<noteq> 2", "have a: \"n=3\""], ["proof (prove)\nusing this:\n  n = 2 \\<or> n = 3\n  n \\<noteq> 2\n\ngoal (1 subgoal):\n 1. n = 3", "by simp"], ["proof (state)\nthis:\n  n = 3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  n = 3", "have \"nat_to_bv_helper n [] = [\\<one>, \\<one>]\""], ["proof (prove)\nusing this:\n  n = 3\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<one>]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 3 \\<Longrightarrow> nat_to_bv_helper n [] = [\\<one>, \\<one>]", "have \"nat_to_bv_helper n [] = nat_to_bv n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = nat_to_bv n", "using a"], ["proof (prove)\nusing this:\n  n = 3\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = nat_to_bv n", "by (simp add: nat_to_bv_def)"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = nat_to_bv n\n\ngoal (1 subgoal):\n 1. n = 3 \\<Longrightarrow> nat_to_bv_helper n [] = [\\<one>, \\<one>]", "then"], ["proof (chain)\npicking this:\n  nat_to_bv_helper n [] = nat_to_bv n", "show ?thesis"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = nat_to_bv n\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<one>]", "using a"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = nat_to_bv n\n  n = 3\n\ngoal (1 subgoal):\n 1. nat_to_bv_helper n [] = [\\<one>, \\<one>]", "by (simp add: nat_to_bv_non0)"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = [\\<one>, \\<one>]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nat_to_bv_helper n [] = [\\<one>, \\<one>]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 2 \\<or> n = 3; n \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  nat_to_bv_helper n [] = [\\<one>, \\<one>]", "show \"2^(length (nat_to_bv_helper n []) - Suc 0) <=n\""], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = [\\<one>, \\<one>]\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "using a"], ["proof (prove)\nusing this:\n  nat_to_bv_helper n [] = [\\<one>, \\<one>]\n  n = 3\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "assume a: \"Suc 0<n\" and\n      b: \"2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) \\<le> n div 2\""], ["proof (state)\nthis:\n  Suc 0 < n\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) \\<le> n div 2\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "have \"(2::nat) ^ (length (nat_to_bv_helper n []) - Suc 0) =\n      2^(length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)", "have \"length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1", "using a"], ["proof (prove)\nusing this:\n  Suc 0 < n\n\ngoal (1 subgoal):\n 1. length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1", "by (simp add: nat_to_bv_non0)"], ["proof (state)\nthis:\n  length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)", "then"], ["proof (chain)\npicking this:\n  length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  length (nat_to_bv n) = length (nat_to_bv (n div 2)) + 1\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)", "by (simp add: nat_to_bv_def)"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "moreover"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "have \"(2::nat)^(length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n      2^(length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ length (nat_to_bv_helper (n div 2) []) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "have \"(2::nat)^(length (nat_to_bv_helper (n div 2) []) -Suc 0)*2 =\n        2^(length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2 =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2 =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)\n\ngoal (1 subgoal):\n 1. 2 ^ length (nat_to_bv_helper (n div 2) []) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "moreover"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2 =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)\n\ngoal (1 subgoal):\n 1. 2 ^ length (nat_to_bv_helper (n div 2) []) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "have \"(2::nat)^(length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n        2^(length (nat_to_bv_helper (n div 2) []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "have \"0<n div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n div 2", "using a"], ["proof (prove)\nusing this:\n  Suc 0 < n\n\ngoal (1 subgoal):\n 1. 0 < n div 2", "by arith"], ["proof (state)\nthis:\n  0 < n div 2\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "then"], ["proof (chain)\npicking this:\n  0 < n div 2", "have \"0<length (nat_to_bv (n div 2))\""], ["proof (prove)\nusing this:\n  0 < n div 2\n\ngoal (1 subgoal):\n 1. 0 < length (nat_to_bv (n div 2))", "by (simp add: nat_to_bv_non0)"], ["proof (state)\nthis:\n  0 < length (nat_to_bv (n div 2))\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "then"], ["proof (chain)\npicking this:\n  0 < length (nat_to_bv (n div 2))", "have \"0< length (nat_to_bv_helper (n div 2) [])\""], ["proof (prove)\nusing this:\n  0 < length (nat_to_bv (n div 2))\n\ngoal (1 subgoal):\n 1. 0 < length (nat_to_bv_helper (n div 2) [])", "using a"], ["proof (prove)\nusing this:\n  0 < length (nat_to_bv (n div 2))\n  Suc 0 < n\n\ngoal (1 subgoal):\n 1. 0 < length (nat_to_bv_helper (n div 2) [])", "by (simp add: nat_to_bv_def)"], ["proof (state)\nthis:\n  0 < length (nat_to_bv_helper (n div 2) [])\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "then"], ["proof (chain)\npicking this:\n  0 < length (nat_to_bv_helper (n div 2) [])", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length (nat_to_bv_helper (n div 2) [])\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n    2 ^ length (nat_to_bv_helper (n div 2) [])", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n  2 ^ length (nat_to_bv_helper (n div 2) [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n  2 ^ length (nat_to_bv_helper (n div 2) [])\n\ngoal (1 subgoal):\n 1. 2 ^ length (nat_to_bv_helper (n div 2) []) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "ultimately"], ["proof (chain)\npicking this:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2 =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n  2 ^ length (nat_to_bv_helper (n div 2) [])", "show \"(2::nat) ^ length (nat_to_bv_helper (n div 2) []) =\n        2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\""], ["proof (prove)\nusing this:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2 =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1)\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0 + 1) =\n  2 ^ length (nat_to_bv_helper (n div 2) [])\n\ngoal (1 subgoal):\n 1. 2 ^ length (nat_to_bv_helper (n div 2) []) =\n    2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "by simp"], ["proof (state)\nthis:\n  2 ^ length (nat_to_bv_helper (n div 2) []) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>Suc 0 < na; Suc 0 < n;\n        2 ^ (length (nat_to_bv_helper (na div 2) []) - Suc 0)\n        \\<le> na div 2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ (length (nat_to_bv_helper na []) - Suc 0)\n                         \\<le> na", "ultimately"], ["proof (chain)\npicking this:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2", "show  \"2 ^ (length (nat_to_bv_helper n []) - Suc 0) <= n\""], ["proof (prove)\nusing this:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "using b"], ["proof (prove)\nusing this:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0)\n  2 ^ (length (nat_to_bv_helper (n div 2) []) + 1 - Suc 0) =\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) * 2\n  2 ^ (length (nat_to_bv_helper (n div 2) []) - Suc 0) \\<le> n div 2\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n", "by (simp add: nat_to_bv_def) arith"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv_helper n []) - Suc 0) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "assume c: \"~1<n\""], ["proof (state)\nthis:\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "proof (cases \"n=1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n 2. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "assume a: \"n=1\""], ["proof (state)\nthis:\n  n = 1\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n 2. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  n = 1", "have \"nat_to_bv n = [\\<one>]\""], ["proof (prove)\nusing this:\n  n = 1\n\ngoal (1 subgoal):\n 1. nat_to_bv n = [\\<one>]", "by (simp add: nat_to_bv_non0)"], ["proof (state)\nthis:\n  nat_to_bv n = [\\<one>]\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n 2. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "then"], ["proof (chain)\npicking this:\n  nat_to_bv n = [\\<one>]", "show \"2^(length (nat_to_bv n) - Suc 0) <= n\""], ["proof (prove)\nusing this:\n  nat_to_bv n = [\\<one>]\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "using a"], ["proof (prove)\nusing this:\n  nat_to_bv n = [\\<one>]\n  n = 1\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "assume \"n~=1\""], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow>\n    2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "with \\<open>0 < n\\<close>"], ["proof (chain)\npicking this:\n  0 < n\n  n \\<noteq> 1", "show \"2^(length (nat_to_bv n) - Suc 0) <= n\""], ["proof (prove)\nusing this:\n  0 < n\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "using c"], ["proof (prove)\nusing this:\n  0 < n\n  n \\<noteq> 1\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. 2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n", "by simp"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (length (nat_to_bv n) - Suc 0) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_lower: assumes a: \"length a < length b\" and b: \"(hd b) ~= \\<zero>\" shows \"bv_to_nat a < bv_to_nat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "have ha: \"bv_to_nat a < 2^length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bv_to_nat a < 2 ^ length a", "by (simp add: bv_to_nat_upper_range)"], ["proof (state)\nthis:\n  bv_to_nat a < 2 ^ length a\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "have \"b ~= []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<noteq> []", "using a"], ["proof (prove)\nusing this:\n  length a < length b\n\ngoal (1 subgoal):\n 1. b \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "then"], ["proof (chain)\npicking this:\n  b \\<noteq> []", "have \"b=(hd b)#(tl b)\""], ["proof (prove)\nusing this:\n  b \\<noteq> []\n\ngoal (1 subgoal):\n 1. b = hd b # tl b", "by simp"], ["proof (state)\nthis:\n  b = hd b # tl b\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "then"], ["proof (chain)\npicking this:\n  b = hd b # tl b", "have \"bv_to_nat b = bitval (hd b) * 2^(length (tl b)) + bv_to_nat (tl b)\""], ["proof (prove)\nusing this:\n  b = hd b # tl b\n\ngoal (1 subgoal):\n 1. bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)", "using bv_to_nat_helper[of \"hd b\" \"tl b\"]"], ["proof (prove)\nusing this:\n  b = hd b # tl b\n  bv_to_nat (hd b # tl b) =\n  bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)\n\ngoal (1 subgoal):\n 1. bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)", "by simp"], ["proof (state)\nthis:\n  bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "moreover"], ["proof (state)\nthis:\n  bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "have \"bitval (hd b) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bitval (hd b) = 1", "proof (cases \"hd b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. hd b = \\<zero> \\<Longrightarrow> bitval (hd b) = 1\n 2. hd b = \\<one> \\<Longrightarrow> bitval (hd b) = 1", "assume \"hd b = \\<zero> \""], ["proof (state)\nthis:\n  hd b = \\<zero>\n\ngoal (2 subgoals):\n 1. hd b = \\<zero> \\<Longrightarrow> bitval (hd b) = 1\n 2. hd b = \\<one> \\<Longrightarrow> bitval (hd b) = 1", "then"], ["proof (chain)\npicking this:\n  hd b = \\<zero>", "show  \"bitval (hd b) = 1\""], ["proof (prove)\nusing this:\n  hd b = \\<zero>\n\ngoal (1 subgoal):\n 1. bitval (hd b) = 1", "using b"], ["proof (prove)\nusing this:\n  hd b = \\<zero>\n  hd b \\<noteq> \\<zero>\n\ngoal (1 subgoal):\n 1. bitval (hd b) = 1", "by simp"], ["proof (state)\nthis:\n  bitval (hd b) = 1\n\ngoal (1 subgoal):\n 1. hd b = \\<one> \\<Longrightarrow> bitval (hd b) = 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. hd b = \\<one> \\<Longrightarrow> bitval (hd b) = 1", "assume \"hd b = \\<one>\""], ["proof (state)\nthis:\n  hd b = \\<one>\n\ngoal (1 subgoal):\n 1. hd b = \\<one> \\<Longrightarrow> bitval (hd b) = 1", "then"], ["proof (chain)\npicking this:\n  hd b = \\<one>", "show \"bitval (hd b) = 1\""], ["proof (prove)\nusing this:\n  hd b = \\<one>\n\ngoal (1 subgoal):\n 1. bitval (hd b) = 1", "by simp"], ["proof (state)\nthis:\n  bitval (hd b) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bitval (hd b) = 1\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "ultimately"], ["proof (chain)\npicking this:\n  bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)\n  bitval (hd b) = 1", "have hb: \"2^length (tl b) <= bv_to_nat b\""], ["proof (prove)\nusing this:\n  bv_to_nat b = bitval (hd b) * 2 ^ length (tl b) + bv_to_nat (tl b)\n  bitval (hd b) = 1\n\ngoal (1 subgoal):\n 1. 2 ^ length (tl b) \\<le> bv_to_nat b", "by simp"], ["proof (state)\nthis:\n  2 ^ length (tl b) \\<le> bv_to_nat b\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "have \"2^(length a) <= (2::nat)^length (tl b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ length a \\<le> 2 ^ length (tl b)", "using a"], ["proof (prove)\nusing this:\n  length a < length b\n\ngoal (1 subgoal):\n 1. 2 ^ length a \\<le> 2 ^ length (tl b)", "by auto"], ["proof (state)\nthis:\n  2 ^ length a \\<le> 2 ^ length (tl b)\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "then"], ["proof (chain)\npicking this:\n  2 ^ length a \\<le> 2 ^ length (tl b)", "show ?thesis"], ["proof (prove)\nusing this:\n  2 ^ length a \\<le> 2 ^ length (tl b)\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "using hb and ha"], ["proof (prove)\nusing this:\n  2 ^ length a \\<le> 2 ^ length (tl b)\n  2 ^ length (tl b) \\<le> bv_to_nat b\n  bv_to_nat a < 2 ^ length a\n\ngoal (1 subgoal):\n 1. bv_to_nat a < bv_to_nat b", "by arith"], ["proof (state)\nthis:\n  bv_to_nat a < bv_to_nat b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_to_bv_non_empty: assumes a: \"0<n\" shows \"nat_to_bv n ~= []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv n \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nat_to_bv n \\<noteq> []", "from nat_to_bv_non0[of n]"], ["proof (chain)\npicking this:\n  n \\<noteq> 0 \\<Longrightarrow>\n  nat_to_bv n =\n  nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>]", "have \"\\<exists>x. nat_to_bv n = x@[if n mod 2 = 0 then \\<zero> else \\<one>]\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0 \\<Longrightarrow>\n  nat_to_bv n =\n  nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>]\n\ngoal (1 subgoal):\n 1. \\<exists>x. nat_to_bv n = x @ [if n mod 2 = 0 then \\<zero> else \\<one>]", "using a"], ["proof (prove)\nusing this:\n  n \\<noteq> 0 \\<Longrightarrow>\n  nat_to_bv n =\n  nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>]\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<exists>x. nat_to_bv n = x @ [if n mod 2 = 0 then \\<zero> else \\<one>]", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. nat_to_bv n = x @ [if n mod 2 = 0 then \\<zero> else \\<one>]\n\ngoal (1 subgoal):\n 1. nat_to_bv n \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. nat_to_bv n = x @ [if n mod 2 = 0 then \\<zero> else \\<one>]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x. nat_to_bv n = x @ [if n mod 2 = 0 then \\<zero> else \\<one>]\n\ngoal (1 subgoal):\n 1. nat_to_bv n \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  nat_to_bv n \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hd_append: \"x ~= [] \\<Longrightarrow> hd (x @ xs) = hd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] \\<Longrightarrow> hd (x @ xs) = hd x", "by (induct x) auto"], ["", "lemma hd_one: \"0<n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "proof (induct n rule: nat_to_bv_helper_legacy_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<noteq> 0 \\<longrightarrow>\n                0 < n div 2 \\<longrightarrow>\n                hd (nat_to_bv_helper (n div 2) []) = \\<one>;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<noteq> 0 \\<longrightarrow>\n                0 < n div 2 \\<longrightarrow>\n                hd (nat_to_bv_helper (n div 2) []) = \\<one>;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "assume *: \"n \\<noteq> 0 \\<longrightarrow> 0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\"\n    and \"0 < n\""], ["proof (state)\nthis:\n  n \\<noteq> 0 \\<longrightarrow>\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n \\<noteq> 0 \\<longrightarrow>\n                0 < n div 2 \\<longrightarrow>\n                hd (nat_to_bv_helper (n div 2) []) = \\<one>;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "show \"hd (nat_to_bv_helper n []) = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = \\<one>", "proof (cases \"1<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "assume a: \"1<n\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "with *"], ["proof (chain)\npicking this:\n  n \\<noteq> 0 \\<longrightarrow>\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n  1 < n", "have b: \"0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0 \\<longrightarrow>\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < n div 2 \\<longrightarrow>\n    hd (nat_to_bv_helper (n div 2) []) = \\<one>", "by simp"], ["proof (state)\nthis:\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "from a"], ["proof (chain)\npicking this:\n  1 < n", "have c: \"0<n div 2\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < n div 2", "by arith"], ["proof (state)\nthis:\n  0 < n div 2\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  0 < n div 2", "have d: \"hd (nat_to_bv_helper (n div 2) []) = \\<one>\""], ["proof (prove)\nusing this:\n  0 < n div 2\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper (n div 2) []) = \\<one>", "using b"], ["proof (prove)\nusing this:\n  0 < n div 2\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper (n div 2) []) = \\<one>", "by simp"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper (n div 2) []) = \\<one>\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "also"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper (n div 2) []) = \\<one>\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "from a"], ["proof (chain)\npicking this:\n  1 < n", "have \"0<n\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < n", "by simp"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  0 < n", "have \"hd (nat_to_bv_helper n []) =\n        hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) =\n    hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])", "using nat_to_bv_def and nat_to_bv_non0[of n]"], ["proof (prove)\nusing this:\n  0 < n\n  nat_to_bv ?n = nat_to_bv_helper ?n []\n  n \\<noteq> 0 \\<Longrightarrow>\n  nat_to_bv n =\n  nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>]\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) =\n    hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])", "by auto"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) =\n  hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  hd (nat_to_bv_helper n []) =\n  hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])", "have \"hd (nat_to_bv_helper n []) =\n        hd (nat_to_bv (n div 2))\""], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) =\n  hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))", "using nat_to_bv_non0[of \"n div 2\"] and c and\n        nat_to_bv_non_empty[of \"n div 2\"] and hd_append[of \" nat_to_bv (n div 2)\"]"], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) =\n  hd (nat_to_bv (n div 2) @ [if n mod 2 = 0 then \\<zero> else \\<one>])\n  n div 2 \\<noteq> 0 \\<Longrightarrow>\n  nat_to_bv (n div 2) =\n  nat_to_bv (n div 2 div 2) @\n  [if n div 2 mod 2 = 0 then \\<zero> else \\<one>]\n  0 < n div 2\n  0 < n div 2 \\<Longrightarrow> nat_to_bv (n div 2) \\<noteq> []\n  nat_to_bv (n div 2) \\<noteq> [] \\<Longrightarrow>\n  hd (nat_to_bv (n div 2) @ ?xs) = hd (nat_to_bv (n div 2))\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))", "by auto"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))", "have \"hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])\""], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])", "using nat_to_bv_def"], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv (n div 2))\n  nat_to_bv ?n = nat_to_bv_helper ?n []\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])", "by simp"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])\n\ngoal (2 subgoals):\n 1. 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>\n 2. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])", "show \"hd (nat_to_bv_helper n []) = \\<one>\""], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = \\<one>", "using b and c"], ["proof (prove)\nusing this:\n  hd (nat_to_bv_helper n []) = hd (nat_to_bv_helper (n div 2) [])\n  0 < n div 2 \\<longrightarrow> hd (nat_to_bv_helper (n div 2) []) = \\<one>\n  0 < n div 2\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = \\<one>", "by simp"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) = \\<one>\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "assume \"~1 < n\""], ["proof (state)\nthis:\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "with \\<open>0<n\\<close>"], ["proof (chain)\npicking this:\n  0 < n\n  \\<not> 1 < n", "have c: \"n=1\""], ["proof (prove)\nusing this:\n  0 < n\n  \\<not> 1 < n\n\ngoal (1 subgoal):\n 1. n = 1", "by simp"], ["proof (state)\nthis:\n  n = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "have \"nat_to_bv_helper 1 [] = [\\<one>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_to_bv_helper 1 [] = [\\<one>]", "by (simp add: nat_to_bv_helper.simps)"], ["proof (state)\nthis:\n  nat_to_bv_helper 1 [] = [\\<one>]\n\ngoal (1 subgoal):\n 1. \\<not> 1 < n \\<Longrightarrow> hd (nat_to_bv_helper n []) = \\<one>", "then"], ["proof (chain)\npicking this:\n  nat_to_bv_helper 1 [] = [\\<one>]", "show \"hd (nat_to_bv_helper n []) = \\<one>\""], ["proof (prove)\nusing this:\n  nat_to_bv_helper 1 [] = [\\<one>]\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = \\<one>", "using c"], ["proof (prove)\nusing this:\n  nat_to_bv_helper 1 [] = [\\<one>]\n  n = 1\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv_helper n []) = \\<one>", "by simp"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (nat_to_bv_helper n []) = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_hd_non_zero: \n  fixes p::nat assumes a: \"prime p\" and b: \"prime q\" shows \"hd (nat_to_bv (p*q)) ~= \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (nat_to_bv (p * q)) \\<noteq> \\<zero>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hd (nat_to_bv (p * q)) \\<noteq> \\<zero>", "have \"0 < p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p * q", "by (metis a b mult_is_0 neq0_conv not_prime_0)"], ["proof (state)\nthis:\n  0 < p * q\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv (p * q)) \\<noteq> \\<zero>", "then"], ["proof (chain)\npicking this:\n  0 < p * q", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < p * q\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv (p * q)) \\<noteq> \\<zero>", "using hd_one[of \"p*q\"] and nat_to_bv_def"], ["proof (prove)\nusing this:\n  0 < p * q\n  0 < p * q \\<Longrightarrow> hd (nat_to_bv_helper (p * q) []) = \\<one>\n  nat_to_bv ?n = nat_to_bv_helper ?n []\n\ngoal (1 subgoal):\n 1. hd (nat_to_bv (p * q)) \\<noteq> \\<zero>", "by auto"], ["proof (state)\nthis:\n  hd (nat_to_bv (p * q)) \\<noteq> \\<zero>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primerew: fixes p::nat shows  \"\\<lbrakk>m dvd p; m~=1; m~=p\\<rbrakk> \\<Longrightarrow> ~ prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m dvd p; m \\<noteq> 1; m \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> \\<not> prime p", "by (auto simp add: prime_nat_iff)"], ["", "lemma two_dvd_exp: \"0<x \\<Longrightarrow> (2::nat) dvd 2^x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> even (2 ^ x)", "by (induct x) auto"], ["", "lemma exp_prod1: \"\\<lbrakk>1<b;2^x=2*(b::nat)\\<rbrakk> \\<Longrightarrow> 2 dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; 2 ^ x = 2 * b\\<rbrakk> \\<Longrightarrow> even b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; 2 ^ x = 2 * b\\<rbrakk> \\<Longrightarrow> even b", "assume a: \"1<b\" and b: \"2^x=2*(b::nat)\""], ["proof (state)\nthis:\n  1 < b\n  2 ^ x = 2 * b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; 2 ^ x = 2 * b\\<rbrakk> \\<Longrightarrow> even b", "have s1: \"1<x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < x", "proof (cases \"1<x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < x \\<Longrightarrow> 1 < x\n 2. \\<not> 1 < x \\<Longrightarrow> 1 < x", "assume \"1<x\""], ["proof (state)\nthis:\n  1 < x\n\ngoal (2 subgoals):\n 1. 1 < x \\<Longrightarrow> 1 < x\n 2. \\<not> 1 < x \\<Longrightarrow> 1 < x", "then"], ["proof (chain)\npicking this:\n  1 < x", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < x\n\ngoal (1 subgoal):\n 1. 1 < x", "by simp"], ["proof (state)\nthis:\n  1 < x\n\ngoal (1 subgoal):\n 1. \\<not> 1 < x \\<Longrightarrow> 1 < x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < x \\<Longrightarrow> 1 < x", "assume x: \"~1 < x\""], ["proof (state)\nthis:\n  \\<not> 1 < x\n\ngoal (1 subgoal):\n 1. \\<not> 1 < x \\<Longrightarrow> 1 < x", "then"], ["proof (chain)\npicking this:\n  \\<not> 1 < x", "have \"2^x <= (2::nat)\""], ["proof (prove)\nusing this:\n  \\<not> 1 < x\n\ngoal (1 subgoal):\n 1. 2 ^ x \\<le> 2", "using b"], ["proof (prove)\nusing this:\n  \\<not> 1 < x\n  2 ^ x = 2 * b\n\ngoal (1 subgoal):\n 1. 2 ^ x \\<le> 2", "proof (cases \"x=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x = 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2\n 2. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "assume \"x=0\""], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x = 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2\n 2. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "then"], ["proof (chain)\npicking this:\n  x = 0", "show \"2^x <= (2::nat)\""], ["proof (prove)\nusing this:\n  x = 0\n\ngoal (1 subgoal):\n 1. 2 ^ x \\<le> 2", "by simp"], ["proof (state)\nthis:\n  2 ^ x \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "assume \"x~=0\""], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "have \"x=1\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x = 1", "using x"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n  \\<not> 1 < x\n\ngoal (1 subgoal):\n 1. x = 1", "by simp"], ["proof (state)\nthis:\n  x = 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> 1 < x; 2 ^ x = 2 * b; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 2 ^ x \\<le> 2", "then"], ["proof (chain)\npicking this:\n  x = 1", "show \"2^x <= (2::nat)\""], ["proof (prove)\nusing this:\n  x = 1\n\ngoal (1 subgoal):\n 1. 2 ^ x \\<le> 2", "by simp"], ["proof (state)\nthis:\n  2 ^ x \\<le> 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ x \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<not> 1 < x \\<Longrightarrow> 1 < x", "then"], ["proof (chain)\npicking this:\n  2 ^ x \\<le> 2", "have \"b<=1\""], ["proof (prove)\nusing this:\n  2 ^ x \\<le> 2\n\ngoal (1 subgoal):\n 1. b \\<le> 1", "using b"], ["proof (prove)\nusing this:\n  2 ^ x \\<le> 2\n  2 ^ x = 2 * b\n\ngoal (1 subgoal):\n 1. b \\<le> 1", "by simp"], ["proof (state)\nthis:\n  b \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < x \\<Longrightarrow> 1 < x", "then"], ["proof (chain)\npicking this:\n  b \\<le> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<le> 1\n\ngoal (1 subgoal):\n 1. 1 < x", "using a"], ["proof (prove)\nusing this:\n  b \\<le> 1\n  1 < b\n\ngoal (1 subgoal):\n 1. 1 < x", "by simp"], ["proof (state)\nthis:\n  1 < x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; 2 ^ x = 2 * b\\<rbrakk> \\<Longrightarrow> even b", "have s2: \"2^(x-(1::nat)) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ (x - 1) = b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ (x - 1) = b", "from s1 b"], ["proof (chain)\npicking this:\n  1 < x\n  2 ^ x = 2 * b", "have \"2^((x-Suc 0)+1) = 2*b\""], ["proof (prove)\nusing this:\n  1 < x\n  2 ^ x = 2 * b\n\ngoal (1 subgoal):\n 1. 2 ^ (x - Suc 0 + 1) = 2 * b", "by simp"], ["proof (state)\nthis:\n  2 ^ (x - Suc 0 + 1) = 2 * b\n\ngoal (1 subgoal):\n 1. 2 ^ (x - 1) = b", "then"], ["proof (chain)\npicking this:\n  2 ^ (x - Suc 0 + 1) = 2 * b", "have \"2*2^(x-Suc 0) = 2*b\""], ["proof (prove)\nusing this:\n  2 ^ (x - Suc 0 + 1) = 2 * b\n\ngoal (1 subgoal):\n 1. 2 * 2 ^ (x - Suc 0) = 2 * b", "by simp"], ["proof (state)\nthis:\n  2 * 2 ^ (x - Suc 0) = 2 * b\n\ngoal (1 subgoal):\n 1. 2 ^ (x - 1) = b", "then"], ["proof (chain)\npicking this:\n  2 * 2 ^ (x - Suc 0) = 2 * b", "show \"2^(x-(1::nat)) = b\""], ["proof (prove)\nusing this:\n  2 * 2 ^ (x - Suc 0) = 2 * b\n\ngoal (1 subgoal):\n 1. 2 ^ (x - 1) = b", "by simp"], ["proof (state)\nthis:\n  2 ^ (x - 1) = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ (x - 1) = b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < b; 2 ^ x = 2 * b\\<rbrakk> \\<Longrightarrow> even b", "from s1 and s2"], ["proof (chain)\npicking this:\n  1 < x\n  2 ^ (x - 1) = b", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < x\n  2 ^ (x - 1) = b\n\ngoal (1 subgoal):\n 1. even b", "using two_dvd_exp[of \"x-(1::nat)\"]"], ["proof (prove)\nusing this:\n  1 < x\n  2 ^ (x - 1) = b\n  0 < x - 1 \\<Longrightarrow> even (2 ^ (x - 1))\n\ngoal (1 subgoal):\n 1. even b", "by simp"], ["proof (state)\nthis:\n  even b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exp_prod2: \"\\<lbrakk>1<a; 2^x=a*2\\<rbrakk> \\<Longrightarrow> (2::nat) dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "assume \"2^x=a*2\""], ["proof (state)\nthis:\n  2 ^ x = a * 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "then"], ["proof (chain)\npicking this:\n  2 ^ x = a * 2", "have \"2^x=2*a\""], ["proof (prove)\nusing this:\n  2 ^ x = a * 2\n\ngoal (1 subgoal):\n 1. 2 ^ x = 2 * a", "by simp"], ["proof (state)\nthis:\n  2 ^ x = 2 * a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "moreover"], ["proof (state)\nthis:\n  2 ^ x = 2 * a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "assume \"1<a\""], ["proof (state)\nthis:\n  1 < a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < a; 2 ^ x = a * 2\\<rbrakk> \\<Longrightarrow> even a", "ultimately"], ["proof (chain)\npicking this:\n  2 ^ x = 2 * a\n  1 < a", "show \"2 dvd a\""], ["proof (prove)\nusing this:\n  2 ^ x = 2 * a\n  1 < a\n\ngoal (1 subgoal):\n 1. even a", "using exp_prod1"], ["proof (prove)\nusing this:\n  2 ^ x = 2 * a\n  1 < a\n  \\<lbrakk>1 < ?b; 2 ^ ?x = 2 * ?b\\<rbrakk> \\<Longrightarrow> even ?b\n\ngoal (1 subgoal):\n 1. even a", "by simp"], ["proof (state)\nthis:\n  even a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma odd_mul_odd: \"\\<lbrakk>~(2::nat) dvd p; ~2 dvd q\\<rbrakk> \\<Longrightarrow> ~2 dvd p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>odd p; odd q\\<rbrakk> \\<Longrightarrow> odd (p * q)", "by simp"], ["", "lemma prime_equal: fixes p::nat shows \"\\<lbrakk>prime p; prime q; 2^x=p*q\\<rbrakk> \\<Longrightarrow> (p=q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "assume a: \"prime p\" and b: \"prime q\" and c: \"2^x=p*q\""], ["proof (state)\nthis:\n  prime p\n  prime q\n  2 ^ x = p * q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "from a"], ["proof (chain)\npicking this:\n  prime p", "have d: \"1 < p\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_nat_iff)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "moreover"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "from b"], ["proof (chain)\npicking this:\n  prime q", "have e: \"1<q\""], ["proof (prove)\nusing this:\n  prime q\n\ngoal (1 subgoal):\n 1. 1 < q", "by (simp add: prime_nat_iff)"], ["proof (state)\nthis:\n  1 < q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; 2 ^ x = p * q\\<rbrakk>\n    \\<Longrightarrow> p = q", "show \"p=q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof (cases \"p=2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> p = q\n 2. p \\<noteq> 2 \\<Longrightarrow> p = q", "assume p: \"p=2\""], ["proof (state)\nthis:\n  p = 2\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> p = q\n 2. p \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  p = 2", "have \"2 dvd q\""], ["proof (prove)\nusing this:\n  p = 2\n\ngoal (1 subgoal):\n 1. even q", "using c and exp_prod1[of q x] and e"], ["proof (prove)\nusing this:\n  p = 2\n  2 ^ x = p * q\n  \\<lbrakk>1 < q; 2 ^ x = 2 * q\\<rbrakk> \\<Longrightarrow> even q\n  1 < q\n\ngoal (1 subgoal):\n 1. even q", "by simp"], ["proof (state)\nthis:\n  even q\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> p = q\n 2. p \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  even q", "have \"2=q\""], ["proof (prove)\nusing this:\n  even q\n\ngoal (1 subgoal):\n 1. 2 = q", "using primerew[of 2 q] and b"], ["proof (prove)\nusing this:\n  even q\n  \\<lbrakk>even q; 2 \\<noteq> 1; 2 \\<noteq> q\\<rbrakk>\n  \\<Longrightarrow> \\<not> prime q\n  prime q\n\ngoal (1 subgoal):\n 1. 2 = q", "by auto"], ["proof (state)\nthis:\n  2 = q\n\ngoal (2 subgoals):\n 1. p = 2 \\<Longrightarrow> p = q\n 2. p \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  2 = q", "show ?thesis"], ["proof (prove)\nusing this:\n  2 = q\n\ngoal (1 subgoal):\n 1. p = q", "using p"], ["proof (prove)\nusing this:\n  2 = q\n  p = 2\n\ngoal (1 subgoal):\n 1. p = q", "by simp"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> p = q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> p = q", "assume p: \"p~=2\""], ["proof (state)\nthis:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. p \\<noteq> 2 \\<Longrightarrow> p = q", "show \"p=q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof (cases \"q=2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q = 2 \\<Longrightarrow> p = q\n 2. q \\<noteq> 2 \\<Longrightarrow> p = q", "assume q: \"q=2\""], ["proof (state)\nthis:\n  q = 2\n\ngoal (2 subgoals):\n 1. q = 2 \\<Longrightarrow> p = q\n 2. q \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  q = 2", "have \"2 dvd p\""], ["proof (prove)\nusing this:\n  q = 2\n\ngoal (1 subgoal):\n 1. even p", "using c and exp_prod1[of p x] and d"], ["proof (prove)\nusing this:\n  q = 2\n  2 ^ x = p * q\n  \\<lbrakk>1 < p; 2 ^ x = 2 * p\\<rbrakk> \\<Longrightarrow> even p\n  1 < p\n\ngoal (1 subgoal):\n 1. even p", "by simp"], ["proof (state)\nthis:\n  even p\n\ngoal (2 subgoals):\n 1. q = 2 \\<Longrightarrow> p = q\n 2. q \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  even p", "have \"2=p\""], ["proof (prove)\nusing this:\n  even p\n\ngoal (1 subgoal):\n 1. 2 = p", "using primerew[of 2 p] and a"], ["proof (prove)\nusing this:\n  even p\n  \\<lbrakk>even p; 2 \\<noteq> 1; 2 \\<noteq> p\\<rbrakk>\n  \\<Longrightarrow> \\<not> prime p\n  prime p\n\ngoal (1 subgoal):\n 1. 2 = p", "by auto"], ["proof (state)\nthis:\n  2 = p\n\ngoal (2 subgoals):\n 1. q = 2 \\<Longrightarrow> p = q\n 2. q \\<noteq> 2 \\<Longrightarrow> p = q", "then"], ["proof (chain)\npicking this:\n  2 = p", "show ?thesis"], ["proof (prove)\nusing this:\n  2 = p\n\ngoal (1 subgoal):\n 1. p = q", "using p"], ["proof (prove)\nusing this:\n  2 = p\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. p = q", "by simp"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 2 \\<Longrightarrow> p = q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<noteq> 2 \\<Longrightarrow> p = q", "assume q: \"q~=2\""], ["proof (state)\nthis:\n  q \\<noteq> 2\n\ngoal (1 subgoal):\n 1. q \\<noteq> 2 \\<Longrightarrow> p = q", "show \"p=q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q", "from p"], ["proof (chain)\npicking this:\n  p \\<noteq> 2", "have \"~ 2 dvd p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. odd p", "using primerew and a"], ["proof (prove)\nusing this:\n  p \\<noteq> 2\n  \\<lbrakk>?m dvd ?p; ?m \\<noteq> 1; ?m \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> prime ?p\n  prime p\n\ngoal (1 subgoal):\n 1. odd p", "by auto"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. p = q", "from q"], ["proof (chain)\npicking this:\n  q \\<noteq> 2", "have \"~2 dvd q\""], ["proof (prove)\nusing this:\n  q \\<noteq> 2\n\ngoal (1 subgoal):\n 1. odd q", "using primerew and b"], ["proof (prove)\nusing this:\n  q \\<noteq> 2\n  \\<lbrakk>?m dvd ?p; ?m \\<noteq> 1; ?m \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> prime ?p\n  prime q\n\ngoal (1 subgoal):\n 1. odd q", "by auto"], ["proof (state)\nthis:\n  odd q\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  odd p\n  odd q", "have \"~2 dvd p*q\""], ["proof (prove)\nusing this:\n  odd p\n  odd q\n\ngoal (1 subgoal):\n 1. odd (p * q)", "by (simp add: odd_mul_odd)"], ["proof (state)\nthis:\n  odd (p * q)\n\ngoal (1 subgoal):\n 1. p = q", "then"], ["proof (chain)\npicking this:\n  odd (p * q)", "have \"odd ((2 :: nat) ^ x)\""], ["proof (prove)\nusing this:\n  odd (p * q)\n\ngoal (1 subgoal):\n 1. odd (2 ^ x)", "by (simp only: c) simp"], ["proof (state)\nthis:\n  odd (2 ^ x)\n\ngoal (1 subgoal):\n 1. p = q", "moreover"], ["proof (state)\nthis:\n  odd (2 ^ x)\n\ngoal (1 subgoal):\n 1. p = q", "have \"(2::nat) dvd 2^x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (2 ^ x)", "proof (cases \"x=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> even (2 ^ x)\n 2. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "assume \"x=0\""], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> even (2 ^ x)\n 2. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "then"], ["proof (chain)\npicking this:\n  x = 0", "have \"(2::nat)^x=1\""], ["proof (prove)\nusing this:\n  x = 0\n\ngoal (1 subgoal):\n 1. 2 ^ x = 1", "by simp"], ["proof (state)\nthis:\n  2 ^ x = 1\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> even (2 ^ x)\n 2. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "then"], ["proof (chain)\npicking this:\n  2 ^ x = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  2 ^ x = 1\n\ngoal (1 subgoal):\n 1. even (2 ^ x)", "using c and d and e"], ["proof (prove)\nusing this:\n  2 ^ x = 1\n  2 ^ x = p * q\n  1 < p\n  1 < q\n\ngoal (1 subgoal):\n 1. even (2 ^ x)", "by simp"], ["proof (state)\nthis:\n  even (2 ^ x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "assume \"x~=0\""], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "have \"0<x\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < x", "by simp"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> even (2 ^ x)", "then"], ["proof (chain)\npicking this:\n  0 < x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. even (2 ^ x)", "using two_dvd_exp"], ["proof (prove)\nusing this:\n  0 < x\n  0 < ?x \\<Longrightarrow> even (2 ^ ?x)\n\ngoal (1 subgoal):\n 1. even (2 ^ x)", "by simp"], ["proof (state)\nthis:\n  even (2 ^ x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  even (2 ^ x)\n\ngoal (1 subgoal):\n 1. p = q", "ultimately"], ["proof (chain)\npicking this:\n  odd (2 ^ x)\n  even (2 ^ x)", "show ?thesis"], ["proof (prove)\nusing this:\n  odd (2 ^ x)\n  even (2 ^ x)\n\ngoal (1 subgoal):\n 1. p = q", "by simp"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_to_bv_length_bv_to_nat:\n  \"length xs = n \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> nat_to_bv_length (bv_to_nat xs) n = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> nat_to_bv_length (bv_to_nat xs) n = xs", "apply (simp only: nat_to_bv_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = n; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (if length (nat_to_bv (bv_to_nat xs)) \\<le> n\n                       then bv_extend n \\<zero> (nat_to_bv (bv_to_nat xs))\n                       else []) =\n                      xs", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; n = length xs\\<rbrakk>\n    \\<Longrightarrow> bv_extend (length xs) \\<zero> (norm_unsigned xs) = xs", "apply (simp add: bv_extend_norm_unsigned)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}