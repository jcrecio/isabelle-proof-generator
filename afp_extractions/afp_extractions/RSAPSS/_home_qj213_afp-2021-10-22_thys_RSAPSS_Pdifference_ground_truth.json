{"file_name": "/home/qj213/afp-2021-10-22/thys/RSAPSS/Pdifference.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RSAPSS", "problem_names": ["lemma timesdistributesoverpdifference:\n    \"m*(pdifference a b) = pdifference (m*(a::nat)) (m* (b::nat))\"", "lemma addconst: \"a = (b::nat) \\<Longrightarrow> c+a = c+b\"", "lemma invers: \"a \\<le> x \\<Longrightarrow> (x::nat) = x - a + a\"", "lemma invers2: \"\\<lbrakk>a \\<le> b; (b-a) = p*q\\<rbrakk> \\<Longrightarrow> (b::nat) = a+p*q\"", "lemma modadd: \"\\<lbrakk>b = a+p*q\\<rbrakk> \\<Longrightarrow> (a::nat) mod p = b mod p\"", "lemma equalmodstrick1: \"pdifference a b mod p = 0 \\<Longrightarrow> a mod p = b mod p\"", "lemma diff_add_assoc: \"b \\<le> c \\<Longrightarrow> c - (c - b) = c - c + (b::nat)\"", "lemma diff_add_assoc2: \"a \\<le> c \\<Longrightarrow> c - (c - a + b) = (c - c + (a::nat) - b)\"", "lemma diff_add_diff: \"x \\<le> b \\<Longrightarrow> (b::nat) - x + y - b = y - x\"", "lemma equalmodstrick2:\n  assumes \"a mod p = b mod p\"\n  shows \"pdifference a b mod p = 0\"", "lemma primekeyrewrite:\n  fixes p::nat shows \"\\<lbrakk>prime p; p dvd (a*b);~(p dvd a)\\<rbrakk> \\<Longrightarrow> p dvd b\"", "lemma multzero: \"\\<lbrakk>0 < m mod p; m*a = 0\\<rbrakk> \\<Longrightarrow> (a::nat) = 0\"", "lemma primekeytrick:\n  fixes A B :: nat\n  assumes \"(M * A) mod P = (M * B) mod P\"\n  assumes \"M mod P \\<noteq> 0\" and \"prime P\"\n  shows \"A mod P = B mod P\""], "translations": [["", "lemma timesdistributesoverpdifference:\n    \"m*(pdifference a b) = pdifference (m*(a::nat)) (m* (b::nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m * pdifference a b = pdifference (m * a) (m * b)", "by (auto simp add: nat_distrib)"], ["", "lemma addconst: \"a = (b::nat) \\<Longrightarrow> c+a = c+b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow> c + a = c + b", "by auto"], ["", "lemma invers: \"a \\<le> x \\<Longrightarrow> (x::nat) = x - a + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> x \\<Longrightarrow> x = x - a + a", "by auto"], ["", "lemma invers2: \"\\<lbrakk>a \\<le> b; (b-a) = p*q\\<rbrakk> \\<Longrightarrow> (b::nat) = a+p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; b - a = p * q\\<rbrakk>\n    \\<Longrightarrow> b = a + p * q", "apply (subst addconst [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; b - a = p * q\\<rbrakk> \\<Longrightarrow> ?a = p * q\n 2. \\<lbrakk>a \\<le> b; b - a = p * q\\<rbrakk> \\<Longrightarrow> b = a + ?a", "apply (assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; b - a = p * q\\<rbrakk>\n    \\<Longrightarrow> b = a + (b - a)", "apply (subst add.commute, rule invers, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma modadd: \"\\<lbrakk>b = a+p*q\\<rbrakk> \\<Longrightarrow> (a::nat) mod p = b mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = a + p * q \\<Longrightarrow> a mod p = b mod p", "by auto"], ["", "lemma equalmodstrick1: \"pdifference a b mod p = 0 \\<Longrightarrow> a mod p = b mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0 \\<Longrightarrow> a mod p = b mod p", "using mod_eq_dvd_iff_nat [of a b p] mod_eq_dvd_iff_nat [of b a p]"], ["proof (prove)\nusing this:\n  a \\<le> b \\<Longrightarrow> (b mod p = a mod p) = (p dvd b - a)\n  b \\<le> a \\<Longrightarrow> (a mod p = b mod p) = (p dvd a - b)\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0 \\<Longrightarrow> a mod p = b mod p", "by (cases \"a < b\") auto"], ["", "lemma diff_add_assoc: \"b \\<le> c \\<Longrightarrow> c - (c - b) = c - c + (b::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<le> c \\<Longrightarrow> c - (c - b) = c - c + b", "by auto"], ["", "lemma diff_add_assoc2: \"a \\<le> c \\<Longrightarrow> c - (c - a + b) = (c - c + (a::nat) - b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> c \\<Longrightarrow> c - (c - a + b) = c - c + a - b", "apply (subst diff_diff_left [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> c \\<Longrightarrow> c - (c - a) - b = c - c + a - b", "apply (subst diff_add_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<le> c \\<Longrightarrow> a \\<le> c\n 2. a \\<le> c \\<Longrightarrow> c - c + a - b = c - c + a - b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma diff_add_diff: \"x \\<le> b \\<Longrightarrow> (b::nat) - x + y - b = y - x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> b \\<Longrightarrow> b - x + y - b = y - x", "by (induct b) auto"], ["", "lemma equalmodstrick2:\n  assumes \"a mod p = b mod p\"\n  shows \"pdifference a b mod p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "assume *: \"a mod p = b mod p\""], ["proof (state)\nthis:\n  a mod p = b mod p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "have \"a - b = a div p * p + a mod p - b div p * p - b mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b = a div p * p + a mod p - b div p * p - b mod p", "by simp"], ["proof (state)\nthis:\n  a - b = a div p * p + a mod p - b div p * p - b mod p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "also"], ["proof (state)\nthis:\n  a - b = a div p * p + a mod p - b div p * p - b mod p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "have \"\\<dots> = a div p * p - b div p * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div p * p + a mod p - b div p * p - b mod p =\n    a div p * p - b div p * p", "using *"], ["proof (prove)\nusing this:\n  a mod p = b mod p\n\ngoal (1 subgoal):\n 1. a div p * p + a mod p - b div p * p - b mod p =\n    a div p * p - b div p * p", "by (simp only:)"], ["proof (state)\nthis:\n  a div p * p + a mod p - b div p * p - b mod p = a div p * p - b div p * p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "also"], ["proof (state)\nthis:\n  a div p * p + a mod p - b div p * p - b mod p = a div p * p - b div p * p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "have \"\\<dots> = (a div p - b div p) * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a div p * p - b div p * p = (a div p - b div p) * p", "by (simp add: diff_mult_distrib)"], ["proof (state)\nthis:\n  a div p * p - b div p * p = (a div p - b div p) * p\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "finally"], ["proof (chain)\npicking this:\n  a - b = (a div p - b div p) * p", "have \"(a - b) mod p = 0\""], ["proof (prove)\nusing this:\n  a - b = (a div p - b div p) * p\n\ngoal (1 subgoal):\n 1. (a - b) mod p = 0", "by simp"], ["proof (state)\nthis:\n  (a - b) mod p = 0\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "}"], ["proof (state)\nthis:\n  ?aa2 mod p = ?ba2 mod p \\<Longrightarrow> (?aa2 - ?ba2) mod p = 0\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "from this [OF assms] this [OF assms [symmetric]]"], ["proof (chain)\npicking this:\n  (a - b) mod p = 0\n  (b - a) mod p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (a - b) mod p = 0\n  (b - a) mod p = 0\n\ngoal (1 subgoal):\n 1. pdifference a b mod p = 0", "by simp"], ["proof (state)\nthis:\n  pdifference a b mod p = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primekeyrewrite:\n  fixes p::nat shows \"\\<lbrakk>prime p; p dvd (a*b);~(p dvd a)\\<rbrakk> \\<Longrightarrow> p dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; p dvd a * b; \\<not> p dvd a\\<rbrakk>\n    \\<Longrightarrow> p dvd b", "apply (subst (asm) prime_dvd_mult_nat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> p dvd a; prime p\\<rbrakk> \\<Longrightarrow> prime p\n 2. \\<lbrakk>prime p; p dvd a \\<or> p dvd b; \\<not> p dvd a\\<rbrakk>\n    \\<Longrightarrow> p dvd b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma multzero: \"\\<lbrakk>0 < m mod p; m*a = 0\\<rbrakk> \\<Longrightarrow> (a::nat) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m mod p; m * a = 0\\<rbrakk> \\<Longrightarrow> a = 0", "by auto"], ["", "lemma primekeytrick:\n  fixes A B :: nat\n  assumes \"(M * A) mod P = (M * B) mod P\"\n  assumes \"M mod P \\<noteq> 0\" and \"prime P\"\n  shows \"A mod P = B mod P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A mod P = B mod P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A mod P = B mod P", "from assms"], ["proof (chain)\npicking this:\n  M * A mod P = M * B mod P\n  M mod P \\<noteq> 0\n  prime P", "have \"M > 0\""], ["proof (prove)\nusing this:\n  M * A mod P = M * B mod P\n  M mod P \\<noteq> 0\n  prime P\n\ngoal (1 subgoal):\n 1. 0 < M", "by (auto intro: ccontr)"], ["proof (state)\nthis:\n  0 < M\n\ngoal (1 subgoal):\n 1. A mod P = B mod P", "from assms"], ["proof (chain)\npicking this:\n  M * A mod P = M * B mod P\n  M mod P \\<noteq> 0\n  prime P", "have *: \"\\<And>q. P dvd M * q \\<Longrightarrow> P dvd q\""], ["proof (prove)\nusing this:\n  M * A mod P = M * B mod P\n  M mod P \\<noteq> 0\n  prime P\n\ngoal (1 subgoal):\n 1. \\<And>q. P dvd M * q \\<Longrightarrow> P dvd q", "using primekeyrewrite [of P M]"], ["proof (prove)\nusing this:\n  M * A mod P = M * B mod P\n  M mod P \\<noteq> 0\n  prime P\n  \\<lbrakk>prime P; P dvd M * ?b; \\<not> P dvd M\\<rbrakk>\n  \\<Longrightarrow> P dvd ?b\n\ngoal (1 subgoal):\n 1. \\<And>q. P dvd M * q \\<Longrightarrow> P dvd q", "unfolding dvd_eq_mod_eq_0 [symmetric]"], ["proof (prove)\nusing this:\n  M * A mod P = M * B mod P\n  \\<not> P dvd M\n  prime P\n  \\<lbrakk>prime P; P dvd M * ?b; \\<not> P dvd M\\<rbrakk>\n  \\<Longrightarrow> P dvd ?b\n\ngoal (1 subgoal):\n 1. \\<And>q. P dvd M * q \\<Longrightarrow> P dvd q", "by blast"], ["proof (state)\nthis:\n  P dvd M * ?q \\<Longrightarrow> P dvd ?q\n\ngoal (1 subgoal):\n 1. A mod P = B mod P", "from equalmodstrick2 [OF assms(1)] \\<open>M > 0\\<close>"], ["proof (chain)\npicking this:\n  pdifference (M * A) (M * B) mod P = 0\n  0 < M", "show ?thesis"], ["proof (prove)\nusing this:\n  pdifference (M * A) (M * B) mod P = 0\n  0 < M\n\ngoal (1 subgoal):\n 1. A mod P = B mod P", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pdifference (M * A) (M * B) mod P = 0; 0 < M\\<rbrakk>\n    \\<Longrightarrow> A mod P = B mod P", "apply (rule equalmodstrick1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pdifference (M * A) (M * B) mod P = 0; 0 < M\\<rbrakk>\n    \\<Longrightarrow> pdifference A B mod P = 0", "apply (auto intro: * dvdI simp add: dvd_eq_mod_eq_0 [symmetric] diff_mult_distrib2 [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  A mod P = B mod P\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}