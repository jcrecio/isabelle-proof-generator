{"file_name": "/home/qj213/afp-2021-10-22/thys/RSAPSS/Cryptinverts.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RSAPSS", "problem_names": ["lemma pred_unfold:\n  \"pred n = n - 1\"", "lemma fermat:\n  assumes \"prime p\" \"m mod p \\<noteq> 0\"\n  shows \"m^(p-(1::nat)) mod p = 1\"", "lemma cryptinverts_hilf1: \"prime p \\<Longrightarrow> (m * m ^(k * pred p)) mod p = m mod p\"", "lemma cryptinverts_hilf2: \"prime p \\<Longrightarrow> m*(m^(k * (pred p) * (pred q))) mod p = m mod p\"", "lemma cryptinverts_hilf3: \"prime q \\<Longrightarrow> m*(m^(k * (pred p) * (pred q))) mod q = m mod q\"", "lemma cryptinverts_hilf4:\n  \"m ^ x mod (p * q) = m\" if \"prime p\" \"prime q\" \"p \\<noteq> q\"\n    \"m < p * q\" \"x mod (pred p * pred q) = 1\"", "lemma primmultgreater: fixes p::nat shows \"\\<lbrakk> prime p; prime q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk> \\<Longrightarrow> 2 < p*q\"", "lemma primmultgreater2: fixes p::nat shows \"\\<lbrakk>prime p; prime q; p \\<noteq> q\\<rbrakk> \\<Longrightarrow>  2 < p*q\"", "lemma cryptinverts: \"\\<lbrakk> prime p; prime q; p \\<noteq> q; n = p*q; m < n;\n    e*d mod ((pred p)*(pred q)) = 1\\<rbrakk> \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m\""], "translations": [["", "lemma pred_unfold:\n  \"pred n = n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred n = n - 1", "by (induct n) simp_all"], ["", "lemma fermat:\n  assumes \"prime p\" \"m mod p \\<noteq> 0\"\n  shows \"m^(p-(1::nat)) mod p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m ^ (p - 1) mod p = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m ^ (p - 1) mod p = 1", "from assms"], ["proof (chain)\npicking this:\n  prime p\n  m mod p \\<noteq> 0", "have \"[m ^ (p - 1) = 1] (mod p)\""], ["proof (prove)\nusing this:\n  prime p\n  m mod p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. [m ^ (p - 1) = 1] (mod p)", "using fermat_theorem [of p m]"], ["proof (prove)\nusing this:\n  prime p\n  m mod p \\<noteq> 0\n  \\<lbrakk>prime p; \\<not> p dvd m\\<rbrakk>\n  \\<Longrightarrow> [m ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. [m ^ (p - 1) = 1] (mod p)", "by (simp add: mod_eq_0_iff_dvd)"], ["proof (state)\nthis:\n  [m ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. m ^ (p - 1) mod p = 1", "then"], ["proof (chain)\npicking this:\n  [m ^ (p - 1) = 1] (mod p)", "show ?thesis"], ["proof (prove)\nusing this:\n  [m ^ (p - 1) = 1] (mod p)\n\ngoal (1 subgoal):\n 1. m ^ (p - 1) mod p = 1", "using \\<open>prime p\\<close> prime_gt_1_nat [of p]"], ["proof (prove)\nusing this:\n  [m ^ (p - 1) = 1] (mod p)\n  prime p\n  prime p \\<Longrightarrow> 1 < p\n\ngoal (1 subgoal):\n 1. m ^ (p - 1) mod p = 1", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  m ^ (p - 1) mod p = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cryptinverts_hilf1: \"prime p \\<Longrightarrow> (m * m ^(k * pred p)) mod p = m mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p", "apply (cases \"m mod p = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime p; m mod p = 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p\n 2. \\<lbrakk>prime p; m mod p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p", "apply (simp add: mod_mult_left_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime p; m mod p = 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = 0\n 2. \\<lbrakk>prime p; m mod p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p", "apply (simp only: mult.commute [of k \"pred p\"]\n    power_mult mod_mult_right_eq [of \"m\" \"(m^pred p)^k\" \"p\"]\n    remainderexp [of \"m^pred p\" \"p\" \"k\", symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime p; m mod p = 0\\<rbrakk>\n    \\<Longrightarrow> m * (m ^ pred p) ^ k mod p = 0\n 2. \\<lbrakk>prime p; m mod p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p", "apply (insert fermat [of p m], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; 0 < m mod p; m ^ (p - Suc 0) mod p = Suc 0\\<rbrakk>\n    \\<Longrightarrow> m * m ^ (k * pred p) mod p = m mod p", "apply (simp add: mult.commute [of k] power_mult pred_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; 0 < m mod p; m ^ (p - Suc 0) mod p = Suc 0\\<rbrakk>\n    \\<Longrightarrow> m * (m ^ (p - Suc 0)) ^ k mod p = m mod p", "by (metis One_nat_def mod_mult_right_eq mult.right_neutral power_Suc_0 power_mod)"], ["", "lemma cryptinverts_hilf2: \"prime p \\<Longrightarrow> m*(m^(k * (pred p) * (pred q))) mod p = m mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> m * m ^ (k * pred p * pred q) mod p = m mod p", "apply (simp add: mult.commute [of \"k * pred p\" \"pred q\"] mult.assoc [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> m * m ^ (pred q * k * pred p) mod p = m mod p", "apply (rule cryptinverts_hilf1 [of \"p\" \"m\" \"(pred q) * k\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> prime p", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cryptinverts_hilf3: \"prime q \\<Longrightarrow> m*(m^(k * (pred p) * (pred q))) mod q = m mod q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime q \\<Longrightarrow> m * m ^ (k * pred p * pred q) mod q = m mod q", "by (fact cryptinverts_hilf1)"], ["", "lemma cryptinverts_hilf4:\n  \"m ^ x mod (p * q) = m\" if \"prime p\" \"prime q\" \"p \\<noteq> q\"\n    \"m < p * q\" \"x mod (pred p * pred q) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m ^ x mod (p * q) = m", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> m ^ x mod (p * q) = m\n 2. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "case 0"], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> m ^ x mod (p * q) = m\n 2. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "with that"], ["proof (chain)\npicking this:\n  prime p\n  prime q\n  p \\<noteq> q\n  m < p * q\n  x mod (pred p * pred q) = 1\n  x = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  prime p\n  prime q\n  p \\<noteq> q\n  m < p * q\n  x mod (pred p * pred q) = 1\n  x = 0\n\ngoal (1 subgoal):\n 1. m ^ x mod (p * q) = m", "by simp"], ["proof (state)\nthis:\n  m ^ x mod (p * q) = m\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "case (Suc x)"], ["proof (state)\nthis:\n  x = Suc x\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "with that(5)"], ["proof (chain)\npicking this:\n  x mod (pred p * pred q) = 1\n  x = Suc x", "have \"Suc x mod (pred p * pred q) = Suc 0\""], ["proof (prove)\nusing this:\n  x mod (pred p * pred q) = 1\n  x = Suc x\n\ngoal (1 subgoal):\n 1. Suc x mod (pred p * pred q) = Suc 0", "by simp"], ["proof (state)\nthis:\n  Suc x mod (pred p * pred q) = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "then"], ["proof (chain)\npicking this:\n  Suc x mod (pred p * pred q) = Suc 0", "have \"pred p * pred q dvd x\""], ["proof (prove)\nusing this:\n  Suc x mod (pred p * pred q) = Suc 0\n\ngoal (1 subgoal):\n 1. pred p * pred q dvd x", "using dvd_minus_mod [of \"(pred p * pred q)\" \"Suc x\"]"], ["proof (prove)\nusing this:\n  Suc x mod (pred p * pred q) = Suc 0\n  pred p * pred q dvd Suc x - Suc x mod (pred p * pred q)\n\ngoal (1 subgoal):\n 1. pred p * pred q dvd x", "by simp"], ["proof (state)\nthis:\n  pred p * pred q dvd x\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "then"], ["proof (chain)\npicking this:\n  pred p * pred q dvd x", "obtain y where \"x = pred p * pred q * y\""], ["proof (prove)\nusing this:\n  pred p * pred q dvd x\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        x = pred p * pred q * y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  x = pred p * pred q * y\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "then"], ["proof (chain)\npicking this:\n  x = pred p * pred q * y", "have \"m ^ Suc x mod p = m mod p\" and \"m ^ Suc x mod q = m mod q\""], ["proof (prove)\nusing this:\n  x = pred p * pred q * y\n\ngoal (1 subgoal):\n 1. m ^ Suc x mod p = m mod p &&& m ^ Suc x mod q = m mod q", "using cryptinverts_hilf2 [of p m y q, OF \\<open>prime p\\<close>]\n      cryptinverts_hilf3 [of q m y p, OF \\<open>prime q\\<close>]"], ["proof (prove)\nusing this:\n  x = pred p * pred q * y\n  m * m ^ (y * pred p * pred q) mod p = m mod p\n  m * m ^ (y * pred p * pred q) mod q = m mod q\n\ngoal (1 subgoal):\n 1. m ^ Suc x mod p = m mod p &&& m ^ Suc x mod q = m mod q", "by (simp_all add: ac_simps)"], ["proof (state)\nthis:\n  m ^ Suc x mod p = m mod p\n  m ^ Suc x mod q = m mod q\n\ngoal (1 subgoal):\n 1. \\<And>nat. x = Suc nat \\<Longrightarrow> m ^ x mod (p * q) = m", "with that Suc"], ["proof (chain)\npicking this:\n  prime p\n  prime q\n  p \\<noteq> q\n  m < p * q\n  x mod (pred p * pred q) = 1\n  x = Suc x\n  m ^ Suc x mod p = m mod p\n  m ^ Suc x mod q = m mod q", "show ?thesis"], ["proof (prove)\nusing this:\n  prime p\n  prime q\n  p \\<noteq> q\n  m < p * q\n  x mod (pred p * pred q) = 1\n  x = Suc x\n  m ^ Suc x mod p = m mod p\n  m ^ Suc x mod q = m mod q\n\ngoal (1 subgoal):\n 1. m ^ x mod (p * q) = m", "by (auto intro: specializedtoprimes1a)"], ["proof (state)\nthis:\n  m ^ x mod (p * q) = m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primmultgreater: fixes p::nat shows \"\\<lbrakk> prime p; prime q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk> \\<Longrightarrow> 2 < p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (simp add: prime_nat_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < p \\<and>\n             (\\<forall>m. m dvd p \\<longrightarrow> m = Suc 0 \\<or> m = p);\n     Suc 0 < q \\<and>\n     (\\<forall>m. m dvd q \\<longrightarrow> m = Suc 0 \\<or> m = q);\n     p \\<noteq> 2; q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (insert mult_le_mono [of 2 p 2 q])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < p \\<and>\n             (\\<forall>m. m dvd p \\<longrightarrow> m = Suc 0 \\<or> m = p);\n     Suc 0 < q \\<and>\n     (\\<forall>m. m dvd q \\<longrightarrow> m = Suc 0 \\<or> m = q);\n     p \\<noteq> 2; q \\<noteq> 2;\n     \\<lbrakk>2 \\<le> p; 2 \\<le> q\\<rbrakk>\n     \\<Longrightarrow> 2 * 2 \\<le> p * q\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma primmultgreater2: fixes p::nat shows \"\\<lbrakk>prime p; prime q; p \\<noteq> q\\<rbrakk> \\<Longrightarrow>  2 < p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (cases \"p = 2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; p = 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q\n 2. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime q; q \\<noteq> 2; p = 2\\<rbrakk>\n    \\<Longrightarrow> Suc 0 < q\n 2. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (simp add: prime_nat_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (cases \"q = 2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2; q = 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q\n 2. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2;\n     q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (simp add: prime_nat_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; p \\<noteq> 2;\n     q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> 2 < p * q", "apply (erule primmultgreater)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>prime q; p \\<noteq> q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> prime q\n 2. \\<lbrakk>prime q; p \\<noteq> q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> 2\n 3. \\<lbrakk>prime q; p \\<noteq> q; p \\<noteq> 2; q \\<noteq> 2\\<rbrakk>\n    \\<Longrightarrow> q \\<noteq> 2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cryptinverts: \"\\<lbrakk> prime p; prime q; p \\<noteq> q; n = p*q; m < n;\n    e*d mod ((pred p)*(pred q)) = 1\\<rbrakk> \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; n = p * q; m < n;\n     e * d mod (pred p * pred q) = 1\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m", "apply (insert cryptinverts_hilf4 [of p q m \"e*d\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; n = p * q; m < n;\n     e * d mod (pred p * pred q) = 1;\n     \\<lbrakk>prime p; prime q; p \\<noteq> q; m < p * q;\n      e * d mod (pred p * pred q) = 1\\<rbrakk>\n     \\<Longrightarrow> m ^ (e * d) mod (p * q) = m\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m", "apply (insert cryptcorrect [of \"p*q\" \"rsa_crypt m e (p * q)\" d])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; n = p * q; m < n;\n     e * d mod (pred p * pred q) = 1;\n     \\<lbrakk>prime p; prime q; p \\<noteq> q; m < p * q;\n      e * d mod (pred p * pred q) = 1\\<rbrakk>\n     \\<Longrightarrow> m ^ (e * d) mod (p * q) = m;\n     rsa_crypt (p * q) (rsa_crypt m e (p * q)) d =\n     (p * q) ^ rsa_crypt m e (p * q) mod d\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m", "apply (insert cryptcorrect [of \"p*q\" m e])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; n = p * q; m < n;\n     e * d mod (pred p * pred q) = 1;\n     \\<lbrakk>prime p; prime q; p \\<noteq> q; m < p * q;\n      e * d mod (pred p * pred q) = 1\\<rbrakk>\n     \\<Longrightarrow> m ^ (e * d) mod (p * q) = m;\n     rsa_crypt (p * q) (rsa_crypt m e (p * q)) d =\n     (p * q) ^ rsa_crypt m e (p * q) mod d;\n     rsa_crypt (p * q) m e = (p * q) ^ m mod e\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m", "apply (insert primmultgreater2 [of p q])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prime p; prime q; p \\<noteq> q; n = p * q; m < n;\n     e * d mod (pred p * pred q) = 1;\n     \\<lbrakk>prime p; prime q; p \\<noteq> q; m < p * q;\n      e * d mod (pred p * pred q) = 1\\<rbrakk>\n     \\<Longrightarrow> m ^ (e * d) mod (p * q) = m;\n     rsa_crypt (p * q) (rsa_crypt m e (p * q)) d =\n     (p * q) ^ rsa_crypt m e (p * q) mod d;\n     rsa_crypt (p * q) m e = (p * q) ^ m mod e;\n     \\<lbrakk>prime p; prime q; p \\<noteq> q\\<rbrakk>\n     \\<Longrightarrow> 2 < p * q\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e n) d n = m", "apply (simp add: prime_nat_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < p \\<and>\n             (\\<forall>m. m dvd p \\<longrightarrow> m = Suc 0 \\<or> m = p);\n     Suc 0 < q \\<and>\n     (\\<forall>m. m dvd q \\<longrightarrow> m = Suc 0 \\<or> m = q);\n     p \\<noteq> q; n = p * q; m < p * q;\n     e * d mod (pred p * pred q) = Suc 0; m ^ (e * d) mod (p * q) = m;\n     rsa_crypt (p * q) (rsa_crypt m e (p * q)) d =\n     (p * q) ^ rsa_crypt m e (p * q) mod d;\n     rsa_crypt (p * q) m e = (p * q) ^ m mod e; 2 < p * q\\<rbrakk>\n    \\<Longrightarrow> rsa_crypt (rsa_crypt m e (p * q)) d (p * q) = m", "apply (simp add: cryptcorrect remainderexp [of \"m^e\" \"p*q\" d] power_mult [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}