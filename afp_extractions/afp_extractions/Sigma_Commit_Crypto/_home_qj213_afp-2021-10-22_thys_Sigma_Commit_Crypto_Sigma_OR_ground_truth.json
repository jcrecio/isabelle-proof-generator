{"file_name": "/home/qj213/afp-2021-10-22/thys/Sigma_Commit_Crypto/Sigma_OR.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Sigma_Commit_Crypto", "problem_names": ["lemma Domain_Rel_cases: \n  assumes \"(x0,x1) \\<in> Domain Rel_OR\"\n  shows \"(\\<exists> w0. (x0,w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1) \\<or> (\\<exists> w1. (x1,w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0)\"", "lemma set_spmf_lists_sample [simp]: \"set_spmf (spmf_of_set (carrier L)) = (carrier L)\"", "lemma lossless_\\<Sigma>_S: \"lossless_spmf (\\<Sigma>1.S x1 e1)\" \"lossless_spmf (\\<Sigma>0.S x0 e0)\"", "lemma lossless_init_OR: \"lossless_spmf (init_OR (x0,x1) w)\"", "lemma  \"check_OR (x0,x1) (a0,a1) s ((e0,z0), (e1,z1))\n             = (s = e0 \\<oplus> e1 \n                   \\<and> e0 \\<in> challenge_space \\<and> e1 \\<in> challenge_space \n                      \\<and> check0 x0 a0 e0 z0 \\<and> check1 x1 a1 e1 z1)\"", "lemma \\<A>ss_OR_alt_def: \"\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0),e1,z1) ((a0,a1),s',(e0',z0'),e1',z1') = do {\n    if (e0 \\<noteq> e0') then do {w0 :: 'witness0 \\<leftarrow> \\<A>ss0 x0 (a0,e0,z0) (a0,e0',z0'); return_spmf (Inl w0)}\n    else do {w1 :: 'witness1 \\<leftarrow> \\<A>ss1 x1 (a1,e1,z1) (a1,e1',z1'); return_spmf (Inr w1)}}\"", "lemma HVZK1:\n  assumes \"(x1,w1) \\<in> Rel1\"\n  shows \"\\<forall> c \\<in> challenge_space. \\<Sigma>_OR.R (x0,x1) (Inr w1) c = \\<Sigma>_OR.S (x0,x1) c\"", "lemma HVZK0: \n  assumes \"(x0,w0) \\<in> Rel0\"\n  shows \"\\<forall> c \\<in> challenge_space. \\<Sigma>_OR.R (x0,x1) (Inl w0) c = \\<Sigma>_OR.S (x0,x1) c\"", "lemma HVZK:\n  shows \"\\<Sigma>_OR.HVZK\"", "lemma assumes \"(x0,x1) \\<in> Domain Rel_OR\"\n  shows \"(\\<exists> w0. (x0,w0) \\<in> Rel0) \\<or> (\\<exists> w1. (x1,w1) \\<in> Rel1)\"", "lemma ss: \n  assumes valid_pub_OR: \"(x0,x1) \\<in> valid_pub_OR\" \n    and check: \"check_OR (x0,x1) (a0,a1) s ((e0,z0), (e1,z1))\"\n    and check': \"check_OR (x0,x1) (a0,a1) s' ((e0',z0'), (e1',z1'))\"\n    and \"s \\<noteq> s'\"\n    and challenge_space: \"s \\<in> challenge_space\" \"s' \\<in> challenge_space\"\n  shows \"lossless_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')) \\<and>\n           (\\<forall>w'\\<in>set_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')). ((x0,x1), w') \\<in> Rel_OR)\"", "lemma special_soundness: \n  shows \"\\<Sigma>_OR.special_soundness\"", "lemma correct0: \n  assumes e_in_carrier: \"e \\<in> carrier L\"\n    and \"(x0,w0) \\<in> Rel0\"\n    and valid_pub: \"x1 \\<in> valid_pub1\"\n  shows \"\\<Sigma>_OR.completeness_game (x0,x1) (Inl w0) e = return_spmf True\"\n    (is \"?lhs = ?rhs\")", "lemma correct1: \n  assumes rel1: \"(x1,w1) \\<in> Rel1\"\n    and valid_pub: \"x0 \\<in> valid_pub0\"\n    and e_in_carrier: \"e \\<in> carrier L\"\n  shows \"\\<Sigma>_OR.completeness_game (x0,x1) (Inr w1) e = return_spmf True\"\n    (is \"?lhs = ?rhs\")", "lemma completeness':\n  assumes  Rel_OR_asm: \"((x0,x1), w) \\<in> Rel_OR\" \n  shows \"\\<forall> e \\<in> carrier L. spmf (\\<Sigma>_OR.completeness_game (x0,x1) w e) True = 1\"", "lemma completeness: shows \"\\<Sigma>_OR.completeness\"", "lemma \\<Sigma>_protocol: shows \"\\<Sigma>_OR.\\<Sigma>_protocol\"", "lemma \"OR_\\<Sigma>_commit.abstract_com.correct\"", "lemma \"OR_\\<Sigma>_commit.abstract_com.perfect_hiding_ind_cpa \\<A>\"", "lemma bind_advantage_bound_dis_log: \n  shows \"OR_\\<Sigma>_commit.abstract_com.bind_advantage \\<A> \\<le> OR_\\<Sigma>_commit.rel_advantage (OR_\\<Sigma>_commit.adversary \\<A>)\""], "translations": [["", "lemma Domain_Rel_cases: \n  assumes \"(x0,x1) \\<in> Domain Rel_OR\"\n  shows \"(\\<exists> w0. (x0,w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1) \\<or> (\\<exists> w1. (x1,w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1) \\<or>\n    (\\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0)", "using assms"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> Domain Rel_OR\n\ngoal (1 subgoal):\n 1. (\\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1) \\<or>\n    (\\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0)", "by (meson DomainE Rel_OR.cases)"], ["", "lemma set_spmf_lists_sample [simp]: \"set_spmf (spmf_of_set (carrier L)) = (carrier L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_spmf (spmf_of_set (carrier L)) = carrier L", "using finite_L"], ["proof (prove)\nusing this:\n  finite (carrier L)\n\ngoal (1 subgoal):\n 1. set_spmf (spmf_of_set (carrier L)) = carrier L", "by simp"], ["", "definition \"challenge_space = carrier L\""], ["", "fun init_OR :: \"('pub0 \\<times> 'pub1) \\<Rightarrow> ('witness0 + 'witness1) \\<Rightarrow> (((('rand0 \\<times> 'bool \\<times> 'response1 + 'rand1 \\<times> 'bool \\<times> 'response0)) \\<times> 'msg0 \\<times> 'msg1)) spmf\"\n  where \"init_OR (x0,x1) (Inl w0) = do {\n    (r0,a0) \\<leftarrow> init0 x0 w0;\n    e1 \\<leftarrow> spmf_of_set (carrier L);\n    (a1, e'1, z1) \\<leftarrow> \\<Sigma>1.S x1 e1;\n    return_spmf (Inl (r0, e1, z1), a0, a1)}\" |\n    \"init_OR (x0, x1) (Inr w1) = do {\n    (r1, a1) \\<leftarrow> init1 x1 w1;\n    e0 \\<leftarrow> spmf_of_set (carrier L);\n    (a0, e'0, z0) \\<leftarrow> \\<Sigma>0.S x0 e0;\n    return_spmf ((Inr (r1, e0, z0), a0, a1))}\""], ["", "lemma lossless_\\<Sigma>_S: \"lossless_spmf (\\<Sigma>1.S x1 e1)\" \"lossless_spmf (\\<Sigma>0.S x0 e0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (\\<Sigma>1.S x1 e1) &&& lossless_spmf (\\<Sigma>0.S x0 e0)", "using lossless_S"], ["proof (prove)\nusing this:\n  lossless_spmf (?S0.0 ?h0.0 ?e0.0)\n  lossless_spmf (?S1.0 ?h1.0 ?e1.0)\n\ngoal (1 subgoal):\n 1. lossless_spmf (\\<Sigma>1.S x1 e1) &&& lossless_spmf (\\<Sigma>0.S x0 e0)", "by fast +"], ["", "lemma lossless_init_OR: \"lossless_spmf (init_OR (x0,x1) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (init_OR (x0, x1) w)", "by(cases w;simp add: lossless_\\<Sigma>_S split_def lossless_init lossless_S finite_L carrier_L_not_empty)"], ["", "fun response_OR :: \"(('rand0 \\<times> 'bool \\<times> 'response1 + 'rand1 \\<times> 'bool \\<times> 'response0)) \\<Rightarrow> ('witness0 + 'witness1) \n                        \\<Rightarrow> 'bool \\<Rightarrow> (('bool \\<times> 'response0) \\<times> ('bool \\<times> 'response1)) spmf\"\n  where \"response_OR (Inl (r0 , e_1, z1)) (Inl w0) s = do {  \n    let e0 = s \\<oplus> e_1;\n    z0 \\<leftarrow> response0 r0 w0 e0;\n    return_spmf ((e0,z0),  (e_1,z1))}\" |\n    \"response_OR  (Inr (r1, e_0, z0)) (Inr w1) s = do {\n    let e1 = s \\<oplus> e_0;\n    z1 \\<leftarrow> response1 r1 w1 e1;\n    return_spmf ((e_0, z0), (e1, z1))}\""], ["", "definition check_OR :: \"('pub0 \\<times> 'pub1) \\<Rightarrow> ('msg0 \\<times> 'msg1) \\<Rightarrow> 'bool \\<Rightarrow> (('bool \\<times> 'response0) \\<times> ('bool \\<times> 'response1)) \\<Rightarrow> bool\"\n  where \"check_OR X A s Z\n             = (s = (fst (fst Z)) \\<oplus> (fst (snd Z)) \n                   \\<and> (fst (fst Z)) \\<in> challenge_space \\<and> (fst (snd Z)) \\<in> challenge_space \n                      \\<and> check0 (fst X) (fst A) (fst (fst Z)) (snd (fst Z)) \\<and> check1 (snd X) (snd A) (fst (snd Z)) (snd (snd Z)))\""], ["", "lemma  \"check_OR (x0,x1) (a0,a1) s ((e0,z0), (e1,z1))\n             = (s = e0 \\<oplus> e1 \n                   \\<and> e0 \\<in> challenge_space \\<and> e1 \\<in> challenge_space \n                      \\<and> check0 x0 a0 e0 z0 \\<and> check1 x1 a1 e1 z1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1) =\n    (s = e0 \\<oplus> e1 \\<and>\n     e0 \\<in> challenge_space \\<and>\n     e1 \\<in> challenge_space \\<and>\n     check0 x0 a0 e0 z0 \\<and> check1 x1 a1 e1 z1)", "by(simp add: check_OR_def)"], ["", "fun S_OR where \"S_OR (x0,x1) c = do {\n    e1 \\<leftarrow> spmf_of_set (carrier L);\n    (a1, e1', z1) \\<leftarrow> \\<Sigma>1.S x1 e1;\n    let e0 = c \\<oplus> e1;\n    (a0, e0', z0) \\<leftarrow> \\<Sigma>0.S x0 e0; \n    let z = ((e0',z0), (e1',z1));\n    return_spmf ((a0, a1),z)}\""], ["", "definition \\<A>ss_OR' :: \"'pub0 \\<times> 'pub1 \\<Rightarrow> ('msg0 \\<times> 'msg1) \\<times> 'bool \\<times> ('bool \\<times> 'response0) \\<times> 'bool \\<times> 'response1\n                    \\<Rightarrow> ('msg0 \\<times> 'msg1) \\<times> 'bool \\<times> ('bool \\<times> 'response0) \\<times> 'bool \\<times> 'response1 \\<Rightarrow> ('witness0 + 'witness1) spmf\"\n  where \"\\<A>ss_OR' X C1 C2 = TRY do {\n    _ :: unit \\<leftarrow> assert_spmf ((fst (fst  (snd (snd C1)))) \\<noteq> (fst (fst (snd (snd C2)))));\n    w0 :: 'witness0 \\<leftarrow> \\<A>ss0 (fst X) (fst (fst C1),fst (fst (snd (snd C1))),snd (fst (snd (snd C1)))) (fst (fst C2),fst (fst (snd (snd C2))),snd (fst (snd (snd C2))));\n    return_spmf ((Inl w0)) :: ('witness0 + 'witness1) spmf} ELSE do {\n     w1 :: 'witness1 \\<leftarrow> \\<A>ss1  (snd X) (snd (fst C1),fst (snd (snd (snd C1))), snd (snd (snd (snd C1)))) (snd (fst C2), fst (snd (snd (snd C2))), snd (snd (snd (snd C2))));\n    (return_spmf ((Inr w1)) :: ('witness0 + 'witness1) spmf)}\""], ["", "definition \\<A>ss_OR :: \"'pub0 \\<times> 'pub1 \\<Rightarrow> ('msg0 \\<times> 'msg1) \\<times> 'bool \\<times> ('bool \\<times> 'response0) \\<times> 'bool \\<times> 'response1\n                    \\<Rightarrow> ('msg0 \\<times> 'msg1) \\<times> 'bool \\<times> ('bool \\<times> 'response0) \\<times> 'bool \\<times> 'response1 \\<Rightarrow> ('witness0 + 'witness1) spmf\"\n  where \"\\<A>ss_OR X C1 C2 = do {\n    if ((fst (fst  (snd (snd C1)))) \\<noteq> (fst (fst (snd (snd C2))))) then do \n        {w0 :: 'witness0 \\<leftarrow> \\<A>ss0 (fst X) (fst (fst C1),fst (fst (snd (snd C1))),snd (fst (snd (snd C1)))) (fst (fst C2),fst (fst (snd (snd C2))),snd (fst (snd (snd C2)))); return_spmf (Inl w0)} \n    else\n    do  {w1 :: 'witness1 \\<leftarrow> \\<A>ss1  (snd X) (snd (fst C1),fst (snd (snd (snd C1))), snd (snd (snd (snd C1)))) (snd (fst C2), fst (snd (snd (snd C2))), snd (snd (snd (snd C2)))); return_spmf (Inr w1)}}\""], ["", "lemma \\<A>ss_OR_alt_def: \"\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0),e1,z1) ((a0,a1),s',(e0',z0'),e1',z1') = do {\n    if (e0 \\<noteq> e0') then do {w0 :: 'witness0 \\<leftarrow> \\<A>ss0 x0 (a0,e0,z0) (a0,e0',z0'); return_spmf (Inl w0)}\n    else do {w1 :: 'witness1 \\<leftarrow> \\<A>ss1 x1 (a1,e1,z1) (a1,e1',z1'); return_spmf (Inr w1)}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1') =\n    (if e0 \\<noteq> e0'\n     then \\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0') \\<bind>\n          (\\<lambda>w0. return_spmf (Inl w0))\n     else \\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1') \\<bind>\n          (\\<lambda>w1. return_spmf (Inr w1)))", "by(simp add: \\<A>ss_OR_def)"], ["", "definition \"valid_pub_OR = {(x0,x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\""], ["", "sublocale \\<Sigma>_OR: \\<Sigma>_protocols_base init_OR response_OR check_OR Rel_OR S_OR \\<A>ss_OR challenge_space valid_pub_OR"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_protocols_base Rel_OR valid_pub_OR", "unfolding \\<Sigma>_protocols_base_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain Rel_OR \\<subseteq> valid_pub_OR", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. Domain Rel_OR \\<subseteq> valid_pub_OR", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. Domain Rel_OR \\<subseteq> valid_pub_OR", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Domain Rel_OR \\<subseteq> valid_pub_OR", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Domain Rel_OR \\<Longrightarrow> x \\<in> valid_pub_OR", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Domain Rel_OR \\<Longrightarrow> x \\<in> valid_pub_OR", "assume asm: \"x \\<in> Domain Rel_OR\""], ["proof (state)\nthis:\n  x \\<in> Domain Rel_OR\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Domain Rel_OR \\<Longrightarrow> x \\<in> valid_pub_OR", "then"], ["proof (chain)\npicking this:\n  x \\<in> Domain Rel_OR", "obtain x0 x1 where x: \"(x0,x1) = x\""], ["proof (prove)\nusing this:\n  x \\<in> Domain Rel_OR\n\ngoal (1 subgoal):\n 1. (\\<And>x0 x1. (x0, x1) = x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  (x0, x1) = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Domain Rel_OR \\<Longrightarrow> x \\<in> valid_pub_OR", "show \"x \\<in> valid_pub_OR\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> valid_pub_OR", "proof(cases \"\\<exists> w0. (x0,w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR\n 2. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "case True"], ["proof (state)\nthis:\n  \\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n\ngoal (2 subgoals):\n 1. \\<exists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR\n 2. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "then"], ["proof (chain)\npicking this:\n  \\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. x \\<in> valid_pub_OR", "using \\<Sigma>0.domain_subset_valid_pub valid_pub_OR_def x"], ["proof (prove)\nusing this:\n  \\<exists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n  Domain Rel0 \\<subseteq> valid_pub0\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n  (x0, x1) = x\n\ngoal (1 subgoal):\n 1. x \\<in> valid_pub_OR", "by auto"], ["proof (state)\nthis:\n  x \\<in> valid_pub_OR\n\ngoal (1 subgoal):\n 1. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "case False"], ["proof (state)\nthis:\n  \\<nexists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "hence \"\\<exists> w1. (x1,w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0\""], ["proof (prove)\nusing this:\n  \\<nexists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0", "using Domain_Rel_cases asm x"], ["proof (prove)\nusing this:\n  \\<nexists>w0. (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1\n  (?x0.0, ?x1.0) \\<in> Domain Rel_OR \\<Longrightarrow>\n  (\\<exists>w0. (?x0.0, w0) \\<in> Rel0 \\<and> ?x1.0 \\<in> valid_pub1) \\<or>\n  (\\<exists>w1. (?x1.0, w1) \\<in> Rel1 \\<and> ?x0.0 \\<in> valid_pub0)\n  x \\<in> Domain Rel_OR\n  (x0, x1) = x\n\ngoal (1 subgoal):\n 1. \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0", "by auto"], ["proof (state)\nthis:\n  \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0\n\ngoal (1 subgoal):\n 1. \\<nexists>w0.\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1 \\<Longrightarrow>\n    x \\<in> valid_pub_OR", "then"], ["proof (chain)\npicking this:\n  \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0\n\ngoal (1 subgoal):\n 1. x \\<in> valid_pub_OR", "using \\<Sigma>1.domain_subset_valid_pub valid_pub_OR_def x"], ["proof (prove)\nusing this:\n  \\<exists>w1. (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0\n  Domain Rel1 \\<subseteq> valid_pub1\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n  (x0, x1) = x\n\ngoal (1 subgoal):\n 1. x \\<in> valid_pub_OR", "by auto"], ["proof (state)\nthis:\n  x \\<in> valid_pub_OR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> valid_pub_OR\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Domain Rel_OR \\<subseteq> valid_pub_OR\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale \\<Sigma>_OR_proofs = \\<Sigma>_OR_base + boolean_algebra L +\n  assumes G_Rel_OR: \"((x0, x1), w) \\<in> set_spmf G \\<Longrightarrow> ((x0, x1), w) \\<in> Rel_OR\"\n    and lossless_response_OR: \"lossless_spmf (response_OR R W s)\"\nbegin"], ["", "lemma HVZK1:\n  assumes \"(x1,w1) \\<in> Rel1\"\n  shows \"\\<forall> c \\<in> challenge_space. \\<Sigma>_OR.R (x0,x1) (Inr w1) c = \\<Sigma>_OR.S (x0,x1) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>challenge_space.\n       \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "including monad_normalisation"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>challenge_space.\n       \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "assume c: \"c \\<in> challenge_space\""], ["proof (state)\nthis:\n  c \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "show \"\\<Sigma>_OR.R (x0,x1) (Inr w1) c = \\<Sigma>_OR.S (x0,x1) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have *: \"x \\<in> carrier L \\<longrightarrow> c \\<oplus> c \\<oplus> x = x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<longrightarrow> c \\<oplus> c \\<oplus> x = x", "using c challenge_space_def"], ["proof (prove)\nusing this:\n  c \\<in> challenge_space\n  challenge_space = carrier L\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<longrightarrow> c \\<oplus> c \\<oplus> x = x", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> carrier L \\<longrightarrow> c \\<oplus> c \\<oplus> ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"\\<Sigma>_OR.R (x0,x1) (Inr w1) c = do {\n    (r1, ab1) \\<leftarrow> init1 x1 w1;\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    let ((r, eb', zb'),a) = ((r1, eb', zb0' ),  ab0' , ab1);\n    let eb = c \\<oplus> eb';\n    zb1 \\<leftarrow> response1 r w1 eb;\n    let z = ((eb', zb') , (eb, zb1));\n    return_spmf (a,c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n    init1 x1 w1 \\<bind>\n    (\\<lambda>(r1, ab1).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                    eb = c \\<oplus> eb'\n                in response1 r w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       let z = ((eb', zb'), eb, zb1)\n                       in return_spmf (a, c, z)))))", "supply [[simproc del: monad_normalisation]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n    init1 x1 w1 \\<bind>\n    (\\<lambda>(r1, ab1).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                    eb = c \\<oplus> eb'\n                in response1 r w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       let z = ((eb', zb'), eb, zb1)\n                       in return_spmf (a, c, z)))))", "by(simp add: \\<Sigma>_OR.R_def split_def Let_def)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                  eb = c \\<oplus> eb'\n              in response1 r w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     let z = ((eb', zb'), eb, zb1)\n                     in return_spmf (a, c, z)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                  eb = c \\<oplus> eb'\n              in response1 r w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     let z = ((eb', zb'), eb, zb1)\n                     in return_spmf (a, c, z)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    let eb = c \\<oplus> eb';\n    (ab1, c', zb1) \\<leftarrow> \\<Sigma>1.R x1 w1 eb;\n    let z = ((eb', zb0'), (eb, zb1));\n    return_spmf ((ab0',ab1),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init1 x1 w1 \\<bind>\n    (\\<lambda>(r1, ab1).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                    eb = c \\<oplus> eb'\n                in response1 r w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       let z = ((eb', zb'), eb, zb1)\n                       in return_spmf (a, c, z))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.R x1 w1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z))))", "by(simp add: \\<Sigma>1.R_def split_def Let_def)"], ["proof (state)\nthis:\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                  eb = c \\<oplus> eb'\n              in response1 r w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     let z = ((eb', zb'), eb, zb1)\n                     in return_spmf (a, c, z))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.R x1 w1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let ((r, eb', zb'), a) = ((r1, eb', zb0'), ab0', ab1);\n                  eb = c \\<oplus> eb'\n              in response1 r w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     let z = ((eb', zb'), eb, zb1)\n                     in return_spmf (a, c, z))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.R x1 w1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    let eb = c \\<oplus> eb';\n    (ab1, c', zb1) \\<leftarrow> \\<Sigma>1.S x1 eb;\n    let z = ((eb', zb0'), (eb, zb1));\n    return_spmf ((ab0',ab1),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.R x1 w1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.S x1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z))))", "using c"], ["proof (prove)\nusing this:\n  c \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.R x1 w1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.S x1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z))))", "by(simp add: split_def Let_def \\<Sigma>_prot1 \\<Sigma>1.HVZK_unfold1 assms challenge_space_def  cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.R x1 w1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.S x1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.R x1 w1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.S x1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb \\<leftarrow> map_spmf (\\<lambda> eb'. c \\<oplus> eb') (spmf_of_set (carrier L));\n    (ab1, c', zb1) \\<leftarrow> \\<Sigma>1.S x1 eb;\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 (c \\<oplus> eb);\n    let z = ((c \\<oplus> eb, zb0'), (eb, zb1));\n    return_spmf ((ab0',ab1),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>1.S x1 eb \\<bind>\n               (\\<lambda>(ab1, c', zb1).\n                   let z = ((eb', zb0'), eb, zb1)\n                   in return_spmf ((ab0', ab1), c, z)))) =\n    map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z))))", "apply(simp add: bind_map_spmf o_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            \\<Sigma>1.S x1 (c \\<oplus> eb') \\<bind>\n            (\\<lambda>(ab1, c', zb1).\n                return_spmf\n                 ((ab0', ab1), c, (eb', zb0'), c \\<oplus> eb', zb1)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>x.\n        \\<Sigma>1.S x1 (c \\<oplus> x) \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> c \\<oplus> x) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                return_spmf\n                 ((ab0', ab1), c, (c \\<oplus> c \\<oplus> x, zb0'),\n                  c \\<oplus> x, zb1))))", "by(simp add: * split_def cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.S x1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z)))) =\n  map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>1.S x1 eb \\<bind>\n             (\\<lambda>(ab1, c', zb1).\n                 let z = ((eb', zb0'), eb, zb1)\n                 in return_spmf ((ab0', ab1), c, z)))) =\n  map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb \\<leftarrow> (spmf_of_set (carrier L));\n    (ab1, c', zb1) \\<leftarrow> \\<Sigma>1.S x1 eb;\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 (c \\<oplus> eb);\n    let z = ((c \\<oplus> eb, zb0'), (eb, zb1));\n    return_spmf ((ab0',ab1),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z))))", "using assms assms one_time_pad c challenge_space_def"], ["proof (prove)\nusing this:\n  (x1, w1) \\<in> Rel1\n  (x1, w1) \\<in> Rel1\n  ?x \\<in> carrier L \\<Longrightarrow>\n  map_spmf ((\\<oplus>) ?x) (spmf_of_set (carrier L)) =\n  spmf_of_set (carrier L)\n  c \\<in> challenge_space\n  challenge_space = carrier L\n\ngoal (1 subgoal):\n 1. map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z))))", "by simp"], ["proof (state)\nthis:\n  map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  map_spmf ((\\<oplus>) c) (spmf_of_set (carrier L)) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb \\<leftarrow> (spmf_of_set (carrier L));\n    (ab1, c', zb1) \\<leftarrow> \\<Sigma>1.S x1 eb;\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 (c \\<oplus> eb);\n    let z = ((eb0'', zb0'), (c', zb1));\n    return_spmf ((ab0',ab1),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n                in return_spmf ((ab0', ab1), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb.\n        \\<Sigma>1.S x1 eb \\<bind>\n        (\\<lambda>(ab1, c', zb1).\n            \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let z = ((eb0'', zb0'), c', zb1)\n                in return_spmf ((ab0', ab1), c, z))))", "by(simp add: \\<Sigma>0.S_def \\<Sigma>1.S_def bind_map_spmf o_def split_def)"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((eb0'', zb0'), c', zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "ultimately"], ["proof (chain)\npicking this:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((eb0'', zb0'), c', zb1)\n              in return_spmf ((ab0', ab1), c, z))))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((c \\<oplus> eb, zb0'), eb, zb1)\n              in return_spmf ((ab0', ab1), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb.\n      \\<Sigma>1.S x1 eb \\<bind>\n      (\\<lambda>(ab1, c', zb1).\n          \\<Sigma>0.S x0 (c \\<oplus> eb) \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let z = ((eb0'', zb0'), c', zb1)\n              in return_spmf ((ab0', ab1), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c", "by(simp add: Let_def map_spmf_conv_bind_spmf \\<Sigma>_OR.S_def split_def)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inr w1) c = \\<Sigma>_OR.S (x0, x1) c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HVZK0: \n  assumes \"(x0,w0) \\<in> Rel0\"\n  shows \"\\<forall> c \\<in> challenge_space. \\<Sigma>_OR.R (x0,x1) (Inl w0) c = \\<Sigma>_OR.S (x0,x1) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c\\<in>challenge_space.\n       \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "assume c: \"c \\<in> challenge_space\""], ["proof (state)\nthis:\n  c \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> challenge_space \\<Longrightarrow>\n       \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "show \"\\<Sigma>_OR.R (x0,x1) (Inl w0) c = \\<Sigma>_OR.S (x0,x1) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "have \"\\<Sigma>_OR.R (x0,x1) (Inl w0) c = do {\n    (r0,ab0) \\<leftarrow> init0 x0 w0;\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    let ((r, eb', zb'),a) = ((r0, eb', zb1'),  ab0,  ab1');\n    let eb = c \\<oplus> eb';\n    zb0 \\<leftarrow> response0 r w0 eb;\n    let z = ((eb,zb0), (eb',zb'));\n    return_spmf (a,c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c =\n    init0 x0 w0 \\<bind>\n    (\\<lambda>(r0, ab0).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>(ab1', eb1'', zb1').\n                let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                    eb = c \\<oplus> eb'\n                in response0 r w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       let z = ((eb, zb0), eb', zb')\n                       in return_spmf (a, c, z)))))", "by(simp add: \\<Sigma>_OR.R_def split_def Let_def)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c =\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                  eb = c \\<oplus> eb'\n              in response0 r w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     let z = ((eb, zb0), eb', zb')\n                     in return_spmf (a, c, z)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c =\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                  eb = c \\<oplus> eb'\n              in response0 r w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     let z = ((eb, zb0), eb', zb')\n                     in return_spmf (a, c, z)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb' \\<leftarrow> (spmf_of_set (carrier L));\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    let eb = c \\<oplus> eb';\n    (ab0, c', zb0) \\<leftarrow> \\<Sigma>0.R x0 w0 eb;\n    let z = ((eb,zb0),  (eb',zb1'));\n    return_spmf ((ab0,  ab1'),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init0 x0 w0 \\<bind>\n    (\\<lambda>(r0, ab0).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>(ab1', eb1'', zb1').\n                let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                    eb = c \\<oplus> eb'\n                in response0 r w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       let z = ((eb, zb0), eb', zb')\n                       in return_spmf (a, c, z))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>0.R x0 w0 eb \\<bind>\n               (\\<lambda>(ab0, c', zb0).\n                   let z = ((eb, zb0), eb', zb1')\n                   in return_spmf ((ab0, ab1'), c, z))))", "apply(simp add: \\<Sigma>0.R_def split_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init0 x0 w0 \\<bind>\n    (\\<lambda>p.\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>pa.\n                response0 (fst p) w0 (c \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     ((snd p, fst pa), c, (c \\<oplus> eb', zb0), eb',\n                      snd (snd pa)))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>y.\n                response0 (fst y) w0 (c \\<oplus> eb') \\<bind>\n                (\\<lambda>ya.\n                    return_spmf\n                     ((snd y, fst p), c, (c \\<oplus> eb', ya), eb',\n                      snd (snd p))))))", "apply(rewrite bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        init0 x0 w0 \\<bind>\n        (\\<lambda>p.\n            \\<Sigma>1.S x1 y \\<bind>\n            (\\<lambda>pa.\n                response0 (fst p) w0 (c \\<oplus> y) \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     ((snd p, fst pa), c, (c \\<oplus> y, zb0), y,\n                      snd (snd pa)))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>y.\n                response0 (fst y) w0 (c \\<oplus> eb') \\<bind>\n                (\\<lambda>ya.\n                    return_spmf\n                     ((snd y, fst p), c, (c \\<oplus> eb', ya), eb',\n                      snd (snd p))))))", "apply(rewrite bind_commute_spmf[of _ \"\\<Sigma>1.S _ _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        \\<Sigma>1.S x1 y \\<bind>\n        (\\<lambda>ya.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>p.\n                response0 (fst p) w0 (c \\<oplus> y) \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     ((snd p, fst ya), c, (c \\<oplus> y, zb0), y,\n                      snd (snd ya)))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>y.\n                response0 (fst y) w0 (c \\<oplus> eb') \\<bind>\n                (\\<lambda>ya.\n                    return_spmf\n                     ((snd y, fst p), c, (c \\<oplus> eb', ya), eb',\n                      snd (snd p))))))", "by simp"], ["proof (state)\nthis:\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                  eb = c \\<oplus> eb'\n              in response0 r w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     let z = ((eb, zb0), eb', zb')\n                     in return_spmf (a, c, z))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "also"], ["proof (state)\nthis:\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let ((r, eb', zb'), a) = ((r0, eb', zb1'), ab0, ab1');\n                  eb = c \\<oplus> eb'\n              in response0 r w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     let z = ((eb, zb0), eb', zb')\n                     in return_spmf (a, c, z))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "have \"... = do {\n    eb' \\<leftarrow> (spmf_of_set (carrier L));\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    let eb = c \\<oplus> eb';\n    (ab0, c', zb0) \\<leftarrow> \\<Sigma>0.S x0 eb;\n    let z = ((eb,zb0), (eb',zb1'));\n    return_spmf ((ab0,  ab1'),c,z)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>0.R x0 w0 eb \\<bind>\n               (\\<lambda>(ab0, c', zb0).\n                   let z = ((eb, zb0), eb', zb1')\n                   in return_spmf ((ab0, ab1'), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>0.S x0 eb \\<bind>\n               (\\<lambda>(ab0, c', zb0).\n                   let z = ((eb, zb0), eb', zb1')\n                   in return_spmf ((ab0, ab1'), c, z))))", "using c"], ["proof (prove)\nusing this:\n  c \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>0.R x0 w0 eb \\<bind>\n               (\\<lambda>(ab0, c', zb0).\n                   let z = ((eb, zb0), eb', zb1')\n                   in return_spmf ((ab0, ab1'), c, z)))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = c \\<oplus> eb'\n            in \\<Sigma>0.S x0 eb \\<bind>\n               (\\<lambda>(ab0, c', zb0).\n                   let z = ((eb, zb0), eb', zb1')\n                   in return_spmf ((ab0, ab1'), c, z))))", "by(simp add: \\<Sigma>_prot0 \\<Sigma>0.HVZK_unfold1 assms challenge_space_def split_def Let_def cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.S x0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "ultimately"], ["proof (chain)\npicking this:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.S x0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.R x0 w0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z)))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = c \\<oplus> eb'\n          in \\<Sigma>0.S x0 eb \\<bind>\n             (\\<lambda>(ab0, c', zb0).\n                 let z = ((eb, zb0), eb', zb1')\n                 in return_spmf ((ab0, ab1'), c, z))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c", "by(simp add: \\<Sigma>_OR.S_def \\<Sigma>1.S_def \\<Sigma>0.S_def Let_def o_def bind_map_spmf split_def map_spmf_conv_bind_spmf)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sigma>_OR.R (x0, x1) (Inl w0) c = \\<Sigma>_OR.S (x0, x1) c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HVZK:\n  shows \"\\<Sigma>_OR.HVZK\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.HVZK", "unfolding \\<Sigma>_OR.HVZK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>challenge_space.\n       (\\<forall>(h, w)\\<in>Rel_OR.\n           \\<Sigma>_OR.R h w e = \\<Sigma>_OR.S h e) \\<and>\n       (\\<forall>h\\<in>valid_pub_OR.\n           \\<forall>(a, z)\\<in>set_spmf (S_OR h e). check_OR h a e z)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e a b ba.\n       \\<lbrakk>e \\<in> challenge_space; ((a, b), ba) \\<in> Rel_OR\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.R (a, b) ba e = \\<Sigma>_OR.S (a, b) e\n 2. \\<And>e a b aa ab bb ac bc x ad.\n       \\<lbrakk>e \\<in> challenge_space; (a, b) \\<in> valid_pub_OR;\n        x \\<in> carrier L; (ad, ac, bc) \\<in> set_spmf (\\<Sigma>1.S b x);\n        (aa, ab, bb) \\<in> set_spmf (\\<Sigma>0.S a (e \\<oplus> x))\\<rbrakk>\n       \\<Longrightarrow> check_OR (a, b) (aa, ad) e ((ab, bb), ac, bc)", "subgoal for e a b w"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e \\<in> challenge_space; ((a, b), w) \\<in> Rel_OR\\<rbrakk>\n    \\<Longrightarrow> \\<Sigma>_OR.R (a, b) w e = \\<Sigma>_OR.S (a, b) e", "apply(cases w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>e \\<in> challenge_space; ((a, b), w) \\<in> Rel_OR;\n        w = Inl aa\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.R (a, b) w e = \\<Sigma>_OR.S (a, b) e\n 2. \\<And>ba.\n       \\<lbrakk>e \\<in> challenge_space; ((a, b), w) \\<in> Rel_OR;\n        w = Inr ba\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.R (a, b) w e = \\<Sigma>_OR.S (a, b) e", "using HVZK0 HVZK1"], ["proof (prove)\nusing this:\n  (?x0.0, ?w0.0) \\<in> Rel0 \\<Longrightarrow>\n  \\<forall>c\\<in>challenge_space.\n     \\<Sigma>_OR.R (?x0.0, ?x1.0) (Inl ?w0.0) c =\n     \\<Sigma>_OR.S (?x0.0, ?x1.0) c\n  (?x1.0, ?w1.0) \\<in> Rel1 \\<Longrightarrow>\n  \\<forall>c\\<in>challenge_space.\n     \\<Sigma>_OR.R (?x0.0, ?x1.0) (Inr ?w1.0) c =\n     \\<Sigma>_OR.S (?x0.0, ?x1.0) c\n\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>e \\<in> challenge_space; ((a, b), w) \\<in> Rel_OR;\n        w = Inl aa\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.R (a, b) w e = \\<Sigma>_OR.S (a, b) e\n 2. \\<And>ba.\n       \\<lbrakk>e \\<in> challenge_space; ((a, b), w) \\<in> Rel_OR;\n        w = Inr ba\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.R (a, b) w e = \\<Sigma>_OR.S (a, b) e", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a b aa ab bb ac bc x ad.\n       \\<lbrakk>e \\<in> challenge_space; (a, b) \\<in> valid_pub_OR;\n        x \\<in> carrier L; (ad, ac, bc) \\<in> set_spmf (\\<Sigma>1.S b x);\n        (aa, ab, bb) \\<in> set_spmf (\\<Sigma>0.S a (e \\<oplus> x))\\<rbrakk>\n       \\<Longrightarrow> check_OR (a, b) (aa, ad) e ((ab, bb), ac, bc)", "apply(auto simp add: valid_pub_OR_def \\<Sigma>_OR.S_def bind_map_spmf o_def check_OR_def image_def \\<Sigma>0.S_def \\<Sigma>1.S_def split_def challenge_space_def local.xor_ac(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check0 a af (e \\<oplus> x) bd\n 2. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check1 b ae x ba", "using \\<Sigma>0.HVZK_unfold2 \\<Sigma>_prot0 challenge_space_def"], ["proof (prove)\nusing this:\n  \\<Sigma>0.\\<Sigma>_protocol \\<Longrightarrow>\n  \\<forall>h e out.\n     e \\<in> carrier L \\<longrightarrow>\n     h \\<in> valid_pub0 \\<longrightarrow>\n     out \\<in> set_spmf (S0_raw h e) \\<longrightarrow>\n     check0 h (fst out) e (snd out)\n  \\<Sigma>0.\\<Sigma>_protocol\n  challenge_space = carrier L\n\ngoal (2 subgoals):\n 1. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check0 a af (e \\<oplus> x) bd\n 2. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check1 b ae x ba", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check1 b ae x ba", "using \\<Sigma>1.HVZK_unfold2 \\<Sigma>_prot1 challenge_space_def"], ["proof (prove)\nusing this:\n  \\<Sigma>1.\\<Sigma>_protocol \\<Longrightarrow>\n  \\<forall>h e out.\n     e \\<in> carrier L \\<longrightarrow>\n     h \\<in> valid_pub1 \\<longrightarrow>\n     out \\<in> set_spmf (S1_raw h e) \\<longrightarrow>\n     check1 h (fst out) e (snd out)\n  \\<Sigma>1.\\<Sigma>_protocol\n  challenge_space = carrier L\n\ngoal (1 subgoal):\n 1. \\<And>e a b x ae ba af bd.\n       \\<lbrakk>e \\<in> carrier L; x \\<in> carrier L;\n        (ae, ba) \\<in> set_spmf (S1_raw b x);\n        (af, bd) \\<in> set_spmf (S0_raw a (e \\<oplus> x));\n        a \\<in> valid_pub0; b \\<in> valid_pub1\\<rbrakk>\n       \\<Longrightarrow> check1 b ae x ba", "by force"], ["", "lemma assumes \"(x0,x1) \\<in> Domain Rel_OR\"\n  shows \"(\\<exists> w0. (x0,w0) \\<in> Rel0) \\<or> (\\<exists> w1. (x1,w1) \\<in> Rel1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>w0. (x0, w0) \\<in> Rel0) \\<or>\n    (\\<exists>w1. (x1, w1) \\<in> Rel1)", "using assms Rel_OR.simps"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> Domain Rel_OR\n  (((?a1.0, ?a2.0), ?a3.0) \\<in> Rel_OR) =\n  ((\\<exists>x0 w0 x1.\n       ?a1.0 = x0 \\<and>\n       ?a2.0 = x1 \\<and>\n       ?a3.0 = Inl w0 \\<and>\n       (x0, w0) \\<in> Rel0 \\<and> x1 \\<in> valid_pub1) \\<or>\n   (\\<exists>x1 w1 x0.\n       ?a1.0 = x0 \\<and>\n       ?a2.0 = x1 \\<and>\n       ?a3.0 = Inr w1 \\<and>\n       (x1, w1) \\<in> Rel1 \\<and> x0 \\<in> valid_pub0))\n\ngoal (1 subgoal):\n 1. (\\<exists>w0. (x0, w0) \\<in> Rel0) \\<or>\n    (\\<exists>w1. (x1, w1) \\<in> Rel1)", "by blast"], ["", "lemma ss: \n  assumes valid_pub_OR: \"(x0,x1) \\<in> valid_pub_OR\" \n    and check: \"check_OR (x0,x1) (a0,a1) s ((e0,z0), (e1,z1))\"\n    and check': \"check_OR (x0,x1) (a0,a1) s' ((e0',z0'), (e1',z1'))\"\n    and \"s \\<noteq> s'\"\n    and challenge_space: \"s \\<in> challenge_space\" \"s' \\<in> challenge_space\"\n  shows \"lossless_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')) \\<and>\n           (\\<forall>w'\\<in>set_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')). ((x0,x1), w') \\<in> Rel_OR)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have e_or: \"e0 \\<noteq> e0' \\<or> e1 \\<noteq> e1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<noteq> e0' \\<or> e1 \\<noteq> e1'", "using assms check_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. e0 \\<noteq> e0' \\<or> e1 \\<noteq> e1'", "by auto"], ["proof (state)\nthis:\n  e0 \\<noteq> e0' \\<or> e1 \\<noteq> e1'\n\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "proof(cases \"e0 \\<noteq> e0'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "case True"], ["proof (state)\nthis:\n  e0 \\<noteq> e0'\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  e0 \\<noteq> e0'\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 2: \"x0 \\<in> valid_pub0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x0 \\<in> valid_pub0", "using valid_pub_OR valid_pub_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n\ngoal (1 subgoal):\n 1. x0 \\<in> valid_pub0", "by simp"], ["proof (state)\nthis:\n  x0 \\<in> valid_pub0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  x0 \\<in> valid_pub0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 3: \"check0 x0 a0 e0 z0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check0 x0 a0 e0 z0", "using assms check_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. check0 x0 a0 e0 z0", "by simp"], ["proof (state)\nthis:\n  check0 x0 a0 e0 z0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  check0 x0 a0 e0 z0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 4: \"check0 x0 a0 e0' z0'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check0 x0 a0 e0' z0'", "using assms check_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. check0 x0 a0 e0' z0'", "by simp"], ["proof (state)\nthis:\n  check0 x0 a0 e0' z0'\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  check0 x0 a0 e0' z0'\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have e: \"e0 \\<in> carrier L\" \"e0' \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> carrier L &&& e0' \\<in> carrier L", "using challenge_space_def check check' check_OR_def"], ["proof (prove)\nusing this:\n  challenge_space = carrier L\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. e0 \\<in> carrier L &&& e0' \\<in> carrier L", "by auto"], ["proof (state)\nthis:\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "ultimately"], ["proof (chain)\npicking this:\n  e0 \\<noteq> e0'\n  x0 \\<in> valid_pub0\n  check0 x0 a0 e0 z0\n  check0 x0 a0 e0' z0'\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L", "have \"(\\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0,e0,z0) (a0,e0',z0')). (x0, w') \\<in> Rel0)\""], ["proof (prove)\nusing this:\n  e0 \\<noteq> e0'\n  x0 \\<in> valid_pub0\n  check0 x0 a0 e0 z0\n  check0 x0 a0 e0' z0'\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n       (x0, w') \\<in> Rel0", "using True \\<Sigma>0.\\<Sigma>_protocol_def \\<Sigma>0.special_soundness_def \\<Sigma>_prot0 challenge_space assms"], ["proof (prove)\nusing this:\n  e0 \\<noteq> e0'\n  x0 \\<in> valid_pub0\n  check0 x0 a0 e0 z0\n  check0 x0 a0 e0' z0'\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L\n  e0 \\<noteq> e0'\n  \\<Sigma>0.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>0.completeness \\<and>\n  \\<Sigma>0.special_soundness \\<and> \\<Sigma>0.HVZK\n  \\<Sigma>0.special_soundness \\<equiv>\n  \\<forall>h e e' a z z'.\n     h \\<in> valid_pub0 \\<longrightarrow>\n     e \\<in> carrier L \\<longrightarrow>\n     e' \\<in> carrier L \\<longrightarrow>\n     e \\<noteq> e' \\<longrightarrow>\n     check0 h a e z \\<longrightarrow>\n     check0 h a e' z' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 h (a, e, z) (a, e', z')) \\<and>\n     (\\<forall>w'\\<in>set_spmf (\\<A>ss0 h (a, e, z) (a, e', z')).\n         (h, w') \\<in> Rel0)\n  \\<Sigma>0.\\<Sigma>_protocol\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n       (x0, w') \\<in> Rel0", "by blast"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n     (x0, w') \\<in> Rel0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n     (x0, w') \\<in> Rel0\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have  \"lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))", "using 2 3 4 \\<A>ss_OR_def True \\<Sigma>_prot0  \\<Sigma>0.\\<Sigma>_protocol_def \\<Sigma>0.special_soundness_def challenge_space_def e"], ["proof (prove)\nusing this:\n  x0 \\<in> valid_pub0\n  check0 x0 a0 e0 z0\n  check0 x0 a0 e0' z0'\n  \\<A>ss_OR ?X ?C1.0 ?C2.0 =\n  (if fst (fst (snd (snd ?C1.0))) \\<noteq> fst (fst (snd (snd ?C2.0)))\n   then \\<A>ss0 (fst ?X)\n         (fst (fst ?C1.0), fst (fst (snd (snd ?C1.0))),\n          snd (fst (snd (snd ?C1.0))))\n         (fst (fst ?C2.0), fst (fst (snd (snd ?C2.0))),\n          snd (fst (snd (snd ?C2.0)))) \\<bind>\n        (\\<lambda>w0. return_spmf (Inl w0))\n   else \\<A>ss1 (snd ?X)\n         (snd (fst ?C1.0), fst (snd (snd (snd ?C1.0))),\n          snd (snd (snd (snd ?C1.0))))\n         (snd (fst ?C2.0), fst (snd (snd (snd ?C2.0))),\n          snd (snd (snd (snd ?C2.0)))) \\<bind>\n        (\\<lambda>w1. return_spmf (Inr w1)))\n  e0 \\<noteq> e0'\n  \\<Sigma>0.\\<Sigma>_protocol\n  \\<Sigma>0.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>0.completeness \\<and>\n  \\<Sigma>0.special_soundness \\<and> \\<Sigma>0.HVZK\n  \\<Sigma>0.special_soundness \\<equiv>\n  \\<forall>h e e' a z z'.\n     h \\<in> valid_pub0 \\<longrightarrow>\n     e \\<in> carrier L \\<longrightarrow>\n     e' \\<in> carrier L \\<longrightarrow>\n     e \\<noteq> e' \\<longrightarrow>\n     check0 h a e z \\<longrightarrow>\n     check0 h a e' z' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 h (a, e, z) (a, e', z')) \\<and>\n     (\\<forall>w'\\<in>set_spmf (\\<A>ss0 h (a, e, z) (a, e', z')).\n         (h, w') \\<in> Rel0)\n  challenge_space = carrier L\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))", "by blast"], ["proof (state)\nthis:\n  lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n     (x0, w') \\<in> Rel0\n  lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))", "have \"\\<forall> w' \\<in> set_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')). ((x0,x1),  w') \\<in> Rel_OR\""], ["proof (prove)\nusing this:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n     (x0, w') \\<in> Rel0\n  lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf\n                     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                       ((a0, a1), s', (e0', z0'), e1', z1')).\n       ((x0, x1), w') \\<in> Rel_OR", "apply(auto simp only: \\<A>ss_OR_alt_def True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w'.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n                   (x0, w') \\<in> Rel0;\n        lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'));\n        w' \\<in> set_spmf\n                  (if \\<not> False\n                   then \\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0') \\<bind>\n                        (\\<lambda>w0. return_spmf (Inl w0))\n                   else \\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1') \\<bind>\n                        (\\<lambda>w1. return_spmf (Inr w1)))\\<rbrakk>\n       \\<Longrightarrow> ((x0, x1), w') \\<in> Rel_OR", "apply(auto simp add: o_def \\<A>ss_OR_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n                   (x0, w') \\<in> Rel0;\n        lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'));\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> x1 \\<in> valid_pub1", "using assms valid_pub_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0')).\n                   (x0, w') \\<in> Rel0;\n        lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'));\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> x1 \\<in> valid_pub1", "by blast"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have \"lossless_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1'))", "apply(simp add: \\<A>ss_OR_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e0 \\<noteq> e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))) \\<and>\n    (e0 = e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')))", "using 2 3 4 True \\<Sigma>_prot0  \\<Sigma>0.\\<Sigma>_protocol_def \\<Sigma>0.special_soundness_def challenge_space e"], ["proof (prove)\nusing this:\n  x0 \\<in> valid_pub0\n  check0 x0 a0 e0 z0\n  check0 x0 a0 e0' z0'\n  e0 \\<noteq> e0'\n  \\<Sigma>0.\\<Sigma>_protocol\n  \\<Sigma>0.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>0.completeness \\<and>\n  \\<Sigma>0.special_soundness \\<and> \\<Sigma>0.HVZK\n  \\<Sigma>0.special_soundness \\<equiv>\n  \\<forall>h e e' a z z'.\n     h \\<in> valid_pub0 \\<longrightarrow>\n     e \\<in> carrier L \\<longrightarrow>\n     e' \\<in> carrier L \\<longrightarrow>\n     e \\<noteq> e' \\<longrightarrow>\n     check0 h a e z \\<longrightarrow>\n     check0 h a e' z' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 h (a, e, z) (a, e', z')) \\<and>\n     (\\<forall>w'\\<in>set_spmf (\\<A>ss0 h (a, e, z) (a, e', z')).\n         (h, w') \\<in> Rel0)\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  e0 \\<in> carrier L\n  e0' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. (e0 \\<noteq> e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))) \\<and>\n    (e0 = e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')))", "by blast"], ["proof (state)\nthis:\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))\n\ngoal (2 subgoals):\n 1. e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)\n 2. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))\n\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "by simp"], ["proof (state)\nthis:\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n  (\\<forall>w'\\<in>set_spmf\n                    (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                      ((a0, a1), s', (e0', z0'), e1', z1')).\n      ((x0, x1), w') \\<in> Rel_OR)\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "case False"], ["proof (state)\nthis:\n  \\<not> e0 \\<noteq> e0'\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "hence e1_neq_e1': \"e1 \\<noteq> e1'\""], ["proof (prove)\nusing this:\n  \\<not> e0 \\<noteq> e0'\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e1'", "using e_or"], ["proof (prove)\nusing this:\n  \\<not> e0 \\<noteq> e0'\n  e0 \\<noteq> e0' \\<or> e1 \\<noteq> e1'\n\ngoal (1 subgoal):\n 1. e1 \\<noteq> e1'", "by simp"], ["proof (state)\nthis:\n  e1 \\<noteq> e1'\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  e1 \\<noteq> e1'\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 2: \"x1 \\<in> valid_pub1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> valid_pub1", "using valid_pub_OR valid_pub_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n\ngoal (1 subgoal):\n 1. x1 \\<in> valid_pub1", "by simp"], ["proof (state)\nthis:\n  x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 3: \"check1 x1 a1 e1 z1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check1 x1 a1 e1 z1", "using assms check_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. check1 x1 a1 e1 z1", "by simp"], ["proof (state)\nthis:\n  check1 x1 a1 e1 z1\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  check1 x1 a1 e1 z1\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have 4: \"check1 x1 a1 e1' z1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check1 x1 a1 e1' z1'", "using assms check_OR_def"], ["proof (prove)\nusing this:\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. check1 x1 a1 e1' z1'", "by simp"], ["proof (state)\nthis:\n  check1 x1 a1 e1' z1'\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  check1 x1 a1 e1' z1'\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have e: \"e1 \\<in> carrier L\" \"e1' \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<in> carrier L &&& e1' \\<in> carrier L", "using challenge_space_def check check' check_OR_def"], ["proof (prove)\nusing this:\n  challenge_space = carrier L\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  check_OR ?X ?A ?s ?Z =\n  (?s = fst (fst ?Z) \\<oplus> fst (snd ?Z) \\<and>\n   fst (fst ?Z) \\<in> challenge_space \\<and>\n   fst (snd ?Z) \\<in> challenge_space \\<and>\n   check0 (fst ?X) (fst ?A) (fst (fst ?Z)) (snd (fst ?Z)) \\<and>\n   check1 (snd ?X) (snd ?A) (fst (snd ?Z)) (snd (snd ?Z)))\n\ngoal (1 subgoal):\n 1. e1 \\<in> carrier L &&& e1' \\<in> carrier L", "by auto"], ["proof (state)\nthis:\n  e1 \\<in> carrier L\n  e1' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "ultimately"], ["proof (chain)\npicking this:\n  e1 \\<noteq> e1'\n  x1 \\<in> valid_pub1\n  check1 x1 a1 e1 z1\n  check1 x1 a1 e1' z1'\n  e1 \\<in> carrier L\n  e1' \\<in> carrier L", "have \"(\\<forall>w'\\<in>set_spmf (\\<A>ss1 x1 (a1,e1,z1) (a1,e1',z1')). (x1,w') \\<in> Rel1)\""], ["proof (prove)\nusing this:\n  e1 \\<noteq> e1'\n  x1 \\<in> valid_pub1\n  check1 x1 a1 e1 z1\n  check1 x1 a1 e1' z1'\n  e1 \\<in> carrier L\n  e1' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n       (x1, w') \\<in> Rel1", "using False \\<Sigma>1.\\<Sigma>_protocol_def \\<Sigma>1.special_soundness_def \\<Sigma>_prot1 e1_neq_e1' challenge_space"], ["proof (prove)\nusing this:\n  e1 \\<noteq> e1'\n  x1 \\<in> valid_pub1\n  check1 x1 a1 e1 z1\n  check1 x1 a1 e1' z1'\n  e1 \\<in> carrier L\n  e1' \\<in> carrier L\n  \\<not> e0 \\<noteq> e0'\n  \\<Sigma>1.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>1.completeness \\<and>\n  \\<Sigma>1.special_soundness \\<and> \\<Sigma>1.HVZK\n  \\<Sigma>1.special_soundness \\<equiv>\n  \\<forall>h e e' a z z'.\n     h \\<in> valid_pub1 \\<longrightarrow>\n     e \\<in> carrier L \\<longrightarrow>\n     e' \\<in> carrier L \\<longrightarrow>\n     e \\<noteq> e' \\<longrightarrow>\n     check1 h a e z \\<longrightarrow>\n     check1 h a e' z' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 h (a, e, z) (a, e', z')) \\<and>\n     (\\<forall>w'\\<in>set_spmf (\\<A>ss1 h (a, e, z) (a, e', z')).\n         (h, w') \\<in> Rel1)\n  \\<Sigma>1.\\<Sigma>_protocol\n  e1 \\<noteq> e1'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n       (x1, w') \\<in> Rel1", "by blast"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n     (x1, w') \\<in> Rel1\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "hence \"\\<forall>w' \\<in> set_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1')). ((x0,x1), w') \\<in> Rel_OR\""], ["proof (prove)\nusing this:\n  \\<forall>w'\\<in>set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n     (x1, w') \\<in> Rel1\n\ngoal (1 subgoal):\n 1. \\<forall>w'\\<in>set_spmf\n                     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                       ((a0, a1), s', (e0', z0'), e1', z1')).\n       ((x0, x1), w') \\<in> Rel_OR", "apply(auto simp add: o_def \\<A>ss_OR_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 \\<noteq> e0';\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> (x0, x) \\<in> Rel0\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 \\<noteq> e0';\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> x1 \\<in> valid_pub1\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 = e0';\n        x \\<in> set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1'))\\<rbrakk>\n       \\<Longrightarrow> x0 \\<in> valid_pub0", "using False assms \\<Sigma>1.L_def assms valid_pub_OR_def"], ["proof (prove)\nusing this:\n  \\<not> e0 \\<noteq> e0'\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  \\<Sigma>1.L \\<equiv> {x. \\<exists>w. (x, w) \\<in> Rel1}\n  (x0, x1) \\<in> valid_pub_OR\n  check_OR (x0, x1) (a0, a1) s ((e0, z0), e1, z1)\n  check_OR (x0, x1) (a0, a1) s' ((e0', z0'), e1', z1')\n  s \\<noteq> s'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  valid_pub_OR = {(x0, x1). x0 \\<in> valid_pub0 \\<and> x1 \\<in> valid_pub1}\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 \\<noteq> e0';\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> (x0, x) \\<in> Rel0\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 \\<noteq> e0';\n        x \\<in> set_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))\\<rbrakk>\n       \\<Longrightarrow> x1 \\<in> valid_pub1\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>w'\\<in>set_spmf\n                                 (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')).\n                   (x1, w') \\<in> Rel1;\n        e0 = e0';\n        x \\<in> set_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1'))\\<rbrakk>\n       \\<Longrightarrow> x0 \\<in> valid_pub0", "by auto"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "moreover"], ["proof (state)\nthis:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "have \"lossless_spmf (\\<A>ss_OR (x0,x1) ((a0,a1),s,(e0,z0), e1,z1) ((a0,a1),s',(e0',z0'), e1',z1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1'))", "apply(simp add: \\<A>ss_OR_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e0 \\<noteq> e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))) \\<and>\n    (e0 = e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')))", "using 2 3 4 \\<Sigma>_prot1 \\<Sigma>1.\\<Sigma>_protocol_def \\<Sigma>1.special_soundness_def False e1_neq_e1' challenge_space e"], ["proof (prove)\nusing this:\n  x1 \\<in> valid_pub1\n  check1 x1 a1 e1 z1\n  check1 x1 a1 e1' z1'\n  \\<Sigma>1.\\<Sigma>_protocol\n  \\<Sigma>1.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>1.completeness \\<and>\n  \\<Sigma>1.special_soundness \\<and> \\<Sigma>1.HVZK\n  \\<Sigma>1.special_soundness \\<equiv>\n  \\<forall>h e e' a z z'.\n     h \\<in> valid_pub1 \\<longrightarrow>\n     e \\<in> carrier L \\<longrightarrow>\n     e' \\<in> carrier L \\<longrightarrow>\n     e \\<noteq> e' \\<longrightarrow>\n     check1 h a e z \\<longrightarrow>\n     check1 h a e' z' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 h (a, e, z) (a, e', z')) \\<and>\n     (\\<forall>w'\\<in>set_spmf (\\<A>ss1 h (a, e, z) (a, e', z')).\n         (h, w') \\<in> Rel1)\n  \\<not> e0 \\<noteq> e0'\n  e1 \\<noteq> e1'\n  s \\<in> challenge_space\n  s' \\<in> challenge_space\n  e1 \\<in> carrier L\n  e1' \\<in> carrier L\n\ngoal (1 subgoal):\n 1. (e0 \\<noteq> e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss0 x0 (a0, e0, z0) (a0, e0', z0'))) \\<and>\n    (e0 = e0' \\<longrightarrow>\n     lossless_spmf (\\<A>ss1 x1 (a1, e1, z1) (a1, e1', z1')))", "by blast"], ["proof (state)\nthis:\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))\n\ngoal (1 subgoal):\n 1. \\<not> e0 \\<noteq> e0' \\<Longrightarrow>\n    lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>w'\\<in>set_spmf\n                   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                     ((a0, a1), s', (e0', z0'), e1', z1')).\n     ((x0, x1), w') \\<in> Rel_OR\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1'))\n\ngoal (1 subgoal):\n 1. lossless_spmf\n     (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n       ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n    (\\<forall>w'\\<in>set_spmf\n                      (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                        ((a0, a1), s', (e0', z0'), e1', z1')).\n        ((x0, x1), w') \\<in> Rel_OR)", "by simp"], ["proof (state)\nthis:\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n  (\\<forall>w'\\<in>set_spmf\n                    (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                      ((a0, a1), s', (e0', z0'), e1', z1')).\n      ((x0, x1), w') \\<in> Rel_OR)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lossless_spmf\n   (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n     ((a0, a1), s', (e0', z0'), e1', z1')) \\<and>\n  (\\<forall>w'\\<in>set_spmf\n                    (\\<A>ss_OR (x0, x1) ((a0, a1), s, (e0, z0), e1, z1)\n                      ((a0, a1), s', (e0', z0'), e1', z1')).\n      ((x0, x1), w') \\<in> Rel_OR)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma special_soundness: \n  shows \"\\<Sigma>_OR.special_soundness\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.special_soundness", "unfolding \\<Sigma>_OR.special_soundness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>h e e' a z z'.\n       h \\<in> valid_pub_OR \\<longrightarrow>\n       e \\<in> challenge_space \\<longrightarrow>\n       e' \\<in> challenge_space \\<longrightarrow>\n       e \\<noteq> e' \\<longrightarrow>\n       check_OR h a e z \\<longrightarrow>\n       check_OR h a e' z' \\<longrightarrow>\n       lossless_spmf (\\<A>ss_OR h (a, e, z) (a, e', z')) \\<and>\n       (\\<forall>w'\\<in>set_spmf (\\<A>ss_OR h (a, e, z) (a, e', z')).\n           (h, w') \\<in> Rel_OR)", "using ss prod.collapse"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x0.0, ?x1.0) \\<in> valid_pub_OR;\n   check_OR (?x0.0, ?x1.0) (?a0.0, ?a1.0) ?s ((?e0.0, ?z0.0), ?e1.0, ?z1.0);\n   check_OR (?x0.0, ?x1.0) (?a0.0, ?a1.0) ?s' ((?e0', ?z0'), ?e1', ?z1');\n   ?s \\<noteq> ?s'; ?s \\<in> challenge_space;\n   ?s' \\<in> challenge_space\\<rbrakk>\n  \\<Longrightarrow> lossless_spmf\n                     (\\<A>ss_OR (?x0.0, ?x1.0)\n                       ((?a0.0, ?a1.0), ?s, (?e0.0, ?z0.0), ?e1.0, ?z1.0)\n                       ((?a0.0, ?a1.0), ?s', (?e0', ?z0'), ?e1',\n                        ?z1')) \\<and>\n                    (\\<forall>w'\\<in>set_spmf\n(\\<A>ss_OR (?x0.0, ?x1.0) ((?a0.0, ?a1.0), ?s, (?e0.0, ?z0.0), ?e1.0, ?z1.0)\n  ((?a0.0, ?a1.0), ?s', (?e0', ?z0'), ?e1', ?z1')).\n                        ((?x0.0, ?x1.0), w') \\<in> Rel_OR)\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. \\<forall>h e e' a z z'.\n       h \\<in> valid_pub_OR \\<longrightarrow>\n       e \\<in> challenge_space \\<longrightarrow>\n       e' \\<in> challenge_space \\<longrightarrow>\n       e \\<noteq> e' \\<longrightarrow>\n       check_OR h a e z \\<longrightarrow>\n       check_OR h a e' z' \\<longrightarrow>\n       lossless_spmf (\\<A>ss_OR h (a, e, z) (a, e', z')) \\<and>\n       (\\<forall>w'\\<in>set_spmf (\\<A>ss_OR h (a, e, z) (a, e', z')).\n           (h, w') \\<in> Rel_OR)", "by fastforce"], ["", "lemma correct0: \n  assumes e_in_carrier: \"e \\<in> carrier L\"\n    and \"(x0,w0) \\<in> Rel0\"\n    and valid_pub: \"x1 \\<in> valid_pub1\"\n  shows \"\\<Sigma>_OR.completeness_game (x0,x1) (Inl w0) e = return_spmf True\"\n    (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "have \"x \\<in> carrier L \\<longrightarrow> e = (e \\<oplus> x) \\<oplus> x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<longrightarrow> e = (e \\<oplus> x) \\<oplus> x", "using e_in_carrier xor_assoc"], ["proof (prove)\nusing this:\n  e \\<in> carrier L\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L;\n   ?z \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<oplus> ?z =\n                    ?x \\<oplus> ?y \\<oplus> ?z\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<longrightarrow> e = (e \\<oplus> x) \\<oplus> x", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> carrier L \\<longrightarrow> e = (e \\<oplus> ?x) \\<oplus> ?x\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "hence \"?lhs = do {\n    (r0,ab0) \\<leftarrow> init0 x0 w0;\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    let eb = e \\<oplus> eb';\n    zb0 \\<leftarrow> response0 r0 w0 eb;\n    return_spmf ((check0 x0 ab0 eb zb0 \\<and> check1 x1 ab1' eb' zb1'))}\""], ["proof (prove)\nusing this:\n  ?x \\<in> carrier L \\<longrightarrow> e = (e \\<oplus> ?x) \\<oplus> ?x\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n    init0 x0 w0 \\<bind>\n    (\\<lambda>(r0, ab0).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>(ab1', eb1'', zb1').\n                let eb = e \\<oplus> eb'\n                in response0 r0 w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       return_spmf\n                        (check0 x0 ab0 eb zb0 \\<and>\n                         check1 x1 ab1' eb' zb1')))))", "by(simp add: \\<Sigma>_OR.completeness_game_def split_def Let_def challenge_space_def assms check_OR_def cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let eb = e \\<oplus> eb'\n              in response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1')))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "also"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let eb = e \\<oplus> eb'\n              in response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1')))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    let eb = e \\<oplus> eb';\n    (r0,ab0) \\<leftarrow> init0 x0 w0;\n    zb0 \\<leftarrow> response0 r0 w0 eb;\n    return_spmf ((check0 x0 ab0 eb zb0 \\<and> check1 x1 ab1' eb' zb1'))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init0 x0 w0 \\<bind>\n    (\\<lambda>(r0, ab0).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>(ab1', eb1'', zb1').\n                let eb = e \\<oplus> eb'\n                in response0 r0 w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       return_spmf\n                        (check0 x0 ab0 eb zb0 \\<and>\n                         check1 x1 ab1' eb' zb1'))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = e \\<oplus> eb'\n            in init0 x0 w0 \\<bind>\n               (\\<lambda>(r0, ab0).\n                   response0 r0 w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       return_spmf\n                        (check0 x0 ab0 eb zb0 \\<and>\n                         check1 x1 ab1' eb' zb1')))))", "apply(simp add: Let_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init0 x0 w0 \\<bind>\n    (\\<lambda>p.\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>1.S x1 eb' \\<bind>\n            (\\<lambda>pa.\n                response0 (fst p) w0 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd p) (e \\<oplus> eb') zb0 \\<and>\n                      check1 x1 (fst pa) eb' (snd (snd pa))))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>pa.\n                response0 (fst pa) w0 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd pa) (e \\<oplus> eb') zb0 \\<and>\n                      check1 x1 (fst p) eb' (snd (snd p)))))))", "apply(rewrite bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        init0 x0 w0 \\<bind>\n        (\\<lambda>p.\n            \\<Sigma>1.S x1 y \\<bind>\n            (\\<lambda>pa.\n                response0 (fst p) w0 (e \\<oplus> y) \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd p) (e \\<oplus> y) zb0 \\<and>\n                      check1 x1 (fst pa) y (snd (snd pa))))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>pa.\n                response0 (fst pa) w0 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd pa) (e \\<oplus> eb') zb0 \\<and>\n                      check1 x1 (fst p) eb' (snd (snd p)))))))", "apply(rewrite bind_commute_spmf[of _ \"\\<Sigma>1.S _ _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        \\<Sigma>1.S x1 y \\<bind>\n        (\\<lambda>ya.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>p.\n                response0 (fst p) w0 (e \\<oplus> y) \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd p) (e \\<oplus> y) zb0 \\<and>\n                      check1 x1 (fst ya) y (snd (snd ya))))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>p.\n            init0 x0 w0 \\<bind>\n            (\\<lambda>pa.\n                response0 (fst pa) w0 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 (snd pa) (e \\<oplus> eb') zb0 \\<and>\n                      check1 x1 (fst p) eb' (snd (snd p)))))))", "by simp"], ["proof (state)\nthis:\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let eb = e \\<oplus> eb'\n              in response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1'))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = e \\<oplus> eb'\n          in init0 x0 w0 \\<bind>\n             (\\<lambda>(r0, ab0).\n                 response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1')))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "also"], ["proof (state)\nthis:\n  init0 x0 w0 \\<bind>\n  (\\<lambda>(r0, ab0).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>1.S x1 eb' \\<bind>\n          (\\<lambda>(ab1', eb1'', zb1').\n              let eb = e \\<oplus> eb'\n              in response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1'))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = e \\<oplus> eb'\n          in init0 x0 w0 \\<bind>\n             (\\<lambda>(r0, ab0).\n                 response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1')))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "have \"... = do {\n    eb' :: 'e \\<leftarrow> spmf_of_set (carrier L);\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    return_spmf (check1 x1 ab1' eb' zb1')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            let eb = e \\<oplus> eb'\n            in init0 x0 w0 \\<bind>\n               (\\<lambda>(r0, ab0).\n                   response0 r0 w0 eb \\<bind>\n                   (\\<lambda>zb0.\n                       return_spmf\n                        (check0 x0 ab0 eb zb0 \\<and>\n                         check1 x1 ab1' eb' zb1'))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            return_spmf (check1 x1 ab1' eb' zb1')))", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            init0 x0 w0 \\<bind>\n            (\\<lambda>(r0, ab0).\n                response0 r0 w0 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb0.\n                    return_spmf\n                     (check0 x0 ab0 (e \\<oplus> eb') zb0 \\<and>\n                      check1 x1 ab1' eb' zb1'))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            return_spmf (check1 x1 ab1' eb' zb1')))", "apply(intro bind_spmf_cong; clarsimp?)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>x \\<in> carrier L;\n        (a, aa, b) \\<in> set_spmf (\\<Sigma>1.S x1 x)\\<rbrakk>\n       \\<Longrightarrow> init0 x0 w0 \\<bind>\n                         (\\<lambda>(r0, ab0).\n                             response0 r0 w0 (e \\<oplus> x) \\<bind>\n                             (\\<lambda>zb0.\n                                 return_spmf\n                                  (check0 x0 ab0 (e \\<oplus> x) zb0 \\<and>\n                                   check1 x1 a x b))) =\n                         return_spmf (check1 x1 a x b)", "subgoal for e' a e z"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>1.S x1 e')\\<rbrakk>\n    \\<Longrightarrow> init0 x0 w0 \\<bind>\n                      (\\<lambda>(r0, ab0).\n                          response0 r0 w0 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb0.\n                              return_spmf\n                               (check0 x0 ab0 (e \\<oplus> e') zb0 \\<and>\n                                check1 x1 a e' z))) =\n                      return_spmf (check1 x1 a e' z)", "apply(cases \"check1 x1 a e' z\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>1.S x1 e'); check1 x1 a e' z\\<rbrakk>\n    \\<Longrightarrow> init0 x0 w0 \\<bind>\n                      (\\<lambda>(r0, ab0).\n                          response0 r0 w0 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb0.\n                              return_spmf\n                               (check0 x0 ab0 (e \\<oplus> e') zb0 \\<and>\n                                check1 x1 a e' z))) =\n                      return_spmf (check1 x1 a e' z)\n 2. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>1.S x1 e');\n     \\<not> check1 x1 a e' z\\<rbrakk>\n    \\<Longrightarrow> init0 x0 w0 \\<bind>\n                      (\\<lambda>(r0, ab0).\n                          response0 r0 w0 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb0.\n                              return_spmf\n                               (check0 x0 ab0 (e \\<oplus> e') zb0 \\<and>\n                                check1 x1 a e' z))) =\n                      return_spmf (check1 x1 a e' z)", "using \\<Sigma>0.complete_game_return_true \\<Sigma>_prot0 \\<Sigma>0.completeness_game_def \\<Sigma>0.\\<Sigma>_protocol_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?h, ?w) \\<in> Rel0; \\<Sigma>0.completeness;\n   \\<forall>h w. lossless_spmf (init0 h w);\n   \\<forall>r w e. lossless_spmf (response0 r w e);\n   ?e \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<Sigma>0.completeness_game ?h ?w ?e = return_spmf True\n  \\<Sigma>0.\\<Sigma>_protocol\n  \\<Sigma>0.completeness_game ?h ?w ?e =\n  init0 ?h ?w \\<bind>\n  (\\<lambda>(r, a).\n      response0 r ?w ?e \\<bind>\n      (\\<lambda>z. return_spmf (check0 ?h a ?e z)))\n  \\<Sigma>0.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>0.completeness \\<and>\n  \\<Sigma>0.special_soundness \\<and> \\<Sigma>0.HVZK\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>1.S x1 e'); check1 x1 a e' z\\<rbrakk>\n    \\<Longrightarrow> init0 x0 w0 \\<bind>\n                      (\\<lambda>(r0, ab0).\n                          response0 r0 w0 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb0.\n                              return_spmf\n                               (check0 x0 ab0 (e \\<oplus> e') zb0 \\<and>\n                                check1 x1 a e' z))) =\n                      return_spmf (check1 x1 a e' z)\n 2. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>1.S x1 e');\n     \\<not> check1 x1 a e' z\\<rbrakk>\n    \\<Longrightarrow> init0 x0 w0 \\<bind>\n                      (\\<lambda>(r0, ab0).\n                          response0 r0 w0 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb0.\n                              return_spmf\n                               (check0 x0 ab0 (e \\<oplus> e') zb0 \\<and>\n                                check1 x1 a e' z))) =\n                      return_spmf (check1 x1 a e' z)", "by(auto simp add: assms bind_spmf_const lossless_init lossless_response lossless_weight_spmfD split_def cong: bind_spmf_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = e \\<oplus> eb'\n          in init0 x0 w0 \\<bind>\n             (\\<lambda>(r0, ab0).\n                 response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1'))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf (check1 x1 ab1' eb' zb1')))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "also"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          let eb = e \\<oplus> eb'\n          in init0 x0 w0 \\<bind>\n             (\\<lambda>(r0, ab0).\n                 response0 r0 w0 eb \\<bind>\n                 (\\<lambda>zb0.\n                     return_spmf\n                      (check0 x0 ab0 eb zb0 \\<and>\n                       check1 x1 ab1' eb' zb1'))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf (check1 x1 ab1' eb' zb1')))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "have \"... = do {\n    eb' :: 'e \\<leftarrow> spmf_of_set (carrier L);\n    (ab1', eb1'', zb1') \\<leftarrow> \\<Sigma>1.S x1 eb';\n    return_spmf (True)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1').\n            return_spmf (check1 x1 ab1' eb' zb1'))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>1.S x1 eb' \\<bind>\n        (\\<lambda>(ab1', eb1'', zb1'). return_spmf True))", "apply(intro bind_spmf_cong; clarsimp?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>x \\<in> carrier L;\n        (a, aa, b) \\<in> set_spmf (\\<Sigma>1.S x1 x)\\<rbrakk>\n       \\<Longrightarrow> check1 x1 a x b", "subgoal for x a aa b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L;\n     (a, aa, b) \\<in> set_spmf (\\<Sigma>1.S x1 x)\\<rbrakk>\n    \\<Longrightarrow> check1 x1 a x b", "using  \\<Sigma>_prot1"], ["proof (prove)\nusing this:\n  \\<Sigma>1.\\<Sigma>_protocol\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L;\n     (a, aa, b) \\<in> set_spmf (\\<Sigma>1.S x1 x)\\<rbrakk>\n    \\<Longrightarrow> check1 x1 a x b", "apply(auto simp add: \\<Sigma>1.S_def split_def image_def \\<Sigma>1.HVZK_unfold2_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L; \\<Sigma>1.\\<Sigma>_protocol;\n     (a, b) \\<in> set_spmf (S1_raw x1 x); aa = x\\<rbrakk>\n    \\<Longrightarrow> check1 x1 a x b", "using \\<Sigma>1.S_def split_def image_def \\<Sigma>1.HVZK_unfold2_alt \\<Sigma>_prot1 valid_pub"], ["proof (prove)\nusing this:\n  \\<Sigma>1.S ?h ?e = map_spmf (\\<lambda>(a, z). (a, ?e, z)) (S1_raw ?h ?e)\n  case_prod = (\\<lambda>c p. c (fst p) (snd p))\n  ?f ` ?A = {y. \\<exists>x\\<in>?A. y = ?f x}\n  \\<Sigma>1.\\<Sigma>_protocol \\<Longrightarrow>\n  \\<forall>h a e z.\n     e \\<in> carrier L \\<longrightarrow>\n     h \\<in> valid_pub1 \\<longrightarrow>\n     (a, z) \\<in> set_spmf (S1_raw h e) \\<longrightarrow> check1 h a e z\n  \\<Sigma>1.\\<Sigma>_protocol\n  x1 \\<in> valid_pub1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L; \\<Sigma>1.\\<Sigma>_protocol;\n     (a, b) \\<in> set_spmf (S1_raw x1 x); aa = x\\<rbrakk>\n    \\<Longrightarrow> check1 x1 a x b", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          return_spmf (check1 x1 ab1' eb' zb1'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf True))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "ultimately"], ["proof (chain)\npicking this:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf (check1 x1 ab1' eb' zb1')))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          return_spmf (check1 x1 ab1' eb' zb1'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf True))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf (check1 x1 ab1' eb' zb1')))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          return_spmf (check1 x1 ab1' eb' zb1'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf True))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "using \\<Sigma>1.HVZK_unfold2_alt"], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf (check1 x1 ab1' eb' zb1')))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1').\n          return_spmf (check1 x1 ab1' eb' zb1'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>1.S x1 eb' \\<bind>\n      (\\<lambda>(ab1', eb1'', zb1'). return_spmf True))\n  \\<Sigma>1.\\<Sigma>_protocol \\<Longrightarrow>\n  \\<forall>h a e z.\n     e \\<in> carrier L \\<longrightarrow>\n     h \\<in> valid_pub1 \\<longrightarrow>\n     (a, z) \\<in> set_spmf (S1_raw h e) \\<longrightarrow> check1 h a e z\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True", "by(simp add: bind_spmf_const Let_def \\<Sigma>1.HVZK_unfold2_alt split_def lossless_\\<Sigma>_S lossless_weight_spmfD carrier_L_not_empty finite_L)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inl w0) e = return_spmf True\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma correct1: \n  assumes rel1: \"(x1,w1) \\<in> Rel1\"\n    and valid_pub: \"x0 \\<in> valid_pub0\"\n    and e_in_carrier: \"e \\<in> carrier L\"\n  shows \"\\<Sigma>_OR.completeness_game (x0,x1) (Inr w1) e = return_spmf True\"\n    (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "have x1_inL: \"x1 \\<in> \\<Sigma>1.L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> \\<Sigma>1.L", "using \\<Sigma>1.L_def rel1"], ["proof (prove)\nusing this:\n  \\<Sigma>1.L \\<equiv> {x. \\<exists>w. (x, w) \\<in> Rel1}\n  (x1, w1) \\<in> Rel1\n\ngoal (1 subgoal):\n 1. x1 \\<in> \\<Sigma>1.L", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> \\<Sigma>1.L\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "have \"x \\<in> carrier L \\<longrightarrow> e = x \\<oplus> e \\<oplus> x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<longrightarrow> e = x \\<oplus> e \\<oplus> x", "by (simp add: e_in_carrier xor_assoc xor_commute  local.xor_ac(3))"], ["proof (state)\nthis:\n  ?x \\<in> carrier L \\<longrightarrow> e = ?x \\<oplus> e \\<oplus> ?x\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "hence \"?lhs = do {\n    (r1, ab1) \\<leftarrow> init1 x1 w1;\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    let eb = e \\<oplus> eb';\n    zb1 \\<leftarrow> response1 r1 w1 eb;\n    return_spmf (check0 x0 ab0' eb' zb0' \\<and> check1 x1 ab1 eb zb1)}\""], ["proof (prove)\nusing this:\n  ?x \\<in> carrier L \\<longrightarrow> e = ?x \\<oplus> e \\<oplus> ?x\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n    init1 x1 w1 \\<bind>\n    (\\<lambda>(r1, ab1).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let eb = e \\<oplus> eb'\n                in response1 r1 w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       return_spmf\n                        (check0 x0 ab0' eb' zb0' \\<and>\n                         check1 x1 ab1 eb zb1)))))", "by(simp add: \\<Sigma>_OR.completeness_game_def split_def Let_def assms challenge_space_def check_OR_def cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let eb = e \\<oplus> eb'\n              in response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "also"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let eb = e \\<oplus> eb'\n              in response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    let eb = e \\<oplus> eb';\n    (r1, ab1) \\<leftarrow> init1 x1 w1;\n    zb1 \\<leftarrow> response1 r1 w1 eb;\n    return_spmf (check0 x0 ab0' eb' zb0' \\<and> check1 x1 ab1 eb zb1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init1 x1 w1 \\<bind>\n    (\\<lambda>(r1, ab1).\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>(ab0', eb0'', zb0').\n                let eb = e \\<oplus> eb'\n                in response1 r1 w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       return_spmf\n                        (check0 x0 ab0' eb' zb0' \\<and>\n                         check1 x1 ab1 eb zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = e \\<oplus> eb'\n            in init1 x1 w1 \\<bind>\n               (\\<lambda>(r1, ab1).\n                   response1 r1 w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       return_spmf\n                        (check0 x0 ab0' eb' zb0' \\<and>\n                         check1 x1 ab1 eb zb1)))))", "apply(simp add: Let_def split_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init1 x1 w1 \\<bind>\n    (\\<lambda>p.\n        spmf_of_set (carrier L) \\<bind>\n        (\\<lambda>eb'.\n            \\<Sigma>0.S x0 eb' \\<bind>\n            (\\<lambda>pa.\n                response1 (fst p) w1 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst pa) eb' (snd (snd pa)) \\<and>\n                      check1 x1 (snd p) (e \\<oplus> eb') zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>p.\n            init1 x1 w1 \\<bind>\n            (\\<lambda>pa.\n                response1 (fst pa) w1 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst p) eb' (snd (snd p)) \\<and>\n                      check1 x1 (snd pa) (e \\<oplus> eb') zb1)))))", "apply(rewrite bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        init1 x1 w1 \\<bind>\n        (\\<lambda>p.\n            \\<Sigma>0.S x0 y \\<bind>\n            (\\<lambda>pa.\n                response1 (fst p) w1 (e \\<oplus> y) \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst pa) y (snd (snd pa)) \\<and>\n                      check1 x1 (snd p) (e \\<oplus> y) zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>p.\n            init1 x1 w1 \\<bind>\n            (\\<lambda>pa.\n                response1 (fst pa) w1 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst p) eb' (snd (snd p)) \\<and>\n                      check1 x1 (snd pa) (e \\<oplus> eb') zb1)))))", "apply(rewrite bind_commute_spmf[of _ \"\\<Sigma>0.S _ _\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>y.\n        \\<Sigma>0.S x0 y \\<bind>\n        (\\<lambda>ya.\n            init1 x1 w1 \\<bind>\n            (\\<lambda>p.\n                response1 (fst p) w1 (e \\<oplus> y) \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst ya) y (snd (snd ya)) \\<and>\n                      check1 x1 (snd p) (e \\<oplus> y) zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>p.\n            init1 x1 w1 \\<bind>\n            (\\<lambda>pa.\n                response1 (fst pa) w1 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 (fst p) eb' (snd (snd p)) \\<and>\n                      check1 x1 (snd pa) (e \\<oplus> eb') zb1)))))", "by simp"], ["proof (state)\nthis:\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let eb = e \\<oplus> eb'\n              in response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = e \\<oplus> eb'\n          in init1 x1 w1 \\<bind>\n             (\\<lambda>(r1, ab1).\n                 response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "also"], ["proof (state)\nthis:\n  init1 x1 w1 \\<bind>\n  (\\<lambda>(r1, ab1).\n      spmf_of_set (carrier L) \\<bind>\n      (\\<lambda>eb'.\n          \\<Sigma>0.S x0 eb' \\<bind>\n          (\\<lambda>(ab0', eb0'', zb0').\n              let eb = e \\<oplus> eb'\n              in response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = e \\<oplus> eb'\n          in init1 x1 w1 \\<bind>\n             (\\<lambda>(r1, ab1).\n                 response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1)))))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    return_spmf (check0 x0 ab0' eb' zb0')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            let eb = e \\<oplus> eb'\n            in init1 x1 w1 \\<bind>\n               (\\<lambda>(r1, ab1).\n                   response1 r1 w1 eb \\<bind>\n                   (\\<lambda>zb1.\n                       return_spmf\n                        (check0 x0 ab0' eb' zb0' \\<and>\n                         check1 x1 ab1 eb zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            return_spmf (check0 x0 ab0' eb' zb0')))", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            init1 x1 w1 \\<bind>\n            (\\<lambda>(r1, ab1).\n                response1 r1 w1 (e \\<oplus> eb') \\<bind>\n                (\\<lambda>zb1.\n                    return_spmf\n                     (check0 x0 ab0' eb' zb0' \\<and>\n                      check1 x1 ab1 (e \\<oplus> eb') zb1))))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            return_spmf (check0 x0 ab0' eb' zb0')))", "apply(intro bind_spmf_cong; clarsimp?)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>x \\<in> carrier L;\n        (a, aa, b) \\<in> set_spmf (\\<Sigma>0.S x0 x)\\<rbrakk>\n       \\<Longrightarrow> init1 x1 w1 \\<bind>\n                         (\\<lambda>(r1, ab1).\n                             response1 r1 w1 (e \\<oplus> x) \\<bind>\n                             (\\<lambda>zb1.\n                                 return_spmf\n                                  (check0 x0 a x b \\<and>\n                                   check1 x1 ab1 (e \\<oplus> x) zb1))) =\n                         return_spmf (check0 x0 a x b)", "subgoal for e' a e z"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>0.S x0 e')\\<rbrakk>\n    \\<Longrightarrow> init1 x1 w1 \\<bind>\n                      (\\<lambda>(r1, ab1).\n                          response1 r1 w1 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb1.\n                              return_spmf\n                               (check0 x0 a e' z \\<and>\n                                check1 x1 ab1 (e \\<oplus> e') zb1))) =\n                      return_spmf (check0 x0 a e' z)", "apply(cases \"check0 x0 a e' z\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>0.S x0 e'); check0 x0 a e' z\\<rbrakk>\n    \\<Longrightarrow> init1 x1 w1 \\<bind>\n                      (\\<lambda>(r1, ab1).\n                          response1 r1 w1 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb1.\n                              return_spmf\n                               (check0 x0 a e' z \\<and>\n                                check1 x1 ab1 (e \\<oplus> e') zb1))) =\n                      return_spmf (check0 x0 a e' z)\n 2. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>0.S x0 e');\n     \\<not> check0 x0 a e' z\\<rbrakk>\n    \\<Longrightarrow> init1 x1 w1 \\<bind>\n                      (\\<lambda>(r1, ab1).\n                          response1 r1 w1 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb1.\n                              return_spmf\n                               (check0 x0 a e' z \\<and>\n                                check1 x1 ab1 (e \\<oplus> e') zb1))) =\n                      return_spmf (check0 x0 a e' z)", "using \\<Sigma>1.complete_game_return_true \\<Sigma>_prot1 \\<Sigma>1.completeness_game_def \\<Sigma>1.\\<Sigma>_protocol_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?h, ?w) \\<in> Rel1; \\<Sigma>1.completeness;\n   \\<forall>h w. lossless_spmf (init1 h w);\n   \\<forall>r w e. lossless_spmf (response1 r w e);\n   ?e \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<Sigma>1.completeness_game ?h ?w ?e = return_spmf True\n  \\<Sigma>1.\\<Sigma>_protocol\n  \\<Sigma>1.completeness_game ?h ?w ?e =\n  init1 ?h ?w \\<bind>\n  (\\<lambda>(r, a).\n      response1 r ?w ?e \\<bind>\n      (\\<lambda>z. return_spmf (check1 ?h a ?e z)))\n  \\<Sigma>1.\\<Sigma>_protocol \\<equiv>\n  \\<Sigma>1.completeness \\<and>\n  \\<Sigma>1.special_soundness \\<and> \\<Sigma>1.HVZK\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>0.S x0 e'); check0 x0 a e' z\\<rbrakk>\n    \\<Longrightarrow> init1 x1 w1 \\<bind>\n                      (\\<lambda>(r1, ab1).\n                          response1 r1 w1 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb1.\n                              return_spmf\n                               (check0 x0 a e' z \\<and>\n                                check1 x1 ab1 (e \\<oplus> e') zb1))) =\n                      return_spmf (check0 x0 a e' z)\n 2. \\<lbrakk>e' \\<in> carrier L;\n     (a, e, z) \\<in> set_spmf (\\<Sigma>0.S x0 e');\n     \\<not> check0 x0 a e' z\\<rbrakk>\n    \\<Longrightarrow> init1 x1 w1 \\<bind>\n                      (\\<lambda>(r1, ab1).\n                          response1 r1 w1 (e \\<oplus> e') \\<bind>\n                          (\\<lambda>zb1.\n                              return_spmf\n                               (check0 x0 a e' z \\<and>\n                                check1 x1 ab1 (e \\<oplus> e') zb1))) =\n                      return_spmf (check0 x0 a e' z)", "by(auto simp add: x1_inL assms bind_spmf_const lossless_init lossless_response lossless_weight_spmfD split_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = e \\<oplus> eb'\n          in init1 x1 w1 \\<bind>\n             (\\<lambda>(r1, ab1).\n                 response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf (check0 x0 ab0' eb' zb0')))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "also"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          let eb = e \\<oplus> eb'\n          in init1 x1 w1 \\<bind>\n             (\\<lambda>(r1, ab1).\n                 response1 r1 w1 eb \\<bind>\n                 (\\<lambda>zb1.\n                     return_spmf\n                      (check0 x0 ab0' eb' zb0' \\<and>\n                       check1 x1 ab1 eb zb1))))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf (check0 x0 ab0' eb' zb0')))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "have \"... = do {\n    eb' \\<leftarrow> spmf_of_set (carrier L);\n    (ab0', eb0'', zb0') \\<leftarrow> \\<Sigma>0.S x0 eb';\n    return_spmf (True)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0').\n            return_spmf (check0 x0 ab0' eb' zb0'))) =\n    spmf_of_set (carrier L) \\<bind>\n    (\\<lambda>eb'.\n        \\<Sigma>0.S x0 eb' \\<bind>\n        (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))", "apply(intro bind_spmf_cong; clarsimp?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa b.\n       \\<lbrakk>x \\<in> carrier L;\n        (a, aa, b) \\<in> set_spmf (\\<Sigma>0.S x0 x)\\<rbrakk>\n       \\<Longrightarrow> check0 x0 a x b", "subgoal for x a aa b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L;\n     (a, aa, b) \\<in> set_spmf (\\<Sigma>0.S x0 x)\\<rbrakk>\n    \\<Longrightarrow> check0 x0 a x b", "using  \\<Sigma>_prot0"], ["proof (prove)\nusing this:\n  \\<Sigma>0.\\<Sigma>_protocol\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L;\n     (a, aa, b) \\<in> set_spmf (\\<Sigma>0.S x0 x)\\<rbrakk>\n    \\<Longrightarrow> check0 x0 a x b", "by(auto simp add: valid_pub valid_pub_OR_def \\<Sigma>0.S_def split_def image_def \\<Sigma>0.HVZK_unfold2_alt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          return_spmf (check0 x0 ab0' eb' zb0'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "ultimately"], ["proof (chain)\npicking this:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf (check0 x0 ab0' eb' zb0')))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          return_spmf (check0 x0 ab0' eb' zb0'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf (check0 x0 ab0' eb' zb0')))\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0').\n          return_spmf (check0 x0 ab0' eb' zb0'))) =\n  spmf_of_set (carrier L) \\<bind>\n  (\\<lambda>eb'.\n      \\<Sigma>0.S x0 eb' \\<bind>\n      (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True", "apply(simp add: \\<Sigma>0.HVZK_unfold2 Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n             spmf_of_set (carrier L) \\<bind>\n             (\\<lambda>eb'.\n                 \\<Sigma>0.S x0 eb' \\<bind>\n                 (\\<lambda>(ab0', eb0'', zb0'). return_spmf True));\n     spmf_of_set (carrier L) \\<bind>\n     (\\<lambda>eb'.\n         \\<Sigma>0.S x0 eb' \\<bind>\n         (\\<lambda>(ab0', eb0'', zb0').\n             return_spmf (check0 x0 ab0' eb' zb0'))) =\n     spmf_of_set (carrier L) \\<bind>\n     (\\<lambda>eb'.\n         \\<Sigma>0.S x0 eb' \\<bind>\n         (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))\\<rbrakk>\n    \\<Longrightarrow> spmf_of_set (carrier L) \\<bind>\n                      (\\<lambda>eb'.\n                          \\<Sigma>0.S x0 eb' \\<bind>\n                          (\\<lambda>(ab0', eb0'', zb0').\n                              return_spmf True)) =\n                      return_spmf True", "using \\<Sigma>0.complete_game_return_true \\<Sigma>_OR.completeness_game_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?h, ?w) \\<in> Rel0; \\<Sigma>0.completeness;\n   \\<forall>h w. lossless_spmf (init0 h w);\n   \\<forall>r w e. lossless_spmf (response0 r w e);\n   ?e \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<Sigma>0.completeness_game ?h ?w ?e = return_spmf True\n  \\<Sigma>_OR.completeness_game ?h ?w ?e =\n  init_OR ?h ?w \\<bind>\n  (\\<lambda>(r, a).\n      response_OR r ?w ?e \\<bind>\n      (\\<lambda>z. return_spmf (check_OR ?h a ?e z)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e =\n             spmf_of_set (carrier L) \\<bind>\n             (\\<lambda>eb'.\n                 \\<Sigma>0.S x0 eb' \\<bind>\n                 (\\<lambda>(ab0', eb0'', zb0'). return_spmf True));\n     spmf_of_set (carrier L) \\<bind>\n     (\\<lambda>eb'.\n         \\<Sigma>0.S x0 eb' \\<bind>\n         (\\<lambda>(ab0', eb0'', zb0').\n             return_spmf (check0 x0 ab0' eb' zb0'))) =\n     spmf_of_set (carrier L) \\<bind>\n     (\\<lambda>eb'.\n         \\<Sigma>0.S x0 eb' \\<bind>\n         (\\<lambda>(ab0', eb0'', zb0'). return_spmf True))\\<rbrakk>\n    \\<Longrightarrow> spmf_of_set (carrier L) \\<bind>\n                      (\\<lambda>eb'.\n                          \\<Sigma>0.S x0 eb' \\<bind>\n                          (\\<lambda>(ab0', eb0'', zb0').\n                              return_spmf True)) =\n                      return_spmf True", "by(simp add: bind_spmf_const split_def lossless_\\<Sigma>_S(2) lossless_weight_spmfD Let_def carrier_L_not_empty finite_L)"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) (Inr w1) e = return_spmf True\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completeness':\n  assumes  Rel_OR_asm: \"((x0,x1), w) \\<in> Rel_OR\" \n  shows \"\\<forall> e \\<in> carrier L. spmf (\\<Sigma>_OR.completeness_game (x0,x1) w e) True = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>carrier L.\n       spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> carrier L \\<Longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> carrier L \\<Longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "assume asm: \"e \\<in> carrier L\""], ["proof (state)\nthis:\n  e \\<in> carrier L\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> carrier L \\<Longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "hence \"(\\<Sigma>_OR.completeness_game (x0,x1) w e) = return_spmf True\""], ["proof (prove)\nusing this:\n  e \\<in> carrier L\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True", "proof(cases w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>e \\<in> carrier L; w = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True\n 2. \\<And>b.\n       \\<lbrakk>e \\<in> carrier L; w = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True", "case inl: (Inl a)"], ["proof (state)\nthis:\n  w = Inl a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>e \\<in> carrier L; w = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True\n 2. \\<And>b.\n       \\<lbrakk>e \\<in> carrier L; w = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True", "then"], ["proof (chain)\npicking this:\n  w = Inl a", "show ?thesis"], ["proof (prove)\nusing this:\n  w = Inl a\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True", "using asm correct0 assms inl"], ["proof (prove)\nusing this:\n  w = Inl a\n  e \\<in> carrier L\n  \\<lbrakk>?e \\<in> carrier L; (?x0.0, ?w0.0) \\<in> Rel0;\n   ?x1.0 \\<in> valid_pub1\\<rbrakk>\n  \\<Longrightarrow> \\<Sigma>_OR.completeness_game (?x0.0, ?x1.0) (Inl ?w0.0)\n                     ?e =\n                    return_spmf True\n  ((x0, x1), w) \\<in> Rel_OR\n  w = Inl a\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True", "by auto"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>e \\<in> carrier L; w = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>e \\<in> carrier L; w = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True", "case inr: (Inr b)"], ["proof (state)\nthis:\n  w = Inr b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>e \\<in> carrier L; w = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<Sigma>_OR.completeness_game (x0, x1) w e =\n                         return_spmf True", "then"], ["proof (chain)\npicking this:\n  w = Inr b", "show ?thesis"], ["proof (prove)\nusing this:\n  w = Inr b\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True", "using asm correct1 assms inr"], ["proof (prove)\nusing this:\n  w = Inr b\n  e \\<in> carrier L\n  \\<lbrakk>(?x1.0, ?w1.0) \\<in> Rel1; ?x0.0 \\<in> valid_pub0;\n   ?e \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<Sigma>_OR.completeness_game (?x0.0, ?x1.0) (Inr ?w1.0)\n                     ?e =\n                    return_spmf True\n  ((x0, x1), w) \\<in> Rel_OR\n  w = Inr b\n\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True", "by auto"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> carrier L \\<Longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "thus \"spmf (\\<Sigma>_OR.completeness_game (x0,x1) w e) True = 1\""], ["proof (prove)\nusing this:\n  \\<Sigma>_OR.completeness_game (x0, x1) w e = return_spmf True\n\ngoal (1 subgoal):\n 1. spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1", "by simp"], ["proof (state)\nthis:\n  spmf (\\<Sigma>_OR.completeness_game (x0, x1) w e) True = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completeness: shows \"\\<Sigma>_OR.completeness\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.completeness", "unfolding \\<Sigma>_OR.completeness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>h w e.\n       (h, w) \\<in> Rel_OR \\<longrightarrow>\n       e \\<in> challenge_space \\<longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game h w e) True = 1", "using completeness' challenge_space_def"], ["proof (prove)\nusing this:\n  ((?x0.0, ?x1.0), ?w) \\<in> Rel_OR \\<Longrightarrow>\n  \\<forall>e\\<in>carrier L.\n     spmf (\\<Sigma>_OR.completeness_game (?x0.0, ?x1.0) ?w e) True = 1\n  challenge_space = carrier L\n\ngoal (1 subgoal):\n 1. \\<forall>h w e.\n       (h, w) \\<in> Rel_OR \\<longrightarrow>\n       e \\<in> challenge_space \\<longrightarrow>\n       spmf (\\<Sigma>_OR.completeness_game h w e) True = 1", "by auto"], ["", "lemma \\<Sigma>_protocol: shows \"\\<Sigma>_OR.\\<Sigma>_protocol\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_OR.\\<Sigma>_protocol", "by(simp add: completeness HVZK special_soundness \\<Sigma>_OR.\\<Sigma>_protocol_def)"], ["", "sublocale OR_\\<Sigma>_commit: \\<Sigma>_protocols_to_commitments init_OR response_OR check_OR Rel_OR S_OR \\<A>ss_OR challenge_space valid_pub_OR G"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sigma>_protocols_to_commitments init_OR response_OR check_OR Rel_OR\n     S_OR \\<A>ss_OR challenge_space valid_pub_OR G", "by unfold_locales (auto simp add: \\<Sigma>_protocol lossless_G lossless_init_OR G_Rel_OR lossless_response_OR)"], ["", "lemma \"OR_\\<Sigma>_commit.abstract_com.correct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.correct", "using OR_\\<Sigma>_commit.commit_correct"], ["proof (prove)\nusing this:\n  OR_\\<Sigma>_commit.abstract_com.correct\n\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.correct", "by simp"], ["", "lemma \"OR_\\<Sigma>_commit.abstract_com.perfect_hiding_ind_cpa \\<A>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.perfect_hiding_ind_cpa \\<A>", "using OR_\\<Sigma>_commit.perfect_hiding"], ["proof (prove)\nusing this:\n  OR_\\<Sigma>_commit.abstract_com.perfect_hiding_ind_cpa ?\\<A>\n\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.perfect_hiding_ind_cpa \\<A>", "by blast"], ["", "lemma bind_advantage_bound_dis_log: \n  shows \"OR_\\<Sigma>_commit.abstract_com.bind_advantage \\<A> \\<le> OR_\\<Sigma>_commit.rel_advantage (OR_\\<Sigma>_commit.adversary \\<A>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.bind_advantage \\<A>\n    \\<le> OR_\\<Sigma>_commit.rel_advantage\n           (OR_\\<Sigma>_commit.adversary \\<A>)", "using OR_\\<Sigma>_commit.bind_advantage"], ["proof (prove)\nusing this:\n  OR_\\<Sigma>_commit.abstract_com.bind_advantage ?\\<A>\n  \\<le> OR_\\<Sigma>_commit.rel_advantage\n         (OR_\\<Sigma>_commit.adversary ?\\<A>)\n\ngoal (1 subgoal):\n 1. OR_\\<Sigma>_commit.abstract_com.bind_advantage \\<A>\n    \\<le> OR_\\<Sigma>_commit.rel_advantage\n           (OR_\\<Sigma>_commit.adversary \\<A>)", "by simp"], ["", "end"], ["", "end"]]}