{"file_name": "/home/qj213/afp-2021-10-22/thys/Sigma_Commit_Crypto/Xor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Sigma_Commit_Crypto", "problem_names": ["lemma top_join [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<top> \\<squnion> x = \\<top>\"", "lemma join_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<top> = \\<top>\"", "lemma bot_join [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<squnion> x = x\"", "lemma join_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<bottom> = x\"", "lemma bot_meet [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<sqinter> x = \\<bottom>\"", "lemma meet_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<bottom> = \\<bottom>\"", "lemma top_meet [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<top> \\<sqinter> x = x\"", "lemma meet_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<top> = x\"", "lemma join_idem [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> x = x\"", "lemma meet_idem [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> x = x\"", "lemma meet_leftcomm: \"x \\<sqinter> (y \\<sqinter> z) = y \\<sqinter> (x \\<sqinter> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemma join_leftcomm: \"x \\<squnion> (y \\<squnion> z) = y \\<squnion> (x \\<squnion> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemmas meet_ac = meet_assoc meet_comm meet_leftcomm", "lemmas join_ac = join_assoc join_comm join_leftcomm", "lemma join_meet_distrib2: \"(y \\<sqinter> z) \\<squnion> x = (y \\<squnion> x) \\<sqinter> (z \\<squnion> x)\"\n  if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemma meet_join_distrib1: \"x \\<sqinter> (y \\<squnion> z) = (x \\<sqinter> y) \\<squnion> (x \\<sqinter> z)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemma meet_join_distrib2: \"(y \\<squnion> z) \\<sqinter> x = (y \\<sqinter> x) \\<squnion> (z \\<sqinter> x)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemmas join_meet_distrib = join_meet_distrib1 join_meet_distrib2", "lemmas meet_join_distrib = meet_join_distrib1 meet_join_distrib2", "lemmas distrib = join_meet_distrib meet_join_distrib", "lemma meet_compl2_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<^bold>- x = \\<bottom>\"", "lemma join_compl2_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<^bold>- x = \\<top>\"", "lemma compl_unique:\n  assumes \"x \\<sqinter> y = \\<bottom>\"\n    and \"x \\<squnion> y = \\<top>\"\n    and [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- x = y\"", "lemma double_compl [simp]: \"\\<^bold>- (\\<^bold>- x) = x\" if [simp]: \"x \\<in> carrier L\"", "lemma compl_eq_compl_iff [simp]: \"\\<^bold>- x = \\<^bold>- y \\<longleftrightarrow> x = y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma compl_bot_eq [simp]: \"\\<^bold>- \\<bottom> = \\<top>\"", "lemma compl_top_eq [simp]: \"\\<^bold>- \\<top> = \\<bottom>\"", "lemma compl_inf [simp]: \"\\<^bold>- (x \\<sqinter> y) = \\<^bold>- x \\<squnion> \\<^bold>- y\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma compl_sup [simp]: \"\\<^bold>- (x \\<squnion> y) = \\<^bold>- x \\<sqinter> \\<^bold>- y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma compl_mono:\n  assumes \"x \\<sqsubseteq> y\"\n    and \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- y \\<sqsubseteq> \\<^bold>- x\"", "lemma compl_le_compl_iff [simp]: \"\\<^bold>- x \\<sqsubseteq> \\<^bold>- y \\<longleftrightarrow> y \\<sqsubseteq> x\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma compl_le_swap1:\n  assumes \"y \\<sqsubseteq> \\<^bold>- x\" \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"x \\<sqsubseteq> \\<^bold>- y\"", "lemma compl_le_swap2:\n  assumes \"\\<^bold>- y \\<sqsubseteq> x\" \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- x \\<sqsubseteq> y\"", "lemma join_compl_top_left1 [simp]: \"\\<^bold>- x \\<squnion> (x \\<squnion> y) = \\<top>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma join_compl_top_left2 [simp]: \"x \\<squnion> (\\<^bold>- x \\<squnion> y) = \\<top>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma meet_compl_bot_left1 [simp]: \"\\<^bold>- x \\<sqinter> (x \\<sqinter> y) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma meet_compl_bot_left2 [simp]: \"x \\<sqinter> (\\<^bold>- x \\<sqinter> y) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma meet_compl_bot_right [simp]: \"x \\<sqinter> (y \\<sqinter> \\<^bold>- x) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemma xor_closed [intro, simp]: \"\\<lbrakk> x \\<in> carrier L; y \\<in> carrier L \\<rbrakk> \\<Longrightarrow> x \\<oplus> y \\<in> carrier L\"", "lemma xor_comm: \"\\<lbrakk> x \\<in> carrier L; y \\<in> carrier L \\<rbrakk> \\<Longrightarrow> x \\<oplus> y = y \\<oplus> x\"", "lemma xor_assoc: \"(x \\<oplus> y) \\<oplus> z = x \\<oplus> (y \\<oplus> z)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemma xor_left_comm: \"x \\<oplus> (y \\<oplus> z) = y \\<oplus> (x \\<oplus> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\"", "lemma [simp]:\n  assumes \"x \\<in> carrier L\"\n  shows xor_bot: \"x \\<oplus> \\<bottom> = x\"\n  and bot_xor: \"\\<bottom> \\<oplus> x = x\"\n  and xor_top: \"x \\<oplus> \\<top> = \\<^bold>- x\"\n  and top_xor: \"\\<top> \\<oplus> x = \\<^bold>- x\"", "lemma xor_inverse [simp]: \"x \\<oplus> x = \\<bottom>\" if \"x \\<in> carrier L\"", "lemma xor_left_inverse [simp]: \"x \\<oplus> x \\<oplus> y = y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\"", "lemmas xor_ac = xor_assoc xor_comm xor_left_comm", "lemma inj_on_xor: \"inj_on ((\\<oplus>) x) (carrier L)\" if \"x \\<in> carrier L\"", "lemma surj_xor: \"(\\<oplus>) x ` carrier L = carrier L\" if [simp]: \"x \\<in> carrier L\"", "lemma one_time_pad: \"map_spmf ((\\<oplus>) x) (spmf_of_set (carrier L)) = spmf_of_set (carrier L)\"\n  if \"x \\<in> carrier L\""], "translations": [["", "lemma top_join [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<top> \\<squnion> x = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<top> \\<squnion> x = \\<top>", "using eq_is_equal top_join"], ["proof (prove)\nusing this:\n  (.=) = (=)\n  ?x \\<in> carrier L \\<Longrightarrow> \\<top> \\<squnion> ?x .= \\<top>\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<top> \\<squnion> x = \\<top>", "by auto"], ["", "lemma join_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<top> = \\<top>", "using le_iff_meet"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x \\<squnion> ?y = ?y)\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<top> = \\<top>", "by blast"], ["", "lemma bot_join [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<squnion> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<squnion> x = x", "using le_iff_meet"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x \\<squnion> ?y = ?y)\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<squnion> x = x", "by blast"], ["", "lemma join_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<bottom> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<bottom> = x", "by (metis bot_join join_comm)"], ["", "lemma bot_meet [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<sqinter> x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<sqinter> x = \\<bottom>", "using bottom_meet"], ["proof (prove)\nusing this:\n  ?x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<sqinter> ?x .= \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<bottom> \\<sqinter> x = \\<bottom>", "by auto"], ["", "lemma meet_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<bottom> = \\<bottom>", "by (metis bot_meet meet_comm)"], ["", "lemma top_meet [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<top> \\<sqinter> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> \\<top> \\<sqinter> x = x", "by (metis le_iff_join meet_comm top_closed top_higher)"], ["", "lemma meet_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<top> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<top> = x", "by (metis meet_comm top_meet)"], ["", "lemma join_idem [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> x = x", "using le_iff_meet"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x \\<squnion> ?y = ?y)\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> x = x", "by blast"], ["", "lemma meet_idem [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> x = x", "using le_iff_join le_refl"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x = ?x \\<sqinter> ?y)\n  ?x \\<in> carrier L \\<Longrightarrow> ?x \\<sqsubseteq> ?x\n\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> x = x", "by presburger"], ["", "lemma meet_leftcomm: \"x \\<sqinter> (y \\<sqinter> z) = y \\<sqinter> (x \\<sqinter> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<sqinter> z) = y \\<sqinter> (x \\<sqinter> z)", "by (metis meet_assoc meet_comm that)"], ["", "lemma join_leftcomm: \"x \\<squnion> (y \\<squnion> z) = y \\<squnion> (x \\<squnion> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion> (y \\<squnion> z) = y \\<squnion> (x \\<squnion> z)", "by (metis join_assoc join_comm that)"], ["", "lemmas meet_ac = meet_assoc meet_comm meet_leftcomm"], ["", "lemmas join_ac = join_assoc join_comm join_leftcomm"], ["", "end"], ["", "record 'a boolean_algebra = \"'a gorder\" +\n  compl :: \"'a \\<Rightarrow> 'a\" (\"\\<^bold>-\\<index>\" 1000)"], ["", "definition xor :: \"('a, 'b) boolean_algebra_scheme \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixr \"\\<oplus>\\<index>\" 100) where\n  \"x \\<oplus> y = (x \\<squnion> y) \\<sqinter> (\\<^bold>- (x \\<sqinter> y))\" for L (structure)"], ["", "locale boolean_algebra = bounded_lattice L\n  for L (structure) +\n  assumes compl_closed [intro, simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<^bold>- x \\<in> carrier L\"\n    and meet_compl_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<^bold>- x \\<sqinter> x = \\<bottom>\"\n    and join_compl_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> \\<^bold>- x \\<squnion> x = \\<top>\"\n    and join_meet_distrib1: \"\\<lbrakk> x \\<in> carrier L; y \\<in> carrier L; z \\<in> carrier L \\<rbrakk> \\<Longrightarrow> x \\<squnion> (y \\<sqinter> z) = (x \\<squnion> y) \\<sqinter> (x \\<squnion> z)\"\nbegin"], ["", "lemma join_meet_distrib2: \"(y \\<sqinter> z) \\<squnion> x = (y \\<squnion> x) \\<sqinter> (z \\<squnion> x)\"\n  if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sqinter> z \\<squnion> x =\n    (y \\<squnion> x) \\<sqinter> (z \\<squnion> x)", "by (simp add: join_comm join_meet_distrib1 that)"], ["", "lemma meet_join_distrib1: \"x \\<sqinter> (y \\<squnion> z) = (x \\<sqinter> y) \\<squnion> (x \\<sqinter> z)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "have \"x \\<sqinter> (y \\<squnion> z) = (x \\<sqinter> (x \\<squnion> z)) \\<sqinter> (y \\<squnion> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) =\n    x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z)", "using join_left le_iff_join"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqsubseteq> ?x \\<squnion> ?y\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x = ?x \\<sqinter> ?y)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) =\n    x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z)", "by auto"], ["proof (state)\nthis:\n  x \\<sqinter> (y \\<squnion> z) =\n  x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "also"], ["proof (state)\nthis:\n  x \\<sqinter> (y \\<squnion> z) =\n  x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "have \"\\<dots> = x \\<sqinter> (z \\<squnion> (x \\<sqinter> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z) =\n    x \\<sqinter> (z \\<squnion> x \\<sqinter> y)", "by (simp add: join_comm join_meet_distrib1 meet_assoc)"], ["proof (state)\nthis:\n  x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z) =\n  x \\<sqinter> (z \\<squnion> x \\<sqinter> y)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "also"], ["proof (state)\nthis:\n  x \\<sqinter> (x \\<squnion> z) \\<sqinter> (y \\<squnion> z) =\n  x \\<sqinter> (z \\<squnion> x \\<sqinter> y)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "have \"\\<dots> = ((x \\<sqinter> y) \\<squnion> x) \\<sqinter> ((x \\<sqinter> y) \\<squnion> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (z \\<squnion> x \\<sqinter> y) =\n    (x \\<sqinter> y \\<squnion> x) \\<sqinter> (x \\<sqinter> y \\<squnion> z)", "by (metis join_comm le_iff_meet meet_closed meet_left that(1) that(2))"], ["proof (state)\nthis:\n  x \\<sqinter> (z \\<squnion> x \\<sqinter> y) =\n  (x \\<sqinter> y \\<squnion> x) \\<sqinter> (x \\<sqinter> y \\<squnion> z)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "also"], ["proof (state)\nthis:\n  x \\<sqinter> (z \\<squnion> x \\<sqinter> y) =\n  (x \\<sqinter> y \\<squnion> x) \\<sqinter> (x \\<sqinter> y \\<squnion> z)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "have \"\\<dots> = (x \\<sqinter> y) \\<squnion> (x \\<sqinter> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<sqinter> y \\<squnion> x) \\<sqinter> (x \\<sqinter> y \\<squnion> z) =\n    x \\<sqinter> y \\<squnion> x \\<sqinter> z", "by (simp add: join_meet_distrib1)"], ["proof (state)\nthis:\n  (x \\<sqinter> y \\<squnion> x) \\<sqinter> (x \\<sqinter> y \\<squnion> z) =\n  x \\<sqinter> y \\<squnion> x \\<sqinter> z\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "finally"], ["proof (chain)\npicking this:\n  x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z", "."], ["proof (state)\nthis:\n  x \\<sqinter> (y \\<squnion> z) = x \\<sqinter> y \\<squnion> x \\<sqinter> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma meet_join_distrib2: \"(y \\<squnion> z) \\<sqinter> x = (y \\<sqinter> x) \\<squnion> (z \\<sqinter> x)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<squnion> z) \\<sqinter> x = y \\<sqinter> x \\<squnion> z \\<sqinter> x", "by (simp add: meet_comm meet_join_distrib1)"], ["", "lemmas join_meet_distrib = join_meet_distrib1 join_meet_distrib2"], ["", "lemmas meet_join_distrib = meet_join_distrib1 meet_join_distrib2"], ["", "lemmas distrib = join_meet_distrib meet_join_distrib"], ["", "lemma meet_compl2_bot [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<^bold>- x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<sqinter> \\<^bold>- x = \\<bottom>", "by (metis meet_comm meet_compl_bot)"], ["", "lemma join_compl2_top [simp]: \"x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<^bold>- x = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier L \\<Longrightarrow> x \\<squnion> \\<^bold>- x = \\<top>", "by (metis join_comm join_compl_top)"], ["", "lemma compl_unique:\n  assumes \"x \\<sqinter> y = \\<bottom>\"\n    and \"x \\<squnion> y = \\<top>\"\n    and [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "have \"(x \\<sqinter> \\<^bold>- x) \\<squnion> (\\<^bold>- x \\<sqinter> y) = (x \\<sqinter> y) \\<squnion> (\\<^bold>- x \\<sqinter> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> \\<^bold>- x \\<squnion> \\<^bold>- x \\<sqinter> y =\n    x \\<sqinter> y \\<squnion> \\<^bold>- x \\<sqinter> y", "using inf_compl_bot assms(1)"], ["proof (prove)\nusing this:\n  inf ?x (- ?x) = bot\n  x \\<sqinter> y = \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<sqinter> \\<^bold>- x \\<squnion> \\<^bold>- x \\<sqinter> y =\n    x \\<sqinter> y \\<squnion> \\<^bold>- x \\<sqinter> y", "by simp"], ["proof (state)\nthis:\n  x \\<sqinter> \\<^bold>- x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  x \\<sqinter> y \\<squnion> \\<^bold>- x \\<sqinter> y\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "then"], ["proof (chain)\npicking this:\n  x \\<sqinter> \\<^bold>- x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  x \\<sqinter> y \\<squnion> \\<^bold>- x \\<sqinter> y", "have \"(\\<^bold>- x \\<sqinter> x) \\<squnion> (\\<^bold>- x \\<sqinter> y) = (y \\<sqinter> x) \\<squnion> (y \\<sqinter> \\<^bold>- x)\""], ["proof (prove)\nusing this:\n  x \\<sqinter> \\<^bold>- x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  x \\<sqinter> y \\<squnion> \\<^bold>- x \\<sqinter> y\n\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqinter> x \\<squnion> \\<^bold>- x \\<sqinter> y =\n    y \\<sqinter> x \\<squnion> y \\<sqinter> \\<^bold>- x", "by (simp add: meet_comm)"], ["proof (state)\nthis:\n  \\<^bold>- x \\<sqinter> x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  y \\<sqinter> x \\<squnion> y \\<sqinter> \\<^bold>- x\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "then"], ["proof (chain)\npicking this:\n  \\<^bold>- x \\<sqinter> x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  y \\<sqinter> x \\<squnion> y \\<sqinter> \\<^bold>- x", "have \"\\<^bold>- x \\<sqinter> (x \\<squnion> y) = y \\<sqinter> (x \\<squnion> \\<^bold>- x)\""], ["proof (prove)\nusing this:\n  \\<^bold>- x \\<sqinter> x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  y \\<sqinter> x \\<squnion> y \\<sqinter> \\<^bold>- x\n\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqinter> (x \\<squnion> y) =\n    y \\<sqinter> (x \\<squnion> \\<^bold>- x)", "using assms(3) assms(4) compl_closed meet_join_distrib1"], ["proof (prove)\nusing this:\n  \\<^bold>- x \\<sqinter> x \\<squnion> \\<^bold>- x \\<sqinter> y =\n  y \\<sqinter> x \\<squnion> y \\<sqinter> \\<^bold>- x\n  x \\<in> carrier L\n  y \\<in> carrier L\n  ?x \\<in> carrier L \\<Longrightarrow> \\<^bold>- ?x \\<in> carrier L\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L;\n   ?z \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> ?x \\<sqinter> (?y \\<squnion> ?z) =\n                    ?x \\<sqinter> ?y \\<squnion> ?x \\<sqinter> ?z\n\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqinter> (x \\<squnion> y) =\n    y \\<sqinter> (x \\<squnion> \\<^bold>- x)", "by presburger"], ["proof (state)\nthis:\n  \\<^bold>- x \\<sqinter> (x \\<squnion> y) =\n  y \\<sqinter> (x \\<squnion> \\<^bold>- x)\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "then"], ["proof (chain)\npicking this:\n  \\<^bold>- x \\<sqinter> (x \\<squnion> y) =\n  y \\<sqinter> (x \\<squnion> \\<^bold>- x)", "have \"\\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>\""], ["proof (prove)\nusing this:\n  \\<^bold>- x \\<sqinter> (x \\<squnion> y) =\n  y \\<sqinter> (x \\<squnion> \\<^bold>- x)\n\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  \\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "then"], ["proof (chain)\npicking this:\n  \\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>", "show \"\\<^bold>- x = y\""], ["proof (prove)\nusing this:\n  \\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "using le_iff_join top_higher"], ["proof (prove)\nusing this:\n  \\<^bold>- x \\<sqinter> \\<top> = y \\<sqinter> \\<top>\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x = ?x \\<sqinter> ?y)\n  ?x \\<in> carrier L \\<Longrightarrow> ?x \\<sqsubseteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<^bold>- x = y", "by auto"], ["proof (state)\nthis:\n  \\<^bold>- x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma double_compl [simp]: \"\\<^bold>- (\\<^bold>- x) = x\" if [simp]: \"x \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- (\\<^bold>- x) = x", "by(rule compl_unique)(simp_all)"], ["", "lemma compl_eq_compl_iff [simp]: \"\\<^bold>- x = \\<^bold>- y \\<longleftrightarrow> x = y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<^bold>- x = \\<^bold>- y) = (x = y)", "by (metis double_compl that that)"], ["", "lemma compl_bot_eq [simp]: \"\\<^bold>- \\<bottom> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- \\<bottom> = \\<top>", "using le_iff_join le_iff_meet local.compl_unique top_higher"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x = ?x \\<sqinter> ?y)\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<sqsubseteq> ?y) = (?x \\<squnion> ?y = ?y)\n  \\<lbrakk>?x \\<sqinter> ?y = \\<bottom>; ?x \\<squnion> ?y = \\<top>;\n   ?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<^bold>- ?x = ?y\n  ?x \\<in> carrier L \\<Longrightarrow> ?x \\<sqsubseteq> \\<top>\n\ngoal (1 subgoal):\n 1. \\<^bold>- \\<bottom> = \\<top>", "by auto"], ["", "lemma compl_top_eq [simp]: \"\\<^bold>- \\<top> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- \\<top> = \\<bottom>", "by (metis bottom_closed compl_bot_eq double_compl)"], ["", "lemma compl_inf [simp]: \"\\<^bold>- (x \\<sqinter> y) = \\<^bold>- x \\<squnion> \\<^bold>- y\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- (x \\<sqinter> y) = \\<^bold>- x \\<squnion> \\<^bold>- y", "proof (rule compl_unique)"], ["proof (state)\ngoal (4 subgoals):\n 1. x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n    \\<bottom>\n 2. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n 3. x \\<sqinter> y \\<in> carrier L\n 4. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "have \"(x \\<sqinter> y) \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) = (y \\<sqinter> (x \\<sqinter> \\<^bold>- x)) \\<squnion> (x \\<sqinter> (y \\<sqinter> \\<^bold>- y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n    y \\<sqinter> (x \\<sqinter> \\<^bold>- x) \\<squnion>\n    x \\<sqinter> (y \\<sqinter> \\<^bold>- y)", "by (smt compl_closed meet_assoc meet_closed meet_comm meet_join_distrib1 that)"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  y \\<sqinter> (x \\<sqinter> \\<^bold>- x) \\<squnion>\n  x \\<sqinter> (y \\<sqinter> \\<^bold>- y)\n\ngoal (4 subgoals):\n 1. x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n    \\<bottom>\n 2. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n 3. x \\<sqinter> y \\<in> carrier L\n 4. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "then"], ["proof (chain)\npicking this:\n  x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  y \\<sqinter> (x \\<sqinter> \\<^bold>- x) \\<squnion>\n  x \\<sqinter> (y \\<sqinter> \\<^bold>- y)", "show \"(x \\<sqinter> y) \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  y \\<sqinter> (x \\<sqinter> \\<^bold>- x) \\<squnion>\n  x \\<sqinter> (y \\<sqinter> \\<^bold>- y)\n\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n    \\<bottom>", "by (metis bottom_closed bottom_lower le_iff_join le_iff_meet meet_comm meet_compl2_bot that)"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<sqinter> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<bottom>\n\ngoal (3 subgoals):\n 1. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n 2. x \\<sqinter> y \\<in> carrier L\n 3. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n 2. x \\<sqinter> y \\<in> carrier L\n 3. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "have \"(x \\<sqinter> y) \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = (\\<^bold>- y \\<squnion> (x \\<squnion> \\<^bold>- x)) \\<sqinter> (\\<^bold>- x \\<squnion> (y \\<squnion> \\<^bold>- y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n    (\\<^bold>- y \\<squnion> (x \\<squnion> \\<^bold>- x)) \\<sqinter>\n    (\\<^bold>- x \\<squnion> (y \\<squnion> \\<^bold>- y))", "by (smt compl_closed join_meet_distrib2 join_assoc join_comm local.boolean_algebra_axioms that join_closed)"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  (\\<^bold>- y \\<squnion> (x \\<squnion> \\<^bold>- x)) \\<sqinter>\n  (\\<^bold>- x \\<squnion> (y \\<squnion> \\<^bold>- y))\n\ngoal (3 subgoals):\n 1. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n 2. x \\<sqinter> y \\<in> carrier L\n 3. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "then"], ["proof (chain)\npicking this:\n  x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  (\\<^bold>- y \\<squnion> (x \\<squnion> \\<^bold>- x)) \\<sqinter>\n  (\\<^bold>- x \\<squnion> (y \\<squnion> \\<^bold>- y))", "show \"(x \\<sqinter> y) \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\""], ["proof (prove)\nusing this:\n  x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) =\n  (\\<^bold>- y \\<squnion> (x \\<squnion> \\<^bold>- x)) \\<sqinter>\n  (\\<^bold>- x \\<squnion> (y \\<squnion> \\<^bold>- y))\n\ngoal (1 subgoal):\n 1. x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>", "by (metis compl_closed join_compl2_top join_right le_iff_join le_iff_meet that top_closed)"], ["proof (state)\nthis:\n  x \\<sqinter> y \\<squnion> (\\<^bold>- x \\<squnion> \\<^bold>- y) = \\<top>\n\ngoal (2 subgoals):\n 1. x \\<sqinter> y \\<in> carrier L\n 2. \\<^bold>- x \\<squnion> \\<^bold>- y \\<in> carrier L", "qed simp_all"], ["", "lemma compl_sup [simp]: \"\\<^bold>- (x \\<squnion> y) = \\<^bold>- x \\<sqinter> \\<^bold>- y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- (x \\<squnion> y) = \\<^bold>- x \\<sqinter> \\<^bold>- y", "by (metis compl_closed compl_inf double_compl meet_closed that)"], ["", "lemma compl_mono:\n  assumes \"x \\<sqsubseteq> y\"\n    and \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- y \\<sqsubseteq> \\<^bold>- x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- y \\<sqsubseteq> \\<^bold>- x", "by (metis assms(1) assms(2) assms(3) compl_closed join_comm le_iff_join le_iff_meet compl_inf)"], ["", "lemma compl_le_compl_iff [simp]: \"\\<^bold>- x \\<sqsubseteq> \\<^bold>- y \\<longleftrightarrow> y \\<sqsubseteq> x\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<^bold>- x \\<sqsubseteq> \\<^bold>- y) = (y \\<sqsubseteq> x)", "using that"], ["proof (prove)\nusing this:\n  x \\<in> carrier L\n  y \\<in> carrier L\n\ngoal (1 subgoal):\n 1. (\\<^bold>- x \\<sqsubseteq> \\<^bold>- y) = (y \\<sqsubseteq> x)", "by (auto dest: compl_mono)"], ["", "lemma compl_le_swap1:\n  assumes \"y \\<sqsubseteq> \\<^bold>- x\" \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"x \\<sqsubseteq> \\<^bold>- y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> \\<^bold>- y", "by (metis assms compl_closed compl_le_compl_iff double_compl)"], ["", "lemma compl_le_swap2:\n  assumes \"\\<^bold>- y \\<sqsubseteq> x\" \"x \\<in> carrier L\" \"y \\<in> carrier L\"\n  shows \"\\<^bold>- x \\<sqsubseteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqsubseteq> y", "by (metis assms compl_closed compl_le_compl_iff double_compl)"], ["", "lemma join_compl_top_left1 [simp]: \"\\<^bold>- x \\<squnion> (x \\<squnion> y) = \\<top>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<squnion> (x \\<squnion> y) = \\<top>", "by (simp add: join_assoc[symmetric])"], ["", "lemma join_compl_top_left2 [simp]: \"x \\<squnion> (\\<^bold>- x \\<squnion> y) = \\<top>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion> (\\<^bold>- x \\<squnion> y) = \\<top>", "using join_compl_top_left1[of \"\\<^bold>- x\" y]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<^bold>- x \\<in> carrier L; y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<^bold>- (\\<^bold>- x) \\<squnion>\n                    (\\<^bold>- x \\<squnion> y) =\n                    \\<top>\n\ngoal (1 subgoal):\n 1. x \\<squnion> (\\<^bold>- x \\<squnion> y) = \\<top>", "by simp"], ["", "lemma meet_compl_bot_left1 [simp]: \"\\<^bold>- x \\<sqinter> (x \\<sqinter> y) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>- x \\<sqinter> (x \\<sqinter> y) = \\<bottom>", "by (simp add: meet_assoc[symmetric])"], ["", "lemma meet_compl_bot_left2 [simp]: \"x \\<sqinter> (\\<^bold>- x \\<sqinter> y) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (\\<^bold>- x \\<sqinter> y) = \\<bottom>", "using meet_compl_bot_left1[of \"\\<^bold>- x\" y]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<^bold>- x \\<in> carrier L; y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> \\<^bold>- (\\<^bold>- x) \\<sqinter>\n                    (\\<^bold>- x \\<sqinter> y) =\n                    \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<sqinter> (\\<^bold>- x \\<sqinter> y) = \\<bottom>", "by simp"], ["", "lemma meet_compl_bot_right [simp]: \"x \\<sqinter> (y \\<sqinter> \\<^bold>- x) = \\<bottom>\" if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> (y \\<sqinter> \\<^bold>- x) = \\<bottom>", "by (metis meet_compl_bot_left2 meet_comm that)"], ["", "lemma xor_closed [intro, simp]: \"\\<lbrakk> x \\<in> carrier L; y \\<in> carrier L \\<rbrakk> \\<Longrightarrow> x \\<oplus> y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L; y \\<in> carrier L\\<rbrakk>\n    \\<Longrightarrow> x \\<oplus> y \\<in> carrier L", "by(simp add: xor_def)"], ["", "lemma xor_comm: \"\\<lbrakk> x \\<in> carrier L; y \\<in> carrier L \\<rbrakk> \\<Longrightarrow> x \\<oplus> y = y \\<oplus> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier L; y \\<in> carrier L\\<rbrakk>\n    \\<Longrightarrow> x \\<oplus> y = y \\<oplus> x", "by(simp add: xor_def meet_join_distrib join_comm)"], ["", "lemma xor_assoc: \"(x \\<oplus> y) \\<oplus> z = x \\<oplus> (y \\<oplus> z)\"\n  if [simp]: \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<oplus> y) \\<oplus> z = x \\<oplus> y \\<oplus> z", "by(simp add: xor_def)(simp add: meet_join_distrib meet_ac join_ac)"], ["", "lemma xor_left_comm: \"x \\<oplus> (y \\<oplus> z) = y \\<oplus> (x \\<oplus> z)\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\" \"z \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> y \\<oplus> z = y \\<oplus> x \\<oplus> z", "using that xor_assoc xor_comm"], ["proof (prove)\nusing this:\n  x \\<in> carrier L\n  y \\<in> carrier L\n  z \\<in> carrier L\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L;\n   ?z \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<oplus> ?z =\n                    ?x \\<oplus> ?y \\<oplus> ?z\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> ?x \\<oplus> ?y = ?y \\<oplus> ?x\n\ngoal (1 subgoal):\n 1. x \\<oplus> y \\<oplus> z = y \\<oplus> x \\<oplus> z", "by auto"], ["", "lemma [simp]:\n  assumes \"x \\<in> carrier L\"\n  shows xor_bot: \"x \\<oplus> \\<bottom> = x\"\n  and bot_xor: \"\\<bottom> \\<oplus> x = x\"\n  and xor_top: \"x \\<oplus> \\<top> = \\<^bold>- x\"\n  and top_xor: \"\\<top> \\<oplus> x = \\<^bold>- x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<oplus> \\<bottom> = x &&& \\<bottom> \\<oplus> x = x) &&&\n    x \\<oplus> \\<top> = \\<^bold>- x &&& \\<top> \\<oplus> x = \\<^bold>- x", "by(simp_all add: xor_def assms)"], ["", "lemma xor_inverse [simp]: \"x \\<oplus> x = \\<bottom>\" if \"x \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> x = \\<bottom>", "by(simp add: xor_def that)"], ["", "lemma xor_left_inverse [simp]: \"x \\<oplus> x \\<oplus> y = y\" if \"x \\<in> carrier L\" \"y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> x \\<oplus> y = y", "using that xor_assoc"], ["proof (prove)\nusing this:\n  x \\<in> carrier L\n  y \\<in> carrier L\n  \\<lbrakk>?x \\<in> carrier L; ?y \\<in> carrier L;\n   ?z \\<in> carrier L\\<rbrakk>\n  \\<Longrightarrow> (?x \\<oplus> ?y) \\<oplus> ?z =\n                    ?x \\<oplus> ?y \\<oplus> ?z\n\ngoal (1 subgoal):\n 1. x \\<oplus> x \\<oplus> y = y", "by fastforce"], ["", "lemmas xor_ac = xor_assoc xor_comm xor_left_comm"], ["", "lemma inj_on_xor: \"inj_on ((\\<oplus>) x) (carrier L)\" if \"x \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((\\<oplus>) x) (carrier L)", "by(rule inj_onI)(metis that xor_left_inverse)"], ["", "lemma surj_xor: \"(\\<oplus>) x ` carrier L = carrier L\" if [simp]: \"x \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<oplus>) x ` carrier L = carrier L", "proof(rule Set.set_eqI, rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "assume [simp]: \"y \\<in> carrier L\""], ["proof (state)\nthis:\n  y \\<in> carrier L\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "have \"x \\<oplus> y \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<oplus> y \\<in> carrier L", "by(simp)"], ["proof (state)\nthis:\n  x \\<oplus> y \\<in> carrier L\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "moreover"], ["proof (state)\nthis:\n  x \\<oplus> y \\<in> carrier L\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "have \"y = x \\<oplus> (x \\<oplus> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x \\<oplus> x \\<oplus> y", "by simp"], ["proof (state)\nthis:\n  y = x \\<oplus> x \\<oplus> y\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L\n 2. \\<And>xa.\n       xa \\<in> carrier L \\<Longrightarrow>\n       xa \\<in> (\\<oplus>) x ` carrier L", "ultimately"], ["proof (chain)\npicking this:\n  x \\<oplus> y \\<in> carrier L\n  y = x \\<oplus> x \\<oplus> y", "show \"y \\<in> (\\<oplus>) x ` carrier L\""], ["proof (prove)\nusing this:\n  x \\<oplus> y \\<in> carrier L\n  y = x \\<oplus> x \\<oplus> y\n\ngoal (1 subgoal):\n 1. y \\<in> (\\<oplus>) x ` carrier L", "by(rule rev_image_eqI)"], ["proof (state)\nthis:\n  y \\<in> (\\<oplus>) x ` carrier L\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (\\<oplus>) x ` carrier L \\<Longrightarrow>\n       xa \\<in> carrier L", "qed auto"], ["", "lemma one_time_pad: \"map_spmf ((\\<oplus>) x) (spmf_of_set (carrier L)) = spmf_of_set (carrier L)\"\n  if \"x \\<in> carrier L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf ((\\<oplus>) x) (spmf_of_set (carrier L)) =\n    spmf_of_set (carrier L)", "apply(subst map_spmf_of_set_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on ((\\<oplus>) x) (carrier L)\n 2. spmf_of_set ((\\<oplus>) x ` carrier L) = spmf_of_set (carrier L)", "apply(rule inj_on_xor[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set ((\\<oplus>) x ` carrier L) = spmf_of_set (carrier L)", "by(simp add: surj_xor that)"], ["", "end"], ["", "end"]]}