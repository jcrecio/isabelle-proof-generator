{"file_name": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities/ISQ_Conversion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities", "problem_names": ["lemma Conversion_props [simp]: \"LengthF c > 0\" \"MassF c > 0\" \"TimeF c > 0\" \"CurrentF c > 0\"\n  \"TemperatureF c > 0\" \"AmountF c > 0\" \"IntensityF c > 0\"", "lemma convinv_inverse [simp]: \"convinv (convinv c) = c\"", "lemma convcomp_inv [simp]: \"c \\<circ>\\<^sub>C inv\\<^sub>C c = id\\<^sub>C\"", "lemma inv_convcomp [simp]: \"inv\\<^sub>C c \\<circ>\\<^sub>C c = id\\<^sub>C\"", "lemma Conversion_invs [simp]: \"LengthF (inv\\<^sub>C x) = inverse (LengthF x)\" \"MassF (inv\\<^sub>C x) = inverse (MassF x)\"\n  \"TimeF (inv\\<^sub>C x) = inverse (TimeF x)\" \"CurrentF (inv\\<^sub>C x) = inverse (CurrentF x)\"\n  \"TemperatureF (inv\\<^sub>C x) = inverse (TemperatureF x)\" \"AmountF (inv\\<^sub>C x) = inverse (AmountF x)\"\n  \"IntensityF (inv\\<^sub>C x) = inverse (IntensityF x)\"", "lemma Conversion_comps [simp]: \"LengthF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = LengthF c\\<^sub>1 * LengthF c\\<^sub>2\"\n  \"MassF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = MassF c\\<^sub>1 * MassF c\\<^sub>2\"\n  \"TimeF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = TimeF c\\<^sub>1 * TimeF c\\<^sub>2\"\n  \"CurrentF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = CurrentF c\\<^sub>1 * CurrentF c\\<^sub>2\"\n  \"TemperatureF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = TemperatureF c\\<^sub>1 * TemperatureF c\\<^sub>2\"\n  \"AmountF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = AmountF c\\<^sub>1 * AmountF c\\<^sub>2\"\n  \"IntensityF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = IntensityF c\\<^sub>1 * IntensityF c\\<^sub>2\"", "lemma dconvfactor_pos [simp]: \"dconvfactor c d > 0\"", "lemma dconvfactor_nz [simp]: \"dconvfactor c d \\<noteq> 0\"", "lemma dconvfactor_convinv: \"dconvfactor (convinv c) d = inverse (dconvfactor c d)\"", "lemma dconvfactor_id [simp]: \"dconvfactor id\\<^sub>C d = 1\"", "lemma dconvfactor_compose:\n  \"dconvfactor (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) d = dconvfactor c\\<^sub>1 d * dconvfactor c\\<^sub>2 d\"", "lemma dconvfactor_inverse:\n  \"dconvfactor c (inverse d) = inverse (dconvfactor c d)\"", "lemma dconvfactor_times:\n  \"dconvfactor c (x \\<cdot> y) = dconvfactor c x \\<cdot> dconvfactor c y\"", "lemma magQ_qconv: \"\\<lbrakk>qconv c q\\<rbrakk>\\<^sub>Q = of_rat (dconvfactor c (dimQ q)) * \\<lbrakk>q\\<rbrakk>\\<^sub>Q\"", "lemma qconv_id [simp]: \"qconv id\\<^sub>C x = x\"", "lemma qconv_comp: \"qconv (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) x = qconv c\\<^sub>1 (qconv c\\<^sub>2 x)\"", "lemma qconv_convinv [simp]: \"qconv (convinv c) (qconv c x) = x\"", "lemma qconv_scaleQ [simp]: \"qconv c (d *\\<^sub>Q x) = d *\\<^sub>Q qconv c x\"", "lemma qconv_plus [simp]: \"qconv c (x + y) = qconv c x + qconv c y\"", "lemma qconv_minus [simp]: \"qconv c (x - y) = qconv c x - qconv c y\"", "lemma qconv_qmult [simp]: \"qconv c (x \\<^bold>\\<cdot> y) = qconv c x \\<^bold>\\<cdot> qconv c y\"", "lemma qconv_qinverse [simp]: \"qconv c (x\\<^sup>-\\<^sup>\\<one>) = (qconv c x)\\<^sup>-\\<^sup>\\<one>\"", "lemma qconv_Length [simp]: \"qconv c BUNIT(L, _) = LengthF c *\\<^sub>Q BUNIT(L, _)\"", "lemma qconv_Mass [simp]: \"qconv c BUNIT(M, _) = MassF c *\\<^sub>Q BUNIT(M, _)\"", "lemma qconv_Time [simp]: \"qconv c BUNIT(T, _) = TimeF c *\\<^sub>Q BUNIT(T, _)\"", "lemma qconv_Current [simp]: \"qconv c BUNIT(I, _) = CurrentF c *\\<^sub>Q BUNIT(I, _)\"", "lemma qconv_Temperature [simp]: \"qconv c BUNIT(\\<Theta>, _) = TemperatureF c *\\<^sub>Q BUNIT(\\<Theta>, _)\"", "lemma qconv_Amount [simp]: \"qconv c BUNIT(N, _) = AmountF c *\\<^sub>Q BUNIT(N, _)\"", "lemma qconv_Intensity [simp]: \"qconv c BUNIT(J, _) = IntensityF c *\\<^sub>Q BUNIT(J, _)\""], "translations": [["", "lemma Conversion_props [simp]: \"LengthF c > 0\" \"MassF c > 0\" \"TimeF c > 0\" \"CurrentF c > 0\"\n  \"TemperatureF c > 0\" \"AmountF c > 0\" \"IntensityF c > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < LengthF c &&& 0 < MassF c &&& 0 < TimeF c) &&&\n    (0 < CurrentF c &&& 0 < TemperatureF c) &&&\n    0 < AmountF c &&& 0 < IntensityF c", "by (transfer, simp)+"], ["", "subsection \\<open> Conversion Algebra \\<close>"], ["", "lift_definition convid :: \"'s::unit_system \\<Rightarrow>\\<^sub>U 's\" (\"id\\<^sub>C\")\nis \"\n  \\<lparr> cLengthF = 1\n  , cMassF = 1\n  , cTimeF = 1\n  , cCurrentF = 1\n  , cTemperatureF = 1\n  , cAmountF = 1\n  , cIntensityF = 1 \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < cLengthF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cMassF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cTimeF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cCurrentF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cTemperatureF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cAmountF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr> \\<and>\n    0 < cIntensityF\n         \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n            cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr>", "by simp"], ["", "lift_definition convcomp :: \n  \"('s\\<^sub>2 \\<Rightarrow>\\<^sub>U 's\\<^sub>3::unit_system) \\<Rightarrow> ('s\\<^sub>1::unit_system \\<Rightarrow>\\<^sub>U 's\\<^sub>2::unit_system) \\<Rightarrow> ('s\\<^sub>1 \\<Rightarrow>\\<^sub>U 's\\<^sub>3)\" (infixl \"\\<circ>\\<^sub>C\" 55) is\n\"\\<lambda> c\\<^sub>1 c\\<^sub>2. \\<lparr> cLengthF = cLengthF c\\<^sub>1 * cLengthF c\\<^sub>2, cMassF = cMassF c\\<^sub>1 * cMassF c\\<^sub>2\n         , cTimeF = cTimeF c\\<^sub>1 * cTimeF c\\<^sub>2, cCurrentF = cCurrentF c\\<^sub>1 * cCurrentF c\\<^sub>2\n         , cTemperatureF = cTemperatureF c\\<^sub>1 * cTemperatureF c\\<^sub>2\n         , cAmountF = cAmountF c\\<^sub>1 * cAmountF c\\<^sub>2, cIntensityF = cIntensityF c\\<^sub>1 * cIntensityF c\\<^sub>2 \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ConvSchema_ext1 ConvSchema_ext2.\n       \\<lbrakk>0 < cLengthF ConvSchema_ext1 \\<and>\n                0 < cMassF ConvSchema_ext1 \\<and>\n                0 < cTimeF ConvSchema_ext1 \\<and>\n                0 < cCurrentF ConvSchema_ext1 \\<and>\n                0 < cTemperatureF ConvSchema_ext1 \\<and>\n                0 < cAmountF ConvSchema_ext1 \\<and>\n                0 < cIntensityF ConvSchema_ext1;\n        0 < cLengthF ConvSchema_ext2 \\<and>\n        0 < cMassF ConvSchema_ext2 \\<and>\n        0 < cTimeF ConvSchema_ext2 \\<and>\n        0 < cCurrentF ConvSchema_ext2 \\<and>\n        0 < cTemperatureF ConvSchema_ext2 \\<and>\n        0 < cAmountF ConvSchema_ext2 \\<and>\n        0 < cIntensityF ConvSchema_ext2\\<rbrakk>\n       \\<Longrightarrow> 0 < cLengthF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cMassF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cTimeF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cCurrentF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cTemperatureF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cAmountF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF\n                                    ConvSchema_ext2\\<rparr> \\<and>\n                         0 < cIntensityF\n                              \\<lparr>cLengthF =\n  cLengthF ConvSchema_ext1 \\<cdot> cLengthF ConvSchema_ext2,\n                                 cMassF =\n                                   cMassF ConvSchema_ext1 \\<cdot>\n                                   cMassF ConvSchema_ext2,\n                                 cTimeF =\n                                   cTimeF ConvSchema_ext1 \\<cdot>\n                                   cTimeF ConvSchema_ext2,\n                                 cCurrentF =\n                                   cCurrentF ConvSchema_ext1 \\<cdot>\n                                   cCurrentF ConvSchema_ext2,\n                                 cTemperatureF =\n                                   cTemperatureF ConvSchema_ext1 \\<cdot>\n                                   cTemperatureF ConvSchema_ext2,\n                                 cAmountF =\n                                   cAmountF ConvSchema_ext1 \\<cdot>\n                                   cAmountF ConvSchema_ext2,\n                                 cIntensityF =\n                                   cIntensityF ConvSchema_ext1 \\<cdot>\n                                   cIntensityF ConvSchema_ext2\\<rparr>", "by simp"], ["", "lift_definition convinv :: \"('s\\<^sub>1::unit_system \\<Rightarrow>\\<^sub>U 's\\<^sub>2::unit_system) \\<Rightarrow> ('s\\<^sub>2 \\<Rightarrow>\\<^sub>U 's\\<^sub>1)\" (\"inv\\<^sub>C\") is\n\"\\<lambda> c. \\<lparr> cLengthF = inverse (cLengthF c), cMassF = inverse (cMassF c), cTimeF = inverse (cTimeF c)\n      , cCurrentF = inverse (cCurrentF c), cTemperatureF = inverse (cTemperatureF c)\n      , cAmountF = inverse (cAmountF c), cIntensityF = inverse (cIntensityF c) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ConvSchema_exta.\n       0 < cLengthF ConvSchema_exta \\<and>\n       0 < cMassF ConvSchema_exta \\<and>\n       0 < cTimeF ConvSchema_exta \\<and>\n       0 < cCurrentF ConvSchema_exta \\<and>\n       0 < cTemperatureF ConvSchema_exta \\<and>\n       0 < cAmountF ConvSchema_exta \\<and>\n       0 < cIntensityF ConvSchema_exta \\<Longrightarrow>\n       0 < cLengthF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cMassF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cTimeF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cCurrentF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cTemperatureF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cAmountF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF =\n                 inverse (cIntensityF ConvSchema_exta)\\<rparr> \\<and>\n       0 < cIntensityF\n            \\<lparr>cLengthF = inverse (cLengthF ConvSchema_exta),\n               cMassF = inverse (cMassF ConvSchema_exta),\n               cTimeF = inverse (cTimeF ConvSchema_exta),\n               cCurrentF = inverse (cCurrentF ConvSchema_exta),\n               cTemperatureF = inverse (cTemperatureF ConvSchema_exta),\n               cAmountF = inverse (cAmountF ConvSchema_exta),\n               cIntensityF = inverse (cIntensityF ConvSchema_exta)\\<rparr>", "by simp"], ["", "lemma convinv_inverse [simp]: \"convinv (convinv c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv\\<^sub>C (inv\\<^sub>C c) = c", "by (transfer, simp)"], ["", "lemma convcomp_inv [simp]: \"c \\<circ>\\<^sub>C inv\\<^sub>C c = id\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<circ>\\<^sub>C inv\\<^sub>C c = id\\<^sub>C", "by (transfer, simp)"], ["", "lemma inv_convcomp [simp]: \"inv\\<^sub>C c \\<circ>\\<^sub>C c = id\\<^sub>C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv\\<^sub>C c \\<circ>\\<^sub>C c = id\\<^sub>C", "by (transfer, simp)"], ["", "lemma Conversion_invs [simp]: \"LengthF (inv\\<^sub>C x) = inverse (LengthF x)\" \"MassF (inv\\<^sub>C x) = inverse (MassF x)\"\n  \"TimeF (inv\\<^sub>C x) = inverse (TimeF x)\" \"CurrentF (inv\\<^sub>C x) = inverse (CurrentF x)\"\n  \"TemperatureF (inv\\<^sub>C x) = inverse (TemperatureF x)\" \"AmountF (inv\\<^sub>C x) = inverse (AmountF x)\"\n  \"IntensityF (inv\\<^sub>C x) = inverse (IntensityF x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LengthF (inv\\<^sub>C x) = inverse (LengthF x) &&&\n     MassF (inv\\<^sub>C x) = inverse (MassF x) &&&\n     TimeF (inv\\<^sub>C x) = inverse (TimeF x)) &&&\n    (CurrentF (inv\\<^sub>C x) = inverse (CurrentF x) &&&\n     TemperatureF (inv\\<^sub>C x) = inverse (TemperatureF x)) &&&\n    AmountF (inv\\<^sub>C x) = inverse (AmountF x) &&&\n    IntensityF (inv\\<^sub>C x) = inverse (IntensityF x)", "by (transfer, simp)+"], ["", "lemma Conversion_comps [simp]: \"LengthF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = LengthF c\\<^sub>1 * LengthF c\\<^sub>2\"\n  \"MassF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = MassF c\\<^sub>1 * MassF c\\<^sub>2\"\n  \"TimeF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = TimeF c\\<^sub>1 * TimeF c\\<^sub>2\"\n  \"CurrentF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = CurrentF c\\<^sub>1 * CurrentF c\\<^sub>2\"\n  \"TemperatureF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = TemperatureF c\\<^sub>1 * TemperatureF c\\<^sub>2\"\n  \"AmountF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = AmountF c\\<^sub>1 * AmountF c\\<^sub>2\"\n  \"IntensityF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) = IntensityF c\\<^sub>1 * IntensityF c\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LengthF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n     LengthF c\\<^sub>1 \\<cdot> LengthF c\\<^sub>2 &&&\n     MassF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n     MassF c\\<^sub>1 \\<cdot> MassF c\\<^sub>2 &&&\n     TimeF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n     TimeF c\\<^sub>1 \\<cdot> TimeF c\\<^sub>2) &&&\n    (CurrentF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n     CurrentF c\\<^sub>1 \\<cdot> CurrentF c\\<^sub>2 &&&\n     TemperatureF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n     TemperatureF c\\<^sub>1 \\<cdot> TemperatureF c\\<^sub>2) &&&\n    AmountF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n    AmountF c\\<^sub>1 \\<cdot> AmountF c\\<^sub>2 &&&\n    IntensityF (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) =\n    IntensityF c\\<^sub>1 \\<cdot> IntensityF c\\<^sub>2", "by (transfer, simp)+"], ["", "subsection \\<open> Conversion Functions \\<close>"], ["", "definition dconvfactor :: \"('s\\<^sub>1::unit_system \\<Rightarrow>\\<^sub>U 's\\<^sub>2::unit_system) \\<Rightarrow> Dimension \\<Rightarrow> rat\" where\n\"dconvfactor c d = \n  LengthF c ^\\<^sub>Z dim_nth d Length\n  * MassF c ^\\<^sub>Z dim_nth d Mass \n  * TimeF c ^\\<^sub>Z dim_nth d Time \n  * CurrentF c ^\\<^sub>Z dim_nth d Current \n  * TemperatureF c ^\\<^sub>Z dim_nth d Temperature\n  * AmountF c ^\\<^sub>Z dim_nth d Amount\n  * IntensityF c ^\\<^sub>Z dim_nth d Intensity\""], ["", "lemma dconvfactor_pos [simp]: \"dconvfactor c d > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dconvfactor c d", "by (simp add: dconvfactor_def)"], ["", "lemma dconvfactor_nz [simp]: \"dconvfactor c d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor c d \\<noteq> 0", "by (metis dconvfactor_pos less_numeral_extra(3))"], ["", "lemma dconvfactor_convinv: \"dconvfactor (convinv c) d = inverse (dconvfactor c d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor (inv\\<^sub>C c) d = inverse (dconvfactor c d)", "by (simp add: dconvfactor_def intpow_inverse[THEN sym])"], ["", "lemma dconvfactor_id [simp]: \"dconvfactor id\\<^sub>C d = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor id\\<^sub>C d = 1", "by (simp add: dconvfactor_def, transfer, simp)"], ["", "lemma dconvfactor_compose:\n  \"dconvfactor (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) d = dconvfactor c\\<^sub>1 d * dconvfactor c\\<^sub>2 d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) d =\n    dconvfactor c\\<^sub>1 d \\<cdot> dconvfactor c\\<^sub>2 d", "by (simp add: dconvfactor_def, transfer, simp add: mult_ac intpow_mult_distrib)"], ["", "lemma dconvfactor_inverse:\n  \"dconvfactor c (inverse d) = inverse (dconvfactor c d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor c (inverse d) = inverse (dconvfactor c d)", "by (simp add: dconvfactor_def inverse_dimvec_def intpow_uminus)"], ["", "lemma dconvfactor_times:\n  \"dconvfactor c (x \\<cdot> y) = dconvfactor c x \\<cdot> dconvfactor c y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dconvfactor c (x \\<cdot> y) = dconvfactor c x \\<cdot> dconvfactor c y", "by (auto simp add: dconvfactor_def  mult_ac intpow_mult_combine times_dimvec_def)"], ["", "lift_definition qconv :: \"('s\\<^sub>1, 's\\<^sub>2) Conversion \\<Rightarrow> ('a::field_char_0)['d::dim_type, 's\\<^sub>1::unit_system] \\<Rightarrow> 'a['d, 's\\<^sub>2::unit_system]\"\nis \"\\<lambda> c q. \\<lparr> mag = of_rat (dconvfactor c (dim q)) * mag q, dim = dim q, unit_sys = unit \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Conversion Quantity_exta.\n       Quantity.dim Quantity_exta = QD('d) \\<Longrightarrow>\n       Quantity.dim\n        \\<lparr>mag =\n                  of_rat\n                   (dconvfactor Conversion\n                     (Quantity.dim Quantity_exta)) \\<cdot>\n                  mag Quantity_exta,\n           dim = Quantity.dim Quantity_exta, unit_sys = unit\\<rparr> =\n       QD('d)", "by simp"], ["", "lemma magQ_qconv: \"\\<lbrakk>qconv c q\\<rbrakk>\\<^sub>Q = of_rat (dconvfactor c (dimQ q)) * \\<lbrakk>q\\<rbrakk>\\<^sub>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qconv c q\\<rbrakk>\\<^sub>Q =\n    of_rat (dconvfactor c (dimQ q)) \\<cdot> \\<lbrakk>q\\<rbrakk>\\<^sub>Q", "by (simp add: si_def, transfer, simp)"], ["", "lemma qconv_id [simp]: \"qconv id\\<^sub>C x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv id\\<^sub>C x = x", "by (transfer', simp add: Measurement_System_eq_intro)"], ["", "lemma qconv_comp: \"qconv (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) x = qconv c\\<^sub>1 (qconv c\\<^sub>2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv (c\\<^sub>1 \\<circ>\\<^sub>C c\\<^sub>2) x =\n    qconv c\\<^sub>1 (qconv c\\<^sub>2 x)", "by (transfer, simp add: dconvfactor_compose of_rat_mult)"], ["", "lemma qconv_convinv [simp]: \"qconv (convinv c) (qconv c x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv (inv\\<^sub>C c) (qconv c x) = x", "by (transfer, simp add: dconvfactor_convinv mult.assoc[THEN sym] of_rat_mult[THEN sym] Measurement_System_eq_intro)"], ["", "lemma qconv_scaleQ [simp]: \"qconv c (d *\\<^sub>Q x) = d *\\<^sub>Q qconv c x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c (d *\\<^sub>Q x) = d *\\<^sub>Q qconv c x", "by (transfer, simp)"], ["", "lemma qconv_plus [simp]: \"qconv c (x + y) = qconv c x + qconv c y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c (x + y) = qconv c x + qconv c y", "by (transfer, auto simp add: plus_Quantity_ext_def mult.commute ring_class.ring_distribs)"], ["", "lemma qconv_minus [simp]: \"qconv c (x - y) = qconv c x - qconv c y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c (x - y) = qconv c x - qconv c y", "by (transfer, auto simp add: plus_Quantity_ext_def mult.commute ring_class.ring_distribs)"], ["", "lemma qconv_qmult [simp]: \"qconv c (x \\<^bold>\\<cdot> y) = qconv c x \\<^bold>\\<cdot> qconv c y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c (x \\<^bold>\\<cdot> y) = qconv c x \\<^bold>\\<cdot> qconv c y", "by (transfer, simp add: times_Quantity_ext_def times_Measurement_System_ext_def dconvfactor_times of_rat_mult)"], ["", "lemma qconv_qinverse [simp]: \"qconv c (x\\<^sup>-\\<^sup>\\<one>) = (qconv c x)\\<^sup>-\\<^sup>\\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c (x\\<^sup>-\\<^sup>\\<one>) = qconv c x\\<^sup>-\\<^sup>\\<one>", "by (transfer, simp add: inverse_Quantity_ext_def inverse_Measurement_System_ext_def dconvfactor_inverse of_rat_inverse)"], ["", "lemma qconv_Length [simp]: \"qconv c BUNIT(L, _) = LengthF c *\\<^sub>Q BUNIT(L, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(L, 'b) = LengthF c *\\<^sub>Q BUNIT(L, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Mass [simp]: \"qconv c BUNIT(M, _) = MassF c *\\<^sub>Q BUNIT(M, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(M, 'b) = MassF c *\\<^sub>Q BUNIT(M, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Time [simp]: \"qconv c BUNIT(T, _) = TimeF c *\\<^sub>Q BUNIT(T, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(T, 'b) = TimeF c *\\<^sub>Q BUNIT(T, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Current [simp]: \"qconv c BUNIT(I, _) = CurrentF c *\\<^sub>Q BUNIT(I, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(I, 'b) = CurrentF c *\\<^sub>Q BUNIT(I, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Temperature [simp]: \"qconv c BUNIT(\\<Theta>, _) = TemperatureF c *\\<^sub>Q BUNIT(\\<Theta>, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(\\<Theta>, 'b) =\n    TemperatureF c *\\<^sub>Q BUNIT(\\<Theta>, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Amount [simp]: \"qconv c BUNIT(N, _) = AmountF c *\\<^sub>Q BUNIT(N, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(N, 'b) = AmountF c *\\<^sub>Q BUNIT(N, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "lemma qconv_Intensity [simp]: \"qconv c BUNIT(J, _) = IntensityF c *\\<^sub>Q BUNIT(J, _)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qconv c BUNIT(J, 'b) = IntensityF c *\\<^sub>Q BUNIT(J, 'a)", "by (simp add: dconvfactor_def magQ_qconv si_eq mk_BaseDim_def one_dimvec_def)"], ["", "end"]]}