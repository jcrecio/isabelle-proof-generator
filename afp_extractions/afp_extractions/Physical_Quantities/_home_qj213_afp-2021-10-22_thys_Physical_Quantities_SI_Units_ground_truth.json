{"file_name": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities/SI_Units.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities", "problem_names": ["lemma BaseUnits: \n  \"is_base_unit metre\" \"is_base_unit second\" \"is_base_unit kilogram\" \"is_base_unit ampere\"\n  \"is_base_unit kelvin\" \"is_base_unit mole\" \"is_base_unit candela\"", "lemma \"(metre \\<^bold>\\<cdot> second\\<^sup>-\\<^sup>\\<one>) \\<^bold>\\<cdot> second \\<cong>\\<^sub>Q metre\"", "lemma qmconv_self: \"QMC('s::metrifiable \\<rightarrow> 's) = id\""], "translations": [["", "lemma BaseUnits: \n  \"is_base_unit metre\" \"is_base_unit second\" \"is_base_unit kilogram\" \"is_base_unit ampere\"\n  \"is_base_unit kelvin\" \"is_base_unit mole\" \"is_base_unit candela\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_base_unit metre &&&\n     is_base_unit second &&& is_base_unit kilogram) &&&\n    (is_base_unit ampere &&& is_base_unit kelvin) &&&\n    is_base_unit mole &&& is_base_unit candela", "by (simp_all add: mk_base_unit)"], ["", "text \\<open> The effect of the above encoding is that we can use the SI base units as synonyms for their\n  corresponding dimensions at the type level. \\<close>"], ["", "type_synonym 'a metre    = \"'a[Length, SI]\""], ["", "type_synonym 'a second   = \"'a[Time, SI]\""], ["", "type_synonym 'a kilogram = \"'a[Mass, SI]\""], ["", "type_synonym 'a ampere   = \"'a[Current, SI]\""], ["", "type_synonym 'a kelvin   = \"'a[Temperature, SI]\""], ["", "type_synonym 'a mole     = \"'a[Amount, SI]\""], ["", "type_synonym 'a candela  = \"'a[Intensity, SI]\""], ["", "text \\<open> We can therefore construct a quantity such as \\<^term>\\<open>5 :: rat metre\\<close>, which unambiguously \n  identifies that the unit of $5$ is metres using the type system. This works because each base\n  unit it the one element. \\<close>"], ["", "subsection \\<open> Example Unit Equations \\<close>"], ["", "lemma \"(metre \\<^bold>\\<cdot> second\\<^sup>-\\<^sup>\\<one>) \\<^bold>\\<cdot> second \\<cong>\\<^sub>Q metre\""], ["proof (prove)\ngoal (1 subgoal):\n 1. metre \\<^bold>\\<cdot> second\\<^sup>-\\<^sup>\\<one> \\<^bold>\\<cdot>\n    second \\<cong>\\<^sub>Q\n    metre", "by (si_calc)"], ["", "subsection \\<open> Metrification \\<close>"], ["", "class metrifiable = unit_system +\n  fixes convschema :: \"'a itself \\<Rightarrow> ('a, SI) Conversion\" (\"schema\\<^sub>C\")"], ["", "instantiation SI :: metrifiable\nbegin"], ["", "lift_definition convschema_SI :: \"SI itself \\<Rightarrow> (SI, SI) Conversion\"\nis \"\\<lambda> s. \n  \\<lparr> cLengthF = 1\n  , cMassF = 1\n  , cTimeF = 1\n  , cCurrentF = 1\n  , cTemperatureF = 1\n  , cAmountF = 1\n  , cIntensityF = 1 \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>itself.\n       0 < cLengthF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cMassF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cTimeF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cCurrentF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cTemperatureF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cAmountF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1,\n               cIntensityF = 1\\<rparr> \\<and>\n       0 < cIntensityF\n            \\<lparr>cLengthF = 1, cMassF = 1, cTimeF = 1, cCurrentF = 1,\n               cTemperatureF = 1, cAmountF = 1, cIntensityF = 1\\<rparr>", "by simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(SI, metrifiable_class)", ".."], ["", "end"], ["", "abbreviation metrify :: \"('a::field_char_0)['d::dim_type, 's::metrifiable] \\<Rightarrow> 'a['d::dim_type, SI]\" where\n\"metrify \\<equiv> qconv (convschema (TYPE('s)))\""], ["", "text \\<open> Conversion via SI units \\<close>"], ["", "abbreviation qmconv :: \n  \"'s\\<^sub>1 itself \\<Rightarrow> 's\\<^sub>2 itself\n   \\<Rightarrow> ('a::field_char_0)['d::dim_type, 's\\<^sub>1::metrifiable] \n   \\<Rightarrow> 'a['d::dim_type, 's\\<^sub>2::metrifiable]\" where\n\"qmconv s\\<^sub>1 s\\<^sub>2 x \\<equiv> qconv (inv\\<^sub>C (schema\\<^sub>C s\\<^sub>2) \\<circ>\\<^sub>C schema\\<^sub>C s\\<^sub>1) x\""], ["", "syntax\n  \"_qmconv\" :: \"type \\<Rightarrow> type \\<Rightarrow> logic\" (\"QMC'(_ \\<rightarrow> _')\")"], ["", "translations\n  \"QMC('s\\<^sub>1 \\<rightarrow> 's\\<^sub>2)\" == \"CONST qmconv TYPE('s\\<^sub>1) TYPE('s\\<^sub>2)\""], ["", "lemma qmconv_self: \"QMC('s::metrifiable \\<rightarrow> 's) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. QMC('s \\<rightarrow> 's) = id", "by (simp add: fun_eq_iff)"], ["", "end"]]}