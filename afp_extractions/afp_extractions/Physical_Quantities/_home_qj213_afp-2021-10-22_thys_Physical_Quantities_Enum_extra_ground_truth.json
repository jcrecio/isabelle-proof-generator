{"file_name": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities/Enum_extra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Physical_Quantities", "problem_names": ["lemma first_ind_length:\n  \"x \\<in> set(xs) \\<Longrightarrow> first_ind xs x i < length(xs) + i\"", "lemma nth_first_ind:\n  \"\\<lbrakk> distinct xs; x \\<in> set(xs) \\<rbrakk> \\<Longrightarrow> xs ! (first_ind xs x i - i) = x\"", "lemma first_ind_nth:\n  \"\\<lbrakk> distinct xs; i < length xs \\<rbrakk> \\<Longrightarrow> first_ind xs (xs ! i) j = i + j\"", "lemma length_enum_CARD: \"length ENUM('a) = CARD('a)\"", "lemma CARD_length_enum: \"CARD('a) = length ENUM('a)\"", "lemma enum_ind_less_CARD [simp]: \"enum_ind (x :: 'a::enum) < CARD('a)\"", "lemma enum_nth_ind [simp]: \"Enum.enum ! (enum_ind x) = x\"", "lemma enum_distinct_conv_nth:\n  assumes \"i < CARD('a)\" \"j < CARD('a)\" \"ENUM('a) ! i = ENUM('a) ! j\"\n  shows \"i = j\"", "lemma enum_ind_nth [simp]:\n  assumes \"i < CARD('a::enum)\"\n  shows \"enum_ind (ENUM('a) ! i) = i\"", "lemma enum_ind_spec:\n  \"enum_ind (x :: 'a::enum) = (THE i. i < CARD('a) \\<and> Enum.enum ! i = x)\"", "lemma enum_ind_inj: \"inj (enum_ind :: 'a::enum \\<Rightarrow> nat)\"", "lemma enum_ind_neq [simp]: \"x \\<noteq> y \\<Longrightarrow> enum_ind x \\<noteq> enum_ind y\""], "translations": [["", "lemma first_ind_length:\n  \"x \\<in> set(xs) \\<Longrightarrow> first_ind xs x i < length(xs) + i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> first_ind xs x i < length xs + i", "by (induct xs arbitrary: i, auto, metis add_Suc_right)"], ["", "lemma nth_first_ind:\n  \"\\<lbrakk> distinct xs; x \\<in> set(xs) \\<rbrakk> \\<Longrightarrow> xs ! (first_ind xs x i - i) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> xs ! (first_ind xs x i - i) = x", "apply (induct xs arbitrary: i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>distinct []; x \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> [] ! (first_ind [] x i - i) = x\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> xs ! (first_ind xs x i - i) = x;\n        distinct (a # xs); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! (first_ind (a # xs) x i - i) = x", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i. xs ! (first_ind xs x i - i) = x; a \\<notin> set xs;\n        distinct xs; a \\<noteq> x; x \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! (first_ind xs x (Suc i) - i) = x", "apply (metis One_nat_def add.right_neutral add_Suc_right add_diff_cancel_left' diff_diff_left empty_iff first_ind.simps(2) list.set(1) nat.simps(3) neq_Nil_conv nth_Cons' zero_diff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma first_ind_nth:\n  \"\\<lbrakk> distinct xs; i < length xs \\<rbrakk> \\<Longrightarrow> first_ind xs (xs ! i) j = i + j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; i < length xs\\<rbrakk>\n    \\<Longrightarrow> first_ind xs (xs ! i) j = i + j", "apply (induct xs arbitrary: i j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>distinct []; i < length []\\<rbrakk>\n       \\<Longrightarrow> first_ind [] ([] ! i) j = i + j\n 2. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>distinct xs; i < length xs\\<rbrakk>\n                   \\<Longrightarrow> first_ind xs (xs ! i) j = i + j;\n        distinct (a # xs); i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> first_ind (a # xs) ((a # xs) ! i) j = i + j", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i j.\n                   i < length xs \\<Longrightarrow>\n                   first_ind xs (xs ! i) j = i + j;\n        i < Suc (length xs); a \\<notin> set xs; distinct xs;\n        a = (a # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> i = 0\n 2. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i j.\n                   i < length xs \\<Longrightarrow>\n                   first_ind xs (xs ! i) j = i + j;\n        i < Suc (length xs); a \\<notin> set xs; distinct xs;\n        a \\<noteq> (a # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> first_ind xs ((a # xs) ! i) (Suc j) = i + j", "apply (metis less_Suc_eq_le nth_equal_first_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i j.\n                   i < length xs \\<Longrightarrow>\n                   first_ind xs (xs ! i) j = i + j;\n        i < Suc (length xs); a \\<notin> set xs; distinct xs;\n        a \\<noteq> (a # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> first_ind xs ((a # xs) ! i) (Suc j) = i + j", "using less_Suc_eq_0_disj"], ["proof (prove)\nusing this:\n  (?m < Suc ?n) = (?m = 0 \\<or> (\\<exists>j. ?m = Suc j \\<and> j < ?n))\n\ngoal (1 subgoal):\n 1. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i j.\n                   i < length xs \\<Longrightarrow>\n                   first_ind xs (xs ! i) j = i + j;\n        i < Suc (length xs); a \\<notin> set xs; distinct xs;\n        a \\<noteq> (a # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> first_ind xs ((a # xs) ! i) (Suc j) = i + j", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open> Enumeration Indices \\<close>"], ["", "syntax\n  \"_ENUM\" :: \"type \\<Rightarrow> logic\" (\"ENUM'(_')\")"], ["", "translations\n  \"ENUM('a)\" => \"CONST Enum.enum :: ('a::enum) list\""], ["", "text \\<open> Extract a unique natural number associated with an enumerated value by using its index\n  in the characteristic list \\<^term>\\<open>ENUM('a)\\<close>. \\<close>"], ["", "definition enum_ind :: \"'a::enum \\<Rightarrow> nat\" where\n\"enum_ind (x :: 'a::enum) = first_ind ENUM('a) x 0\""], ["", "lemma length_enum_CARD: \"length ENUM('a) = CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length enum_class.enum = CARD('a)", "by (simp add: UNIV_enum distinct_card enum_distinct)"], ["", "lemma CARD_length_enum: \"CARD('a) = length ENUM('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) = length enum_class.enum", "by (simp add: length_enum_CARD)"], ["", "lemma enum_ind_less_CARD [simp]: \"enum_ind (x :: 'a::enum) < CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_ind x < CARD('a)", "using first_ind_length[of x, OF in_enum, of 0]"], ["proof (prove)\nusing this:\n  first_ind enum_class.enum x 0 < length enum_class.enum + 0\n\ngoal (1 subgoal):\n 1. enum_ind x < CARD('a)", "by (simp add: enum_ind_def CARD_length_enum)"], ["", "lemma enum_nth_ind [simp]: \"Enum.enum ! (enum_ind x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_class.enum ! enum_ind x = x", "using nth_first_ind[of Enum.enum x 0, OF enum_distinct in_enum]"], ["proof (prove)\nusing this:\n  enum_class.enum ! (first_ind enum_class.enum x 0 - 0) = x\n\ngoal (1 subgoal):\n 1. enum_class.enum ! enum_ind x = x", "by (simp add: enum_ind_def)"], ["", "lemma enum_distinct_conv_nth:\n  assumes \"i < CARD('a)\" \"j < CARD('a)\" \"ENUM('a) ! i = ENUM('a) ! j\"\n  shows \"i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = j", "have \"(\\<forall>i<length ENUM('a). \\<forall>j<length ENUM('a). i \\<noteq> j \\<longrightarrow> ENUM('a) ! i \\<noteq> ENUM('a) ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length enum_class.enum.\n       \\<forall>j<length enum_class.enum.\n          i \\<noteq> j \\<longrightarrow>\n          enum_class.enum ! i \\<noteq> enum_class.enum ! j", "using distinct_conv_nth[of \"ENUM('a)\", THEN sym]"], ["proof (prove)\nusing this:\n  (\\<forall>i<length enum_class.enum.\n      \\<forall>j<length enum_class.enum.\n         i \\<noteq> j \\<longrightarrow>\n         enum_class.enum ! i \\<noteq> enum_class.enum ! j) =\n  distinct enum_class.enum\n\ngoal (1 subgoal):\n 1. \\<forall>i<length enum_class.enum.\n       \\<forall>j<length enum_class.enum.\n          i \\<noteq> j \\<longrightarrow>\n          enum_class.enum ! i \\<noteq> enum_class.enum ! j", "by (simp add: enum_distinct)"], ["proof (state)\nthis:\n  \\<forall>i<length enum_class.enum.\n     \\<forall>j<length enum_class.enum.\n        i \\<noteq> j \\<longrightarrow>\n        enum_class.enum ! i \\<noteq> enum_class.enum ! j\n\ngoal (1 subgoal):\n 1. i = j", "with assms"], ["proof (chain)\npicking this:\n  i < CARD('a)\n  j < CARD('a)\n  enum_class.enum ! i = enum_class.enum ! j\n  \\<forall>i<length enum_class.enum.\n     \\<forall>j<length enum_class.enum.\n        i \\<noteq> j \\<longrightarrow>\n        enum_class.enum ! i \\<noteq> enum_class.enum ! j", "show ?thesis"], ["proof (prove)\nusing this:\n  i < CARD('a)\n  j < CARD('a)\n  enum_class.enum ! i = enum_class.enum ! j\n  \\<forall>i<length enum_class.enum.\n     \\<forall>j<length enum_class.enum.\n        i \\<noteq> j \\<longrightarrow>\n        enum_class.enum ! i \\<noteq> enum_class.enum ! j\n\ngoal (1 subgoal):\n 1. i = j", "by (auto simp add: CARD_length_enum)"], ["proof (state)\nthis:\n  i = j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enum_ind_nth [simp]:\n  assumes \"i < CARD('a::enum)\"\n  shows \"enum_ind (ENUM('a) ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_ind (enum_class.enum ! i) = i", "using assms first_ind_nth[of \"ENUM('a)\" i 0, OF enum_distinct]"], ["proof (prove)\nusing this:\n  i < CARD('a)\n  i < length enum_class.enum \\<Longrightarrow>\n  first_ind enum_class.enum (enum_class.enum ! i) 0 = i + 0\n\ngoal (1 subgoal):\n 1. enum_ind (enum_class.enum ! i) = i", "by (simp add: enum_ind_def CARD_length_enum)"], ["", "lemma enum_ind_spec:\n  \"enum_ind (x :: 'a::enum) = (THE i. i < CARD('a) \\<and> Enum.enum ! i = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_ind x = (THE i. i < CARD('a) \\<and> enum_class.enum ! i = x)", "proof (rule sym, rule the_equality, safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. enum_ind x < CARD('a)\n 2. enum_class.enum ! enum_ind x = x\n 3. \\<And>i.\n       \\<lbrakk>i < CARD('a); x = enum_class.enum ! i\\<rbrakk>\n       \\<Longrightarrow> i = enum_ind (enum_class.enum ! i)", "show \"enum_ind x < CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_ind x < CARD('a)", "by (simp add: enum_ind_less_CARD[of x])"], ["proof (state)\nthis:\n  enum_ind x < CARD('a)\n\ngoal (2 subgoals):\n 1. enum_class.enum ! enum_ind x = x\n 2. \\<And>i.\n       \\<lbrakk>i < CARD('a); x = enum_class.enum ! i\\<rbrakk>\n       \\<Longrightarrow> i = enum_ind (enum_class.enum ! i)", "show \"enum_class.enum ! enum_ind x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enum_class.enum ! enum_ind x = x", "by simp"], ["proof (state)\nthis:\n  enum_class.enum ! enum_ind x = x\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < CARD('a); x = enum_class.enum ! i\\<rbrakk>\n       \\<Longrightarrow> i = enum_ind (enum_class.enum ! i)", "show \"\\<And>i. i < CARD('a) \\<Longrightarrow> x = ENUM('a) ! i \\<Longrightarrow> i = enum_ind (ENUM('a) ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < CARD('a); x = enum_class.enum ! i\\<rbrakk>\n       \\<Longrightarrow> i = enum_ind (enum_class.enum ! i)", "by (simp add: enum_ind_nth)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < CARD('a); x = enum_class.enum ! ?i\\<rbrakk>\n  \\<Longrightarrow> ?i = enum_ind (enum_class.enum ! ?i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enum_ind_inj: \"inj (enum_ind :: 'a::enum \\<Rightarrow> nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj enum_ind", "by (rule inj_on_inverseI[of _ \"\\<lambda> i. ENUM('a) ! i\"], simp)"], ["", "lemma enum_ind_neq [simp]: \"x \\<noteq> y \\<Longrightarrow> enum_ind x \\<noteq> enum_ind y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> enum_ind x \\<noteq> enum_ind y", "by (simp add: enum_ind_inj inj_eq)"], ["", "end"]]}